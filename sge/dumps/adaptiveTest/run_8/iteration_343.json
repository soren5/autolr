[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6], [1, 3, 0, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.8048571348190308, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 7, 3, 4, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.174132417268946, 1.7180579925462034, 1.6787661384235615, 1.1550431863554025, 0.9647177091883693, 0.9715305162915275, 0.7724197340080877, 0.7391978541401163, 0.6746326777929045, 0.6376447176038943, 0.6372321579497583, 0.5764750511796483, 0.5737568716709373, 0.5714517875023806, 0.5454019889965694, 0.5429780787606643, 0.5128989881921863, 0.5055427000806347, 0.49326053168858364, 0.46491947782321486, 0.46724289015236625, 0.4600372080632236, 0.4673663849930454, 0.4424439188889572, 0.43095213785352265, 0.4188288297863873, 0.42442242886018383, 0.408044166159337, 0.39002234318772516, 0.39234249184176023, 0.38853169093751133, 0.3964115138720559], "accuracy": [0.2541275918483734, 0.4173821210861206, 0.4309866726398468, 0.5654470920562744, 0.6260731816291809, 0.6464139223098755, 0.7054550051689148, 0.7257958054542542, 0.7428345084190369, 0.7601373791694641, 0.7598732113838196, 0.7779685854911804, 0.7843085527420044, 0.7852331399917603, 0.7921014428138733, 0.793950617313385, 0.8112534880638123, 0.8101968169212341, 0.8182538747787476, 0.8285563588142395, 0.8265751004219055, 0.8265751004219055, 0.8261788487434387, 0.8321225643157959, 0.8413683772087097, 0.8450667262077332, 0.8379341959953308, 0.847840428352356, 0.857218325138092, 0.8552370667457581, 0.8543124794960022, 0.8529917001724243], "val_loss": [1.6841410909380232, 1.365140642438616, 0.9886232103620257, 0.7617257492882865, 0.6624612297330584, 0.6253045286451068, 0.5641454458236694, 0.5495188406535557, 0.5019917998995099, 0.5184287514005389, 0.468055146081107, 0.46797652755464825, 0.4731306348528181, 0.43648178236825125, 0.47447941984449116, 0.4616867814745222, 0.42007856709616526, 0.4122825860977173, 0.4141458783830915, 0.4026449918746948, 0.42105848448617117, 0.3772545542035784, 0.4010885613305228, 0.42484237466539654, 0.3817536490304129, 0.3999871952193124, 0.34552726575306486, 0.3631955214909145, 0.41233145339148386, 0.3798662083489554, 0.3640048589025225, 0.3798002941267831], "val_accuracy": [0.37433332204818726, 0.4506666660308838, 0.5396666526794434, 0.656333327293396, 0.6840000152587891, 0.7016666531562805, 0.7393333315849304, 0.753333330154419, 0.7826666831970215, 0.7646666765213013, 0.7903333306312561, 0.7883333563804626, 0.781333327293396, 0.8033333420753479, 0.7883333563804626, 0.7900000214576721, 0.8230000138282776, 0.824999988079071, 0.815666675567627, 0.8309999704360962, 0.8143333196640015, 0.8353333473205566, 0.8220000267028809, 0.8133333325386047, 0.8410000205039978, 0.8456666469573975, 0.8553333282470703, 0.8493333458900452, 0.8159999847412109, 0.8336666822433472, 0.8516666889190674, 0.8356666564941406]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6], [1, 3, 0, 1, 3, 2], [99, 47, 50, 41, 34]], "fitness": -0.7028571367263794, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.3018069940866055, 2.3008040178563727, 2.299401624091565, 2.296379440826841, 2.29491194934263, 2.2909699162440513, 2.286324332025246, 2.281107344946699, 2.2742889962884743, 2.2686998294313367, 2.261619250000649, 2.2535569407700264, 2.2450677238797403, 2.2366382790405392, 2.227276620517207, 2.214179125601794, 2.202358786865484, 2.1910579551275555, 2.1768689548901565, 2.1589369907701617, 2.1420399589057393, 2.1223533206123952, 2.100640419121227, 2.0748646972579663, 2.047355712916574, 2.0153800626677167, 1.9804925427633961, 1.9446339313270016, 1.9054783663934232, 1.8543972906388029, 1.8141094360369197, 1.7643538180784448, 1.712569068986915, 1.6706608694620955, 1.6177261688485358, 1.5747067714490124, 1.532445977156456, 1.4937638673705511, 1.4739540496506727, 1.4312188634468093, 1.4296115686738842, 1.4028977121202748, 1.3844058738329847, 1.3798243711180833, 1.364711358153258, 1.373299586522565, 1.3771912749606259, 1.3698139705394694, 1.3749869486533293, 1.4085315195419186, 1.4027529663775717, 1.3773913334987702, 1.3410065563016988, 1.3059666452312104, 1.2758063949283402, 1.2319644323634182, 1.204440145712361, 1.1767019634438292, 1.1552722952101666, 1.1277928141680975, 1.0916808201510593, 1.0572411091635334, 1.00904201377164, 1.00965132821647, 0.9634039166848799, 0.949375908632383, 0.9372039560660111, 0.9115819011334777, 0.9160170272955128, 0.9166456768383927, 0.9136277476731324], "accuracy": [0.09153348207473755, 0.1022322028875351, 0.09576013684272766, 0.10302469879388809, 0.11134592443704605, 0.11834631860256195, 0.13234710693359375, 0.14515915513038635, 0.16523577272891998, 0.1732928305864334, 0.2052568942308426, 0.22454100847244263, 0.24078720808029175, 0.2646942138671875, 0.280940443277359, 0.30022454261779785, 0.31581032276153564, 0.3283582031726837, 0.34183067083358765, 0.3595297932624817, 0.35503897070884705, 0.38026681542396545, 0.3757759928703308, 0.38568219542503357, 0.3879276216030121, 0.3995509147644043, 0.4099854826927185, 0.4155329465866089, 0.4201558530330658, 0.4341566562652588, 0.433760404586792, 0.4403645396232605, 0.44604411721229553, 0.44749704003334045, 0.4649319648742676, 0.46651697158813477, 0.4811781942844391, 0.4884427487850189, 0.48527276515960693, 0.497820645570755, 0.5070664286613464, 0.5108968615531921, 0.5196143388748169, 0.5263505578041077, 0.5274072289466858, 0.5322942733764648, 0.5328226089477539, 0.5404834151268005, 0.5396909117698669, 0.540219247341156, 0.5498613119125366, 0.5577862858772278, 0.5653150081634521, 0.5773345828056335, 0.5819574594497681, 0.5983357429504395, 0.6083740592002869, 0.6145819425582886, 0.6235635876655579, 0.628582775592804, 0.6341302394866943, 0.6399418711662292, 0.6489235162734985, 0.6428477168083191, 0.6565843224525452, 0.655527651309967, 0.6572447419166565, 0.6613393425941467, 0.657508909702301, 0.6561880707740784, 0.6560559868812561], "val_loss": [1.970179898398263, 1.9690470695495605, 1.9671929904392786, 1.9646243367876326, 1.961371626172747, 1.9574315888541085, 1.9528412137712752, 1.947622231074742, 1.941790989467076, 1.935375758579799, 1.9283996309552873, 1.9208192825317383, 1.9126274926321847, 1.9037936074393136, 1.8942366327558244, 1.8838682174682617, 1.87249721799578, 1.859901019505092, 1.845865045275007, 1.830139092036656, 1.812467438834054, 1.7925898688180106, 1.7702360834394182, 1.7450989314488001, 1.7168866225651331, 1.685321467263358, 1.6501313618251257, 1.6111313956124442, 1.5682084560394287, 1.5214533124651228, 1.4712621825081962, 1.4181490625653947, 1.3629568304334367, 1.306779214314052, 1.2508088179997034, 1.1962337834494454, 1.1440963404519218, 1.0950932502746582, 1.0497616359165736, 1.0081168242863245, 0.9700765269143241, 0.9354722499847412, 0.9039790289742606, 0.8752222061157227, 0.8489190680640084, 0.8260692187717983, 0.8081215279442924, 0.7961847271238055, 0.789631724357605, 0.7852631466729301, 0.7779763085501534, 0.7648637465068272, 0.747308748109, 0.7307742493493217, 0.7202816179820469, 0.7165465525218419, 0.717173593384879, 0.7185739278793335, 0.7171280894960675, 0.7108782359531948, 0.6998819283076695, 0.6857555593763079, 0.6710585526057652, 0.6586801665169852, 0.6513783761433193, 0.6499521902629307, 0.6528037445885795, 0.6581547600882394, 0.6645571334021432, 0.6711266381399972, 0.6776524441582816], "val_accuracy": [0.04066666588187218, 0.04933333396911621, 0.06133333221077919, 0.07866666465997696, 0.11100000143051147, 0.14900000393390656, 0.19966666400432587, 0.2460000067949295, 0.29766666889190674, 0.33933332562446594, 0.3623333275318146, 0.37566667795181274, 0.3893333375453949, 0.3986666798591614, 0.4116666615009308, 0.4243333339691162, 0.4313333332538605, 0.44200000166893005, 0.44566667079925537, 0.4516666531562805, 0.4569999873638153, 0.46399998664855957, 0.47200000286102295, 0.484333336353302, 0.4933333396911621, 0.49799999594688416, 0.5049999952316284, 0.5133333206176758, 0.5199999809265137, 0.5256666541099548, 0.5356666445732117, 0.543666660785675, 0.5546666383743286, 0.5683333277702332, 0.578000009059906, 0.5833333134651184, 0.5910000205039978, 0.5993333458900452, 0.6110000014305115, 0.6256666779518127, 0.6413333415985107, 0.6536666750907898, 0.6656666398048401, 0.6693333387374878, 0.6766666769981384, 0.6836666464805603, 0.6850000023841858, 0.6866666674613953, 0.6773333549499512, 0.675000011920929, 0.675000011920929, 0.6869999766349792, 0.6943333148956299, 0.7009999752044678, 0.706333339214325, 0.7073333263397217, 0.7046666741371155, 0.7039999961853027, 0.7070000171661377, 0.7089999914169312, 0.7046666741371155, 0.7039999961853027, 0.7070000171661377, 0.7129999995231628, 0.7183333039283752, 0.7223333120346069, 0.7179999947547913, 0.7176666855812073, 0.7146666646003723, 0.7086666822433472, 0.7036666870117188]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6], [1, 3, 1, 3, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.404285728931427, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 7, 3, 4, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), alpha), sigma)", "other_info": {"loss": [2.421809286032654, 2.2840772379564176, 2.148169386451428, 2.2401730562355446, 2.3504889947926255, 2.320180161848611, 2.3084225820559774], "accuracy": [0.19561484456062317, 0.14291374385356903, 0.20974771678447723, 0.15321621298789978, 0.18333113193511963, 0.11094967275857925, 0.09602430462837219], "val_loss": [1.9755380494253976, 1.7357164110456194, 1.9708307129996163, 1.9714618410382951, 1.9421510696411133, 1.9825297083173479, 1.9764300755092077], "val_accuracy": [0.10633333027362823, 0.4323333203792572, 0.09700000286102295, 0.09966666996479034, 0.20000000298023224, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [1, 3, 2, 3, 6, 6, 3, 5, 6, 5], [1, 3, 0, 1, 3, 2, 0, 3, 1], [44, 47, 50, 41, 34]], "fitness": -0.26571428775787354, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 19, 10, 9, 2], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(sigma, tf.math.multiply(beta, tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.square(sigma), alpha))", "other_info": {"loss": [2.4022594573963523, 2.2327269778795182, 2.4755573331278393, 2.303641797907049, 2.302753755492368, 2.302314855230168], "accuracy": [0.1978602558374405, 0.22322018444538116, 0.10157178342342377, 0.09760929644107819, 0.09760929644107819, 0.10460969805717468], "val_loss": [1.7446483884538924, 2.8702795846121654, 1.9740544727870397, 1.9734279087611608, 1.97326626096453, 1.9712062563214983], "val_accuracy": [0.27266666293144226, 0.10233332961797714, 0.12800000607967377, 0.10166666656732559, 0.10400000214576721, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [19, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6], [1, 3, 0, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.23999999463558197, "mapping_values": [1, 3, 3, 2, 1, 1, 4, 4, 2, 2, 1, 5, 4, 2, 2, 0, 7, 3, 4, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.254538668963919, 2.3750736131770123, 2.397322840300754, 2.4730706869918184, 2.5423128165274154, 2.6778013504664693], "accuracy": [0.1904636174440384, 0.14978206157684326, 0.14278165996074677, 0.13036586344242096, 0.10949676483869553, 0.09747721254825592], "val_loss": [1.9748982701982771, 2.028285707746233, 2.0954902512686595, 2.1479267392839705, 2.2513557842799594, 2.387563637324742], "val_accuracy": [0.2150000035762787, 0.1616666615009308, 0.13066667318344116, 0.10433333367109299, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [65, 86, 50], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 7, 3, 4, 0, 6, 6, 4, 8, 1, 9, 9, 8, 1, 1, 8, 9, 0], [2, 2, 1, 3, 0, 3, 2, 3, 0, 0], [11, 21, 84, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0], [1, 0, 2, 1, 5, 4, 3, 5, 8, 0, 9, 7, 9, 2, 9, 0, 0, 4, 1, 6, 0, 8, 2, 4, 1, 9, 6, 2, 0, 8, 4, 2, 2, 7, 3, 0, 7, 2, 0, 6, 1, 9, 2, 1, 6, 8, 3, 0, 4, 7, 6, 1, 9], [3, 3, 0, 1, 3, 2], [19, 54, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 17, 17, 9, 8, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, beta))), tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.math.negative(grad))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, beta)))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0816272646188736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [89, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [8, 3, 2, 0, 6, 6, 7], [2, 3, 2, 1, 0, 2, 0, 3, 2, 2, 0, 3, 2], [61, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(beta, sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 2, 0, 3, 0, 3, 2, 3, 0, 0], [81, 74, 84, 84, 1, 78], [1, 0, 0, 1, 0], [1, 1, 1, 0], [3, 4, 0], [1, 3], [], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6, 2, 8, 6, 1, 0, 0], [1, 3, 0, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0816272646188736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [0, 3], [20], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 6, 2, 3, 6], [1, 3, 0, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 2, 1, 1, 0, 1, 1, 7, 3, 4, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [74, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 3, 2, 3, 6, 8, 6, 2], [1, 3, 0, 1, 1, 2, 1, 3], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 16, 8, 8, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, alpha))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, alpha), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [6, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [3, 9, 2, 3, 6], [1, 3, 0, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07779685407876968, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [21, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [4, 3, 0], [4, 4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 3, 1, 3, 6, 2, 8, 6, 1, 0, 0], [1, 3, 0, 1, 3, 2, 2, 3, 1], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 5, 4, 2, 2, 0, 20, 11, 9, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.multiply(alpha, sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(alpha, tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(sigma, beta), tf.math.negative(tf.math.negative(beta)))), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 1, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1], [3, 3, 0, 9], [4, 3], [46], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6], [1, 3, 2, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 3, 6, 4, 4, 0, 1, 7, 3, 4, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(grad)), tf.math.divide_no_nan(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.negative(sigma)), tf.math.add(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), beta), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17342491447925568, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [1, 3, 2, 3, 6, 9, 8, 1, 4], [1, 3, 0, 1, 3, 2, 0], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 16, 9, 7, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3, 0], [0, 3], [29], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 9, 4, 3, 6, 9, 7, 7, 6, 7, 4, 5, 1, 3, 4], [1, 1, 0, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 5, 4, 2, 2, 1, 5, 3, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 8, 3, 4, 0, 6, 9, 6, 9, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 1, 3, 3, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 9, 2, 3, 6], [1, 3, 0, 1, 3, 2], [42, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3567466911874693, 3.045931270519, 4.888879619490563, 7.986955919065464, 12.44770316588896, 17.910956268753942, 24.95853804710629], "accuracy": [0.0948355570435524, 0.10077928751707077, 0.10117553919553757, 0.09536388516426086, 0.0952318087220192, 0.10038304328918457, 0.10434553027153015], "val_loss": [2.097829750605992, 2.7907281603131975, 4.322506087166922, 6.653397423880441, 9.755902971540179, 13.673851830618721, 18.46636417933873], "val_accuracy": [0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 3, 0, 3, 2, 3, 0, 0], [45, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 3, 6, 3, 0, 0, 8, 4], [2, 1, 2, 1, 3, 2, 0, 3, 2, 2, 0, 3, 2], [44, 95, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 11, 6, 5, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(beta, alpha), tf.math.negative(tf.math.negative(beta))), alpha), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [8, 8, 2, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [2, 3, 2, 3, 6, 5, 2, 5, 3, 2, 8, 7, 4, 5], [1, 3, 0, 1, 3, 2, 0, 2, 2, 3, 0], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 25, 14, 11, 3], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(alpha, tf.math.add(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(alpha, tf.math.square(tf.math.add(tf.math.square(tf.math.multiply(sigma, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), beta))), beta))))), tf.math.pow(sigma, tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [7, 0, 2, 3, 6], [2, 3, 0, 1, 3, 2], [23, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.negative(sigma))", "other_info": {"loss": [34611.87434836814, 2.3142174395902706, 2.3055260927764385, 2.303489285217001, 2.3029499771320716, 2.302957895425301], "accuracy": [0.1026284471154213, 0.09932637959718704, 0.09589222073554993, 0.09853387624025345, 0.09998679161071777, 0.09747721254825592], "val_loss": [1.991178035736084, 1.9781719616481237, 1.9747294698442732, 1.9738497734069824, 1.9736362184797014, 1.973667894090925], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [19, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 3, 2, 3, 6, 6, 2, 3], [3, 3, 1, 3, 2, 2, 1, 0, 2, 1, 0, 3, 3], [44, 47, 50, 41, 34]], "fitness": -0.06971428543329239, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 17, 8, 9, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.multiply(sigma, sigma), tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(sigma, beta)), tf.math.multiply(beta, alpha))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.301824451043952, 2.301365443728367, 2.301290404039241, 2.300310614401591, 2.301655616900074, 2.3013291270457965, 2.3009286835020117, 2.3004787822582813, 2.2996279823624177, 2.300052701836454, 2.300355150368645, 2.300178794120171, 2.299662743608603, 2.300267374479319, 2.3010729291671774, 2.299169703780731, 2.2996632430563198, 2.3011139224564725, 2.300660866441476, 2.2996594420261607, 2.3005194819567145, 2.3002987088402578, 2.3007889515719695, 2.2997790272871046, 2.299673220264504, 2.300023325556195, 2.2994174885475847, 2.299380368749306, 2.3004212735934013, 2.299412777773094, 2.300925328636749, 2.299329934103173, 2.2992898911816364, 2.2992143795364615, 2.3004352838891355, 2.299705195121478], "accuracy": [0.09113723784685135, 0.10051512718200684, 0.09259014576673508, 0.09642054885625839, 0.09681680053472519, 0.08902391046285629, 0.09417514503002167, 0.09642054885625839, 0.09549596905708313, 0.0936468094587326, 0.09879804402589798, 0.0936468094587326, 0.09642054885625839, 0.10210011899471283, 0.0944393053650856, 0.09285431355237961, 0.09879804402589798, 0.09060890227556229, 0.0952318087220192, 0.09800554811954498, 0.09840179979801178, 0.09734513610601425, 0.09034473448991776, 0.10091137140989304, 0.09734513610601425, 0.0936468094587326, 0.09866596013307571, 0.09998679161071777, 0.09602430462837219, 0.09906221181154251, 0.09589222073554993, 0.1014397069811821, 0.1010434553027153, 0.09787346422672272, 0.0936468094587326, 0.10249637067317963], "val_loss": [1.9704111644199915, 1.970235960824149, 1.9700422968183244, 1.9698762893676758, 1.9697602135794503, 1.9695700236729212, 1.969456740788051, 1.9693716594151087, 1.96929897580828, 1.9692136900765556, 1.9691581726074219, 1.9690846034458704, 1.9690495899745397, 1.9690304483686174, 1.968984603881836, 1.9689696856907435, 1.9690046310424805, 1.969003336770194, 1.9690142359052385, 1.9690726825169154, 1.9690861020769392, 1.9690979548863001, 1.9690991129193987, 1.9691205705915178, 1.969141960144043, 1.9691556521824427, 1.9691480227879115, 1.9691594668797083, 1.969135011945452, 1.9691331045968192, 1.9691243171691895, 1.9691242490495955, 1.9691103526524134, 1.9691134180341447, 1.9691177095685686, 1.969135352543422], "val_accuracy": [0.04100000113248825, 0.043666668236255646, 0.04500000178813934, 0.04533333331346512, 0.04766666516661644, 0.04866666719317436, 0.05066666752099991, 0.052666667848825455, 0.0533333346247673, 0.05433333292603493, 0.054999999701976776, 0.0573333315551281, 0.05900000035762787, 0.05966666713356972, 0.060333333909511566, 0.05966666713356972, 0.06066666543483734, 0.061666667461395264, 0.06266666948795319, 0.06400000303983688, 0.06566666811704636, 0.06833333522081375, 0.0689999982714653, 0.0716666653752327, 0.07266666740179062, 0.07400000095367432, 0.07466666400432587, 0.07533333450555801, 0.07633333653211594, 0.07699999958276749, 0.07766667008399963, 0.07733333110809326, 0.07666666805744171, 0.07566666603088379, 0.07599999755620956, 0.07599999755620956]}}]