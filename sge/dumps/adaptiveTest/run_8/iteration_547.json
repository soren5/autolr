[{"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 6, 0, 2, 8, 8, 3, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.803428590297699, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.14721315131605, 2.222895001533749, 1.6252100646550929, 1.1404266062429662, 0.8482727214975474, 0.7489961635214605, 0.6999132356324358, 0.6601678439261119, 0.6479096848258348, 0.6089264386050721, 0.5887437574599854, 0.5656409587417344, 0.5702732615797763, 0.53116781805894, 0.5325661475836971, 0.5684576824655811, 0.5148633537102275, 0.4947839871909026, 0.49283278819797, 0.45629113988948145, 0.4734752175790948, 0.45526447274177584, 0.4864965487094902, 0.4522792504463906, 0.4408439027201844, 0.4198492549319451, 0.4482447290582711, 0.4319961965910715, 0.4190731684033582, 0.4275474869272791, 0.38121847496796685, 0.39263770787266533], "accuracy": [0.2852991819381714, 0.19601109623908997, 0.4251750111579895, 0.5875049233436584, 0.6812838315963745, 0.7248712182044983, 0.7329282760620117, 0.754589855670929, 0.7540615797042847, 0.7677981853485107, 0.7757231593132019, 0.7833839654922485, 0.7848368883132935, 0.8054417967796326, 0.798309326171875, 0.7922335267066956, 0.8038568496704102, 0.8098005652427673, 0.8175934553146362, 0.8325188159942627, 0.8189142942428589, 0.8310658931732178, 0.8178576231002808, 0.8335754871368408, 0.8348963260650635, 0.8436138033866882, 0.8315942287445068, 0.8399154543876648, 0.844010055065155, 0.8391229510307312, 0.8617091774940491, 0.8532558679580688], "val_loss": [1.9763594354901994, 1.5773655346461706, 1.1060802936553955, 0.6307755027498517, 0.6278555052621024, 0.5569899763379779, 0.5914241416113717, 0.49014054025922504, 0.48194779668535503, 0.4871921879904611, 0.45118758508137297, 0.4782587971006121, 0.4374319996152605, 0.4423196486064366, 0.48994665486471994, 0.49176108837127686, 0.40124551739011494, 0.4334407704217093, 0.3909182037625994, 0.3922415290560041, 0.39394956827163696, 0.41762265137263704, 0.41661643981933594, 0.3854646512440273, 0.38025724036352976, 0.3992266740117754, 0.35812913519995554, 0.4057656100818089, 0.4413074084690639, 0.3722200563975743, 0.3591944915907724, 0.35928461381367277], "val_accuracy": [0.109333336353302, 0.3479999899864197, 0.5073333382606506, 0.7009999752044678, 0.7106666564941406, 0.7336666584014893, 0.7333333492279053, 0.7753333449363708, 0.7863333225250244, 0.7753333449363708, 0.79666668176651, 0.7699999809265137, 0.8186666369438171, 0.8059999942779541, 0.7573333382606506, 0.7753333449363708, 0.8366666436195374, 0.8130000233650208, 0.8379999995231628, 0.831333339214325, 0.8339999914169312, 0.8103333115577698, 0.8273333311080933, 0.8403333425521851, 0.8489999771118164, 0.828000009059906, 0.8529999852180481, 0.8203333616256714, 0.8223333358764648, 0.8513333201408386, 0.846666693687439, 0.8506666421890259]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 6, 0, 2, 8, 8, 3, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.803428590297699, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.14721315131605, 2.222895001533749, 1.6252100646550929, 1.1404266062429662, 0.8482727214975474, 0.7489961635214605, 0.6999132356324358, 0.6601678439261119, 0.6479096848258348, 0.6089264386050721, 0.5887437574599854, 0.5656409587417344, 0.5702732615797763, 0.53116781805894, 0.5325661475836971, 0.5684576824655811, 0.5148633537102275, 0.4947839871909026, 0.49283278819797, 0.45629113988948145, 0.4734752175790948, 0.45526447274177584, 0.4864965487094902, 0.4522792504463906, 0.4408439027201844, 0.4198492549319451, 0.4482447290582711, 0.4319961965910715, 0.4190731684033582, 0.4275474869272791, 0.38121847496796685, 0.39263770787266533], "accuracy": [0.2852991819381714, 0.19601109623908997, 0.4251750111579895, 0.5875049233436584, 0.6812838315963745, 0.7248712182044983, 0.7329282760620117, 0.754589855670929, 0.7540615797042847, 0.7677981853485107, 0.7757231593132019, 0.7833839654922485, 0.7848368883132935, 0.8054417967796326, 0.798309326171875, 0.7922335267066956, 0.8038568496704102, 0.8098005652427673, 0.8175934553146362, 0.8325188159942627, 0.8189142942428589, 0.8310658931732178, 0.8178576231002808, 0.8335754871368408, 0.8348963260650635, 0.8436138033866882, 0.8315942287445068, 0.8399154543876648, 0.844010055065155, 0.8391229510307312, 0.8617091774940491, 0.8532558679580688], "val_loss": [1.9763594354901994, 1.5773655346461706, 1.1060802936553955, 0.6307755027498517, 0.6278555052621024, 0.5569899763379779, 0.5914241416113717, 0.49014054025922504, 0.48194779668535503, 0.4871921879904611, 0.45118758508137297, 0.4782587971006121, 0.4374319996152605, 0.4423196486064366, 0.48994665486471994, 0.49176108837127686, 0.40124551739011494, 0.4334407704217093, 0.3909182037625994, 0.3922415290560041, 0.39394956827163696, 0.41762265137263704, 0.41661643981933594, 0.3854646512440273, 0.38025724036352976, 0.3992266740117754, 0.35812913519995554, 0.4057656100818089, 0.4413074084690639, 0.3722200563975743, 0.3591944915907724, 0.35928461381367277], "val_accuracy": [0.109333336353302, 0.3479999899864197, 0.5073333382606506, 0.7009999752044678, 0.7106666564941406, 0.7336666584014893, 0.7333333492279053, 0.7753333449363708, 0.7863333225250244, 0.7753333449363708, 0.79666668176651, 0.7699999809265137, 0.8186666369438171, 0.8059999942779541, 0.7573333382606506, 0.7753333449363708, 0.8366666436195374, 0.8130000233650208, 0.8379999995231628, 0.831333339214325, 0.8339999914169312, 0.8103333115577698, 0.8273333311080933, 0.8403333425521851, 0.8489999771118164, 0.828000009059906, 0.8529999852180481, 0.8203333616256714, 0.8223333358764648, 0.8513333201408386, 0.846666693687439, 0.8506666421890259]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 6, 0, 2, 8, 6, 3, 1, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 0, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [11, 55, 31, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.803428590297699, "mapping_values": [1, 21, 21, 13, 8, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.14721315131605, 2.222895001533749, 1.6252100646550929, 1.1404266062429662, 0.8482727214975474, 0.7489961635214605, 0.6999132356324358, 0.6601678439261119, 0.6479096848258348, 0.6089264386050721, 0.5887437574599854, 0.5656409587417344, 0.5702732615797763, 0.53116781805894, 0.5325661475836971, 0.5684576824655811, 0.5148633537102275, 0.4947839871909026, 0.49283278819797, 0.45629113988948145, 0.4734752175790948, 0.45526447274177584, 0.4864965487094902, 0.4522792504463906, 0.4408439027201844, 0.4198492549319451, 0.4482447290582711, 0.4319961965910715, 0.4190731684033582, 0.4275474869272791, 0.38121847496796685, 0.39263770787266533], "accuracy": [0.2852991819381714, 0.19601109623908997, 0.4251750111579895, 0.5875049233436584, 0.6812838315963745, 0.7248712182044983, 0.7329282760620117, 0.754589855670929, 0.7540615797042847, 0.7677981853485107, 0.7757231593132019, 0.7833839654922485, 0.7848368883132935, 0.8054417967796326, 0.798309326171875, 0.7922335267066956, 0.8038568496704102, 0.8098005652427673, 0.8175934553146362, 0.8325188159942627, 0.8189142942428589, 0.8310658931732178, 0.8178576231002808, 0.8335754871368408, 0.8348963260650635, 0.8436138033866882, 0.8315942287445068, 0.8399154543876648, 0.844010055065155, 0.8391229510307312, 0.8617091774940491, 0.8532558679580688], "val_loss": [1.9763594354901994, 1.5773655346461706, 1.1060802936553955, 0.6307755027498517, 0.6278555052621024, 0.5569899763379779, 0.5914241416113717, 0.49014054025922504, 0.48194779668535503, 0.4871921879904611, 0.45118758508137297, 0.4782587971006121, 0.4374319996152605, 0.4423196486064366, 0.48994665486471994, 0.49176108837127686, 0.40124551739011494, 0.4334407704217093, 0.3909182037625994, 0.3922415290560041, 0.39394956827163696, 0.41762265137263704, 0.41661643981933594, 0.3854646512440273, 0.38025724036352976, 0.3992266740117754, 0.35812913519995554, 0.4057656100818089, 0.4413074084690639, 0.3722200563975743, 0.3591944915907724, 0.35928461381367277], "val_accuracy": [0.109333336353302, 0.3479999899864197, 0.5073333382606506, 0.7009999752044678, 0.7106666564941406, 0.7336666584014893, 0.7333333492279053, 0.7753333449363708, 0.7863333225250244, 0.7753333449363708, 0.79666668176651, 0.7699999809265137, 0.8186666369438171, 0.8059999942779541, 0.7573333382606506, 0.7753333449363708, 0.8366666436195374, 0.8130000233650208, 0.8379999995231628, 0.831333339214325, 0.8339999914169312, 0.8103333115577698, 0.8273333311080933, 0.8403333425521851, 0.8489999771118164, 0.828000009059906, 0.8529999852180481, 0.8203333616256714, 0.8223333358764648, 0.8513333201408386, 0.846666693687439, 0.8506666421890259]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 4, 6, 9, 3, 0, 8, 3, 3, 6, 0, 5, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 0, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 31, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 0, 0, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.2565714418888092, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 6, 3, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), beta)", "other_info": {"loss": [3.269785530673294, 2.214713883390516, 2.3051933960403828, 2.3028556401813667, 2.236932606603239, 2.304859176240719], "accuracy": [0.16021661460399628, 0.17831197381019592, 0.1006472036242485, 0.1026284471154213, 0.18412363529205322, 0.09760929644107819], "val_loss": [1.9431828090122767, 1.9769078663417272, 1.9738429614475794, 1.971198899405343, 1.9754718371800013, 1.9736653055463518], "val_accuracy": [0.2696666717529297, 0.10233332961797714, 0.10233332961797714, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 4, 6, 6, 3, 2, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 3, 0, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 45, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 0, 0, 0], [8, 2, 0, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 6, 2, 9, 2, 9], [2, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [48, 25, 50, 71, 34]], "fitness": -0.2565714418888092, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(alpha, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.divide_no_nan(beta, sigma), beta)", "other_info": {"loss": [3.269785530673294, 2.214713883390516, 2.3051933960403828, 2.3028556401813667, 2.236932606603239, 2.304859176240719], "accuracy": [0.16021661460399628, 0.17831197381019592, 0.1006472036242485, 0.1026284471154213, 0.18412363529205322, 0.09760929644107819], "val_loss": [1.9431828090122767, 1.9769078663417272, 1.9738429614475794, 1.971198899405343, 1.9754718371800013, 1.9736653055463518], "val_accuracy": [0.2696666717529297, 0.10233332961797714, 0.10233332961797714, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 2, 6, 0, 2, 8, 8, 2, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0], [8, 2, 0, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.2565714418888092, "mapping_values": [1, 18, 18, 11, 7, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))), tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [3.269785530673294, 2.214713883390516, 2.3051933960403828, 2.3028556401813667, 2.236932606603239, 2.304859176240719], "accuracy": [0.16021661460399628, 0.17831197381019592, 0.1006472036242485, 0.1026284471154213, 0.18412363529205322, 0.09760929644107819], "val_loss": [1.9431828090122767, 1.9769078663417272, 1.9738429614475794, 1.971198899405343, 1.9754718371800013, 1.9736653055463518], "val_accuracy": [0.2696666717529297, 0.10233332961797714, 0.10233332961797714, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 0, 6, 9, 2, 8, 0, 3, 1, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 30, 45, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 0, 0, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 9, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.1362857073545456, "mapping_values": [1, 12, 12, 8, 4, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.negative(grad)), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [1.9739414652197464e+24, 2.2865948683323564e+24, 2.2335319578852706e+24, 2.2874738821996378e+24, 2.3156452326094239e+24, 2.2493433271517898e+24], "accuracy": [0.11147800832986832, 0.11121384054422379, 0.11227050423622131, 0.11372341960668564, 0.10896842926740646, 0.11821424216032028], "val_loss": [1.4988286731118454e+24, 1.4988286731118454e+24, 1.4988286731118454e+24, 1.4988286731118454e+24, 1.4988286731118454e+24, 1.4988286731118454e+24], "val_accuracy": [0.13366666436195374, 0.13366666436195374, 0.13366666436195374, 0.13366666436195374, 0.13366666436195374, 0.13366666436195374]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 6, 0, 2, 8, 8, 3, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 9, 5, 4, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(sigma, beta), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10315678268671036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 4, 6, 1, 3, 2, 8, 0, 2, 6, 6, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 88, 95, 12], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 0, 0, 0], [8, 3, 0], [4, 3], [], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 3, 2, 9, 5, 9, 6, 8], [0, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 8, 3, 4], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10315678268671036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 4, 6, 8, 3, 2, 8, 0, 3, 6, 0, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 0, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 0, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [0, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 5, 2, 3, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3020572586460135, 2.3025884179233826, 2.3025872971891586, 2.3025874461732156, 2.3025873245863537, 2.302587841952466], "accuracy": [0.09721305221319199, 0.0940430611371994, 0.09787346422672272, 0.09272222965955734, 0.09708096832036972, 0.09391097724437714], "val_loss": [1.973644597189767, 1.973644529070173, 1.9736436435154505, 1.9736438478742326, 1.9736434391566686, 1.973644188472203], "val_accuracy": [0.10400000214576721, 0.09733333438634872, 0.10233332961797714, 0.10233332961797714, 0.09733333438634872, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 6, 0, 2, 8, 8, 3, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1207474.731378221, 2.5076141607145734, 2.415024251418894, 2.434649299747042, 2.398432794075128, 2.4918575417553006, 2.4101810283066336, 2.45029274083053, 2.4023250855191542], "accuracy": [0.09998679161071777, 0.10091137140989304, 0.1018359512090683, 0.10011887550354004, 0.09576013684272766, 0.09972262382507324, 0.10117553919553757, 0.09998679161071777, 0.09615638852119446], "val_loss": [2.1456287928989957, 2.1124368395124162, 2.023495946611677, 2.0171608243669783, 2.1337838172912598, 2.1553018433707103, 1.990729604448591, 2.0508738926478793, 2.1023037093026296], "val_accuracy": [0.09833333641290665, 0.10233332961797714, 0.09966666996479034, 0.10400000214576721, 0.09966666996479034, 0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 4, 6, 6, 3, 2, 8, 0, 3, 2, 3, 3, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 0, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 31, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 0, 0, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 1, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10315678268671036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 6, 0, 2, 8, 8, 3, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 0, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 9, 6, 3, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [2.302483376006818, 2.303020216076838, 2.302922846729005, 2.302862283875205, 2.3028441860124405, 2.3029657658206757, 2.302943321629097, 2.3029256395108946], "accuracy": [0.09774138033390045, 0.09232597798109055, 0.09549596905708313, 0.08942015469074249, 0.09457138925790787, 0.09959053993225098, 0.0956280529499054, 0.09232597798109055], "val_loss": [1.973623548235212, 1.9736754553658622, 1.973620891571045, 1.9736560412815638, 1.973695959363665, 1.9736057690211706, 1.9736302239554269, 1.9737276349748885], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.10233332961797714, 0.09966666996479034, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 6, 1, 2, 8, 8, 3, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 6, 6, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0746268630027771, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 6, 1, 3, 5, 6, 8, 8, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 0, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 1, 1], [1, 0, 0, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [3, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 9, 5, 4, 3], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, alpha), tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.sqrt(grad))), grad))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2011117.3149007307, 2.313931584562907, 2.3055051929993855, 2.303443790127683, 2.302953323022391, 2.3029850958644156], "accuracy": [0.09985470771789551, 0.09470347315073013, 0.09391097724437714, 0.09153348207473755, 0.09589222073554993, 0.09866596013307571], "val_loss": [1.9906089646475655, 1.9783175332205636, 1.9748954772949219, 1.9740236827305384, 1.9738034520830428, 1.9736433029174805], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10233332961797714, 0.10400000214576721, 0.10000000149011612, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 6, 0, 2, 8, 2, 3, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 0, 1, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 3, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 9, 6, 3, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [1910057.16532768, 2.669086871508043, 2.4832129079463257, 2.5666400796434017, 2.6309598524808853, 2.461817990330626, 2.6156094245875376, 2.625319305459475], "accuracy": [0.09985470771789551, 0.10302469879388809, 0.09813763201236725, 0.09998679161071777, 0.10447761416435242, 0.10355303436517715, 0.09655263274908066, 0.09760929644107819], "val_loss": [2.3360700607299805, 2.28293514251709, 2.3051473753792897, 2.2020178522382463, 2.2946014404296875, 2.3057081358773366, 2.1155922753470287, 2.2360538755144392], "val_accuracy": [0.09833333641290665, 0.09966666996479034, 0.10400000214576721, 0.10233332961797714, 0.09966666996479034, 0.10400000214576721, 0.09733333438634872, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 6, 6, 2, 8, 8, 9, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 0, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 0, 0, 0], [8, 2, 0, 0], [5, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [2, 9, 2, 9, 2, 9], [0, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 8, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(alpha), tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3020519009828093, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10315678268671036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [4, 4, 3, 6, 3, 2, 8, 0, 3, 2, 3, 3, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 0, 2, 0, 0, 1, 0, 0, 0, 3, 2, 2], [22, 5, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 0, 1, 0], [8, 2, 0, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 3, 2, 9, 2, 9], [0, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 10, 9, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.pow(tf.math.add(alpha, alpha), tf.math.multiply(grad, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.301634532081736, 2.3023403831177602, 2.303386022764001, 2.307195328198656, 2.324856425603903, 2.428819297657761], "accuracy": [0.10791176557540894, 0.10394927859306335, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9737273624965124, 1.9741520200456892, 1.9758495603288924, 1.9832047734941756, 2.019753932952881, 2.3039488792419434], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 0, 6, 6, 9, 2, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 0, 0], [5, 2, 0, 0], [5, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [0, 3, 0, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.add(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3020519009828093, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10315678268671036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 6, 0, 2, 8, 8, 3, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 19, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.multiply(beta, beta))", "other_info": {"loss": [2.302053597310058, 2.3025863448374655, 2.3025847858111024, 2.3025858357534936, 2.302585393084102, 2.302584534544183, 2.30258640252903, 2.3025861971760313, 2.3025888557431564, 2.3025867561103017], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736488887241908, 1.973649365561349, 1.9736523628234863, 1.9736521584647042, 1.973653861454555, 1.9736600603376115, 1.973658629826137, 1.9736546107700892, 1.9736542020525252, 1.9736530440194267], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]