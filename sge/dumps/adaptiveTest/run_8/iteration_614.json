[{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8142856955528259, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0527516293913037, 1.4704666920877199, 1.1026851707335554, 0.8992056874960578, 0.8013845583577245, 0.746299839558272, 0.6911994086563973, 0.712557513038984, 0.6738774459895173, 0.632027910456697, 0.5905895439499264, 0.603958806286493, 0.5737103708368865, 0.5609067927860486, 0.5392669541504185, 0.527402838286376, 0.5201041178853836, 0.5076228025771717, 0.4892545612756492, 0.4784921574444583, 0.4963997980984935, 0.45540024355307795, 0.463404544529394, 0.45068302446305397, 0.43645075496161667, 0.42094433662315417, 0.4353900926972204, 0.4064129547963541, 0.4328192267648107, 0.4079283428678675, 0.38820091719719335, 0.41155771363397176, 0.38561574561862644, 0.3811236311967079, 0.36761155254915484, 0.38090757930582664, 0.3554605548573271, 0.35213351150104444, 0.3697164785852522, 0.3357665356376057, 0.3537283745565907], "accuracy": [0.3167349100112915, 0.4963677227497101, 0.5949016213417053, 0.6643772125244141, 0.7020208835601807, 0.7168141603469849, 0.7360982894897461, 0.7272487282752991, 0.7466648817062378, 0.7561748623847961, 0.7713643908500671, 0.7691190242767334, 0.7799497842788696, 0.7849689722061157, 0.8031964302062988, 0.7988376617431641, 0.802800178527832, 0.8094043135643005, 0.8140271902084351, 0.8231409192085266, 0.8113855719566345, 0.8290846943855286, 0.8253863453865051, 0.8286884427070618, 0.8380662798881531, 0.8461233377456665, 0.837537944316864, 0.852331280708313, 0.8343679904937744, 0.847840428352356, 0.8533879518508911, 0.845859169960022, 0.8515387773513794, 0.8540483713150024, 0.8626337051391602, 0.8580108284950256, 0.870030403137207, 0.8693699836730957, 0.8580108284950256, 0.8739928603172302, 0.8701624870300293], "val_loss": [1.072185414178031, 1.1158085891178675, 0.7936223234449115, 0.5793800524302891, 0.5540128605706351, 0.5759216036115374, 0.6092882326671055, 0.5356139285223824, 0.4734111343111311, 0.46031397581100464, 0.4831842694963728, 0.4511600307055882, 0.4734146935599191, 0.5231425080980573, 0.4309350422450474, 0.41645465578351704, 0.43166204009737286, 0.4179872614996774, 0.4190748504229954, 0.3989807111876352, 0.4025347743715559, 0.39482556922095163, 0.38357715947287424, 0.3951733538082668, 0.38822140863963533, 0.35396877356937956, 0.3695650441305978, 0.35661992856434416, 0.3976532050541469, 0.3519777144704546, 0.35465348618371145, 0.36958932876586914, 0.3487666760172163, 0.3367638077054705, 0.3605398620877947, 0.3304137332098825, 0.3612005455153329, 0.3589575120380947, 0.3369804620742798, 0.33757381779806955, 0.33739867380687166], "val_accuracy": [0.5576666593551636, 0.5320000052452087, 0.6736666560173035, 0.7423333525657654, 0.7559999823570251, 0.7286666631698608, 0.7036666870117188, 0.768666684627533, 0.7923333048820496, 0.8006666898727417, 0.7889999747276306, 0.7846666574478149, 0.7786666750907898, 0.7649999856948853, 0.8056666851043701, 0.8206666707992554, 0.8186666369438171, 0.8080000281333923, 0.8149999976158142, 0.8246666789054871, 0.8370000123977661, 0.8256666660308838, 0.8383333086967468, 0.8286666870117188, 0.8320000171661377, 0.8489999771118164, 0.847000002861023, 0.8453333377838135, 0.8246666789054871, 0.8496666550636292, 0.8503333330154419, 0.8410000205039978, 0.8539999723434448, 0.859000027179718, 0.843666672706604, 0.8616666793823242, 0.8463333249092102, 0.8423333168029785, 0.8586666584014893, 0.8576666712760925, 0.8533333539962769]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 4, 2, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 2, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [87, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8142856955528259, "mapping_values": [1, 37, 37, 24, 13, 8, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)), tf.math.square(tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, grad)), tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.negative(alpha), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0527516293913037, 1.4704666920877199, 1.1026851707335554, 0.8992056874960578, 0.8013845583577245, 0.746299839558272, 0.6911994086563973, 0.712557513038984, 0.6738774459895173, 0.632027910456697, 0.5905895439499264, 0.603958806286493, 0.5737103708368865, 0.5609067927860486, 0.5392669541504185, 0.527402838286376, 0.5201041178853836, 0.5076228025771717, 0.4892545612756492, 0.4784921574444583, 0.4963997980984935, 0.45540024355307795, 0.463404544529394, 0.45068302446305397, 0.43645075496161667, 0.42094433662315417, 0.4353900926972204, 0.4064129547963541, 0.4328192267648107, 0.4079283428678675, 0.38820091719719335, 0.41155771363397176, 0.38561574561862644, 0.3811236311967079, 0.36761155254915484, 0.38090757930582664, 0.3554605548573271, 0.35213351150104444, 0.3697164785852522, 0.3357665356376057, 0.3537283745565907], "accuracy": [0.3167349100112915, 0.4963677227497101, 0.5949016213417053, 0.6643772125244141, 0.7020208835601807, 0.7168141603469849, 0.7360982894897461, 0.7272487282752991, 0.7466648817062378, 0.7561748623847961, 0.7713643908500671, 0.7691190242767334, 0.7799497842788696, 0.7849689722061157, 0.8031964302062988, 0.7988376617431641, 0.802800178527832, 0.8094043135643005, 0.8140271902084351, 0.8231409192085266, 0.8113855719566345, 0.8290846943855286, 0.8253863453865051, 0.8286884427070618, 0.8380662798881531, 0.8461233377456665, 0.837537944316864, 0.852331280708313, 0.8343679904937744, 0.847840428352356, 0.8533879518508911, 0.845859169960022, 0.8515387773513794, 0.8540483713150024, 0.8626337051391602, 0.8580108284950256, 0.870030403137207, 0.8693699836730957, 0.8580108284950256, 0.8739928603172302, 0.8701624870300293], "val_loss": [1.072185414178031, 1.1158085891178675, 0.7936223234449115, 0.5793800524302891, 0.5540128605706351, 0.5759216036115374, 0.6092882326671055, 0.5356139285223824, 0.4734111343111311, 0.46031397581100464, 0.4831842694963728, 0.4511600307055882, 0.4734146935599191, 0.5231425080980573, 0.4309350422450474, 0.41645465578351704, 0.43166204009737286, 0.4179872614996774, 0.4190748504229954, 0.3989807111876352, 0.4025347743715559, 0.39482556922095163, 0.38357715947287424, 0.3951733538082668, 0.38822140863963533, 0.35396877356937956, 0.3695650441305978, 0.35661992856434416, 0.3976532050541469, 0.3519777144704546, 0.35465348618371145, 0.36958932876586914, 0.3487666760172163, 0.3367638077054705, 0.3605398620877947, 0.3304137332098825, 0.3612005455153329, 0.3589575120380947, 0.3369804620742798, 0.33757381779806955, 0.33739867380687166], "val_accuracy": [0.5576666593551636, 0.5320000052452087, 0.6736666560173035, 0.7423333525657654, 0.7559999823570251, 0.7286666631698608, 0.7036666870117188, 0.768666684627533, 0.7923333048820496, 0.8006666898727417, 0.7889999747276306, 0.7846666574478149, 0.7786666750907898, 0.7649999856948853, 0.8056666851043701, 0.8206666707992554, 0.8186666369438171, 0.8080000281333923, 0.8149999976158142, 0.8246666789054871, 0.8370000123977661, 0.8256666660308838, 0.8383333086967468, 0.8286666870117188, 0.8320000171661377, 0.8489999771118164, 0.847000002861023, 0.8453333377838135, 0.8246666789054871, 0.8496666550636292, 0.8503333330154419, 0.8410000205039978, 0.8539999723434448, 0.859000027179718, 0.843666672706604, 0.8616666793823242, 0.8463333249092102, 0.8423333168029785, 0.8586666584014893, 0.8576666712760925, 0.8533333539962769]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 2, 2, 9, 6, 1, 2, 1, 2, 1, 5, 8, 1, 8, 2, 6, 9, 5, 0, 1, 1, 2, 6, 9, 2, 8], [0, 0, 2, 2, 2, 0, 0, 1, 2, 1, 2, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [34, 10, 50, 41, 57, 79, 83, 52, 48], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8142856955528259, "mapping_values": [1, 29, 29, 18, 11, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, grad)), tf.math.add(tf.math.subtract(tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), tf.math.subtract(alpha, grad)), tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0527516293913037, 1.4704666920877199, 1.1026851707335554, 0.8992056874960578, 0.8013845583577245, 0.746299839558272, 0.6911994086563973, 0.712557513038984, 0.6738774459895173, 0.632027910456697, 0.5905895439499264, 0.603958806286493, 0.5737103708368865, 0.5609067927860486, 0.5392669541504185, 0.527402838286376, 0.5201041178853836, 0.5076228025771717, 0.4892545612756492, 0.4784921574444583, 0.4963997980984935, 0.45540024355307795, 0.463404544529394, 0.45068302446305397, 0.43645075496161667, 0.42094433662315417, 0.4353900926972204, 0.4064129547963541, 0.4328192267648107, 0.4079283428678675, 0.38820091719719335, 0.41155771363397176, 0.38561574561862644, 0.3811236311967079, 0.36761155254915484, 0.38090757930582664, 0.3554605548573271, 0.35213351150104444, 0.3697164785852522, 0.3357665356376057, 0.3537283745565907], "accuracy": [0.3167349100112915, 0.4963677227497101, 0.5949016213417053, 0.6643772125244141, 0.7020208835601807, 0.7168141603469849, 0.7360982894897461, 0.7272487282752991, 0.7466648817062378, 0.7561748623847961, 0.7713643908500671, 0.7691190242767334, 0.7799497842788696, 0.7849689722061157, 0.8031964302062988, 0.7988376617431641, 0.802800178527832, 0.8094043135643005, 0.8140271902084351, 0.8231409192085266, 0.8113855719566345, 0.8290846943855286, 0.8253863453865051, 0.8286884427070618, 0.8380662798881531, 0.8461233377456665, 0.837537944316864, 0.852331280708313, 0.8343679904937744, 0.847840428352356, 0.8533879518508911, 0.845859169960022, 0.8515387773513794, 0.8540483713150024, 0.8626337051391602, 0.8580108284950256, 0.870030403137207, 0.8693699836730957, 0.8580108284950256, 0.8739928603172302, 0.8701624870300293], "val_loss": [1.072185414178031, 1.1158085891178675, 0.7936223234449115, 0.5793800524302891, 0.5540128605706351, 0.5759216036115374, 0.6092882326671055, 0.5356139285223824, 0.4734111343111311, 0.46031397581100464, 0.4831842694963728, 0.4511600307055882, 0.4734146935599191, 0.5231425080980573, 0.4309350422450474, 0.41645465578351704, 0.43166204009737286, 0.4179872614996774, 0.4190748504229954, 0.3989807111876352, 0.4025347743715559, 0.39482556922095163, 0.38357715947287424, 0.3951733538082668, 0.38822140863963533, 0.35396877356937956, 0.3695650441305978, 0.35661992856434416, 0.3976532050541469, 0.3519777144704546, 0.35465348618371145, 0.36958932876586914, 0.3487666760172163, 0.3367638077054705, 0.3605398620877947, 0.3304137332098825, 0.3612005455153329, 0.3589575120380947, 0.3369804620742798, 0.33757381779806955, 0.33739867380687166], "val_accuracy": [0.5576666593551636, 0.5320000052452087, 0.6736666560173035, 0.7423333525657654, 0.7559999823570251, 0.7286666631698608, 0.7036666870117188, 0.768666684627533, 0.7923333048820496, 0.8006666898727417, 0.7889999747276306, 0.7846666574478149, 0.7786666750907898, 0.7649999856948853, 0.8056666851043701, 0.8206666707992554, 0.8186666369438171, 0.8080000281333923, 0.8149999976158142, 0.8246666789054871, 0.8370000123977661, 0.8256666660308838, 0.8383333086967468, 0.8286666870117188, 0.8320000171661377, 0.8489999771118164, 0.847000002861023, 0.8453333377838135, 0.8246666789054871, 0.8496666550636292, 0.8503333330154419, 0.8410000205039978, 0.8539999723434448, 0.859000027179718, 0.843666672706604, 0.8616666793823242, 0.8463333249092102, 0.8423333168029785, 0.8586666584014893, 0.8576666712760925, 0.8533333539962769]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 5, 2, 3, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [67, 83, 91, 29, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8142856955528259, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0527516293913037, 1.4704666920877199, 1.1026851707335554, 0.8992056874960578, 0.8013845583577245, 0.746299839558272, 0.6911994086563973, 0.712557513038984, 0.6738774459895173, 0.632027910456697, 0.5905895439499264, 0.603958806286493, 0.5737103708368865, 0.5609067927860486, 0.5392669541504185, 0.527402838286376, 0.5201041178853836, 0.5076228025771717, 0.4892545612756492, 0.4784921574444583, 0.4963997980984935, 0.45540024355307795, 0.463404544529394, 0.45068302446305397, 0.43645075496161667, 0.42094433662315417, 0.4353900926972204, 0.4064129547963541, 0.4328192267648107, 0.4079283428678675, 0.38820091719719335, 0.41155771363397176, 0.38561574561862644, 0.3811236311967079, 0.36761155254915484, 0.38090757930582664, 0.3554605548573271, 0.35213351150104444, 0.3697164785852522, 0.3357665356376057, 0.3537283745565907], "accuracy": [0.3167349100112915, 0.4963677227497101, 0.5949016213417053, 0.6643772125244141, 0.7020208835601807, 0.7168141603469849, 0.7360982894897461, 0.7272487282752991, 0.7466648817062378, 0.7561748623847961, 0.7713643908500671, 0.7691190242767334, 0.7799497842788696, 0.7849689722061157, 0.8031964302062988, 0.7988376617431641, 0.802800178527832, 0.8094043135643005, 0.8140271902084351, 0.8231409192085266, 0.8113855719566345, 0.8290846943855286, 0.8253863453865051, 0.8286884427070618, 0.8380662798881531, 0.8461233377456665, 0.837537944316864, 0.852331280708313, 0.8343679904937744, 0.847840428352356, 0.8533879518508911, 0.845859169960022, 0.8515387773513794, 0.8540483713150024, 0.8626337051391602, 0.8580108284950256, 0.870030403137207, 0.8693699836730957, 0.8580108284950256, 0.8739928603172302, 0.8701624870300293], "val_loss": [1.072185414178031, 1.1158085891178675, 0.7936223234449115, 0.5793800524302891, 0.5540128605706351, 0.5759216036115374, 0.6092882326671055, 0.5356139285223824, 0.4734111343111311, 0.46031397581100464, 0.4831842694963728, 0.4511600307055882, 0.4734146935599191, 0.5231425080980573, 0.4309350422450474, 0.41645465578351704, 0.43166204009737286, 0.4179872614996774, 0.4190748504229954, 0.3989807111876352, 0.4025347743715559, 0.39482556922095163, 0.38357715947287424, 0.3951733538082668, 0.38822140863963533, 0.35396877356937956, 0.3695650441305978, 0.35661992856434416, 0.3976532050541469, 0.3519777144704546, 0.35465348618371145, 0.36958932876586914, 0.3487666760172163, 0.3367638077054705, 0.3605398620877947, 0.3304137332098825, 0.3612005455153329, 0.3589575120380947, 0.3369804620742798, 0.33757381779806955, 0.33739867380687166], "val_accuracy": [0.5576666593551636, 0.5320000052452087, 0.6736666560173035, 0.7423333525657654, 0.7559999823570251, 0.7286666631698608, 0.7036666870117188, 0.768666684627533, 0.7923333048820496, 0.8006666898727417, 0.7889999747276306, 0.7846666574478149, 0.7786666750907898, 0.7649999856948853, 0.8056666851043701, 0.8206666707992554, 0.8186666369438171, 0.8080000281333923, 0.8149999976158142, 0.8246666789054871, 0.8370000123977661, 0.8256666660308838, 0.8383333086967468, 0.8286666870117188, 0.8320000171661377, 0.8489999771118164, 0.847000002861023, 0.8453333377838135, 0.8246666789054871, 0.8496666550636292, 0.8503333330154419, 0.8410000205039978, 0.8539999723434448, 0.859000027179718, 0.843666672706604, 0.8616666793823242, 0.8463333249092102, 0.8423333168029785, 0.8586666584014893, 0.8576666712760925, 0.8533333539962769]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 5, 2, 3, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [67, 83, 91, 29, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8142856955528259, "mapping_values": [1, 1, 1, 0, 1, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.0527516293913037, 1.4704666920877199, 1.1026851707335554, 0.8992056874960578, 0.8013845583577245, 0.746299839558272, 0.6911994086563973, 0.712557513038984, 0.6738774459895173, 0.632027910456697, 0.5905895439499264, 0.603958806286493, 0.5737103708368865, 0.5609067927860486, 0.5392669541504185, 0.527402838286376, 0.5201041178853836, 0.5076228025771717, 0.4892545612756492, 0.4784921574444583, 0.4963997980984935, 0.45540024355307795, 0.463404544529394, 0.45068302446305397, 0.43645075496161667, 0.42094433662315417, 0.4353900926972204, 0.4064129547963541, 0.4328192267648107, 0.4079283428678675, 0.38820091719719335, 0.41155771363397176, 0.38561574561862644, 0.3811236311967079, 0.36761155254915484, 0.38090757930582664, 0.3554605548573271, 0.35213351150104444, 0.3697164785852522, 0.3357665356376057, 0.3537283745565907], "accuracy": [0.3167349100112915, 0.4963677227497101, 0.5949016213417053, 0.6643772125244141, 0.7020208835601807, 0.7168141603469849, 0.7360982894897461, 0.7272487282752991, 0.7466648817062378, 0.7561748623847961, 0.7713643908500671, 0.7691190242767334, 0.7799497842788696, 0.7849689722061157, 0.8031964302062988, 0.7988376617431641, 0.802800178527832, 0.8094043135643005, 0.8140271902084351, 0.8231409192085266, 0.8113855719566345, 0.8290846943855286, 0.8253863453865051, 0.8286884427070618, 0.8380662798881531, 0.8461233377456665, 0.837537944316864, 0.852331280708313, 0.8343679904937744, 0.847840428352356, 0.8533879518508911, 0.845859169960022, 0.8515387773513794, 0.8540483713150024, 0.8626337051391602, 0.8580108284950256, 0.870030403137207, 0.8693699836730957, 0.8580108284950256, 0.8739928603172302, 0.8701624870300293], "val_loss": [1.072185414178031, 1.1158085891178675, 0.7936223234449115, 0.5793800524302891, 0.5540128605706351, 0.5759216036115374, 0.6092882326671055, 0.5356139285223824, 0.4734111343111311, 0.46031397581100464, 0.4831842694963728, 0.4511600307055882, 0.4734146935599191, 0.5231425080980573, 0.4309350422450474, 0.41645465578351704, 0.43166204009737286, 0.4179872614996774, 0.4190748504229954, 0.3989807111876352, 0.4025347743715559, 0.39482556922095163, 0.38357715947287424, 0.3951733538082668, 0.38822140863963533, 0.35396877356937956, 0.3695650441305978, 0.35661992856434416, 0.3976532050541469, 0.3519777144704546, 0.35465348618371145, 0.36958932876586914, 0.3487666760172163, 0.3367638077054705, 0.3605398620877947, 0.3304137332098825, 0.3612005455153329, 0.3589575120380947, 0.3369804620742798, 0.33757381779806955, 0.33739867380687166], "val_accuracy": [0.5576666593551636, 0.5320000052452087, 0.6736666560173035, 0.7423333525657654, 0.7559999823570251, 0.7286666631698608, 0.7036666870117188, 0.768666684627533, 0.7923333048820496, 0.8006666898727417, 0.7889999747276306, 0.7846666574478149, 0.7786666750907898, 0.7649999856948853, 0.8056666851043701, 0.8206666707992554, 0.8186666369438171, 0.8080000281333923, 0.8149999976158142, 0.8246666789054871, 0.8370000123977661, 0.8256666660308838, 0.8383333086967468, 0.8286666870117188, 0.8320000171661377, 0.8489999771118164, 0.847000002861023, 0.8453333377838135, 0.8246666789054871, 0.8496666550636292, 0.8503333330154419, 0.8410000205039978, 0.8539999723434448, 0.859000027179718, 0.843666672706604, 0.8616666793823242, 0.8463333249092102, 0.8423333168029785, 0.8586666584014893, 0.8576666712760925, 0.8533333539962769]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 3, 2, 6, 3, 2, 2, 1, 9, 1, 4, 2, 6, 2, 2, 5, 9, 5, 4, 9, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 35, 27, 57, 91, 53, 52, 57, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8142856955528259, "mapping_values": [1, 37, 37, 24, 13, 10, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(tf.math.subtract(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad), tf.math.subtract(tf.math.add(alpha, grad), grad))), grad)), tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0527516293913037, 1.4704666920877199, 1.1026851707335554, 0.8992056874960578, 0.8013845583577245, 0.746299839558272, 0.6911994086563973, 0.712557513038984, 0.6738774459895173, 0.632027910456697, 0.5905895439499264, 0.603958806286493, 0.5737103708368865, 0.5609067927860486, 0.5392669541504185, 0.527402838286376, 0.5201041178853836, 0.5076228025771717, 0.4892545612756492, 0.4784921574444583, 0.4963997980984935, 0.45540024355307795, 0.463404544529394, 0.45068302446305397, 0.43645075496161667, 0.42094433662315417, 0.4353900926972204, 0.4064129547963541, 0.4328192267648107, 0.4079283428678675, 0.38820091719719335, 0.41155771363397176, 0.38561574561862644, 0.3811236311967079, 0.36761155254915484, 0.38090757930582664, 0.3554605548573271, 0.35213351150104444, 0.3697164785852522, 0.3357665356376057, 0.3537283745565907], "accuracy": [0.3167349100112915, 0.4963677227497101, 0.5949016213417053, 0.6643772125244141, 0.7020208835601807, 0.7168141603469849, 0.7360982894897461, 0.7272487282752991, 0.7466648817062378, 0.7561748623847961, 0.7713643908500671, 0.7691190242767334, 0.7799497842788696, 0.7849689722061157, 0.8031964302062988, 0.7988376617431641, 0.802800178527832, 0.8094043135643005, 0.8140271902084351, 0.8231409192085266, 0.8113855719566345, 0.8290846943855286, 0.8253863453865051, 0.8286884427070618, 0.8380662798881531, 0.8461233377456665, 0.837537944316864, 0.852331280708313, 0.8343679904937744, 0.847840428352356, 0.8533879518508911, 0.845859169960022, 0.8515387773513794, 0.8540483713150024, 0.8626337051391602, 0.8580108284950256, 0.870030403137207, 0.8693699836730957, 0.8580108284950256, 0.8739928603172302, 0.8701624870300293], "val_loss": [1.072185414178031, 1.1158085891178675, 0.7936223234449115, 0.5793800524302891, 0.5540128605706351, 0.5759216036115374, 0.6092882326671055, 0.5356139285223824, 0.4734111343111311, 0.46031397581100464, 0.4831842694963728, 0.4511600307055882, 0.4734146935599191, 0.5231425080980573, 0.4309350422450474, 0.41645465578351704, 0.43166204009737286, 0.4179872614996774, 0.4190748504229954, 0.3989807111876352, 0.4025347743715559, 0.39482556922095163, 0.38357715947287424, 0.3951733538082668, 0.38822140863963533, 0.35396877356937956, 0.3695650441305978, 0.35661992856434416, 0.3976532050541469, 0.3519777144704546, 0.35465348618371145, 0.36958932876586914, 0.3487666760172163, 0.3367638077054705, 0.3605398620877947, 0.3304137332098825, 0.3612005455153329, 0.3589575120380947, 0.3369804620742798, 0.33757381779806955, 0.33739867380687166], "val_accuracy": [0.5576666593551636, 0.5320000052452087, 0.6736666560173035, 0.7423333525657654, 0.7559999823570251, 0.7286666631698608, 0.7036666870117188, 0.768666684627533, 0.7923333048820496, 0.8006666898727417, 0.7889999747276306, 0.7846666574478149, 0.7786666750907898, 0.7649999856948853, 0.8056666851043701, 0.8206666707992554, 0.8186666369438171, 0.8080000281333923, 0.8149999976158142, 0.8246666789054871, 0.8370000123977661, 0.8256666660308838, 0.8383333086967468, 0.8286666870117188, 0.8320000171661377, 0.8489999771118164, 0.847000002861023, 0.8453333377838135, 0.8246666789054871, 0.8496666550636292, 0.8503333330154419, 0.8410000205039978, 0.8539999723434448, 0.859000027179718, 0.843666672706604, 0.8616666793823242, 0.8463333249092102, 0.8423333168029785, 0.8586666584014893, 0.8576666712760925, 0.8533333539962769]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 2, 2, 4, 6, 1, 2, 1, 0, 1, 5, 8, 1, 8, 6, 2, 9, 9, 0, 2, 1, 8, 0, 9, 2, 8], [0, 0, 2, 0, 2, 0, 0, 1, 2, 1, 2, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 50, 27, 96, 79, 83, 52, 48], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [71, 25, 50, 71, 34]], "fitness": -0.42571428418159485, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.4303303234738727, 2.253021880509973, 2.2873058517485276, 3.039996338873145, 2.409443071757357, 2.3053432758914765], "accuracy": [0.22255976498126984, 0.18412363529205322, 0.1666886806488037, 0.20618148148059845, 0.10196803510189056, 0.10130762308835983], "val_loss": [1.3814947264535087, 1.9723964418683733, 1.9417101315089635, 2.5817144257681712, 1.9765472412109375, 1.9740819931030273], "val_accuracy": [0.47600001096725464, 0.2370000034570694, 0.22499999403953552, 0.09700000286102295, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 4, 3, 4, 5, 3, 2, 1, 2, 9, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 1, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 51, 40, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.30571427941322327, "mapping_values": [1, 21, 21, 13, 8, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), grad), alpha))))))), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3340586190682835, 2.468163402466931, 2.1309836475431267, 2.408631819775548, 2.303871445541825, 2.3005730039518206, 2.14274946183041, 1.9242224099534992], "accuracy": [0.23854179680347443, 0.18134988844394684, 0.230484738945961, 0.17884030938148499, 0.10210011899471283, 0.11372341960668564, 0.24078720808029175, 0.3465856611728668], "val_loss": [1.8959695952279227, 1.9584458214896066, 1.8654280390058244, 1.9741895539419991, 1.9727869715009416, 1.9648423876081194, 1.9041260991777693, 1.607147455215454], "val_accuracy": [0.27799999713897705, 0.09833333641290665, 0.33533334732055664, 0.10233332961797714, 0.10000000149011612, 0.20366667211055756, 0.21966665983200073, 0.3226666748523712]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0], [3, 3, 2, 6, 3, 2, 6, 8, 9, 1, 4, 2, 6, 2, 8, 5, 9, 5, 9, 5, 8, 2, 0, 9, 2], [2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [91, 2, 35, 27, 41, 79, 53, 52, 96], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.15142856538295746, "mapping_values": [1, 27, 27, 15, 12, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)))))), tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.109910094490802, 2.323777695090118, 2.304975184341227, 2.3430120027643135, 2.304769948646456, 2.3024597337705397, 2.2622467036166007, 2.193125892860101, 2.2668858935190244, 2.5327118380887557, 2.31892689564571, 2.3048670675461365], "accuracy": [0.19033153355121613, 0.17659489810466766, 0.1010434553027153, 0.15070664882659912, 0.1018359512090683, 0.10527011007070541, 0.1620657742023468, 0.21133272349834442, 0.17659489810466766, 0.20921939611434937, 0.10051512718200684, 0.09853387624025345], "val_loss": [1.9727503231593542, 1.9770418575831823, 1.9706598009381975, 1.9751334190368652, 1.973649501800537, 1.969803742000035, 1.9573838370186942, 1.9762795312064034, 1.989370346069336, 2.005509444645473, 1.9748875073024206, 1.973783084324428], "val_accuracy": [0.10000000149011612, 0.10400000214576721, 0.09966666996479034, 0.10233332961797714, 0.14800000190734863, 0.15399999916553497, 0.15966667234897614, 0.13633333146572113, 0.09966666996479034, 0.09833333641290665, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 6, 6, 9, 5, 2, 2, 8, 2, 0, 9, 2, 6], [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 50, 27, 65, 79, 83, 52, 48], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 41, 41, 26, 15, 9, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), grad)), grad))), tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), tf.math.square(tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [48.006093788172166, 574.2269792094474, 2329.612766332882, 6207.247163441298, 13010.872468754127, 23479.298466186767], "accuracy": [0.10051512718200684, 0.10091137140989304, 0.10606260597705841, 0.10394927859306335, 0.09893012791872025, 0.10130762308835983], "val_loss": [137.32084001813615, 833.6907610212054, 2619.855538504464, 6024.727818080357, 11577.424386160714, 19803.276227678572], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 3, 4, 4, 6, 3, 2, 1, 2, 2, 3, 8, 9, 3, 2, 6, 9, 3, 0, 2, 8, 2, 0, 5, 2, 8], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [65606069.04391669, 1276630885.5073307, 5878291757.208295, 16387096499.987848, 35115933637.57073, 64183589095.282524], "accuracy": [0.1010434553027153, 0.10130762308835983, 0.10593052208423615, 0.10408136248588562, 0.09853387624025345, 0.10157178342342377], "val_loss": [252293065.14285713, 2016736256.0, 6804672073.142858, 16127298998.857143, 31496456484.57143, 54422684818.28571], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [67, 0, 91, 29, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), grad)))), tf.math.subtract(tf.math.add(alpha, grad), grad)), grad))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad))))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [3, 3, 4, 8, 6, 3, 2, 0, 0, 2, 3, 8, 9, 3, 2, 6, 9, 3, 0, 6, 8, 1, 0, 5, 2, 8], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 29, 27, 57, 79, 53, 52, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, grad)), grad)))), tf.math.negative(grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07766477018594742, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 83, 91, 29, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3024660181517396, 2.3036257934104247, 2.3014988664622793, 2.3013698973471164, 2.3030937773251434, 2.3024266043894674], "accuracy": [0.09272222965955734, 0.0874389111995697, 0.0948355570435524, 0.09589222073554993, 0.08915598690509796, 0.08994849026203156], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 5, 2, 3, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [67, 83, 91, 29, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 23, 23, 14, 9, 3, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), grad), grad)))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), alpha))))), tf.math.multiply(tf.math.add(alpha, grad), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3024660181517396, 2.3036257934104247, 2.3014988664622793, 2.3013698973471164, 2.3030937773251434, 2.3024266043894674], "accuracy": [0.09272222965955734, 0.0874389111995697, 0.0948355570435524, 0.09589222073554993, 0.08915598690509796, 0.08994849026203156], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 0, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 0, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 25, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 10, 10, 6, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.negative(grad))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024660181517396, 2.3036257934104247, 2.3014988664622793, 2.3013698973471164, 2.3030937773251434, 2.3024266043894674], "accuracy": [0.09272222965955734, 0.0874389111995697, 0.0948355570435524, 0.09589222073554993, 0.08915598690509796, 0.08994849026203156], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 6, 2, 4, 2, 1, 2, 8, 2, 1, 5, 8, 1, 2, 2, 6, 9, 5, 0, 2, 1, 2, 9, 9, 2, 8], [2, 0, 2, 2, 2, 0, 0, 1, 2, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 1, 68, 31, 8, 45, 53, 52, 48], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 30, 30, 17, 13, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 4, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), grad)), grad), tf.math.sqrt(tf.math.add(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.square(tf.math.add(alpha, alpha)), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3024660181517396, 2.3036257934104247, 2.3014988664622793, 2.3013698973471164, 2.3030937773251434, 2.3024266043894674], "accuracy": [0.09272222965955734, 0.0874389111995697, 0.0948355570435524, 0.09589222073554993, 0.08915598690509796, 0.08994849026203156], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.multiply(grad, grad)))))))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3024660181517396, 2.3036257934104247, 2.3014988664622793, 2.3013698973471164, 2.3030937773251434, 2.3024266043894674], "accuracy": [0.09272222965955734, 0.0874389111995697, 0.0948355570435524, 0.09589222073554993, 0.08915598690509796, 0.08994849026203156], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [3, 2, 2, 4, 6, 1, 2, 1, 2, 0, 5, 4, 1, 8, 2, 6, 9, 5, 0, 2, 1, 2, 0, 9, 2, 8], [0, 0, 2, 2, 2, 0, 0, 1, 2, 1, 2, 0, 1, 0, 0, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 57, 57, 79, 53, 35, 21], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 32, 32, 19, 13, 6, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), grad)), grad), tf.math.subtract(tf.math.add(grad, tf.math.negative(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), alpha), grad)))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024660181517396, 2.3036257934104247, 2.3014988664622793, 2.3013698973471164, 2.3030937773251434, 2.3024266043894674], "accuracy": [0.09272222965955734, 0.0874389111995697, 0.0948355570435524, 0.09589222073554993, 0.08915598690509796, 0.08994849026203156], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [2, 3, 2, 2, 6, 3, 2, 1, 2, 1, 5, 8, 9, 3, 6, 6, 9, 5, 0, 2, 8, 1, 0, 9, 2, 8], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03742857277393341, "mapping_values": [1, 40, 40, 26, 14, 8, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), grad), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(grad, tf.math.square(tf.math.sqrt(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))))), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, beta))", "other_info": {"loss": [2.302937665619886, 2.3055611275222088, 2.3051942738843016, 2.3069484071992314, 2.3115585490523896, 2.3139852416860176], "accuracy": [0.09206181764602661, 0.08479725569486618, 0.08691058307886124, 0.08717474341392517, 0.07647603005170822, 0.07779685407876968], "val_loss": [1.9716384751456124, 1.973079000200544, 1.9745783805847168, 1.976402691432408, 1.978700842176165, 1.9811386380876814], "val_accuracy": [0.03500000014901161, 0.02666666731238365, 0.026000000536441803, 0.02566666714847088, 0.028333334252238274, 0.030666666105389595]}}]