[{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 1, 4, 5, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 8, 2, 0, 8, 2], [0, 1, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 18, 35, 17, 95, 79, 53], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.8014285564422607, "mapping_values": [1, 38, 38, 24, 14, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.square(tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha), grad))))), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))))))), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.negative(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9716884374398094, 1.4774573313923811, 1.0733018627004254, 0.9309262193000359, 0.7937069222549517, 0.7637866129570979, 0.7216795235419585, 0.7184941440745902, 0.6602000786155647, 0.6732847442984061, 0.6303647602585407, 0.6151402470867443, 0.5888474167550576, 0.6042054905757267, 0.5783820165430219, 0.5778739090884414, 0.5371951239141475, 0.5254633365652391, 0.543731661016726, 0.5451233612705357, 0.49966167831276037, 0.5196848136401526, 0.49061893127251455, 0.4917583510687071, 0.4866870955988842], "accuracy": [0.34262317419052124, 0.5017831325531006, 0.6189407110214233, 0.6551313996315002, 0.707040011882782, 0.7104741930961609, 0.7283053994178772, 0.7236824631690979, 0.7543256878852844, 0.7434949278831482, 0.7580240368843079, 0.769911527633667, 0.7794214487075806, 0.7712323069572449, 0.7792893648147583, 0.780610203742981, 0.7961959838867188, 0.8005547523498535, 0.7964601516723633, 0.7985734939575195, 0.81548011302948, 0.8041210174560547, 0.821820080280304, 0.8153480291366577, 0.8195747137069702], "val_loss": [1.598616089139666, 0.8236801964896066, 0.6793109178543091, 0.6397725514003209, 0.6250831740243095, 0.5647696597235543, 0.556523220879691, 0.5593894379479545, 0.6101257971354893, 0.5381522689546857, 0.5323221853801182, 0.5033304180417743, 0.47557481697627474, 0.47371298926217215, 0.4862044198172433, 0.4369731971195766, 0.4385221004486084, 0.50735000201634, 0.4507329889706203, 0.416070818901062, 0.428348788193294, 0.40982005425861906, 0.4208874872752598, 0.4318238156182425, 0.4014496122087751], "val_accuracy": [0.43166667222976685, 0.6679999828338623, 0.6956666707992554, 0.7013333439826965, 0.7193333506584167, 0.7413333058357239, 0.7366666793823242, 0.7523333430290222, 0.7173333168029785, 0.737666666507721, 0.7616666555404663, 0.7649999856948853, 0.8009999990463257, 0.7896666526794434, 0.777999997138977, 0.8130000233650208, 0.8086666464805603, 0.7746666669845581, 0.8003333210945129, 0.8286666870117188, 0.8130000233650208, 0.8286666870117188, 0.8163333535194397, 0.8130000233650208, 0.8213333487510681]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 8, 4, 5, 1, 2, 3, 9, 1, 5, 2, 9, 3, 2, 4, 0, 5, 0, 2, 2, 8, 0, 8, 2], [0, 2, 2, 1, 2, 0, 1, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 55, 35, 17, 95, 79, 53], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.8014285564422607, "mapping_values": [1, 36, 36, 24, 12, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.square(alpha)))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9716884374398094, 1.4774573313923811, 1.0733018627004254, 0.9309262193000359, 0.7937069222549517, 0.7637866129570979, 0.7216795235419585, 0.7184941440745902, 0.6602000786155647, 0.6732847442984061, 0.6303647602585407, 0.6151402470867443, 0.5888474167550576, 0.6042054905757267, 0.5783820165430219, 0.5778739090884414, 0.5371951239141475, 0.5254633365652391, 0.543731661016726, 0.5451233612705357, 0.49966167831276037, 0.5196848136401526, 0.49061893127251455, 0.4917583510687071, 0.4866870955988842], "accuracy": [0.34262317419052124, 0.5017831325531006, 0.6189407110214233, 0.6551313996315002, 0.707040011882782, 0.7104741930961609, 0.7283053994178772, 0.7236824631690979, 0.7543256878852844, 0.7434949278831482, 0.7580240368843079, 0.769911527633667, 0.7794214487075806, 0.7712323069572449, 0.7792893648147583, 0.780610203742981, 0.7961959838867188, 0.8005547523498535, 0.7964601516723633, 0.7985734939575195, 0.81548011302948, 0.8041210174560547, 0.821820080280304, 0.8153480291366577, 0.8195747137069702], "val_loss": [1.598616089139666, 0.8236801964896066, 0.6793109178543091, 0.6397725514003209, 0.6250831740243095, 0.5647696597235543, 0.556523220879691, 0.5593894379479545, 0.6101257971354893, 0.5381522689546857, 0.5323221853801182, 0.5033304180417743, 0.47557481697627474, 0.47371298926217215, 0.4862044198172433, 0.4369731971195766, 0.4385221004486084, 0.50735000201634, 0.4507329889706203, 0.416070818901062, 0.428348788193294, 0.40982005425861906, 0.4208874872752598, 0.4318238156182425, 0.4014496122087751], "val_accuracy": [0.43166667222976685, 0.6679999828338623, 0.6956666707992554, 0.7013333439826965, 0.7193333506584167, 0.7413333058357239, 0.7366666793823242, 0.7523333430290222, 0.7173333168029785, 0.737666666507721, 0.7616666555404663, 0.7649999856948853, 0.8009999990463257, 0.7896666526794434, 0.777999997138977, 0.8130000233650208, 0.8086666464805603, 0.7746666669845581, 0.8003333210945129, 0.8286666870117188, 0.8130000233650208, 0.8286666870117188, 0.8163333535194397, 0.8130000233650208, 0.8213333487510681]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 5, 2, 4, 2, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [47, 55, 35, 17, 95, 52, 54], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7988571524620056, "mapping_values": [1, 30, 30, 17, 13, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0288486407338793, 1.5964638944535665, 1.1149365660883197, 0.9237998049131018, 0.8303933229113866, 0.7531809146378129, 0.7682173508206505, 0.7143702451988471, 0.6963912709797567, 0.6792825186698193, 0.6739360629654108, 0.6200800746454932, 0.6262716139627249, 0.617553699427529, 0.5794709086922009, 0.5721764898712703, 0.5647295627769084, 0.5691105300928891, 0.5349189764189604, 0.5288687556245938, 0.5090965885748212, 0.5179565259887873, 0.5105751204594582, 0.49315451311318786], "accuracy": [0.33020737767219543, 0.4760269522666931, 0.5896182656288147, 0.6601505875587463, 0.6901333928108215, 0.717870831489563, 0.7117950320243835, 0.7264562249183655, 0.7347774505615234, 0.7413815855979919, 0.7497028112411499, 0.767401933670044, 0.7520803213119507, 0.7602694630622864, 0.7808743715286255, 0.7839123010635376, 0.7880068421363831, 0.7891955971717834, 0.8043851256370544, 0.8033285140991211, 0.8104609847068787, 0.8054417967796326, 0.806630551815033, 0.8140271902084351], "val_loss": [1.4478443350110735, 0.9460545267377581, 0.7593176024300712, 0.6936561720711845, 0.5994827577045986, 0.5876751116343907, 0.5278436456407819, 0.5593781811850411, 0.5064511299133301, 0.5947396074022565, 0.4939295394080026, 0.5140326023101807, 0.47080184732164654, 0.4645576647349766, 0.4808171646935599, 0.4318011488233294, 0.4563176376479013, 0.4365274054663522, 0.4198100481714521, 0.410795841898237, 0.4231219121388027, 0.42009145872933523, 0.43981168951307026, 0.4368230274745396], "val_accuracy": [0.4896666705608368, 0.6116666793823242, 0.687666654586792, 0.6923333406448364, 0.7350000143051147, 0.7369999885559082, 0.7706666588783264, 0.7463333606719971, 0.7836666703224182, 0.7386666536331177, 0.7836666703224182, 0.7599999904632568, 0.800000011920929, 0.7839999794960022, 0.7716666460037231, 0.8253333568572998, 0.7943333387374878, 0.8233333230018616, 0.8349999785423279, 0.8246666789054871, 0.8140000104904175, 0.8176666498184204, 0.7950000166893005, 0.7940000295639038]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 5, 8, 4, 5, 1, 3, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 6, 7, 7, 5, 3, 2, 8, 4, 7, 1, 3, 0, 4, 7, 8, 9, 4, 3, 3, 5], [0, 0, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 55, 35, 17, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7988571524620056, "mapping_values": [1, 14, 14, 8, 6, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0288486407338793, 1.5964638944535665, 1.1149365660883197, 0.9237998049131018, 0.8303933229113866, 0.7531809146378129, 0.7682173508206505, 0.7143702451988471, 0.6963912709797567, 0.6792825186698193, 0.6739360629654108, 0.6200800746454932, 0.6262716139627249, 0.617553699427529, 0.5794709086922009, 0.5721764898712703, 0.5647295627769084, 0.5691105300928891, 0.5349189764189604, 0.5288687556245938, 0.5090965885748212, 0.5179565259887873, 0.5105751204594582, 0.49315451311318786], "accuracy": [0.33020737767219543, 0.4760269522666931, 0.5896182656288147, 0.6601505875587463, 0.6901333928108215, 0.717870831489563, 0.7117950320243835, 0.7264562249183655, 0.7347774505615234, 0.7413815855979919, 0.7497028112411499, 0.767401933670044, 0.7520803213119507, 0.7602694630622864, 0.7808743715286255, 0.7839123010635376, 0.7880068421363831, 0.7891955971717834, 0.8043851256370544, 0.8033285140991211, 0.8104609847068787, 0.8054417967796326, 0.806630551815033, 0.8140271902084351], "val_loss": [1.4478443350110735, 0.9460545267377581, 0.7593176024300712, 0.6936561720711845, 0.5994827577045986, 0.5876751116343907, 0.5278436456407819, 0.5593781811850411, 0.5064511299133301, 0.5947396074022565, 0.4939295394080026, 0.5140326023101807, 0.47080184732164654, 0.4645576647349766, 0.4808171646935599, 0.4318011488233294, 0.4563176376479013, 0.4365274054663522, 0.4198100481714521, 0.410795841898237, 0.4231219121388027, 0.42009145872933523, 0.43981168951307026, 0.4368230274745396], "val_accuracy": [0.4896666705608368, 0.6116666793823242, 0.687666654586792, 0.6923333406448364, 0.7350000143051147, 0.7369999885559082, 0.7706666588783264, 0.7463333606719971, 0.7836666703224182, 0.7386666536331177, 0.7836666703224182, 0.7599999904632568, 0.800000011920929, 0.7839999794960022, 0.7716666460037231, 0.8253333568572998, 0.7943333387374878, 0.8233333230018616, 0.8349999785423279, 0.8246666789054871, 0.8140000104904175, 0.8176666498184204, 0.7950000166893005, 0.7940000295639038]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 8, 4, 5, 1, 2, 3, 9, 1, 5, 2, 9, 3, 2, 4, 0, 5, 0, 2, 2, 8, 0, 8, 2], [0, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [47, 55, 35, 17, 95, 52, 54], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7988571524620056, "mapping_values": [1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0288486407338793, 1.5964638944535665, 1.1149365660883197, 0.9237998049131018, 0.8303933229113866, 0.7531809146378129, 0.7682173508206505, 0.7143702451988471, 0.6963912709797567, 0.6792825186698193, 0.6739360629654108, 0.6200800746454932, 0.6262716139627249, 0.617553699427529, 0.5794709086922009, 0.5721764898712703, 0.5647295627769084, 0.5691105300928891, 0.5349189764189604, 0.5288687556245938, 0.5090965885748212, 0.5179565259887873, 0.5105751204594582, 0.49315451311318786], "accuracy": [0.33020737767219543, 0.4760269522666931, 0.5896182656288147, 0.6601505875587463, 0.6901333928108215, 0.717870831489563, 0.7117950320243835, 0.7264562249183655, 0.7347774505615234, 0.7413815855979919, 0.7497028112411499, 0.767401933670044, 0.7520803213119507, 0.7602694630622864, 0.7808743715286255, 0.7839123010635376, 0.7880068421363831, 0.7891955971717834, 0.8043851256370544, 0.8033285140991211, 0.8104609847068787, 0.8054417967796326, 0.806630551815033, 0.8140271902084351], "val_loss": [1.4478443350110735, 0.9460545267377581, 0.7593176024300712, 0.6936561720711845, 0.5994827577045986, 0.5876751116343907, 0.5278436456407819, 0.5593781811850411, 0.5064511299133301, 0.5947396074022565, 0.4939295394080026, 0.5140326023101807, 0.47080184732164654, 0.4645576647349766, 0.4808171646935599, 0.4318011488233294, 0.4563176376479013, 0.4365274054663522, 0.4198100481714521, 0.410795841898237, 0.4231219121388027, 0.42009145872933523, 0.43981168951307026, 0.4368230274745396], "val_accuracy": [0.4896666705608368, 0.6116666793823242, 0.687666654586792, 0.6923333406448364, 0.7350000143051147, 0.7369999885559082, 0.7706666588783264, 0.7463333606719971, 0.7836666703224182, 0.7386666536331177, 0.7836666703224182, 0.7599999904632568, 0.800000011920929, 0.7839999794960022, 0.7716666460037231, 0.8253333568572998, 0.7943333387374878, 0.8233333230018616, 0.8349999785423279, 0.8246666789054871, 0.8140000104904175, 0.8176666498184204, 0.7950000166893005, 0.7940000295639038]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 5, 9, 2, 3, 9, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2], [0, 1, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [47, 55, 35, 17, 95, 52, 54], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [80, 25, 50, 71, 34]], "fitness": -0.1728571355342865, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.359520549488231, 2.883589981380408, 2.305968701233245, 2.3034379360399004, 2.30302823668442, 2.302781102931605], "accuracy": [0.20393607020378113, 0.14700831472873688, 0.10051512718200684, 0.09721305221319199, 0.09853387624025345, 0.09959053993225098], "val_loss": [1.8636114256722587, 1.9775451932634627, 1.974221978868757, 1.97352967943464, 1.9734139442443848, 1.9734486852373396], "val_accuracy": [0.17599999904632568, 0.09833333641290665, 0.09833333641290665, 0.07466666400432587, 0.10233332961797714, 0.11133333295583725]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 4, 8, 4, 5, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 6, 7, 7, 5, 3, 2, 8, 4, 7, 1, 3, 0, 4, 7, 8, 9, 4, 3, 3, 5], [1, 1, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [57, 55, 35, 17, 95, 79, 53], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [58, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08955223858356476, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 5, 8, 1, 5, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 6, 7, 7, 5, 3, 2, 8, 4, 7, 1, 3, 0, 4, 7, 8, 9, 4, 3, 3, 5], [0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 55, 35, 17, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 18, 11, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))), tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 4, 4, 5, 1, 2, 3, 9, 1, 5, 2, 9, 3, 2, 4, 0, 5, 0, 2, 2, 8, 0, 8, 2], [0, 2, 1, 1, 2, 2, 1, 2, 0, 0, 0, 3, 1, 2, 2, 3, 0, 3, 1, 2, 0, 0, 0, 0, 1, 3, 1], [90, 55, 35, 17, 95, 79, 53], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, alpha)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027098745387136, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 5, 8, 4, 5, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 6, 7, 7, 5, 3, 2, 8, 4, 7, 1, 3, 0, 4, 7, 8, 9, 4, 3, 3, 5], [0, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 55, 35, 17, 95, 79, 53], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [1181858616.0280406, 184459445201.06723, 3151176193839.981, 21759556742039.992, 97393026224968.19, 316511179456877.75], "accuracy": [0.1018359512090683, 0.10381719470024109, 0.09985470771789551, 0.1002509593963623, 0.10077928751707077, 0.10302469879388809], "val_loss": [10200432347.428572, 549774987849.1428, 5900812756114.286, 32168003614427.43, 120492067089846.86, 355370828562432.0], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [9, 5, 8, 4, 5, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 6, 7, 7, 5, 3, 2, 8, 4, 7, 1, 3, 0, 4, 7, 8, 9, 4, 3, 3, 5], [1, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 2, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [28, 55, 35, 17, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 7, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 7, 8, 2, 5, 1, 2, 3, 9, 1, 5, 2, 9, 3, 2, 4, 0, 5, 0, 2, 2, 8, 0, 8, 2], [2, 0, 2, 0, 2, 0, 1, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 55, 35, 17, 95, 79, 53], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08057060092687607, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 5, 8, 4, 5, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 6, 7, 7, 5, 3, 2, 8, 4, 7, 1, 3, 0, 4, 7, 8, 9, 4, 3, 3, 5], [2, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 2, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 68, 35, 17, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08255184441804886, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 8, 8, 4, 5, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 6, 7, 7, 5, 3, 2, 8, 4, 7, 1, 3, 0, 4, 7, 8, 9, 4, 3, 3, 5], [0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 2, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [28, 55, 35, 17, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [87, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08255184441804886, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 9, 2, 9, 2, 1, 2, 3, 2, 1, 5, 2, 0, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 1, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [47, 55, 35, 17, 95, 52, 54], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 1, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.subtract(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08651433140039444, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 4, 2, 4, 2, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [88, 55, 35, 17, 95, 39], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 0, 1, 3, 0, 2, 1, 3, 0, 0], [58, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [40, 25, 50, 71, 34]], "fitness": -0.08314285427331924, "mapping_values": [1, 24, 24, 12, 12, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.3015825820243148, 2.3023381903344426, 2.3001174023280195, 2.298900133898041, 2.3006200223881663, 2.300055990192664, 2.301053506161921, 2.2992935960696848, 2.29907491883865, 2.29930230119776, 2.300301932828805, 2.299236223351576, 2.300582786482465, 2.3009546676631207, 2.3000507637210856, 2.2998603875091317, 2.30014166323705, 2.300871049439855, 2.3008537823734123, 2.3003388817882526], "accuracy": [0.08875974267721176, 0.08994849026203156, 0.09615638852119446, 0.09840179979801178, 0.09417514503002167, 0.09840179979801178, 0.08611807972192764, 0.10051512718200684, 0.10170386731624603, 0.09430722147226334, 0.09496764093637466, 0.10289261490106583, 0.0936468094587326, 0.10276053100824356, 0.09311848133802414, 0.10077928751707077, 0.09998679161071777, 0.09391097724437714, 0.0952318087220192, 0.09747721254825592], "val_loss": [1.9698379380362374, 1.9692196164812361, 1.9689999989100866, 1.9692320142473494, 1.969282831464495, 1.9692802429199219, 1.969219548361642, 1.9692377362932478, 1.9692988395690918, 1.9694226809910365, 1.9695965221949987, 1.9699180466788155, 1.9701228141784668, 1.9703120504106795, 1.9706004687717982, 1.9707511493137904, 1.970949990408761, 1.971114022391183, 1.9712495122637068, 1.971388680594308], "val_accuracy": [0.047333333641290665, 0.05366666615009308, 0.060333333909511566, 0.060333333909511566, 0.06133333221077919, 0.06700000166893005, 0.07266666740179062, 0.07400000095367432, 0.07533333450555801, 0.0729999989271164, 0.07400000095367432, 0.07366666942834854, 0.07599999755620956, 0.07666666805744171, 0.07733333110809326, 0.07599999755620956, 0.07599999755620956, 0.07400000095367432, 0.07466666400432587, 0.07233333587646484]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 5, 8, 4, 5, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 6, 7, 7, 5, 3, 2, 8, 4, 7, 1, 3, 0, 4, 7, 8, 9, 4, 3, 3, 5], [2, 1, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [17, 55, 35, 17, 95, 79, 53], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [21, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3019947015598325, 2.303723112183665, 2.302020359788793, 2.300472326660358, 2.30290781927304, 2.3021885884546602], "accuracy": [0.0870426595211029, 0.08849557489156723, 0.09179764986038208, 0.09311848133802414, 0.09060890227556229, 0.0944393053650856], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 5, 8, 4, 5, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 6, 7, 7, 5, 3, 2, 8, 4, 7, 1, 3, 0, 4, 7, 8, 9, 4, 3, 3, 5], [0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 2, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [28, 55, 35, 17, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 0, 1, 3, 0, 2, 1, 3, 0, 0], [58, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3019947015598325, 2.303723112183665, 2.302020359788793, 2.300472326660358, 2.30290781927304, 2.3021885884546602], "accuracy": [0.0870426595211029, 0.08849557489156723, 0.09179764986038208, 0.09311848133802414, 0.09060890227556229, 0.0944393053650856], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 5, 8, 4, 5, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 6, 7, 7, 5, 3, 2, 8, 4, 7, 1, 3, 0, 4, 7, 8, 9, 4, 3, 3, 5], [3, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [28, 55, 35, 17, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 1, 3, 0, 2, 1, 3, 0, 0], [58, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3019947015598325, 2.303723112183665, 2.302020359788793, 2.300472326660358, 2.30290781927304, 2.3021885884546602], "accuracy": [0.0870426595211029, 0.08849557489156723, 0.09179764986038208, 0.09311848133802414, 0.09060890227556229, 0.0944393053650856], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 5, 2, 4, 5, 1, 2, 3, 2, 1, 5, 2, 9, 2, 2, 6, 0, 5, 0, 2, 0, 7, 3, 1, 2, 7, 8, 2, 1, 8, 5, 1, 1, 7, 5, 9, 3, 2, 7, 5, 8, 4], [0, 1, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 55, 35, 17, 95, 79, 53], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3019947015598325, 2.303723112183665, 2.302020359788793, 2.300472326660358, 2.30290781927304, 2.3021885884546602], "accuracy": [0.0870426595211029, 0.08849557489156723, 0.09179764986038208, 0.09311848133802414, 0.09060890227556229, 0.0944393053650856], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]