[{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8091428279876709, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2503184641136578, 1.9001955079396229, 1.4401369401098887, 1.1097154999453205, 0.9369430089308648, 0.8413025634305478, 0.7973453639646673, 0.7405734286804587, 0.7329605763866412, 0.6919442070174479, 0.661418252412622, 0.6395057643393578, 0.6464265875922784, 0.6139760050539327, 0.5928406062111674, 0.6228394946559482, 0.5738856989426336, 0.5433694820882087, 0.5525102591344536, 0.5179145449440099, 0.5180579138359516, 0.5032923266620306], "accuracy": [0.2763175368309021, 0.41064587235450745, 0.5145951509475708, 0.6020340919494629, 0.6476026773452759, 0.6816800832748413, 0.7038700580596924, 0.7189275026321411, 0.7174745798110962, 0.7376832365989685, 0.7479857206344604, 0.7528728246688843, 0.7497028112411499, 0.7627789974212646, 0.7741381525993347, 0.7625148296356201, 0.7858935594558716, 0.7996301651000977, 0.7895918488502502, 0.8035926818847656, 0.8020076751708984, 0.8087438941001892], "val_loss": [1.7058485916682653, 1.393979890005929, 1.1567686625889368, 0.7613448756081718, 0.6462950706481934, 0.6702929564884731, 0.5740434953144619, 0.5210473707744053, 0.6211801426751273, 0.5224991355623517, 0.5132844958986554, 0.5166234970092773, 0.4750387498310634, 0.4625577075140817, 0.5305191789354596, 0.4379854883466448, 0.4410519429615566, 0.49825336251940044, 0.4232329385621207, 0.4500854015350342, 0.418069737298148, 0.4045717545918056], "val_accuracy": [0.437333345413208, 0.46799999475479126, 0.5103333592414856, 0.6620000004768372, 0.7083333134651184, 0.6913333535194397, 0.7540000081062317, 0.7663333415985107, 0.6963333487510681, 0.7693333625793457, 0.7703333497047424, 0.7713333368301392, 0.7803333401679993, 0.7929999828338623, 0.7576666474342346, 0.815666675567627, 0.8199999928474426, 0.765666663646698, 0.8173333406448364, 0.8076666593551636, 0.8196666836738586, 0.8193333148956299]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 3, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 3, 1, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8091428279876709, "mapping_values": [1, 22, 22, 13, 9, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, grad)), tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, grad)), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), alpha)))), grad))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2503184641136578, 1.9001955079396229, 1.4401369401098887, 1.1097154999453205, 0.9369430089308648, 0.8413025634305478, 0.7973453639646673, 0.7405734286804587, 0.7329605763866412, 0.6919442070174479, 0.661418252412622, 0.6395057643393578, 0.6464265875922784, 0.6139760050539327, 0.5928406062111674, 0.6228394946559482, 0.5738856989426336, 0.5433694820882087, 0.5525102591344536, 0.5179145449440099, 0.5180579138359516, 0.5032923266620306], "accuracy": [0.2763175368309021, 0.41064587235450745, 0.5145951509475708, 0.6020340919494629, 0.6476026773452759, 0.6816800832748413, 0.7038700580596924, 0.7189275026321411, 0.7174745798110962, 0.7376832365989685, 0.7479857206344604, 0.7528728246688843, 0.7497028112411499, 0.7627789974212646, 0.7741381525993347, 0.7625148296356201, 0.7858935594558716, 0.7996301651000977, 0.7895918488502502, 0.8035926818847656, 0.8020076751708984, 0.8087438941001892], "val_loss": [1.7058485916682653, 1.393979890005929, 1.1567686625889368, 0.7613448756081718, 0.6462950706481934, 0.6702929564884731, 0.5740434953144619, 0.5210473707744053, 0.6211801426751273, 0.5224991355623517, 0.5132844958986554, 0.5166234970092773, 0.4750387498310634, 0.4625577075140817, 0.5305191789354596, 0.4379854883466448, 0.4410519429615566, 0.49825336251940044, 0.4232329385621207, 0.4500854015350342, 0.418069737298148, 0.4045717545918056], "val_accuracy": [0.437333345413208, 0.46799999475479126, 0.5103333592414856, 0.6620000004768372, 0.7083333134651184, 0.6913333535194397, 0.7540000081062317, 0.7663333415985107, 0.6963333487510681, 0.7693333625793457, 0.7703333497047424, 0.7713333368301392, 0.7803333401679993, 0.7929999828338623, 0.7576666474342346, 0.815666675567627, 0.8199999928474426, 0.765666663646698, 0.8173333406448364, 0.8076666593551636, 0.8196666836738586, 0.8193333148956299]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [71, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 0, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8091428279876709, "mapping_values": [1, 22, 22, 13, 9, 4, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)), grad)))), alpha))), tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.negative(tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, alpha)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2503184641136578, 1.9001955079396229, 1.4401369401098887, 1.1097154999453205, 0.9369430089308648, 0.8413025634305478, 0.7973453639646673, 0.7405734286804587, 0.7329605763866412, 0.6919442070174479, 0.661418252412622, 0.6395057643393578, 0.6464265875922784, 0.6139760050539327, 0.5928406062111674, 0.6228394946559482, 0.5738856989426336, 0.5433694820882087, 0.5525102591344536, 0.5179145449440099, 0.5180579138359516, 0.5032923266620306], "accuracy": [0.2763175368309021, 0.41064587235450745, 0.5145951509475708, 0.6020340919494629, 0.6476026773452759, 0.6816800832748413, 0.7038700580596924, 0.7189275026321411, 0.7174745798110962, 0.7376832365989685, 0.7479857206344604, 0.7528728246688843, 0.7497028112411499, 0.7627789974212646, 0.7741381525993347, 0.7625148296356201, 0.7858935594558716, 0.7996301651000977, 0.7895918488502502, 0.8035926818847656, 0.8020076751708984, 0.8087438941001892], "val_loss": [1.7058485916682653, 1.393979890005929, 1.1567686625889368, 0.7613448756081718, 0.6462950706481934, 0.6702929564884731, 0.5740434953144619, 0.5210473707744053, 0.6211801426751273, 0.5224991355623517, 0.5132844958986554, 0.5166234970092773, 0.4750387498310634, 0.4625577075140817, 0.5305191789354596, 0.4379854883466448, 0.4410519429615566, 0.49825336251940044, 0.4232329385621207, 0.4500854015350342, 0.418069737298148, 0.4045717545918056], "val_accuracy": [0.437333345413208, 0.46799999475479126, 0.5103333592414856, 0.6620000004768372, 0.7083333134651184, 0.6913333535194397, 0.7540000081062317, 0.7663333415985107, 0.6963333487510681, 0.7693333625793457, 0.7703333497047424, 0.7713333368301392, 0.7803333401679993, 0.7929999828338623, 0.7576666474342346, 0.815666675567627, 0.8199999928474426, 0.765666663646698, 0.8173333406448364, 0.8076666593551636, 0.8196666836738586, 0.8193333148956299]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [2, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 8, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 71, 71, 29, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 1, 4, 9, 6, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [41, 25, 50, 71, 34]], "fitness": -0.8040000200271606, "mapping_values": [1, 36, 36, 24, 12, 7, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.square(grad), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))))))))))))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, alpha)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0877851276444312, 1.354942627507997, 1.0878769312993237, 0.9000167729454333, 0.8107993595982115, 0.8121559966462336, 0.7376620673216912, 0.706830354587765, 0.7080123237866957, 0.6802509218442552, 0.6485057395793475, 0.6660303668008426, 0.6373025343607382, 0.6234619189262894, 0.6211253444925826, 0.6211226021829392, 0.5987049600766587, 0.5773208713833808, 0.5777331447053374, 0.566469486757056, 0.558739162895894, 0.5660578655434512, 0.5378159361193602, 0.5379621550911186, 0.5532093886150707, 0.516265345279488, 0.5296734331259086, 0.5068353423667921, 0.5073041499424699, 0.498264420868588, 0.48177589866006854, 0.4984066233092043, 0.48618719769412216, 0.482651258598245, 0.47690973617554716, 0.47124351656133034, 0.4945206569682149], "accuracy": [0.31303659081459045, 0.5128780603408813, 0.6155065298080444, 0.6831330060958862, 0.7004358768463135, 0.6940959095954895, 0.7244749665260315, 0.735569953918457, 0.7256637215614319, 0.7470611333847046, 0.7556465268135071, 0.7433628439903259, 0.7605336308479309, 0.7606657147407532, 0.7627789974212646, 0.7664773464202881, 0.7705719470977783, 0.7877426743507385, 0.7823272943496704, 0.7898560166358948, 0.793950617313385, 0.7836481332778931, 0.7992339134216309, 0.798309326171875, 0.7942147850990295, 0.8058380484580994, 0.7979130744934082, 0.8103289008140564, 0.8079513907432556, 0.8117818236351013, 0.8211596608161926, 0.8170651197433472, 0.8214238286018372, 0.819442629814148, 0.824329674243927, 0.8235371708869934, 0.8198388814926147], "val_loss": [1.1944690431867326, 0.8392097268785749, 0.7761206456593105, 0.6371265820094517, 0.6684675216674805, 0.6181446313858032, 0.5381346940994263, 0.5495951516287667, 0.545400755746024, 0.5122333594730922, 0.5744540350777763, 0.5366322823933193, 0.5051935400281634, 0.48431805201939176, 0.4865081310272217, 0.46991401059286936, 0.4679929869515555, 0.47780135699680876, 0.45535629987716675, 0.47832105840955463, 0.5039088215146746, 0.44653236865997314, 0.4450788583074297, 0.44012454577854704, 0.42003893852233887, 0.4226342865398952, 0.4300648995808193, 0.43876192399433683, 0.4390180706977844, 0.4127694708960397, 0.40590888261795044, 0.40251794883183073, 0.4046932714326041, 0.41810271569660734, 0.4047399418694632, 0.40576488631112234, 0.40124604531696867], "val_accuracy": [0.565666675567627, 0.6736666560173035, 0.6819999814033508, 0.7326666712760925, 0.6840000152587891, 0.7196666598320007, 0.7696666717529297, 0.7463333606719971, 0.7453333139419556, 0.7860000133514404, 0.7193333506584167, 0.7670000195503235, 0.765666663646698, 0.7836666703224182, 0.7886666655540466, 0.8043333292007446, 0.8059999942779541, 0.7856666445732117, 0.8119999766349792, 0.7893333435058594, 0.7806666493415833, 0.8013333082199097, 0.812333345413208, 0.8136666417121887, 0.8233333230018616, 0.8193333148956299, 0.8036666512489319, 0.8023333549499512, 0.8086666464805603, 0.8259999752044678, 0.8253333568572998, 0.8316666483879089, 0.828000009059906, 0.812333345413208, 0.8223333358764648, 0.8259999752044678, 0.8266666531562805]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 5, 5, 2, 2, 5, 6, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [2, 0, 2, 2, 2, 2, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 50, 27, 79, 91, 53, 52, 57, 21], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 1, 2, 0, 5, 4, 5, 6, 0, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 3, 3, 2, 1, 0, 0, 0], [95, 46, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.32828572392463684, "mapping_values": [1, 20, 20, 13, 7, 2, 19, 19, 12, 7, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))))))), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.square(grad)), grad), tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), grad))))), alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), grad), tf.math.add(beta, beta)))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.523895397855149, 2.2868960979135675, 2.273022435927325, 2.303485739043738, 2.303199557013531, 2.3031559932375187, 2.303239993667401], "accuracy": [0.1550653874874115, 0.14397041499614716, 0.12970545887947083, 0.09893012791872025, 0.09840179979801178, 0.10051512718200684, 0.09245806187391281], "val_loss": [1.9836925779070174, 1.6345267295837402, 1.974315915788923, 1.9736956187656947, 1.9737462997436523, 1.9737776347569056, 1.9738847187587194], "val_accuracy": [0.09833333641290665, 0.33133333921432495, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [5, 2, 4, 4, 5, 2, 2, 5, 5, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [87, 90, 50, 27, 57, 91, 53, 52, 57, 21], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 1, 0, 9, 6, 2, 0, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 3, 1, 3, 3, 0, 0], [64, 46, 24, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 15, 9, 3, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad)))))), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(grad)), grad))))), tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [2, 1, 2, 9, 9, 1, 2, 1, 2, 0, 5, 4, 1, 8, 2, 6, 9, 8, 4, 1, 1, 2, 0, 9, 2, 8, 8, 2, 9, 4, 9, 5, 9], [0, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 64, 50, 27, 57, 91, 51, 52, 57, 21, 43, 83], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [5, 2, 9, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 2, 3, 0, 2, 1, 3, 0, 0], [95, 80, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [6.593202535713959e+28, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11728965491056442, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 0, 2, 1, 5, 1, 0, 8, 2, 1, 0, 0, 9, 1, 2, 9, 9, 5, 0, 1, 1, 2, 6, 9, 2, 8, 0], [0, 0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 50, 27, 57, 91, 53, 52, 44, 21], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [9, 1, 1, 8, 8, 4, 9, 4, 2, 3, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 2, 2, 0, 2, 1, 3, 0, 0], [95, 46, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 8, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.sqrt(sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024932162605176, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 6, 9, 9, 6, 2, 2, 5, 9, 1, 4, 2, 6, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 3, 1, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 3, 13, 13, 8, 5, 2, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10434553027153015, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [9, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 10, 19, 41, 30, 79, 83, 52, 48, 54, 42], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 0, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 3, 2, 1, 0, 0, 0], [95, 46, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3033940536376587, 2.3052979066403094, 2.306741369902702, 2.3071052491499557, 2.3086882124109636, 2.309054660035036, 2.3115158377070357, 2.310640959487127, 2.3122638437049168, 2.3103959305946775], "accuracy": [0.09430722147226334, 0.09998679161071777, 0.09866596013307571, 0.0948355570435524, 0.09866596013307571, 0.09945846349000931, 0.09853387624025345, 0.10170386731624603, 0.10091137140989304, 0.09959053993225098], "val_loss": [1.9737733432224818, 1.974189349583217, 1.9765898159572057, 1.9792280878339494, 1.9783010482788086, 1.9798368045261927, 1.9769635881696428, 1.980208465031215, 1.9817688124520438, 1.9825870650155204], "val_accuracy": [0.09833333641290665, 0.10000000149011612, 0.09966666996479034, 0.10000000149011612, 0.10400000214576721, 0.10000000149011612, 0.10400000214576721, 0.09833333641290665, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [2, 0, 2, 1, 5, 1, 0, 3, 2, 1, 0, 0, 9, 1, 2, 9, 9, 5, 0, 1, 1, 2, 6, 9, 2, 8, 0], [0, 3, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 50, 27, 57, 91, 53, 52, 44, 21], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [9, 1, 1, 8, 8, 4, 9, 4, 2, 3, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 2, 2, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 67, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 0, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 1, 1, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 2, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [78, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 36, 36, 24, 12, 8, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(grad)), grad), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))))), alpha)), tf.math.add(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 3, 8, 2, 6, 2, 2, 5, 6, 1, 4, 3, 6, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [87, 70, 50, 2, 57, 91, 53, 52, 57, 21], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 3, 3, 0, 3, 9, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 2, 2, 0, 2, 1, 3, 0, 0], [44, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [15, 25, 50, 71, 34]], "fitness": -0.09714286029338837, "mapping_values": [1, 37, 37, 24, 13, 9, 14, 14, 9, 5, 3, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, grad)), tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))))))))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, beta)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3030222872103114, 2.3026878214027304, 2.3071259980534897, 2.3075784566521786, 2.3113634255363515, 2.315471974850142, 2.31706087357175, 2.324714765509657, 2.332109061718428, 2.337336024399116, 2.347242818107348, 2.353365247748106, 2.3641858441624044, 2.384437520600675, 2.3883355743046435, 2.4117590567344815, 2.429964527115767, 2.4455837717523603, 2.461575592198723, 2.4887417482898346, 2.512204308315212, 2.547075835327352, 2.574212495157385, 2.6065581312835837, 2.6260570347065055], "accuracy": [0.09113723784685135, 0.09232597798109055, 0.08796724677085876, 0.09325055778026581, 0.08440100401639938, 0.09377889335155487, 0.09166556596755981, 0.09206181764602661, 0.0886276587843895, 0.0956280529499054, 0.09800554811954498, 0.09747721254825592, 0.09219389408826828, 0.09509972482919693, 0.1018359512090683, 0.09668471664190292, 0.09417514503002167, 0.09325055778026581, 0.09945846349000931, 0.09708096832036972, 0.09668471664190292, 0.09576013684272766, 0.10011887550354004, 0.09747721254825592, 0.1002509593963623], "val_loss": [1.9714012145996094, 1.9724194662911552, 1.973517690386091, 1.974637167794364, 1.975752898624965, 1.9769270079476493, 1.978278500693185, 1.9800879614693778, 1.9825706481933594, 1.9857617786952428, 1.9896744319370814, 1.9943017278398787, 1.9996116501944405, 2.0056143488202776, 2.012336117880685, 2.0198117664882114, 2.028083869389125, 2.0371929577418735, 2.0471739087785994, 2.0580656869070872, 2.0699075290134976, 2.082746301378523, 2.0966219902038574, 2.1115762846810475, 2.1276492391313826], "val_accuracy": [0.0273333340883255, 0.023666666820645332, 0.02433333359658718, 0.03233333304524422, 0.04633333161473274, 0.059333331882953644, 0.07500000298023224, 0.08500000089406967, 0.09166666865348816, 0.09399999678134918, 0.0963333323597908, 0.09700000286102295, 0.09666666388511658, 0.09666666388511658, 0.0963333323597908, 0.09733333438634872, 0.0976666659116745, 0.09799999743700027, 0.09866666793823242, 0.0989999994635582, 0.0989999994635582, 0.09866666793823242, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 8, 3, 2, 5, 2, 3, 5, 6, 9, 3, 2, 4, 9, 5, 0, 2, 8, 2, 0, 9, 2], [2, 0, 2, 2, 2, 2, 1, 2, 0, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [49, 10, 50, 27, 79, 91, 53, 52, 57, 21], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 5, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 46, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [91, 25, 50, 71, 34]], "fitness": -0.05657142773270607, "mapping_values": [1, 8, 8, 4, 4, 1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.square(beta)))", "other_info": {"loss": [2.302458649754855, 2.300900798573895, 2.3030542390788344, 2.301791068286062, 2.302233622956191, 2.302653780009973, 2.301876108455242, 2.301030625063808, 2.3025381859535115, 2.301053086953345, 2.302599757401982, 2.3010640427137585, 2.3003818330637547, 2.3007492988872618, 2.3007133157261768, 2.3003148824122164, 2.3004735878760614, 2.300383090532026, 2.299464869792073, 2.3009205342850683, 2.2988574701986133, 2.3006061808843463, 2.3013938845676156, 2.3012498222432196, 2.300912151971529, 2.300532747899001, 2.2991530658420616, 2.3000381953680695, 2.301458977752311, 2.299448650589614, 2.3001251350131255, 2.300645405102116, 2.300518743082706, 2.2993856463308235, 2.299890108710629, 2.300421440716291, 2.298965516800201, 2.2992028350512648, 2.299335728704402, 2.298738668906832, 2.2991678995652176, 2.3005692312950785, 2.2984909316914317, 2.298601401842596, 2.299906281180401, 2.298693757629697, 2.2999477701069986, 2.2993409379818783, 2.3001826069594657, 2.2997093564404976, 2.299722080012795, 2.2981535531841235, 2.298391616890821, 2.2989161584544506, 2.2998318856717606, 2.298929770735072, 2.29908458645853, 2.2970127891854935, 2.298562553974112, 2.2985648624554695, 2.2985593387400707, 2.297646887093613, 2.298387909924365, 2.295956470994366, 2.2976253357986653, 2.2994233066096297, 2.298267273429898, 2.2982364772821318, 2.297771654738695, 2.2979330433641585, 2.297274085083784, 2.2973098385178132, 2.298328322946057, 2.2977365392499265, 2.2984818599762904, 2.2970861017176536, 2.298334262185581, 2.2983196435776434, 2.2970423579074293, 2.29672716372773, 2.2960882447635367, 2.2956036287543795, 2.295260795308079, 2.295772700466579, 2.296179620612803, 2.2969472905852935, 2.297151866259592, 2.2978534182978185, 2.2970683865023798, 2.295845536382018, 2.294854709516663, 2.295514326054013, 2.296743734936909, 2.2973808696194093, 2.295450709357694, 2.2966922909088296, 2.2964301473035347, 2.2968576279424675, 2.2959065775845455, 2.29657589433499], "accuracy": [0.09047681838274002, 0.09470347315073013, 0.09074098616838455, 0.09311848133802414, 0.08994849026203156, 0.09417514503002167, 0.09113723784685135, 0.09536388516426086, 0.08466517180204391, 0.10011887550354004, 0.09034473448991776, 0.09047681838274002, 0.09628847241401672, 0.09800554811954498, 0.09998679161071777, 0.09800554811954498, 0.09734513610601425, 0.09311848133802414, 0.10276053100824356, 0.09457138925790787, 0.09694888442754745, 0.09681680053472519, 0.09285431355237961, 0.09760929644107819, 0.09589222073554993, 0.09179764986038208, 0.09642054885625839, 0.0952318087220192, 0.09100515395402908, 0.09668471664190292, 0.1006472036242485, 0.09311848133802414, 0.09681680053472519, 0.09879804402589798, 0.09893012791872025, 0.09391097724437714, 0.0952318087220192, 0.09589222073554993, 0.09906221181154251, 0.0956280529499054, 0.09853387624025345, 0.10157178342342377, 0.10302469879388809, 0.10130762308835983, 0.10130762308835983, 0.10408136248588562, 0.09760929644107819, 0.1006472036242485, 0.09893012791872025, 0.09694888442754745, 0.09681680053472519, 0.1002509593963623, 0.10328886657953262, 0.09747721254825592, 0.10447761416435242, 0.10091137140989304, 0.09906221181154251, 0.1022322028875351, 0.10540219396352768, 0.10051512718200684, 0.09576013684272766, 0.09760929644107819, 0.09800554811954498, 0.10738343745470047, 0.1018359512090683, 0.10249637067317963, 0.10289261490106583, 0.09945846349000931, 0.10077928751707077, 0.10051512718200684, 0.10487385839223862, 0.10117553919553757, 0.10170386731624603, 0.10394927859306335, 0.09866596013307571, 0.10302469879388809, 0.10170386731624603, 0.09919429570436478, 0.10394927859306335, 0.1026284471154213, 0.1072513535618782, 0.10289261490106583, 0.10830801725387573, 0.11213842034339905, 0.10672302544116974, 0.10738343745470047, 0.10077928751707077, 0.10117553919553757, 0.10210011899471283, 0.10685510188341141, 0.10593052208423615, 0.10672302544116974, 0.10540219396352768, 0.09985470771789551, 0.10632677376270294, 0.10540219396352768, 0.10328886657953262, 0.10170386731624603, 0.10434553027153015, 0.10870426893234253], "val_loss": [1.97050142288208, 1.970419475010463, 1.9703288759504045, 1.970250470297677, 1.9701647758483887, 1.9700892312186105, 1.9700101443699427, 1.9699392318725586, 1.9698548998151506, 1.969775676727295, 1.9696901866367884, 1.9696165493556432, 1.9695336478097099, 1.9694574901035853, 1.969378880092076, 1.9692960466657365, 1.9692192758832658, 1.9691493170601981, 1.9690771784101213, 1.969003132411412, 1.9689368520464217, 1.9688657351902552, 1.968794550214495, 1.9687254769461495, 1.9686527252197266, 1.9685868535723006, 1.9685157367161341, 1.968451908656529, 1.9683763640267509, 1.9683151245117188, 1.968252182006836, 1.968188762664795, 1.9681281362261092, 1.9680538177490234, 1.967989785330636, 1.9679292270115443, 1.9678711209978377, 1.9678049087524414, 1.9677433967590332, 1.9676844733101981, 1.9676258904593331, 1.9675648553030831, 1.9675019809177943, 1.9674431937081474, 1.9673842702593123, 1.9673245293753487, 1.967269011906215, 1.9672164235796248, 1.9671626091003418, 1.9671075684683663, 1.9670565468924386, 1.9670041629246302, 1.966954571860177, 1.9669055257524763, 1.9668590000697546, 1.966806207384382, 1.9667512348720007, 1.9667096138000488, 1.9666602952139718, 1.966609341757638, 1.9665600912911552, 1.96650607245309, 1.9664554595947266, 1.966400146484375, 1.9663495336260115, 1.9663007599966866, 1.9662498065403529, 1.9661996705191476, 1.9661434037344796, 1.9660882268633162, 1.9660380908421107, 1.9659876142229353, 1.9659390449523926, 1.9658959252493722, 1.9658451761518205, 1.965794358934675, 1.9657444272722517, 1.9656973566327776, 1.9656459944588798, 1.965595313480922, 1.9655472891671317, 1.965498379298619, 1.9654483795166016, 1.9653970173427038, 1.9653469494410925, 1.9653000831604004, 1.9652556010654993, 1.9652111870901925, 1.9651679311479842, 1.9651194981166296, 1.9650722912379675, 1.9650228364127023, 1.9649739265441895, 1.9649270602634974, 1.964883531842913, 1.9648407527378626, 1.9647953169686454, 1.9647553988865443, 1.964707715170724, 1.9646647317068917], "val_accuracy": [0.03966666758060455, 0.03966666758060455, 0.0403333343565464, 0.04066666588187218, 0.041999999433755875, 0.04266666620969772, 0.04333333298563957, 0.04333333298563957, 0.04333333298563957, 0.04399999976158142, 0.044333335012197495, 0.04533333331346512, 0.04533333331346512, 0.04533333331346512, 0.045666664838790894, 0.045666664838790894, 0.04633333161473274, 0.04699999839067459, 0.04766666516661644, 0.04800000041723251, 0.04866666719317436, 0.05000000074505806, 0.050333332270383835, 0.050333332270383835, 0.050999999046325684, 0.05299999937415123, 0.0533333346247673, 0.05400000140070915, 0.05433333292603493, 0.054999999701976776, 0.054999999701976776, 0.05533333495259285, 0.05533333495259285, 0.05533333495259285, 0.05533333495259285, 0.0560000017285347, 0.056333333253860474, 0.05666666850447655, 0.0573333315551281, 0.05833333358168602, 0.05900000035762787, 0.059333331882953644, 0.059333331882953644, 0.05966666713356972, 0.05999999865889549, 0.060333333909511566, 0.06066666543483734, 0.061000000685453415, 0.061000000685453415, 0.06133333221077919, 0.061666667461395264, 0.06133333221077919, 0.06133333221077919, 0.06133333221077919, 0.061666667461395264, 0.06233333423733711, 0.06266666948795319, 0.06300000101327896, 0.06266666948795319, 0.06300000101327896, 0.06300000101327896, 0.06400000303983688, 0.06366666406393051, 0.06433333456516266, 0.06433333456516266, 0.06433333456516266, 0.06466666609048843, 0.06499999761581421, 0.06499999761581421, 0.06533333659172058, 0.06566666811704636, 0.06599999964237213, 0.06700000166893005, 0.06700000166893005, 0.06700000166893005, 0.06833333522081375, 0.06866666674613953, 0.0689999982714653, 0.06966666877269745, 0.070333331823349, 0.07100000232458115, 0.07100000232458115, 0.07133333384990692, 0.07199999690055847, 0.07233333587646484, 0.07233333587646484, 0.07266666740179062, 0.07366666942834854, 0.07433333247900009, 0.07433333247900009, 0.07500000298023224, 0.07533333450555801, 0.07599999755620956, 0.07633333653211594, 0.07666666805744171, 0.07733333110809326, 0.07800000160932541, 0.07866666465997696, 0.0793333351612091, 0.08033332973718643]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 64, 50, 27, 57, 91, 51, 52, 57, 21, 43, 83], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 0, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3024940325709666, 2.3010267813003233, 2.3032782620694645, 2.3020922788744196, 2.3026329613223195, 2.3031208915103303], "accuracy": [0.09008057415485382, 0.0936468094587326, 0.09008057415485382, 0.09311848133802414, 0.08889182657003403, 0.09338264167308807], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [6, 8, 2, 4, 2, 3, 2, 5, 2, 3, 4, 2, 4, 3, 2, 6, 9, 5, 0, 2, 8, 2, 2, 9, 2], [0, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 67, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 2, 9, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 36, 36, 21, 15, 5, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.square(grad)))), grad), tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.pow(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.divide_no_nan(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), alpha))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3024940325709666, 2.3010267813003233, 2.3032782620694645, 2.3020922788744196, 2.3026329613223195, 2.3031208915103303], "accuracy": [0.09008057415485382, 0.0936468094587326, 0.09008057415485382, 0.09311848133802414, 0.08889182657003403, 0.09338264167308807], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 2, 2, 5, 6, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 10, 19, 41, 30, 79, 83, 52, 48, 54, 42], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 3, 8, 0, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 3, 1, 3, 0, 0], [95, 46, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 29, 29, 19, 10, 5, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.square(grad), tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), alpha))))))))), tf.math.pow(tf.math.add(grad, grad), tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024940325709666, 2.3010267813003233, 2.3032782620694645, 2.3020922788744196, 2.3026329613223195, 2.3031208915103303], "accuracy": [0.09008057415485382, 0.0936468094587326, 0.09008057415485382, 0.09311848133802414, 0.08889182657003403, 0.09338264167308807], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [9, 0, 2, 1, 5, 1, 0, 3, 1, 1, 0, 0, 9, 1, 2, 9, 9, 5, 0, 1, 1, 2, 6, 9, 2, 8, 0], [0, 0, 2, 2, 0, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 50, 27, 57, 91, 53, 52, 44, 21], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [9, 1, 1, 8, 8, 4, 9, 4, 2, 3, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 2, 2, 0, 2, 1, 3, 0, 0], [95, 46, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024940325709666, 2.3010267813003233, 2.3032782620694645, 2.3020922788744196, 2.3026329613223195, 2.3031208915103303], "accuracy": [0.09008057415485382, 0.0936468094587326, 0.09008057415485382, 0.09311848133802414, 0.08889182657003403, 0.09338264167308807], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [3, 0, 2, 1, 5, 1, 2, 3, 2, 9, 0, 0, 9, 1, 2, 9, 9, 5, 0, 1, 1, 2, 6, 9, 2, 8, 0], [0, 0, 2, 2, 0, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [48, 10, 50, 27, 57, 91, 53, 52, 44, 21], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [9, 1, 1, 8, 8, 4, 9, 4, 2, 3, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 2, 2, 0, 2, 1, 3, 0, 0], [95, 46, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [24, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 19, 19, 13, 6, 5, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(grad)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(sigma, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024940640619955, 2.3010267318279167, 2.303278136105349, 2.3020921844013333, 2.3026328803588845, 2.3031206710731285], "accuracy": [0.09008057415485382, 0.0936468094587326, 0.09008057415485382, 0.09311848133802414, 0.08889182657003403, 0.09338264167308807], "val_loss": [1.9705901145935059, 1.970590046473912, 1.970590046473912, 1.970590046473912, 1.9705899102347237, 1.9705898421151298], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]