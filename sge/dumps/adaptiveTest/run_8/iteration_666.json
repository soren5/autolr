[{"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.7794285416603088, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.285088769732339, 2.2424366569569427, 2.1850738415486934, 2.094116647812543, 1.9532004943566001, 1.7695601838942863, 1.5859260251887046, 1.43630831949526, 1.3016034309433562, 1.221205512955519, 1.1523135607001047, 1.0891887662496076, 1.0522016495478042, 1.002042202240346, 0.9807429186987004, 0.9556708758958437, 0.9372498180415605, 0.8977914976169877, 0.882752267754766, 0.8733870963205703, 0.8518968225470183, 0.8412097775862123, 0.8306701120966855, 0.8109542905945804, 0.8092571199924372, 0.8000803530381545, 0.7940252694502924, 0.7975292434277961, 0.7811130268179178, 0.7724562566498597, 0.7629542342030282, 0.7534124492622716, 0.7505714346578076, 0.7522249192908739, 0.7407654700120521, 0.7363685351462963, 0.7293996182194695, 0.7240692276161707, 0.7294003811998611, 0.7095459366062015, 0.7071867240591607, 0.7096166966487671, 0.688952290851206, 0.7069482805706554, 0.6935401760733533, 0.6919088886555994, 0.6895001103314017, 0.6908786831719607, 0.6788945448097851, 0.6831373761138266, 0.6770986776074178, 0.663362904790685, 0.6718194619964662, 0.6616959416430152, 0.6615205891002297, 0.6557134325241982, 0.655055627689354, 0.6462002027902337, 0.6563202695934103, 0.6510346053440526, 0.6484147010698547, 0.6437440046371643, 0.6391786977032692, 0.6434022448853637], "accuracy": [0.12442214041948318, 0.2401268035173416, 0.3238673806190491, 0.3797384798526764, 0.4282129108905792, 0.46427157521247864, 0.49451854825019836, 0.5254259705543518, 0.5600317120552063, 0.5761458277702332, 0.5959582328796387, 0.6242240071296692, 0.6301677227020264, 0.6468101739883423, 0.6491876840591431, 0.6655659675598145, 0.6634526252746582, 0.6808875799179077, 0.6837934255599976, 0.685510516166687, 0.6911900639533997, 0.6972658634185791, 0.7083608508110046, 0.7046625018119812, 0.7077004313468933, 0.7087571024894714, 0.7107383608818054, 0.7117950320243835, 0.7185312509536743, 0.7181349992752075, 0.7236824631690979, 0.7217012047767639, 0.7272487282752991, 0.7297582626342773, 0.7358341217041016, 0.728701651096344, 0.7382115721702576, 0.7405890822410583, 0.7342491149902344, 0.7408532500267029, 0.7412495017051697, 0.7400607466697693, 0.7452120184898376, 0.7416457533836365, 0.7448157668113708, 0.7445515990257263, 0.7441553473472595, 0.7434949278831482, 0.7504953145980835, 0.7494386434555054, 0.7504953145980835, 0.7564390301704407, 0.7539294958114624, 0.7523444890975952, 0.7569673657417297, 0.7574957013130188, 0.759609043598175, 0.7637035846710205, 0.7543256878852844, 0.763439416885376, 0.7635715007781982, 0.7631752490997314, 0.7643640041351318, 0.7648923397064209], "val_loss": [1.932601043156215, 1.8861847605024065, 1.8147071429661341, 1.701131820678711, 1.5362235477992467, 1.337921483176095, 1.1559043271200997, 1.018268346786499, 0.9157692023686, 0.8434378930500576, 0.7931040355137416, 0.749310953276498, 0.7192511899130685, 0.6968018157141549, 0.6737685884748187, 0.6578500270843506, 0.639204604285104, 0.6267112834112984, 0.6147109270095825, 0.6076930931636265, 0.5971189567020961, 0.5883840152195522, 0.581115688596453, 0.5735256331307548, 0.5680761166981289, 0.5696261440004621, 0.5582677807126727, 0.551943131855556, 0.5456558636256627, 0.5468458618436541, 0.5395146608352661, 0.537413511957441, 0.532146760395595, 0.5278479712350028, 0.5245934384209769, 0.5234609842300415, 0.5216751950127738, 0.5187924759728568, 0.5168994665145874, 0.5095343930380685, 0.5090186936514718, 0.5073839766638619, 0.5041086333138602, 0.5024264539991107, 0.4980115720203945, 0.4996349300657, 0.4936145544052124, 0.491763847214835, 0.4907123531614031, 0.48732166630881174, 0.48707520961761475, 0.4846700770514352, 0.48207792213984896, 0.4802744558879307, 0.47808611392974854, 0.4762046848024641, 0.4752928188868931, 0.4743372031620571, 0.472239545413426, 0.4738433190754482, 0.4695352486201695, 0.4675942659378052, 0.46782849516187397, 0.4661691870008196], "val_accuracy": [0.3413333296775818, 0.43433332443237305, 0.5043333172798157, 0.559333324432373, 0.5746666789054871, 0.5896666646003723, 0.6303333044052124, 0.6596666574478149, 0.6746666431427002, 0.6936666369438171, 0.6933333277702332, 0.7089999914169312, 0.7089999914169312, 0.7136666774749756, 0.7166666388511658, 0.7170000076293945, 0.7369999885559082, 0.7409999966621399, 0.7509999871253967, 0.7476666569709778, 0.7549999952316284, 0.753333330154419, 0.7523333430290222, 0.7593333125114441, 0.7599999904632568, 0.750333309173584, 0.7699999809265137, 0.7716666460037231, 0.7726666927337646, 0.7713333368301392, 0.777999997138977, 0.7699999809265137, 0.7736666798591614, 0.7796666622161865, 0.777999997138977, 0.7823333144187927, 0.7836666703224182, 0.7856666445732117, 0.781333327293396, 0.784333348274231, 0.7839999794960022, 0.7850000262260437, 0.7896666526794434, 0.7873333096504211, 0.7919999957084656, 0.7876666784286499, 0.7906666398048401, 0.7960000038146973, 0.793666660785675, 0.7933333516120911, 0.7953333258628845, 0.7979999780654907, 0.7963333129882812, 0.7996666431427002, 0.7996666431427002, 0.7976666688919067, 0.8009999990463257, 0.8013333082199097, 0.8046666383743286, 0.8029999732971191, 0.8003333210945129, 0.8026666641235352, 0.8036666512489319, 0.8033333420753479]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 3, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [85, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [42, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.7794285416603088, "mapping_values": [1, 8, 8, 5, 3, 2, 12, 12, 8, 4, 5, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.285088769732339, 2.2424366569569427, 2.1850738415486934, 2.094116647812543, 1.9532004943566001, 1.7695601838942863, 1.5859260251887046, 1.43630831949526, 1.3016034309433562, 1.221205512955519, 1.1523135607001047, 1.0891887662496076, 1.0522016495478042, 1.002042202240346, 0.9807429186987004, 0.9556708758958437, 0.9372498180415605, 0.8977914976169877, 0.882752267754766, 0.8733870963205703, 0.8518968225470183, 0.8412097775862123, 0.8306701120966855, 0.8109542905945804, 0.8092571199924372, 0.8000803530381545, 0.7940252694502924, 0.7975292434277961, 0.7811130268179178, 0.7724562566498597, 0.7629542342030282, 0.7534124492622716, 0.7505714346578076, 0.7522249192908739, 0.7407654700120521, 0.7363685351462963, 0.7293996182194695, 0.7240692276161707, 0.7294003811998611, 0.7095459366062015, 0.7071867240591607, 0.7096166966487671, 0.688952290851206, 0.7069482805706554, 0.6935401760733533, 0.6919088886555994, 0.6895001103314017, 0.6908786831719607, 0.6788945448097851, 0.6831373761138266, 0.6770986776074178, 0.663362904790685, 0.6718194619964662, 0.6616959416430152, 0.6615205891002297, 0.6557134325241982, 0.655055627689354, 0.6462002027902337, 0.6563202695934103, 0.6510346053440526, 0.6484147010698547, 0.6437440046371643, 0.6391786977032692, 0.6434022448853637], "accuracy": [0.12442214041948318, 0.2401268035173416, 0.3238673806190491, 0.3797384798526764, 0.4282129108905792, 0.46427157521247864, 0.49451854825019836, 0.5254259705543518, 0.5600317120552063, 0.5761458277702332, 0.5959582328796387, 0.6242240071296692, 0.6301677227020264, 0.6468101739883423, 0.6491876840591431, 0.6655659675598145, 0.6634526252746582, 0.6808875799179077, 0.6837934255599976, 0.685510516166687, 0.6911900639533997, 0.6972658634185791, 0.7083608508110046, 0.7046625018119812, 0.7077004313468933, 0.7087571024894714, 0.7107383608818054, 0.7117950320243835, 0.7185312509536743, 0.7181349992752075, 0.7236824631690979, 0.7217012047767639, 0.7272487282752991, 0.7297582626342773, 0.7358341217041016, 0.728701651096344, 0.7382115721702576, 0.7405890822410583, 0.7342491149902344, 0.7408532500267029, 0.7412495017051697, 0.7400607466697693, 0.7452120184898376, 0.7416457533836365, 0.7448157668113708, 0.7445515990257263, 0.7441553473472595, 0.7434949278831482, 0.7504953145980835, 0.7494386434555054, 0.7504953145980835, 0.7564390301704407, 0.7539294958114624, 0.7523444890975952, 0.7569673657417297, 0.7574957013130188, 0.759609043598175, 0.7637035846710205, 0.7543256878852844, 0.763439416885376, 0.7635715007781982, 0.7631752490997314, 0.7643640041351318, 0.7648923397064209], "val_loss": [1.932601043156215, 1.8861847605024065, 1.8147071429661341, 1.701131820678711, 1.5362235477992467, 1.337921483176095, 1.1559043271200997, 1.018268346786499, 0.9157692023686, 0.8434378930500576, 0.7931040355137416, 0.749310953276498, 0.7192511899130685, 0.6968018157141549, 0.6737685884748187, 0.6578500270843506, 0.639204604285104, 0.6267112834112984, 0.6147109270095825, 0.6076930931636265, 0.5971189567020961, 0.5883840152195522, 0.581115688596453, 0.5735256331307548, 0.5680761166981289, 0.5696261440004621, 0.5582677807126727, 0.551943131855556, 0.5456558636256627, 0.5468458618436541, 0.5395146608352661, 0.537413511957441, 0.532146760395595, 0.5278479712350028, 0.5245934384209769, 0.5234609842300415, 0.5216751950127738, 0.5187924759728568, 0.5168994665145874, 0.5095343930380685, 0.5090186936514718, 0.5073839766638619, 0.5041086333138602, 0.5024264539991107, 0.4980115720203945, 0.4996349300657, 0.4936145544052124, 0.491763847214835, 0.4907123531614031, 0.48732166630881174, 0.48707520961761475, 0.4846700770514352, 0.48207792213984896, 0.4802744558879307, 0.47808611392974854, 0.4762046848024641, 0.4752928188868931, 0.4743372031620571, 0.472239545413426, 0.4738433190754482, 0.4695352486201695, 0.4675942659378052, 0.46782849516187397, 0.4661691870008196], "val_accuracy": [0.3413333296775818, 0.43433332443237305, 0.5043333172798157, 0.559333324432373, 0.5746666789054871, 0.5896666646003723, 0.6303333044052124, 0.6596666574478149, 0.6746666431427002, 0.6936666369438171, 0.6933333277702332, 0.7089999914169312, 0.7089999914169312, 0.7136666774749756, 0.7166666388511658, 0.7170000076293945, 0.7369999885559082, 0.7409999966621399, 0.7509999871253967, 0.7476666569709778, 0.7549999952316284, 0.753333330154419, 0.7523333430290222, 0.7593333125114441, 0.7599999904632568, 0.750333309173584, 0.7699999809265137, 0.7716666460037231, 0.7726666927337646, 0.7713333368301392, 0.777999997138977, 0.7699999809265137, 0.7736666798591614, 0.7796666622161865, 0.777999997138977, 0.7823333144187927, 0.7836666703224182, 0.7856666445732117, 0.781333327293396, 0.784333348274231, 0.7839999794960022, 0.7850000262260437, 0.7896666526794434, 0.7873333096504211, 0.7919999957084656, 0.7876666784286499, 0.7906666398048401, 0.7960000038146973, 0.793666660785675, 0.7933333516120911, 0.7953333258628845, 0.7979999780654907, 0.7963333129882812, 0.7996666431427002, 0.7996666431427002, 0.7976666688919067, 0.8009999990463257, 0.8013333082199097, 0.8046666383743286, 0.8029999732971191, 0.8003333210945129, 0.8026666641235352, 0.8036666512489319, 0.8033333420753479]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 2, 2, 6, 4, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [87, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.7794285416603088, "mapping_values": [1, 6, 6, 4, 2, 0, 12, 12, 8, 4, 5, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.285088769732339, 2.2424366569569427, 2.1850738415486934, 2.094116647812543, 1.9532004943566001, 1.7695601838942863, 1.5859260251887046, 1.43630831949526, 1.3016034309433562, 1.221205512955519, 1.1523135607001047, 1.0891887662496076, 1.0522016495478042, 1.002042202240346, 0.9807429186987004, 0.9556708758958437, 0.9372498180415605, 0.8977914976169877, 0.882752267754766, 0.8733870963205703, 0.8518968225470183, 0.8412097775862123, 0.8306701120966855, 0.8109542905945804, 0.8092571199924372, 0.8000803530381545, 0.7940252694502924, 0.7975292434277961, 0.7811130268179178, 0.7724562566498597, 0.7629542342030282, 0.7534124492622716, 0.7505714346578076, 0.7522249192908739, 0.7407654700120521, 0.7363685351462963, 0.7293996182194695, 0.7240692276161707, 0.7294003811998611, 0.7095459366062015, 0.7071867240591607, 0.7096166966487671, 0.688952290851206, 0.7069482805706554, 0.6935401760733533, 0.6919088886555994, 0.6895001103314017, 0.6908786831719607, 0.6788945448097851, 0.6831373761138266, 0.6770986776074178, 0.663362904790685, 0.6718194619964662, 0.6616959416430152, 0.6615205891002297, 0.6557134325241982, 0.655055627689354, 0.6462002027902337, 0.6563202695934103, 0.6510346053440526, 0.6484147010698547, 0.6437440046371643, 0.6391786977032692, 0.6434022448853637], "accuracy": [0.12442214041948318, 0.2401268035173416, 0.3238673806190491, 0.3797384798526764, 0.4282129108905792, 0.46427157521247864, 0.49451854825019836, 0.5254259705543518, 0.5600317120552063, 0.5761458277702332, 0.5959582328796387, 0.6242240071296692, 0.6301677227020264, 0.6468101739883423, 0.6491876840591431, 0.6655659675598145, 0.6634526252746582, 0.6808875799179077, 0.6837934255599976, 0.685510516166687, 0.6911900639533997, 0.6972658634185791, 0.7083608508110046, 0.7046625018119812, 0.7077004313468933, 0.7087571024894714, 0.7107383608818054, 0.7117950320243835, 0.7185312509536743, 0.7181349992752075, 0.7236824631690979, 0.7217012047767639, 0.7272487282752991, 0.7297582626342773, 0.7358341217041016, 0.728701651096344, 0.7382115721702576, 0.7405890822410583, 0.7342491149902344, 0.7408532500267029, 0.7412495017051697, 0.7400607466697693, 0.7452120184898376, 0.7416457533836365, 0.7448157668113708, 0.7445515990257263, 0.7441553473472595, 0.7434949278831482, 0.7504953145980835, 0.7494386434555054, 0.7504953145980835, 0.7564390301704407, 0.7539294958114624, 0.7523444890975952, 0.7569673657417297, 0.7574957013130188, 0.759609043598175, 0.7637035846710205, 0.7543256878852844, 0.763439416885376, 0.7635715007781982, 0.7631752490997314, 0.7643640041351318, 0.7648923397064209], "val_loss": [1.932601043156215, 1.8861847605024065, 1.8147071429661341, 1.701131820678711, 1.5362235477992467, 1.337921483176095, 1.1559043271200997, 1.018268346786499, 0.9157692023686, 0.8434378930500576, 0.7931040355137416, 0.749310953276498, 0.7192511899130685, 0.6968018157141549, 0.6737685884748187, 0.6578500270843506, 0.639204604285104, 0.6267112834112984, 0.6147109270095825, 0.6076930931636265, 0.5971189567020961, 0.5883840152195522, 0.581115688596453, 0.5735256331307548, 0.5680761166981289, 0.5696261440004621, 0.5582677807126727, 0.551943131855556, 0.5456558636256627, 0.5468458618436541, 0.5395146608352661, 0.537413511957441, 0.532146760395595, 0.5278479712350028, 0.5245934384209769, 0.5234609842300415, 0.5216751950127738, 0.5187924759728568, 0.5168994665145874, 0.5095343930380685, 0.5090186936514718, 0.5073839766638619, 0.5041086333138602, 0.5024264539991107, 0.4980115720203945, 0.4996349300657, 0.4936145544052124, 0.491763847214835, 0.4907123531614031, 0.48732166630881174, 0.48707520961761475, 0.4846700770514352, 0.48207792213984896, 0.4802744558879307, 0.47808611392974854, 0.4762046848024641, 0.4752928188868931, 0.4743372031620571, 0.472239545413426, 0.4738433190754482, 0.4695352486201695, 0.4675942659378052, 0.46782849516187397, 0.4661691870008196], "val_accuracy": [0.3413333296775818, 0.43433332443237305, 0.5043333172798157, 0.559333324432373, 0.5746666789054871, 0.5896666646003723, 0.6303333044052124, 0.6596666574478149, 0.6746666431427002, 0.6936666369438171, 0.6933333277702332, 0.7089999914169312, 0.7089999914169312, 0.7136666774749756, 0.7166666388511658, 0.7170000076293945, 0.7369999885559082, 0.7409999966621399, 0.7509999871253967, 0.7476666569709778, 0.7549999952316284, 0.753333330154419, 0.7523333430290222, 0.7593333125114441, 0.7599999904632568, 0.750333309173584, 0.7699999809265137, 0.7716666460037231, 0.7726666927337646, 0.7713333368301392, 0.777999997138977, 0.7699999809265137, 0.7736666798591614, 0.7796666622161865, 0.777999997138977, 0.7823333144187927, 0.7836666703224182, 0.7856666445732117, 0.781333327293396, 0.784333348274231, 0.7839999794960022, 0.7850000262260437, 0.7896666526794434, 0.7873333096504211, 0.7919999957084656, 0.7876666784286499, 0.7906666398048401, 0.7960000038146973, 0.793666660785675, 0.7933333516120911, 0.7953333258628845, 0.7979999780654907, 0.7963333129882812, 0.7996666431427002, 0.7996666431427002, 0.7976666688919067, 0.8009999990463257, 0.8013333082199097, 0.8046666383743286, 0.8029999732971191, 0.8003333210945129, 0.8026666641235352, 0.8036666512489319, 0.8033333420753479]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [46], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [83, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302966809842754, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 7, 5, 0, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [0, 65, 54, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [4, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 3, 2, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [45], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [79, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 1, 19, 19, 12, 7, 6, 1, 1, 0, 1, 1, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), grad)), tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.302966809842754, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [3, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 6, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10672302544116974, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [0, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.square(tf.math.add(alpha, grad))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3410526510746785, 2.8368654297390443, 4.200757351281888, 6.5550526318029245, 9.955404491850318, 14.166610874346834, 19.616122560824827], "accuracy": [0.09140139818191528, 0.09642054885625839, 0.10487385839223862, 0.10315678268671036, 0.09721305221319199, 0.09681680053472519, 0.09642054885625839], "val_loss": [2.0618251391819546, 2.5522830145699635, 3.677126884460449, 5.444365910121372, 7.808786119733538, 10.78079468863351, 14.397671290806361], "val_accuracy": [0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 7, 5, 0, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 0, 14, 14, 9, 5, 4, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.negative(grad)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), grad)))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.7914824665277673, 8.077309899310615, 20.21873871159985, 40.28986103489666, 70.49106939212757, 110.68179071678571], "accuracy": [0.09325055778026581, 0.09549596905708313, 0.10434553027153015, 0.10381719470024109, 0.09747721254825592, 0.0956280529499054], "val_loss": [3.2850548199244907, 8.996033532278878, 19.349898747035436, 35.1441159929548, 57.3279789515904, 87.00382995605469], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 3, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [0, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3410526510746785, 2.8368654297390443, 4.200757351281888, 6.5550526318029245, 9.955404491850318, 14.166610874346834, 19.616122560824827], "accuracy": [0.09140139818191528, 0.09642054885625839, 0.10487385839223862, 0.10315678268671036, 0.09721305221319199, 0.09681680053472519, 0.09642054885625839], "val_loss": [2.0618251391819546, 2.5522830145699635, 3.677126884460449, 5.444365910121372, 7.808786119733538, 10.78079468863351, 14.397671290806361], "val_accuracy": [0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 9, 8, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 3, 6, 9, 9, 2, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 2, 0, 2, 1, 3, 0, 0], [32, 33, 83, 50, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [1, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 10, 10, 6, 4, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.422111148579781, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11847840249538422, 0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [99.00879342215401, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.003000000026077032, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 3, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 1, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 9, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [79, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 12, 12, 8, 4, 4, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.square(alpha), tf.math.add(alpha, tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 90, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.09971428662538528, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(grad)))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.719829473166717, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.20036983489990234, 0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.296076502118792, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [24, 25, 50, 71, 34]], "fitness": -0.09971428662538528, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.719829473166717, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.20036983489990234, 0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.296076502118792, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [79, 25, 50, 71, 34]], "fitness": -0.07371428608894348, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, grad)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), sigma))", "other_info": {"loss": [3.96792228387851, 311.40450582780136, 2.3105766734804822, 2.3045369577980974, 2.3032014233293534, 2.303179122579411], "accuracy": [0.19865275919437408, 0.10130762308835983, 0.09998679161071777, 0.09760929644107819, 0.09681680053472519, 0.09391097724437714], "val_loss": [4.778523172651019, 1.9858380045209612, 1.976437704903739, 1.974180085318429, 1.9738202776227678, 1.9737445967538017], "val_accuracy": [0.10400000214576721, 0.09966666996479034, 0.09700000286102295, 0.09700000286102295, 0.10233332961797714, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 3, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 81, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [79, 25, 50, 71, 34]], "fitness": -0.07371428608894348, "mapping_values": [1, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [3.96792228387851, 311.40450582780136, 2.3105766734804822, 2.3045369577980974, 2.3032014233293534, 2.303179122579411], "accuracy": [0.19865275919437408, 0.10130762308835983, 0.09998679161071777, 0.09760929644107819, 0.09681680053472519, 0.09391097724437714], "val_loss": [4.778523172651019, 1.9858380045209612, 1.976437704903739, 1.974180085318429, 1.9738202776227678, 1.9737445967538017], "val_accuracy": [0.10400000214576721, 0.09966666996479034, 0.09700000286102295, 0.09700000286102295, 0.10233332961797714, 0.10400000214576721]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 7, 9, 0, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [0, 18, 76, 52, 8, 55, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [3, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 44, 50, 71, 34]], "fitness": -0.06628571450710297, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [2.300982717100372, 2.2988725105973913, 2.2997243041611775, 2.300858658192385, 2.3016725294720053, 2.301605283497599, 2.30141025269115, 2.301632011256371, 2.3014608655765056, 2.3017968809316502, 2.3021160893987562, 2.302527514147705], "accuracy": [0.08677849918603897, 0.09708096832036972, 0.10091137140989304, 0.08994849026203156, 0.07938185334205627, 0.08400475233793259, 0.08400475233793259, 0.08955223858356476, 0.08611807972192764, 0.08149518072605133, 0.09021265059709549, 0.07977809756994247], "val_loss": [1.9689218657357352, 1.9688301086425781, 1.9711507388523646, 1.9721996443612235, 1.9721394266401018, 1.972076484135219, 1.9722704206194197, 1.9725255966186523, 1.972757066999163, 1.9730032512119837, 1.9732187816074915, 1.9733991622924805], "val_accuracy": [0.06066666543483734, 0.0846666693687439, 0.07199999690055847, 0.05133333429694176, 0.06566666811704636, 0.08366666734218597, 0.09000000357627869, 0.07233333587646484, 0.06966666877269745, 0.0716666653752327, 0.07699999958276749, 0.07999999821186066]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 7, 5, 0, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [0, 65, 54, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 4, 3, 5, 6, 6, 9, 9, 9, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 3, 2, 1, 3, 0, 0], [32, 33, 83, 82, 88, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 6, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [79, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 6, 6, 5, 1, 1, 12, 12, 8, 4, 4, 3, 1, 1, 0, 0, 6, 4, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(grad)))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3015685505666093, 2.3011990328191563, 2.301917349264024, 2.302747485219149, 2.3031709366124367, 2.3022128000172484], "accuracy": [0.08558975160121918, 0.09325055778026581, 0.09206181764602661, 0.08889182657003403, 0.09192973375320435, 0.09351472556591034], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 1, 3, 5, 9, 5, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 8, 8, 5, 3, 2, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), grad), tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3015685505666093, 2.3011990328191563, 2.301917349264024, 2.302747485219149, 2.3031709366124367, 2.3022128000172484], "accuracy": [0.08558975160121918, 0.09325055778026581, 0.09206181764602661, 0.08889182657003403, 0.09192973375320435, 0.09351472556591034], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [3, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [98, 65, 59, 9, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [79, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 12, 12, 8, 4, 5, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3015685505666093, 2.3011990328191563, 2.301917349264024, 2.302747485219149, 2.3031709366124367, 2.3022128000172484], "accuracy": [0.08558975160121918, 0.09325055778026581, 0.09206181764602661, 0.08889182657003403, 0.09192973375320435, 0.09351472556591034], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 2, 4, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 55, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.03771428391337395, "mapping_values": [1, 10, 10, 5, 5, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(grad, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, sigma))", "other_info": {"loss": [2.3018942516335974, 2.302835313667002, 2.3050934740612457, 2.3083005349838563, 2.311268248593944, 2.3132094936033267], "accuracy": [0.08492933213710785, 0.08757099509239197, 0.08625016361474991, 0.08070268481969833, 0.07911768555641174, 0.07779685407876968], "val_loss": [1.9714476040431432, 1.9727661269051688, 1.9742488179888045, 1.9762345041547502, 1.9787468910217285, 1.9810774666922433], "val_accuracy": [0.03533333167433739, 0.03233333304524422, 0.032999999821186066, 0.02866666577756405, 0.029999999329447746, 0.03333333507180214]}}]