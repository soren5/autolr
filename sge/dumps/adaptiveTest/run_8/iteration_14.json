[{"genotype": [[0], [1, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 1, 2], [44, 57], [0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6], [3], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.7871428728103638, "mapping_values": [1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.999871518917056, 1.422011641510694, 1.0700599535691535, 0.8996586019667526, 0.7918153265369346, 0.7475897405346261, 0.7201993446922604, 0.7200600240193086, 0.6573686411966186, 0.6435807282347421, 0.6521375769432651, 0.6065465810591472, 0.5786737325074666, 0.5785968114576792, 0.5969676985134145, 0.5946820643457991, 0.5339900372034964], "accuracy": [0.3529256284236908, 0.4963677227497101, 0.6046757102012634, 0.6560559868812561, 0.6947563290596008, 0.7166820764541626, 0.7223616242408752, 0.7279091477394104, 0.7421740889549255, 0.7506273984909058, 0.7508915662765503, 0.765949010848999, 0.7791573405265808, 0.7774402499198914, 0.7746664881706238, 0.774270236492157, 0.8000264167785645], "val_loss": [1.3220745154789515, 0.875462361744472, 0.6605866125651768, 0.6943449292864118, 0.664218647139413, 0.6086366687502179, 0.5582350492477417, 0.5659782545907157, 0.551361220223563, 0.5663524355207171, 0.4750376428876604, 0.4663638728005545, 0.5184692655290876, 0.5001573392323085, 0.4988690103803362, 0.4464742881911142, 0.4677747828619821], "val_accuracy": [0.4583333432674408, 0.6266666650772095, 0.687333345413208, 0.6650000214576721, 0.7136666774749756, 0.7200000286102295, 0.7513333559036255, 0.7390000224113464, 0.7429999709129333, 0.7300000190734863, 0.7956666946411133, 0.8069999814033508, 0.7599999904632568, 0.7663333415985107, 0.7776666879653931, 0.8016666769981384, 0.7846666574478149]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0], [3, 2, 4, 9], [2, 2, 2], [44, 57, 55], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 6, 6, 6, 5, 2, 8, 4, 5, 1, 4, 9, 8, 1, 2, 8, 9, 0], [3, 3, 3, 1, 0, 1, 0, 0, 0], [81, 64, 33, 54, 58], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.7871428728103638, "mapping_values": [1, 7, 7, 4, 3, 1, 19, 19, 12, 7, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(grad, tf.math.pow(grad, tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.999871518917056, 1.422011641510694, 1.0700599535691535, 0.8996586019667526, 0.7918153265369346, 0.7475897405346261, 0.7201993446922604, 0.7200600240193086, 0.6573686411966186, 0.6435807282347421, 0.6521375769432651, 0.6065465810591472, 0.5786737325074666, 0.5785968114576792, 0.5969676985134145, 0.5946820643457991, 0.5339900372034964], "accuracy": [0.3529256284236908, 0.4963677227497101, 0.6046757102012634, 0.6560559868812561, 0.6947563290596008, 0.7166820764541626, 0.7223616242408752, 0.7279091477394104, 0.7421740889549255, 0.7506273984909058, 0.7508915662765503, 0.765949010848999, 0.7791573405265808, 0.7774402499198914, 0.7746664881706238, 0.774270236492157, 0.8000264167785645], "val_loss": [1.3220745154789515, 0.875462361744472, 0.6605866125651768, 0.6943449292864118, 0.664218647139413, 0.6086366687502179, 0.5582350492477417, 0.5659782545907157, 0.551361220223563, 0.5663524355207171, 0.4750376428876604, 0.4663638728005545, 0.5184692655290876, 0.5001573392323085, 0.4988690103803362, 0.4464742881911142, 0.4677747828619821], "val_accuracy": [0.4583333432674408, 0.6266666650772095, 0.687333345413208, 0.6650000214576721, 0.7136666774749756, 0.7200000286102295, 0.7513333559036255, 0.7390000224113464, 0.7429999709129333, 0.7300000190734863, 0.7956666946411133, 0.8069999814033508, 0.7599999904632568, 0.7663333415985107, 0.7776666879653931, 0.8016666769981384, 0.7846666574478149]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [4, 6, 6, 6, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 0, 0, 0], [1, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.7871428728103638, "mapping_values": [1, 7, 7, 4, 3, 1, 27, 27, 17, 10, 6, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)))))), tf.math.pow(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.subtract(tf.math.subtract(alpha, tf.math.sqrt(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.999871518917056, 1.422011641510694, 1.0700599535691535, 0.8996586019667526, 0.7918153265369346, 0.7475897405346261, 0.7201993446922604, 0.7200600240193086, 0.6573686411966186, 0.6435807282347421, 0.6521375769432651, 0.6065465810591472, 0.5786737325074666, 0.5785968114576792, 0.5969676985134145, 0.5946820643457991, 0.5339900372034964], "accuracy": [0.3529256284236908, 0.4963677227497101, 0.6046757102012634, 0.6560559868812561, 0.6947563290596008, 0.7166820764541626, 0.7223616242408752, 0.7279091477394104, 0.7421740889549255, 0.7506273984909058, 0.7508915662765503, 0.765949010848999, 0.7791573405265808, 0.7774402499198914, 0.7746664881706238, 0.774270236492157, 0.8000264167785645], "val_loss": [1.3220745154789515, 0.875462361744472, 0.6605866125651768, 0.6943449292864118, 0.664218647139413, 0.6086366687502179, 0.5582350492477417, 0.5659782545907157, 0.551361220223563, 0.5663524355207171, 0.4750376428876604, 0.4663638728005545, 0.5184692655290876, 0.5001573392323085, 0.4988690103803362, 0.4464742881911142, 0.4677747828619821], "val_accuracy": [0.4583333432674408, 0.6266666650772095, 0.687333345413208, 0.6650000214576721, 0.7136666774749756, 0.7200000286102295, 0.7513333559036255, 0.7390000224113464, 0.7429999709129333, 0.7300000190734863, 0.7956666946411133, 0.8069999814033508, 0.7599999904632568, 0.7663333415985107, 0.7776666879653931, 0.8016666769981384, 0.7846666574478149]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1], [8, 6, 4, 9], [3, 2, 3, 1], [44, 57], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [9, 6, 6], [3, 1, 3, 1, 0, 1], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.2831428647041321, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.3117665173182034, 2.2566453206650947, 2.407718360353187, 2.4398797722603462, 2.411891808929917, 2.3040046572858444, 2.3031954572594726], "accuracy": [0.17170783877372742, 0.16470743715763092, 0.15281997621059418, 0.15902787446975708, 0.09998679161071777, 0.09932637959718704, 0.09734513610601425], "val_loss": [1.962484427860805, 1.78720794405256, 1.9724454198564803, 2.538434777941023, 1.9748683656964983, 1.9738309042794364, 1.9736407824925013], "val_accuracy": [0.13633333146572113, 0.3153333365917206, 0.12733332812786102, 0.10400000214576721, 0.10233332961797714, 0.10233332961797714, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1], [8, 6, 4, 9], [3, 2, 3, 1], [44, 57], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [4, 6, 6, 4, 3, 5, 7, 2, 9, 5, 0, 9], [3, 1, 3, 1, 0, 1], [1, 70, 33, 54], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 0, 1, 1], [3, 8, 6], [2, 0, 0], [45, 71]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(beta), tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [7, 6, 4, 3, 4, 4, 5, 6, 0, 7, 2, 3, 4, 5, 3, 9, 3, 1], [3, 2, 2, 3, 0, 0, 0, 2, 3, 0, 1, 2, 2, 3], [44, 57, 55, 80, 82], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [5, 2, 6, 6, 5, 2, 8, 4, 5, 1, 4, 4, 8, 1, 2, 8, 9, 0], [3, 5, 3, 3, 1, 4, 0, 3, 5, 4], [1, 70, 33, 54], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [5, 3], [], [0, 0, 1, 1], [9, 3], [3, 0], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 18, 14, 5, 27, 27, 17, 10, 2, 5, 4, 2, 2, 0, 1, 1, 0, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.square(grad))), tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), alpha)))))))), grad), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.square(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), alpha))))), tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(grad, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302449191802245, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1], [7, 4, 3, 9, 5, 3], [0, 1, 2, 0], [18, 57, 61], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1], [4, 6, 6, 2], [3, 5, 4, 4, 5], [58, 70, 33, 54], [0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 1], [3, 3, 0, 1], [5, 0], [37], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 3, 7, 2, 8, 8, 7, 1, 2, 1, 8, 7, 2, 9, 0, 5], [0, 3, 0, 0, 2, 3, 2, 1, 1, 2, 3, 2], [45, 52, 84, 28]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 5, 3, 2, 1, 25, 16, 9, 4], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), sigma))), beta), tf.math.negative(tf.math.square(alpha))))))), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0], [5, 6, 4, 9], [3, 2, 2, 3], [44, 57, 55], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 6, 6, 0, 2, 0, 4, 2, 7, 8, 6, 0, 6, 4, 7, 1, 3, 9, 7, 3, 5, 6, 5, 5, 9, 9, 3, 1, 2, 3, 9, 7, 1, 3, 2, 4, 9, 1, 7, 6, 7, 0, 8, 5, 0, 7, 4, 7, 7, 4, 0, 2], [1, 3, 3, 1, 0, 1, 1, 0, 0, 0, 3, 1, 4, 5, 5, 3, 4, 3, 0, 1, 4, 5, 2, 2, 5, 5, 3, 5, 5, 0, 3, 4, 3], [1, 70, 89, 36, 55, 12, 24, 22, 59, 68, 67], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 3, 2, 0, 7], [3, 0, 1, 2], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 40, 40, 26, 14, 7, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.sqrt(grad), alpha))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, alpha)))))), tf.math.square(tf.math.square(tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))))))))), grad))), grad)), tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9, 2, 7, 9], [3, 0, 2, 0], [44, 57], [0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1], [2, 0, 0, 2, 5, 7, 0, 0, 9, 4, 5, 9], [3, 1, 0], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 3, 3, 9, 0, 3, 1, 8], [3, 0, 3, 1, 1], [45, 49]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 13, 8, 5, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.negative(grad))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(sigma, tf.math.subtract(tf.math.sqrt(alpha), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [7, 6, 4, 9], [2, 0, 2], [44, 57], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [4, 6, 6, 7, 7, 3, 2, 2, 9, 1, 6, 8, 6], [4, 3, 0, 5, 5, 1, 1, 0, 0, 3, 2], [1, 70, 86, 48], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 1, 0, 1, 1], [3, 3, 8], [3, 0, 0], [45, 86]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 24, 24, 13, 11, 4, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad))), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), alpha)), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))))), grad)))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(sigma, tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07845727354288101, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [7, 6, 5, 9, 8], [2, 1, 2, 0, 0], [44, 57, 55, 80], [0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6], [3], [1, 70, 33, 54], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [1, 1, 1, 1], [1, 3, 6], [3, 0], [45, 71]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(alpha), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0796460211277008, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [7, 6, 4, 2, 7, 8, 1, 8, 8, 4, 4, 6, 6, 2, 2, 6, 2, 9, 9, 1, 4, 9, 5, 6, 9, 4, 0, 3, 0, 1, 4, 0, 1, 7, 7, 9, 7, 5, 1, 0, 4, 3, 2, 1, 0, 9, 3, 2, 8, 0, 2, 1, 1, 1, 8, 5], [2, 1, 2, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 2, 3, 0, 1, 3, 2, 3, 1, 1, 3, 3, 0, 2, 1, 1, 0, 2], [44, 57, 44, 27, 0, 44, 42, 35, 73, 42, 21, 86, 85, 6, 20, 75], [0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6, 4, 3, 5, 7, 2, 9, 5, 0, 9], [3], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 0, 0, 1, 1], [0, 3, 9, 4], [3, 0, 0], [45, 11]], "fitness": -0.10000000149011612, "mapping_values": [1, 87, 87, 56, 31, 16, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.sqrt(grad), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.pow(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.negative(grad))))), tf.math.add(alpha, grad)))))))))))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, grad))), tf.math.square(tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), grad)))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), alpha), tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), grad), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 1, 2], [44, 57], [0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6], [3], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 3, 2, 7, 3, 2, 8], [3, 0, 2, 1, 0, 3, 0], [45, 50, 79]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 14, 7, 7, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.multiply(tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), beta), tf.math.sqrt(alpha)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [7, 6, 4, 0, 0, 1, 2, 1], [0, 1, 2, 2, 1, 0, 3], [44, 57, 55], [0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1], [4, 5, 6, 6, 5, 2, 8, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 0, 0, 3], [1, 70, 33, 54, 58], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 3, 3, 2, 2, 9], [3, 0, 1, 3], [45, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 2, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 8, 4, 4, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(tf.math.subtract(grad, alpha), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 1, 2], [44, 57], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [4, 6, 6, 6, 5, 2, 8, 4, 3, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 0, 0], [94, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 8, 2], [3, 0, 3, 1], [45, 78]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), grad)), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), alpha))), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.3021689583643976, 2.3023437685923036, 2.3025005564729315, 2.3030247083035884, 2.3049639199687317, 2.3117477609465356], "accuracy": [0.10038304328918457, 0.10408136248588562, 0.10460969805717468, 0.10408136248588562, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973651341029576, 1.9737089702061243, 1.973992007119315, 1.9748473848615373, 1.9779151507786341, 1.9890382630484444], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0], [8, 6, 4, 9], [3, 2, 3, 1], [44, 57], [0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [9, 6, 6], [3], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [3], [], [0, 1, 1, 1], [6, 3], [3, 0], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301482233026827, 2.302140916359029, 2.303173531189791, 2.3027010189779933, 2.3018065456543555, 2.3010715136454327], "accuracy": [0.0886276587843895, 0.09060890227556229, 0.09140139818191528, 0.09034473448991776, 0.08889182657003403, 0.08915598690509796], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0], [7, 1, 4, 9], [3, 2, 2, 3], [44, 57, 55], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [4, 2, 6, 6, 5, 2, 8, 4, 1, 1, 4, 9, 8, 1, 0, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 0, 0], [58, 70, 33, 54, 58], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [4, 3], [], [0, 0, 1, 1], [0, 0], [3, 0], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 1, 26, 26, 17, 9, 5, 5, 4, 2, 2, 0, 3, 2, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(grad, tf.math.pow(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.pow(tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, alpha)))), alpha), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.sqrt(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(sigma))", "other_info": {"loss": [2.301482233026827, 2.302140916359029, 2.303173531189791, 2.3027010189779933, 2.3018065456543555, 2.3010715136454327], "accuracy": [0.0886276587843895, 0.09060890227556229, 0.09140139818191528, 0.09034473448991776, 0.08889182657003403, 0.08915598690509796], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0], [7, 4, 4, 3, 5, 3, 1, 5, 9], [0, 1, 0, 0, 2, 2], [44, 57, 90, 45], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1], [4, 6, 6], [3], [1, 70], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 1, 1], [0, 3], [3, 0, 2], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 15, 15, 9, 6, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(grad)))))))), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301482233026827, 2.302140916359029, 2.303173531189791, 2.3027010189779933, 2.3018065456543555, 2.3010715136454327], "accuracy": [0.0886276587843895, 0.09060890227556229, 0.09140139818191528, 0.09034473448991776, 0.08889182657003403, 0.08915598690509796], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1], [1, 6, 4, 9, 2], [0, 1, 2, 0], [44, 77, 55], [1, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6], [3, 3, 3, 1, 0, 1, 1, 0, 0], [1, 70, 33, 54, 58], [0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1], [3, 3, 3], [4, 5], [], [0, 0, 1, 1], [0, 5], [3, 0], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 9, 9, 5, 4, 3, 1, 1, 0, 1, 0, 7, 5, 3, 2, 0, 3, 2, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(grad, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(sigma))", "other_info": {"loss": [2.301482233026827, 2.302140916359029, 2.303173531189791, 2.3027010189779933, 2.3018065456543555, 2.3010715136454327], "accuracy": [0.0886276587843895, 0.09060890227556229, 0.09140139818191528, 0.09034473448991776, 0.08889182657003403, 0.08915598690509796], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0], [8, 6, 4, 9], [0, 1, 2], [44, 57], [0, 0, 1], [1, 0, 0, 1, 1], [9, 6, 6], [3, 1, 3, 1, 0, 1], [1, 70], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301482233026827, 2.302140916359029, 2.303173531189791, 2.3027010189779933, 2.3018065456543555, 2.3010715136454327], "accuracy": [0.0886276587843895, 0.09060890227556229, 0.09140139818191528, 0.09034473448991776, 0.08889182657003403, 0.08915598690509796], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]