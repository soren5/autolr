[{"genotype": [[0], [1, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 1, 2], [44, 57], [0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6], [3], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.8071428537368774, "mapping_values": [1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0267078725653334, 1.3880576025367397, 1.107876456503414, 0.9201775135585833, 0.791461619458824, 0.7551842982097309, 0.763874465983699, 0.6905206439281263, 0.6476597483163465, 0.6688593366772444, 0.625379106765725, 0.6132979457640708, 0.592966080263007, 0.5751671213924829, 0.5909541718885175, 0.540006884494399, 0.5575031724667049, 0.5184887285796863, 0.5150207423530848, 0.5324415652948111, 0.5049100259842733, 0.48059758654580437, 0.49626062608287946, 0.4805211480133695, 0.4894340901193114, 0.44846393173286675, 0.46157397174910786, 0.46362406401554856, 0.43601154847277973, 0.4412551365862622, 0.43720572808588404, 0.4158409622878824, 0.40386274795112764, 0.42526977537503696, 0.4148829483581241, 0.39778974980977955, 0.38473603980825594, 0.3896882285720337, 0.39432095972743125, 0.37523213528040583, 0.3662602910433683, 0.36424252581775873], "accuracy": [0.32703739404678345, 0.5237088799476624, 0.6050719618797302, 0.6568484902381897, 0.700700044631958, 0.7120591998100281, 0.711530864238739, 0.7277770638465881, 0.7572315335273743, 0.7425703406333923, 0.763967752456665, 0.7668735980987549, 0.7736098170280457, 0.7861577272415161, 0.7730814814567566, 0.7922335267066956, 0.791441023349762, 0.805177628993988, 0.8021397590637207, 0.8029322624206543, 0.8083476424217224, 0.8220842480659485, 0.81548011302948, 0.8204993009567261, 0.8162726163864136, 0.8319904804229736, 0.8272355198860168, 0.8296129703521729, 0.8413683772087097, 0.8363492488861084, 0.8389908671379089, 0.8470479249954224, 0.8473120927810669, 0.8396512866020203, 0.8433496356010437, 0.8515387773513794, 0.8549728989601135, 0.8543124794960022, 0.8506141901016235, 0.8619733452796936, 0.8619733452796936, 0.8648791313171387], "val_loss": [1.5143393107822962, 0.9072232927594867, 0.7547971691404071, 0.6322480269840786, 0.6426328420639038, 0.5562145369393485, 0.5292819397790092, 0.5230980770928519, 0.5380134923117501, 0.5101603269577026, 0.4905470439365932, 0.48346662521362305, 0.4665402684892927, 0.5180143458502633, 0.46393072605133057, 0.4695086308888027, 0.4365497997828892, 0.421012886932918, 0.4632366555077689, 0.407896135534559, 0.4045814275741577, 0.39473193883895874, 0.3905594859804426, 0.4055862937654768, 0.3848130447523935, 0.3829478110585894, 0.3727434618132455, 0.4014806406838553, 0.3893397791045053, 0.41829087904521395, 0.3773542898041861, 0.3554538147790091, 0.37722718715667725, 0.3584749868937901, 0.3583059736660549, 0.3512533051627023, 0.3392935224941799, 0.341577410697937, 0.34838421855654034, 0.3561753290040152, 0.37180245774132864, 0.38578941992350985], "val_accuracy": [0.518666684627533, 0.6033333539962769, 0.6363333463668823, 0.7023333311080933, 0.7016666531562805, 0.7303333282470703, 0.7706666588783264, 0.7633333206176758, 0.7583333253860474, 0.7776666879653931, 0.7753333449363708, 0.7860000133514404, 0.8066666722297668, 0.7646666765213013, 0.8053333163261414, 0.7883333563804626, 0.8169999718666077, 0.8220000267028809, 0.7906666398048401, 0.8199999928474426, 0.8253333568572998, 0.8293333053588867, 0.8336666822433472, 0.8286666870117188, 0.8366666436195374, 0.8403333425521851, 0.846666693687439, 0.8259999752044678, 0.8273333311080933, 0.7973333597183228, 0.8416666388511658, 0.8510000109672546, 0.8336666822433472, 0.8486666679382324, 0.8546666502952576, 0.8553333282470703, 0.862666666507721, 0.8543333411216736, 0.8510000109672546, 0.8516666889190674, 0.8360000252723694, 0.8299999833106995]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57, 55], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [4, 6, 6, 6, 5, 2, 8, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 0, 0], [1, 70, 33, 54, 58], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.8071428537368774, "mapping_values": [1, 7, 7, 4, 3, 1, 27, 27, 18, 9, 5, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.divide_no_nan(grad, tf.math.pow(grad, tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), alpha))))))), tf.math.pow(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.subtract(tf.math.subtract(alpha, tf.math.sqrt(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0267078725653334, 1.3880576025367397, 1.107876456503414, 0.9201775135585833, 0.791461619458824, 0.7551842982097309, 0.763874465983699, 0.6905206439281263, 0.6476597483163465, 0.6688593366772444, 0.625379106765725, 0.6132979457640708, 0.592966080263007, 0.5751671213924829, 0.5909541718885175, 0.540006884494399, 0.5575031724667049, 0.5184887285796863, 0.5150207423530848, 0.5324415652948111, 0.5049100259842733, 0.48059758654580437, 0.49626062608287946, 0.4805211480133695, 0.4894340901193114, 0.44846393173286675, 0.46157397174910786, 0.46362406401554856, 0.43601154847277973, 0.4412551365862622, 0.43720572808588404, 0.4158409622878824, 0.40386274795112764, 0.42526977537503696, 0.4148829483581241, 0.39778974980977955, 0.38473603980825594, 0.3896882285720337, 0.39432095972743125, 0.37523213528040583, 0.3662602910433683, 0.36424252581775873], "accuracy": [0.32703739404678345, 0.5237088799476624, 0.6050719618797302, 0.6568484902381897, 0.700700044631958, 0.7120591998100281, 0.711530864238739, 0.7277770638465881, 0.7572315335273743, 0.7425703406333923, 0.763967752456665, 0.7668735980987549, 0.7736098170280457, 0.7861577272415161, 0.7730814814567566, 0.7922335267066956, 0.791441023349762, 0.805177628993988, 0.8021397590637207, 0.8029322624206543, 0.8083476424217224, 0.8220842480659485, 0.81548011302948, 0.8204993009567261, 0.8162726163864136, 0.8319904804229736, 0.8272355198860168, 0.8296129703521729, 0.8413683772087097, 0.8363492488861084, 0.8389908671379089, 0.8470479249954224, 0.8473120927810669, 0.8396512866020203, 0.8433496356010437, 0.8515387773513794, 0.8549728989601135, 0.8543124794960022, 0.8506141901016235, 0.8619733452796936, 0.8619733452796936, 0.8648791313171387], "val_loss": [1.5143393107822962, 0.9072232927594867, 0.7547971691404071, 0.6322480269840786, 0.6426328420639038, 0.5562145369393485, 0.5292819397790092, 0.5230980770928519, 0.5380134923117501, 0.5101603269577026, 0.4905470439365932, 0.48346662521362305, 0.4665402684892927, 0.5180143458502633, 0.46393072605133057, 0.4695086308888027, 0.4365497997828892, 0.421012886932918, 0.4632366555077689, 0.407896135534559, 0.4045814275741577, 0.39473193883895874, 0.3905594859804426, 0.4055862937654768, 0.3848130447523935, 0.3829478110585894, 0.3727434618132455, 0.4014806406838553, 0.3893397791045053, 0.41829087904521395, 0.3773542898041861, 0.3554538147790091, 0.37722718715667725, 0.3584749868937901, 0.3583059736660549, 0.3512533051627023, 0.3392935224941799, 0.341577410697937, 0.34838421855654034, 0.3561753290040152, 0.37180245774132864, 0.38578941992350985], "val_accuracy": [0.518666684627533, 0.6033333539962769, 0.6363333463668823, 0.7023333311080933, 0.7016666531562805, 0.7303333282470703, 0.7706666588783264, 0.7633333206176758, 0.7583333253860474, 0.7776666879653931, 0.7753333449363708, 0.7860000133514404, 0.8066666722297668, 0.7646666765213013, 0.8053333163261414, 0.7883333563804626, 0.8169999718666077, 0.8220000267028809, 0.7906666398048401, 0.8199999928474426, 0.8253333568572998, 0.8293333053588867, 0.8336666822433472, 0.8286666870117188, 0.8366666436195374, 0.8403333425521851, 0.846666693687439, 0.8259999752044678, 0.8273333311080933, 0.7973333597183228, 0.8416666388511658, 0.8510000109672546, 0.8336666822433472, 0.8486666679382324, 0.8546666502952576, 0.8553333282470703, 0.862666666507721, 0.8543333411216736, 0.8510000109672546, 0.8516666889190674, 0.8360000252723694, 0.8299999833106995]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [7, 6, 4, 9, 2, 7, 9, 3], [2, 1, 2, 0, 0], [44, 57, 55, 80], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6, 4, 3, 5, 7, 2, 9, 5, 0, 9], [3], [1, 70, 33, 54], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 1, 0, 1, 1], [0, 3, 6], [3, 0, 0], [45, 71]], "fitness": -0.7637143135070801, "mapping_values": [1, 13, 13, 8, 5, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.math.add(grad, tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.00256521700868, 1.3652300130358903, 1.122736864369606, 0.8874043751354971, 0.8223561330194943, 0.7631458894073719, 0.7413080089348276, 0.7006141213677295, 0.7174410364725775, 0.653372311392134, 0.6366862936845592, 0.6308190819530943], "accuracy": [0.32439571619033813, 0.5132743120193481, 0.5827499628067017, 0.6736230254173279, 0.691850483417511, 0.7127195596694946, 0.7226257920265198, 0.7226257920265198, 0.726192057132721, 0.7493065595626831, 0.7574957013130188, 0.754589855670929], "val_loss": [1.1911465099879675, 1.1515799931117467, 0.710622753415789, 0.6533314159938267, 0.5642813955034528, 0.5705580200467791, 0.5289872544152396, 0.5809890713010516, 0.5071618897574288, 0.5118798358099801, 0.4900594098227365, 0.47583421639033724], "val_accuracy": [0.49966666102409363, 0.5106666684150696, 0.6980000138282776, 0.7153333425521851, 0.7483333349227905, 0.7390000224113464, 0.7733333110809326, 0.7273333072662354, 0.7723333239555359, 0.7696666717529297, 0.7710000276565552, 0.7683333158493042]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1], [8, 6, 4, 9], [3, 2, 3, 1], [44, 57], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [9, 6, 6], [3, 1, 3, 1, 0, 1], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.2662857174873352, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.4385137225753044, 2.263756209392243, 2.319881294255779, 2.2907956261849596, 2.184063324854595, 2.308307601350284, 2.3033439488600527, 2.3027950443879504, 2.287320716742275], "accuracy": [0.2300885021686554, 0.16814158856868744, 0.16695284843444824, 0.1298375427722931, 0.21701228618621826, 0.09721305221319199, 0.1026284471154213, 0.10540219396352768, 0.15255580842494965], "val_loss": [1.991260051727295, 2.2408815792628696, 1.9808614594595773, 1.6613085951123918, 1.984983171735491, 1.9745937756129675, 1.9737611498151506, 1.969958714076451, 1.9741627148219518], "val_accuracy": [0.09966666996479034, 0.1616666615009308, 0.10000000149011612, 0.29899999499320984, 0.10000000149011612, 0.09733333438634872, 0.09733333438634872, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 1, 2], [44, 57], [0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0], [4, 6, 6, 9], [3, 1, 0], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 2, 2, 9], [3, 0, 3, 1], [45, 78]], "fitness": -0.10942856967449188, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 10, 6, 4, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.add(tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma), alpha)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.284055536890137, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1402720957994461, 0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.1053625515529086, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [2, 6, 4, 9, 0, 8, 9], [2, 1, 2, 0], [44, 57, 55], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6, 4, 3, 5, 7, 2, 9, 5, 0, 9], [3], [1, 70, 33, 54], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [1, 0, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 0, 1, 1], [7, 6, 4, 9, 2, 7, 9], [2, 1, 2, 0], [44, 57], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1], [2, 0, 0, 2, 5, 7, 0, 0, 9, 4, 5, 9], [3, 2, 0, 0], [1, 91, 89], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 1, 1], [2, 3], [3, 0], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301554351419175, 2.302430650734741, 2.3029424900769904, 2.305989411591759, 2.318356692279256, 2.3662986527376044], "accuracy": [0.10738343745470047, 0.10777968913316727, 0.11147800832986832, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9737729345049178, 1.9741919381277901, 1.975623607635498, 1.9815028054373605, 2.003972734723772, 2.0889503615243092], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 0, 1, 1], [7, 6, 4, 9, 2, 7, 9], [3, 2, 2, 1], [44, 57, 55], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [4, 9, 6], [2, 3, 3, 1, 0, 1], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 3, 2, 2, 3, 3, 5, 9], [3, 0, 0, 2, 0], [45, 47, 73, 29]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 13, 8, 5, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), beta)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10500594228506088, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [3, 6, 4, 0, 4, 1, 3, 2, 2, 2, 0, 7, 5, 9, 7, 9, 4], [0, 1, 1, 0, 0, 0, 1, 2, 2, 0, 2], [44, 81, 27, 87, 52, 37, 34], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1], [4, 6, 6], [3, 2, 0, 0], [58, 70, 33, 54], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 3, 1, 3, 7, 3, 5, 9, 2, 7, 5, 1], [2, 3, 1, 2, 2, 0, 0, 0], [45, 31, 72, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 28, 17, 11, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 20, 12, 8, 4], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.negative(tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha)), tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.square(sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.subtract(beta, beta)), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [7, 4, 3, 3, 5, 3, 8, 8, 9], [0, 1, 0, 0, 2], [44, 57, 19, 29], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1], [4, 6, 6], [3], [58, 70, 33, 54], [0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 3, 6], [5], [], [0, 0, 1, 0, 0, 1, 0, 1], [0, 3, 8, 2, 8], [3, 0, 2], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 4, 1, 1, 0, 1, 0, 7, 4, 3, 1, 0, 8, 5, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.sqrt(tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [3, 6, 4, 4, 8, 2, 5, 4, 8, 4, 1], [0, 1, 0, 3, 1, 2, 1, 3], [44, 57, 18], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1], [4, 6, 6, 4, 3, 5, 7, 2, 9, 5, 0, 9], [3], [1, 70, 33, 54], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [1, 0, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0], [7, 4, 3, 9], [2, 1, 2], [44, 57], [1, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6], [3], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 1, 1], [0, 3], [1, 0], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.pow(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1], [7, 4, 3, 9, 5, 3], [0, 1, 2, 0], [18, 57, 61], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1], [4, 6, 6, 2], [3, 5, 4, 4, 5], [58, 70, 33, 54], [0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0], [3, 3, 0, 1], [5], [], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 0, 1, 4, 8, 8, 4, 2, 6, 7, 3, 6, 0, 0], [0, 3, 0, 0, 2, 3, 2, 1, 1, 2, 3, 2], [45, 39, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 9, 9, 4, 5, 0, 8, 5, 4, 1, 0, 29, 17, 12, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(grad, grad)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.subtract(sigma, sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.pow(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(tf.math.multiply(sigma, beta), tf.math.divide_no_nan(tf.math.negative(alpha), alpha))), beta), tf.math.negative(sigma))))), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [7, 4, 3, 9, 5, 3, 2, 6, 0, 4], [0, 1, 2, 0, 0, 0, 3], [18, 57, 61, 68, 64], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1], [4, 6, 6], [2], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 0, 1, 1, 1, 1], [7, 2, 2], [3, 0, 2, 1], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 3, 4, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(alpha, grad)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.add(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [7, 6, 4, 3, 2, 7, 9, 0, 4, 0, 8], [2, 0, 2, 0, 0, 0, 2], [44, 57, 91, 22, 34], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6, 4, 3, 5, 7, 2, 9, 5, 0, 9], [4], [1, 70], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [5, 7], [], [0, 0, 1, 0, 1, 1], [0, 1, 1], [3, 0, 3], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 5, 1, 1, 0, 1, 0, 5, 4, 2, 2, 0, 6, 3, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(sigma, tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.3020843367424813, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [7, 6, 4, 9, 2, 7, 9], [2, 1, 2, 0], [18, 57, 61], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6], [3], [58, 70, 33, 54], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 1, 1], [5, 3], [3, 0], [45]], "fitness": -0.055142857134342194, "mapping_values": [1, 11, 11, 7, 4, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3030225800453885, 2.3020459189469773, 2.3009237553134585, 2.3020475132118015, 2.301509183269718, 2.302454544804777, 2.3010175391872245, 2.301124448836708, 2.302577720452388, 2.3014647369261323, 2.3014834844488212, 2.3023864162313057, 2.3014483872563405, 2.2997505572871635, 2.302343887691374, 2.300849482493866, 2.300533363170722, 2.3021842706567184, 2.3014569604684962, 2.3018117948309653, 2.3010481148033155, 2.301951803472678, 2.3013825178177854, 2.301018020275672, 2.301334313681223, 2.3000290018456284, 2.3007321363080524, 2.3012599173538155, 2.3008442458191944, 2.3002089625572593, 2.2996285229059272, 2.3002397972815354, 2.300588476690933, 2.3005073094459303, 2.3002719902768662, 2.300288952226731, 2.3013027312024676, 2.300514574111366, 2.301143579132852, 2.300113634930279, 2.299842709831164], "accuracy": [0.09021265059709549, 0.0882314071059227, 0.09113723784685135, 0.09153348207473755, 0.09351472556591034, 0.09021265059709549, 0.09536388516426086, 0.09470347315073013, 0.08928807079792023, 0.09259014576673508, 0.09496764093637466, 0.08572183549404144, 0.09074098616838455, 0.09800554811954498, 0.08757099509239197, 0.08638224750757217, 0.09074098616838455, 0.08928807079792023, 0.08691058307886124, 0.09034473448991776, 0.09998679161071777, 0.09338264167308807, 0.09219389408826828, 0.09179764986038208, 0.0940430611371994, 0.09734513610601425, 0.09668471664190292, 0.08942015469074249, 0.09219389408826828, 0.09628847241401672, 0.09100515395402908, 0.09153348207473755, 0.09259014576673508, 0.09298639744520187, 0.09721305221319199, 0.09179764986038208, 0.09285431355237961, 0.0952318087220192, 0.09179764986038208, 0.09747721254825592, 0.09642054885625839], "val_loss": [1.9705048288617815, 1.9704386847359794, 1.9704008783612932, 1.9703351429530553, 1.9702850069318498, 1.9702140263148717, 1.970155852181571, 1.970104353768485, 1.9700273786272322, 1.969963482448033, 1.9699226106916154, 1.9698762212480818, 1.969820499420166, 1.969775949205671, 1.9697093963623047, 1.9696629387991769, 1.9696214539664132, 1.9695822170802526, 1.969550337110247, 1.9695187296186174, 1.969484601702009, 1.9694507462637765, 1.9694233621869768, 1.9693714550563268, 1.9693488393511092, 1.9693348067147392, 1.9693050384521484, 1.9692622593470983, 1.969231196812221, 1.9692075593130929, 1.969193594796317, 1.9691807201930456, 1.9691683905465263, 1.969158445085798, 1.9691500663757324, 1.9691337176731654, 1.969132968357631, 1.9691224779401506, 1.9691103526524134, 1.9691049712044852, 1.9690937995910645], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.04100000113248825, 0.0416666679084301, 0.04266666620969772, 0.043666668236255646, 0.04399999976158142, 0.04500000178813934, 0.045666664838790894, 0.04600000008940697, 0.04533333331346512, 0.04633333161473274, 0.04699999839067459, 0.047333333641290665, 0.04766666516661644, 0.04800000041723251, 0.04833333194255829, 0.04866666719317436, 0.04899999871850014, 0.049666665494441986, 0.05000000074505806, 0.05133333429694176, 0.05166666582226753, 0.052000001072883606, 0.05299999937415123, 0.0533333346247673, 0.05366666615009308, 0.05366666615009308, 0.05433333292603493, 0.05433333292603493, 0.054666668176651, 0.055666666477918625, 0.055666666477918625, 0.05700000002980232, 0.05700000002980232, 0.057999998331069946, 0.057999998331069946, 0.05766666680574417, 0.05700000002980232, 0.0573333315551281, 0.057999998331069946]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2], [44, 38], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 2, 5, 7, 0, 0, 9, 3, 5, 9], [2, 3, 0, 0], [96, 91, 89], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 1, 0], [0, 5], [3, 0], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 2, 10, 10, 7, 3, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(tf.math.add(beta, beta), tf.math.square(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(sigma))", "other_info": {"loss": [2.3030641113274197, 2.3021711661059543, 2.301105071839844, 2.302314365513179, 2.3018130871912965, 2.3028705999631103], "accuracy": [0.09047681838274002, 0.08836349099874496, 0.09008057415485382, 0.09008057415485382, 0.0940430611371994, 0.08915598690509796], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [7, 6, 4, 9, 2, 7, 9], [2, 3, 2, 0], [58, 57, 70], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [4, 6, 6, 4, 3, 5, 7, 2, 9, 5, 0, 9], [5, 0, 0, 0, 5, 2, 5, 4, 3, 0, 4, 3, 5], [1, 70, 33, 54, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 1, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 11, 11, 7, 4, 3, 18, 18, 12, 6, 5, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))))), grad)), tf.math.add(alpha, tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3030641113274197, 2.3021711661059543, 2.301105071839844, 2.302314365513179, 2.3018130871912965, 2.3028705999631103], "accuracy": [0.09047681838274002, 0.08836349099874496, 0.09008057415485382, 0.09008057415485382, 0.0940430611371994, 0.08915598690509796], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [3, 4, 1, 9, 5, 2], [0, 1, 2, 3], [44, 57], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1], [4, 6, 6], [3, 2, 0, 0], [58, 70, 33, 54], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 1, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3030641113274197, 2.3021711661059543, 2.301105071839844, 2.302314365513179, 2.3018130871912965, 2.3028705999631103], "accuracy": [0.09047681838274002, 0.08836349099874496, 0.09008057415485382, 0.09008057415485382, 0.0940430611371994, 0.08915598690509796], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 6, 7], [0, 1, 2, 0, 3], [44, 57], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [4, 1, 6, 8, 3, 3, 3, 3, 7, 0, 2, 2, 1, 3, 3, 7], [3, 3, 3, 1, 0, 1], [58, 70, 33, 54], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [3], [], [1, 1, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 9, 9, 4, 5, 2, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(alpha, grad)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.subtract(grad, grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3030641113274197, 2.3021711661059543, 2.301105071839844, 2.302314365513179, 2.3018130871912965, 2.3028705999631103], "accuracy": [0.09047681838274002, 0.08836349099874496, 0.09008057415485382, 0.09008057415485382, 0.0940430611371994, 0.08915598690509796], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]