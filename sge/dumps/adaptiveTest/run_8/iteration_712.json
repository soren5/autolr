[{"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 8, 4, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 0, 1, 0, 0], [62, 33, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8040000200271606, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.math.add(beta, grad)), grad), tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9880752952705678, 1.4589355038519565, 1.0534760741084683, 0.8924269194710666, 0.7698287404271605, 0.7739034259418502, 0.7153762223351791, 0.7029700022032862, 0.6692041217564372, 0.6469312739126624, 0.6344323473410631, 0.6246566893229033, 0.5906142054169705, 0.5894345720099924, 0.5748915283309313, 0.5804673230973973, 0.5408241164729958, 0.5491343437090148, 0.533072648491952, 0.5316661919553628, 0.5364027594798875, 0.5060689967180272, 0.501879813644817, 0.49638801610008476, 0.4833753174440248, 0.46162330508310845, 0.47661650455575877, 0.4508471987731169, 0.4462643227698765, 0.4656814252931869, 0.4342672630481244, 0.45147735677564055, 0.42813343606006515], "accuracy": [0.33139610290527344, 0.49531105160713196, 0.6184123754501343, 0.6647734642028809, 0.7096816897392273, 0.7046625018119812, 0.7293620109558105, 0.7359662055969238, 0.7454761862754822, 0.7523444890975952, 0.7588165402412415, 0.7703077793121338, 0.7769119143486023, 0.7707040309906006, 0.7819310426712036, 0.780610203742981, 0.7946110367774963, 0.7877426743507385, 0.8001585006713867, 0.8034605979919434, 0.8004226684570312, 0.8096684813499451, 0.8121780753135681, 0.8140271902084351, 0.819442629814148, 0.8286884427070618, 0.8177255392074585, 0.8301413059234619, 0.830669641494751, 0.8226125836372375, 0.8401796221733093, 0.8329150676727295, 0.8389908671379089], "val_loss": [1.5097322123391288, 0.8578922067369733, 0.7285821437835693, 0.6090826307024274, 0.6707294838769096, 0.5538480963025775, 0.6015263455254691, 0.5176764386040824, 0.5015829801559448, 0.4971535546439035, 0.5238034043993268, 0.48740393774850027, 0.4801859515053885, 0.4569582087653024, 0.45661247628075735, 0.43800595828465055, 0.46502903529575895, 0.4403290067400251, 0.4276888796261379, 0.45945024490356445, 0.40226203203201294, 0.4385036996432713, 0.43705232654299053, 0.4005776643753052, 0.39794970410210745, 0.44253094707216534, 0.40010231733322144, 0.3769956742014204, 0.4135688713618687, 0.3805427977016994, 0.3993701594216483, 0.38539879662649973, 0.4129446489470346], "val_accuracy": [0.3413333296775818, 0.6290000081062317, 0.6613333225250244, 0.7276666760444641, 0.6926666498184204, 0.7446666955947876, 0.7276666760444641, 0.765666663646698, 0.7839999794960022, 0.7770000100135803, 0.7633333206176758, 0.793666660785675, 0.7853333353996277, 0.7963333129882812, 0.7993333339691162, 0.8140000104904175, 0.7929999828338623, 0.8069999814033508, 0.8183333277702332, 0.8040000200271606, 0.8276666402816772, 0.8003333210945129, 0.8083333373069763, 0.8396666646003723, 0.8373333215713501, 0.7926666736602783, 0.8273333311080933, 0.8423333168029785, 0.8113333582878113, 0.8403333425521851, 0.8226666450500488, 0.8363333344459534, 0.8136666417121887]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 2, 0, 3, 2, 3, 0, 0], [55, 56, 2, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8040000200271606, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))), tf.math.add(beta, beta)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9880752952705678, 1.4589355038519565, 1.0534760741084683, 0.8924269194710666, 0.7698287404271605, 0.7739034259418502, 0.7153762223351791, 0.7029700022032862, 0.6692041217564372, 0.6469312739126624, 0.6344323473410631, 0.6246566893229033, 0.5906142054169705, 0.5894345720099924, 0.5748915283309313, 0.5804673230973973, 0.5408241164729958, 0.5491343437090148, 0.533072648491952, 0.5316661919553628, 0.5364027594798875, 0.5060689967180272, 0.501879813644817, 0.49638801610008476, 0.4833753174440248, 0.46162330508310845, 0.47661650455575877, 0.4508471987731169, 0.4462643227698765, 0.4656814252931869, 0.4342672630481244, 0.45147735677564055, 0.42813343606006515], "accuracy": [0.33139610290527344, 0.49531105160713196, 0.6184123754501343, 0.6647734642028809, 0.7096816897392273, 0.7046625018119812, 0.7293620109558105, 0.7359662055969238, 0.7454761862754822, 0.7523444890975952, 0.7588165402412415, 0.7703077793121338, 0.7769119143486023, 0.7707040309906006, 0.7819310426712036, 0.780610203742981, 0.7946110367774963, 0.7877426743507385, 0.8001585006713867, 0.8034605979919434, 0.8004226684570312, 0.8096684813499451, 0.8121780753135681, 0.8140271902084351, 0.819442629814148, 0.8286884427070618, 0.8177255392074585, 0.8301413059234619, 0.830669641494751, 0.8226125836372375, 0.8401796221733093, 0.8329150676727295, 0.8389908671379089], "val_loss": [1.5097322123391288, 0.8578922067369733, 0.7285821437835693, 0.6090826307024274, 0.6707294838769096, 0.5538480963025775, 0.6015263455254691, 0.5176764386040824, 0.5015829801559448, 0.4971535546439035, 0.5238034043993268, 0.48740393774850027, 0.4801859515053885, 0.4569582087653024, 0.45661247628075735, 0.43800595828465055, 0.46502903529575895, 0.4403290067400251, 0.4276888796261379, 0.45945024490356445, 0.40226203203201294, 0.4385036996432713, 0.43705232654299053, 0.4005776643753052, 0.39794970410210745, 0.44253094707216534, 0.40010231733322144, 0.3769956742014204, 0.4135688713618687, 0.3805427977016994, 0.3993701594216483, 0.38539879662649973, 0.4129446489470346], "val_accuracy": [0.3413333296775818, 0.6290000081062317, 0.6613333225250244, 0.7276666760444641, 0.6926666498184204, 0.7446666955947876, 0.7276666760444641, 0.765666663646698, 0.7839999794960022, 0.7770000100135803, 0.7633333206176758, 0.793666660785675, 0.7853333353996277, 0.7963333129882812, 0.7993333339691162, 0.8140000104904175, 0.7929999828338623, 0.8069999814033508, 0.8183333277702332, 0.8040000200271606, 0.8276666402816772, 0.8003333210945129, 0.8083333373069763, 0.8396666646003723, 0.8373333215713501, 0.7926666736602783, 0.8273333311080933, 0.8423333168029785, 0.8113333582878113, 0.8403333425521851, 0.8226666450500488, 0.8363333344459534, 0.8136666417121887]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 0, 2, 1, 8, 4, 9, 4, 1, 1, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 1, 3, 0, 0], [55, 56, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8040000200271606, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(grad, grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad)))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9880752952705678, 1.4589355038519565, 1.0534760741084683, 0.8924269194710666, 0.7698287404271605, 0.7739034259418502, 0.7153762223351791, 0.7029700022032862, 0.6692041217564372, 0.6469312739126624, 0.6344323473410631, 0.6246566893229033, 0.5906142054169705, 0.5894345720099924, 0.5748915283309313, 0.5804673230973973, 0.5408241164729958, 0.5491343437090148, 0.533072648491952, 0.5316661919553628, 0.5364027594798875, 0.5060689967180272, 0.501879813644817, 0.49638801610008476, 0.4833753174440248, 0.46162330508310845, 0.47661650455575877, 0.4508471987731169, 0.4462643227698765, 0.4656814252931869, 0.4342672630481244, 0.45147735677564055, 0.42813343606006515], "accuracy": [0.33139610290527344, 0.49531105160713196, 0.6184123754501343, 0.6647734642028809, 0.7096816897392273, 0.7046625018119812, 0.7293620109558105, 0.7359662055969238, 0.7454761862754822, 0.7523444890975952, 0.7588165402412415, 0.7703077793121338, 0.7769119143486023, 0.7707040309906006, 0.7819310426712036, 0.780610203742981, 0.7946110367774963, 0.7877426743507385, 0.8001585006713867, 0.8034605979919434, 0.8004226684570312, 0.8096684813499451, 0.8121780753135681, 0.8140271902084351, 0.819442629814148, 0.8286884427070618, 0.8177255392074585, 0.8301413059234619, 0.830669641494751, 0.8226125836372375, 0.8401796221733093, 0.8329150676727295, 0.8389908671379089], "val_loss": [1.5097322123391288, 0.8578922067369733, 0.7285821437835693, 0.6090826307024274, 0.6707294838769096, 0.5538480963025775, 0.6015263455254691, 0.5176764386040824, 0.5015829801559448, 0.4971535546439035, 0.5238034043993268, 0.48740393774850027, 0.4801859515053885, 0.4569582087653024, 0.45661247628075735, 0.43800595828465055, 0.46502903529575895, 0.4403290067400251, 0.4276888796261379, 0.45945024490356445, 0.40226203203201294, 0.4385036996432713, 0.43705232654299053, 0.4005776643753052, 0.39794970410210745, 0.44253094707216534, 0.40010231733322144, 0.3769956742014204, 0.4135688713618687, 0.3805427977016994, 0.3993701594216483, 0.38539879662649973, 0.4129446489470346], "val_accuracy": [0.3413333296775818, 0.6290000081062317, 0.6613333225250244, 0.7276666760444641, 0.6926666498184204, 0.7446666955947876, 0.7276666760444641, 0.765666663646698, 0.7839999794960022, 0.7770000100135803, 0.7633333206176758, 0.793666660785675, 0.7853333353996277, 0.7963333129882812, 0.7993333339691162, 0.8140000104904175, 0.7929999828338623, 0.8069999814033508, 0.8183333277702332, 0.8040000200271606, 0.8276666402816772, 0.8003333210945129, 0.8083333373069763, 0.8396666646003723, 0.8373333215713501, 0.7926666736602783, 0.8273333311080933, 0.8423333168029785, 0.8113333582878113, 0.8403333425521851, 0.8226666450500488, 0.8363333344459534, 0.8136666417121887]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 1, 2, 1, 0, 4, 9, 9, 1, 1, 1, 2, 8, 1, 1, 8, 9, 0], [0, 3, 1, 3, 3, 3, 1, 3, 0, 0], [55, 94, 59, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8040000200271606, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 14, 9, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), grad), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), alpha))))))), grad)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9880752952705678, 1.4589355038519565, 1.0534760741084683, 0.8924269194710666, 0.7698287404271605, 0.7739034259418502, 0.7153762223351791, 0.7029700022032862, 0.6692041217564372, 0.6469312739126624, 0.6344323473410631, 0.6246566893229033, 0.5906142054169705, 0.5894345720099924, 0.5748915283309313, 0.5804673230973973, 0.5408241164729958, 0.5491343437090148, 0.533072648491952, 0.5316661919553628, 0.5364027594798875, 0.5060689967180272, 0.501879813644817, 0.49638801610008476, 0.4833753174440248, 0.46162330508310845, 0.47661650455575877, 0.4508471987731169, 0.4462643227698765, 0.4656814252931869, 0.4342672630481244, 0.45147735677564055, 0.42813343606006515], "accuracy": [0.33139610290527344, 0.49531105160713196, 0.6184123754501343, 0.6647734642028809, 0.7096816897392273, 0.7046625018119812, 0.7293620109558105, 0.7359662055969238, 0.7454761862754822, 0.7523444890975952, 0.7588165402412415, 0.7703077793121338, 0.7769119143486023, 0.7707040309906006, 0.7819310426712036, 0.780610203742981, 0.7946110367774963, 0.7877426743507385, 0.8001585006713867, 0.8034605979919434, 0.8004226684570312, 0.8096684813499451, 0.8121780753135681, 0.8140271902084351, 0.819442629814148, 0.8286884427070618, 0.8177255392074585, 0.8301413059234619, 0.830669641494751, 0.8226125836372375, 0.8401796221733093, 0.8329150676727295, 0.8389908671379089], "val_loss": [1.5097322123391288, 0.8578922067369733, 0.7285821437835693, 0.6090826307024274, 0.6707294838769096, 0.5538480963025775, 0.6015263455254691, 0.5176764386040824, 0.5015829801559448, 0.4971535546439035, 0.5238034043993268, 0.48740393774850027, 0.4801859515053885, 0.4569582087653024, 0.45661247628075735, 0.43800595828465055, 0.46502903529575895, 0.4403290067400251, 0.4276888796261379, 0.45945024490356445, 0.40226203203201294, 0.4385036996432713, 0.43705232654299053, 0.4005776643753052, 0.39794970410210745, 0.44253094707216534, 0.40010231733322144, 0.3769956742014204, 0.4135688713618687, 0.3805427977016994, 0.3993701594216483, 0.38539879662649973, 0.4129446489470346], "val_accuracy": [0.3413333296775818, 0.6290000081062317, 0.6613333225250244, 0.7276666760444641, 0.6926666498184204, 0.7446666955947876, 0.7276666760444641, 0.765666663646698, 0.7839999794960022, 0.7770000100135803, 0.7633333206176758, 0.793666660785675, 0.7853333353996277, 0.7963333129882812, 0.7993333339691162, 0.8140000104904175, 0.7929999828338623, 0.8069999814033508, 0.8183333277702332, 0.8040000200271606, 0.8276666402816772, 0.8003333210945129, 0.8083333373069763, 0.8396666646003723, 0.8373333215713501, 0.7926666736602783, 0.8273333311080933, 0.8423333168029785, 0.8113333582878113, 0.8403333425521851, 0.8226666450500488, 0.8363333344459534, 0.8136666417121887]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 2, 8, 0, 4, 9, 6, 1, 1, 4, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.3562857210636139, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1836433468273113, 1.971218483165554, 1.7940933132184227, 1.1827342790178634, 0.98998983454128, 0.9635802298378809, 1.0006841708325502, 1.0926563470528314, 1.2047109648599097, 1.3166646924331882], "accuracy": [0.3234711289405823, 0.2969224750995636, 0.4559503495693207, 0.5904107689857483, 0.6420552134513855, 0.6705851554870605, 0.6535464525222778, 0.6468101739883423, 0.5931845307350159, 0.5651829242706299], "val_loss": [1.9669139725821358, 1.360110078539167, 0.9096747807094029, 0.6560164860316685, 0.6681715079716274, 0.6862956626074654, 0.6868488107408796, 0.8473799228668213, 0.819515756198338, 0.8193486928939819], "val_accuracy": [0.1120000034570694, 0.5426666736602783, 0.6693333387374878, 0.722000002861023, 0.749666690826416, 0.7066666483879089, 0.7036666870117188, 0.6833333373069763, 0.7253333330154419, 0.6793333292007446]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 6, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 0, 0, 0], [55, 56, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.3562857210636139, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 13, 8, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1836433468273113, 1.971218483165554, 1.7940933132184227, 1.1827342790178634, 0.98998983454128, 0.9635802298378809, 1.0006841708325502, 1.0926563470528314, 1.2047109648599097, 1.3166646924331882], "accuracy": [0.3234711289405823, 0.2969224750995636, 0.4559503495693207, 0.5904107689857483, 0.6420552134513855, 0.6705851554870605, 0.6535464525222778, 0.6468101739883423, 0.5931845307350159, 0.5651829242706299], "val_loss": [1.9669139725821358, 1.360110078539167, 0.9096747807094029, 0.6560164860316685, 0.6681715079716274, 0.6862956626074654, 0.6868488107408796, 0.8473799228668213, 0.819515756198338, 0.8193486928939819], "val_accuracy": [0.1120000034570694, 0.5426666736602783, 0.6693333387374878, 0.722000002861023, 0.749666690826416, 0.7066666483879089, 0.7036666870117188, 0.6833333373069763, 0.7253333330154419, 0.6793333292007446]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [4, 1, 2, 1, 6, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 3, 1, 0, 3, 0, 0], [43, 56, 4, 8, 74, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.23657143115997314, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 5, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.pow(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, alpha))))), tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))), grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2738490971623317, 2.51559937669459, 2.310753085279131, 2.3032868139621936, 2.271758019097524, 2.468626420259507, 2.315495977532736, 2.3051790675278023, 2.3039011813866512, 2.3031080419109355], "accuracy": [0.19138818979263306, 0.21754062175750732, 0.10342095047235489, 0.10368511080741882, 0.15942411124706268, 0.2829216718673706, 0.09998679161071777, 0.09945846349000931, 0.09549596905708313, 0.1002509593963623], "val_loss": [1.9679388999938965, 1.9874633380344935, 1.975071975163051, 1.971212318965367, 1.7999835695539201, 1.9951843534197127, 1.9771298680986678, 1.9744414602007185, 1.9737305641174316, 1.97374085017613], "val_accuracy": [0.10433333367109299, 0.09833333641290665, 0.10233332961797714, 0.09966666996479034, 0.28333333134651184, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.0976666659116745]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [7, 1, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [55, 33, 2, 9, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.23657143115997314, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2738490971623317, 2.51559937669459, 2.310753085279131, 2.3032868139621936, 2.271758019097524, 2.468626420259507, 2.315495977532736, 2.3051790675278023, 2.3039011813866512, 2.3031080419109355], "accuracy": [0.19138818979263306, 0.21754062175750732, 0.10342095047235489, 0.10368511080741882, 0.15942411124706268, 0.2829216718673706, 0.09998679161071777, 0.09945846349000931, 0.09549596905708313, 0.1002509593963623], "val_loss": [1.9679388999938965, 1.9874633380344935, 1.975071975163051, 1.971212318965367, 1.7999835695539201, 1.9951843534197127, 1.9771298680986678, 1.9744414602007185, 1.9737305641174316, 1.97374085017613], "val_accuracy": [0.10433333367109299, 0.09833333641290665, 0.10233332961797714, 0.09966666996479034, 0.28333333134651184, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.0976666659116745]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 8, 4, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 1, 3, 2, 1, 3, 0, 0], [55, 56, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.1022857129573822, "mapping_values": [1, 1, 1, 0, 1, 1, 17, 17, 10, 7, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, beta)))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3012981681523934, 2.302580383428257, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09840179979801178, 0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736412593296595, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.10133333504199982, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 8, 3, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [70, 87, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 8, 2, 3, 0, 4, 4, 6, 3, 0, 4, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 2, 0], [55, 56, 2, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 8, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, grad)), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.301932581474658, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 1, 2, 8, 0, 4, 9, 6, 1, 4, 4, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [30, 87, 64, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 13, 9, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), alpha))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07991018146276474, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 1, 2, 1, 0, 4, 9, 6, 1, 0, 4, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 3, 1, 0, 0], [55, 33, 93, 9, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [58, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 13, 9, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, alpha))), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [33.98053952130061, 1547412340646760.8, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.23325848579406738, 0.10500594228506088, 0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.1139115606035506, NaN, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09399999678134918, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 1, 2, 1, 0, 4, 9, 6, 1, 0, 4, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 1, 0, 3, 1, 1, 0, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 21, 21, 12, 9, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, grad)), tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.negative(alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha))))))), tf.math.add(beta, alpha)))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 1, 5, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [55, 33, 2, 9, 74, 78], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 8, 6, 7, 4], [2, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [7, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(beta, tf.math.sqrt(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 2, 8, 0, 4, 9, 6, 1, 1, 4, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [14, 33, 2, 9, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 1, 2, 1, 0, 4, 9, 6, 1, 0, 4, 2, 4, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 25, 25, 14, 11, 6, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.negative(grad)), grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(alpha, alpha)))))))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 3, 2, 1, 0, 4, 9, 6, 1, 0, 4, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 3, 1, 0, 3, 0, 0], [75, 56, 2, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [8, 4, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))), grad), grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.pow(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 5, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 0, 1, 0, 0], [22, 33, 93, 9, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.05400000140070915, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3018723712573985, 2.3027571234578987, 2.3016740454501323, 2.302242819942645, 2.303208248600464, 2.3004252934232285, 2.300991046760911, 2.302294396799884, 2.300507837046627, 2.301294847675334, 2.3011284300270427, 2.3015392928185827, 2.3027930515096835, 2.3006465716242963, 2.3007201920127542, 2.3013865984567894, 2.3027403388340177, 2.3020055698696584, 2.3017092804158636, 2.301035305354983, 2.30160566737324, 2.301591655219535, 2.3009148339364884, 2.3005481625056743, 2.3023698128697863, 2.3012401104099354, 2.301079786874048, 2.2998537245742745, 2.300464563554918, 2.3007949094541824, 2.300863300788798, 2.300597431763304, 2.3001193252017296, 2.300737378903037, 2.3000071030156866, 2.3010920065898843, 2.301699712087198, 2.3001638493911387, 2.3004170862313007, 2.3008111317427624, 2.300853866958316, 2.300893730884845, 2.3008772218074656, 2.3001351231801874, 2.300085091241331, 2.299792804171333, 2.3015642125514266, 2.3009953515530577, 2.2998765508150143, 2.3002000828429203], "accuracy": [0.09021265059709549, 0.09113723784685135, 0.09008057415485382, 0.09351472556591034, 0.08770307898521423, 0.09576013684272766, 0.09166556596755981, 0.0882314071059227, 0.09430722147226334, 0.09140139818191528, 0.0886276587843895, 0.09509972482919693, 0.09219389408826828, 0.09787346422672272, 0.09549596905708313, 0.09232597798109055, 0.08928807079792023, 0.0952318087220192, 0.09140139818191528, 0.09311848133802414, 0.09298639744520187, 0.09074098616838455, 0.09311848133802414, 0.09694888442754745, 0.0882314071059227, 0.08875974267721176, 0.09140139818191528, 0.09642054885625839, 0.09681680053472519, 0.09325055778026581, 0.09113723784685135, 0.09655263274908066, 0.09866596013307571, 0.09430722147226334, 0.09774138033390045, 0.09417514503002167, 0.09100515395402908, 0.09298639744520187, 0.10157178342342377, 0.09192973375320435, 0.09338264167308807, 0.09734513610601425, 0.09153348207473755, 0.10157178342342377, 0.09655263274908066, 0.08625016361474991, 0.08955223858356476, 0.09021265059709549, 0.0936468094587326, 0.0940430611371994], "val_loss": [1.9705414090837752, 1.970477512904576, 1.9704245839800154, 1.9703715188162667, 1.9703234945024763, 1.9702775818961007, 1.9702316692897253, 1.9701809201921736, 1.9701298304966517, 1.9700796944754464, 1.970036574772426, 1.9699948174612862, 1.9699558530535017, 1.969907283782959, 1.969869681767055, 1.9698309898376465, 1.9697846685137068, 1.9697510855538505, 1.9697110993521554, 1.9696833746773856, 1.9696525165012904, 1.9696174349103654, 1.9695873941693987, 1.9695544242858887, 1.969524928501674, 1.9694937297276087, 1.9694669587271554, 1.9694384166172572, 1.9694140979221888, 1.9693987710135323, 1.969381536756243, 1.969362667628697, 1.969350814819336, 1.9693333080836706, 1.9693142345973425, 1.9692885535103934, 1.96926668712071, 1.9692436626979284, 1.9692282676696777, 1.9692119189671107, 1.9691968645368303, 1.9691851479666573, 1.9691717284066337, 1.9691580363682337, 1.9691412108285087, 1.96913024357387, 1.9691143717084612, 1.9691094670976912, 1.9690995897565569, 1.9691038131713867], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03966666758060455, 0.04066666588187218, 0.0416666679084301, 0.04233333468437195, 0.0430000014603138, 0.04333333298563957, 0.044333335012197495, 0.044333335012197495, 0.04533333331346512, 0.04533333331346512, 0.045666664838790894, 0.045666664838790894, 0.04533333331346512, 0.04600000008940697, 0.046666666865348816, 0.04699999839067459, 0.04699999839067459, 0.04766666516661644, 0.04800000041723251, 0.04766666516661644, 0.04833333194255829, 0.04866666719317436, 0.04933333396911621, 0.04933333396911621, 0.049666665494441986, 0.050333332270383835, 0.05066666752099991, 0.05133333429694176, 0.05233333259820938, 0.05299999937415123, 0.0533333346247673, 0.05400000140070915, 0.05400000140070915, 0.054666668176651, 0.054999999701976776, 0.05433333292603493, 0.05366666615009308, 0.05433333292603493, 0.05533333495259285, 0.0560000017285347, 0.0560000017285347, 0.05666666850447655, 0.0573333315551281, 0.0573333315551281, 0.05700000002980232, 0.05700000002980232, 0.05700000002980232, 0.05666666850447655]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 8, 4, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 2, 0, 0, 3, 1, 3, 0, 0], [62, 33, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [3, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 3, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.sqrt(beta), beta), tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301897111050504, 2.3028567496103114, 2.3018335674763546, 2.3024739469629725, 2.3035099387027174, 2.300753359183061], "accuracy": [0.09021265059709549, 0.09087307006120682, 0.08994849026203156, 0.09192973375320435, 0.0870426595211029, 0.0948355570435524], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]