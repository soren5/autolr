[{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8031428456306458, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.142383459804395, 1.9288347429839328, 1.4667228458737338, 0.9965388338406167, 0.8864179699176243, 0.7994460854799897, 0.7151531567584254, 0.7164926724647408, 0.6495536001225221, 0.6178740657410365, 0.6018886717397776, 0.6162219528099486, 0.5691908028903276, 0.5581652451547192, 0.5459527517857726, 0.5346224427050005, 0.5430815632962721, 0.4918462238874197, 0.4997946067949753, 0.4837231408997046, 0.48455949544339777, 0.471806186695046, 0.4604542660140059, 0.46749256553430724, 0.45337850262444523, 0.42691751541069173, 0.4380464906611258, 0.43843361367686173, 0.4053419767479776, 0.4096650652102255, 0.4096717941542154, 0.40302073102522645, 0.40088061928323954, 0.379097056320362, 0.39078813298834064, 0.3909242589987658, 0.36759893745557903], "accuracy": [0.28939375281333923, 0.33205652236938477, 0.47946110367774963, 0.6312243938446045, 0.6693964004516602, 0.7036058902740479, 0.7244749665260315, 0.7264562249183655, 0.7503632307052612, 0.7658169269561768, 0.7759873270988464, 0.7685906887054443, 0.7833839654922485, 0.7866860628128052, 0.7959318161010742, 0.7957997918128967, 0.7956677079200745, 0.8150838613510132, 0.8121780753135681, 0.8198388814926147, 0.8157442808151245, 0.8253863453865051, 0.829216718673706, 0.824329674243927, 0.8285563588142395, 0.8409721255302429, 0.8358209133148193, 0.8342359066009521, 0.8496896028518677, 0.8469158411026001, 0.8448025584220886, 0.8487650156021118, 0.8455950617790222, 0.8607845902442932, 0.8552370667457581, 0.8540483713150024, 0.8609166741371155], "val_loss": [1.619126558303833, 1.4331230095454626, 0.9138719013759068, 0.6674251556396484, 0.6435052497046334, 0.5451386315482003, 0.5457347461155483, 0.508262004171099, 0.4945073127746582, 0.4699664456503732, 0.5229880469185966, 0.4718198095049177, 0.4572468910898481, 0.4477801152638027, 0.4383273039545332, 0.42882405860083445, 0.4409517390387399, 0.3998960256576538, 0.40310754094805035, 0.40173483746392386, 0.3948810611452375, 0.3911281483513968, 0.3775420444352286, 0.3794395923614502, 0.3754053030695234, 0.3803948334285191, 0.38053098746708464, 0.3734417472566877, 0.3619180662291391, 0.36653631925582886, 0.3582128371511187, 0.3520106588091169, 0.3524106570652553, 0.3653766001973833, 0.3827510561261858, 0.3496999059404646, 0.3592661959784372], "val_accuracy": [0.3686666786670685, 0.4206666648387909, 0.6259999871253967, 0.6816666722297668, 0.6986666917800903, 0.737333357334137, 0.7563333511352539, 0.7553333044052124, 0.7940000295639038, 0.7886666655540466, 0.7620000243186951, 0.7806666493415833, 0.7950000166893005, 0.800000011920929, 0.8026666641235352, 0.8176666498184204, 0.8069999814033508, 0.8246666789054871, 0.8306666612625122, 0.831333339214325, 0.8416666388511658, 0.8349999785423279, 0.8389999866485596, 0.8386666774749756, 0.8429999947547913, 0.8396666646003723, 0.8316666483879089, 0.8426666855812073, 0.8456666469573975, 0.8353333473205566, 0.846666693687439, 0.862666666507721, 0.8569999933242798, 0.8493333458900452, 0.8386666774749756, 0.8556666374206543, 0.8506666421890259]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 8, 2, 4, 5, 5, 2, 9, 2, 1, 5, 2, 6, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [9, 1, 3, 8, 0, 4, 9, 8, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 3, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8031428456306458, "mapping_values": [1, 6, 6, 3, 3, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.142383459804395, 1.9288347429839328, 1.4667228458737338, 0.9965388338406167, 0.8864179699176243, 0.7994460854799897, 0.7151531567584254, 0.7164926724647408, 0.6495536001225221, 0.6178740657410365, 0.6018886717397776, 0.6162219528099486, 0.5691908028903276, 0.5581652451547192, 0.5459527517857726, 0.5346224427050005, 0.5430815632962721, 0.4918462238874197, 0.4997946067949753, 0.4837231408997046, 0.48455949544339777, 0.471806186695046, 0.4604542660140059, 0.46749256553430724, 0.45337850262444523, 0.42691751541069173, 0.4380464906611258, 0.43843361367686173, 0.4053419767479776, 0.4096650652102255, 0.4096717941542154, 0.40302073102522645, 0.40088061928323954, 0.379097056320362, 0.39078813298834064, 0.3909242589987658, 0.36759893745557903], "accuracy": [0.28939375281333923, 0.33205652236938477, 0.47946110367774963, 0.6312243938446045, 0.6693964004516602, 0.7036058902740479, 0.7244749665260315, 0.7264562249183655, 0.7503632307052612, 0.7658169269561768, 0.7759873270988464, 0.7685906887054443, 0.7833839654922485, 0.7866860628128052, 0.7959318161010742, 0.7957997918128967, 0.7956677079200745, 0.8150838613510132, 0.8121780753135681, 0.8198388814926147, 0.8157442808151245, 0.8253863453865051, 0.829216718673706, 0.824329674243927, 0.8285563588142395, 0.8409721255302429, 0.8358209133148193, 0.8342359066009521, 0.8496896028518677, 0.8469158411026001, 0.8448025584220886, 0.8487650156021118, 0.8455950617790222, 0.8607845902442932, 0.8552370667457581, 0.8540483713150024, 0.8609166741371155], "val_loss": [1.619126558303833, 1.4331230095454626, 0.9138719013759068, 0.6674251556396484, 0.6435052497046334, 0.5451386315482003, 0.5457347461155483, 0.508262004171099, 0.4945073127746582, 0.4699664456503732, 0.5229880469185966, 0.4718198095049177, 0.4572468910898481, 0.4477801152638027, 0.4383273039545332, 0.42882405860083445, 0.4409517390387399, 0.3998960256576538, 0.40310754094805035, 0.40173483746392386, 0.3948810611452375, 0.3911281483513968, 0.3775420444352286, 0.3794395923614502, 0.3754053030695234, 0.3803948334285191, 0.38053098746708464, 0.3734417472566877, 0.3619180662291391, 0.36653631925582886, 0.3582128371511187, 0.3520106588091169, 0.3524106570652553, 0.3653766001973833, 0.3827510561261858, 0.3496999059404646, 0.3592661959784372], "val_accuracy": [0.3686666786670685, 0.4206666648387909, 0.6259999871253967, 0.6816666722297668, 0.6986666917800903, 0.737333357334137, 0.7563333511352539, 0.7553333044052124, 0.7940000295639038, 0.7886666655540466, 0.7620000243186951, 0.7806666493415833, 0.7950000166893005, 0.800000011920929, 0.8026666641235352, 0.8176666498184204, 0.8069999814033508, 0.8246666789054871, 0.8306666612625122, 0.831333339214325, 0.8416666388511658, 0.8349999785423279, 0.8389999866485596, 0.8386666774749756, 0.8429999947547913, 0.8396666646003723, 0.8316666483879089, 0.8426666855812073, 0.8456666469573975, 0.8353333473205566, 0.846666693687439, 0.862666666507721, 0.8569999933242798, 0.8493333458900452, 0.8386666774749756, 0.8556666374206543, 0.8506666421890259]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 3, 4, 3, 1, 1, 4, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 92, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8031428456306458, "mapping_values": [1, 37, 37, 24, 13, 8, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.square(grad), grad))), grad), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, alpha), grad)))))), grad), tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.negative(alpha), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.142383459804395, 1.9288347429839328, 1.4667228458737338, 0.9965388338406167, 0.8864179699176243, 0.7994460854799897, 0.7151531567584254, 0.7164926724647408, 0.6495536001225221, 0.6178740657410365, 0.6018886717397776, 0.6162219528099486, 0.5691908028903276, 0.5581652451547192, 0.5459527517857726, 0.5346224427050005, 0.5430815632962721, 0.4918462238874197, 0.4997946067949753, 0.4837231408997046, 0.48455949544339777, 0.471806186695046, 0.4604542660140059, 0.46749256553430724, 0.45337850262444523, 0.42691751541069173, 0.4380464906611258, 0.43843361367686173, 0.4053419767479776, 0.4096650652102255, 0.4096717941542154, 0.40302073102522645, 0.40088061928323954, 0.379097056320362, 0.39078813298834064, 0.3909242589987658, 0.36759893745557903], "accuracy": [0.28939375281333923, 0.33205652236938477, 0.47946110367774963, 0.6312243938446045, 0.6693964004516602, 0.7036058902740479, 0.7244749665260315, 0.7264562249183655, 0.7503632307052612, 0.7658169269561768, 0.7759873270988464, 0.7685906887054443, 0.7833839654922485, 0.7866860628128052, 0.7959318161010742, 0.7957997918128967, 0.7956677079200745, 0.8150838613510132, 0.8121780753135681, 0.8198388814926147, 0.8157442808151245, 0.8253863453865051, 0.829216718673706, 0.824329674243927, 0.8285563588142395, 0.8409721255302429, 0.8358209133148193, 0.8342359066009521, 0.8496896028518677, 0.8469158411026001, 0.8448025584220886, 0.8487650156021118, 0.8455950617790222, 0.8607845902442932, 0.8552370667457581, 0.8540483713150024, 0.8609166741371155], "val_loss": [1.619126558303833, 1.4331230095454626, 0.9138719013759068, 0.6674251556396484, 0.6435052497046334, 0.5451386315482003, 0.5457347461155483, 0.508262004171099, 0.4945073127746582, 0.4699664456503732, 0.5229880469185966, 0.4718198095049177, 0.4572468910898481, 0.4477801152638027, 0.4383273039545332, 0.42882405860083445, 0.4409517390387399, 0.3998960256576538, 0.40310754094805035, 0.40173483746392386, 0.3948810611452375, 0.3911281483513968, 0.3775420444352286, 0.3794395923614502, 0.3754053030695234, 0.3803948334285191, 0.38053098746708464, 0.3734417472566877, 0.3619180662291391, 0.36653631925582886, 0.3582128371511187, 0.3520106588091169, 0.3524106570652553, 0.3653766001973833, 0.3827510561261858, 0.3496999059404646, 0.3592661959784372], "val_accuracy": [0.3686666786670685, 0.4206666648387909, 0.6259999871253967, 0.6816666722297668, 0.6986666917800903, 0.737333357334137, 0.7563333511352539, 0.7553333044052124, 0.7940000295639038, 0.7886666655540466, 0.7620000243186951, 0.7806666493415833, 0.7950000166893005, 0.800000011920929, 0.8026666641235352, 0.8176666498184204, 0.8069999814033508, 0.8246666789054871, 0.8306666612625122, 0.831333339214325, 0.8416666388511658, 0.8349999785423279, 0.8389999866485596, 0.8386666774749756, 0.8429999947547913, 0.8396666646003723, 0.8316666483879089, 0.8426666855812073, 0.8456666469573975, 0.8353333473205566, 0.846666693687439, 0.862666666507721, 0.8569999933242798, 0.8493333458900452, 0.8386666774749756, 0.8556666374206543, 0.8506666421890259]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 8, 2, 4, 5, 3, 2, 1, 2, 1, 2, 2, 5, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2, 7, 6, 1, 0, 8, 3, 7, 3, 3, 6, 0, 6, 3, 4, 3, 0, 2, 2, 7, 9, 3, 8, 8, 6], [0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [71, 10, 35, 27, 57, 79, 53, 52, 41, 53, 88, 82, 47, 88, 20, 94], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 0, 4, 9, 2, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 3, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8031428456306458, "mapping_values": [1, 80, 80, 49, 31, 16, 17, 17, 10, 7, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 70, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))))))), tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.negative(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, alpha), grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), alpha)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), alpha)))))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), grad))))), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.subtract(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.negative(tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), grad), tf.math.add(beta, alpha)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.142383459804395, 1.9288347429839328, 1.4667228458737338, 0.9965388338406167, 0.8864179699176243, 0.7994460854799897, 0.7151531567584254, 0.7164926724647408, 0.6495536001225221, 0.6178740657410365, 0.6018886717397776, 0.6162219528099486, 0.5691908028903276, 0.5581652451547192, 0.5459527517857726, 0.5346224427050005, 0.5430815632962721, 0.4918462238874197, 0.4997946067949753, 0.4837231408997046, 0.48455949544339777, 0.471806186695046, 0.4604542660140059, 0.46749256553430724, 0.45337850262444523, 0.42691751541069173, 0.4380464906611258, 0.43843361367686173, 0.4053419767479776, 0.4096650652102255, 0.4096717941542154, 0.40302073102522645, 0.40088061928323954, 0.379097056320362, 0.39078813298834064, 0.3909242589987658, 0.36759893745557903], "accuracy": [0.28939375281333923, 0.33205652236938477, 0.47946110367774963, 0.6312243938446045, 0.6693964004516602, 0.7036058902740479, 0.7244749665260315, 0.7264562249183655, 0.7503632307052612, 0.7658169269561768, 0.7759873270988464, 0.7685906887054443, 0.7833839654922485, 0.7866860628128052, 0.7959318161010742, 0.7957997918128967, 0.7956677079200745, 0.8150838613510132, 0.8121780753135681, 0.8198388814926147, 0.8157442808151245, 0.8253863453865051, 0.829216718673706, 0.824329674243927, 0.8285563588142395, 0.8409721255302429, 0.8358209133148193, 0.8342359066009521, 0.8496896028518677, 0.8469158411026001, 0.8448025584220886, 0.8487650156021118, 0.8455950617790222, 0.8607845902442932, 0.8552370667457581, 0.8540483713150024, 0.8609166741371155], "val_loss": [1.619126558303833, 1.4331230095454626, 0.9138719013759068, 0.6674251556396484, 0.6435052497046334, 0.5451386315482003, 0.5457347461155483, 0.508262004171099, 0.4945073127746582, 0.4699664456503732, 0.5229880469185966, 0.4718198095049177, 0.4572468910898481, 0.4477801152638027, 0.4383273039545332, 0.42882405860083445, 0.4409517390387399, 0.3998960256576538, 0.40310754094805035, 0.40173483746392386, 0.3948810611452375, 0.3911281483513968, 0.3775420444352286, 0.3794395923614502, 0.3754053030695234, 0.3803948334285191, 0.38053098746708464, 0.3734417472566877, 0.3619180662291391, 0.36653631925582886, 0.3582128371511187, 0.3520106588091169, 0.3524106570652553, 0.3653766001973833, 0.3827510561261858, 0.3496999059404646, 0.3592661959784372], "val_accuracy": [0.3686666786670685, 0.4206666648387909, 0.6259999871253967, 0.6816666722297668, 0.6986666917800903, 0.737333357334137, 0.7563333511352539, 0.7553333044052124, 0.7940000295639038, 0.7886666655540466, 0.7620000243186951, 0.7806666493415833, 0.7950000166893005, 0.800000011920929, 0.8026666641235352, 0.8176666498184204, 0.8069999814033508, 0.8246666789054871, 0.8306666612625122, 0.831333339214325, 0.8416666388511658, 0.8349999785423279, 0.8389999866485596, 0.8386666774749756, 0.8429999947547913, 0.8396666646003723, 0.8316666483879089, 0.8426666855812073, 0.8456666469573975, 0.8353333473205566, 0.846666693687439, 0.862666666507721, 0.8569999933242798, 0.8493333458900452, 0.8386666774749756, 0.8556666374206543, 0.8506666421890259]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [2, 8, 2, 4, 5, 2, 2, 8, 2, 3, 5, 2, 8, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 3, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 1, 4, 9, 6, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 3, 1, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8031428456306458, "mapping_values": [1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.142383459804395, 1.9288347429839328, 1.4667228458737338, 0.9965388338406167, 0.8864179699176243, 0.7994460854799897, 0.7151531567584254, 0.7164926724647408, 0.6495536001225221, 0.6178740657410365, 0.6018886717397776, 0.6162219528099486, 0.5691908028903276, 0.5581652451547192, 0.5459527517857726, 0.5346224427050005, 0.5430815632962721, 0.4918462238874197, 0.4997946067949753, 0.4837231408997046, 0.48455949544339777, 0.471806186695046, 0.4604542660140059, 0.46749256553430724, 0.45337850262444523, 0.42691751541069173, 0.4380464906611258, 0.43843361367686173, 0.4053419767479776, 0.4096650652102255, 0.4096717941542154, 0.40302073102522645, 0.40088061928323954, 0.379097056320362, 0.39078813298834064, 0.3909242589987658, 0.36759893745557903], "accuracy": [0.28939375281333923, 0.33205652236938477, 0.47946110367774963, 0.6312243938446045, 0.6693964004516602, 0.7036058902740479, 0.7244749665260315, 0.7264562249183655, 0.7503632307052612, 0.7658169269561768, 0.7759873270988464, 0.7685906887054443, 0.7833839654922485, 0.7866860628128052, 0.7959318161010742, 0.7957997918128967, 0.7956677079200745, 0.8150838613510132, 0.8121780753135681, 0.8198388814926147, 0.8157442808151245, 0.8253863453865051, 0.829216718673706, 0.824329674243927, 0.8285563588142395, 0.8409721255302429, 0.8358209133148193, 0.8342359066009521, 0.8496896028518677, 0.8469158411026001, 0.8448025584220886, 0.8487650156021118, 0.8455950617790222, 0.8607845902442932, 0.8552370667457581, 0.8540483713150024, 0.8609166741371155], "val_loss": [1.619126558303833, 1.4331230095454626, 0.9138719013759068, 0.6674251556396484, 0.6435052497046334, 0.5451386315482003, 0.5457347461155483, 0.508262004171099, 0.4945073127746582, 0.4699664456503732, 0.5229880469185966, 0.4718198095049177, 0.4572468910898481, 0.4477801152638027, 0.4383273039545332, 0.42882405860083445, 0.4409517390387399, 0.3998960256576538, 0.40310754094805035, 0.40173483746392386, 0.3948810611452375, 0.3911281483513968, 0.3775420444352286, 0.3794395923614502, 0.3754053030695234, 0.3803948334285191, 0.38053098746708464, 0.3734417472566877, 0.3619180662291391, 0.36653631925582886, 0.3582128371511187, 0.3520106588091169, 0.3524106570652553, 0.3653766001973833, 0.3827510561261858, 0.3496999059404646, 0.3592661959784372], "val_accuracy": [0.3686666786670685, 0.4206666648387909, 0.6259999871253967, 0.6816666722297668, 0.6986666917800903, 0.737333357334137, 0.7563333511352539, 0.7553333044052124, 0.7940000295639038, 0.7886666655540466, 0.7620000243186951, 0.7806666493415833, 0.7950000166893005, 0.800000011920929, 0.8026666641235352, 0.8176666498184204, 0.8069999814033508, 0.8246666789054871, 0.8306666612625122, 0.831333339214325, 0.8416666388511658, 0.8349999785423279, 0.8389999866485596, 0.8386666774749756, 0.8429999947547913, 0.8396666646003723, 0.8316666483879089, 0.8426666855812073, 0.8456666469573975, 0.8353333473205566, 0.846666693687439, 0.862666666507721, 0.8569999933242798, 0.8493333458900452, 0.8386666774749756, 0.8556666374206543, 0.8506666421890259]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 3, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [26, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 3, 8, 9, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8031428456306458, "mapping_values": [1, 22, 22, 13, 9, 2, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)), grad)))), alpha))), tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.142383459804395, 1.9288347429839328, 1.4667228458737338, 0.9965388338406167, 0.8864179699176243, 0.7994460854799897, 0.7151531567584254, 0.7164926724647408, 0.6495536001225221, 0.6178740657410365, 0.6018886717397776, 0.6162219528099486, 0.5691908028903276, 0.5581652451547192, 0.5459527517857726, 0.5346224427050005, 0.5430815632962721, 0.4918462238874197, 0.4997946067949753, 0.4837231408997046, 0.48455949544339777, 0.471806186695046, 0.4604542660140059, 0.46749256553430724, 0.45337850262444523, 0.42691751541069173, 0.4380464906611258, 0.43843361367686173, 0.4053419767479776, 0.4096650652102255, 0.4096717941542154, 0.40302073102522645, 0.40088061928323954, 0.379097056320362, 0.39078813298834064, 0.3909242589987658, 0.36759893745557903], "accuracy": [0.28939375281333923, 0.33205652236938477, 0.47946110367774963, 0.6312243938446045, 0.6693964004516602, 0.7036058902740479, 0.7244749665260315, 0.7264562249183655, 0.7503632307052612, 0.7658169269561768, 0.7759873270988464, 0.7685906887054443, 0.7833839654922485, 0.7866860628128052, 0.7959318161010742, 0.7957997918128967, 0.7956677079200745, 0.8150838613510132, 0.8121780753135681, 0.8198388814926147, 0.8157442808151245, 0.8253863453865051, 0.829216718673706, 0.824329674243927, 0.8285563588142395, 0.8409721255302429, 0.8358209133148193, 0.8342359066009521, 0.8496896028518677, 0.8469158411026001, 0.8448025584220886, 0.8487650156021118, 0.8455950617790222, 0.8607845902442932, 0.8552370667457581, 0.8540483713150024, 0.8609166741371155], "val_loss": [1.619126558303833, 1.4331230095454626, 0.9138719013759068, 0.6674251556396484, 0.6435052497046334, 0.5451386315482003, 0.5457347461155483, 0.508262004171099, 0.4945073127746582, 0.4699664456503732, 0.5229880469185966, 0.4718198095049177, 0.4572468910898481, 0.4477801152638027, 0.4383273039545332, 0.42882405860083445, 0.4409517390387399, 0.3998960256576538, 0.40310754094805035, 0.40173483746392386, 0.3948810611452375, 0.3911281483513968, 0.3775420444352286, 0.3794395923614502, 0.3754053030695234, 0.3803948334285191, 0.38053098746708464, 0.3734417472566877, 0.3619180662291391, 0.36653631925582886, 0.3582128371511187, 0.3520106588091169, 0.3524106570652553, 0.3653766001973833, 0.3827510561261858, 0.3496999059404646, 0.3592661959784372], "val_accuracy": [0.3686666786670685, 0.4206666648387909, 0.6259999871253967, 0.6816666722297668, 0.6986666917800903, 0.737333357334137, 0.7563333511352539, 0.7553333044052124, 0.7940000295639038, 0.7886666655540466, 0.7620000243186951, 0.7806666493415833, 0.7950000166893005, 0.800000011920929, 0.8026666641235352, 0.8176666498184204, 0.8069999814033508, 0.8246666789054871, 0.8306666612625122, 0.831333339214325, 0.8416666388511658, 0.8349999785423279, 0.8389999866485596, 0.8386666774749756, 0.8429999947547913, 0.8396666646003723, 0.8316666483879089, 0.8426666855812073, 0.8456666469573975, 0.8353333473205566, 0.846666693687439, 0.862666666507721, 0.8569999933242798, 0.8493333458900452, 0.8386666774749756, 0.8556666374206543, 0.8506666421890259]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [2, 8, 2, 4, 5, 2, 2, 8, 2, 0, 4, 2, 8, 4, 2, 6, 9, 5, 0, 1, 4, 2, 3, 9, 2], [0, 0, 1, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 71, 71, 29, 57, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8031428456306458, "mapping_values": [1, 29, 29, 18, 11, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(grad, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.pow(grad, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(tf.math.add(alpha, alpha), grad)))), grad)))), tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.142383459804395, 1.9288347429839328, 1.4667228458737338, 0.9965388338406167, 0.8864179699176243, 0.7994460854799897, 0.7151531567584254, 0.7164926724647408, 0.6495536001225221, 0.6178740657410365, 0.6018886717397776, 0.6162219528099486, 0.5691908028903276, 0.5581652451547192, 0.5459527517857726, 0.5346224427050005, 0.5430815632962721, 0.4918462238874197, 0.4997946067949753, 0.4837231408997046, 0.48455949544339777, 0.471806186695046, 0.4604542660140059, 0.46749256553430724, 0.45337850262444523, 0.42691751541069173, 0.4380464906611258, 0.43843361367686173, 0.4053419767479776, 0.4096650652102255, 0.4096717941542154, 0.40302073102522645, 0.40088061928323954, 0.379097056320362, 0.39078813298834064, 0.3909242589987658, 0.36759893745557903], "accuracy": [0.28939375281333923, 0.33205652236938477, 0.47946110367774963, 0.6312243938446045, 0.6693964004516602, 0.7036058902740479, 0.7244749665260315, 0.7264562249183655, 0.7503632307052612, 0.7658169269561768, 0.7759873270988464, 0.7685906887054443, 0.7833839654922485, 0.7866860628128052, 0.7959318161010742, 0.7957997918128967, 0.7956677079200745, 0.8150838613510132, 0.8121780753135681, 0.8198388814926147, 0.8157442808151245, 0.8253863453865051, 0.829216718673706, 0.824329674243927, 0.8285563588142395, 0.8409721255302429, 0.8358209133148193, 0.8342359066009521, 0.8496896028518677, 0.8469158411026001, 0.8448025584220886, 0.8487650156021118, 0.8455950617790222, 0.8607845902442932, 0.8552370667457581, 0.8540483713150024, 0.8609166741371155], "val_loss": [1.619126558303833, 1.4331230095454626, 0.9138719013759068, 0.6674251556396484, 0.6435052497046334, 0.5451386315482003, 0.5457347461155483, 0.508262004171099, 0.4945073127746582, 0.4699664456503732, 0.5229880469185966, 0.4718198095049177, 0.4572468910898481, 0.4477801152638027, 0.4383273039545332, 0.42882405860083445, 0.4409517390387399, 0.3998960256576538, 0.40310754094805035, 0.40173483746392386, 0.3948810611452375, 0.3911281483513968, 0.3775420444352286, 0.3794395923614502, 0.3754053030695234, 0.3803948334285191, 0.38053098746708464, 0.3734417472566877, 0.3619180662291391, 0.36653631925582886, 0.3582128371511187, 0.3520106588091169, 0.3524106570652553, 0.3653766001973833, 0.3827510561261858, 0.3496999059404646, 0.3592661959784372], "val_accuracy": [0.3686666786670685, 0.4206666648387909, 0.6259999871253967, 0.6816666722297668, 0.6986666917800903, 0.737333357334137, 0.7563333511352539, 0.7553333044052124, 0.7940000295639038, 0.7886666655540466, 0.7620000243186951, 0.7806666493415833, 0.7950000166893005, 0.800000011920929, 0.8026666641235352, 0.8176666498184204, 0.8069999814033508, 0.8246666789054871, 0.8306666612625122, 0.831333339214325, 0.8416666388511658, 0.8349999785423279, 0.8389999866485596, 0.8386666774749756, 0.8429999947547913, 0.8396666646003723, 0.8316666483879089, 0.8426666855812073, 0.8456666469573975, 0.8353333473205566, 0.846666693687439, 0.862666666507721, 0.8569999933242798, 0.8493333458900452, 0.8386666774749756, 0.8556666374206543, 0.8506666421890259]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [9, 8, 4, 4, 5, 3, 6, 1, 2, 1, 9, 1, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 0, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 3, 1, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [25, 25, 50, 71, 34]], "fitness": -0.7620000243186951, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2957475133749, 2.281623427894027, 2.2684592203677623, 2.251927113441696, 2.2339288807973383, 2.2163850517320816, 2.1895608132966617, 2.160444487386675, 2.126913628290358, 2.0884006953966883, 2.042012888285242, 1.9863555351378754, 1.9205794858579797, 1.8517838607390542, 1.7826106494774576, 1.7099873176135596, 1.6371898240952396, 1.5632388743238206, 1.5044419634469732, 1.4507304576441218, 1.3996844094395717, 1.342448198579605, 1.3102673143364922, 1.2747844577449707, 1.2272812905423063, 1.202919962478273, 1.1815260419157816, 1.1534641122207068, 1.1336621284453372, 1.1117179553742738, 1.0957416659569177, 1.0669845703838208, 1.0610331091126903, 1.050299476890705, 1.0270585721872107, 1.0128666257593752, 1.0013490656127295, 0.9895719480300388, 0.9784459612467474, 0.9698756972497339, 0.9628155103149888, 0.966196447599046, 0.9437107033875042, 0.9230744698500793, 0.9300898176851273, 0.909070513661291, 0.9096308851742773, 0.9063061643049874, 0.8997428070883221, 0.8845496481719223, 0.8868313898830492, 0.8730793442503808, 0.8696453887253327, 0.8594526344318085, 0.8652225003628573, 0.8510841912266569, 0.8528823256413888, 0.841391801070449, 0.8414448593522831, 0.8268982103991707, 0.8321936222162576, 0.8281093116654318, 0.8330582100969375, 0.8221145233520979, 0.8142034260194693, 0.8080864452871711, 0.8025428996724129, 0.801553306326402, 0.8076979635083333, 0.8039795989294912, 0.7988937129481216, 0.7928072948891016, 0.7854978766943312, 0.7867399132278506, 0.7926857054209933, 0.7798524794246636, 0.7752356753688148, 0.7778291032535053, 0.7721389157739629, 0.7722670257036413, 0.774589862719251, 0.7661079263265154, 0.7610111939530756, 0.7587466183875168, 0.7510938846345402, 0.7486787267947446, 0.7531877828390685, 0.7424858164683372, 0.7411552018351512, 0.7482254249529044, 0.7482629979149603, 0.7504322660077974, 0.7495433013153555, 0.7402337607359921, 0.7322347394747111, 0.7344877222950715, 0.7299797946372918, 0.7371319493817899, 0.7315303725715107, 0.7239821471511065], "accuracy": [0.108440101146698, 0.14132875204086304, 0.18201030790805817, 0.2222955971956253, 0.25941091775894165, 0.28582748770713806, 0.31924447417259216, 0.3517369031906128, 0.3599260449409485, 0.38568219542503357, 0.401400089263916, 0.4131554663181305, 0.4297979176044464, 0.447761207818985, 0.4624224007129669, 0.47351735830307007, 0.4931977391242981, 0.5038964748382568, 0.5151234865188599, 0.5260863900184631, 0.535860538482666, 0.5514463186264038, 0.5585787892341614, 0.5621450543403625, 0.5810328722000122, 0.5875049233436584, 0.5962224006652832, 0.5955620408058167, 0.6095628142356873, 0.607449471950531, 0.6127327680587769, 0.6302998065948486, 0.6289790272712708, 0.6279223561286926, 0.6306960582733154, 0.6444327235221863, 0.6482630968093872, 0.648659348487854, 0.6528860330581665, 0.6633205413818359, 0.6573768258094788, 0.6601505875587463, 0.6664905548095703, 0.6723021864891052, 0.6695284843444824, 0.6795667409896851, 0.6777176260948181, 0.6796988248825073, 0.6837934255599976, 0.6811517477035522, 0.6840575933456421, 0.6872276067733765, 0.6886804699897766, 0.6905296444892883, 0.6900013089179993, 0.6896050572395325, 0.6970016956329346, 0.7000396251678467, 0.6989829540252686, 0.7004358768463135, 0.7041342258453369, 0.6997754573822021, 0.698190450668335, 0.7080966830253601, 0.7047945857048035, 0.705058753490448, 0.7104741930961609, 0.711530864238739, 0.7100779414176941, 0.7140403985977173, 0.713379979133606, 0.7157574892044067, 0.7191916704177856, 0.7165499925613403, 0.7128516435623169, 0.7174745798110962, 0.7186633348464966, 0.7202483415603638, 0.7226257920265198, 0.7176066637039185, 0.7206445932388306, 0.7191916704177856, 0.7209087014198303, 0.7283053994178772, 0.7283053994178772, 0.7288337349891663, 0.7238145470619202, 0.7276449799537659, 0.7284374833106995, 0.7253995537757874, 0.7279091477394104, 0.7277770638465881, 0.7310791015625, 0.7312111854553223, 0.7333245277404785, 0.7349095344543457, 0.7347774505615234, 0.7309470176696777, 0.7359662055969238, 0.7347774505615234], "val_loss": [1.9567581585475378, 1.9430908475603377, 1.9286961555480957, 1.9129044669015067, 1.8947392191205705, 1.8738323620387487, 1.8486475944519043, 1.8186595780508858, 1.7829066685267858, 1.7407432964869909, 1.69131680897304, 1.6342080661228724, 1.56956148147583, 1.498995338167463, 1.4257685797555106, 1.350912639072963, 1.2771400724138533, 1.2070490973336356, 1.1440302644457137, 1.0873493807656425, 1.0374576364244734, 0.9923810618264335, 0.9532641342708043, 0.9198580810001918, 0.888709272657122, 0.8608697823115757, 0.8371330499649048, 0.8161014148167202, 0.7980069092341832, 0.7802913699831281, 0.7659098420824323, 0.7516000100544521, 0.7397893667221069, 0.7286698137010846, 0.717430591583252, 0.7070984499795097, 0.6978375911712646, 0.6888166495731899, 0.6813234772000994, 0.6745060852595738, 0.6674713918140956, 0.6622353110994611, 0.6555356468473162, 0.6482941934040615, 0.6442779983792987, 0.6381179775510516, 0.6330698047365461, 0.6284767729895455, 0.624911870275225, 0.6198557615280151, 0.6152703591755458, 0.6114974021911621, 0.6079279354640416, 0.603049738066537, 0.5999176672526768, 0.5964766911097935, 0.5933982644762311, 0.590703044618879, 0.5877848523003715, 0.5861347232546125, 0.5835092748914447, 0.580863492829459, 0.5776730946132115, 0.5752096346446446, 0.5724889721189227, 0.5707604203905378, 0.5674597876412528, 0.5651928527014596, 0.5632920776094709, 0.5621514320373535, 0.5602224894932338, 0.5576989310128349, 0.5554709775107247, 0.5532510621207101, 0.5515658003943307, 0.5500448942184448, 0.5484311410358974, 0.5470157180513654, 0.5454621315002441, 0.5433140482221331, 0.5422947236469814, 0.5409365722111293, 0.5387589250292096, 0.5371509279523577, 0.5347883701324463, 0.5341639007840838, 0.5330921241215297, 0.532106740134103, 0.5289439984730312, 0.5278286593300956, 0.5269744907106672, 0.5262708153043475, 0.5251045567648751, 0.5236143725258964, 0.5218572957175118, 0.5209427561078753, 0.5202257292611259, 0.5207525321415493, 0.5184021166392735, 0.5160445826394218], "val_accuracy": [0.15800000727176666, 0.28299999237060547, 0.3616666793823242, 0.3930000066757202, 0.4189999997615814, 0.4390000104904175, 0.4620000123977661, 0.47999998927116394, 0.5040000081062317, 0.5249999761581421, 0.5353333353996277, 0.5566666722297668, 0.5663333535194397, 0.5746666789054871, 0.578000009059906, 0.5893333554267883, 0.5996666550636292, 0.6103333234786987, 0.625, 0.6420000195503235, 0.6493333578109741, 0.6606666445732117, 0.6766666769981384, 0.6809999942779541, 0.6819999814033508, 0.6949999928474426, 0.6946666836738586, 0.6996666789054871, 0.6993333101272583, 0.703000009059906, 0.7056666612625122, 0.7089999914169312, 0.7076666951179504, 0.7106666564941406, 0.7143333554267883, 0.7173333168029785, 0.7193333506584167, 0.7236666679382324, 0.7260000109672546, 0.721666693687439, 0.7260000109672546, 0.7269999980926514, 0.7293333411216736, 0.7323333621025085, 0.7329999804496765, 0.7369999885559082, 0.7366666793823242, 0.7440000176429749, 0.7433333396911621, 0.7446666955947876, 0.7473333477973938, 0.746666669845581, 0.7506666779518127, 0.7546666860580444, 0.7546666860580444, 0.7556666731834412, 0.7573333382606506, 0.7570000290870667, 0.7616666555404663, 0.7563333511352539, 0.7586666941642761, 0.7633333206176758, 0.7639999985694885, 0.7646666765213013, 0.765999972820282, 0.7649999856948853, 0.7673333287239075, 0.7683333158493042, 0.765666663646698, 0.768666684627533, 0.7673333287239075, 0.7676666378974915, 0.7676666378974915, 0.7693333625793457, 0.7683333158493042, 0.7706666588783264, 0.7703333497047424, 0.7720000147819519, 0.7713333368301392, 0.7733333110809326, 0.7726666927337646, 0.7746666669845581, 0.7733333110809326, 0.7753333449363708, 0.7763333320617676, 0.7726666927337646, 0.7746666669845581, 0.7756666541099548, 0.7770000100135803, 0.7793333530426025, 0.778333306312561, 0.7803333401679993, 0.7763333320617676, 0.7786666750907898, 0.7833333611488342, 0.7833333611488342, 0.778333306312561, 0.7786666750907898, 0.7803333401679993, 0.7839999794960022]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [9, 8, 2, 4, 5, 2, 2, 5, 2, 3, 1, 2, 8, 0, 2, 6, 9, 5, 0, 2, 4, 4, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [87, 90, 50, 27, 57, 91, 53, 52, 57, 21], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [3, 1, 6, 8, 1, 0, 9, 2, 2, 0, 4, 9, 8, 1, 1, 8, 9, 0], [0, 1, 0, 3, 0, 2, 1, 3, 0, 0], [87, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [79, 25, 50, 71, 34]], "fitness": -0.15971428155899048, "mapping_values": [1, 1, 1, 1, 0, 1, 13, 13, 8, 5, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(alpha, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [3.5360759556994164, 2.3052864855999458, 2.3031386177159727, 2.3018843227326515, 2.269242540184911, 2.3047219142780295, 2.3034371382776677, 2.302989782705724, 2.3024025857094306, 2.335751729288027, 2.306763919620718, 2.2991312746799477, 2.249270652027304, 2.3033577422770715, 2.2834060737847683, 2.2949241884569402, 2.602272413756633], "accuracy": [0.16523577272891998, 0.09417514503002167, 0.09840179979801178, 0.10857218503952026, 0.1674811840057373, 0.10249637067317963, 0.09800554811954498, 0.09787346422672272, 0.10236428678035736, 0.19072777032852173, 0.10157178342342377, 0.11966715008020401, 0.15876370668411255, 0.1018359512090683, 0.12376172095537186, 0.11319508403539658, 0.1534803807735443], "val_loss": [1.9766090256827218, 1.9741371018545968, 1.9735445295061385, 1.9690799031938826, 1.9756020137241908, 1.9738678932189941, 1.9737224578857422, 1.9735257966177804, 1.9716986928667342, 1.9809163638523646, 1.9734783172607422, 1.9389724731445312, 1.9745544024876185, 1.9729303632463728, 1.973752158028739, 1.8972094399588448, 1.976243223462786], "val_accuracy": [0.09833333641290665, 0.09700000286102295, 0.09966666996479034, 0.17366667091846466, 0.09966666996479034, 0.0976666659116745, 0.10599999874830246, 0.09833333641290665, 0.1966666728258133, 0.0949999988079071, 0.09966666996479034, 0.3199999928474426, 0.09966666996479034, 0.13600000739097595, 0.09700000286102295, 0.18833333253860474, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [2, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 8, 4, 2, 0, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [77, 71, 71, 29, 57, 92, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 1, 4, 9, 6, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [14, 25, 50, 71, 34]], "fitness": -0.12885713577270508, "mapping_values": [1, 29, 29, 19, 10, 4, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.square(grad), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)))))), tf.math.add(alpha, grad)))), tf.math.negative(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, alpha)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2289466123539365, 7.174189610614154, 2.3112892318537144, 2.3046868414281145, 2.303361914303041, 2.3032087509768466, 2.3031649208497127], "accuracy": [0.17012283205986023, 0.14212125539779663, 0.09959053993225098, 0.09576013684272766, 0.09774138033390045, 0.09734513610601425, 0.09694888442754745], "val_loss": [1.982074533190046, 1.9861167498997279, 1.9765776906694685, 1.974165575844901, 1.9737927573067802, 1.973705564226423, 1.9737866265433175], "val_accuracy": [0.0989999994635582, 0.10400000214576721, 0.10400000214576721, 0.10000000149011612, 0.10400000214576721, 0.0976666659116745, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 8, 2, 4, 5, 2, 8, 8, 2, 3, 5, 2, 8, 4, 2, 0, 3, 5, 3, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 1, 4, 9, 6, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.12457142770290375, "mapping_values": [1, 23, 23, 14, 9, 3, 14, 14, 8, 6, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(grad))))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.square(grad), tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), alpha))), tf.math.pow(tf.math.add(alpha, grad), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.563466370082125, 2.305423784060737, 2.303167801617537, 2.3018056626773986, 2.194516713262439, 2.305867672029535, 2.303441027766127, 2.3031204206564673, 2.3029637598736317], "accuracy": [0.16589617729187012, 0.0948355570435524, 0.09734513610601425, 0.10659094154834747, 0.20116232335567474, 0.10210011899471283, 0.0956280529499054, 0.09509972482919693, 0.1002509593963623], "val_loss": [1.9768406323024206, 1.9741774967738561, 1.9735653059823173, 1.9691119194030762, 1.9776803425380163, 1.973977838243757, 1.9737794058663505, 1.9737302235194616, 1.9736007281712122], "val_accuracy": [0.09833333641290665, 0.09700000286102295, 0.09966666996479034, 0.13966666162014008, 0.09966666996479034, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [2, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [77, 64, 50, 27, 57, 91, 51, 52, 57, 21, 43, 83], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 0, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 2, 3, 0, 2, 1, 3, 0, 0], [95, 80, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.12457142770290375, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.563466370082125, 2.305423784060737, 2.303167801617537, 2.3018056626773986, 2.194516713262439, 2.305867672029535, 2.303441027766127, 2.3031204206564673, 2.3029637598736317], "accuracy": [0.16589617729187012, 0.0948355570435524, 0.09734513610601425, 0.10659094154834747, 0.20116232335567474, 0.10210011899471283, 0.0956280529499054, 0.09509972482919693, 0.1002509593963623], "val_loss": [1.9768406323024206, 1.9741774967738561, 1.9735653059823173, 1.9691119194030762, 1.9776803425380163, 1.973977838243757, 1.9737794058663505, 1.9737302235194616, 1.9736007281712122], "val_accuracy": [0.09833333641290665, 0.09700000286102295, 0.09966666996479034, 0.13966666162014008, 0.09966666996479034, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [5, 8, 2, 4, 5, 3, 2, 1, 2, 1, 3, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 3, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [71, 10, 35, 27, 57, 79, 53, 52], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 1, 2, 8, 8, 0, 9, 6, 2, 6, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 3, 1, 3, 0, 0], [95, 15, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 4, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)), grad))), grad), tf.math.add(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06789063662290573, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [9, 8, 2, 9, 5, 3, 2, 1, 2, 1, 8, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [87, 90, 50, 27, 57, 91, 53, 52, 57, 21], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 3, 1, 3, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(sigma, tf.math.divide_no_nan(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2685975.3034148463, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09325055778026581, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 6, 9, 9, 6, 2, 2, 5, 9, 1, 4, 2, 6, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 9, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 2, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 3, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 67, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 1, 1, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 19, 11, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), alpha))), tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09377889335155487, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 2, 3, 2, 2, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 3, 2, 2, 2, 2, 1, 2, 1, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 3, 1, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 3, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 37, 37, 24, 13, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(grad, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, alpha)), tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.negative(alpha), tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 3, 5, 2, 2, 5, 6, 2, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 32, 27, 79, 91, 53, 52, 57, 21], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [2, 1, 2, 0, 5, 4, 5, 4, 3, 1, 8, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 3, 2, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 14, 9, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.math.add(tf.math.square(grad), tf.math.add(alpha, grad)), tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad)))), alpha))), tf.math.add(alpha, tf.math.pow(grad, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 8, 2, 5, 5, 3, 2, 1, 2, 3, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [25, 5, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 0, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 3, 1, 3, 0, 0], [95, 46, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [2, 8, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3032195568399625, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 2, 1, 4, 5, 3, 2, 1, 9, 1, 5, 6, 1, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [37, 10, 35, 27, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.09371428936719894, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.300771696220189, 2.2990505602444484, 2.299978520750228, 2.3008533099135073, 2.3007240492858907, 2.3019464112323242, 2.3011879398838215], "accuracy": [0.09642054885625839, 0.10051512718200684, 0.09549596905708313, 0.08875974267721176, 0.09430722147226334, 0.08175934851169586, 0.08836349099874496], "val_loss": [1.9683631488255091, 1.968858242034912, 1.9709154537745885, 1.9717490332467216, 1.972202914101737, 1.972116470336914, 1.9722441945757185], "val_accuracy": [0.06966666877269745, 0.09866666793823242, 0.07966666668653488, 0.05833333358168602, 0.061666667461395264, 0.07900000363588333, 0.09099999815225601]}}]