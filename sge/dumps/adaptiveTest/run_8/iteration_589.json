[{"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 4, 6, 2, 1, 9, 3, 2, 1, 5, 8, 2, 3, 2, 4, 0, 5, 0, 2, 4, 5, 6, 2, 0, 5, 2, 4, 6, 9, 6, 6, 5, 6, 0, 3, 6, 7, 1, 1, 2, 2], [0, 1, 2, 0, 2, 0, 1, 2, 2, 0, 0, 3, 2, 2, 3, 1, 0, 3, 2, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 0], [31, 62, 7, 73, 7, 1, 49, 51, 88, 77, 64, 19, 79, 59], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.7988571524620056, "mapping_values": [1, 65, 65, 39, 26, 10, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), alpha)))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.negative(grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, grad)))))), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(grad, alpha)), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(grad))))), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), alpha))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9672276571898837, 1.4717721128822743, 1.0479101870652314, 0.9152958844442094, 0.8037690561224897, 0.7956450887958308, 0.7490260426347218, 0.7186345658234916, 0.6847618676179813, 0.6853378033830095, 0.6337188484331463, 0.6826402367523333, 0.615424977868634, 0.6022702383327446, 0.6022276606589355, 0.570633304912684, 0.5665025493141651, 0.573224539321254, 0.5643723533925379], "accuracy": [0.3411702513694763, 0.5135384798049927, 0.6075815558433533, 0.6622639298439026, 0.6989829540252686, 0.6973979473114014, 0.7131158113479614, 0.7260599732398987, 0.7367587089538574, 0.7318716049194336, 0.7568352818489075, 0.7359662055969238, 0.7637035846710205, 0.7708360552787781, 0.7751948237419128, 0.7814027070999146, 0.7869502305984497, 0.7796856164932251, 0.7865539789199829], "val_loss": [1.5887564250401087, 0.7966074773243496, 0.7221798045294625, 0.6007134062903268, 0.6526199408939907, 0.6363996948514666, 0.5280586651393345, 0.5157238415309361, 0.511165908404759, 0.5111479759216309, 0.550046273640224, 0.4886754410607474, 0.4741952930177961, 0.4548662560326712, 0.4461514268602644, 0.4595248443739755, 0.4968882288251604, 0.4553753733634949, 0.4660894274711609], "val_accuracy": [0.34966665506362915, 0.643666684627533, 0.6700000166893005, 0.7459999918937683, 0.7043333053588867, 0.7059999704360962, 0.7703333497047424, 0.7770000100135803, 0.7713333368301392, 0.7549999952316284, 0.7516666650772095, 0.7856666445732117, 0.7913333177566528, 0.8116666674613953, 0.8076666593551636, 0.7996666431427002, 0.7793333530426025, 0.8016666769981384, 0.7913333177566528]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7937142848968506, "mapping_values": [1, 14, 14, 7, 7, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.026070017745986, 1.5129957072030378, 1.1385886511546337, 0.9187460977246087, 0.8442420794774576, 0.7650881288640803, 0.7458507115846266, 0.7450642536549662, 0.6869835153294908, 0.6610007221593895, 0.632149361159587, 0.6309705068957709, 0.604772806183348, 0.6078801857025364, 0.5894283815901498, 0.5639898623331836, 0.5497837520751025, 0.551069156746618, 0.5307988058448452, 0.5357019264763215, 0.517274278403903, 0.5245062078325551, 0.5317669867792181, 0.4877149884679676, 0.4892753391706114], "accuracy": [0.33126401901245117, 0.47893276810646057, 0.6145819425582886, 0.657508909702301, 0.6769251227378845, 0.705058753490448, 0.7119271159172058, 0.7150970697402954, 0.7338528633117676, 0.7446836829185486, 0.7586844563484192, 0.7635715007781982, 0.7703077793121338, 0.767401933670044, 0.7796856164932251, 0.7824593782424927, 0.7921014428138733, 0.7910447716712952, 0.7984414100646973, 0.7956677079200745, 0.8045172095298767, 0.796328067779541, 0.7935543656349182, 0.8177255392074585, 0.8125742673873901], "val_loss": [1.7655150549752372, 1.1936766420091902, 0.7054073640278408, 0.6422810895102364, 0.578844598361424, 0.5842459883008685, 0.5880445071629116, 0.5440237692424229, 0.5292954955782209, 0.4865450518471854, 0.4954377923692976, 0.4766009875706264, 0.5010185241699219, 0.46315587418419973, 0.44819160870143343, 0.4365435923848833, 0.4262249895504543, 0.4574270078114101, 0.4900756563459124, 0.4216602274349758, 0.41449118512017386, 0.4712687390191214, 0.43836184058870586, 0.4534497857093811, 0.4313407710620335], "val_accuracy": [0.3596666753292084, 0.6473333239555359, 0.7093333601951599, 0.6983333230018616, 0.7300000190734863, 0.734000027179718, 0.7559999823570251, 0.7463333606719971, 0.7616666555404663, 0.7703333497047424, 0.778333306312561, 0.7883333563804626, 0.7803333401679993, 0.796999990940094, 0.8196666836738586, 0.8106666803359985, 0.8190000057220459, 0.7853333353996277, 0.7570000290870667, 0.8226666450500488, 0.8216666579246521, 0.8036666512489319, 0.8059999942779541, 0.7973333597183228, 0.8073333501815796]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [3, 2, 4, 0, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2, 4, 3, 9, 4, 7, 6, 5, 9, 2, 6, 5, 4, 0, 6, 4, 2, 3, 2, 7, 9], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 2, 2, 2, 0, 1, 1, 2, 2, 3, 2, 2, 2, 1], [87, 55, 35, 73, 95, 21, 60, 81], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7937142848968506, "mapping_values": [1, 51, 51, 33, 18, 8, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.negative(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), alpha))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), grad)))), tf.math.square(tf.math.add(alpha, grad)))), grad)))))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.026070017745986, 1.5129957072030378, 1.1385886511546337, 0.9187460977246087, 0.8442420794774576, 0.7650881288640803, 0.7458507115846266, 0.7450642536549662, 0.6869835153294908, 0.6610007221593895, 0.632149361159587, 0.6309705068957709, 0.604772806183348, 0.6078801857025364, 0.5894283815901498, 0.5639898623331836, 0.5497837520751025, 0.551069156746618, 0.5307988058448452, 0.5357019264763215, 0.517274278403903, 0.5245062078325551, 0.5317669867792181, 0.4877149884679676, 0.4892753391706114], "accuracy": [0.33126401901245117, 0.47893276810646057, 0.6145819425582886, 0.657508909702301, 0.6769251227378845, 0.705058753490448, 0.7119271159172058, 0.7150970697402954, 0.7338528633117676, 0.7446836829185486, 0.7586844563484192, 0.7635715007781982, 0.7703077793121338, 0.767401933670044, 0.7796856164932251, 0.7824593782424927, 0.7921014428138733, 0.7910447716712952, 0.7984414100646973, 0.7956677079200745, 0.8045172095298767, 0.796328067779541, 0.7935543656349182, 0.8177255392074585, 0.8125742673873901], "val_loss": [1.7655150549752372, 1.1936766420091902, 0.7054073640278408, 0.6422810895102364, 0.578844598361424, 0.5842459883008685, 0.5880445071629116, 0.5440237692424229, 0.5292954955782209, 0.4865450518471854, 0.4954377923692976, 0.4766009875706264, 0.5010185241699219, 0.46315587418419973, 0.44819160870143343, 0.4365435923848833, 0.4262249895504543, 0.4574270078114101, 0.4900756563459124, 0.4216602274349758, 0.41449118512017386, 0.4712687390191214, 0.43836184058870586, 0.4534497857093811, 0.4313407710620335], "val_accuracy": [0.3596666753292084, 0.6473333239555359, 0.7093333601951599, 0.6983333230018616, 0.7300000190734863, 0.734000027179718, 0.7559999823570251, 0.7463333606719971, 0.7616666555404663, 0.7703333497047424, 0.778333306312561, 0.7883333563804626, 0.7803333401679993, 0.796999990940094, 0.8196666836738586, 0.8106666803359985, 0.8190000057220459, 0.7853333353996277, 0.7570000290870667, 0.8226666450500488, 0.8216666579246521, 0.8036666512489319, 0.8059999942779541, 0.7973333597183228, 0.8073333501815796]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [3, 9, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 2, 2, 4, 0, 2, 4, 7, 2, 5, 9, 6, 6, 5, 4, 0, 9, 4, 2, 3, 6, 7, 9], [1, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 3, 2, 2, 2, 2, 0, 3, 1, 2, 0, 0, 0, 0], [31, 62, 35, 73, 14, 1, 49, 51, 68, 77, 64, 97], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [38, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7937142848968506, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.026070017745986, 1.5129957072030378, 1.1385886511546337, 0.9187460977246087, 0.8442420794774576, 0.7650881288640803, 0.7458507115846266, 0.7450642536549662, 0.6869835153294908, 0.6610007221593895, 0.632149361159587, 0.6309705068957709, 0.604772806183348, 0.6078801857025364, 0.5894283815901498, 0.5639898623331836, 0.5497837520751025, 0.551069156746618, 0.5307988058448452, 0.5357019264763215, 0.517274278403903, 0.5245062078325551, 0.5317669867792181, 0.4877149884679676, 0.4892753391706114], "accuracy": [0.33126401901245117, 0.47893276810646057, 0.6145819425582886, 0.657508909702301, 0.6769251227378845, 0.705058753490448, 0.7119271159172058, 0.7150970697402954, 0.7338528633117676, 0.7446836829185486, 0.7586844563484192, 0.7635715007781982, 0.7703077793121338, 0.767401933670044, 0.7796856164932251, 0.7824593782424927, 0.7921014428138733, 0.7910447716712952, 0.7984414100646973, 0.7956677079200745, 0.8045172095298767, 0.796328067779541, 0.7935543656349182, 0.8177255392074585, 0.8125742673873901], "val_loss": [1.7655150549752372, 1.1936766420091902, 0.7054073640278408, 0.6422810895102364, 0.578844598361424, 0.5842459883008685, 0.5880445071629116, 0.5440237692424229, 0.5292954955782209, 0.4865450518471854, 0.4954377923692976, 0.4766009875706264, 0.5010185241699219, 0.46315587418419973, 0.44819160870143343, 0.4365435923848833, 0.4262249895504543, 0.4574270078114101, 0.4900756563459124, 0.4216602274349758, 0.41449118512017386, 0.4712687390191214, 0.43836184058870586, 0.4534497857093811, 0.4313407710620335], "val_accuracy": [0.3596666753292084, 0.6473333239555359, 0.7093333601951599, 0.6983333230018616, 0.7300000190734863, 0.734000027179718, 0.7559999823570251, 0.7463333606719971, 0.7616666555404663, 0.7703333497047424, 0.778333306312561, 0.7883333563804626, 0.7803333401679993, 0.796999990940094, 0.8196666836738586, 0.8106666803359985, 0.8190000057220459, 0.7853333353996277, 0.7570000290870667, 0.8226666450500488, 0.8216666579246521, 0.8036666512489319, 0.8059999942779541, 0.7973333597183228, 0.8073333501815796]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 1, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 7, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7937142848968506, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.026070017745986, 1.5129957072030378, 1.1385886511546337, 0.9187460977246087, 0.8442420794774576, 0.7650881288640803, 0.7458507115846266, 0.7450642536549662, 0.6869835153294908, 0.6610007221593895, 0.632149361159587, 0.6309705068957709, 0.604772806183348, 0.6078801857025364, 0.5894283815901498, 0.5639898623331836, 0.5497837520751025, 0.551069156746618, 0.5307988058448452, 0.5357019264763215, 0.517274278403903, 0.5245062078325551, 0.5317669867792181, 0.4877149884679676, 0.4892753391706114], "accuracy": [0.33126401901245117, 0.47893276810646057, 0.6145819425582886, 0.657508909702301, 0.6769251227378845, 0.705058753490448, 0.7119271159172058, 0.7150970697402954, 0.7338528633117676, 0.7446836829185486, 0.7586844563484192, 0.7635715007781982, 0.7703077793121338, 0.767401933670044, 0.7796856164932251, 0.7824593782424927, 0.7921014428138733, 0.7910447716712952, 0.7984414100646973, 0.7956677079200745, 0.8045172095298767, 0.796328067779541, 0.7935543656349182, 0.8177255392074585, 0.8125742673873901], "val_loss": [1.7655150549752372, 1.1936766420091902, 0.7054073640278408, 0.6422810895102364, 0.578844598361424, 0.5842459883008685, 0.5880445071629116, 0.5440237692424229, 0.5292954955782209, 0.4865450518471854, 0.4954377923692976, 0.4766009875706264, 0.5010185241699219, 0.46315587418419973, 0.44819160870143343, 0.4365435923848833, 0.4262249895504543, 0.4574270078114101, 0.4900756563459124, 0.4216602274349758, 0.41449118512017386, 0.4712687390191214, 0.43836184058870586, 0.4534497857093811, 0.4313407710620335], "val_accuracy": [0.3596666753292084, 0.6473333239555359, 0.7093333601951599, 0.6983333230018616, 0.7300000190734863, 0.734000027179718, 0.7559999823570251, 0.7463333606719971, 0.7616666555404663, 0.7703333497047424, 0.778333306312561, 0.7883333563804626, 0.7803333401679993, 0.796999990940094, 0.8196666836738586, 0.8106666803359985, 0.8190000057220459, 0.7853333353996277, 0.7570000290870667, 0.8226666450500488, 0.8216666579246521, 0.8036666512489319, 0.8059999942779541, 0.7973333597183228, 0.8073333501815796]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 1, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [94, 55, 35, 73, 95], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7937142848968506, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.026070017745986, 1.5129957072030378, 1.1385886511546337, 0.9187460977246087, 0.8442420794774576, 0.7650881288640803, 0.7458507115846266, 0.7450642536549662, 0.6869835153294908, 0.6610007221593895, 0.632149361159587, 0.6309705068957709, 0.604772806183348, 0.6078801857025364, 0.5894283815901498, 0.5639898623331836, 0.5497837520751025, 0.551069156746618, 0.5307988058448452, 0.5357019264763215, 0.517274278403903, 0.5245062078325551, 0.5317669867792181, 0.4877149884679676, 0.4892753391706114], "accuracy": [0.33126401901245117, 0.47893276810646057, 0.6145819425582886, 0.657508909702301, 0.6769251227378845, 0.705058753490448, 0.7119271159172058, 0.7150970697402954, 0.7338528633117676, 0.7446836829185486, 0.7586844563484192, 0.7635715007781982, 0.7703077793121338, 0.767401933670044, 0.7796856164932251, 0.7824593782424927, 0.7921014428138733, 0.7910447716712952, 0.7984414100646973, 0.7956677079200745, 0.8045172095298767, 0.796328067779541, 0.7935543656349182, 0.8177255392074585, 0.8125742673873901], "val_loss": [1.7655150549752372, 1.1936766420091902, 0.7054073640278408, 0.6422810895102364, 0.578844598361424, 0.5842459883008685, 0.5880445071629116, 0.5440237692424229, 0.5292954955782209, 0.4865450518471854, 0.4954377923692976, 0.4766009875706264, 0.5010185241699219, 0.46315587418419973, 0.44819160870143343, 0.4365435923848833, 0.4262249895504543, 0.4574270078114101, 0.4900756563459124, 0.4216602274349758, 0.41449118512017386, 0.4712687390191214, 0.43836184058870586, 0.4534497857093811, 0.4313407710620335], "val_accuracy": [0.3596666753292084, 0.6473333239555359, 0.7093333601951599, 0.6983333230018616, 0.7300000190734863, 0.734000027179718, 0.7559999823570251, 0.7463333606719971, 0.7616666555404663, 0.7703333497047424, 0.778333306312561, 0.7883333563804626, 0.7803333401679993, 0.796999990940094, 0.8196666836738586, 0.8106666803359985, 0.8190000057220459, 0.7853333353996277, 0.7570000290870667, 0.8226666450500488, 0.8216666579246521, 0.8036666512489319, 0.8059999942779541, 0.7973333597183228, 0.8073333501815796]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 1, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 0, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [34, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7937142848968506, "mapping_values": [1, 11, 11, 5, 6, 2, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.026070017745986, 1.5129957072030378, 1.1385886511546337, 0.9187460977246087, 0.8442420794774576, 0.7650881288640803, 0.7458507115846266, 0.7450642536549662, 0.6869835153294908, 0.6610007221593895, 0.632149361159587, 0.6309705068957709, 0.604772806183348, 0.6078801857025364, 0.5894283815901498, 0.5639898623331836, 0.5497837520751025, 0.551069156746618, 0.5307988058448452, 0.5357019264763215, 0.517274278403903, 0.5245062078325551, 0.5317669867792181, 0.4877149884679676, 0.4892753391706114], "accuracy": [0.33126401901245117, 0.47893276810646057, 0.6145819425582886, 0.657508909702301, 0.6769251227378845, 0.705058753490448, 0.7119271159172058, 0.7150970697402954, 0.7338528633117676, 0.7446836829185486, 0.7586844563484192, 0.7635715007781982, 0.7703077793121338, 0.767401933670044, 0.7796856164932251, 0.7824593782424927, 0.7921014428138733, 0.7910447716712952, 0.7984414100646973, 0.7956677079200745, 0.8045172095298767, 0.796328067779541, 0.7935543656349182, 0.8177255392074585, 0.8125742673873901], "val_loss": [1.7655150549752372, 1.1936766420091902, 0.7054073640278408, 0.6422810895102364, 0.578844598361424, 0.5842459883008685, 0.5880445071629116, 0.5440237692424229, 0.5292954955782209, 0.4865450518471854, 0.4954377923692976, 0.4766009875706264, 0.5010185241699219, 0.46315587418419973, 0.44819160870143343, 0.4365435923848833, 0.4262249895504543, 0.4574270078114101, 0.4900756563459124, 0.4216602274349758, 0.41449118512017386, 0.4712687390191214, 0.43836184058870586, 0.4534497857093811, 0.4313407710620335], "val_accuracy": [0.3596666753292084, 0.6473333239555359, 0.7093333601951599, 0.6983333230018616, 0.7300000190734863, 0.734000027179718, 0.7559999823570251, 0.7463333606719971, 0.7616666555404663, 0.7703333497047424, 0.778333306312561, 0.7883333563804626, 0.7803333401679993, 0.796999990940094, 0.8196666836738586, 0.8106666803359985, 0.8190000057220459, 0.7853333353996277, 0.7570000290870667, 0.8226666450500488, 0.8216666579246521, 0.8036666512489319, 0.8059999942779541, 0.7973333597183228, 0.8073333501815796]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 5, 1, 0, 1, 6, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7937142848968506, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.square(alpha)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.026070017745986, 1.5129957072030378, 1.1385886511546337, 0.9187460977246087, 0.8442420794774576, 0.7650881288640803, 0.7458507115846266, 0.7450642536549662, 0.6869835153294908, 0.6610007221593895, 0.632149361159587, 0.6309705068957709, 0.604772806183348, 0.6078801857025364, 0.5894283815901498, 0.5639898623331836, 0.5497837520751025, 0.551069156746618, 0.5307988058448452, 0.5357019264763215, 0.517274278403903, 0.5245062078325551, 0.5317669867792181, 0.4877149884679676, 0.4892753391706114], "accuracy": [0.33126401901245117, 0.47893276810646057, 0.6145819425582886, 0.657508909702301, 0.6769251227378845, 0.705058753490448, 0.7119271159172058, 0.7150970697402954, 0.7338528633117676, 0.7446836829185486, 0.7586844563484192, 0.7635715007781982, 0.7703077793121338, 0.767401933670044, 0.7796856164932251, 0.7824593782424927, 0.7921014428138733, 0.7910447716712952, 0.7984414100646973, 0.7956677079200745, 0.8045172095298767, 0.796328067779541, 0.7935543656349182, 0.8177255392074585, 0.8125742673873901], "val_loss": [1.7655150549752372, 1.1936766420091902, 0.7054073640278408, 0.6422810895102364, 0.578844598361424, 0.5842459883008685, 0.5880445071629116, 0.5440237692424229, 0.5292954955782209, 0.4865450518471854, 0.4954377923692976, 0.4766009875706264, 0.5010185241699219, 0.46315587418419973, 0.44819160870143343, 0.4365435923848833, 0.4262249895504543, 0.4574270078114101, 0.4900756563459124, 0.4216602274349758, 0.41449118512017386, 0.4712687390191214, 0.43836184058870586, 0.4534497857093811, 0.4313407710620335], "val_accuracy": [0.3596666753292084, 0.6473333239555359, 0.7093333601951599, 0.6983333230018616, 0.7300000190734863, 0.734000027179718, 0.7559999823570251, 0.7463333606719971, 0.7616666555404663, 0.7703333497047424, 0.778333306312561, 0.7883333563804626, 0.7803333401679993, 0.796999990940094, 0.8196666836738586, 0.8106666803359985, 0.8190000057220459, 0.7853333353996277, 0.7570000290870667, 0.8226666450500488, 0.8216666579246521, 0.8036666512489319, 0.8059999942779541, 0.7973333597183228, 0.8073333501815796]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 0, 0, 0], [31, 62, 35, 73, 14, 1, 49, 51, 68, 77, 64, 97], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7937142848968506, "mapping_values": [1, 14, 14, 7, 7, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.026070017745986, 1.5129957072030378, 1.1385886511546337, 0.9187460977246087, 0.8442420794774576, 0.7650881288640803, 0.7458507115846266, 0.7450642536549662, 0.6869835153294908, 0.6610007221593895, 0.632149361159587, 0.6309705068957709, 0.604772806183348, 0.6078801857025364, 0.5894283815901498, 0.5639898623331836, 0.5497837520751025, 0.551069156746618, 0.5307988058448452, 0.5357019264763215, 0.517274278403903, 0.5245062078325551, 0.5317669867792181, 0.4877149884679676, 0.4892753391706114], "accuracy": [0.33126401901245117, 0.47893276810646057, 0.6145819425582886, 0.657508909702301, 0.6769251227378845, 0.705058753490448, 0.7119271159172058, 0.7150970697402954, 0.7338528633117676, 0.7446836829185486, 0.7586844563484192, 0.7635715007781982, 0.7703077793121338, 0.767401933670044, 0.7796856164932251, 0.7824593782424927, 0.7921014428138733, 0.7910447716712952, 0.7984414100646973, 0.7956677079200745, 0.8045172095298767, 0.796328067779541, 0.7935543656349182, 0.8177255392074585, 0.8125742673873901], "val_loss": [1.7655150549752372, 1.1936766420091902, 0.7054073640278408, 0.6422810895102364, 0.578844598361424, 0.5842459883008685, 0.5880445071629116, 0.5440237692424229, 0.5292954955782209, 0.4865450518471854, 0.4954377923692976, 0.4766009875706264, 0.5010185241699219, 0.46315587418419973, 0.44819160870143343, 0.4365435923848833, 0.4262249895504543, 0.4574270078114101, 0.4900756563459124, 0.4216602274349758, 0.41449118512017386, 0.4712687390191214, 0.43836184058870586, 0.4534497857093811, 0.4313407710620335], "val_accuracy": [0.3596666753292084, 0.6473333239555359, 0.7093333601951599, 0.6983333230018616, 0.7300000190734863, 0.734000027179718, 0.7559999823570251, 0.7463333606719971, 0.7616666555404663, 0.7703333497047424, 0.778333306312561, 0.7883333563804626, 0.7803333401679993, 0.796999990940094, 0.8196666836738586, 0.8106666803359985, 0.8190000057220459, 0.7853333353996277, 0.7570000290870667, 0.8226666450500488, 0.8216666579246521, 0.8036666512489319, 0.8059999942779541, 0.7973333597183228, 0.8073333501815796]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 1, 0, 2, 3, 2, 4, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 4, 73, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7937142848968506, "mapping_values": [1, 12, 12, 6, 6, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), grad)), tf.math.add(alpha, alpha)), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.026070017745986, 1.5129957072030378, 1.1385886511546337, 0.9187460977246087, 0.8442420794774576, 0.7650881288640803, 0.7458507115846266, 0.7450642536549662, 0.6869835153294908, 0.6610007221593895, 0.632149361159587, 0.6309705068957709, 0.604772806183348, 0.6078801857025364, 0.5894283815901498, 0.5639898623331836, 0.5497837520751025, 0.551069156746618, 0.5307988058448452, 0.5357019264763215, 0.517274278403903, 0.5245062078325551, 0.5317669867792181, 0.4877149884679676, 0.4892753391706114], "accuracy": [0.33126401901245117, 0.47893276810646057, 0.6145819425582886, 0.657508909702301, 0.6769251227378845, 0.705058753490448, 0.7119271159172058, 0.7150970697402954, 0.7338528633117676, 0.7446836829185486, 0.7586844563484192, 0.7635715007781982, 0.7703077793121338, 0.767401933670044, 0.7796856164932251, 0.7824593782424927, 0.7921014428138733, 0.7910447716712952, 0.7984414100646973, 0.7956677079200745, 0.8045172095298767, 0.796328067779541, 0.7935543656349182, 0.8177255392074585, 0.8125742673873901], "val_loss": [1.7655150549752372, 1.1936766420091902, 0.7054073640278408, 0.6422810895102364, 0.578844598361424, 0.5842459883008685, 0.5880445071629116, 0.5440237692424229, 0.5292954955782209, 0.4865450518471854, 0.4954377923692976, 0.4766009875706264, 0.5010185241699219, 0.46315587418419973, 0.44819160870143343, 0.4365435923848833, 0.4262249895504543, 0.4574270078114101, 0.4900756563459124, 0.4216602274349758, 0.41449118512017386, 0.4712687390191214, 0.43836184058870586, 0.4534497857093811, 0.4313407710620335], "val_accuracy": [0.3596666753292084, 0.6473333239555359, 0.7093333601951599, 0.6983333230018616, 0.7300000190734863, 0.734000027179718, 0.7559999823570251, 0.7463333606719971, 0.7616666555404663, 0.7703333497047424, 0.778333306312561, 0.7883333563804626, 0.7803333401679993, 0.796999990940094, 0.8196666836738586, 0.8106666803359985, 0.8190000057220459, 0.7853333353996277, 0.7570000290870667, 0.8226666450500488, 0.8216666579246521, 0.8036666512489319, 0.8059999942779541, 0.7973333597183228, 0.8073333501815796]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [7, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 2, 8, 8, 5, 3, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 9, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 0, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07277770340442657, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [3, 6, 4, 5, 0, 1, 2, 9, 5, 1, 5, 1, 2, 9, 2, 6, 0, 2, 9, 2, 4, 3, 8, 2, 9, 6, 8, 9, 8, 6, 5, 4, 5, 6, 4, 2, 3, 0, 7, 9], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2, 2, 3, 0, 0, 1, 2, 0, 0, 0, 0], [68, 55, 35, 73, 95, 61, 20, 31, 93, 26, 50, 84], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 9, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [14, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 40, 40, 27, 13, 8, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.pow(tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.square(grad), tf.math.subtract(tf.math.add(alpha, tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))))))))))))))))), tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0738343670964241, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 1, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 2, 1, 3, 0, 0], [60, 77, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(grad, tf.math.add(beta, beta)), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.multiply(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 4, 4, 1, 0, 1, 6, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 4, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 6, 6, 1, 10, 10, 7, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, alpha), grad), tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, grad)))))), tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 8, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [8, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0738343670964241, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 4, 6, 0, 1, 6, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 9, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 13, 9, 3, 7, 7, 5, 2, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.square(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 2, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.302368674532077, 2.3027935311495433, 2.3025509296800672, 2.302776580599431, 2.302025751430817, 2.302121376994421], "accuracy": [0.08585391938686371, 0.09153348207473755, 0.08757099509239197, 0.08413683623075485, 0.09694888442754745, 0.09192973375320435], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 6, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 0, 1, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 1, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302368674532077, 2.3027935311495433, 2.3025509296800672, 2.302776580599431, 2.302025751430817, 2.302121376994421], "accuracy": [0.08585391938686371, 0.09153348207473755, 0.08757099509239197, 0.08413683623075485, 0.09694888442754745, 0.09192973375320435], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 2, 8, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 2, 0, 5, 0, 4, 4, 3, 8, 4, 7, 6, 5, 9, 6, 6, 5, 4, 0, 6, 5, 2, 3, 0, 7, 9], [1, 1, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 0, 0, 0], [31, 62, 93, 19, 14, 1, 20, 51, 68, 77, 64, 97], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03685714304447174, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(sigma))", "other_info": {"loss": [2.302905583913851, 2.304883665428217, 2.3064873191769, 2.308943344948078, 2.3106849900231685, 2.3146641701912567], "accuracy": [0.08413683623075485, 0.08611807972192764, 0.08308017253875732, 0.0750231146812439, 0.08268392831087112, 0.08360850811004639], "val_loss": [1.9717190606253487, 1.9731251171657018, 1.9747935022626604, 1.9768180847167969, 1.979135172707694, 1.9818012373788017], "val_accuracy": [0.03333333507180214, 0.027666667476296425, 0.02500000037252903, 0.02566666714847088, 0.02566666714847088, 0.029333332553505898]}}]