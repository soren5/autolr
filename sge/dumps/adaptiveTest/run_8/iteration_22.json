[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.8140000104904175, "mapping_values": [1, 3, 3, 1, 2, 0, 18, 18, 9, 9, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)), sigma))", "other_info": {"loss": [2.0373576628202934, 1.4124286473624033, 1.1700726218069895, 0.918303557115224, 0.8085883966825579, 0.7443309920795558, 0.7035966364384139, 0.6838100478397526, 0.6674030902457826, 0.6267345268586844, 0.6371508845721159, 0.6053274581106726, 0.5676835988412177, 0.5941878358732992, 0.5393868170205266, 0.5307212202871134, 0.5373726721610439, 0.5412504489647635, 0.5189828818516095, 0.4719553138396964, 0.49525264230276445, 0.4829920888647758, 0.4841573621146258, 0.4536514029944058, 0.4398941162822584, 0.4473812856993513, 0.4648246422947327, 0.44193142132909624, 0.4174037543246617, 0.441367991249937, 0.4036596437305775, 0.4073544120579159, 0.4011806732179183, 0.41022131716916904, 0.38517358349991704, 0.393695478937834], "accuracy": [0.3163386583328247, 0.499009370803833, 0.5816932916641235, 0.6643772125244141, 0.7021529674530029, 0.7111346125602722, 0.7390040755271912, 0.7408532500267029, 0.7434949278831482, 0.7567031979560852, 0.7581561207771301, 0.769911527633667, 0.7835160493850708, 0.7736098170280457, 0.7965922355651855, 0.8021397590637207, 0.7935543656349182, 0.7967243194580078, 0.8074230551719666, 0.8231409192085266, 0.8153480291366577, 0.8232730031013489, 0.8164047002792358, 0.8333113193511963, 0.8384625315666199, 0.8277638554573059, 0.8294808864593506, 0.8323867321014404, 0.8474441766738892, 0.8360850811004639, 0.8512746095657349, 0.8506141901016235, 0.8495575189590454, 0.8455950617790222, 0.8561616539955139, 0.8545766472816467], "val_loss": [1.540016038077218, 1.0372962270464217, 0.675846917288644, 0.6182514429092407, 0.5644912208829608, 0.5540870428085327, 0.5342345918927874, 0.5541596242359706, 0.5063910143715995, 0.5086828640529087, 0.4957728556224278, 0.4494046824319022, 0.5559910535812378, 0.4400885445731027, 0.45486619642802645, 0.41958591767719816, 0.42349712337766376, 0.4525131583213806, 0.4216382588659014, 0.40921170370919363, 0.4076286809785025, 0.4025475467954363, 0.3959293024880545, 0.37349006107875277, 0.44167243582861765, 0.41596278122493197, 0.42642531224659513, 0.36843434401920866, 0.4186375822339739, 0.3675206218447004, 0.35443250622068134, 0.36680130447660175, 0.3712651218686785, 0.36309086424963816, 0.3695379836218698, 0.34465112004961285], "val_accuracy": [0.3606666624546051, 0.4803333282470703, 0.6880000233650208, 0.7213333249092102, 0.7416666746139526, 0.7540000081062317, 0.7630000114440918, 0.7416666746139526, 0.7736666798591614, 0.7763333320617676, 0.7730000019073486, 0.8066666722297668, 0.7369999885559082, 0.8033333420753479, 0.8003333210945129, 0.8226666450500488, 0.8233333230018616, 0.8119999766349792, 0.824999988079071, 0.8173333406448364, 0.8196666836738586, 0.8273333311080933, 0.8209999799728394, 0.8456666469573975, 0.7990000247955322, 0.8243333101272583, 0.8113333582878113, 0.846666693687439, 0.8116666674613953, 0.8420000076293945, 0.8543333411216736, 0.8476666808128357, 0.8399999737739563, 0.8446666598320007, 0.8366666436195374, 0.8539999723434448]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 6, 6, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.8140000104904175, "mapping_values": [1, 7, 7, 4, 3, 2, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(beta)), grad)), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)), sigma))", "other_info": {"loss": [2.0373576628202934, 1.4124286473624033, 1.1700726218069895, 0.918303557115224, 0.8085883966825579, 0.7443309920795558, 0.7035966364384139, 0.6838100478397526, 0.6674030902457826, 0.6267345268586844, 0.6371508845721159, 0.6053274581106726, 0.5676835988412177, 0.5941878358732992, 0.5393868170205266, 0.5307212202871134, 0.5373726721610439, 0.5412504489647635, 0.5189828818516095, 0.4719553138396964, 0.49525264230276445, 0.4829920888647758, 0.4841573621146258, 0.4536514029944058, 0.4398941162822584, 0.4473812856993513, 0.4648246422947327, 0.44193142132909624, 0.4174037543246617, 0.441367991249937, 0.4036596437305775, 0.4073544120579159, 0.4011806732179183, 0.41022131716916904, 0.38517358349991704, 0.393695478937834], "accuracy": [0.3163386583328247, 0.499009370803833, 0.5816932916641235, 0.6643772125244141, 0.7021529674530029, 0.7111346125602722, 0.7390040755271912, 0.7408532500267029, 0.7434949278831482, 0.7567031979560852, 0.7581561207771301, 0.769911527633667, 0.7835160493850708, 0.7736098170280457, 0.7965922355651855, 0.8021397590637207, 0.7935543656349182, 0.7967243194580078, 0.8074230551719666, 0.8231409192085266, 0.8153480291366577, 0.8232730031013489, 0.8164047002792358, 0.8333113193511963, 0.8384625315666199, 0.8277638554573059, 0.8294808864593506, 0.8323867321014404, 0.8474441766738892, 0.8360850811004639, 0.8512746095657349, 0.8506141901016235, 0.8495575189590454, 0.8455950617790222, 0.8561616539955139, 0.8545766472816467], "val_loss": [1.540016038077218, 1.0372962270464217, 0.675846917288644, 0.6182514429092407, 0.5644912208829608, 0.5540870428085327, 0.5342345918927874, 0.5541596242359706, 0.5063910143715995, 0.5086828640529087, 0.4957728556224278, 0.4494046824319022, 0.5559910535812378, 0.4400885445731027, 0.45486619642802645, 0.41958591767719816, 0.42349712337766376, 0.4525131583213806, 0.4216382588659014, 0.40921170370919363, 0.4076286809785025, 0.4025475467954363, 0.3959293024880545, 0.37349006107875277, 0.44167243582861765, 0.41596278122493197, 0.42642531224659513, 0.36843434401920866, 0.4186375822339739, 0.3675206218447004, 0.35443250622068134, 0.36680130447660175, 0.3712651218686785, 0.36309086424963816, 0.3695379836218698, 0.34465112004961285], "val_accuracy": [0.3606666624546051, 0.4803333282470703, 0.6880000233650208, 0.7213333249092102, 0.7416666746139526, 0.7540000081062317, 0.7630000114440918, 0.7416666746139526, 0.7736666798591614, 0.7763333320617676, 0.7730000019073486, 0.8066666722297668, 0.7369999885559082, 0.8033333420753479, 0.8003333210945129, 0.8226666450500488, 0.8233333230018616, 0.8119999766349792, 0.824999988079071, 0.8173333406448364, 0.8196666836738586, 0.8273333311080933, 0.8209999799728394, 0.8456666469573975, 0.7990000247955322, 0.8243333101272583, 0.8113333582878113, 0.846666693687439, 0.8116666674613953, 0.8420000076293945, 0.8543333411216736, 0.8476666808128357, 0.8399999737739563, 0.8446666598320007, 0.8366666436195374, 0.8539999723434448]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [9, 6, 5, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1], [0, 3, 3, 6, 9], [3, 0], [45, 38]], "fitness": -0.7734285593032837, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.075162490597333, 1.5907205672957532, 1.165161486315044, 0.8979204900906212, 0.8109166916445529, 0.778328981452756, 0.7376333512823422, 0.6799314808316471, 0.6682204933072661, 0.6654191332061167, 0.6112149320793756, 0.6080307508535263, 0.6014658439475878, 0.5824334088050143, 0.5702269477473274], "accuracy": [0.30418702960014343, 0.459780752658844, 0.5879011750221252, 0.6736230254173279, 0.6881521344184875, 0.7047945857048035, 0.7197200059890747, 0.7458723783493042, 0.7485140562057495, 0.744419515132904, 0.765949010848999, 0.7685906887054443, 0.7688548564910889, 0.778232753276825, 0.785629391670227], "val_loss": [1.5619473797934396, 1.2039402893611364, 0.7232796124049595, 0.6271654537745884, 0.6134268386023385, 0.5638184377125331, 0.5867995534624372, 0.5394971200398037, 0.49698916503361296, 0.49495863914489746, 0.5205613545009068, 0.5056906938552856, 0.47768042768750874, 0.48665635926382883, 0.5349898508616856], "val_accuracy": [0.4440000057220459, 0.5370000004768372, 0.6536666750907898, 0.7409999966621399, 0.734000027179718, 0.7540000081062317, 0.7206666469573975, 0.765666663646698, 0.7866666913032532, 0.7889999747276306, 0.7559999823570251, 0.7770000100135803, 0.7873333096504211, 0.7820000052452087, 0.7580000162124634]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 1, 8, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 1, 0, 1, 1, 3, 3, 0], [90, 93, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [72, 38]], "fitness": -0.7688571214675903, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 1, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), sigma)), sigma))", "other_info": {"loss": [2.355373020327055, 2.4610843285593487, 2.885908086428065, 1.9498212047304067, 1.6849009226877234, 2.0971526135196616, 1.6887620097185405, 1.459052399842022, 1.3500481284195327, 1.2700021221905085, 1.2186406643210212, 1.1131358322229965, 1.1196696965087596, 0.8978059055263246, 1.035965346633451, 0.8392677667779914, 0.7952399171811085, 0.7081305319921861, 0.6899313168156621, 0.703595658264077, 0.6532785455706003, 0.6420518589089056, 0.6163860962155032, 0.5753435659496744, 0.5532144310215854, 0.5445366924496501, 0.5392650521237695, 0.5300140693014198, 0.5136221929894557, 0.4779620410633629, 0.46039364105989716, 0.509413764331445, 0.4610720054702736, 0.4484168287391723, 0.44381789379525477, 0.45788217987902113, 0.4441474163851891, 0.44009712523457367, 0.41591126215204416, 0.4416451047534688, 0.4220036053426073, 0.40898300264694465], "accuracy": [0.20393607020378113, 0.20552106201648712, 0.148064985871315, 0.3603222966194153, 0.44670453667640686, 0.369700163602829, 0.44670453667640686, 0.5173689126968384, 0.5361247062683105, 0.5793157815933228, 0.5695416927337646, 0.5984678268432617, 0.6115440726280212, 0.6814159154891968, 0.6287148594856262, 0.689869225025177, 0.7086250185966492, 0.7347774505615234, 0.7413815855979919, 0.7461365461349487, 0.7541936039924622, 0.7619865536689758, 0.7630431652069092, 0.7839123010635376, 0.7877426743507385, 0.7951393723487854, 0.7936864495277405, 0.7961959838867188, 0.8062343001365662, 0.81548011302948, 0.8249900937080383, 0.8059701323509216, 0.8278959393501282, 0.82683926820755, 0.8337075710296631, 0.8264430165290833, 0.8281601071357727, 0.83119797706604, 0.843481719493866, 0.8327829837799072, 0.8381983637809753, 0.844010055065155], "val_loss": [1.9591354642595564, 1.9546168872288294, 1.6907575471060616, 1.4579367637634277, 1.3439449582781111, 1.424041475568499, 0.9803932734898159, 0.9160362311771938, 0.8740644114358085, 1.1707474504198347, 0.7276954650878906, 0.7408196244921003, 0.6872377055031913, 0.703434807913644, 0.6330603361129761, 0.6030110972268241, 0.5050674847194127, 0.48555474621909006, 0.6147423131125314, 0.5213277510234288, 0.48129633494785856, 0.46877879755837576, 0.46108363355909077, 0.43687920910971506, 0.4578710283551897, 0.4023472326142447, 0.4556084530694144, 0.4499483449118478, 0.42127275466918945, 0.3730434945651463, 0.42865099225725445, 0.4046167731285095, 0.3956703799111502, 0.38052208934511456, 0.3812422582081386, 0.36955987555640085, 0.3723615918840681, 0.3823074017252241, 0.44862542833600727, 0.37522469248090473, 0.37504264286586214, 0.36139583587646484], "val_accuracy": [0.11533333361148834, 0.11533333361148834, 0.34333333373069763, 0.47466665506362915, 0.5149999856948853, 0.49433332681655884, 0.6143333315849304, 0.6446666717529297, 0.656333327293396, 0.512333333492279, 0.6846666932106018, 0.7036666870117188, 0.6930000185966492, 0.7133333086967468, 0.7143333554267883, 0.731333315372467, 0.778333306312561, 0.7710000276565552, 0.7446666955947876, 0.7833333611488342, 0.7766666412353516, 0.7910000085830688, 0.7856666445732117, 0.812666654586792, 0.8086666464805603, 0.8256666660308838, 0.79666668176651, 0.8133333325386047, 0.8216666579246521, 0.8489999771118164, 0.8090000152587891, 0.82833331823349, 0.82833331823349, 0.8493333458900452, 0.8503333330154419, 0.8506666421890259, 0.8516666889190674, 0.8373333215713501, 0.82833331823349, 0.8456666469573975, 0.840666651725769, 0.8363333344459534]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [4, 5, 0, 6, 2, 4, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 4, 1, 0, 1, 1, 3, 0, 0], [79, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [6], [], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 6, 9], [3, 1, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(grad)))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07000396400690079, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 3, 2, 3], [44, 57], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 6, 8, 5, 2, 2, 4, 5, 6, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [48, 53, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 6, 3, 2, 9, 8], [3, 1, 1, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 13, 13, 7, 6, 1, 1, 1, 0, 1, 0, 9, 6, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(grad)), grad)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(alpha, tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(sigma, tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [7, 6, 4, 9], [2, 2, 2, 3], [44, 57], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [4, 4, 6, 6, 5, 2, 2, 4, 5, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 2, 1, 0, 1, 1, 3, 0, 0], [48, 53, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1], [0, 0, 0], [2, 3, 3, 1], [87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 1, 1, 1, 0, 1, 0, 4, 3, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(grad))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), tf.math.square(alpha)))), tf.math.add(beta, alpha))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [2, 6, 6, 6, 0, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 3, 3, 6, 9, 5, 8, 2], [3, 0, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 22, 22, 12, 10, 4, 1, 1, 0, 1, 0, 12, 8, 4, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, beta), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma)), tf.math.sqrt(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.add(sigma, alpha)))", "other_info": {"loss": [46721.897546803455, 53493.16630687822, 53490.48052447249, 53487.80047580818, 53485.13937279174, 53482.58580128946], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [44970.31584821428, 44967.98325892857, 44965.814732142855, 44963.390625, 44961.18303571428, 44959.00334821428], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 0, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [49, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [0, 3], [6, 4], [], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 17, 17, 9, 8, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07000396400690079, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1], [1, 6, 4, 9], [3, 3, 0, 3], [44, 57], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [1, 6, 6, 6, 5, 2, 2, 3, 2, 1, 9, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 3, 1, 2, 3, 2, 0, 1], [90, 71, 36, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [87], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0], [0, 3, 1, 6, 9, 4, 6], [0, 3, 3, 1, 2], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [29697943.28723484, 564244246.7394004, 2618094219.276714, 7310398971.333774, 15502769943.63545, 28210511266.607845], "accuracy": [0.09391097724437714, 0.09800554811954498, 0.10077928751707077, 0.09893012791872025, 0.10170386731624603, 0.1018359512090683], "val_loss": [112155428.57142857, 896301147.4285715, 3023962989.714286, 7166656512.0, 13995870208.0, 24183408932.57143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 0, 8, 8], [2, 0, 2, 3], [44, 57], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [9, 3, 3, 6, 9], [3, 1, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 14, 14, 7, 7, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), alpha), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302823462679622, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 3, 3, 1, 0, 2], [90, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 1, 1], [1, 3, 3, 6, 9], [3, 0, 0, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 28, 28, 17, 11, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad))), grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), beta)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [29697943.28723484, 564244246.7394004, 2618094219.276714, 7310398971.333774, 15502769943.63545, 28210511266.607845], "accuracy": [0.09391097724437714, 0.09800554811954498, 0.10077928751707077, 0.09893012791872025, 0.10170386731624603, 0.1018359512090683], "val_loss": [112155428.57142857, 896301147.4285715, 3023962989.714286, 7166656512.0, 13995870208.0, 24183408932.57143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [1, 2, 2, 3], [44, 57], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 6, 6, 4, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 4, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [7, 3, 3, 6, 7, 9, 2, 9, 7, 2, 8], [3, 3, 3, 1, 2, 3, 2], [55, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 18, 11, 7, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), sigma), sigma), sigma), tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, beta))), tf.math.add(sigma, tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0], [1, 6, 6, 6, 8, 2, 2, 4, 8, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9, 7, 0], [3, 3, 0, 1], [72, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 9, 9, 4, 5, 1, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), sigma)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [868314.8193062309, 16434651.367058512, 76173272.84427421, 212595141.45661074, 450719372.99273545, 820041929.3239995], "accuracy": [0.09377889335155487, 0.09800554811954498, 0.10077928751707077, 0.09906221181154251, 0.10170386731624603, 0.10196803510189056], "val_loss": [3274109.214285714, 26098713.14285714, 87979579.42857143, 208422418.2857143, 406932717.71428573, 703014912.0], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [3, 3, 2, 3], [44, 57, 55], [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 0, 0, 1, 4, 9, 8, 1, 8, 8, 2, 0, 8, 6, 8, 1, 2, 1, 4, 0, 0, 3, 3, 9, 5, 2, 1, 8, 6, 5, 4, 5, 6, 2, 4, 8, 3, 5, 3, 8, 4, 5, 9, 7, 4, 0, 6, 4, 6, 9], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0, 4, 4, 1, 5, 5, 1, 0, 2, 4, 5, 1, 3, 1, 4, 5, 5, 5, 2, 0], [90, 71, 49, 88, 1, 78, 5, 80, 99], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [87], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 3, 1, 6, 9, 4, 6], [1, 3, 3, 1, 2], [43, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 85, 85, 56, 29, 9, 1, 0, 0, 0, 0, 12, 7, 5, 1], "tree_depth": 70, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))))), alpha), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.add(beta, alpha)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(beta)), tf.math.multiply(grad, tf.math.add(beta, grad))))))))))), tf.math.sqrt(alpha)), tf.math.pow(grad, tf.math.square(alpha))))))), tf.math.add(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, beta))))))))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.subtract(alpha, tf.math.divide_no_nan(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma))), tf.math.divide_no_nan(alpha, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [3, 0, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 1, 1, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 1, 1, 0, 0, 0, 0, 8, 5, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(grad, grad))), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.subtract(sigma, tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)), sigma))", "other_info": {"loss": [2.303519944851157, 2.3030455588286722, 2.3027166478496266, 2.3012813871499804, 2.302007364417426, 2.302883041533245], "accuracy": [0.08374059200286865, 0.09153348207473755, 0.09285431355237961, 0.09219389408826828, 0.09140139818191528, 0.08942015469074249], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [8, 6, 5, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 1, 2, 0, 0, 2, 2, 1, 4, 1, 3, 2, 1, 3, 5], [74, 16, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 1, 1], [0, 3, 1, 4, 8], [3, 1, 0, 1], [18]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.303519944851157, 2.3030455588286722, 2.3027166478496266, 2.3012813871499804, 2.302007364417426, 2.302883041533245], "accuracy": [0.08374059200286865, 0.09153348207473755, 0.09285431355237961, 0.09219389408826828, 0.09140139818191528, 0.08942015469074249], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [1, 6, 6, 6, 5, 2, 2, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 2, 3, 2, 3, 2, 3, 3, 1, 3, 2, 1, 3, 5], [90, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [0, 0, 0, 1], [0, 6], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0], [3, 3, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 1, 22, 22, 12, 10, 2, 1, 0, 0, 0, 0, 4, 3, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.subtract(beta, grad))), beta)), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(sigma)))", "other_info": {"loss": [2.303519944851157, 2.3030455588286722, 2.3027166478496266, 2.3012813871499804, 2.302007364417426, 2.302883041533245], "accuracy": [0.08374059200286865, 0.09153348207473755, 0.09285431355237961, 0.09219389408826828, 0.09140139818191528, 0.08942015469074249], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 6, 9, 0, 5, 2, 2, 2, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 3, 3, 0, 0], [90, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 5, 3, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)), sigma))", "other_info": {"loss": [2.303519944851157, 2.3030455588286722, 2.3027166478496266, 2.3012813871499804, 2.302007364417426, 2.302883041533245], "accuracy": [0.08374059200286865, 0.09153348207473755, 0.09285431355237961, 0.09219389408826828, 0.09140139818191528, 0.08942015469074249], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1], [3, 6, 4, 0, 8, 8], [0, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [2, 6, 6, 1, 1, 5, 2, 4, 9], [2, 0, 2, 3, 3, 0, 0, 1, 4, 1, 3, 2, 1, 3, 5], [69, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [4, 5], [], [0, 1, 1, 1], [0, 3, 1, 4, 8], [3, 1, 3, 1, 1, 3, 3, 1, 1, 0, 0, 0, 1, 3, 1, 0, 2, 2, 2, 0, 1, 0, 0, 1, 1, 3, 0], [18, 36, 63, 43, 8, 75, 12, 55, 24, 90, 91, 52, 5]], "fitness": -0.03999999910593033, "mapping_values": [1, 9, 9, 5, 4, 1, 5, 5, 2, 3, 1, 5, 4, 2, 2, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.303519944851157, 2.3030455588286722, 2.3027166478496266, 2.3012813871499804, 2.302007364417426, 2.302883041533245], "accuracy": [0.08374059200286865, 0.09153348207473755, 0.09285431355237961, 0.09219389408826828, 0.09140139818191528, 0.08942015469074249], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]