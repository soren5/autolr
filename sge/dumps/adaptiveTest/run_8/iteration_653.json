[{"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7894285917282104, "mapping_values": [1, 30, 30, 23, 7, 4, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.negative(grad))))))))), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2581172237275315, 2.0617022518122186, 1.626370316010897, 1.2707025523135975, 1.0977595733566496, 0.9967999201267466, 0.951054717776105, 0.8880115565197453, 0.8509317592481156, 0.8332286955752566, 0.8053852950246532, 0.7865868846832595, 0.7753254000332219, 0.7607136733338912, 0.7437087269648742, 0.7313773558281825, 0.7085787144634371, 0.7025070445428293, 0.6940275872262273, 0.677125711521972, 0.6786882035594654, 0.6656731674384919, 0.6581891740097456, 0.6629361566409553, 0.6473783497104335, 0.6421305500221857, 0.6503174954858265, 0.6356809465341312, 0.6242094193120847, 0.6224783489402134, 0.6171610830419367, 0.6192649901976061, 0.6216118897287648, 0.600750135298434, 0.6051256364488709, 0.6019064134626246, 0.5937112456047619, 0.5942220778481646, 0.5912637559414351, 0.5835638486509231, 0.5792736801425967], "accuracy": [0.20195482671260834, 0.38581427931785583, 0.4876502454280853, 0.5641262531280518, 0.6159027814865112, 0.6431118845939636, 0.6601505875587463, 0.6819442510604858, 0.6905296444892883, 0.7013604640960693, 0.7058512568473816, 0.713379979133606, 0.7140403985977173, 0.7168141603469849, 0.733588695526123, 0.7368907928466797, 0.7408532500267029, 0.7412495017051697, 0.7469290494918823, 0.7514199018478394, 0.7514199018478394, 0.7504953145980835, 0.763967752456665, 0.754589855670929, 0.7646281719207764, 0.7630431652069092, 0.7576277852058411, 0.761590301990509, 0.7725531458854675, 0.769911527633667, 0.772288978099823, 0.7769119143486023, 0.7667415142059326, 0.774270236492157, 0.7751948237419128, 0.7751948237419128, 0.7775723338127136, 0.7841764688491821, 0.7796856164932251, 0.7814027070999146, 0.7848368883132935], "val_loss": [1.851794719696045, 1.5148977892739433, 1.0460596084594727, 0.8322511400495257, 0.7343687840870449, 0.6745742900030953, 0.6523422343390328, 0.640830431665693, 0.5848844221660069, 0.5856512614658901, 0.5776947736740112, 0.5515859297343663, 0.5514035906110492, 0.5406062262398856, 0.529693603515625, 0.5157616819654193, 0.5068689414433071, 0.5186307941164289, 0.4996833801269531, 0.5004258837018695, 0.49286963258470806, 0.4911771161215646, 0.4919900723866054, 0.4903205633163452, 0.4762464761734009, 0.4996586697442191, 0.4824714320046561, 0.4722004788262503, 0.46505156585148405, 0.4607283728463309, 0.46023867811475483, 0.4814446483339582, 0.4634105478014265, 0.452884886945997, 0.4572483386312212, 0.4454085571425302, 0.4480081115450178, 0.4511208874838693, 0.44461134501865934, 0.451227034841265, 0.4746031420571463], "val_accuracy": [0.44600000977516174, 0.5490000247955322, 0.6496666669845581, 0.6700000166893005, 0.6943333148956299, 0.7106666564941406, 0.7260000109672546, 0.7173333168029785, 0.7523333430290222, 0.749666690826416, 0.7419999837875366, 0.7736666798591614, 0.762333333492279, 0.7593333125114441, 0.7613333463668823, 0.7856666445732117, 0.7853333353996277, 0.7710000276565552, 0.7839999794960022, 0.7903333306312561, 0.7896666526794434, 0.7893333435058594, 0.7863333225250244, 0.7889999747276306, 0.8016666769981384, 0.7739999890327454, 0.7866666913032532, 0.8006666898727417, 0.8059999942779541, 0.8023333549499512, 0.8053333163261414, 0.7929999828338623, 0.7983333468437195, 0.8086666464805603, 0.8013333082199097, 0.8176666498184204, 0.8113333582878113, 0.8149999976158142, 0.8166666626930237, 0.8096666932106018, 0.7826666831970215]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 2, 4, 1, 5, 8, 0, 8, 9, 5, 1, 9, 8, 2, 3, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 72, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7894285917282104, "mapping_values": [1, 16, 16, 11, 5, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(tf.math.pow(tf.math.subtract(grad, tf.math.square(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))), alpha))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2581172237275315, 2.0617022518122186, 1.626370316010897, 1.2707025523135975, 1.0977595733566496, 0.9967999201267466, 0.951054717776105, 0.8880115565197453, 0.8509317592481156, 0.8332286955752566, 0.8053852950246532, 0.7865868846832595, 0.7753254000332219, 0.7607136733338912, 0.7437087269648742, 0.7313773558281825, 0.7085787144634371, 0.7025070445428293, 0.6940275872262273, 0.677125711521972, 0.6786882035594654, 0.6656731674384919, 0.6581891740097456, 0.6629361566409553, 0.6473783497104335, 0.6421305500221857, 0.6503174954858265, 0.6356809465341312, 0.6242094193120847, 0.6224783489402134, 0.6171610830419367, 0.6192649901976061, 0.6216118897287648, 0.600750135298434, 0.6051256364488709, 0.6019064134626246, 0.5937112456047619, 0.5942220778481646, 0.5912637559414351, 0.5835638486509231, 0.5792736801425967], "accuracy": [0.20195482671260834, 0.38581427931785583, 0.4876502454280853, 0.5641262531280518, 0.6159027814865112, 0.6431118845939636, 0.6601505875587463, 0.6819442510604858, 0.6905296444892883, 0.7013604640960693, 0.7058512568473816, 0.713379979133606, 0.7140403985977173, 0.7168141603469849, 0.733588695526123, 0.7368907928466797, 0.7408532500267029, 0.7412495017051697, 0.7469290494918823, 0.7514199018478394, 0.7514199018478394, 0.7504953145980835, 0.763967752456665, 0.754589855670929, 0.7646281719207764, 0.7630431652069092, 0.7576277852058411, 0.761590301990509, 0.7725531458854675, 0.769911527633667, 0.772288978099823, 0.7769119143486023, 0.7667415142059326, 0.774270236492157, 0.7751948237419128, 0.7751948237419128, 0.7775723338127136, 0.7841764688491821, 0.7796856164932251, 0.7814027070999146, 0.7848368883132935], "val_loss": [1.851794719696045, 1.5148977892739433, 1.0460596084594727, 0.8322511400495257, 0.7343687840870449, 0.6745742900030953, 0.6523422343390328, 0.640830431665693, 0.5848844221660069, 0.5856512614658901, 0.5776947736740112, 0.5515859297343663, 0.5514035906110492, 0.5406062262398856, 0.529693603515625, 0.5157616819654193, 0.5068689414433071, 0.5186307941164289, 0.4996833801269531, 0.5004258837018695, 0.49286963258470806, 0.4911771161215646, 0.4919900723866054, 0.4903205633163452, 0.4762464761734009, 0.4996586697442191, 0.4824714320046561, 0.4722004788262503, 0.46505156585148405, 0.4607283728463309, 0.46023867811475483, 0.4814446483339582, 0.4634105478014265, 0.452884886945997, 0.4572483386312212, 0.4454085571425302, 0.4480081115450178, 0.4511208874838693, 0.44461134501865934, 0.451227034841265, 0.4746031420571463], "val_accuracy": [0.44600000977516174, 0.5490000247955322, 0.6496666669845581, 0.6700000166893005, 0.6943333148956299, 0.7106666564941406, 0.7260000109672546, 0.7173333168029785, 0.7523333430290222, 0.749666690826416, 0.7419999837875366, 0.7736666798591614, 0.762333333492279, 0.7593333125114441, 0.7613333463668823, 0.7856666445732117, 0.7853333353996277, 0.7710000276565552, 0.7839999794960022, 0.7903333306312561, 0.7896666526794434, 0.7893333435058594, 0.7863333225250244, 0.7889999747276306, 0.8016666769981384, 0.7739999890327454, 0.7866666913032532, 0.8006666898727417, 0.8059999942779541, 0.8023333549499512, 0.8053333163261414, 0.7929999828338623, 0.7983333468437195, 0.8086666464805603, 0.8013333082199097, 0.8176666498184204, 0.8113333582878113, 0.8149999976158142, 0.8166666626930237, 0.8096666932106018, 0.7826666831970215]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7894285917282104, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2581172237275315, 2.0617022518122186, 1.626370316010897, 1.2707025523135975, 1.0977595733566496, 0.9967999201267466, 0.951054717776105, 0.8880115565197453, 0.8509317592481156, 0.8332286955752566, 0.8053852950246532, 0.7865868846832595, 0.7753254000332219, 0.7607136733338912, 0.7437087269648742, 0.7313773558281825, 0.7085787144634371, 0.7025070445428293, 0.6940275872262273, 0.677125711521972, 0.6786882035594654, 0.6656731674384919, 0.6581891740097456, 0.6629361566409553, 0.6473783497104335, 0.6421305500221857, 0.6503174954858265, 0.6356809465341312, 0.6242094193120847, 0.6224783489402134, 0.6171610830419367, 0.6192649901976061, 0.6216118897287648, 0.600750135298434, 0.6051256364488709, 0.6019064134626246, 0.5937112456047619, 0.5942220778481646, 0.5912637559414351, 0.5835638486509231, 0.5792736801425967], "accuracy": [0.20195482671260834, 0.38581427931785583, 0.4876502454280853, 0.5641262531280518, 0.6159027814865112, 0.6431118845939636, 0.6601505875587463, 0.6819442510604858, 0.6905296444892883, 0.7013604640960693, 0.7058512568473816, 0.713379979133606, 0.7140403985977173, 0.7168141603469849, 0.733588695526123, 0.7368907928466797, 0.7408532500267029, 0.7412495017051697, 0.7469290494918823, 0.7514199018478394, 0.7514199018478394, 0.7504953145980835, 0.763967752456665, 0.754589855670929, 0.7646281719207764, 0.7630431652069092, 0.7576277852058411, 0.761590301990509, 0.7725531458854675, 0.769911527633667, 0.772288978099823, 0.7769119143486023, 0.7667415142059326, 0.774270236492157, 0.7751948237419128, 0.7751948237419128, 0.7775723338127136, 0.7841764688491821, 0.7796856164932251, 0.7814027070999146, 0.7848368883132935], "val_loss": [1.851794719696045, 1.5148977892739433, 1.0460596084594727, 0.8322511400495257, 0.7343687840870449, 0.6745742900030953, 0.6523422343390328, 0.640830431665693, 0.5848844221660069, 0.5856512614658901, 0.5776947736740112, 0.5515859297343663, 0.5514035906110492, 0.5406062262398856, 0.529693603515625, 0.5157616819654193, 0.5068689414433071, 0.5186307941164289, 0.4996833801269531, 0.5004258837018695, 0.49286963258470806, 0.4911771161215646, 0.4919900723866054, 0.4903205633163452, 0.4762464761734009, 0.4996586697442191, 0.4824714320046561, 0.4722004788262503, 0.46505156585148405, 0.4607283728463309, 0.46023867811475483, 0.4814446483339582, 0.4634105478014265, 0.452884886945997, 0.4572483386312212, 0.4454085571425302, 0.4480081115450178, 0.4511208874838693, 0.44461134501865934, 0.451227034841265, 0.4746031420571463], "val_accuracy": [0.44600000977516174, 0.5490000247955322, 0.6496666669845581, 0.6700000166893005, 0.6943333148956299, 0.7106666564941406, 0.7260000109672546, 0.7173333168029785, 0.7523333430290222, 0.749666690826416, 0.7419999837875366, 0.7736666798591614, 0.762333333492279, 0.7593333125114441, 0.7613333463668823, 0.7856666445732117, 0.7853333353996277, 0.7710000276565552, 0.7839999794960022, 0.7903333306312561, 0.7896666526794434, 0.7893333435058594, 0.7863333225250244, 0.7889999747276306, 0.8016666769981384, 0.7739999890327454, 0.7866666913032532, 0.8006666898727417, 0.8059999942779541, 0.8023333549499512, 0.8053333163261414, 0.7929999828338623, 0.7983333468437195, 0.8086666464805603, 0.8013333082199097, 0.8176666498184204, 0.8113333582878113, 0.8149999976158142, 0.8166666626930237, 0.8096666932106018, 0.7826666831970215]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 1, 8, 4, 0, 2, 6, 0, 4, 2, 2, 9, 3, 9, 6, 9, 4, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 1, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7894285917282104, "mapping_values": [1, 2, 2, 1, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2581172237275315, 2.0617022518122186, 1.626370316010897, 1.2707025523135975, 1.0977595733566496, 0.9967999201267466, 0.951054717776105, 0.8880115565197453, 0.8509317592481156, 0.8332286955752566, 0.8053852950246532, 0.7865868846832595, 0.7753254000332219, 0.7607136733338912, 0.7437087269648742, 0.7313773558281825, 0.7085787144634371, 0.7025070445428293, 0.6940275872262273, 0.677125711521972, 0.6786882035594654, 0.6656731674384919, 0.6581891740097456, 0.6629361566409553, 0.6473783497104335, 0.6421305500221857, 0.6503174954858265, 0.6356809465341312, 0.6242094193120847, 0.6224783489402134, 0.6171610830419367, 0.6192649901976061, 0.6216118897287648, 0.600750135298434, 0.6051256364488709, 0.6019064134626246, 0.5937112456047619, 0.5942220778481646, 0.5912637559414351, 0.5835638486509231, 0.5792736801425967], "accuracy": [0.20195482671260834, 0.38581427931785583, 0.4876502454280853, 0.5641262531280518, 0.6159027814865112, 0.6431118845939636, 0.6601505875587463, 0.6819442510604858, 0.6905296444892883, 0.7013604640960693, 0.7058512568473816, 0.713379979133606, 0.7140403985977173, 0.7168141603469849, 0.733588695526123, 0.7368907928466797, 0.7408532500267029, 0.7412495017051697, 0.7469290494918823, 0.7514199018478394, 0.7514199018478394, 0.7504953145980835, 0.763967752456665, 0.754589855670929, 0.7646281719207764, 0.7630431652069092, 0.7576277852058411, 0.761590301990509, 0.7725531458854675, 0.769911527633667, 0.772288978099823, 0.7769119143486023, 0.7667415142059326, 0.774270236492157, 0.7751948237419128, 0.7751948237419128, 0.7775723338127136, 0.7841764688491821, 0.7796856164932251, 0.7814027070999146, 0.7848368883132935], "val_loss": [1.851794719696045, 1.5148977892739433, 1.0460596084594727, 0.8322511400495257, 0.7343687840870449, 0.6745742900030953, 0.6523422343390328, 0.640830431665693, 0.5848844221660069, 0.5856512614658901, 0.5776947736740112, 0.5515859297343663, 0.5514035906110492, 0.5406062262398856, 0.529693603515625, 0.5157616819654193, 0.5068689414433071, 0.5186307941164289, 0.4996833801269531, 0.5004258837018695, 0.49286963258470806, 0.4911771161215646, 0.4919900723866054, 0.4903205633163452, 0.4762464761734009, 0.4996586697442191, 0.4824714320046561, 0.4722004788262503, 0.46505156585148405, 0.4607283728463309, 0.46023867811475483, 0.4814446483339582, 0.4634105478014265, 0.452884886945997, 0.4572483386312212, 0.4454085571425302, 0.4480081115450178, 0.4511208874838693, 0.44461134501865934, 0.451227034841265, 0.4746031420571463], "val_accuracy": [0.44600000977516174, 0.5490000247955322, 0.6496666669845581, 0.6700000166893005, 0.6943333148956299, 0.7106666564941406, 0.7260000109672546, 0.7173333168029785, 0.7523333430290222, 0.749666690826416, 0.7419999837875366, 0.7736666798591614, 0.762333333492279, 0.7593333125114441, 0.7613333463668823, 0.7856666445732117, 0.7853333353996277, 0.7710000276565552, 0.7839999794960022, 0.7903333306312561, 0.7896666526794434, 0.7893333435058594, 0.7863333225250244, 0.7889999747276306, 0.8016666769981384, 0.7739999890327454, 0.7866666913032532, 0.8006666898727417, 0.8059999942779541, 0.8023333549499512, 0.8053333163261414, 0.7929999828338623, 0.7983333468437195, 0.8086666464805603, 0.8013333082199097, 0.8176666498184204, 0.8113333582878113, 0.8149999976158142, 0.8166666626930237, 0.8096666932106018, 0.7826666831970215]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 1, 8, 4, 4, 2, 8, 0, 4, 9, 6, 9, 3, 9, 6, 1, 4, 0, 6, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 31, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [93, 25, 50, 71, 34]], "fitness": -0.3354285657405853, "mapping_values": [1, 33, 33, 22, 11, 5, 13, 13, 7, 6, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(grad, grad)))))), grad), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.pow(grad, tf.math.negative(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(grad, tf.math.add(beta, beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.5003270522525614, 2.2401833592499125, 2.313930271796389, 2.2993997126805894, 2.2169415274977666, 2.233190902330305, 2.304293919705507, 2.3035470120517285, 2.3038811724908035], "accuracy": [0.2005019187927246, 0.15638621151447296, 0.09668471664190292, 0.11332716792821884, 0.21080438792705536, 0.1868973672389984, 0.09985470771789551, 0.10117553919553757, 0.10117553919553757], "val_loss": [1.9736672128949846, 2.0339458329336986, 1.9733782495771135, 1.9388845307486398, 1.965235914502825, 1.97509765625, 1.9737255913870675, 1.973614011492048, 1.973796776362828], "val_accuracy": [0.10166666656732559, 0.09733333438634872, 0.09866666793823242, 0.2993333339691162, 0.179666668176651, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.2054285705089569, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 8, 4, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.506002548868, 2.253400445409565, 2.3041347621249613, 2.22221644981867, 2.2859084105148386, 2.3043477121140774, 2.302943056663581], "accuracy": [0.20116232335567474, 0.14542332291603088, 0.16774533689022064, 0.19852067530155182, 0.14330999553203583, 0.10157178342342377, 0.09972262382507324], "val_loss": [1.9748738833836146, 1.9288860729762487, 1.9599221774509974, 1.9656670434134347, 1.9747039249965124, 1.9736263411385673, 1.9734977313450404], "val_accuracy": [0.10000000149011612, 0.20399999618530273, 0.125, 0.09833333641290665, 0.09966666996479034, 0.09966666996479034, 0.1523333340883255]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 2, 4, 1, 2, 8, 0, 4, 9, 5, 1, 3, 8, 2, 3, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 72, 73, 16, 72, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 73, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [78, 25, 50, 71, 34]], "fitness": -0.2054285705089569, "mapping_values": [1, 35, 35, 23, 12, 3, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.pow(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), alpha))))))), tf.math.add(alpha, grad)), tf.math.square(tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(grad), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(grad))))))))), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), alpha), grad)))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.506002548868, 2.253400445409565, 2.3041347621249613, 2.22221644981867, 2.2859084105148386, 2.3043477121140774, 2.302943056663581], "accuracy": [0.20116232335567474, 0.14542332291603088, 0.16774533689022064, 0.19852067530155182, 0.14330999553203583, 0.10157178342342377, 0.09972262382507324], "val_loss": [1.9748738833836146, 1.9288860729762487, 1.9599221774509974, 1.9656670434134347, 1.9747039249965124, 1.9736263411385673, 1.9734977313450404], "val_accuracy": [0.10000000149011612, 0.20399999618530273, 0.125, 0.09833333641290665, 0.09966666996479034, 0.09966666996479034, 0.1523333340883255]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 1, 8, 4, 1, 2, 3, 2, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [3, 41, 73, 59, 38, 45, 53, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [7], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.11599999666213989, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 4, 1, 1, 0, 1, 1, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30177388174218, 2.3013873301508436, 2.3006675811475845, 2.3010598573670835, 2.301387283922013, 2.3013524146615993, 2.3014192815470014, 2.302118525670709, 2.3022016480362346, 2.3023959468652104, 2.302520808983378, 2.3025307383251983, 2.302560397079986, 2.3025760252903074], "accuracy": [0.0956280529499054, 0.09140139818191528, 0.09589222073554993, 0.09721305221319199, 0.09919429570436478, 0.10130762308835983, 0.10579843819141388, 0.10672302544116974, 0.10170386731624603, 0.10487385839223862, 0.10474177449941635, 0.10249637067317963, 0.10117553919553757, 0.1002509593963623], "val_loss": [1.969979967389788, 1.9702566691807337, 1.9710640907287598, 1.972012996673584, 1.9726550238473075, 1.9730384690420968, 1.9733062471662248, 1.9735022953578405, 1.9735964366367884, 1.9736317907060896, 1.9736415318080358, 1.9736427579607283, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.05999999865889549, 0.08233333379030228, 0.09700000286102295, 0.10100000351667404, 0.09933333098888397, 0.09200000017881393, 0.09600000083446503, 0.10866666585206985, 0.109333336353302, 0.10733333230018616, 0.10133333504199982, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 0, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 4, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), beta), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [164731.05580249, 3087896.5835424648, 14335278.204464404, 40546618.45515784, 85808840.92035398, 156637364.61973318], "accuracy": [0.09694888442754745, 0.09549596905708313, 0.09985470771789551, 0.09589222073554993, 0.09747721254825592, 0.09853387624025345], "val_loss": [624349.7142857143, 4963354.285714285, 16717202.285714285, 39586132.571428575, 77270272.0, 133469563.42857143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 4, 3, 6, 6, 8, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 73, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 8, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 4, 1, 1, 0, 1, 0, 3, 3, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, grad)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [14202484.963078197, 268590387.7173425, 1250059589.9088628, 3539659881.767798, 7495463390.524898, 13687720926.998283], "accuracy": [0.09681680053472519, 0.09549596905708313, 0.09985470771789551, 0.09589222073554993, 0.09747721254825592, 0.09853387624025345], "val_loss": [54126298.28571428, 432429412.5714286, 1458803382.857143, 3457138614.857143, 6751296365.714286, 11665264347.428572], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 1, 8, 4, 1, 2, 3, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 73, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [40, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [6.528586880783789, 44.14575218792211, 139.37886970629862, 324.23271852149907, 618.0742616302002, 1058.4699902930643], "accuracy": [0.09760929644107819, 0.09470347315073013, 0.09945846349000931, 0.0956280529499054, 0.09760929644107819, 0.09893012791872025], "val_loss": [13.25428581237793, 55.854666573660715, 144.07130650111608, 296.5199410574777, 534.6353062220982, 880.5638253348214], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 2, 1, 8, 8, 8, 2, 3, 0, 4, 9, 2, 0, 3, 9, 2, 9, 0, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 4, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 19, 7, 3, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.negative(grad)))))))))))), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.pow(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 9, 8, 4, 1, 2, 8, 0, 8, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 4, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 73, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 8, 4, 4, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 6, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [17, 33, 67, 36, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [62, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 13, 7, 2, 12, 12, 8, 4, 4, 3, 1, 1, 0, 0, 6, 4, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.pow(tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(alpha))))), tf.math.negative(tf.math.pow(grad, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), grad))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09470347315073013, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 2, 4, 9, 2, 8, 0, 4, 9, 3, 1, 3, 8, 2, 3, 8, 0, 8, 8, 2, 0, 2, 8, 8], [0, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 72, 90, 51, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 11, 5, 3, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(grad, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), alpha))))))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.790349012888056, 7.819102515287529, 19.511968003508436, 39.2001657169792, 66.95530490474678, 104.32455083776254], "accuracy": [0.09655263274908066, 0.09628847241401672, 0.10038304328918457, 0.09509972482919693, 0.09760929644107819, 0.09906221181154251], "val_loss": [3.215962682451521, 8.67691775730678, 18.570594787597656, 33.63251059395926, 54.746892656598774, 82.93691580636161], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 1, 8, 4, 1, 2, 3, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [3, 41, 73, 59, 38, 45, 53, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.06771428883075714, "mapping_values": [1, 30, 30, 22, 8, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.pow(tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), alpha)), tf.math.add(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.301894638185976, 2.3013299825625757, 2.3003124502970795, 2.300370850535967, 2.3011254080534456, 2.2997811862490574, 2.299516278739146, 2.3000322871472085, 2.2987825529151165, 2.2992548390528182, 2.2994812735949433, 2.2991745743092102, 2.299152706497932], "accuracy": [0.09430722147226334, 0.09549596905708313, 0.09787346422672272, 0.09628847241401672, 0.09325055778026581, 0.09430722147226334, 0.09774138033390045, 0.0948355570435524, 0.10289261490106583, 0.10130762308835983, 0.09747721254825592, 0.09430722147226334, 0.09153348207473755], "val_loss": [1.9696707044328963, 1.969306196485247, 1.9691715240478516, 1.9691598755972726, 1.969191006251744, 1.9691577638898576, 1.96906920841762, 1.96900851385934, 1.9690393720354353, 1.9690256799970354, 1.969195978982108, 1.9694164821079798, 1.969698224748884], "val_accuracy": [0.046666666865348816, 0.054999999701976776, 0.05766666680574417, 0.06199999898672104, 0.06266666948795319, 0.06533333659172058, 0.07266666740179062, 0.07333333045244217, 0.07233333587646484, 0.07133333384990692, 0.06833333522081375, 0.06700000166893005, 0.06499999761581421]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 4, 3, 9, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 0, 0, 2, 1, 3, 0, 0], [32, 44, 51, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 5, 4, 1, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3023825417640675, 2.3026524400981883, 2.3019556148633855, 2.302017359008658, 2.302925719592581, 2.3016025926206782], "accuracy": [0.09457138925790787, 0.09192973375320435, 0.0936468094587326, 0.09126931428909302, 0.08545766770839691, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 4, 8, 4, 1, 2, 4, 0, 4, 9, 2, 9, 9, 9, 6, 9, 1, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 8, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(sigma))", "other_info": {"loss": [2.3023825417640675, 2.3026524400981883, 2.3019556148633855, 2.302017359008658, 2.302925719592581, 2.3016025926206782], "accuracy": [0.09457138925790787, 0.09192973375320435, 0.0936468094587326, 0.09126931428909302, 0.08545766770839691, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 6, 9, 2, 9, 3, 9, 6, 9, 3, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 96, 99, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [31, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 31, 31, 23, 8, 5, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(alpha, grad)))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3023825417640675, 2.3026524400981883, 2.3019556148633855, 2.302017359008658, 2.302925719592581, 2.3016025926206782], "accuracy": [0.09457138925790787, 0.09192973375320435, 0.0936468094587326, 0.09126931428909302, 0.08545766770839691, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 1, 8, 4, 4, 2, 4, 0, 4, 4, 4, 9, 3, 9, 6, 0, 4, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 51, 73, 52, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3023825417640675, 2.3026524400981883, 2.3019556148633855, 2.302017359008658, 2.302925719592581, 2.3016025926206782], "accuracy": [0.09457138925790787, 0.09192973375320435, 0.0936468094587326, 0.09126931428909302, 0.08545766770839691, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]