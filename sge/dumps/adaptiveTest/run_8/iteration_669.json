[{"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.7642857432365417, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2854590668827552, 2.2426763981592543, 2.1861753545936704, 2.093663252859603, 1.9546596119038857, 1.7678687039808496, 1.5823690399690908, 1.416138834925596, 1.2991043454415732, 1.2084826750762239, 1.1404568251837923, 1.088255917139498, 1.041805390495398, 1.0119300395065312, 0.9769279730003492, 0.9474794026363355, 0.9263954318084611, 0.9088562025748004, 0.8837316281775662, 0.8757341536375289, 0.8529738578278674, 0.841123960116095, 0.8391810971527619, 0.826012888659796, 0.8151761531404705, 0.7979380388332947, 0.8027153279661361, 0.7921802105133355, 0.7742238467112194, 0.7774621487419603, 0.7747571860259125, 0.7663995207592071, 0.749934725875726, 0.7485448887650173, 0.7391527200796979, 0.7380406303475672, 0.7329496468818734, 0.7215399328649257, 0.717746509773195, 0.7238547779534078, 0.7134155936449621, 0.7022029974551611, 0.6990346280716949, 0.7036170278006793], "accuracy": [0.1348566859960556, 0.24224013090133667, 0.3123761713504791, 0.37366265058517456, 0.4278166592121124, 0.4663848876953125, 0.5005943775177002, 0.5312376022338867, 0.5585787892341614, 0.5811649560928345, 0.6012415885925293, 0.6234315037727356, 0.633469820022583, 0.6420552134513855, 0.6553955674171448, 0.6656980514526367, 0.67666095495224, 0.6778497099876404, 0.6833971738815308, 0.6892088055610657, 0.6975300312042236, 0.7024171352386475, 0.6985867023468018, 0.7004358768463135, 0.7028133869171143, 0.7165499925613403, 0.7117950320243835, 0.7172104120254517, 0.7154933214187622, 0.7207766771316528, 0.7219653725624084, 0.7186633348464966, 0.7263241410255432, 0.7271166443824768, 0.7288337349891663, 0.7312111854553223, 0.737022876739502, 0.7331924438476562, 0.7382115721702576, 0.7322678565979004, 0.7371549606323242, 0.7428345084190369, 0.739400327205658, 0.7404569983482361], "val_loss": [1.9327983175005232, 1.8864260401044572, 1.8157786641802107, 1.7020162173679896, 1.5368200710841589, 1.3371110643659319, 1.1518508366176061, 1.011599097933088, 0.910914693559919, 0.8420412881033761, 0.7856404781341553, 0.7471515110560826, 0.7159555298941476, 0.692567127091544, 0.6705970082964215, 0.6600998640060425, 0.6410116638456073, 0.6271696090698242, 0.617075903075082, 0.6056573561259678, 0.594735963003976, 0.5887728418622699, 0.580691031047276, 0.5742720195225307, 0.5683582510266986, 0.5633481400353568, 0.5598491600581578, 0.5538299424307687, 0.5504211187362671, 0.546823229108538, 0.5423930372510638, 0.536554081099374, 0.5335006713867188, 0.5314522641045707, 0.5260004486356463, 0.5214094264166695, 0.5196362563541957, 0.5177382401057652, 0.5117450271333966, 0.5114728552954537, 0.5050797973360334, 0.5065797226769584, 0.5045868498938424, 0.49864024775368826], "val_accuracy": [0.33766666054725647, 0.4233333468437195, 0.48899999260902405, 0.5503333210945129, 0.565666675567627, 0.5860000252723694, 0.6150000095367432, 0.6650000214576721, 0.6836666464805603, 0.6933333277702332, 0.703000009059906, 0.7070000171661377, 0.7149999737739563, 0.7226666808128357, 0.7243333458900452, 0.7369999885559082, 0.7406666874885559, 0.7453333139419556, 0.7486666440963745, 0.753333330154419, 0.7509999871253967, 0.753333330154419, 0.7596666812896729, 0.7646666765213013, 0.765999972820282, 0.7583333253860474, 0.768666684627533, 0.7706666588783264, 0.7683333158493042, 0.7743333578109741, 0.7733333110809326, 0.7773333191871643, 0.7730000019073486, 0.7776666879653931, 0.7826666831970215, 0.7863333225250244, 0.7776666879653931, 0.7820000052452087, 0.7883333563804626, 0.7796666622161865, 0.7866666913032532, 0.7870000004768372, 0.7866666913032532, 0.7879999876022339]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 6, 9, 3, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 4, 2, 5, 6, 4, 4, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 0, 0, 2, 1, 3, 0, 0], [87, 33, 83, 0, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.7642857432365417, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(alpha), lambda shape,  alpha, beta, grad: tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2854590668827552, 2.2426763981592543, 2.1861753545936704, 2.093663252859603, 1.9546596119038857, 1.7678687039808496, 1.5823690399690908, 1.416138834925596, 1.2991043454415732, 1.2084826750762239, 1.1404568251837923, 1.088255917139498, 1.041805390495398, 1.0119300395065312, 0.9769279730003492, 0.9474794026363355, 0.9263954318084611, 0.9088562025748004, 0.8837316281775662, 0.8757341536375289, 0.8529738578278674, 0.841123960116095, 0.8391810971527619, 0.826012888659796, 0.8151761531404705, 0.7979380388332947, 0.8027153279661361, 0.7921802105133355, 0.7742238467112194, 0.7774621487419603, 0.7747571860259125, 0.7663995207592071, 0.749934725875726, 0.7485448887650173, 0.7391527200796979, 0.7380406303475672, 0.7329496468818734, 0.7215399328649257, 0.717746509773195, 0.7238547779534078, 0.7134155936449621, 0.7022029974551611, 0.6990346280716949, 0.7036170278006793], "accuracy": [0.1348566859960556, 0.24224013090133667, 0.3123761713504791, 0.37366265058517456, 0.4278166592121124, 0.4663848876953125, 0.5005943775177002, 0.5312376022338867, 0.5585787892341614, 0.5811649560928345, 0.6012415885925293, 0.6234315037727356, 0.633469820022583, 0.6420552134513855, 0.6553955674171448, 0.6656980514526367, 0.67666095495224, 0.6778497099876404, 0.6833971738815308, 0.6892088055610657, 0.6975300312042236, 0.7024171352386475, 0.6985867023468018, 0.7004358768463135, 0.7028133869171143, 0.7165499925613403, 0.7117950320243835, 0.7172104120254517, 0.7154933214187622, 0.7207766771316528, 0.7219653725624084, 0.7186633348464966, 0.7263241410255432, 0.7271166443824768, 0.7288337349891663, 0.7312111854553223, 0.737022876739502, 0.7331924438476562, 0.7382115721702576, 0.7322678565979004, 0.7371549606323242, 0.7428345084190369, 0.739400327205658, 0.7404569983482361], "val_loss": [1.9327983175005232, 1.8864260401044572, 1.8157786641802107, 1.7020162173679896, 1.5368200710841589, 1.3371110643659319, 1.1518508366176061, 1.011599097933088, 0.910914693559919, 0.8420412881033761, 0.7856404781341553, 0.7471515110560826, 0.7159555298941476, 0.692567127091544, 0.6705970082964215, 0.6600998640060425, 0.6410116638456073, 0.6271696090698242, 0.617075903075082, 0.6056573561259678, 0.594735963003976, 0.5887728418622699, 0.580691031047276, 0.5742720195225307, 0.5683582510266986, 0.5633481400353568, 0.5598491600581578, 0.5538299424307687, 0.5504211187362671, 0.546823229108538, 0.5423930372510638, 0.536554081099374, 0.5335006713867188, 0.5314522641045707, 0.5260004486356463, 0.5214094264166695, 0.5196362563541957, 0.5177382401057652, 0.5117450271333966, 0.5114728552954537, 0.5050797973360334, 0.5065797226769584, 0.5045868498938424, 0.49864024775368826], "val_accuracy": [0.33766666054725647, 0.4233333468437195, 0.48899999260902405, 0.5503333210945129, 0.565666675567627, 0.5860000252723694, 0.6150000095367432, 0.6650000214576721, 0.6836666464805603, 0.6933333277702332, 0.703000009059906, 0.7070000171661377, 0.7149999737739563, 0.7226666808128357, 0.7243333458900452, 0.7369999885559082, 0.7406666874885559, 0.7453333139419556, 0.7486666440963745, 0.753333330154419, 0.7509999871253967, 0.753333330154419, 0.7596666812896729, 0.7646666765213013, 0.765999972820282, 0.7583333253860474, 0.768666684627533, 0.7706666588783264, 0.7683333158493042, 0.7743333578109741, 0.7733333110809326, 0.7773333191871643, 0.7730000019073486, 0.7776666879653931, 0.7826666831970215, 0.7863333225250244, 0.7776666879653931, 0.7820000052452087, 0.7883333563804626, 0.7796666622161865, 0.7866666913032532, 0.7870000004768372, 0.7866666913032532, 0.7879999876022339]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 0, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 1, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [0, 24, 83, 40, 91, 6], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.7642857432365417, "mapping_values": [1, 5, 5, 3, 2, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2854590668827552, 2.2426763981592543, 2.1861753545936704, 2.093663252859603, 1.9546596119038857, 1.7678687039808496, 1.5823690399690908, 1.416138834925596, 1.2991043454415732, 1.2084826750762239, 1.1404568251837923, 1.088255917139498, 1.041805390495398, 1.0119300395065312, 0.9769279730003492, 0.9474794026363355, 0.9263954318084611, 0.9088562025748004, 0.8837316281775662, 0.8757341536375289, 0.8529738578278674, 0.841123960116095, 0.8391810971527619, 0.826012888659796, 0.8151761531404705, 0.7979380388332947, 0.8027153279661361, 0.7921802105133355, 0.7742238467112194, 0.7774621487419603, 0.7747571860259125, 0.7663995207592071, 0.749934725875726, 0.7485448887650173, 0.7391527200796979, 0.7380406303475672, 0.7329496468818734, 0.7215399328649257, 0.717746509773195, 0.7238547779534078, 0.7134155936449621, 0.7022029974551611, 0.6990346280716949, 0.7036170278006793], "accuracy": [0.1348566859960556, 0.24224013090133667, 0.3123761713504791, 0.37366265058517456, 0.4278166592121124, 0.4663848876953125, 0.5005943775177002, 0.5312376022338867, 0.5585787892341614, 0.5811649560928345, 0.6012415885925293, 0.6234315037727356, 0.633469820022583, 0.6420552134513855, 0.6553955674171448, 0.6656980514526367, 0.67666095495224, 0.6778497099876404, 0.6833971738815308, 0.6892088055610657, 0.6975300312042236, 0.7024171352386475, 0.6985867023468018, 0.7004358768463135, 0.7028133869171143, 0.7165499925613403, 0.7117950320243835, 0.7172104120254517, 0.7154933214187622, 0.7207766771316528, 0.7219653725624084, 0.7186633348464966, 0.7263241410255432, 0.7271166443824768, 0.7288337349891663, 0.7312111854553223, 0.737022876739502, 0.7331924438476562, 0.7382115721702576, 0.7322678565979004, 0.7371549606323242, 0.7428345084190369, 0.739400327205658, 0.7404569983482361], "val_loss": [1.9327983175005232, 1.8864260401044572, 1.8157786641802107, 1.7020162173679896, 1.5368200710841589, 1.3371110643659319, 1.1518508366176061, 1.011599097933088, 0.910914693559919, 0.8420412881033761, 0.7856404781341553, 0.7471515110560826, 0.7159555298941476, 0.692567127091544, 0.6705970082964215, 0.6600998640060425, 0.6410116638456073, 0.6271696090698242, 0.617075903075082, 0.6056573561259678, 0.594735963003976, 0.5887728418622699, 0.580691031047276, 0.5742720195225307, 0.5683582510266986, 0.5633481400353568, 0.5598491600581578, 0.5538299424307687, 0.5504211187362671, 0.546823229108538, 0.5423930372510638, 0.536554081099374, 0.5335006713867188, 0.5314522641045707, 0.5260004486356463, 0.5214094264166695, 0.5196362563541957, 0.5177382401057652, 0.5117450271333966, 0.5114728552954537, 0.5050797973360334, 0.5065797226769584, 0.5045868498938424, 0.49864024775368826], "val_accuracy": [0.33766666054725647, 0.4233333468437195, 0.48899999260902405, 0.5503333210945129, 0.565666675567627, 0.5860000252723694, 0.6150000095367432, 0.6650000214576721, 0.6836666464805603, 0.6933333277702332, 0.703000009059906, 0.7070000171661377, 0.7149999737739563, 0.7226666808128357, 0.7243333458900452, 0.7369999885559082, 0.7406666874885559, 0.7453333139419556, 0.7486666440963745, 0.753333330154419, 0.7509999871253967, 0.753333330154419, 0.7596666812896729, 0.7646666765213013, 0.765999972820282, 0.7583333253860474, 0.768666684627533, 0.7706666588783264, 0.7683333158493042, 0.7743333578109741, 0.7733333110809326, 0.7773333191871643, 0.7730000019073486, 0.7776666879653931, 0.7826666831970215, 0.7863333225250244, 0.7776666879653931, 0.7820000052452087, 0.7883333563804626, 0.7796666622161865, 0.7866666913032532, 0.7870000004768372, 0.7866666913032532, 0.7879999876022339]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 6, 5, 3, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 4, 3, 2, 6, 6, 2, 1, 3, 4, 5, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [87, 45, 83, 0, 91, 78, 53], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.7642857432365417, "mapping_values": [1, 7, 7, 4, 3, 2, 23, 23, 13, 10, 7, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.pow(grad, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), tf.math.add(beta, grad))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2854590668827552, 2.2426763981592543, 2.1861753545936704, 2.093663252859603, 1.9546596119038857, 1.7678687039808496, 1.5823690399690908, 1.416138834925596, 1.2991043454415732, 1.2084826750762239, 1.1404568251837923, 1.088255917139498, 1.041805390495398, 1.0119300395065312, 0.9769279730003492, 0.9474794026363355, 0.9263954318084611, 0.9088562025748004, 0.8837316281775662, 0.8757341536375289, 0.8529738578278674, 0.841123960116095, 0.8391810971527619, 0.826012888659796, 0.8151761531404705, 0.7979380388332947, 0.8027153279661361, 0.7921802105133355, 0.7742238467112194, 0.7774621487419603, 0.7747571860259125, 0.7663995207592071, 0.749934725875726, 0.7485448887650173, 0.7391527200796979, 0.7380406303475672, 0.7329496468818734, 0.7215399328649257, 0.717746509773195, 0.7238547779534078, 0.7134155936449621, 0.7022029974551611, 0.6990346280716949, 0.7036170278006793], "accuracy": [0.1348566859960556, 0.24224013090133667, 0.3123761713504791, 0.37366265058517456, 0.4278166592121124, 0.4663848876953125, 0.5005943775177002, 0.5312376022338867, 0.5585787892341614, 0.5811649560928345, 0.6012415885925293, 0.6234315037727356, 0.633469820022583, 0.6420552134513855, 0.6553955674171448, 0.6656980514526367, 0.67666095495224, 0.6778497099876404, 0.6833971738815308, 0.6892088055610657, 0.6975300312042236, 0.7024171352386475, 0.6985867023468018, 0.7004358768463135, 0.7028133869171143, 0.7165499925613403, 0.7117950320243835, 0.7172104120254517, 0.7154933214187622, 0.7207766771316528, 0.7219653725624084, 0.7186633348464966, 0.7263241410255432, 0.7271166443824768, 0.7288337349891663, 0.7312111854553223, 0.737022876739502, 0.7331924438476562, 0.7382115721702576, 0.7322678565979004, 0.7371549606323242, 0.7428345084190369, 0.739400327205658, 0.7404569983482361], "val_loss": [1.9327983175005232, 1.8864260401044572, 1.8157786641802107, 1.7020162173679896, 1.5368200710841589, 1.3371110643659319, 1.1518508366176061, 1.011599097933088, 0.910914693559919, 0.8420412881033761, 0.7856404781341553, 0.7471515110560826, 0.7159555298941476, 0.692567127091544, 0.6705970082964215, 0.6600998640060425, 0.6410116638456073, 0.6271696090698242, 0.617075903075082, 0.6056573561259678, 0.594735963003976, 0.5887728418622699, 0.580691031047276, 0.5742720195225307, 0.5683582510266986, 0.5633481400353568, 0.5598491600581578, 0.5538299424307687, 0.5504211187362671, 0.546823229108538, 0.5423930372510638, 0.536554081099374, 0.5335006713867188, 0.5314522641045707, 0.5260004486356463, 0.5214094264166695, 0.5196362563541957, 0.5177382401057652, 0.5117450271333966, 0.5114728552954537, 0.5050797973360334, 0.5065797226769584, 0.5045868498938424, 0.49864024775368826], "val_accuracy": [0.33766666054725647, 0.4233333468437195, 0.48899999260902405, 0.5503333210945129, 0.565666675567627, 0.5860000252723694, 0.6150000095367432, 0.6650000214576721, 0.6836666464805603, 0.6933333277702332, 0.703000009059906, 0.7070000171661377, 0.7149999737739563, 0.7226666808128357, 0.7243333458900452, 0.7369999885559082, 0.7406666874885559, 0.7453333139419556, 0.7486666440963745, 0.753333330154419, 0.7509999871253967, 0.753333330154419, 0.7596666812896729, 0.7646666765213013, 0.765999972820282, 0.7583333253860474, 0.768666684627533, 0.7706666588783264, 0.7683333158493042, 0.7743333578109741, 0.7733333110809326, 0.7773333191871643, 0.7730000019073486, 0.7776666879653931, 0.7826666831970215, 0.7863333225250244, 0.7776666879653931, 0.7820000052452087, 0.7883333563804626, 0.7796666622161865, 0.7866666913032532, 0.7870000004768372, 0.7866666913032532, 0.7879999876022339]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 4, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 15, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 0, 3, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.7642857432365417, "mapping_values": [1, 10, 10, 7, 3, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.pow(tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(grad), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2854590668827552, 2.2426763981592543, 2.1861753545936704, 2.093663252859603, 1.9546596119038857, 1.7678687039808496, 1.5823690399690908, 1.416138834925596, 1.2991043454415732, 1.2084826750762239, 1.1404568251837923, 1.088255917139498, 1.041805390495398, 1.0119300395065312, 0.9769279730003492, 0.9474794026363355, 0.9263954318084611, 0.9088562025748004, 0.8837316281775662, 0.8757341536375289, 0.8529738578278674, 0.841123960116095, 0.8391810971527619, 0.826012888659796, 0.8151761531404705, 0.7979380388332947, 0.8027153279661361, 0.7921802105133355, 0.7742238467112194, 0.7774621487419603, 0.7747571860259125, 0.7663995207592071, 0.749934725875726, 0.7485448887650173, 0.7391527200796979, 0.7380406303475672, 0.7329496468818734, 0.7215399328649257, 0.717746509773195, 0.7238547779534078, 0.7134155936449621, 0.7022029974551611, 0.6990346280716949, 0.7036170278006793], "accuracy": [0.1348566859960556, 0.24224013090133667, 0.3123761713504791, 0.37366265058517456, 0.4278166592121124, 0.4663848876953125, 0.5005943775177002, 0.5312376022338867, 0.5585787892341614, 0.5811649560928345, 0.6012415885925293, 0.6234315037727356, 0.633469820022583, 0.6420552134513855, 0.6553955674171448, 0.6656980514526367, 0.67666095495224, 0.6778497099876404, 0.6833971738815308, 0.6892088055610657, 0.6975300312042236, 0.7024171352386475, 0.6985867023468018, 0.7004358768463135, 0.7028133869171143, 0.7165499925613403, 0.7117950320243835, 0.7172104120254517, 0.7154933214187622, 0.7207766771316528, 0.7219653725624084, 0.7186633348464966, 0.7263241410255432, 0.7271166443824768, 0.7288337349891663, 0.7312111854553223, 0.737022876739502, 0.7331924438476562, 0.7382115721702576, 0.7322678565979004, 0.7371549606323242, 0.7428345084190369, 0.739400327205658, 0.7404569983482361], "val_loss": [1.9327983175005232, 1.8864260401044572, 1.8157786641802107, 1.7020162173679896, 1.5368200710841589, 1.3371110643659319, 1.1518508366176061, 1.011599097933088, 0.910914693559919, 0.8420412881033761, 0.7856404781341553, 0.7471515110560826, 0.7159555298941476, 0.692567127091544, 0.6705970082964215, 0.6600998640060425, 0.6410116638456073, 0.6271696090698242, 0.617075903075082, 0.6056573561259678, 0.594735963003976, 0.5887728418622699, 0.580691031047276, 0.5742720195225307, 0.5683582510266986, 0.5633481400353568, 0.5598491600581578, 0.5538299424307687, 0.5504211187362671, 0.546823229108538, 0.5423930372510638, 0.536554081099374, 0.5335006713867188, 0.5314522641045707, 0.5260004486356463, 0.5214094264166695, 0.5196362563541957, 0.5177382401057652, 0.5117450271333966, 0.5114728552954537, 0.5050797973360334, 0.5065797226769584, 0.5045868498938424, 0.49864024775368826], "val_accuracy": [0.33766666054725647, 0.4233333468437195, 0.48899999260902405, 0.5503333210945129, 0.565666675567627, 0.5860000252723694, 0.6150000095367432, 0.6650000214576721, 0.6836666464805603, 0.6933333277702332, 0.703000009059906, 0.7070000171661377, 0.7149999737739563, 0.7226666808128357, 0.7243333458900452, 0.7369999885559082, 0.7406666874885559, 0.7453333139419556, 0.7486666440963745, 0.753333330154419, 0.7509999871253967, 0.753333330154419, 0.7596666812896729, 0.7646666765213013, 0.765999972820282, 0.7583333253860474, 0.768666684627533, 0.7706666588783264, 0.7683333158493042, 0.7743333578109741, 0.7733333110809326, 0.7773333191871643, 0.7730000019073486, 0.7776666879653931, 0.7826666831970215, 0.7863333225250244, 0.7776666879653931, 0.7820000052452087, 0.7883333563804626, 0.7796666622161865, 0.7866666913032532, 0.7870000004768372, 0.7866666913032532, 0.7879999876022339]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 5, 3, 3, 9, 2, 3, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [15, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [42, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [95, 25, 50, 71, 34]], "fitness": -0.4020000100135803, "mapping_values": [1, 10, 10, 6, 4, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.multiply(grad, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.8577990555854567, 2.303863966265028, 2.3637163632770397, 2.304406538741495, 2.303430171454383, 2.302959512363666, 2.3032588529832423], "accuracy": [0.17263241112232208, 0.12481838464736938, 0.16299036145210266, 0.09060890227556229, 0.09694888442754745, 0.10038304328918457, 0.09536388516426086], "val_loss": [1.9782941000802177, 1.9611770084926061, 1.9756003788539342, 1.9741735458374023, 1.973698547908238, 1.9736947332109724, 1.9734644889831543], "val_accuracy": [0.09833333641290665, 0.20666666328907013, 0.09833333641290665, 0.09833333641290665, 0.10400000214576721, 0.10300000011920929, 0.10400000214576721]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 6, 5, 3, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 0, 0, 2, 1, 3, 0, 0], [87, 33, 83, 0, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 5, 9, 2, 9], [1, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.square(alpha), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [536.9656371735248, 8916.3545640334, 40304.893517410186, 110596.25437731144, 233170.94864037115, 425383.26365407475], "accuracy": [0.09985470771789551, 0.09826971590518951, 0.09549596905708313, 0.10447761416435242, 0.10011887550354004, 0.09853387624025345], "val_loss": [1852.1190708705358, 13848.708984375, 45887.486607142855, 107846.42410714286, 209603.95089285713, 361040.0], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 0, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 2, 6, 0, 1, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [77, 33, 89, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [46, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 6, 5, 3, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 4, 2, 5, 6, 4, 4, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [77, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [3, 3, 5, 9, 2, 9], [0, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [42, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [1, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08255184441804886, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 3, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [98, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 4, 6, 6, 1, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 3, 2, 1, 3, 0, 0], [87, 33, 83, 0, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 24, 8, 5, 14, 14, 7, 7, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.square(grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.square(grad))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, grad), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)))), tf.math.add(beta, tf.math.divide_no_nan(grad, beta))))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 0, 1, 3, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [0, 24, 11, 3, 91, 6], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [9, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3023329584149166, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 5, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(grad))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.219636601052456e+30, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [Infinity, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 4, 3, 2, 6, 6, 0, 1, 3, 4, 3, 9, 8, 1, 1, 8, 9, 0], [0, 3, 2, 0, 0, 2, 1, 3, 0, 3], [71, 24, 83, 3, 91, 6], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [68], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 9, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [53, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 2, 21, 21, 12, 9, 5, 1, 1, 0, 1, 1, 2, 2, 0, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.square(grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.math.add(beta, beta), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [374257216.0914927, 7171917879.318452, 33417839003.709946, 92815848687.26245, 196950769917.1935, 360706567873.34406], "accuracy": [0.09879804402589798, 0.09813763201236725, 0.0952318087220192, 0.10434553027153015, 0.10011887550354004, 0.09879804402589798], "val_loss": [1420873581.7142856, 11361889426.285715, 38340774180.57143, 90874970112.0, 177482699337.14285, 306678726656.0], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 0, 1, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 3, 3, 1, 3, 0, 0], [87, 33, 83, 0, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 13, 13, 7, 6, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(grad))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08255184441804886, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 5, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 0, 1, 8, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 2, 1, 3, 0, 0], [0, 24, 83, 3, 91, 6], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [4, 1, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad), tf.math.add(alpha, tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.subtract(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 4, 5, 8, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 3, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 1, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301767719010824, 2.3015224964800387, 2.302141159060388, 2.302418100268629, 2.303652953005675, 2.3020718882443205], "accuracy": [0.09179764986038208, 0.09430722147226334, 0.08942015469074249, 0.09100515395402908, 0.08796724677085876, 0.09179764986038208], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [22, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.301767719010824, 2.3015224964800387, 2.302141159060388, 2.302418100268629, 2.303652953005675, 2.3020718882443205], "accuracy": [0.09179764986038208, 0.09430722147226334, 0.08942015469074249, 0.09100515395402908, 0.08796724677085876, 0.09179764986038208], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 3, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 3, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [52, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, alpha)), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301767719010824, 2.3015224964800387, 2.302141159060388, 2.302418100268629, 2.303652953005675, 2.3020718882443205], "accuracy": [0.09179764986038208, 0.09430722147226334, 0.08942015469074249, 0.09100515395402908, 0.08796724677085876, 0.09179764986038208], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 5, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 0, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [76, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 0, 1, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 0, 0, 0, 2, 1, 3, 0, 0], [77, 13, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 10, 10, 6, 4, 2, 17, 17, 9, 8, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), beta)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301767719010824, 2.3015224964800387, 2.302141159060388, 2.302418100268629, 2.303652953005675, 2.3020718882443205], "accuracy": [0.09179764986038208, 0.09430722147226334, 0.08942015469074249, 0.09100515395402908, 0.08796724677085876, 0.09179764986038208], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]