[{"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7797142863273621, "mapping_values": [1, 35, 35, 25, 10, 6, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.pow(tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), grad)), tf.math.add(alpha, grad)))), grad), grad)))))))))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.258459471755607, 2.063634706951167, 1.6165359128247383, 1.2645533177295554, 1.1028446783053956, 0.9985485781437339, 0.9320117186451349, 0.8851977909135623, 0.861924581783732, 0.8274265134874635, 0.798472502448571, 0.7777030403430452, 0.7638872596471538, 0.7441918320265963, 0.7365354354969499, 0.7253818061011358, 0.7061167777474247, 0.7118526818478002, 0.7047168180423249, 0.6981185277250574, 0.6810424054035846, 0.6711263254633228, 0.6587821049319282, 0.6528368044790732, 0.6529563428262568, 0.638039179127592, 0.6396776145995018, 0.6398572498828413, 0.6197143186352682, 0.6350264483439121, 0.6161591251764662, 0.6143846279594483, 0.6028517025761899, 0.5968783622593565, 0.6163006550474347], "accuracy": [0.19614318013191223, 0.3929467797279358, 0.502971887588501, 0.572579562664032, 0.6079778075218201, 0.6460176706314087, 0.6686038970947266, 0.6844538450241089, 0.6865671873092651, 0.6988508701324463, 0.7094175219535828, 0.7177387475967407, 0.7239466309547424, 0.7292299270629883, 0.7382115721702576, 0.7343811988830566, 0.7409853339195251, 0.7326641082763672, 0.7415136694908142, 0.7408532500267029, 0.7486461400985718, 0.7553823590278625, 0.7563069462776184, 0.761590301990509, 0.7559106945991516, 0.761590301990509, 0.7644960880279541, 0.7675340175628662, 0.7741381525993347, 0.7668735980987549, 0.7720248103141785, 0.7728173136711121, 0.7729493975639343, 0.7800818681716919, 0.7696473598480225], "val_loss": [1.8523889950343542, 1.5195810794830322, 1.0446233749389648, 0.8209083591188703, 0.7240427221570697, 0.6762675728116717, 0.634477070399693, 0.6252731255122593, 0.582882148878915, 0.5678133964538574, 0.572060397693089, 0.5697480269840786, 0.5337768452508109, 0.5348987749644688, 0.5276695660182408, 0.5148376056126186, 0.5206661905561175, 0.5183305059160505, 0.544075437954494, 0.4965370552880423, 0.4980153867176601, 0.4943938766207014, 0.48059862000601633, 0.4816605533872332, 0.4891045604433332, 0.47730112075805664, 0.47920143604278564, 0.47009003162384033, 0.4873122658048357, 0.45593535900115967, 0.46929224899836947, 0.45626253741128103, 0.47095392431531635, 0.4553045800754002, 0.4547278199877058], "val_accuracy": [0.4726666808128357, 0.5483333468437195, 0.6353333592414856, 0.6970000267028809, 0.7146666646003723, 0.7263333201408386, 0.7319999933242798, 0.7260000109672546, 0.7543333172798157, 0.765666663646698, 0.7383333444595337, 0.7443333268165588, 0.7806666493415833, 0.768666684627533, 0.7823333144187927, 0.7763333320617676, 0.7796666622161865, 0.7770000100135803, 0.746999979019165, 0.7946666479110718, 0.7873333096504211, 0.7893333435058594, 0.79666668176651, 0.8003333210945129, 0.777999997138977, 0.8053333163261414, 0.7919999957084656, 0.800000011920929, 0.7916666865348816, 0.809333324432373, 0.8043333292007446, 0.8083333373069763, 0.7793333530426025, 0.8016666769981384, 0.8036666512489319]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 6, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7797142863273621, "mapping_values": [1, 31, 31, 22, 9, 6, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.pow(tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)))))))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.258459471755607, 2.063634706951167, 1.6165359128247383, 1.2645533177295554, 1.1028446783053956, 0.9985485781437339, 0.9320117186451349, 0.8851977909135623, 0.861924581783732, 0.8274265134874635, 0.798472502448571, 0.7777030403430452, 0.7638872596471538, 0.7441918320265963, 0.7365354354969499, 0.7253818061011358, 0.7061167777474247, 0.7118526818478002, 0.7047168180423249, 0.6981185277250574, 0.6810424054035846, 0.6711263254633228, 0.6587821049319282, 0.6528368044790732, 0.6529563428262568, 0.638039179127592, 0.6396776145995018, 0.6398572498828413, 0.6197143186352682, 0.6350264483439121, 0.6161591251764662, 0.6143846279594483, 0.6028517025761899, 0.5968783622593565, 0.6163006550474347], "accuracy": [0.19614318013191223, 0.3929467797279358, 0.502971887588501, 0.572579562664032, 0.6079778075218201, 0.6460176706314087, 0.6686038970947266, 0.6844538450241089, 0.6865671873092651, 0.6988508701324463, 0.7094175219535828, 0.7177387475967407, 0.7239466309547424, 0.7292299270629883, 0.7382115721702576, 0.7343811988830566, 0.7409853339195251, 0.7326641082763672, 0.7415136694908142, 0.7408532500267029, 0.7486461400985718, 0.7553823590278625, 0.7563069462776184, 0.761590301990509, 0.7559106945991516, 0.761590301990509, 0.7644960880279541, 0.7675340175628662, 0.7741381525993347, 0.7668735980987549, 0.7720248103141785, 0.7728173136711121, 0.7729493975639343, 0.7800818681716919, 0.7696473598480225], "val_loss": [1.8523889950343542, 1.5195810794830322, 1.0446233749389648, 0.8209083591188703, 0.7240427221570697, 0.6762675728116717, 0.634477070399693, 0.6252731255122593, 0.582882148878915, 0.5678133964538574, 0.572060397693089, 0.5697480269840786, 0.5337768452508109, 0.5348987749644688, 0.5276695660182408, 0.5148376056126186, 0.5206661905561175, 0.5183305059160505, 0.544075437954494, 0.4965370552880423, 0.4980153867176601, 0.4943938766207014, 0.48059862000601633, 0.4816605533872332, 0.4891045604433332, 0.47730112075805664, 0.47920143604278564, 0.47009003162384033, 0.4873122658048357, 0.45593535900115967, 0.46929224899836947, 0.45626253741128103, 0.47095392431531635, 0.4553045800754002, 0.4547278199877058], "val_accuracy": [0.4726666808128357, 0.5483333468437195, 0.6353333592414856, 0.6970000267028809, 0.7146666646003723, 0.7263333201408386, 0.7319999933242798, 0.7260000109672546, 0.7543333172798157, 0.765666663646698, 0.7383333444595337, 0.7443333268165588, 0.7806666493415833, 0.768666684627533, 0.7823333144187927, 0.7763333320617676, 0.7796666622161865, 0.7770000100135803, 0.746999979019165, 0.7946666479110718, 0.7873333096504211, 0.7893333435058594, 0.79666668176651, 0.8003333210945129, 0.777999997138977, 0.8053333163261414, 0.7919999957084656, 0.800000011920929, 0.7916666865348816, 0.809333324432373, 0.8043333292007446, 0.8083333373069763, 0.7793333530426025, 0.8016666769981384, 0.8036666512489319]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 0, 5, 2, 5, 4, 5, 2, 0, 5, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 1, 9, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7797142863273621, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.258459471755607, 2.063634706951167, 1.6165359128247383, 1.2645533177295554, 1.1028446783053956, 0.9985485781437339, 0.9320117186451349, 0.8851977909135623, 0.861924581783732, 0.8274265134874635, 0.798472502448571, 0.7777030403430452, 0.7638872596471538, 0.7441918320265963, 0.7365354354969499, 0.7253818061011358, 0.7061167777474247, 0.7118526818478002, 0.7047168180423249, 0.6981185277250574, 0.6810424054035846, 0.6711263254633228, 0.6587821049319282, 0.6528368044790732, 0.6529563428262568, 0.638039179127592, 0.6396776145995018, 0.6398572498828413, 0.6197143186352682, 0.6350264483439121, 0.6161591251764662, 0.6143846279594483, 0.6028517025761899, 0.5968783622593565, 0.6163006550474347], "accuracy": [0.19614318013191223, 0.3929467797279358, 0.502971887588501, 0.572579562664032, 0.6079778075218201, 0.6460176706314087, 0.6686038970947266, 0.6844538450241089, 0.6865671873092651, 0.6988508701324463, 0.7094175219535828, 0.7177387475967407, 0.7239466309547424, 0.7292299270629883, 0.7382115721702576, 0.7343811988830566, 0.7409853339195251, 0.7326641082763672, 0.7415136694908142, 0.7408532500267029, 0.7486461400985718, 0.7553823590278625, 0.7563069462776184, 0.761590301990509, 0.7559106945991516, 0.761590301990509, 0.7644960880279541, 0.7675340175628662, 0.7741381525993347, 0.7668735980987549, 0.7720248103141785, 0.7728173136711121, 0.7729493975639343, 0.7800818681716919, 0.7696473598480225], "val_loss": [1.8523889950343542, 1.5195810794830322, 1.0446233749389648, 0.8209083591188703, 0.7240427221570697, 0.6762675728116717, 0.634477070399693, 0.6252731255122593, 0.582882148878915, 0.5678133964538574, 0.572060397693089, 0.5697480269840786, 0.5337768452508109, 0.5348987749644688, 0.5276695660182408, 0.5148376056126186, 0.5206661905561175, 0.5183305059160505, 0.544075437954494, 0.4965370552880423, 0.4980153867176601, 0.4943938766207014, 0.48059862000601633, 0.4816605533872332, 0.4891045604433332, 0.47730112075805664, 0.47920143604278564, 0.47009003162384033, 0.4873122658048357, 0.45593535900115967, 0.46929224899836947, 0.45626253741128103, 0.47095392431531635, 0.4553045800754002, 0.4547278199877058], "val_accuracy": [0.4726666808128357, 0.5483333468437195, 0.6353333592414856, 0.6970000267028809, 0.7146666646003723, 0.7263333201408386, 0.7319999933242798, 0.7260000109672546, 0.7543333172798157, 0.765666663646698, 0.7383333444595337, 0.7443333268165588, 0.7806666493415833, 0.768666684627533, 0.7823333144187927, 0.7763333320617676, 0.7796666622161865, 0.7770000100135803, 0.746999979019165, 0.7946666479110718, 0.7873333096504211, 0.7893333435058594, 0.79666668176651, 0.8003333210945129, 0.777999997138977, 0.8053333163261414, 0.7919999957084656, 0.800000011920929, 0.7916666865348816, 0.809333324432373, 0.8043333292007446, 0.8083333373069763, 0.7793333530426025, 0.8016666769981384, 0.8036666512489319]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 8, 0, 1, 1, 2, 0, 8, 4, 5, 2, 9, 8, 9, 2, 9, 8, 0, 5, 0, 2, 0, 2, 8, 8], [2, 1, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 4, 2, 6, 6, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [10, 33, 18, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.7540000081062317, "mapping_values": [1, 12, 12, 7, 5, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(grad, tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2865684773739003, 2.240017551141975, 2.1615588410561033, 2.0160849579195257, 1.8030179858034503, 1.5799905923631261, 1.3914412357835186, 1.249878928220787, 1.1720244697434257, 1.1044569561399915, 1.0451923718526142, 1.0057552053534422, 0.9804086557484543, 0.9521972268343507, 0.933037575162586, 0.9146613458112687, 0.8924213795692787, 0.8867363388339022, 0.8678154696358225, 0.8775139277983713, 0.8570555014664455, 0.8404702940526939, 0.8173151180618522, 0.8076625709772394, 0.807571728688347, 0.78657343139297, 0.7844325549582669, 0.7853734912873575, 0.7681230025804117, 0.7756922263447886, 0.7620993739405107, 0.7557912371445483, 0.7445254593934082, 0.738605895408975, 0.7651969667722395], "accuracy": [0.12970545887947083, 0.23722097277641296, 0.3229427933692932, 0.3903051018714905, 0.44062870740890503, 0.4959714710712433, 0.5248976349830627, 0.5727116465568542, 0.5855237245559692, 0.6127327680587769, 0.6357152462005615, 0.6501122713088989, 0.655527651309967, 0.6655659675598145, 0.6767930388450623, 0.6820763349533081, 0.6845859289169312, 0.6799629926681519, 0.6886804699897766, 0.6901333928108215, 0.6940959095954895, 0.6964733600616455, 0.7057191729545593, 0.713379979133606, 0.7045304179191589, 0.7131158113479614, 0.7177387475967407, 0.7187954187393188, 0.7205125093460083, 0.7166820764541626, 0.7240787148475647, 0.7288337349891663, 0.7269845604896545, 0.7300224304199219, 0.7217012047767639], "val_loss": [1.9313533646719796, 1.8750261579241072, 1.7657534054347448, 1.5660560812268938, 1.3201109341212682, 1.0835603986467635, 0.9144768714904785, 0.8150314433234078, 0.7581763437816075, 0.7202769858496529, 0.6975897039685931, 0.6720447199685233, 0.654264075415475, 0.6379463502338955, 0.6339952094214303, 0.6093546152114868, 0.6067152193614415, 0.5970559631075177, 0.5944634505680629, 0.5782932383673531, 0.5763882058007377, 0.5637908663068499, 0.5609556436538696, 0.5536189590181623, 0.5557168040956769, 0.5466247626713344, 0.5445630550384521, 0.5351679836000715, 0.5398856401443481, 0.5265354599271502, 0.5305509226662772, 0.5279205356325422, 0.5202187980924334, 0.5243134157998222, 0.518060428755624], "val_accuracy": [0.3316666781902313, 0.43066665530204773, 0.5093333125114441, 0.5879999995231628, 0.5950000286102295, 0.6276666522026062, 0.6620000004768372, 0.6976666450500488, 0.6996666789054871, 0.7116666436195374, 0.7146666646003723, 0.721666693687439, 0.7286666631698608, 0.7353333234786987, 0.7306666374206543, 0.7513333559036255, 0.75, 0.7516666650772095, 0.7426666617393494, 0.7593333125114441, 0.7580000162124634, 0.7606666684150696, 0.7633333206176758, 0.768666684627533, 0.7596666812896729, 0.7710000276565552, 0.7666666507720947, 0.7726666927337646, 0.7703333497047424, 0.7833333611488342, 0.7706666588783264, 0.7699999809265137, 0.768666684627533, 0.7646666765213013, 0.7666666507720947]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 6, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 17, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [78, 25, 50, 71, 34]], "fitness": -0.5048571228981018, "mapping_values": [1, 7, 7, 5, 2, 1, 12, 12, 8, 4, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.7991482117204085, 2.5346617936111793, 2.180816897500728, 2.3268972586300616, 2.105494130682778, 1.9791590375608032, 1.8835723669364264, 2.2588731460347073, 1.9477165087638293, 1.7247222849816033], "accuracy": [0.17699114978313446, 0.1364416927099228, 0.20459648966789246, 0.1484612375497818, 0.2810725271701813, 0.35543522238731384, 0.38924846053123474, 0.2525425851345062, 0.3143574297428131, 0.45383700728416443], "val_loss": [1.7546123777117049, 1.9695909363882882, 1.9771436963762556, 1.8911963190351213, 1.454206909452166, 1.7729144096374512, 1.7723183291299003, 1.9653333936418806, 1.2683680398123605, 1.4629974365234375], "val_accuracy": [0.27000001072883606, 0.1523333340883255, 0.33399999141693115, 0.23399999737739563, 0.5086666941642761, 0.2633333206176758, 0.48899999260902405, 0.12033333629369736, 0.5056666731834412, 0.468666672706604]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 4, 2, 2, 0, 9, 2, 0, 9, 0, 5, 1, 9, 8, 9, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 1, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 94, 94, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 63, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.2588571310043335, "mapping_values": [1, 20, 20, 17, 3, 5, 11, 11, 7, 4, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.math.square(grad))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.065420417832251, 2.265153796114485, 2.233245492028743, 2.2760728343980756, 2.297930080688168, 2.3522210062896383], "accuracy": [0.19152027368545532, 0.15321621298789978, 0.16933034360408783, 0.13049794733524323, 0.12891295552253723, 0.17976489663124084], "val_loss": [1.6423241070338659, 1.9635141236441476, 1.9750663893563407, 1.9745240892682756, 1.9288834844316756, 1.8798156465802873], "val_accuracy": [0.2939999997615814, 0.1223333328962326, 0.10233332961797714, 0.0976666659116745, 0.2926666736602783, 0.265666663646698]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 9, 8, 4, 1, 5, 9, 8, 3, 9, 5, 9, 3, 4, 6, 3, 5, 0, 8, 3, 2, 0, 2, 8, 8], [2, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [13, 65, 94, 94, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 0, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.2588571310043335, "mapping_values": [1, 10, 10, 8, 2, 2, 11, 11, 8, 3, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.065420417832251, 2.265153796114485, 2.233245492028743, 2.2760728343980756, 2.297930080688168, 2.3522210062896383], "accuracy": [0.19152027368545532, 0.15321621298789978, 0.16933034360408783, 0.13049794733524323, 0.12891295552253723, 0.17976489663124084], "val_loss": [1.6423241070338659, 1.9635141236441476, 1.9750663893563407, 1.9745240892682756, 1.9288834844316756, 1.8798156465802873], "val_accuracy": [0.2939999997615814, 0.1223333328962326, 0.10233332961797714, 0.0976666659116745, 0.2926666736602783, 0.265666663646698]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 6, 8, 2, 5, 0, 0, 3, 9, 5, 9, 0, 4, 6, 3, 5, 6, 8, 3, 2, 0, 2, 8, 8], [2, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 94, 94, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 0, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 73, 83, 0, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.2588571310043335, "mapping_values": [1, 24, 24, 17, 7, 2, 12, 12, 8, 4, 4, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))), tf.math.negative(tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.065420417832251, 2.265153796114485, 2.233245492028743, 2.2760728343980756, 2.297930080688168, 2.3522210062896383], "accuracy": [0.19152027368545532, 0.15321621298789978, 0.16933034360408783, 0.13049794733524323, 0.12891295552253723, 0.17976489663124084], "val_loss": [1.6423241070338659, 1.9635141236441476, 1.9750663893563407, 1.9745240892682756, 1.9288834844316756, 1.8798156465802873], "val_accuracy": [0.2939999997615814, 0.1223333328962326, 0.10233332961797714, 0.0976666659116745, 0.2926666736602783, 0.265666663646698]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 2, 9, 4, 9, 2, 3, 4, 9, 5, 8, 9, 1, 3, 3, 8, 9, 3, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 93, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 1, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 3, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), grad), tf.math.pow(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302762686631557, 2.3030238296094114, 2.303072562763767, 2.303024721057455, 2.302979900757902, 2.303059501954042, 2.3029234846112847], "accuracy": [0.09417514503002167, 0.09602430462837219, 0.09879804402589798, 0.09206181764602661, 0.09166556596755981, 0.09087307006120682, 0.09800554811954498], "val_loss": [1.9736343792506628, 1.9737394196646554, 1.9737755230494909, 1.9736922809055872, 1.9737295423235213, 1.9737183707101005, 1.9736709594726562], "val_accuracy": [0.09700000286102295, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 5, 2, 9, 4, 5, 2, 1, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 8, 4, 1, 11, 11, 8, 3, 2, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 1, 1, 2, 8, 8, 4, 5, 2, 9, 9, 9, 0, 9, 8, 0, 5, 0, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 0, 0, 2, 1, 3, 0, 0], [71, 33, 96, 17, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 14, 6, 2, 12, 12, 8, 4, 3, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.pow(tf.math.square(tf.math.add(alpha, alpha)), grad)))), tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), grad)))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 4, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 6, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 25, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [420.6207801435665, 2.335541453580059, 2.3131184829555216, 2.305542358680093, 2.3034872626112026, 2.3031727464333533, 154886195483.33426], "accuracy": [0.10302469879388809, 0.09708096832036972, 0.09734513610601425, 0.09245806187391281, 0.09470347315073013, 0.09232597798109055, 0.09760929644107819], "val_loss": [2.018784863608224, 1.9892271586826868, 1.978407723563058, 1.9748427527291434, 1.9740924154009138, 1.9738469805036272, 1.9901274953569685], "val_accuracy": [0.09700000286102295, 0.10400000214576721, 0.10400000214576721, 0.09700000286102295, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 5, 0, 8, 2, 9, 5, 9, 3, 4, 6, 3, 5, 0, 8, 3, 2, 0, 2, 8, 8], [2, 1, 2, 2, 1, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [42, 13, 73, 52, 8, 79, 86, 52, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 8, 3, 2, 3, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 13, 4, 2, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.negative(alpha)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))))))), grad)))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30239861720998, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 1, 8, 4, 1, 9, 2, 0, 4, 9, 2, 9, 3, 9, 6, 9, 9, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 3, 2, 9, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [18, 33, 57, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [80, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 2, 7, 7, 5, 2, 2, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1255967513.1830916, 24427913217.623035, 111131180781.16603, 308446166581.22205, 663896724856.6794, 1226662096813.225], "accuracy": [0.10249637067317963, 0.10328886657953262, 0.10566636174917221, 0.1018359512090683, 0.09681680053472519, 0.10091137140989304], "val_loss": [4798334098.285714, 38375489536.0, 129504238445.71428, 306957713408.0, 599506195017.1428, 1035946276571.4286], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 8, 2, 5, 0, 0, 3, 9, 5, 9, 0, 4, 6, 3, 5, 6, 8, 3, 2, 0, 2, 8, 8], [2, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 94, 94, 8, 79, 86, 52, 44], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.09971428662538528, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, beta)", "other_info": {"loss": [259841923856.4952, 1807448418209.0525, 2628287131545.7485, 3171191047029.095, 3516315925168.9785, 3975962211610.5435], "accuracy": [0.10038304328918457, 0.10553427785634995, 0.10236428678035736, 0.10619468986988068, 0.10157178342342377, 0.1002509593963623], "val_loss": [798625590710.8572, 1482806188909.7144, 1924052100242.2856, 2250015731126.857, 2508229143990.857, 2727833089755.4287], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 2, 2, 8, 0, 4, 9, 2, 8, 3, 9, 6, 9, 5, 0, 6, 8, 2, 0, 2, 8, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [42, 13, 73, 97, 8, 79, 86, 52, 44], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 3, 2, 3, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 0, 0, 0, 2, 1, 3, 0, 0], [18, 33, 57, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 32, 32, 23, 9, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))))))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), grad)))))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3028378898850868, 2.3034912566813683, 2.3013633409464096, 2.302319731584488, 2.3037419296479293, 2.3025972708073654], "accuracy": [0.09008057415485382, 0.09074098616838455, 0.09694888442754745, 0.09219389408826828, 0.08387266844511032, 0.09787346422672272], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 3, 8, 9, 5, 0, 0, 3, 9, 5, 9, 0, 4, 6, 3, 5, 6, 8, 3, 2, 0, 2, 8, 8], [2, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [16, 33, 83, 36, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 10, 10, 7, 3, 1, 11, 11, 8, 3, 4, 1, 0, 0, 0, 0, 6, 4, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3028378898850868, 2.3034912566813683, 2.3013633409464096, 2.302319731584488, 2.3037419296479293, 2.3025972708073654], "accuracy": [0.09008057415485382, 0.09074098616838455, 0.09694888442754745, 0.09219389408826828, 0.08387266844511032, 0.09787346422672272], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 2, 9, 4, 5, 2, 0, 2, 9, 5, 1, 9, 1, 6, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 1, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 4, 59, 6, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 35, 35, 25, 10, 7, 3, 3, 2, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(tf.math.negative(grad), tf.math.add(alpha, tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.square(grad))))))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), grad))))))))), grad)))))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3028378898850868, 2.3034912566813683, 2.3013633409464096, 2.302319731584488, 2.3037419296479293, 2.3025972708073654], "accuracy": [0.09008057415485382, 0.09074098616838455, 0.09694888442754745, 0.09219389408826828, 0.08387266844511032, 0.09787346422672272], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [7, 6, 1, 8, 4, 1, 5, 0, 8, 3, 9, 5, 9, 3, 4, 6, 3, 5, 0, 8, 3, 2, 0, 2, 8, 8], [2, 1, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 70, 59, 94, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [9, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 17, 17, 11, 6, 2, 3, 3, 2, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.pow(tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad))))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, beta), beta)", "other_info": {"loss": [2.3028378898850868, 2.3034912566813683, 2.3013633409464096, 2.302319731584488, 2.3037419296479293, 2.3025972708073654], "accuracy": [0.09008057415485382, 0.09074098616838455, 0.09694888442754745, 0.09219389408826828, 0.08387266844511032, 0.09787346422672272], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 1, 8, 4, 1, 9, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 9, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 41, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03885714337229729, "mapping_values": [1, 15, 15, 11, 4, 2, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), grad)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302967120564735, 2.3041973402156586, 2.30236580072377, 2.303833566305896, 2.3058644878141568, 2.305167848376424], "accuracy": [0.08981640636920929, 0.08968432247638702, 0.09536388516426086, 0.08915598690509796, 0.08215559273958206, 0.09259014576673508], "val_loss": [1.9709153175354004, 1.9713999884469169, 1.971702711922782, 1.9720982824053084, 1.9725478036063058, 1.9730546133858817], "val_accuracy": [0.038333334028720856, 0.035999998450279236, 0.03333333507180214, 0.03033333271741867, 0.029666665941476822, 0.03033333271741867]}}]