[{"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 3, 9, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [0, 4, 3, 3, 0, 3, 1, 0, 0, 0], [51, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.8202857375144958, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.156477689743042, 2.076517105102539, 2.03501558303833, 1.9382116794586182, 1.3697378635406494, 1.0578755140304565, 0.8526437282562256, 0.8026007413864136, 0.7252934575080872, 0.7073885202407837, 0.6743452548980713, 0.6280996799468994, 0.6261505484580994, 0.6064805388450623, 0.5611230731010437, 0.5712860226631165, 0.5467449426651001, 0.5783025622367859, 0.5370356440544128, 0.5130897760391235, 0.506496012210846, 0.500135064125061, 0.503727912902832, 0.491548627614975, 0.4786333441734314, 0.4827512800693512, 0.47858718037605286, 0.46303972601890564, 0.4595249891281128, 0.43947428464889526, 0.4723152816295624, 0.4400186836719513, 0.4493921101093292, 0.4209307134151459, 0.4180484712123871, 0.41131654381752014, 0.4052734375, 0.42954906821250916, 0.39874711632728577, 0.38413530588150024, 0.38391587138175964], "accuracy": [0.26178839802742004, 0.26535463333129883, 0.3397173285484314, 0.3605864346027374, 0.5197464227676392, 0.6120724081993103, 0.6816800832748413, 0.7014925479888916, 0.7268524765968323, 0.7360982894897461, 0.7456082701683044, 0.767401933670044, 0.7707040309906006, 0.7688548564910889, 0.7948752045631409, 0.7927618622779846, 0.7972526550292969, 0.7865539789199829, 0.8004226684570312, 0.8059701323509216, 0.8088759779930115, 0.8084797263145447, 0.8090080618858337, 0.8189142942428589, 0.8189142942428589, 0.8216879963874817, 0.8214238286018372, 0.8294808864593506, 0.8269713521003723, 0.8359529972076416, 0.8280280232429504, 0.833179235458374, 0.8308017253875732, 0.8383304476737976, 0.845859169960022, 0.8445383906364441, 0.8488970994949341, 0.837537944316864, 0.8487650156021118, 0.8544445633888245, 0.8568220734596252], "val_loss": [2.2342958450317383, 1.885064721107483, 1.6824274063110352, 1.4515351057052612, 1.078551173210144, 0.7536229491233826, 0.6880072355270386, 0.6583806276321411, 0.62375408411026, 0.6100186109542847, 0.6272827982902527, 0.531459629535675, 0.5403628945350647, 0.5575253367424011, 0.5180491209030151, 0.5429933071136475, 0.4865938723087311, 0.5312255620956421, 0.506524384021759, 0.4665241837501526, 0.46271204948425293, 0.5184671878814697, 0.5347436666488647, 0.46421167254447937, 0.5073732733726501, 0.4362790882587433, 0.43506306409835815, 0.43775758147239685, 0.46388939023017883, 0.44807711243629456, 0.4285019636154175, 0.44723808765411377, 0.42513859272003174, 0.42180192470550537, 0.41925671696662903, 0.39927536249160767, 0.4801337420940399, 0.4384143054485321, 0.38762372732162476, 0.41163769364356995, 0.40165579319000244], "val_accuracy": [0.2226666659116745, 0.36899998784065247, 0.4000000059604645, 0.4673333466053009, 0.5796666741371155, 0.70333331823349, 0.7250000238418579, 0.7400000095367432, 0.7573333382606506, 0.7580000162124634, 0.7450000047683716, 0.7900000214576721, 0.7929999828338623, 0.7716666460037231, 0.8009999990463257, 0.7839999794960022, 0.8159999847412109, 0.7950000166893005, 0.7990000247955322, 0.8203333616256714, 0.8270000219345093, 0.7833333611488342, 0.7670000195503235, 0.8119999766349792, 0.8076666593551636, 0.8389999866485596, 0.843666672706604, 0.8373333215713501, 0.82833331823349, 0.8349999785423279, 0.8446666598320007, 0.828000009059906, 0.8433333039283752, 0.8433333039283752, 0.8450000286102295, 0.8576666712760925, 0.8149999976158142, 0.8366666436195374, 0.8546666502952576, 0.8460000157356262, 0.8489999771118164]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 5, 8, 8, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 1, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.8074285984039307, "mapping_values": [1, 10, 10, 7, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(grad, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.add(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.156470775604248, 2.067924976348877, 1.7903839349746704, 1.2053200006484985, 1.2684569358825684, 0.9554197192192078, 0.8168739676475525, 0.7075430750846863, 0.6893270015716553, 0.6291833519935608, 0.6391389966011047, 0.5862061977386475, 0.5773497223854065, 0.573013961315155, 0.5443747639656067, 0.5373184680938721, 0.5194467902183533, 0.5183543562889099, 0.5109877586364746, 0.4776988923549652, 0.48967891931533813, 0.47560644149780273, 0.4764232635498047, 0.46249040961265564, 0.4436216950416565, 0.4467557370662689, 0.4365108013153076, 0.41838809847831726, 0.4506934583187103, 0.4249418079853058, 0.4196859300136566, 0.4263102412223816], "accuracy": [0.26178839802742004, 0.2658829689025879, 0.36481308937072754, 0.5489367246627808, 0.5782591700553894, 0.6608110070228577, 0.7014925479888916, 0.7296261787414551, 0.7360982894897461, 0.761590301990509, 0.7585523724555969, 0.7803460359573364, 0.7783648371696472, 0.7788931727409363, 0.7957997918128967, 0.802271842956543, 0.8067626357078552, 0.8021397590637207, 0.8074230551719666, 0.8230088353157043, 0.8186501264572144, 0.8187822103500366, 0.8211596608161926, 0.8264430165290833, 0.8378021121025085, 0.828292191028595, 0.835160493850708, 0.8417646288871765, 0.8284242749214172, 0.8445383906364441, 0.8436138033866882, 0.8416325449943542], "val_loss": [2.2340540885925293, 1.9223802089691162, 1.258166790008545, 1.1483244895935059, 0.8568447232246399, 0.7520022988319397, 0.6389654278755188, 0.6516892313957214, 0.6038035750389099, 0.5927910804748535, 0.5718215107917786, 0.5396608114242554, 0.5284361243247986, 0.5228239297866821, 0.49811577796936035, 0.5259694457054138, 0.49840471148490906, 0.5059670209884644, 0.4642442762851715, 0.4912540018558502, 0.4509768486022949, 0.4730219841003418, 0.49287813901901245, 0.4463098645210266, 0.4480428099632263, 0.47193264961242676, 0.41027969121932983, 0.4166104793548584, 0.43920329213142395, 0.4241401255130768, 0.40102288126945496, 0.4211394190788269], "val_accuracy": [0.2226666659116745, 0.3543333411216736, 0.5246666669845581, 0.5823333263397217, 0.6890000104904175, 0.7123333215713501, 0.7446666955947876, 0.7436666488647461, 0.7633333206176758, 0.7620000243186951, 0.7696666717529297, 0.7853333353996277, 0.7886666655540466, 0.7996666431427002, 0.8033333420753479, 0.7900000214576721, 0.7960000038146973, 0.8046666383743286, 0.8193333148956299, 0.7963333129882812, 0.8323333263397217, 0.8066666722297668, 0.8106666803359985, 0.8289999961853027, 0.8330000042915344, 0.8103333115577698, 0.8560000061988831, 0.8479999899864197, 0.8356666564941406, 0.8510000109672546, 0.8553333282470703, 0.8420000076293945]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 2, 8, 2, 9, 2, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [49, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [2, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.8031428456306458, "mapping_values": [1, 12, 12, 8, 4, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), alpha)), tf.math.add(alpha, tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1564717292785645, 2.0735726356506348, 1.9896489381790161, 1.4344252347946167, 1.078328013420105, 0.8149077296257019, 0.7670557498931885, 0.6848501563072205, 0.6671508550643921, 0.6333692669868469, 0.6339118480682373, 0.6058595180511475, 0.5692015290260315, 0.5556594729423523, 0.534761369228363, 0.5261759757995605, 0.5519781708717346, 0.5429341793060303, 0.5069980621337891, 0.5079281330108643, 0.4859975576400757, 0.4924079179763794, 0.45746833086013794, 0.46666955947875977, 0.43035581707954407, 0.453096866607666, 0.4454236626625061, 0.4451163709163666, 0.42241230607032776, 0.43132472038269043, 0.4090835452079773, 0.42664259672164917, 0.41080141067504883], "accuracy": [0.2619204819202423, 0.2681283950805664, 0.3827763795852661, 0.4831594228744507, 0.618280291557312, 0.6896050572395325, 0.7168141603469849, 0.7382115721702576, 0.7469290494918823, 0.759080708026886, 0.7670056819915771, 0.7724210619926453, 0.7848368883132935, 0.7930260300636292, 0.8033285140991211, 0.8050455451011658, 0.7924976944923401, 0.7993659973144531, 0.8087438941001892, 0.8149517774581909, 0.8206313848495483, 0.8083476424217224, 0.8297450542449951, 0.8285563588142395, 0.8436138033866882, 0.8265751004219055, 0.8347642421722412, 0.8335754871368408, 0.8409721255302429, 0.8347642421722412, 0.8491612672805786, 0.8381983637809753, 0.8499537706375122], "val_loss": [2.23402738571167, 1.8609833717346191, 1.559109091758728, 1.272801399230957, 0.7355979084968567, 0.7370632886886597, 0.6496307849884033, 0.6509240865707397, 0.6043568253517151, 0.6868066191673279, 0.6254475116729736, 0.5034046173095703, 0.5408951044082642, 0.5188432335853577, 0.5412350296974182, 0.5064048767089844, 0.47594135999679565, 0.4787953197956085, 0.4959845244884491, 0.4672573208808899, 0.4846070110797882, 0.45210447907447815, 0.4831870198249817, 0.4577794671058655, 0.43771448731422424, 0.4451473355293274, 0.42445582151412964, 0.41396084427833557, 0.4310167729854584, 0.4722305238246918, 0.45909252762794495, 0.41833147406578064, 0.42106419801712036], "val_accuracy": [0.22300000488758087, 0.37033334374427795, 0.44200000166893005, 0.5636666417121887, 0.7166666388511658, 0.7223333120346069, 0.7396666407585144, 0.7390000224113464, 0.7616666555404663, 0.7580000162124634, 0.7443333268165588, 0.8069999814033508, 0.7753333449363708, 0.8046666383743286, 0.7863333225250244, 0.812666654586792, 0.8199999928474426, 0.8140000104904175, 0.7946666479110718, 0.8166666626930237, 0.8100000023841858, 0.8233333230018616, 0.8059999942779541, 0.8273333311080933, 0.8309999704360962, 0.8299999833106995, 0.8450000286102295, 0.8460000157356262, 0.8433333039283752, 0.8213333487510681, 0.8216666579246521, 0.8420000076293945, 0.8333333134651184]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 3, 9, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [49, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [2, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.7879999876022339, "mapping_values": [1, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.272129535675049, 2.1550838947296143, 2.1178901195526123, 1.7705813646316528, 1.1170614957809448, 0.8407544493675232, 0.7649410367012024, 0.7056109309196472, 0.6719009280204773, 0.6144108772277832, 0.6275612711906433, 0.5897845029830933, 0.5970380306243896, 0.5846917629241943, 0.5466926693916321, 0.5425490140914917, 0.5063766241073608, 0.5248030424118042, 0.5139754414558411, 0.4989379942417145, 0.482477605342865, 0.47956782579421997, 0.4752902686595917, 0.4361645579338074, 0.4783324599266052, 0.4680171310901642], "accuracy": [0.24924051761627197, 0.26561880111694336, 0.2996962070465088, 0.42002376914024353, 0.6111478209495544, 0.6837934255599976, 0.7116629481315613, 0.7272487282752991, 0.7466648817062378, 0.7652885913848877, 0.7607977986335754, 0.7677981853485107, 0.7816668748855591, 0.776251494884491, 0.787082314491272, 0.7938185334205627, 0.8109893202781677, 0.7991018295288086, 0.8026680946350098, 0.8072909712791443, 0.8175934553146362, 0.8210275769233704, 0.8181217908859253, 0.8335754871368408, 0.8175934553146362, 0.8195747137069702], "val_loss": [1.8846747875213623, 2.255082130432129, 1.8453065156936646, 1.2386189699172974, 0.8139873147010803, 0.774793803691864, 0.6984155178070068, 0.6061019897460938, 0.6022111177444458, 0.5881911516189575, 0.5853174924850464, 0.6673614978790283, 0.5421869158744812, 0.5329546332359314, 0.6079654693603516, 0.5051963925361633, 0.4978371858596802, 0.5367111563682556, 0.46445339918136597, 0.47157707810401917, 0.4469392001628876, 0.5322431921958923, 0.4558502733707428, 0.46414169669151306, 0.4867153763771057, 0.4811219871044159], "val_accuracy": [0.31200000643730164, 0.3356666564941406, 0.46533334255218506, 0.609333336353302, 0.6773333549499512, 0.7003333568572998, 0.7139999866485596, 0.7683333158493042, 0.7506666779518127, 0.7680000066757202, 0.7646666765213013, 0.7416666746139526, 0.7963333129882812, 0.7853333353996277, 0.7699999809265137, 0.8103333115577698, 0.8096666932106018, 0.8003333210945129, 0.8230000138282776, 0.8159999847412109, 0.8296666741371155, 0.7946666479110718, 0.8256666660308838, 0.8216666579246521, 0.812333345413208, 0.8109999895095825]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [35, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.7691428661346436, "mapping_values": [1, 12, 12, 8, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.157780885696411, 1.7062880992889404, 1.3461397886276245, 1.1519453525543213, 0.9403725862503052, 0.8824103474617004, 0.8038586974143982, 0.7817559242248535, 0.720041811466217, 0.7030443549156189, 0.6632006764411926, 0.6195980906486511, 0.609544575214386, 0.6149137020111084, 0.5869060158729553, 0.567401647567749], "accuracy": [0.292959988117218, 0.47351735830307007, 0.5268788933753967, 0.5840708017349243, 0.6481310129165649, 0.6631884574890137, 0.6905296444892883, 0.7059833407402039, 0.7275128960609436, 0.7300224304199219, 0.743891179561615, 0.7635715007781982, 0.7663452625274658, 0.7619865536689758, 0.7777044177055359, 0.7823272943496704], "val_loss": [1.7234010696411133, 1.0145829916000366, 1.0559910535812378, 0.9310269355773926, 0.9279250502586365, 0.7080868482589722, 0.6533642411231995, 0.6273015141487122, 0.6199820041656494, 0.6908330321311951, 0.5764674544334412, 0.5725213885307312, 0.5375821590423584, 0.5581811666488647, 0.5476544499397278, 0.5472529530525208], "val_accuracy": [0.4830000102519989, 0.6476666927337646, 0.5753333568572998, 0.6156666874885559, 0.6426666378974915, 0.7236666679382324, 0.7483333349227905, 0.7493333220481873, 0.7393333315849304, 0.7260000109672546, 0.7906666398048401, 0.7713333368301392, 0.7860000133514404, 0.7760000228881836, 0.7876666784286499, 0.7846666574478149]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 8, 9, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 1, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 0, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [8, 9, 43, 71, 34]], "fitness": -0.3488571345806122, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302445411682129, 2.30100154876709, 2.3018569946289062, 2.300572633743286, 2.300734281539917, 2.300767660140991, 2.3005659580230713, 2.2991960048675537, 2.298147678375244, 2.298489570617676, 2.2970120906829834, 2.2972545623779297, 2.296393632888794, 2.2967870235443115, 2.295006036758423, 2.2951159477233887, 2.2948713302612305, 2.2943005561828613, 2.2941837310791016, 2.2917768955230713, 2.292634963989258, 2.294079065322876, 2.2927350997924805, 2.2930808067321777, 2.2900896072387695, 2.2907755374908447, 2.289759874343872, 2.2895660400390625, 2.2894434928894043, 2.2901017665863037, 2.288167953491211, 2.286968946456909, 2.287320852279663, 2.2868564128875732, 2.286656141281128, 2.2857589721679688, 2.28590726852417, 2.2840874195098877, 2.2827870845794678, 2.28399395942688, 2.283360004425049, 2.2815163135528564, 2.280918598175049, 2.282933473587036, 2.284555196762085, 2.2813029289245605, 2.279827117919922, 2.282038927078247, 2.280367374420166, 2.2791950702667236, 2.27992582321167, 2.2779550552368164, 2.278327465057373, 2.2789456844329834, 2.276834487915039, 2.278156042098999, 2.2757019996643066, 2.275390386581421, 2.2758054733276367, 2.2736921310424805, 2.2739129066467285, 2.2736942768096924, 2.274451971054077, 2.2709083557128906, 2.272512435913086, 2.271001100540161, 2.2712340354919434, 2.270616292953491, 2.2699878215789795, 2.2709641456604004, 2.2687346935272217, 2.268162965774536, 2.2683026790618896, 2.2696855068206787, 2.2655234336853027, 2.266267776489258, 2.2673277854919434, 2.2676706314086914, 2.2662723064422607, 2.264885663986206, 2.264763116836548, 2.26369047164917, 2.2650535106658936, 2.262784242630005, 2.2625958919525146, 2.2605175971984863, 2.2624576091766357, 2.2599265575408936, 2.2598602771759033, 2.2589457035064697, 2.2577075958251953, 2.25966215133667, 2.2567379474639893, 2.256100654602051, 2.25797700881958, 2.257680654525757, 2.25703501701355, 2.255152940750122, 2.254793882369995, 2.254190683364868], "accuracy": [0.08875974267721176, 0.09245806187391281, 0.09166556596755981, 0.09589222073554993, 0.09642054885625839, 0.09602430462837219, 0.09694888442754745, 0.09893012791872025, 0.10434553027153015, 0.09496764093637466, 0.10236428678035736, 0.10038304328918457, 0.10091137140989304, 0.10460969805717468, 0.10355303436517715, 0.11161009222269058, 0.109232597053051, 0.11240258812904358, 0.10976093262434006, 0.1150442510843277, 0.11702549457550049, 0.11174217611551285, 0.11372341960668564, 0.11636507511138916, 0.11861048638820648, 0.12336547672748566, 0.12442214041948318, 0.11861048638820648, 0.1262712925672531, 0.12310130894184113, 0.12296922504901886, 0.13353586196899414, 0.1310262829065323, 0.13261127471923828, 0.12930920720100403, 0.1348566859960556, 0.1278562992811203, 0.13393211364746094, 0.1422533392906189, 0.14000792801380157, 0.1426495909690857, 0.14714039862155914, 0.14330999553203583, 0.1364416927099228, 0.13340377807617188, 0.1434420794248581, 0.14819706976413727, 0.14476291835308075, 0.14568749070167542, 0.15057456493377686, 0.1472724825143814, 0.15453705191612244, 0.15110288560390472, 0.15136705338954926, 0.15876370668411255, 0.1550653874874115, 0.16140536963939667, 0.15942411124706268, 0.16338661313056946, 0.1674811840057373, 0.16232994198799133, 0.16721701622009277, 0.16312244534492493, 0.17395325005054474, 0.16840575635433197, 0.1702549159526825, 0.17012283205986023, 0.1728965789079666, 0.1795007288455963, 0.175670325756073, 0.17434948682785034, 0.17897239327430725, 0.17778365314006805, 0.17580240964889526, 0.189274862408638, 0.18597279489040375, 0.17884030938148499, 0.18372738361358643, 0.1868973672389984, 0.18702945113182068, 0.18901069462299347, 0.19574692845344543, 0.18663319945335388, 0.19931316375732422, 0.2001056671142578, 0.20195482671260834, 0.19944524765014648, 0.20023775100708008, 0.20380398631095886, 0.20036983489990234, 0.2090873122215271, 0.20340773463249207, 0.2067098170518875, 0.21238937973976135, 0.20472857356071472, 0.20842689275741577, 0.2090873122215271, 0.21582353115081787, 0.21674811840057373, 0.21661603450775146], "val_loss": [2.2995364665985107, 2.299017906188965, 2.2985031604766846, 2.2979907989501953, 2.2974746227264404, 2.296954870223999, 2.296438694000244, 2.295919418334961, 2.2954022884368896, 2.294890880584717, 2.294377326965332, 2.2938568592071533, 2.2933409214019775, 2.292834520339966, 2.2923221588134766, 2.291813850402832, 2.2913057804107666, 2.290800094604492, 2.290292263031006, 2.2897839546203613, 2.2892730236053467, 2.2887606620788574, 2.2882537841796875, 2.2877485752105713, 2.2872393131256104, 2.286733388900757, 2.2862234115600586, 2.2857186794281006, 2.2852070331573486, 2.284698724746704, 2.2841923236846924, 2.2836854457855225, 2.283175230026245, 2.2826688289642334, 2.2821614742279053, 2.281648874282837, 2.2811384201049805, 2.2806360721588135, 2.2801320552825928, 2.2796225547790527, 2.279113292694092, 2.2786052227020264, 2.278097629547119, 2.2775795459747314, 2.2770771980285645, 2.276569128036499, 2.2760579586029053, 2.2755441665649414, 2.2750308513641357, 2.2745156288146973, 2.2740061283111572, 2.2734880447387695, 2.2729709148406982, 2.272459030151367, 2.2719409465789795, 2.2714271545410156, 2.270905017852783, 2.270388126373291, 2.269871711730957, 2.2693519592285156, 2.268829345703125, 2.268310546875, 2.2677900791168213, 2.2672622203826904, 2.266742467880249, 2.2662129402160645, 2.265690326690674, 2.2651565074920654, 2.2646286487579346, 2.264101982116699, 2.26357102394104, 2.2630364894866943, 2.262502670288086, 2.2619681358337402, 2.2614264488220215, 2.260890483856201, 2.2603535652160645, 2.259824752807617, 2.259284496307373, 2.2587411403656006, 2.258195400238037, 2.257650136947632, 2.257110118865967, 2.2565619945526123, 2.256011962890625, 2.255458354949951, 2.2549045085906982, 2.2543489933013916, 2.2537927627563477, 2.2532341480255127, 2.2526731491088867, 2.2521181106567383, 2.251556396484375, 2.2509925365448, 2.250429153442383, 2.2498607635498047, 2.2492964267730713, 2.2487175464630127, 2.2481396198272705, 2.247562885284424], "val_accuracy": [0.03933333232998848, 0.04266666620969772, 0.04600000008940697, 0.04933333396911621, 0.05066666752099991, 0.05299999937415123, 0.054999999701976776, 0.05833333358168602, 0.06066666543483734, 0.06266666948795319, 0.06700000166893005, 0.07133333384990692, 0.07433333247900009, 0.07866666465997696, 0.08266666531562805, 0.0860000029206276, 0.08833333104848862, 0.09233333170413971, 0.09666666388511658, 0.1003333330154419, 0.10333333164453506, 0.10866666585206985, 0.11266666650772095, 0.11766666918992996, 0.12300000339746475, 0.12733332812786102, 0.13199999928474426, 0.13766667246818542, 0.14100000262260437, 0.1446666717529297, 0.15166667103767395, 0.15666666626930237, 0.1599999964237213, 0.16466666758060455, 0.1679999977350235, 0.17266666889190674, 0.17733334004878998, 0.18000000715255737, 0.18299999833106995, 0.18766666948795319, 0.1913333386182785, 0.19433332979679108, 0.19699999690055847, 0.20200000703334808, 0.20499999821186066, 0.2096666693687439, 0.2150000035762787, 0.21966665983200073, 0.22433333098888397, 0.22866666316986084, 0.23333333432674408, 0.23800000548362732, 0.23999999463558197, 0.2436666637659073, 0.24566666781902313, 0.25033333897590637, 0.25466665625572205, 0.25866666436195374, 0.26366665959358215, 0.2683333456516266, 0.2709999978542328, 0.27399998903274536, 0.2783333361148834, 0.28166666626930237, 0.28433331847190857, 0.28999999165534973, 0.2919999957084656, 0.2943333387374878, 0.29766666889190674, 0.30000001192092896, 0.30266666412353516, 0.30533334612846375, 0.3076666593551636, 0.31066668033599854, 0.3136666715145111, 0.31566667556762695, 0.31933334469795227, 0.320333331823349, 0.3230000138282776, 0.3253333270549774, 0.32733333110809326, 0.32866665720939636, 0.32899999618530273, 0.3310000002384186, 0.3330000042915344, 0.335999995470047, 0.3373333215713501, 0.3400000035762787, 0.343666672706604, 0.3453333377838135, 0.34833332896232605, 0.34966665506362915, 0.34933334589004517, 0.35066667199134827, 0.3529999852180481, 0.3543333411216736, 0.35499998927116394, 0.35633334517478943, 0.35866665840148926, 0.36133334040641785]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 5, 8, 8, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 1, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [35, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [73, 9, 43, 71, 34]], "fitness": -0.2688571512699127, "mapping_values": [1, 12, 12, 9, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.538553237915039, 2.27567195892334, 2.2937631607055664, 2.315861701965332, 2.3043172359466553, 2.3034684658050537, 2.303373098373413, 2.3029305934906006], "accuracy": [0.17117950320243835, 0.15414080023765564, 0.13498876988887787, 0.12930920720100403, 0.0948355570435524, 0.09734513610601425, 0.09694888442754745, 0.10077928751707077], "val_loss": [2.2992379665374756, 2.3029420375823975, 2.0195178985595703, 2.303497314453125, 2.302643299102783, 2.3024771213531494, 2.3024895191192627, 2.3025295734405518], "val_accuracy": [0.1003333330154419, 0.10100000351667404, 0.265666663646698, 0.0976666659116745, 0.0976666659116745, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 1, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [35, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [5, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [1, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10771428793668747, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.7387242317199707, 3.057551383972168, 2.3166582584381104, 2.288118362426758, 2.318080425262451, 2.7304182052612305, 2.444028854370117, 2.3867404460906982, 2.373854398727417], "accuracy": [0.26601505279541016, 0.1372341811656952, 0.14238542318344116, 0.1534803807735443, 0.1550653874874115, 0.13908334076404572, 0.10830801725387573, 0.09866596013307571, 0.1002509593963623], "val_loss": [2.6130480766296387, 2.1667094230651855, 2.19454026222229, 2.1308114528656006, 2.259711980819702, 2.3301901817321777, 2.391350030899048, 2.3220510482788086, 2.4024322032928467], "val_accuracy": [0.0976666659116745, 0.19166666269302368, 0.20466665923595428, 0.2150000035762787, 0.15600000321865082, 0.1733333319425583, 0.11033333092927933, 0.0976666659116745, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 5, 2, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [35, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [0, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 14, 7, 7, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(sigma, beta), tf.math.pow(beta, tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), alpha))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17183992266654968, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 1, 8, 8, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 1, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [35, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [2, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 8, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 14, 7, 7, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(sigma, beta), tf.math.pow(beta, tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), alpha))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 5, 8, 2, 2, 9, 2, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 0, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [1, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 10, 5, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 3, 2, 8, 4, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 1, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [35, 16, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [2, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 14, 7, 7, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.sqrt(alpha), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(sigma, beta), tf.math.pow(beta, tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), alpha))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 3, 9, 5, 8, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 1, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [49, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [2, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07066437602043152, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 3, 9, 3, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 8, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [9, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.sqrt(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3182060718536377, 2.36421537399292, 2.4494810104370117, 2.7121188640594482, 9118150.0, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06234315037727356, 0.022454101592302322, 0.015057455748319626, 0.0136045441031456, 0.08928807079792023, 0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3426198959350586, 2.405888557434082, 2.535950183868408, 3.419973611831665, 1.6607966567100685e+20, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.004999999888241291, 0.003666666569188237, 0.005333333276212215, 0.050999999046325684, 0.0976666659116745, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 6, 4, 8, 2, 2, 5, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 1, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [93, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [7, 4, 3, 2, 4, 1, 3, 9, 4, 3, 9, 6, 9, 2, 8, 6, 7, 9, 7, 7, 4, 1, 6, 1, 1, 7, 2, 0, 2, 9, 0, 4, 2, 0, 9], [1, 0, 3, 1, 2, 0, 1, 1, 3, 3, 2, 3, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 21, 12, 9, 4], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.pow(sigma, alpha), tf.math.subtract(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), beta), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, alpha)), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 1, 8, 2, 9, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [0, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 8, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), grad)), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [369859520.0, 7179376640.0, 33867360256.0, 92369698816.0, 197726044160.0, 363153260544.0], "accuracy": [0.10249637067317963, 0.10355303436517715, 0.09826971590518951, 0.10249637067317963, 0.1002509593963623, 0.09800554811954498], "val_loss": [1649779456.0, 13192313856.0, 44517453824.0, 105515491328.0, 206075592704.0, 356087234560.0], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 3, 1, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [35, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [0, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 15, 15, 10, 5, 2, 2, 2, 1, 1, 1, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad))))), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3026461601257324, 2.301682472229004, 2.3030123710632324, 2.3021960258483887, 2.302844285964966, 2.3033695220947266], "accuracy": [0.0878351628780365, 0.09153348207473755, 0.08889182657003403, 0.09100515395402908, 0.09047681838274002, 0.08955223858356476], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 8, 9, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 1, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [49, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 7, 6, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [9, 51, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3026461601257324, 2.301682472229004, 2.3030123710632324, 2.3021960258483887, 2.302844285964966, 2.3033695220947266], "accuracy": [0.0878351628780365, 0.09153348207473755, 0.08889182657003403, 0.09100515395402908, 0.09047681838274002, 0.08955223858356476], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 2, 8, 2, 2, 0, 8, 2, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 1, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [32, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [3, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [2, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 22, 22, 15, 7, 3, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(grad)))), tf.math.multiply(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(beta), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3026461601257324, 2.301682472229004, 2.3030123710632324, 2.3021960258483887, 2.302844285964966, 2.3033695220947266], "accuracy": [0.0878351628780365, 0.09153348207473755, 0.08889182657003403, 0.09100515395402908, 0.09047681838274002, 0.08955223858356476], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 3, 9, 8, 2, 8, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [49, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [6, 0, 3, 2, 7, 4, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [24, 9, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.math.negative(beta))", "other_info": {"loss": [2.3026461601257324, 2.301682472229004, 2.3030123710632324, 2.3021960258483887, 2.302844285964966, 2.3033695220947266], "accuracy": [0.0878351628780365, 0.09153348207473755, 0.08889182657003403, 0.09100515395402908, 0.09047681838274002, 0.08955223858356476], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}]