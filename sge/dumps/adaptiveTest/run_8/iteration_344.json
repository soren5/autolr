[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6], [1, 3, 0, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.7685714364051819, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 7, 3, 4, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.525942456720685, 2.3040163192955605, 2.2728560708375607, 1.9045718694328395, 1.8688835875233167, 1.489146355608939, 1.2156272008828106, 1.058603669847275, 0.9532012431030464, 0.8590925342733393, 0.8616418102791816, 0.7906731457805369, 0.8115143176272025, 0.7163264972186438, 0.7007058184333623, 0.659928818782559, 0.6588113086964587, 0.6564045428930572, 0.6227748387714246], "accuracy": [0.23286223411560059, 0.10157178342342377, 0.1460837423801422, 0.37643641233444214, 0.34301942586898804, 0.47668737173080444, 0.5469554662704468, 0.5983357429504395, 0.6337339878082275, 0.6711134314537048, 0.6670188903808594, 0.7082287669181824, 0.7030775547027588, 0.7281733155250549, 0.7346453666687012, 0.7506273984909058, 0.7494386434555054, 0.754589855670929, 0.7597411274909973], "val_loss": [1.9765815734863281, 1.9701852117265974, 1.7165819236210413, 1.799088614327567, 1.1295770236424036, 1.0386955397469657, 0.8102314642497471, 0.7460961171558925, 0.6638351678848267, 0.7096670355115619, 0.6808192219052996, 0.6459088666098458, 0.611362201826913, 0.505264265196664, 0.5621396473475865, 0.5195837361471993, 0.5630792549678257, 0.5055383954729352, 0.514574374471392], "val_accuracy": [0.09833333641290665, 0.15133333206176758, 0.3153333365917206, 0.30133333802223206, 0.5450000166893005, 0.5423333048820496, 0.656000018119812, 0.6470000147819519, 0.70333331823349, 0.6666666865348816, 0.6933333277702332, 0.7043333053588867, 0.718666672706604, 0.7726666927337646, 0.7603333592414856, 0.7620000243186951, 0.7303333282470703, 0.7696666717529297, 0.7506666779518127]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [3, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [1, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6, 6, 3, 5, 6, 5], [1, 3, 0, 1, 3, 2], [99, 47, 50, 41, 34]], "fitness": -0.6779999732971191, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.302063100074402, 2.3018232698469525, 2.3006030558091206, 2.2974826391772067, 2.2936671965819118, 2.291781029728315, 2.2855455446174004, 2.2822530271512265, 2.275908842598206, 2.2692664153288384, 2.2600591036905278, 2.25338781007513, 2.2457011483837004, 2.2365503007268797, 2.2258881469523004, 2.215744199659594, 2.2028599940176417, 2.190021113255997, 2.175344034696787, 2.159344620787157, 2.1427258750813243, 2.1219516544609083, 2.100446914747926, 2.0769014479446057, 2.0493601064766405, 2.018953615506532, 1.9816283236058823, 1.9456373084852676, 1.906288348893133, 1.8565435358372977, 1.8123228279921704, 1.7633509559874458, 1.715160918210586, 1.6732053935268, 1.6139991460238874, 1.5694764941013595, 1.5363668155644974, 1.4947371693051739, 1.4753845196988338, 1.425280762669779, 1.4318994841224812, 1.39503087932565, 1.3904915208026734, 1.3757679130202507, 1.3665487451513036, 1.3532426701938598, 1.3806856185091547, 1.361962178285332, 1.3845861716875705, 1.370504095742983, 1.3979762947050776, 1.3625867597777468, 1.3403831166897342, 1.3147207048386158, 1.2860712981290192, 1.2386053699811594, 1.2099705912165906, 1.2023448497706464, 1.140901934217232, 1.119636248887223, 1.1124975303727496], "accuracy": [0.09285431355237961, 0.09219389408826828, 0.09417514503002167, 0.09998679161071777, 0.11332716792821884, 0.11755382269620895, 0.13591335713863373, 0.1438383311033249, 0.16153743863105774, 0.1728965789079666, 0.21265354752540588, 0.22744683921337128, 0.2429005354642868, 0.25941091775894165, 0.2917712330818176, 0.287280410528183, 0.3143574297428131, 0.32743361592292786, 0.34381189942359924, 0.35068023204803467, 0.36322811245918274, 0.3704926669597626, 0.3821159601211548, 0.381719708442688, 0.39241844415664673, 0.3953242599964142, 0.404570072889328, 0.4167217016220093, 0.41289129853248596, 0.42226919531822205, 0.43851539492607117, 0.44802534580230713, 0.44591203331947327, 0.44485536217689514, 0.46612071990966797, 0.47087571024894714, 0.4764232039451599, 0.4810461103916168, 0.48368775844573975, 0.5077268481254578, 0.4975564777851105, 0.5214634537696838, 0.5204068422317505, 0.5227842926979065, 0.5287280678749084, 0.5348038673400879, 0.5361247062683105, 0.54655921459198, 0.5456346869468689, 0.5546162724494934, 0.544710099697113, 0.5654470920562744, 0.5639941692352295, 0.5719191431999207, 0.5849953889846802, 0.5929203629493713, 0.6083740592002869, 0.6188086271286011, 0.6289790272712708, 0.6272619366645813, 0.631488561630249], "val_loss": [1.9701800346374512, 1.9690466608319963, 1.967195647103446, 1.9646431377955846, 1.9613967623029436, 1.9574710982186454, 1.9529034750802177, 1.9477075168064661, 1.9419055666242326, 1.9355204445975167, 1.928569998059954, 1.9210350172860282, 1.9128879138401575, 1.9041204452514648, 1.894634519304548, 1.8843319756644112, 1.8730105672563826, 1.860466752733503, 1.8464569364275252, 1.8307263510567802, 1.8130575588771276, 1.7931508336748396, 1.770730836050851, 1.7455545834132604, 1.7173316138131278, 1.685753549848284, 1.6505371502467565, 1.6115161691393172, 1.5686489854540144, 1.5219987801143102, 1.471928562436785, 1.418954678944179, 1.3639822687421526, 1.3080828530447823, 1.2524303368159704, 1.1981430394308907, 1.1462104661124093, 1.0972140516553606, 1.0515825067247664, 1.009592022214617, 0.9711046900068011, 0.9358937399727958, 0.9039687769753593, 0.8748373644692558, 0.8482911246163505, 0.8251725775854928, 0.8069108554295131, 0.7947565146854946, 0.7882285969597953, 0.7835196597235543, 0.7760826008660453, 0.763059139251709, 0.7465137072971889, 0.7313124452318464, 0.7222638300486973, 0.7199324199131557, 0.7214224679129464, 0.7223829541887555, 0.7197528226034982, 0.7121856893811908, 0.6998986176082066], "val_accuracy": [0.04066666588187218, 0.04899999871850014, 0.061000000685453415, 0.07900000363588333, 0.1120000034570694, 0.1496666669845581, 0.2016666680574417, 0.24699999392032623, 0.296999990940094, 0.3336666524410248, 0.35366666316986084, 0.3633333444595337, 0.3766666650772095, 0.3876666724681854, 0.40066665410995483, 0.4086666703224182, 0.4189999997615814, 0.43033334612846375, 0.43566668033599854, 0.4429999887943268, 0.44433334469795227, 0.45399999618530273, 0.46299999952316284, 0.47333332896232605, 0.48399999737739563, 0.49133333563804626, 0.5, 0.5090000033378601, 0.5170000195503235, 0.5223333239555359, 0.5329999923706055, 0.5360000133514404, 0.5479999780654907, 0.5643333196640015, 0.5743333101272583, 0.5826666951179504, 0.5896666646003723, 0.5983333587646484, 0.6103333234786987, 0.625, 0.6420000195503235, 0.6536666750907898, 0.6660000085830688, 0.6676666736602783, 0.6773333549499512, 0.684333324432373, 0.6883333325386047, 0.6883333325386047, 0.6809999942779541, 0.6756666898727417, 0.6786666512489319, 0.6909999847412109, 0.6973333358764648, 0.7023333311080933, 0.7043333053588867, 0.7089999914169312, 0.7036666870117188, 0.7049999833106995, 0.7056666612625122, 0.7046666741371155, 0.7009999752044678]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [0, 0, 1], [3, 3, 0], [0, 3], [20], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6], [1, 3, 0, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.5094285607337952, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.3308263871144184, 2.1271194217542315, 2.3207479846507426, 2.2145153636614943, 2.126989888918162, 2.0636677357813844, 2.0448259797157347, 1.9609182299939065, 1.902742092792998, 1.8908264531183552, 1.87150116022536, 1.862810878343649, 1.8454946926666398, 1.8548937193265036, 1.8378535587364704, 1.8319244152834198, 1.8322031023857883, 1.888540203356236, 1.833305975024443], "accuracy": [0.2262580841779709, 0.22057852149009705, 0.12098798155784607, 0.14436666667461395, 0.1888786107301712, 0.18755778670310974, 0.16933034360408783, 0.20935148000717163, 0.2514859437942505, 0.24461762607097626, 0.25280675292015076, 0.26178839802742004, 0.2526746690273285, 0.25861841440200806, 0.26495838165283203, 0.27380794286727905, 0.2719587981700897, 0.24897634983062744, 0.26958128809928894], "val_loss": [1.9141694477626257, 2.042863300868443, 1.91563538142613, 1.736710888998849, 1.6283002240317208, 1.546111754008702, 1.7861407143729073, 1.3777622835976737, 1.4306291852678572, 1.353827714920044, 1.450129202433995, 1.2393534864698137, 1.4006521701812744, 1.2722446918487549, 1.3275041239602225, 1.4052184990474157, 1.2398766790117537, 1.282045943396432, 1.208071299961635], "val_accuracy": [0.1626666635274887, 0.10400000214576721, 0.18766666948795319, 0.23999999463558197, 0.3216666579246521, 0.30666667222976685, 0.1886666715145111, 0.37299999594688416, 0.4440000057220459, 0.4749999940395355, 0.3696666657924652, 0.49000000953674316, 0.335999995470047, 0.5529999732971191, 0.46533334255218506, 0.34066668152809143, 0.3580000102519989, 0.5473333597183228, 0.4883333444595337]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [1, 3, 2, 3, 6, 6, 3, 5, 6, 5, 5], [1, 3, 0, 1, 3, 2, 0, 3, 1], [44, 47, 50, 41, 34]], "fitness": -0.35514286160469055, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 20, 11, 9, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.math.multiply(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(alpha, sigma)), beta)), tf.math.square(tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), sigma)), alpha)", "other_info": {"loss": [2.846016473238573, 2.2793609596844977, 2.3033911433942316, 2.255468150769809, 2.2548436515162162, 2.3068425934060595, 2.3026315532639483, 2.206796380081953, 2.3065212553896215], "accuracy": [0.2005019187927246, 0.14621582627296448, 0.10381719470024109, 0.15876370668411255, 0.19957733154296875, 0.1002509593963623, 0.10368511080741882, 0.21093647181987762, 0.10130762308835983], "val_loss": [1.6527697358812605, 1.9753334862845284, 1.9697116443089075, 1.6141266141619002, 1.9812465395246233, 1.9744977269853865, 1.9699271065848214, 1.9792120116097587, 1.9743079457964217], "val_accuracy": [0.20866666734218597, 0.09966666996479034, 0.09966666996479034, 0.3700000047683716, 0.09833333641290665, 0.09833333641290665, 0.14766666293144226, 0.09700000286102295, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [7, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6], [1, 3, 1, 3, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.3440000116825104, "mapping_values": [1, 3, 3, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 7, 3, 4, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), alpha), sigma)", "other_info": {"loss": [2.747053837243986, 2.3047970146818595, 2.303220210625212, 2.3029418025018673, 2.3028831354709838, 2.2990097342354985, 2.197091902157319, 2.3047970736015744, 2.303154020576492, 2.3032208096790527, 2.303096322493074], "accuracy": [0.17910447716712952, 0.09813763201236725, 0.1010434553027153, 0.10553427785634995, 0.09840179979801178, 0.12970545887947083, 0.19191652536392212, 0.09496764093637466, 0.09906221181154251, 0.09549596905708313, 0.09747721254825592], "val_loss": [1.9769246237618583, 1.974179404122489, 1.9737522942679269, 1.973698547908238, 1.972912379673549, 1.9478654180254256, 1.9762498991830009, 1.974128041948591, 1.9737488882882255, 1.973764283316476, 1.973717417035784], "val_accuracy": [0.070333331823349, 0.09966666996479034, 0.09966666996479034, 0.0976666659116745, 0.09833333641290665, 0.27300000190734863, 0.10233332961797714, 0.10233332961797714, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [0, 3], [34], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 7, 3, 6], [1, 3, 0, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10085714608430862, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.3022019143558654, 2.3025827452554175, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736425536019462, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [1, 3, 2, 3, 6, 6, 3, 3, 6, 5, 9], [1, 0, 0, 1, 3, 2, 3, 2, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 20, 11, 9, 3], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(sigma, tf.math.multiply(beta, tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.square(beta), beta))))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 3, 2, 3, 6, 6, 2, 5, 6, 5], [1, 3, 0, 1, 3, 0, 3, 0, 2], [3, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, sigma), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.316468601166344, 2.4682042555266746, 2.896839457858177, 3.6947974700182025, 4.8648738376122145, 6.396557697703763, 8.33797307040288, 10.614922225467438], "accuracy": [0.08717474341392517, 0.09060890227556229, 0.09774138033390045, 0.09615638852119446, 0.09932637959718704, 0.09774138033390045, 0.10342095047235489, 0.1022322028875351], "val_loss": [1.9973670414515905, 2.1307592391967773, 2.4473911694117954, 3.0060069220406667, 3.822458948407854, 4.883104733058384, 6.174155644008091, 7.692783083234515], "val_accuracy": [0.09666666388511658, 0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [3, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [0, 0, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6], [1, 3, 0, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6], [1, 3, 3, 2, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 3, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), tf.math.add(tf.math.add(beta, beta), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.multiply(sigma, sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07740060985088348, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 6, 6, 0, 3, 4, 1, 5, 3, 4, 3, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50, 45, 53, 90], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 0, 3, 0, 3, 2, 3, 0, 0], [0, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0], [1, 3, 3, 3, 6], [1, 3, 1, 3, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 14, 12, 6, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(grad)))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 3, 2, 3, 6, 7, 9, 6, 2, 9], [1, 3, 0, 1, 3, 2, 0], [14, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 17, 10, 7, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(sigma, tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.divide_no_nan(tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), sigma), beta)), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 7, 3, 6], [1, 3, 0, 1, 3, 2], [48, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07779685407876968, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [9, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [0, 3], [84], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 9, 4, 3, 6, 9, 7, 7, 6, 7, 4, 5, 1, 3, 4], [3, 3, 0, 1, 1, 2, 1, 3], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 3, 2, 1, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.302901497449007, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 4, 3, 4, 0, 6, 6, 4, 3, 1, 9, 9, 8, 1, 1, 8, 9, 0], [2, 2, 1, 3, 0, 3, 2, 0, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0], [1, 3, 2, 3, 6], [1, 3, 0, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 10, 10, 4, 6, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.pow(grad, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta))))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07819310575723648, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 3, 2, 3, 6], [0, 3, 0, 1, 3, 2], [99, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 3, 1, 0, 0, 0, 0, 7, 3, 4, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.303370302001546, 2.3029803778784794, 2.3030303886553645, 2.3029720323464624, 2.303064406618797, 2.302898790102278, 2.3029461891706893], "accuracy": [0.08955223858356476, 0.09457138925790787, 0.09655263274908066, 0.09760929644107819, 0.09377889335155487, 0.09470347315073013, 0.0956280529499054], "val_loss": [1.9737433706011092, 1.9736663954598563, 1.973687035696847, 1.97367981501988, 1.9736831528799874, 1.9737727982657296, 1.9737676892961775], "val_accuracy": [0.09700000286102295, 0.09966666996479034, 0.09966666996479034, 0.0976666659116745, 0.09833333641290665, 0.09966666996479034, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [63, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 2, 3, 6], [1, 3, 2, 1, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(alpha), tf.math.add(sigma, beta))", "other_info": {"loss": [2.3038151287808946, 2.303348846911691, 2.3034752643087897, 2.3033390854170546, 2.3035319463656547, 2.303196912617369, 2.3033213203199914], "accuracy": [0.08928807079792023, 0.09457138925790787, 0.09853387624025345, 0.09760929644107819, 0.09377889335155487, 0.09496764093637466, 0.09655263274908066], "val_loss": [1.9740236146109444, 1.973776068006243, 1.9738334928240096, 1.9738572665623255, 1.973775863647461, 1.9740934371948242, 1.9739433697291784], "val_accuracy": [0.09700000286102295, 0.09966666996479034, 0.09833333641290665, 0.0976666659116745, 0.09833333641290665, 0.09966666996479034, 0.0976666659116745]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [74, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 3, 2, 3, 1, 8, 6, 0, 8, 7, 9, 8, 0, 4], [1, 3, 0, 1, 1, 3, 1, 3], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 22, 14, 8, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), tf.math.multiply(tf.math.subtract(tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), alpha)), sigma)), tf.math.sqrt(tf.math.negative(tf.math.pow(alpha, sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3, 0], [1, 3], [38], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 2, 3, 6, 6, 3, 5, 6, 5], [1, 3, 0, 3, 0, 1, 0, 3, 1], [44, 47, 50, 41, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 5, 4, 2, 2, 0, 15, 7, 8, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.sqrt(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, sigma), tf.math.add(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), sigma))", "other_info": {"loss": [2.302177046740674, 2.302684470032972, 2.302975811238428, 2.3020983021634995, 2.301320874443805, 2.3031401823162483], "accuracy": [0.09245806187391281, 0.09087307006120682, 0.08770307898521423, 0.08849557489156723, 0.09496764093637466, 0.08915598690509796], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [89, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 8, 3, 4, 0, 6, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [7, 3], [], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [3, 3, 2, 0, 6, 6, 7], [2, 3, 2, 1, 0, 2, 0, 3, 2, 2, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302177046740674, 2.302684470032972, 2.302975811238428, 2.3020983021634995, 2.301320874443805, 2.3031401823162483], "accuracy": [0.09245806187391281, 0.09087307006120682, 0.08770307898521423, 0.08849557489156723, 0.09496764093637466, 0.08915598690509796], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]