[{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 0, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 3, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 0, 2, 1, 3, 0, 0], [95, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7928571701049805, "mapping_values": [1, 10, 10, 6, 4, 1, 12, 12, 7, 5, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, grad), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.255946880822263, 2.0567920395978736, 1.6137869972767627, 1.2733031726075579, 1.1035968041171205, 1.0084022577995198, 0.9326403307058178, 0.8817473632343662, 0.8577816593191958, 0.8242242230305882, 0.7968695159239335, 0.7829626886647186, 0.775347150768728, 0.7481476956307533, 0.7361587996511821, 0.7247435359702276, 0.7080321010660265, 0.714815583825505, 0.6887902818839658, 0.6842858418340082, 0.6782805609696766, 0.6633349188550934, 0.6617106713355572, 0.6617817276299763, 0.6476197362166544, 0.6461000450613823, 0.6334452265289245, 0.6308539115190663, 0.6301484340611166, 0.6301536396620154, 0.6291153521554156, 0.6165604493353801, 0.6090715834257105, 0.604375812788807, 0.5996323399351037, 0.6037657886385335, 0.602367247068934, 0.6043653594913767, 0.5929695792154723, 0.5839921473480565], "accuracy": [0.1978602558374405, 0.3843613862991333, 0.4924052357673645, 0.5587108731269836, 0.6108836531639099, 0.6516972780227661, 0.6687359809875488, 0.6841896772384644, 0.6881521344184875, 0.700700044631958, 0.7073041796684265, 0.7174745798110962, 0.7168141603469849, 0.7277770638465881, 0.7362303733825684, 0.7408532500267029, 0.7436270117759705, 0.7285695672035217, 0.7474573850631714, 0.7475894689559937, 0.7477215528488159, 0.7518161535263062, 0.7581561207771301, 0.7597411274909973, 0.7609298825263977, 0.759609043598175, 0.7638356685638428, 0.7680623531341553, 0.7677981853485107, 0.763439416885376, 0.7676661014556885, 0.7708360552787781, 0.7755910754203796, 0.7792893648147583, 0.772288978099823, 0.7778365015983582, 0.7795535326004028, 0.780610203742981, 0.7845727205276489, 0.778761088848114], "val_loss": [1.8492176192147392, 1.5062031405312675, 1.0362857750483923, 0.8231940610068185, 0.7246133940560477, 0.6812364203589303, 0.6342051029205322, 0.6272860765457153, 0.5924242394311088, 0.580429196357727, 0.5887692826134818, 0.5484767130443028, 0.5355302946908134, 0.5365278550556728, 0.521956171308245, 0.5185454743249076, 0.5142423765999931, 0.5075507164001465, 0.507321800504412, 0.5074788161686489, 0.48969500405447824, 0.4872699124472482, 0.48053031308310373, 0.48974486759730745, 0.4730585643223354, 0.47691023349761963, 0.470217227935791, 0.46639786447797504, 0.4639930895396641, 0.4719939572470529, 0.46230852603912354, 0.4618572848183768, 0.460027847971235, 0.4693617991038731, 0.4467142564909799, 0.45295578241348267, 0.45324370690754484, 0.45421031543186735, 0.4495189530508859, 0.443683990410396], "val_accuracy": [0.4740000069141388, 0.5606666803359985, 0.6526666879653931, 0.7006666660308838, 0.7210000157356262, 0.7080000042915344, 0.7356666922569275, 0.7253333330154419, 0.7543333172798157, 0.7446666955947876, 0.7283333539962769, 0.7710000276565552, 0.7743333578109741, 0.7820000052452087, 0.7823333144187927, 0.7816666960716248, 0.7789999842643738, 0.7829999923706055, 0.7806666493415833, 0.7776666879653931, 0.784333348274231, 0.7919999957084656, 0.7933333516120911, 0.7876666784286499, 0.7979999780654907, 0.7896666526794434, 0.8066666722297668, 0.8053333163261414, 0.8083333373069763, 0.7979999780654907, 0.8100000023841858, 0.8043333292007446, 0.8016666769981384, 0.7933333516120911, 0.8203333616256714, 0.8106666803359985, 0.809333324432373, 0.8146666884422302, 0.809333324432373, 0.812666654586792]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 4, 2, 2, 5, 3, 2, 6, 6, 8, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [1, 2, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [13, 93, 35, 73, 70, 79, 52, 1, 71, 53], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 8, 4, 5, 8, 2, 9, 0, 5, 2, 2, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 2, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.13428571820259094, "mapping_values": [1, 38, 38, 24, 14, 9, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), grad))), tf.math.divide_no_nan(tf.math.add(alpha, grad), grad))), alpha))), tf.math.sqrt(tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3535413809298777, 2.7933938648753935, 2.306979217423487, 2.3037694644902786, 2.303002575621267, 2.303119096521688], "accuracy": [0.21423853933811188, 0.15638621151447296, 0.09998679161071777, 0.09747721254825592, 0.09457138925790787, 0.09179764986038208], "val_loss": [2.572256292615618, 1.979497296469552, 1.9745984758649553, 1.9737586975097656, 1.9736131259373255, 1.9734887395586287], "val_accuracy": [0.10400000214576721, 0.09833333641290665, 0.09966666996479034, 0.10000000149011612, 0.09866666793823242, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [86, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 2, 8, 4, 2, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 0, 2, 1, 3, 0, 0], [95, 17, 14, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.13428571820259094, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3535413809298777, 2.7933938648753935, 2.306979217423487, 2.3037694644902786, 2.303002575621267, 2.303119096521688], "accuracy": [0.21423853933811188, 0.15638621151447296, 0.09998679161071777, 0.09747721254825592, 0.09457138925790787, 0.09179764986038208], "val_loss": [2.572256292615618, 1.979497296469552, 1.9745984758649553, 1.9737586975097656, 1.9736131259373255, 1.9734887395586287], "val_accuracy": [0.10400000214576721, 0.09833333641290665, 0.09966666996479034, 0.10000000149011612, 0.09866666793823242, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 1, 5, 8, 2, 3, 0, 5, 2, 2, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 2, 2, 1, 3, 0, 0], [95, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10771428793668747, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.4308621159098673, 2.30323441112676, 2.302921233191671, 2.3030661374602133, 2.3029608803654487, 2.3029349800964405, 2.3026919337217095, 2.3029589276382434], "accuracy": [0.20921939611434937, 0.09879804402589798, 0.09642054885625839, 0.09628847241401672, 0.09708096832036972, 0.09747721254825592, 0.09959053993225098, 0.10408136248588562], "val_loss": [1.9743099212646484, 1.9738208225795202, 1.9737176895141602, 1.973727021898542, 1.973651341029576, 1.9736341067722865, 1.9736828122820174, 1.9736005238124303], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.10400000214576721, 0.10000000149011612, 0.10400000214576721, 0.10400000214576721, 0.09833333641290665, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 2, 2, 5, 5, 3, 2, 6, 8, 1, 3, 2, 9, 3, 2, 6, 9, 5, 8, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 0, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [13, 65, 35, 6, 70, 79, 52, 52, 71, 31, 6], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [8, 1, 4, 5, 8, 2, 9, 0, 5, 2, 2, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 2, 2, 1, 3, 0, 0], [95, 92, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 36, 36, 24, 12, 9, 12, 12, 9, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.subtract(grad, tf.math.multiply(grad, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))))))), tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.square(tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 0, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 0, 2, 1, 3, 0, 0], [95, 32, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 1, 14, 14, 9, 5, 5, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, grad), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [399.3308824324227, 2.323633769594242, 2.307996428826891, 2.3041420729562447, 2.303151489673998, 2.303107547848185], "accuracy": [0.09470347315073013, 0.09853387624025345, 0.09721305221319199, 0.09576013684272766, 0.09879804402589798, 0.09694888442754745], "val_loss": [2.004237311226981, 1.981813907623291, 1.975766863141741, 1.974257264818464, 1.9737828799656458, 1.9736268860953194], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.10000000149011612, 0.10000000149011612, 0.10400000214576721]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 2, 4, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [13, 93, 35, 73, 70, 79, 88, 50, 71, 31], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 4, 6, 3, 4, 5, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 2, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 38, 38, 24, 14, 10, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.subtract(tf.math.square(grad), grad))), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.add(grad, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [3, 6, 4, 8, 9, 9, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 2, 2, 1, 3, 0, 0], [5, 60, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 4, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 7, 1, 3, 1, 1, 0, 1, 0, 9, 5, 4, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.math.pow(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 5, 0, 3, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [13, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 2, 4, 5, 8, 8, 9, 0, 5, 2, 2, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 0, 2, 1, 3, 0, 0], [95, 17, 56, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), grad), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), grad)), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 3, 8, 5, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 2, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [65, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 4, 5, 8, 2, 9, 0, 5, 2, 2, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 2, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 12, 12, 8, 4, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.negative(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [26, 93, 56, 44, 58, 82, 53, 52, 79, 92, 42], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 1, 2, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 1, 3, 0, 2, 1, 3, 0, 0], [5, 60, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.multiply(grad, tf.math.multiply(tf.math.sqrt(tf.math.negative(tf.math.pow(grad, grad))), grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [3, 6, 8, 4, 1, 1, 2, 4, 2, 6, 4, 2, 9, 3, 1, 6, 5, 4, 1, 2, 2, 2, 9, 0, 2, 4, 8, 3, 3, 0, 0, 2, 8, 6, 9, 9], [1, 0, 2, 1, 1, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [61, 93, 56, 77, 40, 64, 19, 52, 97, 40, 29, 77, 87, 47, 17, 69], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 4, 5, 8, 2, 0, 0, 5, 2, 2, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 58, 58, 35, 23, 16, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.pow(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, grad), alpha))), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(alpha)))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.negative(grad)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07660810649394989, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 0, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 1, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 3, 1, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 3, 2, 1, 3, 0, 0], [95, 33, 93, 84, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 0, 13, 13, 8, 5, 3, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.square(alpha)))))), tf.math.add(tf.math.add(alpha, grad), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, beta), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 5, 1, 0, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [53, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [3, 2, 4, 1, 8, 4, 5, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 8, 3, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 14, 14, 9, 5, 1, 9, 9, 4, 5, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, grad)))), grad))))))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), grad), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.301616840264297, 2.302452652067981, 2.3018208672704006, 2.302883848301912, 2.303669242370146, 2.301705248084098], "accuracy": [0.09021265059709549, 0.09272222965955734, 0.08677849918603897, 0.08611807972192764, 0.08400475233793259, 0.09153348207473755], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1], [3, 6, 2, 4, 1, 1, 2, 4, 2, 6, 4, 2, 2, 6, 8, 6, 5, 4, 0, 2, 2, 2, 0, 1, 2, 4, 8, 3, 3, 0, 0, 2, 8, 1, 9, 9, 1, 8, 3, 1, 6, 3, 9, 7, 1, 5, 2, 5, 8, 3, 7, 2, 2, 8], [2, 0, 2, 2, 0, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 2, 1, 2, 2, 2, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3, 0, 0, 3, 0], [61, 93, 56, 44, 40, 73, 53, 52, 5, 62, 30, 27, 4, 39, 21, 72, 35, 89, 13, 8], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 3, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 0, 2, 1, 3, 0, 0], [95, 10, 93, 84, 95, 51], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 1, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 90, 90, 54, 36, 20, 18, 18, 12, 6, 6, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 71, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), tf.math.subtract(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), grad)))))))))))), alpha), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), grad)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), alpha))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), grad), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(grad)))))), grad)))))), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.subtract(grad, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))))), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301616840264297, 2.302452652067981, 2.3018208672704006, 2.302883848301912, 2.303669242370146, 2.301705248084098], "accuracy": [0.09021265059709549, 0.09272222965955734, 0.08677849918603897, 0.08611807972192764, 0.08400475233793259, 0.09153348207473755], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 1, 1, 4, 5, 2, 6, 1, 0, 4, 5, 2, 9, 2, 2, 0, 9, 5, 0, 2, 8, 2, 4, 9, 8, 4], [0, 0, 2, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 93, 35, 5, 70, 72, 15, 52, 44, 91], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 6, 1, 8, 8, 4, 9, 6, 9, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [0, 3], [16], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 37, 37, 25, 12, 8, 2, 2, 1, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.negative(alpha)), tf.math.pow(tf.math.add(alpha, grad), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.pow(grad, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))))))))))))), tf.math.sqrt(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.301616840264297, 2.302452652067981, 2.3018208672704006, 2.302883848301912, 2.303669242370146, 2.301705248084098], "accuracy": [0.09021265059709549, 0.09272222965955734, 0.08677849918603897, 0.08611807972192764, 0.08400475233793259, 0.09153348207473755], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 2, 2, 8, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 8, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 1, 0, 2, 2, 2, 1, 0, 2, 0, 0, 1, 0, 2, 0, 1, 1, 2, 2, 0, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [13, 93, 67, 73, 7, 79, 52, 47, 71, 31, 52], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [3, 1, 4, 5, 8, 2, 9, 0, 5, 2, 2, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 2, 2, 1, 3, 0, 0], [5, 60, 82, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 16, 16, 9, 7, 2, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.divide_no_nan(grad, grad)))))), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301616840264297, 2.302452652067981, 2.3018208672704006, 2.302883848301912, 2.303669242370146, 2.301705248084098], "accuracy": [0.09021265059709549, 0.09272222965955734, 0.08677849918603897, 0.08611807972192764, 0.08400475233793259, 0.09153348207473755], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [4, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [13, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 4, 2, 8, 0, 9, 0, 5, 2, 2, 9, 8, 1, 1, 8, 9, 0], [1, 0, 3, 3, 2, 2, 1, 3, 0, 0], [95, 12, 82, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 22, 22, 13, 9, 4, 12, 12, 8, 4, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), grad)))), tf.math.divide_no_nan(grad, tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.301616840264297, 2.302452652067981, 2.3018208672704006, 2.302883848301912, 2.303669242370146, 2.301705248084098], "accuracy": [0.09021265059709549, 0.09272222965955734, 0.08677849918603897, 0.08611807972192764, 0.08400475233793259, 0.09153348207473755], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 6, 1, 0, 0, 2, 1, 8, 3, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 2, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [6, 4, 3, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(grad)))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.301616840264297, 2.302452652067981, 2.3018208672704006, 2.302883848301912, 2.303669242370146, 2.301705248084098], "accuracy": [0.09021265059709549, 0.09272222965955734, 0.08677849918603897, 0.08611807972192764, 0.08400475233793259, 0.09153348207473755], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0], [2, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 1, 9, 4, 7, 8, 8, 0, 9], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [13, 74, 35, 73, 70, 79, 52, 52, 71, 83, 56, 67, 26], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 1, 4, 5, 8, 2, 9, 0, 5, 2, 2, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 0, 2, 1, 3, 0, 0], [14, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 1, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03771428391337395, "mapping_values": [1, 59, 59, 38, 21, 13, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.square(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.math.square(tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.square(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.subtract(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), alpha)), alpha))), tf.math.sqrt(tf.math.add(alpha, grad))))), grad), tf.math.add(alpha, alpha)), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(sigma))", "other_info": {"loss": [2.3020794011850274, 2.3043336895998237, 2.3056242472271107, 2.3094249024540443, 2.313253493498597, 2.314045181521304], "accuracy": [0.0886276587843895, 0.08981640636920929, 0.0812310129404068, 0.07858935743570328, 0.07370228320360184, 0.0758156105875969], "val_loss": [1.9715758051191057, 1.9730870383126395, 1.9747157778058733, 1.9770245552062988, 1.9795359202793665, 1.9819326400756836], "val_accuracy": [0.03533333167433739, 0.028999999165534973, 0.027666667476296425, 0.027000000700354576, 0.02866666577756405, 0.03333333507180214]}}]