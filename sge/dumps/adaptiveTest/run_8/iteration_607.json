[{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7908571362495422, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1933100107969183, 2.025226571099822, 1.6081481309630505, 1.1306131027551327, 1.084709262150374, 0.8673018254246206, 0.7794421119397704, 0.7538933681380464, 0.743104683456955, 0.6769088748707165, 0.6422757341987374, 0.6550132212952505, 0.6399561979074394, 0.593829762020824, 0.550346153980044, 0.578984560038766], "accuracy": [0.27301543951034546, 0.32003697752952576, 0.4694227874279022, 0.5949016213417053, 0.604939877986908, 0.67666095495224, 0.7063795924186707, 0.7083608508110046, 0.7206445932388306, 0.7430986762046814, 0.7523444890975952, 0.7601373791694641, 0.7582882046699524, 0.7718927264213562, 0.7932901978492737, 0.7737419009208679], "val_loss": [1.5643071447099959, 1.3365303107670374, 0.8182259287152972, 0.7171051502227783, 0.710146290915353, 0.5980969667434692, 0.6086320366178241, 0.6606046642575946, 0.49105359826769146, 0.5544864279883248, 0.4766269751957485, 0.4940749406814575, 0.46984706606183735, 0.4619072846003941, 0.4595468214579991, 0.45526857886995586], "val_accuracy": [0.367333322763443, 0.6016666889190674, 0.6449999809265137, 0.6790000200271606, 0.7036666870117188, 0.7226666808128357, 0.7146666646003723, 0.7133333086967468, 0.7773333191871643, 0.7326666712760925, 0.8033333420753479, 0.8013333082199097, 0.7903333306312561, 0.7976666688919067, 0.7826666831970215, 0.7903333306312561]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [5, 4, 2, 4, 5, 6, 2, 1, 2, 1, 5, 2, 5, 5, 0, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 1, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 35, 27, 57, 79, 12, 74], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7908571362495422, "mapping_values": [1, 28, 28, 18, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.subtract(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.square(grad))), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.square(grad)))))))))))))), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1933100107969183, 2.025226571099822, 1.6081481309630505, 1.1306131027551327, 1.084709262150374, 0.8673018254246206, 0.7794421119397704, 0.7538933681380464, 0.743104683456955, 0.6769088748707165, 0.6422757341987374, 0.6550132212952505, 0.6399561979074394, 0.593829762020824, 0.550346153980044, 0.578984560038766], "accuracy": [0.27301543951034546, 0.32003697752952576, 0.4694227874279022, 0.5949016213417053, 0.604939877986908, 0.67666095495224, 0.7063795924186707, 0.7083608508110046, 0.7206445932388306, 0.7430986762046814, 0.7523444890975952, 0.7601373791694641, 0.7582882046699524, 0.7718927264213562, 0.7932901978492737, 0.7737419009208679], "val_loss": [1.5643071447099959, 1.3365303107670374, 0.8182259287152972, 0.7171051502227783, 0.710146290915353, 0.5980969667434692, 0.6086320366178241, 0.6606046642575946, 0.49105359826769146, 0.5544864279883248, 0.4766269751957485, 0.4940749406814575, 0.46984706606183735, 0.4619072846003941, 0.4595468214579991, 0.45526857886995586], "val_accuracy": [0.367333322763443, 0.6016666889190674, 0.6449999809265137, 0.6790000200271606, 0.7036666870117188, 0.7226666808128357, 0.7146666646003723, 0.7133333086967468, 0.7773333191871643, 0.7326666712760925, 0.8033333420753479, 0.8013333082199097, 0.7903333306312561, 0.7976666688919067, 0.7826666831970215, 0.7903333306312561]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 5, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 83, 27, 57, 79, 12, 74], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7908571362495422, "mapping_values": [1, 29, 29, 19, 10, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))))))))), tf.math.add(tf.math.add(alpha, grad), grad))), grad))))), tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1933100107969183, 2.025226571099822, 1.6081481309630505, 1.1306131027551327, 1.084709262150374, 0.8673018254246206, 0.7794421119397704, 0.7538933681380464, 0.743104683456955, 0.6769088748707165, 0.6422757341987374, 0.6550132212952505, 0.6399561979074394, 0.593829762020824, 0.550346153980044, 0.578984560038766], "accuracy": [0.27301543951034546, 0.32003697752952576, 0.4694227874279022, 0.5949016213417053, 0.604939877986908, 0.67666095495224, 0.7063795924186707, 0.7083608508110046, 0.7206445932388306, 0.7430986762046814, 0.7523444890975952, 0.7601373791694641, 0.7582882046699524, 0.7718927264213562, 0.7932901978492737, 0.7737419009208679], "val_loss": [1.5643071447099959, 1.3365303107670374, 0.8182259287152972, 0.7171051502227783, 0.710146290915353, 0.5980969667434692, 0.6086320366178241, 0.6606046642575946, 0.49105359826769146, 0.5544864279883248, 0.4766269751957485, 0.4940749406814575, 0.46984706606183735, 0.4619072846003941, 0.4595468214579991, 0.45526857886995586], "val_accuracy": [0.367333322763443, 0.6016666889190674, 0.6449999809265137, 0.6790000200271606, 0.7036666870117188, 0.7226666808128357, 0.7146666646003723, 0.7133333086967468, 0.7773333191871643, 0.7326666712760925, 0.8033333420753479, 0.8013333082199097, 0.7903333306312561, 0.7976666688919067, 0.7826666831970215, 0.7903333306312561]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 4, 2, 4, 3, 2, 2, 1, 2, 1, 5, 2, 6, 3, 8, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 1, 2, 2, 2, 2, 1, 2, 1, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 0, 35, 7, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7908571362495422, "mapping_values": [1, 24, 24, 12, 12, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), alpha), tf.math.square(tf.math.add(alpha, tf.math.add(grad, alpha)))), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1933100107969183, 2.025226571099822, 1.6081481309630505, 1.1306131027551327, 1.084709262150374, 0.8673018254246206, 0.7794421119397704, 0.7538933681380464, 0.743104683456955, 0.6769088748707165, 0.6422757341987374, 0.6550132212952505, 0.6399561979074394, 0.593829762020824, 0.550346153980044, 0.578984560038766], "accuracy": [0.27301543951034546, 0.32003697752952576, 0.4694227874279022, 0.5949016213417053, 0.604939877986908, 0.67666095495224, 0.7063795924186707, 0.7083608508110046, 0.7206445932388306, 0.7430986762046814, 0.7523444890975952, 0.7601373791694641, 0.7582882046699524, 0.7718927264213562, 0.7932901978492737, 0.7737419009208679], "val_loss": [1.5643071447099959, 1.3365303107670374, 0.8182259287152972, 0.7171051502227783, 0.710146290915353, 0.5980969667434692, 0.6086320366178241, 0.6606046642575946, 0.49105359826769146, 0.5544864279883248, 0.4766269751957485, 0.4940749406814575, 0.46984706606183735, 0.4619072846003941, 0.4595468214579991, 0.45526857886995586], "val_accuracy": [0.367333322763443, 0.6016666889190674, 0.6449999809265137, 0.6790000200271606, 0.7036666870117188, 0.7226666808128357, 0.7146666646003723, 0.7133333086967468, 0.7773333191871643, 0.7326666712760925, 0.8033333420753479, 0.8013333082199097, 0.7903333306312561, 0.7976666688919067, 0.7826666831970215, 0.7903333306312561]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 4, 2, 9, 5, 3, 2, 1, 2, 1, 5, 5, 2, 3, 2, 6, 6, 5, 0, 2, 8, 2, 0, 9, 2], [0, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [57, 10, 2, 63, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7908571362495422, "mapping_values": [1, 19, 19, 11, 8, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad))), grad))))), tf.math.square(alpha)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1933100107969183, 2.025226571099822, 1.6081481309630505, 1.1306131027551327, 1.084709262150374, 0.8673018254246206, 0.7794421119397704, 0.7538933681380464, 0.743104683456955, 0.6769088748707165, 0.6422757341987374, 0.6550132212952505, 0.6399561979074394, 0.593829762020824, 0.550346153980044, 0.578984560038766], "accuracy": [0.27301543951034546, 0.32003697752952576, 0.4694227874279022, 0.5949016213417053, 0.604939877986908, 0.67666095495224, 0.7063795924186707, 0.7083608508110046, 0.7206445932388306, 0.7430986762046814, 0.7523444890975952, 0.7601373791694641, 0.7582882046699524, 0.7718927264213562, 0.7932901978492737, 0.7737419009208679], "val_loss": [1.5643071447099959, 1.3365303107670374, 0.8182259287152972, 0.7171051502227783, 0.710146290915353, 0.5980969667434692, 0.6086320366178241, 0.6606046642575946, 0.49105359826769146, 0.5544864279883248, 0.4766269751957485, 0.4940749406814575, 0.46984706606183735, 0.4619072846003941, 0.4595468214579991, 0.45526857886995586], "val_accuracy": [0.367333322763443, 0.6016666889190674, 0.6449999809265137, 0.6790000200271606, 0.7036666870117188, 0.7226666808128357, 0.7146666646003723, 0.7133333086967468, 0.7773333191871643, 0.7326666712760925, 0.8033333420753479, 0.8013333082199097, 0.7903333306312561, 0.7976666688919067, 0.7826666831970215, 0.7903333306312561]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [6, 4, 2, 4, 5, 6, 2, 1, 2, 1, 5, 2, 9, 2, 5, 3, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 0, 2, 0, 2, 2, 0, 0, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 35, 27, 57, 79, 12, 74], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7908571362495422, "mapping_values": [1, 25, 25, 14, 11, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), tf.math.add(grad, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1933100107969183, 2.025226571099822, 1.6081481309630505, 1.1306131027551327, 1.084709262150374, 0.8673018254246206, 0.7794421119397704, 0.7538933681380464, 0.743104683456955, 0.6769088748707165, 0.6422757341987374, 0.6550132212952505, 0.6399561979074394, 0.593829762020824, 0.550346153980044, 0.578984560038766], "accuracy": [0.27301543951034546, 0.32003697752952576, 0.4694227874279022, 0.5949016213417053, 0.604939877986908, 0.67666095495224, 0.7063795924186707, 0.7083608508110046, 0.7206445932388306, 0.7430986762046814, 0.7523444890975952, 0.7601373791694641, 0.7582882046699524, 0.7718927264213562, 0.7932901978492737, 0.7737419009208679], "val_loss": [1.5643071447099959, 1.3365303107670374, 0.8182259287152972, 0.7171051502227783, 0.710146290915353, 0.5980969667434692, 0.6086320366178241, 0.6606046642575946, 0.49105359826769146, 0.5544864279883248, 0.4766269751957485, 0.4940749406814575, 0.46984706606183735, 0.4619072846003941, 0.4595468214579991, 0.45526857886995586], "val_accuracy": [0.367333322763443, 0.6016666889190674, 0.6449999809265137, 0.6790000200271606, 0.7036666870117188, 0.7226666808128357, 0.7146666646003723, 0.7133333086967468, 0.7773333191871643, 0.7326666712760925, 0.8033333420753479, 0.8013333082199097, 0.7903333306312561, 0.7976666688919067, 0.7826666831970215, 0.7903333306312561]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 9, 1, 4, 3, 0, 1, 8, 1, 5, 2, 9, 5, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [4, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.769428551197052, "mapping_values": [1, 4, 4, 3, 1, 2, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.4056476730759337, 2.289321726307877, 2.217597683234033, 2.0848248530341147, 2.201532653955468, 2.0934273340226226, 1.841496500435475, 1.8575082442323056, 1.6966702081051486, 1.3121445982794107, 1.1853909312521447, 1.016631187449168, 0.8872848759474079, 0.8444210867430824, 0.8079309063013818, 0.7978413783170292, 0.751531596362331, 0.7483861284989093, 0.7144391174565815, 0.6884841411309928, 0.6735983289007687, 0.6734011889275558, 0.6414589047935803, 0.6530096252848522, 0.6349780861696216, 0.6074631933790582, 0.6025972258712416, 0.5952157984792659, 0.5779325746904196], "accuracy": [0.1990489959716797, 0.14832915365695953, 0.23233389854431152, 0.2859595715999603, 0.26363757252693176, 0.2456742823123932, 0.3809272348880768, 0.39307886362075806, 0.4087967276573181, 0.537709653377533, 0.579447865486145, 0.6317527294158936, 0.6650376319885254, 0.6782459616661072, 0.6948884129524231, 0.698190450668335, 0.7135120630264282, 0.713908314704895, 0.7252674698829651, 0.7430986762046814, 0.7440232634544373, 0.7460044622421265, 0.7552502751350403, 0.7499669790267944, 0.7565711140632629, 0.7605336308479309, 0.7709681391716003, 0.7713643908500671, 0.7758552432060242], "val_loss": [1.9736411912100655, 1.8429106984819685, 1.587623221533639, 1.7548375810895647, 1.8281099455697196, 1.647099528993879, 1.7469514438084193, 1.219714675630842, 1.1628302846636092, 0.8970158781324115, 0.9154681818825858, 0.6559005124228341, 0.6723225968224662, 0.5968911988394601, 0.59550826890128, 0.5552464042391095, 0.54909918989454, 0.5419818333217076, 0.5555083240781512, 0.5491187913077218, 0.5309355429240635, 0.48944733824048725, 0.5271961348397392, 0.49027340752737864, 0.509176322392055, 0.4652728864124843, 0.47331690788269043, 0.4652113914489746, 0.45923958505902973], "val_accuracy": [0.09966666996479034, 0.3109999895095825, 0.312666654586792, 0.3343333303928375, 0.2746666669845581, 0.35100001096725464, 0.3269999921321869, 0.5563333630561829, 0.5483333468437195, 0.565666675567627, 0.6783333420753479, 0.7066666483879089, 0.675000011920929, 0.7360000014305115, 0.7266666889190674, 0.7390000224113464, 0.7540000081062317, 0.7509999871253967, 0.7456666827201843, 0.7549999952316284, 0.7599999904632568, 0.778333306312561, 0.762666642665863, 0.7913333177566528, 0.7749999761581421, 0.7900000214576721, 0.7796666622161865, 0.784333348274231, 0.7876666784286499]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 4, 4, 4, 5, 5, 2, 1, 2, 1, 5, 2, 2, 3, 2, 6, 9, 5, 0, 1, 8, 1, 0, 4, 2], [0, 3, 0, 2, 2, 0, 1, 2, 2, 0, 2, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 8, 27, 57, 79, 58, 16, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [11, 25, 50, 71, 34]], "fitness": -0.4339999854564667, "mapping_values": [1, 38, 38, 23, 15, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.square(tf.math.square(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.square(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(grad, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.negative(alpha), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302531432230018, 2.3011117354989947, 2.299532594933974, 2.2987170775238046, 2.29791981653373, 2.2978756849744677, 2.2973244419155843, 2.2959120414984806, 2.2938367245991187, 2.2943203667167187, 2.2932604061787263, 2.291831740676735, 2.2927628318946343, 2.291347878279388, 2.2887964848246414, 2.2909143643687195, 2.2872388702672724, 2.286445461133877, 2.285639733686234, 2.2838963899535587, 2.2831612773905845, 2.2825609018711006, 2.283053422380416, 2.282355606091446, 2.281767463765959, 2.2797265506896047, 2.2794879305049367, 2.2776479654938178, 2.277908478619605, 2.2779514884684207, 2.275636447781286, 2.2741766320778916, 2.2747804444652773, 2.273449328817696, 2.2721323949030094, 2.2726444030686643, 2.2707720701295497, 2.2701063161166495, 2.269326001551362, 2.268108334854342, 2.2658944495869604, 2.2677141992155554, 2.265093301627709, 2.2635651039425344, 2.2637128612667956, 2.262230779988938, 2.2607276862276353, 2.25910126311101, 2.2602528837362947, 2.25866173290227, 2.257408689089014, 2.2563595229514033, 2.253990495996925, 2.254473701995267, 2.2546940388665018, 2.252990732512942, 2.253852641687984, 2.2507107385066774, 2.251002669035247, 2.248406187890622, 2.2473010943786518, 2.2485852214118918, 2.2436651956797307, 2.246376390454634, 2.2420375656694262, 2.2422363876808338, 2.240467359235242, 2.2401630024096875, 2.239311043423527, 2.2355279740467204, 2.2367820279347255, 2.2352352558645383, 2.2334252822794354, 2.2344614296793357, 2.231622399970163, 2.230470941964551, 2.230502533040357, 2.2283514694782722, 2.2266844200688016, 2.2253856612643736, 2.2268905717116367, 2.2249214577085983, 2.2237435089456974, 2.221261697910749, 2.219476198365959, 2.2200258762892195, 2.2177662330454115, 2.2187977550744917, 2.2166846738184733, 2.2143239589840302, 2.2128214488774556, 2.2115515501523424, 2.2113646272780985, 2.210331989962742, 2.2081781414285424, 2.2053534975141313, 2.2051504956354884, 2.2032247431415843, 2.1999648825021043, 2.198816357759862], "accuracy": [0.09311848133802414, 0.09272222965955734, 0.09853387624025345, 0.09800554811954498, 0.10130762308835983, 0.09893012791872025, 0.10289261490106583, 0.09985470771789551, 0.11306300014257431, 0.11094967275857925, 0.11715757846832275, 0.11359133571386337, 0.11372341960668564, 0.11993131786584854, 0.12613920867443085, 0.11662924289703369, 0.13076211512088776, 0.1310262829065323, 0.12957337498664856, 0.13776251673698425, 0.14014001190662384, 0.13908334076404572, 0.1414608359336853, 0.13934750854969025, 0.13789460062980652, 0.15176330506801605, 0.15057456493377686, 0.15453705191612244, 0.1516312211751938, 0.16074495017528534, 0.15229164063930511, 0.16616034507751465, 0.16761326789855957, 0.16853784024715424, 0.16933034360408783, 0.16299036145210266, 0.17276449501514435, 0.17210407555103302, 0.17884030938148499, 0.18623696267604828, 0.18253862857818604, 0.17923656105995178, 0.1838594675064087, 0.1942940205335617, 0.19204860925674438, 0.1942940205335617, 0.19931316375732422, 0.19957733154296875, 0.1966715157032013, 0.1966715157032013, 0.20380398631095886, 0.21344605088233948, 0.21925769746303558, 0.21304979920387268, 0.21740853786468506, 0.21238937973976135, 0.20816272497177124, 0.22216351330280304, 0.22942808270454407, 0.2292959988117218, 0.23154141008853912, 0.2292959988117218, 0.23920221626758575, 0.23061682283878326, 0.2479196935892105, 0.23576806485652924, 0.25359925627708435, 0.2436930388212204, 0.24514594674110413, 0.25518426299095154, 0.2561088502407074, 0.2566371560096741, 0.258090078830719, 0.2538634240627289, 0.2603355050086975, 0.2603355050086975, 0.2608638107776642, 0.26561880111694336, 0.2650904655456543, 0.2678642272949219, 0.2662792205810547, 0.26720380783081055, 0.2716946303844452, 0.2759212851524353, 0.27922335267066956, 0.2759212851524353, 0.28503501415252686, 0.2785629332065582, 0.28622373938560486, 0.287280410528183, 0.28886541724205017, 0.2859595715999603, 0.2851670980453491, 0.2926958203315735, 0.28358209133148193, 0.2999603748321533, 0.3000924587249756, 0.29665830731391907, 0.3069607615470886, 0.3070928454399109], "val_loss": [1.969757352556501, 1.9689202308654785, 1.968085629599435, 1.9672666958400182, 1.9664412907191686, 1.9656148638044084, 1.9647858483450753, 1.9639507021222795, 1.9631284986223494, 1.9623025485447474, 1.9614839553833008, 1.960665566580636, 1.9598423412867956, 1.95903137751988, 1.9582127843584334, 1.9574012075151717, 1.956582478114537, 1.9557742391313826, 1.9549516950334822, 1.9541260174342565, 1.9533065387180872, 1.9524743897574288, 1.9516568183898926, 1.9508311407906669, 1.9500017847333635, 1.9491769245692663, 1.948350497654506, 1.9475273404802596, 1.9467005048479353, 1.9458745547703333, 1.9450421333312988, 1.944209098815918, 1.9433650289263045, 1.9425286565508162, 1.9416843141828264, 1.9408310481480189, 1.9399899755205428, 1.9391472680228097, 1.938286304473877, 1.9374239785330636, 1.9365636280604772, 1.9357023239135742, 1.9348273958478654, 1.9339539664132255, 1.9330761773245675, 1.9321904863630022, 1.9313053403581892, 1.9303971699305944, 1.9294990812029158, 1.9285952023097448, 1.9276933670043945, 1.9267780440194267, 1.925847053527832, 1.924917221069336, 1.9239888191223145, 1.9230570111955916, 1.9221183231898717, 1.9211737768990653, 1.920219830104283, 1.9192553928920202, 1.9182782173156738, 1.9173002243041992, 1.9162961414882116, 1.9153099741254533, 1.914297444479806, 1.913285800388881, 1.9122638021196638, 1.9112373079572404, 1.9101946013314384, 1.909135409763881, 1.9080816677638464, 1.907012666974749, 1.9059288161141532, 1.904850687299456, 1.9037517138889857, 1.9026567595345634, 1.9015545845031738, 1.9004252978733607, 1.8992926733834403, 1.898141860961914, 1.8969978604997908, 1.8958257266453333, 1.8946574074881417, 1.8934781210763114, 1.8922820091247559, 1.8910784040178572, 1.889860016959054, 1.888650894165039, 1.8874096189226424, 1.886159896850586, 1.884896959577288, 1.883617605481829, 1.8823398862566267, 1.8810467720031738, 1.87972320829119, 1.8783948080880302, 1.8770576885768346, 1.8757143020629883, 1.8743206432887487, 1.8729304586138045], "val_accuracy": [0.04399999976158142, 0.04933333396911621, 0.055666666477918625, 0.06133333221077919, 0.06499999761581421, 0.07199999690055847, 0.07800000160932541, 0.08533333241939545, 0.09233333170413971, 0.10333333164453506, 0.1106666699051857, 0.11699999868869781, 0.12700000405311584, 0.13466666638851166, 0.1420000046491623, 0.14933332800865173, 0.1586666703224182, 0.16633333265781403, 0.17399999499320984, 0.1850000023841858, 0.19200000166893005, 0.20133332908153534, 0.20900000631809235, 0.21699999272823334, 0.22300000488758087, 0.2280000001192093, 0.23399999737739563, 0.2433333396911621, 0.25, 0.25433334708213806, 0.2619999945163727, 0.27133333683013916, 0.27900001406669617, 0.2853333353996277, 0.2906666696071625, 0.29633334279060364, 0.3019999861717224, 0.3083333373069763, 0.31299999356269836, 0.3166666626930237, 0.32066667079925537, 0.32600000500679016, 0.3330000042915344, 0.33766666054725647, 0.3423333466053009, 0.3466666638851166, 0.34966665506362915, 0.35466668009757996, 0.35633334517478943, 0.35899999737739563, 0.36266666650772095, 0.36399999260902405, 0.3659999966621399, 0.367333322763443, 0.37066665291786194, 0.37299999594688416, 0.3763333261013031, 0.3779999911785126, 0.3799999952316284, 0.382666677236557, 0.3840000033378601, 0.3840000033378601, 0.38466668128967285, 0.3869999945163727, 0.3903333246707916, 0.3919999897480011, 0.3943333327770233, 0.39533331990242004, 0.39899998903274536, 0.4000000059604645, 0.4009999930858612, 0.4033333361148834, 0.4050000011920929, 0.40533334016799927, 0.4076666533946991, 0.4086666703224182, 0.4103333353996277, 0.41233333945274353, 0.41333332657814026, 0.41499999165534973, 0.41600000858306885, 0.4183333218097687, 0.42233332991600037, 0.42399999499320984, 0.4259999990463257, 0.42800000309944153, 0.42899999022483826, 0.42899999022483826, 0.4313333332538605, 0.4326666593551636, 0.4333333373069763, 0.4346666634082794, 0.4363333284854889, 0.43666666746139526, 0.43799999356269836, 0.4386666715145111, 0.43933331966400146, 0.44066667556762695, 0.44200000166893005, 0.44466665387153625]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 1, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 9, 9, 2], [0, 0, 2, 0, 1, 2, 2, 2, 2, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 22, 27, 64, 79, 53, 52, 22], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.3805714249610901, "mapping_values": [1, 36, 36, 23, 13, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)), tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, grad), grad))))))), grad)), tf.math.divide_no_nan(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, alpha)), tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.9120275485532914, 2.2480548667932907, 2.3033378880021753, 2.3027780745023465, 2.290543798001498, 2.377293317545643], "accuracy": [0.17553824186325073, 0.1546691358089447, 0.09985470771789551, 0.10672302544116974, 0.1690661758184433, 0.09853387624025345], "val_loss": [1.754030636378697, 1.9742304938180106, 1.9738259996686662, 1.9723139490400041, 2.312609945024763, 1.9736949375697546], "val_accuracy": [0.3490000069141388, 0.09733333438634872, 0.09933333098888397, 0.1313333362340927, 0.10000000149011612, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 1, 3, 4, 4, 1, 0, 5, 2, 1, 5, 2, 9, 3, 2, 1, 0, 5, 0, 2, 3, 2, 0, 8, 2, 9, 2, 1, 0, 4, 6, 9], [2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 5, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 3, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.3805714249610901, "mapping_values": [1, 30, 30, 18, 12, 5, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.square(tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.square(grad)), tf.math.add(grad, tf.math.add(alpha, alpha)))))), grad)), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.9120275485532914, 2.2480548667932907, 2.3033378880021753, 2.3027780745023465, 2.290543798001498, 2.377293317545643], "accuracy": [0.17553824186325073, 0.1546691358089447, 0.09985470771789551, 0.10672302544116974, 0.1690661758184433, 0.09853387624025345], "val_loss": [1.754030636378697, 1.9742304938180106, 1.9738259996686662, 1.9723139490400041, 2.312609945024763, 1.9736949375697546], "val_accuracy": [0.3490000069141388, 0.09733333438634872, 0.09933333098888397, 0.1313333362340927, 0.10000000149011612, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 8, 0, 4, 5, 1, 0, 5, 2, 1, 8, 2, 9, 3, 2, 1, 0, 5, 0, 2, 3, 2, 0, 8, 2, 9, 2, 1, 0, 4, 6, 9], [3, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [91, 10, 22, 27, 64, 79, 53, 52, 22], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 3, 5, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 0, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [20, 25, 50, 71, 34]], "fitness": -0.3805714249610901, "mapping_values": [1, 23, 23, 15, 8, 1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(tf.math.add(alpha, grad), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, alpha), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.square(alpha)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.9120275485532914, 2.2480548667932907, 2.3033378880021753, 2.3027780745023465, 2.290543798001498, 2.377293317545643], "accuracy": [0.17553824186325073, 0.1546691358089447, 0.09985470771789551, 0.10672302544116974, 0.1690661758184433, 0.09853387624025345], "val_loss": [1.754030636378697, 1.9742304938180106, 1.9738259996686662, 1.9723139490400041, 2.312609945024763, 1.9736949375697546], "val_accuracy": [0.3490000069141388, 0.09733333438634872, 0.09933333098888397, 0.1313333362340927, 0.10000000149011612, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 8, 0, 4, 8, 1, 0, 5, 1, 1, 8, 2, 9, 3, 2, 1, 0, 5, 0, 2, 3, 2, 0, 8, 2, 9, 2, 1, 0, 4, 6, 9], [3, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 17, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [20, 25, 50, 71, 34]], "fitness": -0.3805714249610901, "mapping_values": [1, 19, 19, 13, 6, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad))), tf.math.subtract(tf.math.subtract(grad, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.9120275485532914, 2.2480548667932907, 2.3033378880021753, 2.3027780745023465, 2.290543798001498, 2.377293317545643], "accuracy": [0.17553824186325073, 0.1546691358089447, 0.09985470771789551, 0.10672302544116974, 0.1690661758184433, 0.09853387624025345], "val_loss": [1.754030636378697, 1.9742304938180106, 1.9738259996686662, 1.9723139490400041, 2.312609945024763, 1.9736949375697546], "val_accuracy": [0.3490000069141388, 0.09733333438634872, 0.09933333098888397, 0.1313333362340927, 0.10000000149011612, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [67, 25, 50, 71, 34]], "fitness": -0.2305714339017868, "mapping_values": [1, 24, 24, 14, 10, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha))))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.8033226631604418, 2.272072043637432, 2.301810732355144, 2.509687597032677, 2.3049557932678733, 2.3025046761608112, 2.4601605412761973, 2.3316294516806653], "accuracy": [0.1732928305864334, 0.15691454708576202, 0.11372341960668564, 0.1632545292377472, 0.09536388516426086, 0.10302469879388809, 0.1492537260055542, 0.15110288560390472], "val_loss": [1.9341611862182617, 1.9745244979858398, 1.9600122996738978, 1.977668081011091, 1.974287441798619, 1.9686899866376604, 1.9674105644226074, 1.983780997140067], "val_accuracy": [0.10866666585206985, 0.09733333438634872, 0.19699999690055847, 0.11266666650772095, 0.09700000286102295, 0.12866666913032532, 0.17866666615009308, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [8, 8, 0, 4, 5, 9, 2, 1, 9, 1, 5, 2, 9, 5, 0, 6, 0, 5, 0, 2, 8, 2, 0, 9, 2], [1, 0, 2, 0, 2, 2, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 35, 91, 57, 79, 58, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 1, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.subtract(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06168273836374283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 9, 2, 4, 5, 5, 2, 1, 2, 1, 5, 2, 6, 3, 2, 6, 9, 5, 0, 2, 8, 3, 0, 9, 2], [0, 1, 2, 2, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 65, 27, 57, 79, 58, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07013604789972305, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 8, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07013604789972305, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 3, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 2, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 1, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [68, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 8, 8, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.square(tf.math.add(alpha, alpha)), grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(grad, alpha), grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 4, 1, 2, 2, 1, 2, 1, 5, 2, 6, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 3, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 55, 35, 27, 57, 79, 58, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [49.15904228836239, 572.2548705909577, 2324.972640674789, 6190.6416522544905, 13032.757089139479, 23598.60137082494], "accuracy": [0.0944393053650856, 0.10672302544116974, 0.09800554811954498, 0.10011887550354004, 0.10355303436517715, 0.09945846349000931], "val_loss": [137.32084001813615, 833.6907610212054, 2619.855538504464, 6024.727818080357, 11577.424386160714, 19803.276227678572], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [6, 4, 2, 4, 5, 8, 2, 1, 2, 1, 5, 2, 9, 5, 0, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 2, 2, 0, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [57, 10, 60, 63, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(grad, tf.math.square(grad))))), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, beta)", "other_info": {"loss": [2.3028929202374906, 2.3023689498266506, 2.3016751771747255, 2.301707587584119, 2.301787104289829, 2.302620860863009], "accuracy": [0.09259014576673508, 0.09047681838274002, 0.09325055778026581, 0.09087307006120682, 0.09298639744520187, 0.08651433140039444], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [8, 4, 0, 4, 5, 3, 2, 2, 2, 1, 5, 6, 9, 3, 2, 0, 3, 2, 0, 9, 8, 2, 0, 9, 2], [0, 0, 2, 0, 2, 0, 2, 2, 2, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 35, 27, 38, 79, 12, 74, 30], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 0, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 23, 23, 14, 9, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), grad), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.math.negative(beta)))", "other_info": {"loss": [2.3028929202374906, 2.3023689498266506, 2.3016751771747255, 2.301707587584119, 2.301787104289829, 2.302620860863009], "accuracy": [0.09259014576673508, 0.09047681838274002, 0.09325055778026581, 0.09087307006120682, 0.09298639744520187, 0.08651433140039444], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]