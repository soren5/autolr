[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.7948571443557739, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0545530646405656, 1.4365103598898112, 1.0230369309487202, 0.9406897961628861, 0.8457361465715351, 0.7276123766775664, 0.7180861062172806, 0.683432704634623, 0.6601567117214644, 0.6235730460039329, 0.6486081668272813, 0.5974913779628936, 0.590197079736858, 0.5820361428634917, 0.5939439812301408, 0.5476970919024722, 0.5175474089654114, 0.5182150239642774, 0.5273225436774637, 0.5107610578613195], "accuracy": [0.3140932619571686, 0.5241051316261292, 0.6288469433784485, 0.6552634835243225, 0.6860388517379761, 0.7320036888122559, 0.7232862114906311, 0.7368907928466797, 0.7548540234565735, 0.755118191242218, 0.7563069462776184, 0.7718927264213562, 0.7741381525993347, 0.7827235460281372, 0.7726852297782898, 0.7938185334205627, 0.8104609847068787, 0.8026680946350098, 0.8006868362426758, 0.8095363974571228], "val_loss": [1.6118807111467635, 0.7932642357689994, 0.9391558510916573, 0.6583044699260167, 0.6091204541070121, 0.5597994157246181, 0.5408102784837995, 0.5284011023385184, 0.5446519340787616, 0.5197309255599976, 0.49835824966430664, 0.47289764881134033, 0.46922411237444195, 0.48913027559007916, 0.4320704085486276, 0.4342514531952994, 0.46355689423424856, 0.4469441516058786, 0.4239042231014797, 0.46809904064450947], "val_accuracy": [0.5983333587646484, 0.6539999842643738, 0.5929999947547913, 0.6913333535194397, 0.7396666407585144, 0.7409999966621399, 0.7386666536331177, 0.7616666555404663, 0.749666690826416, 0.7770000100135803, 0.7900000214576721, 0.8003333210945129, 0.7916666865348816, 0.7876666784286499, 0.8186666369438171, 0.8136666417121887, 0.7863333225250244, 0.8073333501815796, 0.8183333277702332, 0.7883333563804626]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [1, 3, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 65, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [2, 3, 3, 1], [8, 38]], "fitness": -0.6342856884002686, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(beta, sigma), sigma))", "other_info": {"loss": [2.3035064123688027, 2.302548951382146, 2.3009838361655715, 2.2978651443917784, 2.2950909394062804, 2.295663073865603, 2.2933229903157013, 2.292740513761644, 2.290840894129487, 2.2871056836845853, 2.287637709406121, 2.2856174337865496, 2.2828125009888183, 2.281154643999603, 2.2818004350935572, 2.279458740242185, 2.2798610739405003, 2.2748327967576096, 2.2743451372979733, 2.270578451790216, 2.2685344987273957, 2.2679799367030222, 2.2639165791569607, 2.260965821891334, 2.2590577328729435, 2.2562209723758158, 2.253495703976719, 2.2479545162212515, 2.2408330257873272, 2.2361392067911887, 2.2279616680442538, 2.2200378438563884, 2.208316445555339, 2.1959986712529185, 2.17478956346105, 2.145403722431272, 2.1075970675289954, 2.0489262100444448, 1.9651036205828356, 1.8432380856303743, 1.6936286183207216, 1.5517343736957676, 1.4534144264879227, 1.6365377526037004, NaN, NaN, NaN, NaN], "accuracy": [0.09311848133802414, 0.0866464152932167, 0.0874389111995697, 0.10196803510189056, 0.10196803510189056, 0.11121384054422379, 0.11491216719150543, 0.11306300014257431, 0.1224408894777298, 0.1270637959241867, 0.12851670384407043, 0.13432836532592773, 0.13829085230827332, 0.14238542318344116, 0.14080041646957397, 0.15651829540729523, 0.14489498734474182, 0.15572579205036163, 0.1562541276216507, 0.17170783877372742, 0.1744815707206726, 0.16893409192562103, 0.18002906441688538, 0.1732928305864334, 0.18874652683734894, 0.19072777032852173, 0.19535067677497864, 0.19759608805179596, 0.21318188309669495, 0.2180689424276352, 0.22176727652549744, 0.22361643612384796, 0.2374851405620575, 0.24501386284828186, 0.252938836812973, 0.2845066785812378, 0.29045039415359497, 0.30999869108200073, 0.34447231888771057, 0.3793422281742096, 0.41883501410484314, 0.45172369480133057, 0.47087571024894714, 0.48064985871315, 0.10791176557540894, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9702478817531042, 1.9693692071097237, 1.9680629457746233, 1.966653755732945, 1.9649684088570731, 1.963280473436628, 1.961655616760254, 1.9599168641226632, 1.9582629884992326, 1.9566452162606376, 1.9550762176513672, 1.9535926410130091, 1.9520418303353446, 1.9504639761788505, 1.9488627570016044, 1.9471643311636788, 1.9454201289585658, 1.9434257916041784, 1.9413644926888602, 1.9390679086957658, 1.9366891724722726, 1.9341432707650321, 1.9313203266688757, 1.928117002759661, 1.924844537462507, 1.9211715970720564, 1.9170220238821847, 1.9120738846915108, 1.906003134591239, 1.898902211870466, 1.8903333800179618, 1.879823820931571, 1.8662478583199638, 1.8488103321620397, 1.8248134340558733, 1.7889161791120256, 1.7374016216823034, 1.6564397811889648, 1.5321953296661377, 1.3596912111554826, 1.1729464190346854, 1.036163432257516, 0.9473070757729667, 246.35931396484375, NaN, NaN, NaN, NaN], "val_accuracy": [0.041333332657814026, 0.04533333331346512, 0.05533333495259285, 0.061666667461395264, 0.07766667008399963, 0.09133332967758179, 0.10533333569765091, 0.11833333224058151, 0.1316666603088379, 0.14533333480358124, 0.16066665947437286, 0.17299999296665192, 0.1850000023841858, 0.19833333790302277, 0.20900000631809235, 0.21799999475479126, 0.2303333282470703, 0.23899999260902405, 0.24933333694934845, 0.26233333349227905, 0.27399998903274536, 0.29233333468437195, 0.3096666634082794, 0.32600000500679016, 0.33799999952316284, 0.3540000021457672, 0.36533331871032715, 0.3786666691303253, 0.3973333239555359, 0.40933331847190857, 0.42266666889190674, 0.4246666729450226, 0.43066665530204773, 0.43566668033599854, 0.4413333237171173, 0.4493333399295807, 0.4593333303928375, 0.49266666173934937, 0.5203333497047424, 0.5523333549499512, 0.593999981880188, 0.6100000143051147, 0.6330000162124634, 0.1863333284854889, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 0, 1, 0, 1, 1, 0, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 4, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 9, 8, 4, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(beta, tf.math.add(beta, grad)), tf.math.subtract(tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [7, 6, 4, 2, 4, 3, 4, 7, 0, 8, 3, 2, 5, 2, 8, 0, 2, 3, 3, 0], [0, 1, 2, 3, 0, 3, 0, 2, 0, 3, 1, 2, 1, 3, 0], [44, 57, 63, 98, 28], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 6, 8, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 0, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [0, 0, 1], [3, 3], [2], [85], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 4, 6, 5, 5, 5, 7], [0, 3, 2, 1, 2], [10, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 35, 35, 20, 15, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 7, 5, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha)))), tf.math.add(tf.math.multiply(tf.math.multiply(grad, tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.pow(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(sigma), beta)), alpha), tf.math.square(tf.math.square(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 0, 2, 3], [24, 57], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1], [1, 6, 6, 3, 3, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 1, 1, 3, 1, 0, 1], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 4, 9], [3, 2, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 10, 11, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, beta), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))))), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), beta)), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1], [3, 7, 4, 9], [3, 2, 0, 3], [44, 57], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 6, 8, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 3, 7], [0], [74], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [4, 3, 4, 6, 5, 5, 5, 7], [1, 3, 2, 1, 2], [10, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 1, 5, 5, 2, 3, 1, 7, 4, 3, 1, 1, 12, 7, 5, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.math.add(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.square(sigma), beta)), tf.math.square(tf.math.square(alpha))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [0, 3, 3, 1], [61, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), sigma)), sigma))", "other_info": {"loss": [684067.2493530541, 13137990.815480122, 59643704.14370625, 166453794.00132084, 351890272.109893, 655861509.0212654], "accuracy": [0.09721305221319199, 0.09655263274908066, 0.09774138033390045, 0.10051512718200684, 0.10236428678035736, 0.09972262382507324], "val_loss": [2553267.0714285714, 20352462.285714287, 68608813.71428572, 162533366.85714287, 317337709.71428573, 548233142.8571428], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [3, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 9, 9, 4, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(beta, grad)), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07766477018594742, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 4, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4, 0], [], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 6, 9, 6, 2, 3, 5, 6, 7, 7, 9, 0, 1, 4, 9, 1, 1, 4, 1, 4, 8, 4, 4, 8, 1], [3, 1, 3, 1, 1, 0, 1, 3, 0, 1, 2, 2, 3, 2, 2, 0, 0], [45, 55, 18, 90, 49, 70, 53]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 44, 27, 17, 7], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(sigma, alpha), tf.math.multiply(tf.math.square(sigma), tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.math.pow(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(alpha, sigma)))))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(alpha, tf.math.subtract(beta, tf.math.pow(beta, tf.math.sqrt(tf.math.pow(sigma, tf.math.pow(beta, beta)))))), tf.math.sqrt(tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 0, 2, 3], [50, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 2, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 0, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [22083.298798447602, 416616.3260219918, 1882671.8422599393, 5243543.2516840575, 11072909.98520671, 20623683.290978733], "accuracy": [0.09694888442754745, 0.09655263274908066, 0.09774138033390045, 0.10051512718200684, 0.10236428678035736, 0.09972262382507324], "val_loss": [81500.27232142857, 643497.4285714285, 2162869.8571428573, 5116487.857142857, 9981229.42857143, 17234007.42857143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 6, 6, 6, 1, 1, 9, 3, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 8, 3, 8, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 27, 27, 17, 10, 5, 1, 1, 0, 1, 0, 6, 4, 2, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.subtract(grad, tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.sqrt(sigma), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 1, 2, 3], [44, 57], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 0, 1, 3, 0, 0], [15, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [4, 3, 3, 6, 9], [3, 3, 3, 1], [51, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 20, 20, 10, 10, 4, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), sigma)), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [7, 6, 4, 9], [2, 2, 2, 3], [44, 57], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [6, 5, 0, 5, 2, 4, 8, 2, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 0, 0, 3, 3, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [7], [2], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [9, 7, 3, 6, 9, 6, 9, 0], [3, 2, 3, 1, 3, 0], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 18, 18, 11, 7, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.square(tf.math.negative(tf.math.add(beta, grad))), tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), grad))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302303608776068, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 3, 2, 3], [86, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 4, 1, 0, 1, 1, 3, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1, 1], [3, 3], [4, 0], [32], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [8, 3, 3, 6, 9, 3, 8, 4], [0, 3, 1, 1, 2, 2, 3, 3], [96, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 3, 1, 1, 0, 1, 0, 13, 8, 5, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(beta, alpha), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.sqrt(tf.math.pow(alpha, beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 2, 6, 3, 1, 2, 0, 4, 0, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 0, 3, 2], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0], [3, 6, 1, 9], [4, 2], [82], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 3, 5, 6, 1, 3, 3, 3, 2, 4, 5, 2, 4, 1, 4, 7, 3, 8, 5, 4, 1, 3, 3, 2, 6, 2, 3, 6, 6, 1, 2, 7, 8, 1, 8, 0, 8], [0, 0, 0, 1, 1, 0, 0, 1, 3, 3, 1, 1, 0, 1, 3, 3, 2, 2, 2, 3, 1, 2, 2, 0, 1, 3, 2, 1, 2], [42, 38, 6, 3, 26, 15, 31]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 3, 4, 0, 5, 4, 2, 2, 0, 66, 37, 29, 7], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.multiply(tf.math.add(tf.math.pow(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.sqrt(sigma), tf.math.square(tf.math.pow(sigma, tf.math.subtract(tf.math.multiply(alpha, tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, sigma))))), sigma), beta))), beta))), tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.divide_no_nan(sigma, alpha)), tf.math.subtract(beta, beta)), tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), alpha)), sigma))))), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.sqrt(beta), tf.math.negative(alpha))), tf.math.sqrt(beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [1, 3, 3, 1], [25, 38]], "fitness": -0.07742857187986374, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 8, 4, 4, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(alpha, sigma), tf.math.divide_no_nan(sigma, alpha)))", "other_info": {"loss": [2.3041365851721096, 2.3053660667992824, 2.306928068781258, 2.306930057124817, 2.307925453495907, 2.314208962583208, 2.3170770695023393, 2.3249085964449265, 2.33193086541765, 2.3401067724884177, 2.3723540333803412, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09153348207473755, 0.08136309683322906, 0.07489103078842163, 0.08572183549404144, 0.07660810649394989, 0.08109892904758453, 0.07687227427959442, 0.07370228320360184, 0.07198520749807358, 0.07674019038677216, 0.0796460211277008, 0.09509972482919693, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9717705590384347, 1.9732963017054967, 1.9749548094613212, 1.9767842292785645, 1.9787979807172502, 1.9813339369637626, 1.9843245233808244, 1.9884886741638184, 1.9952774729047502, 2.006918157849993, 2.049696922302246, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.032999999821186066, 0.028999999165534973, 0.03133333474397659, 0.027666667476296425, 0.028333334252238274, 0.03433333337306976, 0.043666668236255646, 0.06233333423733711, 0.0820000022649765, 0.0963333323597908, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 3, 6, 6, 5, 2, 2, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [8, 3, 3, 5, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.07485714554786682, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 7, 4, 3, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.math.square(sigma), sigma), sigma))", "other_info": {"loss": [2.3031968559964993, 2.301910520245481, 2.301086362263845, 2.2992016474300954, 2.298226529612533, 2.3001516531361186, 2.2995958123555384, 2.300481268789916, 2.299685090618867, 2.298580125306875, 2.3000847560193294, 2.2999814258606173, 2.299246586198899, 2.2995153829453407, 2.3007353313878354], "accuracy": [0.09311848133802414, 0.08770307898521423, 0.08968432247638702, 0.09959053993225098, 0.09893012791872025, 0.09906221181154251, 0.09945846349000931, 0.09470347315073013, 0.09615638852119446, 0.09906221181154251, 0.09866596013307571, 0.09787346422672272, 0.10289261490106583, 0.10038304328918457, 0.09549596905708313], "val_loss": [1.9698048319135393, 1.9692904608590263, 1.9690868513924735, 1.9690991810389928, 1.9692115102495467, 1.969195978982108, 1.9692144393920898, 1.9691155978611536, 1.9690356254577637, 1.969198771885463, 1.969454288482666, 1.96981566292899, 1.9700732912336076, 1.970315796988351, 1.9704947471618652], "val_accuracy": [0.04800000041723251, 0.05233333259820938, 0.05900000035762787, 0.061000000685453415, 0.06199999898672104, 0.06833333522081375, 0.07266666740179062, 0.07733333110809326, 0.07766667008399963, 0.0793333351612091, 0.07766667008399963, 0.07466666400432587, 0.07400000095367432, 0.0729999989271164, 0.07500000298023224]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 8, 6, 6, 5, 2, 2, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 2, 0, 1, 0, 1, 1, 3, 0, 0], [32, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [7], [], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [9, 7, 3, 6, 9, 6, 9, 0], [3, 3, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 3, 4, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.sqrt(beta)), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3036063179096224, 2.303231942513521, 2.3028362647590543, 2.3010649557331564, 2.2998753278609105, 2.3023109862108777], "accuracy": [0.09259014576673508, 0.08387266844511032, 0.08228767663240433, 0.0944393053650856, 0.09047681838274002, 0.09259014576673508], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0], [7, 1, 4, 9], [3, 0, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [3, 5, 0, 6, 2, 4, 2, 2, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 5, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 3, 2], [0], [53], [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 0, 6, 6, 3, 4], [3, 2, 3, 1, 3, 0], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 5, 5, 2, 3, 1, 18, 18, 10, 8, 1, 7, 4, 3, 1, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(grad)))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.math.add(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3036063179096224, 2.303231942513521, 2.3028362647590543, 2.3010649557331564, 2.2998753278609105, 2.3023109862108777], "accuracy": [0.09259014576673508, 0.08387266844511032, 0.08228767663240433, 0.0944393053650856, 0.09047681838274002, 0.09259014576673508], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 4, 1, 0, 1, 1, 3, 3, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 5, 6, 9], [3, 3, 3, 1], [11, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 4, 3, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.square(tf.math.divide_no_nan(sigma, sigma)), sigma))", "other_info": {"loss": [2.3036063179096224, 2.303231942513521, 2.3028362647590543, 2.3010649557331564, 2.2998753278609105, 2.3023109862108777], "accuracy": [0.09259014576673508, 0.08387266844511032, 0.08228767663240433, 0.0944393053650856, 0.09047681838274002, 0.09259014576673508], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]