[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 86, 50], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 0, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 2, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.7977142930030823, "mapping_values": [1, 3, 3, 2, 1, 2, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 9, 4, 5, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), beta), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.180777874368923, 1.5035489411669605, 1.159159417779706, 0.986194884559781, 0.8993609630436457, 0.8208868297068135, 0.7986243371367691, 0.7802982351106345, 0.740074914507248, 0.7332497932781491, 0.6949110328324514, 0.7024736598088772, 0.676723783215543, 0.6728718729381942, 0.6449358557996623, 0.6360095795576111, 0.6229708875647436, 0.6259188700456031, 0.6301710318738065, 0.5942326442771159, 0.6054552705091745, 0.5882709926192818, 0.5840843618034198, 0.5791562362794848], "accuracy": [0.2779025137424469, 0.5045568346977234, 0.5930524468421936, 0.6394135355949402, 0.6713775992393494, 0.694360077381134, 0.7021529674530029, 0.7066437602043152, 0.7264562249183655, 0.7251353859901428, 0.7403249144554138, 0.7351737022399902, 0.746268630027771, 0.7469290494918823, 0.7537974119186401, 0.7607977986335754, 0.7629110813140869, 0.7625148296356201, 0.7626469135284424, 0.7770439982414246, 0.7660810947418213, 0.776251494884491, 0.7798177003860474, 0.778761088848114], "val_loss": [1.5122828483581543, 1.0719035693577357, 0.8267013515744891, 0.6803577797753471, 0.6272846290043422, 0.5928129638944354, 0.5775166920253209, 0.548234394618443, 0.5563620499202183, 0.5248546259743827, 0.559500881603786, 0.5133299146379743, 0.5564021042415074, 0.5015682833535331, 0.4853921277182443, 0.48863639150347027, 0.4820209060396467, 0.48723059041159494, 0.4642139843532017, 0.49012018953050884, 0.45794796092169626, 0.45059565135410856, 0.49088897023882183, 0.4524337223597935], "val_accuracy": [0.562666654586792, 0.6113333106040955, 0.6499999761581421, 0.6863333582878113, 0.7233333587646484, 0.7296666502952576, 0.7423333525657654, 0.7756666541099548, 0.7379999756813049, 0.7673333287239075, 0.7403333187103271, 0.7913333177566528, 0.7480000257492065, 0.7856666445732117, 0.7903333306312561, 0.7786666750907898, 0.793666660785675, 0.7900000214576721, 0.8140000104904175, 0.7823333144187927, 0.7983333468437195, 0.8119999766349792, 0.7803333401679993, 0.8053333163261414]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 89, 50], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 0, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 2, 3, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.29171428084373474, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, sigma), beta)", "other_info": {"loss": [2.2996309063674247, 2.3020903713053498, 2.304044150153581, 2.3012591621044716, 2.3013299536223206, 2.301875270793876, 2.3013487134265107, 2.3011596564367354, 2.299622407505588, 2.2994708157391863, 2.298476504485967, 2.298132919758192, 2.2990089222078294, 2.2986404795011177, 2.29687859199271, 2.297065113954666, 2.296488181931578, 2.2967849282257276, 2.295480266994788, 2.295382011898788, 2.294946655699952, 2.295455614935689, 2.2937651259976923, 2.2941262856167164, 2.2951912263979324, 2.2941927421740127, 2.2940511632321487, 2.292527091973934, 2.2930864013653736, 2.2933570670728844, 2.2921813791454144, 2.2930005746447666, 2.2924970481783378, 2.29115112359104, 2.2910872226566954, 2.291984527559171, 2.2918606564951705, 2.289560045627256, 2.2887090366624525, 2.2897342076123337, 2.2890576304792334, 2.289641678278173, 2.286948072471009, 2.2880415724662506, 2.2884200559615335, 2.2864502234591817, 2.2895280409482774, 2.2885422426963666, 2.2865500041695634, 2.2866997758174823, 2.2845561801639325, 2.285300282470901, 2.2860795136818153, 2.2856581720300024, 2.2850153844873935, 2.2846515173012034, 2.2836409436713248, 2.2849662648751328, 2.2849543547476006, 2.283551232343368, 2.282515871274457, 2.2844337483029307, 2.2829555660238228, 2.2819976139345726, 2.2817130837977726, 2.2802692382657814, 2.281184741928278, 2.282449260631557, 2.28092347947346, 2.2794218593348505, 2.2783425643443747, 2.2799403838761148, 2.278276194985737, 2.2791431669734803, 2.2792857140440432, 2.2781401511590245, 2.277571782144998, 2.277081361237046, 2.2772272617872664, 2.2759907756105564, 2.2768230464999797, 2.276836437083758, 2.2769087525784553, 2.2779202485805676, 2.275597097756856, 2.275191655768033, 2.2751753235127805, 2.272840808521503, 2.274907536589159, 2.273851602021745, 2.273223927149825, 2.2730792269431492, 2.273561052532244, 2.273360076471484, 2.271098641325155, 2.270766550130092, 2.2721009897187465, 2.270380876414166, 2.2710893206104483, 2.2712292166087513], "accuracy": [0.09747721254825592, 0.0936468094587326, 0.09060890227556229, 0.09377889335155487, 0.09959053993225098, 0.09074098616838455, 0.09245806187391281, 0.09417514503002167, 0.1006472036242485, 0.09694888442754745, 0.10210011899471283, 0.09840179979801178, 0.1018359512090683, 0.09919429570436478, 0.10460969805717468, 0.10381719470024109, 0.10328886657953262, 0.10738343745470047, 0.10645885765552521, 0.10474177449941635, 0.11227050423622131, 0.11081759631633759, 0.10698718577623367, 0.10910051316022873, 0.10698718577623367, 0.11094967275857925, 0.11227050423622131, 0.11332716792821884, 0.11213842034339905, 0.11702549457550049, 0.10342095047235489, 0.1138555034995079, 0.11927089840173721, 0.12217672914266586, 0.12178047746419907, 0.11636507511138916, 0.11821424216032028, 0.12336547672748566, 0.11953506618738174, 0.12059172987937927, 0.12178047746419907, 0.12230881303548813, 0.12878087162971497, 0.1254788041114807, 0.11676132678985596, 0.12640337646007538, 0.12323339283466339, 0.1200634017586708, 0.1356491893529892, 0.12495046854019165, 0.13168670237064362, 0.13710209727287292, 0.1332716941833496, 0.12798838317394257, 0.13459251821041107, 0.14212125539779663, 0.1394795924425125, 0.1290450394153595, 0.1348566859960556, 0.1410645842552185, 0.13829085230827332, 0.13868708908557892, 0.14291374385356903, 0.14119666814804077, 0.14780081808567047, 0.14898955821990967, 0.13895125687122345, 0.14080041646957397, 0.14542332291603088, 0.15136705338954926, 0.14780081808567047, 0.14555540680885315, 0.15321621298789978, 0.14819706976413727, 0.1516312211751938, 0.16074495017528534, 0.15651829540729523, 0.15691454708576202, 0.15863162279129028, 0.16272619366645813, 0.15678246319293976, 0.1530841439962387, 0.1546691358089447, 0.1546691358089447, 0.15915995836257935, 0.15176330506801605, 0.16312244534492493, 0.16959451138973236, 0.15440496802330017, 0.16840575635433197, 0.1636507660150528, 0.16814158856868744, 0.16417910158634186, 0.17051908373832703, 0.16483952105045319, 0.17263241112232208, 0.1690661758184433, 0.17236824333667755, 0.1752740740776062, 0.17144367098808289], "val_loss": [1.9702863012041365, 1.9699811935424805, 1.9696762221200126, 1.9693667548043388, 1.9690607615879603, 1.9687580381120955, 1.968454156603132, 1.9681457110813685, 1.9678399222237724, 1.9675393785749162, 1.9672365869794572, 1.966932909829276, 1.9666341372898646, 1.9663299833025252, 1.9660287584577287, 1.9657278742109026, 1.9654295103890556, 1.965132236480713, 1.9648291042872839, 1.9645331927708216, 1.9642356463841029, 1.963935443333217, 1.9636378969464983, 1.9633381026131767, 1.9630357878548759, 1.9627362659999303, 1.9624359267098563, 1.962137154170445, 1.9618377004350935, 1.9615394728524345, 1.9612424714224679, 1.9609456062316895, 1.9606503759111678, 1.9603557586669922, 1.9600598471505302, 1.959763731275286, 1.9594674791608537, 1.9591681616646903, 1.9588681629725866, 1.9585669381277901, 1.9582667350769043, 1.9579716409955705, 1.9576738902500697, 1.9573747089930944, 1.9570772307259696, 1.956777708871024, 1.956479276929583, 1.9561793463570731, 1.9558824130467005, 1.9555840492248535, 1.9552820750645228, 1.954982076372419, 1.9546873228890556, 1.95438780103411, 1.9540903227669852, 1.9537898472377233, 1.9534905978611536, 1.953190735408238, 1.9528919628688268, 1.9525954382760184, 1.9522953033447266, 1.9519943509783064, 1.9516938754490443, 1.9513934680393763, 1.951094082423619, 1.9507928575788225, 1.9504949024745397, 1.9501971517290388, 1.9498983791896276, 1.9495952469961983, 1.9492964063371931, 1.9489991324288505, 1.9486980438232422, 1.948399271283831, 1.9480992725917272, 1.9477954592023576, 1.9474945749555315, 1.9471931457519531, 1.9468915803091866, 1.9465906279427665, 1.9462883813040597, 1.9459855215890067, 1.9456836155482702, 1.9453810964311873, 1.945075580051967, 1.944772447858538, 1.9444661140441895, 1.9441591671534948, 1.943854468209403, 1.9435532433646066, 1.9432461602347237, 1.9429383959089006, 1.9426350593566895, 1.9423257282802038, 1.942018781389509, 1.941708769117083, 1.9414034570966447, 1.9410954884120397, 1.9407898357936315, 1.940481390271868], "val_accuracy": [0.0403333343565464, 0.041999999433755875, 0.044333335012197495, 0.04699999839067459, 0.04899999871850014, 0.05000000074505806, 0.052666667848825455, 0.05433333292603493, 0.056333333253860474, 0.059333331882953644, 0.061000000685453415, 0.061666667461395264, 0.06433333456516266, 0.06533333659172058, 0.06599999964237213, 0.070333331823349, 0.07266666740179062, 0.07533333450555801, 0.07766667008399963, 0.07866666465997696, 0.0820000022649765, 0.08433333039283752, 0.08766666799783707, 0.09000000357627869, 0.09300000220537186, 0.0949999988079071, 0.10000000149011612, 0.10400000214576721, 0.10833333432674408, 0.11033333092927933, 0.11233333498239517, 0.11366666853427887, 0.11733333021402359, 0.12099999934434891, 0.12433333694934845, 0.12733332812786102, 0.1289999932050705, 0.1316666603088379, 0.1353333294391632, 0.13699999451637268, 0.140666663646698, 0.14433333277702332, 0.14633333683013916, 0.14866666495800018, 0.15199999511241913, 0.15533334016799927, 0.15966667234897614, 0.1626666635274887, 0.16500000655651093, 0.1679999977350235, 0.1706666648387909, 0.1733333319425583, 0.17733334004878998, 0.18033333122730255, 0.18533332645893097, 0.18799999356269836, 0.1899999976158142, 0.19366666674613953, 0.19733333587646484, 0.20000000298023224, 0.2029999941587448, 0.20733332633972168, 0.20999999344348907, 0.21133333444595337, 0.21533332765102386, 0.2163333296775818, 0.22033333778381348, 0.22200000286102295, 0.2226666659116745, 0.2240000069141388, 0.2280000001192093, 0.2303333282470703, 0.2316666692495346, 0.23466666042804718, 0.23499999940395355, 0.23800000548362732, 0.23999999463558197, 0.24266666173934937, 0.24566666781902313, 0.24666666984558105, 0.24933333694934845, 0.2523333430290222, 0.2549999952316284, 0.2593333423137665, 0.2619999945163727, 0.2639999985694885, 0.2666666805744171, 0.26899999380111694, 0.27300000190734863, 0.27433332800865173, 0.2770000100135803, 0.2796666622161865, 0.28166666626930237, 0.28466665744781494, 0.28733333945274353, 0.2919999957084656, 0.29499998688697815, 0.2956666648387909, 0.29633334279060364, 0.2980000078678131]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 22, 50], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 0, 2, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0], [4, 2, 2, 3, 6, 6, 7, 0, 5, 3, 3, 9], [1, 3, 2, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 21, 12, 9, 3], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.add(sigma, tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), sigma), beta), beta), tf.math.negative(tf.math.square(tf.math.multiply(sigma, tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [6, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 86, 50], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 1, 3, 3, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 5, 0, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 2, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 12, 12, 7, 5, 3, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), grad), tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [2, 4, 6, 6, 0, 3, 4, 1, 5, 4], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 86, 50, 66, 74], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 2, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [1, 3, 8, 3, 6, 9], [1, 1, 1, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 10, 9, 5, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 10, 6, 4, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), tf.math.pow(tf.math.add(alpha, grad), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.sqrt(alpha), tf.math.multiply(alpha, tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [6, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [45, 86, 50], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 7, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 2, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 2, 2, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 7, 7, 3, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, beta), beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [29560279.748078723, 568025963.0865144, 2677209336.087703, 7200646649.440232, 15708870274.857218, 28816001422.45516], "accuracy": [0.09734513610601425, 0.10196803510189056, 0.09338264167308807, 0.1014397069811821, 0.09325055778026581, 0.09813763201236725], "val_loss": [112174301.71428572, 896375753.1428572, 3024133046.857143, 7166925092.571428, 13996388644.571428, 24183988224.0], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [8, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 86, 50], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 1, 3, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 2, 2, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [51994503579.768684, 7827449562669.918, 134820195508640.58, 920003300923510.8, 4144738924808756.0, 1.3639839884781576e+16], "accuracy": [0.09734513610601425, 0.10196803510189056, 0.09325055778026581, 0.10170386731624603, 0.09311848133802414, 0.09774138033390045], "val_loss": [430574693814.8571, 23211650430683.43, 249126174626377.16, 1357994302373888.0, 5089719855611904.0, 1.5015403542094994e+16], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 86, 50], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 0, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [7, 3], [], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [3, 3, 8, 3, 6, 9, 6, 6, 1, 6, 3, 6, 3, 9, 3, 9, 8, 1, 0, 0, 9], [1, 2, 2, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34, 77]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 31, 21, 10, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, tf.math.divide_no_nan(beta, tf.math.subtract(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(sigma, beta), tf.math.multiply(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma)))))), tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.subtract(tf.math.negative(tf.math.negative(sigma)), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5, 0, 9], [1, 3, 0, 2, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [23, 24, 50, 99], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 3, 3, 0, 2, 1, 3, 0, 0], [63, 17, 93, 84, 1, 78], [1, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [9, 3, 2, 3, 3, 2, 6], [1, 3, 2, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 11, 5, 3, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302334627439443, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 86, 50], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 6, 1, 3, 3, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 3, 0, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [0, 3], [89], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 6, 3, 6, 9], [1, 0, 2, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 12, 12, 7, 5, 3, 1, 1, 0, 1, 1, 9, 4, 5, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), beta)), tf.math.add(beta, grad)), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [7, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 0, 3, 0, 8, 0, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [4, 9, 2, 3, 6, 6, 4, 2, 8, 9, 5, 3], [1, 3, 2, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [75, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 9, 9, 7, 2, 3, 1, 0, 0, 0, 0, 19, 12, 7, 3], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(sigma)), tf.math.multiply(beta, beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [3, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [23, 22, 50], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 0, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 1, 0, 0], [3, 3, 0], [4, 3], [0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [9, 3, 2, 3, 3, 2, 6], [1, 3, 2, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 6, 4, 3, 1, 0, 1, 1, 0, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.negative(sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302334627439443, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 0, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 1, 0, 3, 3, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [7, 3], [0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [8, 3, 2, 3, 9, 2, 6, 0, 3, 9, 2, 7, 5, 8, 2, 7, 6, 5, 0], [3, 3, 0, 0, 3, 2, 3, 2, 3, 1, 0, 3, 2, 1], [25, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), sigma)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1], [2, 9, 6, 6, 0, 3, 2, 1, 5, 1, 6, 4, 8, 4, 9, 7, 2, 2, 9], [0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 47, 50, 3, 77, 80, 70, 17, 66, 88, 33], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 0, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 19, 11, 11, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 7, 3, 4, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), beta), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [2, 1, 6, 6, 0, 3, 4, 1, 5, 6, 5, 7, 5, 3, 4, 7, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [94, 42, 50, 0, 84, 54, 53], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 0, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 2, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 17, 13, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(grad)))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(grad), tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, sigma), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 8, 6, 4, 6, 4, 1, 5, 9], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 86, 50, 1, 44], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 0, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [3, 8, 8, 3, 6, 9], [1, 2, 2, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1244684818.7405498, 23951364155.51129, 112935674034.53387, 303810591255.3311, 662861261562.015, 1216005562894.9456], "accuracy": [0.09734513610601425, 0.10196803510189056, 0.09338264167308807, 0.1014397069811821, 0.09325055778026581, 0.09800554811954498], "val_loss": [4727280201.142858, 37806755254.85714, 127586229101.71428, 302406060324.5714, 590616255341.7142, 1020549548324.5714], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [8, 8, 6, 6, 0, 3, 4, 1, 5, 1, 9], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 86, 50, 77, 27], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 1, 3, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 0, 3, 0, 2, 1, 3, 0, 0], [1, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [9, 3, 2, 3, 3, 2, 6], [1, 3, 2, 2, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 11, 6, 5, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [68, 22, 50], [1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 6, 1, 3, 3, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 1, 2, 3, 3, 2, 1, 3, 0, 0], [87, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [0, 3, 2, 3, 3, 2, 6, 0, 3, 2, 3, 2, 8, 4, 5, 2, 2, 6, 5, 8, 8], [1, 3, 2, 0, 3, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [12, 73, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 7, 5, 1, 6, 4, 3, 1, 0, 36, 21, 15, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, alpha))), beta), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.multiply(alpha, sigma), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.add(sigma, tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.square(beta)))), beta)), sigma))))), sigma), tf.math.sqrt(tf.math.sqrt(beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 86, 50], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 0, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [0, 3, 2, 0, 2, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 9, 4, 5, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), sigma), beta), tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.299763383614688, 2.302545539455139, 2.30482774854037, 2.3023770882421717, 2.302772879931181, 2.30363128824855], "accuracy": [0.09721305221319199, 0.09245806187391281, 0.08875974267721176, 0.09087307006120682, 0.09549596905708313, 0.08730682730674744], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [8, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 86, 50], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 0, 4, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 0, 3, 0, 2, 1, 3, 0, 0], [82, 17, 93, 84, 1, 78], [1, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [8, 3, 2, 3, 3, 2, 6], [3, 3, 0, 0, 3, 2], [39, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 2, 2, 2, 0, 1, 8, 8, 5, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, alpha)))), beta))), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.299763383614688, 2.302545539455139, 2.30482774854037, 2.3023770882421717, 2.302772879931181, 2.30363128824855], "accuracy": [0.09721305221319199, 0.09245806187391281, 0.08875974267721176, 0.09087307006120682, 0.09549596905708313, 0.08730682730674744], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]