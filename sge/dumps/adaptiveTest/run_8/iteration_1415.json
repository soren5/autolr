[{"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 6, 2, 0, 3, 2, 5, 3, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 5, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 69, 20, 87, 76, 68, 45, 51, 66, 54, 91, 82, 43]], "fitness": -0.8299999833106995, "mapping_values": [1, 1, 1, 0, 1, 0, 36, 36, 25, 11, 6, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), beta)))))))))))))))), alpha)))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.010371208190918, 1.6043238639831543, 1.056862473487854, 0.9374247789382935, 0.7763105034828186, 0.7464602589607239, 0.6768075227737427, 0.6741421818733215, 0.6298898458480835, 0.6422044634819031, 0.567542552947998, 0.5917279720306396, 0.565829873085022, 0.5442735552787781, 0.5089324712753296, 0.5073347687721252, 0.4958776831626892, 0.48328521847724915, 0.4795081913471222, 0.4526534974575043, 0.4615163803100586, 0.4669039845466614, 0.4325437843799591, 0.4598418176174164, 0.4353979229927063, 0.41968536376953125, 0.4096352159976959, 0.4000356197357178, 0.3912560045719147, 0.38631880283355713, 0.3825768828392029, 0.36570972204208374, 0.3457506000995636, 0.36982443928718567, 0.36750414967536926, 0.3442991375923157, 0.3469732105731964, 0.34133410453796387, 0.34386709332466125, 0.32740721106529236, 0.3271127939224243], "accuracy": [0.33007529377937317, 0.4674415588378906, 0.6243560910224915, 0.6498481035232544, 0.6968696117401123, 0.7141724824905396, 0.7380794882774353, 0.7378153204917908, 0.7581561207771301, 0.750231146812439, 0.7860256433486938, 0.7709681391716003, 0.7885351777076721, 0.7950072884559631, 0.8084797263145447, 0.8121780753135681, 0.8157442808151245, 0.8206313848495483, 0.8190463781356812, 0.8296129703521729, 0.8294808864593506, 0.8206313848495483, 0.8368775844573975, 0.8285563588142395, 0.8380662798881531, 0.841500461101532, 0.8481045961380005, 0.8543124794960022, 0.8593316674232483, 0.8558974862098694, 0.8589354157447815, 0.8638224601745605, 0.8735966086387634, 0.859199583530426, 0.8656716346740723, 0.8726720213890076, 0.8708229064941406, 0.8730682730674744, 0.8660678863525391, 0.8768987059593201, 0.8755778670310974], "val_loss": [1.8781400918960571, 0.9170870780944824, 1.1190509796142578, 0.7347345352172852, 0.6724333763122559, 0.6240053772926331, 0.6592525839805603, 0.5933555364608765, 0.6372315883636475, 0.5404247045516968, 0.555747389793396, 0.5302217602729797, 0.548709511756897, 0.5081780552864075, 0.5095210671424866, 0.4707871973514557, 0.46332991123199463, 0.4633057415485382, 0.45891451835632324, 0.5235645771026611, 0.4463733434677124, 0.47416067123413086, 0.504076361656189, 0.4453437626361847, 0.4196363091468811, 0.4232117533683777, 0.41921186447143555, 0.4050911068916321, 0.4058362543582916, 0.38814932107925415, 0.44693708419799805, 0.40377360582351685, 0.3930877149105072, 0.3945738971233368, 0.3939003646373749, 0.3790725767612457, 0.43206095695495605, 0.38349810242652893, 0.41019678115844727, 0.3820316195487976, 0.4468317925930023], "val_accuracy": [0.3893333375453949, 0.6793333292007446, 0.5873333215713501, 0.6963333487510681, 0.7603333592414856, 0.7476666569709778, 0.7383333444595337, 0.7526666522026062, 0.7369999885559082, 0.7976666688919067, 0.7763333320617676, 0.7883333563804626, 0.7863333225250244, 0.8140000104904175, 0.7979999780654907, 0.8326666951179504, 0.8333333134651184, 0.8326666951179504, 0.8270000219345093, 0.7896666526794434, 0.8403333425521851, 0.8270000219345093, 0.8033333420753479, 0.82833331823349, 0.8539999723434448, 0.846666693687439, 0.8463333249092102, 0.859666645526886, 0.8576666712760925, 0.8653333187103271, 0.8273333311080933, 0.859666645526886, 0.8656666874885559, 0.8676666617393494, 0.8629999756813049, 0.8736666440963745, 0.8483333587646484, 0.8709999918937683, 0.8450000286102295, 0.8679999709129333, 0.8356666564941406]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 6, 2, 3, 3, 2, 5, 3, 8, 0, 1, 9, 6, 8, 2, 3, 9, 3, 9, 0, 2, 2, 0, 9], [2, 5, 3, 1, 0, 2, 1, 2, 0, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 29, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 69, 20, 87, 76, 68, 45, 51, 66, 54, 91, 82, 43]], "fitness": -0.8102856874465942, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 13, 8, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(beta, beta), tf.math.divide_no_nan(grad, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(alpha, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))))), beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.0104544162750244, 1.5969847440719604, 1.075232982635498, 0.9175825715065002, 0.8133726119995117, 0.7598768472671509, 0.6823537349700928, 0.685164213180542, 0.6281869411468506, 0.6136062145233154, 0.590336263179779, 0.5815384387969971, 0.5623093843460083, 0.5474668145179749, 0.5062496662139893, 0.5112767219543457, 0.5044693946838379, 0.4966896176338196, 0.4839931130409241, 0.4742281138896942, 0.4591095447540283, 0.46264225244522095, 0.4337657690048218, 0.4403180480003357, 0.4364660084247589, 0.3947877585887909, 0.4178110659122467, 0.41427090764045715, 0.3895133137702942, 0.3871719539165497, 0.3755978047847748, 0.36206603050231934, 0.3741910755634308, 0.3668266832828522, 0.3653973937034607, 0.3385685682296753, 0.3425481915473938, 0.3430292308330536, 0.32665443420410156, 0.32717591524124146, 0.3201366066932678], "accuracy": [0.32967904210090637, 0.4725928008556366, 0.6198652982711792, 0.6639809608459473, 0.6993792057037354, 0.7054550051689148, 0.7401928305625916, 0.7326641082763672, 0.7597411274909973, 0.7600052952766418, 0.7802139520645142, 0.7779685854911804, 0.7854973077774048, 0.793422281742096, 0.8075551390647888, 0.8078193068504333, 0.8138951063156128, 0.8132346868515015, 0.816008448600769, 0.8241975903511047, 0.8260467648506165, 0.8230088353157043, 0.8360850811004639, 0.8366134166717529, 0.8348963260650635, 0.850350022315979, 0.8467837572097778, 0.8455950617790222, 0.8561616539955139, 0.8539162874221802, 0.8610487580299377, 0.8664641380310059, 0.8578787446022034, 0.8595958352088928, 0.8661999702453613, 0.8798044919967651, 0.8733324408531189, 0.8745211958885193, 0.878351628780365, 0.8816536664962769, 0.8853520154953003], "val_loss": [1.8702712059020996, 0.9331462979316711, 0.7981842160224915, 0.9331141114234924, 0.7225543856620789, 0.6531577706336975, 0.6013658046722412, 0.5624344348907471, 0.5568132996559143, 0.5413452386856079, 0.5901992321014404, 0.5071344971656799, 0.5515682101249695, 0.4895104169845581, 0.5084584951400757, 0.48625630140304565, 0.46699032187461853, 0.4604928493499756, 0.4715953469276428, 0.496390700340271, 0.4612959027290344, 0.469479501247406, 0.4438897371292114, 0.442442923784256, 0.42152494192123413, 0.43738073110580444, 0.438225656747818, 0.40889933705329895, 0.39898037910461426, 0.3930511772632599, 0.4265432059764862, 0.4370053708553314, 0.4143851399421692, 0.3928861916065216, 0.3863579034805298, 0.38134029507637024, 0.4160875380039215, 0.39196622371673584, 0.39531654119491577, 0.4154128134250641, 0.4983281195163727], "val_accuracy": [0.39100000262260437, 0.6806666851043701, 0.7023333311080933, 0.6629999876022339, 0.7049999833106995, 0.7416666746139526, 0.7763333320617676, 0.7856666445732117, 0.7793333530426025, 0.7973333597183228, 0.7746666669845581, 0.8086666464805603, 0.7836666703224182, 0.8113333582878113, 0.7940000295639038, 0.8166666626930237, 0.8299999833106995, 0.8296666741371155, 0.8226666450500488, 0.800000011920929, 0.8296666741371155, 0.831333339214325, 0.8386666774749756, 0.8289999961853027, 0.8500000238418579, 0.8396666646003723, 0.8353333473205566, 0.8583333492279053, 0.8603333234786987, 0.8603333234786987, 0.8426666855812073, 0.8349999785423279, 0.847000002861023, 0.8683333396911621, 0.8619999885559082, 0.8723333477973938, 0.8529999852180481, 0.8606666922569275, 0.8526666760444641, 0.8396666646003723, 0.8143333196640015]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 6, 8, 0, 3, 2, 5, 3, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 6], [0, 5, 3, 1, 3, 2, 1, 2, 1, 0, 1, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 90, 35, 60, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 69, 20, 87, 76, 68, 45, 51, 66, 54, 91, 82, 43]], "fitness": -0.7954285740852356, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 15, 8, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(grad)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, alpha))))))))))))), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.0542402267456055, 1.8728041648864746, 1.4668177366256714, 1.119175672531128, 0.8522722721099854, 0.7992435097694397, 0.6859151124954224, 0.6798310279846191, 0.6053581237792969, 0.6325008869171143, 0.5907670855522156, 0.5869585871696472, 0.5709216594696045, 0.5650768280029297, 0.5318102836608887], "accuracy": [0.3238673806190491, 0.39083343744277954, 0.5242372155189514, 0.5875049233436584, 0.6896050572395325, 0.6946242451667786, 0.7383436560630798, 0.7432307600975037, 0.7664773464202881, 0.7605336308479309, 0.7774402499198914, 0.7732135653495789, 0.7835160493850708, 0.7852331399917603, 0.7987055778503418], "val_loss": [1.9481728076934814, 1.0979418754577637, 1.0092555284500122, 0.9803548455238342, 0.7192913293838501, 0.6285985708236694, 0.7731142640113831, 0.559171199798584, 0.5222548842430115, 0.5116344690322876, 0.543321430683136, 0.5645241737365723, 0.5166117548942566, 0.505549967288971, 0.5073583722114563], "val_accuracy": [0.40933331847190857, 0.6466666460037231, 0.5946666598320007, 0.6316666603088379, 0.7133333086967468, 0.7630000114440918, 0.7103333473205566, 0.7863333225250244, 0.7943333387374878, 0.8113333582878113, 0.7933333516120911, 0.7593333125114441, 0.7976666688919067, 0.8076666593551636, 0.8106666803359985]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 0, 2, 7, 7, 5, 3, 1, 4, 3, 9, 5, 0, 4, 4, 4, 3, 3, 1, 4, 8, 6, 1, 0, 7, 4, 7, 5, 4, 9, 3, 2, 4, 0, 4, 5, 0, 7, 9, 2, 5, 4, 1], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0, 2, 3, 3, 1, 2, 0], [15, 9, 45, 71, 34, 14, 2, 20, 87, 33, 18]], "fitness": -0.6802856922149658, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 70, 43, 27, 11], "tree_depth": 45, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.square(tf.math.multiply(alpha, beta)), tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.pow(tf.math.pow(beta, beta), tf.math.pow(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.math.pow(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.subtract(tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(tf.math.square(sigma), beta), tf.math.pow(beta, sigma)), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), sigma), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), sigma)), beta)))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.square(sigma), tf.math.negative(tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(beta, sigma))))))), tf.math.subtract(sigma, alpha))), beta))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.300962448120117, 2.2966723442077637, 2.291928291320801, 2.290085554122925, 2.2842624187469482, 2.2811765670776367, 2.2755539417266846, 2.2709667682647705, 2.2644269466400146, 2.2604963779449463, 2.2564356327056885, 2.247495174407959, 2.242119550704956, 2.2385425567626953, 2.23024320602417, 2.2211079597473145, 2.2150256633758545, 2.207815647125244, 2.1999006271362305, 2.1890625953674316, 2.1804215908050537, 2.172316312789917, 2.1638946533203125, 2.1551411151885986, 2.14203143119812, 2.134742259979248, 2.118659019470215, 2.104259729385376, 2.094611406326294, 2.084462881088257, 2.067229747772217, 2.054661750793457, 2.0398318767547607, 2.029843807220459, 2.0152180194854736, 1.9927523136138916, 1.9789040088653564, 1.9660712480545044, 1.947182536125183, 1.9271739721298218, 1.9118613004684448, 1.8965733051300049, 1.8737965822219849, 1.855275273323059, 1.8402888774871826, 1.8211833238601685, 1.7984453439712524, 1.7811877727508545, 1.767220139503479, 1.7415682077407837, 1.7339060306549072, 1.7130464315414429, 1.6905255317687988, 1.6687756776809692, 1.6587690114974976, 1.6388757228851318, 1.6270614862442017, 1.6107345819473267, 1.5924363136291504, 1.5812978744506836, 1.5636217594146729, 1.5533173084259033, 1.5407888889312744, 1.5131415128707886, 1.5066899061203003, 1.4962623119354248, 1.4895435571670532, 1.4735991954803467, 1.452971339225769, 1.4560840129852295, 1.439090371131897, 1.4376840591430664, 1.4083186388015747, 1.4230877161026, 1.3924458026885986, 1.3888779878616333, 1.3911784887313843, 1.3720210790634155, 1.3572474718093872, 1.3547476530075073, 1.3402765989303589, 1.3590002059936523, 1.3436046838760376, 1.3367711305618286, 1.3189513683319092, 1.3145384788513184, 1.2968875169754028, 1.301993489265442, 1.2902169227600098, 1.2967703342437744, 1.2722843885421753, 1.2742888927459717, 1.2721861600875854, 1.2463749647140503, 1.263075590133667, 1.2577465772628784, 1.2694464921951294, 1.2419756650924683, 1.2326043844223022, 1.2172828912734985], "accuracy": [0.09126931428909302, 0.10368511080741882, 0.1146479994058609, 0.12230881303548813, 0.1310262829065323, 0.1306300312280655, 0.14529123902320862, 0.15295206010341644, 0.1698586642742157, 0.16933034360408783, 0.17870822548866272, 0.1935015171766281, 0.1942940205335617, 0.19772817194461823, 0.2133139669895172, 0.21674811840057373, 0.2246730923652649, 0.2359001487493515, 0.23576806485652924, 0.24805177748203278, 0.25941091775894165, 0.25822216272354126, 0.2661471366882324, 0.27024170756340027, 0.2769779562950134, 0.28503501415252686, 0.294148713350296, 0.3070928454399109, 0.30299827456474304, 0.3055078685283661, 0.30999869108200073, 0.3261128067970276, 0.32743361592292786, 0.3327169418334961, 0.3337736129760742, 0.34684982895851135, 0.35279354453086853, 0.3549068868160248, 0.3646810054779053, 0.37088891863822937, 0.3704926669597626, 0.3823801279067993, 0.38766345381736755, 0.39545634388923645, 0.3941355049610138, 0.39704135060310364, 0.40668338537216187, 0.4131554663181305, 0.41791045665740967, 0.4220050275325775, 0.4154008626937866, 0.4204200208187103, 0.4283449947834015, 0.4411570429801941, 0.44406285881996155, 0.44564786553382874, 0.4527803361415863, 0.4476291239261627, 0.4571390748023987, 0.46427157521247864, 0.4667811393737793, 0.46612071990966797, 0.469819039106369, 0.48329150676727295, 0.4855369031429291, 0.48672565817832947, 0.4803856909275055, 0.4831594228744507, 0.4947827160358429, 0.4935939908027649, 0.49848103523254395, 0.5025756359100342, 0.5031039714813232, 0.5052172541618347, 0.5209351181983948, 0.5160480737686157, 0.5138026475906372, 0.5175009965896606, 0.5192180871963501, 0.5209351181983948, 0.5262184739112854, 0.5095760226249695, 0.5222559571266174, 0.5272751450538635, 0.5329546928405762, 0.5309734344482422, 0.5395588278770447, 0.5398229956626892, 0.5415400862693787, 0.5432571768760681, 0.5464271306991577, 0.5515784025192261, 0.5480121374130249, 0.5495971441268921, 0.5540879964828491, 0.5527671575546265, 0.5493329763412476, 0.5546162724494934, 0.559371292591095, 0.5643904209136963], "val_loss": [2.2952237129211426, 2.291030168533325, 2.2866454124450684, 2.2819931507110596, 2.2770469188690186, 2.2718214988708496, 2.2663464546203613, 2.2605397701263428, 2.2544405460357666, 2.2479934692382812, 2.241239547729492, 2.234182834625244, 2.2268381118774414, 2.2192113399505615, 2.211254358291626, 2.202892303466797, 2.194183826446533, 2.1851649284362793, 2.1757287979125977, 2.1659276485443115, 2.1556506156921387, 2.1449105739593506, 2.1336989402770996, 2.1221039295196533, 2.10980224609375, 2.0969698429107666, 2.0835719108581543, 2.0694870948791504, 2.0549421310424805, 2.03983998298645, 2.0240297317504883, 2.007563591003418, 1.9903594255447388, 1.972703456878662, 1.9543907642364502, 1.9351298809051514, 1.9154067039489746, 1.895192265510559, 1.8742505311965942, 1.852804183959961, 1.8309075832366943, 1.8083670139312744, 1.7852920293807983, 1.7619638442993164, 1.7384371757507324, 1.714589238166809, 1.6905810832977295, 1.6666285991668701, 1.6425968408584595, 1.6186319589614868, 1.5950318574905396, 1.5715956687927246, 1.547967553138733, 1.524857759475708, 1.5023878812789917, 1.4803667068481445, 1.4586960077285767, 1.4374667406082153, 1.4166574478149414, 1.396686315536499, 1.377198576927185, 1.3585972785949707, 1.3405183553695679, 1.3226649761199951, 1.305202603340149, 1.2886484861373901, 1.2728755474090576, 1.2576133012771606, 1.2423701286315918, 1.228331208229065, 1.2147064208984375, 1.201743245124817, 1.1887704133987427, 1.1765961647033691, 1.164737343788147, 1.1532471179962158, 1.1426563262939453, 1.1319178342819214, 1.1218132972717285, 1.1120887994766235, 1.1024503707885742, 1.0936518907546997, 1.0850123167037964, 1.076740026473999, 1.0685750246047974, 1.0606859922409058, 1.0527710914611816, 1.0452876091003418, 1.0380336046218872, 1.031618595123291, 1.0247802734375, 1.0183297395706177, 1.012309193611145, 1.0058560371398926, 1.0002009868621826, 0.9947115778923035, 0.9896856546401978, 0.984022319316864, 0.9786591529846191, 0.9732776880264282], "val_accuracy": [0.05233333259820938, 0.07500000298023224, 0.09733333438634872, 0.1316666603088379, 0.1616666615009308, 0.19333332777023315, 0.21966665983200073, 0.23766666650772095, 0.2549999952316284, 0.27433332800865173, 0.2953333258628845, 0.31200000643730164, 0.328000009059906, 0.34566667675971985, 0.35766667127609253, 0.36899998784065247, 0.3776666522026062, 0.38466668128967285, 0.3893333375453949, 0.39100000262260437, 0.39233332872390747, 0.39500001072883606, 0.3973333239555359, 0.39899998903274536, 0.4036666750907898, 0.4059999883174896, 0.40933331847190857, 0.41466665267944336, 0.4206666648387909, 0.4259999990463257, 0.43566668033599854, 0.4483333230018616, 0.46033334732055664, 0.47099998593330383, 0.4830000102519989, 0.49266666173934937, 0.5026666522026062, 0.518666684627533, 0.527999997138977, 0.5363333225250244, 0.5429999828338623, 0.5476666688919067, 0.5540000200271606, 0.5619999766349792, 0.5669999718666077, 0.5733333230018616, 0.578000009059906, 0.5803333520889282, 0.5866666436195374, 0.5923333168029785, 0.5976666808128357, 0.6033333539962769, 0.609333336353302, 0.6140000224113464, 0.6173333525657654, 0.6243333220481873, 0.6306666731834412, 0.6336666941642761, 0.6370000243186951, 0.6393333077430725, 0.6433333158493042, 0.6449999809265137, 0.6470000147819519, 0.6513333320617676, 0.6556666493415833, 0.6573333144187927, 0.6579999923706055, 0.6603333353996277, 0.6636666655540466, 0.6650000214576721, 0.6656666398048401, 0.67166668176651, 0.6736666560173035, 0.6743333339691162, 0.6769999861717224, 0.6790000200271606, 0.6819999814033508, 0.6826666593551636, 0.6850000023841858, 0.6866666674613953, 0.6866666674613953, 0.6890000104904175, 0.6886666417121887, 0.6890000104904175, 0.6893333196640015, 0.6890000104904175, 0.6883333325386047, 0.6886666417121887, 0.6890000104904175, 0.6933333277702332, 0.6923333406448364, 0.6940000057220459, 0.6943333148956299, 0.6923333406448364, 0.6940000057220459, 0.6946666836738586, 0.6936666369438171, 0.6930000185966492, 0.6936666369438171, 0.6943333148956299]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 0, 2, 7, 7, 5, 3, 1, 4, 3, 9, 5, 0, 4, 4, 4, 3, 3, 1, 4, 8, 6, 1, 0, 7, 4, 7, 5, 4, 9, 3, 2, 4, 0, 4, 5, 0, 7, 9, 2, 5, 4, 1], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [15, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.5519999861717224, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.3015685081481934, 2.29884934425354, 2.2959020137786865, 2.295931816101074, 2.2926783561706543, 2.2915971279144287, 2.2891671657562256, 2.287446975708008, 2.2845582962036133, 2.2835612297058105, 2.2832586765289307, 2.279123544692993, 2.2772727012634277, 2.276993989944458, 2.2742156982421875, 2.2714903354644775, 2.2706875801086426, 2.268486976623535, 2.266911268234253, 2.262754201889038, 2.2619335651397705, 2.2599387168884277, 2.257444381713867, 2.2566466331481934, 2.2534940242767334, 2.2519166469573975, 2.248257637023926, 2.245056390762329, 2.2433879375457764, 2.2421841621398926, 2.23766827583313, 2.235487937927246, 2.2333900928497314, 2.2317698001861572, 2.22906231880188, 2.2239696979522705, 2.222480058670044, 2.2200915813446045, 2.217830181121826, 2.2142789363861084, 2.211047887802124, 2.208932876586914, 2.2059850692749023, 2.201054096221924, 2.198685884475708, 2.1951935291290283, 2.1923930644989014, 2.187674045562744, 2.186645269393921, 2.180018663406372, 2.1790249347686768, 2.1727805137634277, 2.170964241027832, 2.1629862785339355, 2.1623728275299072, 2.1564221382141113, 2.1540472507476807, 2.1502482891082764, 2.1431148052215576, 2.138939380645752, 2.133835554122925, 2.128469228744507, 2.1267216205596924, 2.1155407428741455, 2.1131374835968018, 2.108550548553467, 2.104948043823242, 2.0966899394989014, 2.0904533863067627, 2.08530330657959, 2.078963041305542, 2.0754051208496094, 2.0657453536987305, 2.0632834434509277, 2.0500333309173584, 2.04628586769104, 2.040268898010254, 2.0334255695343018, 2.024878978729248, 2.0179498195648193, 2.0099005699157715, 2.0074100494384766, 1.9979302883148193, 1.9905015230178833, 1.9802864789962769, 1.971687912940979, 1.9612399339675903, 1.955343246459961, 1.9492634534835815, 1.9410841464996338, 1.9292279481887817, 1.9181232452392578, 1.9119725227355957, 1.8979436159133911, 1.8915247917175293, 1.881792426109314, 1.884119987487793, 1.866807460784912, 1.8569196462631226, 1.841531753540039], "accuracy": [0.08942015469074249, 0.09826971590518951, 0.10553427785634995, 0.10976093262434006, 0.11161009222269058, 0.1158367469906807, 0.12178047746419907, 0.12508255243301392, 0.1398758441209793, 0.13710209727287292, 0.14080041646957397, 0.15400871634483337, 0.15281997621059418, 0.15493330359458923, 0.16219785809516907, 0.16602826118469238, 0.1736890822649002, 0.1784440577030182, 0.1838594675064087, 0.19495442509651184, 0.19984149932861328, 0.1982565075159073, 0.2052568942308426, 0.20380398631095886, 0.21476687490940094, 0.2226918488740921, 0.23206974565982819, 0.23999471962451935, 0.23986263573169708, 0.23735305666923523, 0.24633470177650452, 0.2502971887588501, 0.25584468245506287, 0.2583542466163635, 0.27143046259880066, 0.2735437750816345, 0.27103421092033386, 0.2782987654209137, 0.28622373938560486, 0.28701624274253845, 0.2911108136177063, 0.29824328422546387, 0.3066965937614441, 0.30682867765426636, 0.3090741038322449, 0.3131686747074127, 0.3237352967262268, 0.32360321283340454, 0.31937655806541443, 0.3311319649219513, 0.3222824037075043, 0.3280940353870392, 0.3267732262611389, 0.34605732560157776, 0.3401135802268982, 0.3461894094944, 0.3475102484226227, 0.3477744162082672, 0.3605864346027374, 0.3679831027984619, 0.3607185184955597, 0.3673226833343506, 0.3669264316558838, 0.3727380931377411, 0.36824727058410645, 0.3778893053531647, 0.3726060092449188, 0.37366265058517456, 0.3796063959598541, 0.38805970549583435, 0.38145554065704346, 0.3889842927455902, 0.4007396697998047, 0.39823007583618164, 0.4065513014793396, 0.402588814496994, 0.40747588872909546, 0.3987584114074707, 0.40906089544296265, 0.4147404432296753, 0.41368380188941956, 0.4080042243003845, 0.4103817343711853, 0.41804254055023193, 0.4205521047115326, 0.41804254055023193, 0.42689210176467896, 0.42345792055130005, 0.431779146194458, 0.4297979176044464, 0.43309998512268066, 0.44049662351608276, 0.44485536217689514, 0.4414212107658386, 0.43785497546195984, 0.45106327533721924, 0.433760404586792, 0.4492141008377075, 0.44670453667640686, 0.4543653428554535], "val_loss": [2.2969729900360107, 2.2947754859924316, 2.292618751525879, 2.290464401245117, 2.2883148193359375, 2.2861576080322266, 2.2840020656585693, 2.281848669052124, 2.2797038555145264, 2.277557373046875, 2.275423049926758, 2.2732341289520264, 2.2710578441619873, 2.2688958644866943, 2.2666659355163574, 2.2644472122192383, 2.26218843460083, 2.259925365447998, 2.257640838623047, 2.2553157806396484, 2.2529797554016113, 2.2506139278411865, 2.2482008934020996, 2.2457873821258545, 2.2433063983917236, 2.240783214569092, 2.2382140159606934, 2.235614538192749, 2.2329633235931396, 2.23030686378479, 2.227543830871582, 2.2247376441955566, 2.2218620777130127, 2.218949794769287, 2.2159812450408936, 2.2129058837890625, 2.2097887992858887, 2.2066516876220703, 2.203406810760498, 2.2000997066497803, 2.1967227458953857, 2.193269968032837, 2.1897308826446533, 2.1860761642456055, 2.1823692321777344, 2.17856502532959, 2.174652576446533, 2.1706438064575195, 2.166569709777832, 2.1623332500457764, 2.158092498779297, 2.1537017822265625, 2.149210214614868, 2.144557476043701, 2.1398866176605225, 2.1350553035736084, 2.1301610469818115, 2.1251320838928223, 2.1199440956115723, 2.114640712738037, 2.1092121601104736, 2.1036715507507324, 2.098043918609619, 2.0921714305877686, 2.086216688156128, 2.0801608562469482, 2.073974370956421, 2.067596673965454, 2.0610861778259277, 2.054466724395752, 2.047687292098999, 2.040762424468994, 2.0335752964019775, 2.0263636112213135, 2.018839120864868, 2.011265993118286, 2.0035433769226074, 1.9956860542297363, 1.9875353574752808, 1.9792742729187012, 1.9708701372146606, 1.9624476432800293, 1.9537527561187744, 1.944944977760315, 1.9359416961669922, 1.9267200231552124, 1.9173059463500977, 1.9077904224395752, 1.8981339931488037, 1.8883925676345825, 1.8783159255981445, 1.8681516647338867, 1.8578932285308838, 1.8473997116088867, 1.8368642330169678, 1.8262161016464233, 1.8157398700714111, 1.8048691749572754, 1.7939363718032837, 1.7827379703521729], "val_accuracy": [0.04600000008940697, 0.06199999898672104, 0.07599999755620956, 0.08966666460037231, 0.10466666519641876, 0.1263333261013031, 0.14433333277702332, 0.16066665947437286, 0.18033333122730255, 0.20100000500679016, 0.21266666054725647, 0.22966666519641876, 0.25, 0.2626666724681854, 0.2773333191871643, 0.28733333945274353, 0.2996666729450226, 0.312666654586792, 0.32233333587646484, 0.3323333263397217, 0.34299999475479126, 0.35100001096725464, 0.35866665840148926, 0.3630000054836273, 0.36766666173934937, 0.37400001287460327, 0.3766666650772095, 0.3786666691303253, 0.38333332538604736, 0.3880000114440918, 0.39100000262260437, 0.39666667580604553, 0.4000000059604645, 0.4046666622161865, 0.4076666533946991, 0.4116666615009308, 0.41466665267944336, 0.4189999997615814, 0.4230000078678131, 0.42500001192092896, 0.42766666412353516, 0.43299999833106995, 0.4350000023841858, 0.44066667556762695, 0.44433334469795227, 0.44600000977516174, 0.4493333399295807, 0.4503333270549774, 0.453000009059906, 0.45766666531562805, 0.4580000042915344, 0.46133333444595337, 0.4636666774749756, 0.4673333466053009, 0.47066667675971985, 0.4740000069141388, 0.4779999852180481, 0.4803333282470703, 0.4793333411216736, 0.48399999737739563, 0.4869999885559082, 0.4866666793823242, 0.4896666705608368, 0.4933333396911621, 0.4959999918937683, 0.500333309173584, 0.5040000081062317, 0.5053333044052124, 0.5090000033378601, 0.5113333463668823, 0.5133333206176758, 0.515999972820282, 0.5189999938011169, 0.5206666588783264, 0.5216666460037231, 0.5260000228881836, 0.527999997138977, 0.5320000052452087, 0.5320000052452087, 0.5336666703224182, 0.5350000262260437, 0.5379999876022339, 0.5403333306312561, 0.5423333048820496, 0.5443333387374878, 0.5453333258628845, 0.5463333129882812, 0.5476666688919067, 0.5490000247955322, 0.5506666898727417, 0.5516666769981384, 0.5533333420753479, 0.5543333292007446, 0.5553333163261414, 0.5576666593551636, 0.5586666464805603, 0.5606666803359985, 0.5636666417121887, 0.5636666417121887, 0.5643333196640015]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 6, 2, 0, 3, 2, 5, 3, 0, 4, 1, 8, 6, 8, 2, 2, 8, 2, 9, 1, 2, 2, 0, 9, 1, 4, 0, 9, 4, 6, 7, 7, 7, 7, 2, 7, 5, 5, 3, 2, 9, 9, 9, 0, 5], [5, 3, 3, 1, 3, 2, 3, 0, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [13, 22, 91, 97, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [16, 9, 45, 71, 34, 14, 69, 20, 87, 76, 68, 45, 51, 66, 54, 91, 82, 43]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 68, 68, 46, 22, 10, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(tf.math.negative(grad), tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))))), tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), alpha))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.pow(tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.square(tf.math.square(tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), tf.math.add(beta, grad))))))), tf.math.negative(tf.math.square(grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 4, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 0, 2, 7, 7, 5, 3, 1, 4, 3, 9, 5, 0, 4, 4, 4, 3, 3, 1, 4, 8, 6, 1, 0, 7, 4, 7, 5, 4, 9, 3, 2, 4, 0, 4, 5, 0, 7, 9, 2, 5, 4, 1], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0, 3, 2, 1, 3, 3, 1], [15, 9, 45, 71, 34, 14, 2, 20, 87, 60]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 70, 43, 27, 10], "tree_depth": 45, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.square(tf.math.multiply(alpha, beta)), tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.pow(tf.math.pow(beta, beta), tf.math.pow(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.math.pow(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.subtract(tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(tf.math.square(sigma), beta), tf.math.pow(beta, sigma)), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), sigma), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), sigma)), beta)))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.square(sigma), tf.math.negative(tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(sigma, beta))))))), tf.math.subtract(alpha, sigma))), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 0, 6, 2, 3, 2, 1, 3, 8, 4, 1, 9, 6, 8, 2, 2, 2, 2, 9, 0, 2, 2, 0, 9, 5, 7, 5, 6, 0, 4, 4, 2, 3, 2, 6, 1, 6, 8, 1, 2, 6, 8, 5, 7, 8, 0, 5, 9, 7, 4, 6, 2, 4, 4, 6, 1, 5, 1, 9, 4, 0, 4], [0, 3, 3, 1, 3, 2, 3, 2, 1, 3, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 63, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [6, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 3, 6, 2, 8, 0, 2, 2, 1, 6, 3, 0, 7, 6, 8, 8, 7, 4, 2, 5, 6, 4, 9, 1, 6, 0, 9, 7], [0, 3, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0, 0, 2, 0, 1, 3, 2], [48, 9, 45, 71, 34, 14, 69, 20, 87, 76, 68, 45, 51, 66, 54, 91, 82, 43]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 100, 100, 63, 37, 10, 1, 0, 0, 0, 0, 70, 43, 27, 12], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.divide_no_nan(tf.math.add(grad, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(alpha, tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, beta)), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))))))), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), grad)), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), alpha)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.subtract(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.square(tf.math.add(beta, beta)))), tf.math.add(beta, grad))), tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))))), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta)), tf.math.pow(tf.math.pow(grad, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))), alpha)), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(beta, tf.math.negative(grad)), tf.math.pow(grad, alpha))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.square(tf.math.multiply(sigma, beta)), tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(tf.math.sqrt(beta), beta)), tf.math.divide_no_nan(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.add(sigma, beta)), tf.math.divide_no_nan(beta, sigma)), tf.math.sqrt(sigma)), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), sigma), beta)))), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.divide_no_nan(sigma, tf.math.pow(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.divide_no_nan(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))), beta), tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), alpha))), sigma))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [77, 37, 51, 41, 8, 79, 86, 52, 44], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 0, 2, 7, 7, 5, 3, 1, 4, 3, 9, 5, 0, 4, 4, 4, 3, 3, 1, 4, 8, 6, 1, 0, 7, 4, 7, 5, 4, 9, 3, 2, 4, 0, 4, 5, 0, 7, 9, 2, 5, 4, 1], [3, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0, 2, 1, 0, 2, 2, 1, 0, 0, 2, 2, 3, 0, 1, 1, 3, 1], [15, 9, 45, 71, 34, 14, 2, 20, 87, 40]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 70, 43, 27, 10], "tree_depth": 45, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.add(sigma, tf.math.add(tf.math.add(tf.math.square(tf.math.multiply(alpha, beta)), tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.pow(tf.math.pow(beta, beta), tf.math.pow(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.math.pow(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.subtract(tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(tf.math.square(sigma), beta), tf.math.pow(beta, sigma)), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), sigma), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), sigma)), beta)))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.square(sigma), tf.math.negative(tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(beta, alpha))))))), tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), beta))), beta))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 2, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [60, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 27, 27, 18, 9, 4, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), beta))))))))))), alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303396701812744, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 8, 6, 2, 0, 3, 8, 5, 3, 8, 4, 1, 9, 6, 3, 5, 2, 9, 8, 9, 0, 2, 2, 8, 6], [0, 5, 3, 1, 3, 2, 1, 2, 1, 3, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [4, 3, 1, 7, 7, 5, 3, 1, 4, 4, 9, 2, 0, 5, 8, 0, 5, 3, 8, 7, 0, 1, 8, 5, 1, 2, 9, 1, 4, 5, 9, 3, 5, 5, 2, 4, 0, 8, 0, 4, 8, 5, 0, 4, 1, 5, 3, 4, 9], [2, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 0, 2, 3, 0, 0, 0, 2, 1], [45, 9, 45, 71, 43, 14, 69, 20, 87, 82, 65, 45, 51, 66, 54, 91, 82, 43]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 30, 19, 11, 4], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(beta, tf.math.multiply(tf.math.subtract(alpha, tf.math.add(tf.math.add(beta, beta), beta)), tf.math.square(tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.negative(alpha))), tf.math.square(tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.square(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.sqrt(beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [2, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 0, 2, 7, 7, 5, 3, 1, 4, 3, 9, 5, 0, 4, 4, 4, 3, 3, 1, 4, 8, 6, 1, 0, 7, 4, 7, 5, 4, 9, 3, 2, 4, 0, 4, 5, 0, 7, 9, 2, 5, 4, 1], [1, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [15, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), alpha)", "other_info": {"loss": [2.3028016090393066, 2.3034327030181885, 2.303973436355591, 2.3085873126983643, 2.3090901374816895, 2.314476490020752, 2.3181748390197754, 2.322058916091919, 2.3273401260375977, 2.339885711669922, 2.369157075881958, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0882314071059227, 0.0886276587843895, 0.08757099509239197, 0.08334434032440186, 0.08308017253875732, 0.0758156105875969, 0.07819310575723648, 0.07357019931077957, 0.07911768555641174, 0.07634394615888596, 0.07898560166358948, 0.0940430611371994, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.300123453140259, 2.3015553951263428, 2.3030827045440674, 2.305445909500122, 2.3077099323272705, 2.3107645511627197, 2.314100503921509, 2.3180477619171143, 2.3243141174316406, 2.3363494873046875, 2.3804235458374023, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02800000086426735, 0.027666667476296425, 0.02566666714847088, 0.024666666984558105, 0.02866666577756405, 0.03799999877810478, 0.047333333641290665, 0.06366666406393051, 0.08133333176374435, 0.0949999988079071, 0.10066666454076767, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 0, 2, 7, 7, 5, 3, 1, 4, 3, 9, 5, 0, 4, 4, 4, 3, 3, 1, 4, 8, 6, 1, 0, 7, 4, 7, 5, 4, 9, 3, 2, 4, 0, 4, 5, 0, 7, 9, 2, 5, 4, 1], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [15, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 27, 27, 18, 9, 4, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(grad, alpha)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), beta)))))))))))), alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3033945560455322, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 4, 2, 7, 7, 5, 3, 1, 4, 3, 9, 5, 0, 4, 4, 4, 3, 3, 1, 4, 8, 6, 1, 0, 7, 4, 7, 5, 4, 9, 3, 2, 4, 0, 4, 5, 0, 7, 9, 2, 5, 4, 1], [3, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0, 2, 2, 2, 0, 0, 3], [15, 9, 45, 71, 34, 14, 2, 20, 87, 85, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 69, 42, 27, 11], "tree_depth": 39, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(sigma, alpha), tf.math.add(tf.math.add(tf.math.add(tf.math.square(beta), beta), tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.pow(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.pow(alpha, tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.square(sigma)), sigma)), tf.math.pow(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(sigma, beta), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))))), sigma)), tf.math.negative(tf.math.pow(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), beta))))))), tf.math.add(tf.math.square(beta), beta)), tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 7, 2, 7, 7, 5, 3, 1, 4, 3, 9, 5, 0, 4, 4, 4, 3, 3, 1, 4, 8, 6, 1, 0, 7, 4, 7, 5, 4, 9, 3, 2, 4, 0, 4, 5, 0, 7, 9, 2, 5, 4, 1], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0, 3, 0, 1, 1, 1, 3], [93, 9, 45, 71, 34, 14, 2, 20, 87, 56, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 69, 42, 27, 11], "tree_depth": 39, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), alpha), tf.math.add(tf.math.add(tf.math.add(tf.math.square(beta), beta), tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.pow(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.pow(alpha, tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.square(sigma)), sigma)), tf.math.pow(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(sigma, beta), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))))), sigma)), tf.math.negative(tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), sigma))))))), tf.math.add(tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.pow(alpha, alpha))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 3, 2, 0, 3, 2, 5, 3, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 3, 0, 9], [3, 5, 3, 1, 3, 2, 1, 2, 1, 0, 2, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 2, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [60, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 16, 11, 2, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, tf.math.negative(alpha))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, beta), alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), beta)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), beta)))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 3, 2, 0, 2, 3, 5, 9, 8, 2, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 1, 3, 9, 9, 9], [0, 3, 3, 1, 1, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 14, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 5, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [60, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 36, 36, 27, 9, 8, 1, 0, 0, 0, 0, 4, 2, 2, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), beta)))))))))))), alpha)))))), tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), beta)), alpha)), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302898645401001, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 4, 3, 3, 3, 3, 9, 8, 9, 1, 9, 6, 1, 2, 8, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 0, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [8, 0, 2, 7, 7, 5, 3, 1, 4, 3, 9, 5, 0, 4, 4, 4, 3, 3, 1, 4, 8, 6, 1, 0, 7, 4, 7, 5, 4, 9, 3, 2, 4, 0, 4, 5, 0, 7, 9, 2, 5, 4, 1], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [15, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 28, 28, 20, 8, 7, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))))))), tf.math.subtract(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta)))))), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303396701812744, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 1, 3, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 0, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 5, 2, 7, 7, 5, 3, 1, 4, 3, 9, 5, 0, 4, 4, 4, 3, 3, 1, 4, 8, 6, 1, 0, 7, 4, 7, 5, 4, 9, 3, 2, 4, 0, 4, 5, 0, 7, 9, 2, 5, 4, 1], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [60, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 37, 37, 25, 12, 7, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(grad, alpha)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))))))))))))))))))), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07766477018594742, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [1, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 1, 3, 2, 9, 0, 2, 2, 0, 9], [1, 5, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 2, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [93, 9, 45, 71, 34, 14, 69, 20, 87, 76, 68, 45, 51, 66, 54, 91, 82, 43]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.302377223968506, 2.3016581535339355, 2.3006489276885986, 2.302633047103882, 2.3013317584991455, 2.3022537231445312], "accuracy": [0.08836349099874496, 0.09192973375320435, 0.0936468094587326, 0.09166556596755981, 0.09126931428909302, 0.0886276587843895], "val_loss": [2.29915452003479, 2.29915452003479, 2.29915452003479, 2.29915452003479, 2.29915452003479, 2.29915452003479], "val_accuracy": [0.03333333507180214, 0.03333333507180214, 0.03333333507180214, 0.03333333507180214, 0.03333333507180214, 0.03333333507180214]}}]