[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.8142856955528259, "mapping_values": [1, 3, 3, 1, 2, 0, 18, 18, 9, 9, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)), sigma))", "other_info": {"loss": [2.0759274637410985, 1.909865968011043, 1.348317183633884, 1.0144896859017976, 0.8490883691152483, 0.8020114646910865, 0.7774858084400144, 0.713205590444612, 0.6680572501908614, 0.6918308197971758, 0.639450917705616, 0.6298628857327553, 0.6037716887110905, 0.5840008116716312, 0.6067878429238759, 0.5754081688977787, 0.5570890433075658, 0.5572758192525422, 0.5298118450228785, 0.5502290413789368, 0.5066107789546807, 0.5270626675207161, 0.5158768169844643, 0.4809535744600859, 0.49569773722822325, 0.4682060481613622, 0.46552686500133633, 0.481773289785787, 0.46868191876148174, 0.4568360488034668, 0.4495677727285299, 0.45033356936663493], "accuracy": [0.3241315484046936, 0.39783385396003723, 0.5193501710891724, 0.6367719173431396, 0.6851142644882202, 0.696209192276001, 0.703209638595581, 0.7265883088111877, 0.743891179561615, 0.7411174178123474, 0.7577598690986633, 0.7623828053474426, 0.7730814814567566, 0.778232753276825, 0.7663452625274658, 0.7832518815994263, 0.7898560166358948, 0.785101056098938, 0.7981772422790527, 0.7895918488502502, 0.8117818236351013, 0.8054417967796326, 0.8064984679222107, 0.8204993009567261, 0.8105930685997009, 0.821820080280304, 0.824329674243927, 0.8195747137069702, 0.8323867321014404, 0.8294808864593506, 0.8289526104927063, 0.833179235458374], "val_loss": [1.9473329271589006, 1.2575654302324568, 1.0106079237801688, 0.6263805968420846, 0.7140037672860282, 0.6031281266893659, 0.6136859485081264, 0.5247023446219308, 0.5707036256790161, 0.5121491636548724, 0.4889409712382725, 0.5093470300946917, 0.4896002837589809, 0.4708161694662912, 0.47375753947666716, 0.4857779230390276, 0.4499597293989999, 0.44996895108904156, 0.4574908358710153, 0.4463906799043928, 0.415239827973502, 0.455484824521201, 0.40345139162881033, 0.4057175772530692, 0.4085470608302525, 0.39776268175670076, 0.3825490730149405, 0.38800428594861713, 0.3788150038037981, 0.4035098041806902, 0.40593687125614714, 0.3932877097811018], "val_accuracy": [0.25566667318344116, 0.5299999713897705, 0.543666660785675, 0.7223333120346069, 0.6583333611488342, 0.7473333477973938, 0.703000009059906, 0.765999972820282, 0.7403333187103271, 0.7730000019073486, 0.7776666879653931, 0.7606666684150696, 0.7766666412353516, 0.7866666913032532, 0.7923333048820496, 0.7943333387374878, 0.812666654586792, 0.8119999766349792, 0.7896666526794434, 0.8136666417121887, 0.831333339214325, 0.7956666946411133, 0.8266666531562805, 0.8316666483879089, 0.8286666870117188, 0.8366666436195374, 0.8423333168029785, 0.8316666483879089, 0.8370000123977661, 0.8169999718666077, 0.812666654586792, 0.8253333568572998]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [9, 6, 5, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [48, 53, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1], [0, 3, 3, 6, 9], [3, 0], [45, 38]], "fitness": -0.8134285807609558, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0764661855890356, 1.9157076014062873, 1.391064696686064, 0.9664823011699496, 0.8577762389967171, 0.7925634993900319, 0.7817569764345991, 0.7082261202546662, 0.6860517326788171, 0.6859269578065446, 0.6533247138436413, 0.6282073606778413, 0.6093797606798983, 0.5846496125049185, 0.5909736345409796, 0.5726598833120888, 0.5534357466772957, 0.558592960512035, 0.5441890662262201, 0.5394608931707715, 0.511549713171988, 0.5304736611219901, 0.5051059690858268, 0.48956104790246435, 0.49053530363736764, 0.4639169775326459, 0.4808190702809445, 0.4641146330769823, 0.47006702832872715, 0.45670303059543804, 0.45016506281605706, 0.4486031100033864, 0.4428004816759059, 0.44285148055073825, 0.4085258060497709, 0.4186443748561981, 0.45013562659656114, 0.415799674640132], "accuracy": [0.32426363229751587, 0.39862632751464844, 0.5065380930900574, 0.6462818384170532, 0.6796988248825073, 0.6977941989898682, 0.7040021419525146, 0.7317395210266113, 0.7378153204917908, 0.7396644949913025, 0.7539294958114624, 0.7630431652069092, 0.7700436115264893, 0.7781006693840027, 0.7741381525993347, 0.7840443849563599, 0.7931581139564514, 0.7903843522071838, 0.789459764957428, 0.7964601516723633, 0.8090080618858337, 0.7972526550292969, 0.8123101592063904, 0.8186501264572144, 0.8140271902084351, 0.8247259259223938, 0.8168009519577026, 0.8285563588142395, 0.8305375576019287, 0.8301413059234619, 0.8260467648506165, 0.8352925777435303, 0.8305375576019287, 0.8338396549224854, 0.8467837572097778, 0.8466516733169556, 0.8325188159942627, 0.8469158411026001], "val_loss": [1.9475044522966658, 1.2622857093811035, 0.8121372972215924, 0.6251246929168701, 0.6828610386167254, 0.5802701541355678, 0.6256454501833234, 0.5289150476455688, 0.5454329933438983, 0.5246552739824567, 0.49040726252964567, 0.5218879325049264, 0.4992001737867083, 0.46508562564849854, 0.47154928956712994, 0.4795159952981131, 0.44221699237823486, 0.45768400600978304, 0.4444946476391384, 0.445577825818743, 0.4238987650190081, 0.44620797463825773, 0.4079612408365522, 0.40987896067755564, 0.4108457565307617, 0.39741336447852, 0.38149382386888775, 0.38502486263002667, 0.37598038571221487, 0.4038929683821542, 0.4077165126800537, 0.38776335545948576, 0.36553105286189486, 0.3686218857765198, 0.39210173913410734, 0.3775891661643982, 0.40103624548230854, 0.3792973245893206], "val_accuracy": [0.2526666522026062, 0.5270000100135803, 0.6813333630561829, 0.7246666550636292, 0.6690000295639038, 0.7540000081062317, 0.7023333311080933, 0.765999972820282, 0.7450000047683716, 0.7706666588783264, 0.7720000147819519, 0.7580000162124634, 0.7756666541099548, 0.7960000038146973, 0.7919999957084656, 0.7906666398048401, 0.8106666803359985, 0.8143333196640015, 0.7990000247955322, 0.8130000233650208, 0.8176666498184204, 0.7986666560173035, 0.8243333101272583, 0.8276666402816772, 0.8266666531562805, 0.8316666483879089, 0.8423333168029785, 0.8399999737739563, 0.8433333039283752, 0.8213333487510681, 0.8133333325386047, 0.8299999833106995, 0.843999981880188, 0.8389999866485596, 0.8276666402816772, 0.840666651725769, 0.8130000233650208, 0.8333333134651184]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 0, 8, 8], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [4, 6, 6, 1, 1, 5, 4, 4, 9], [0, 1, 2, 0, 0, 2, 2, 1, 4, 1, 3, 2, 1, 3, 5], [48, 16, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 1, 1], [0, 3, 1, 4, 8], [3, 0, 0, 1], [18]], "fitness": -0.31371429562568665, "mapping_values": [1, 3, 3, 1, 2, 0, 14, 14, 7, 7, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, beta), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3921206016046748, 2.2943153978102653, 2.2802681069190807, 2.3051915780317986, 2.3034791861070443, 2.3028535545620197], "accuracy": [0.20472857356071472, 0.12415797263383865, 0.1320829540491104, 0.09787346422672272, 0.09774138033390045, 0.10196803510189056], "val_loss": [1.5250301361083984, 1.9728686468941825, 1.9768342290605818, 1.9739439828055245, 1.9737487520490373, 1.9736254555838448], "val_accuracy": [0.34466665983200073, 0.09799999743700027, 0.09833333641290665, 0.09966666996479034, 0.09733333438634872, 0.0976666659116745]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 3, 2, 3], [44, 57], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 6, 6, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 2, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0], [0, 3, 3, 5, 9], [3, 1, 3, 1], [45, 38]], "fitness": -0.31371429562568665, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3921206016046748, 2.2943153978102653, 2.2802681069190807, 2.3051915780317986, 2.3034791861070443, 2.3028535545620197], "accuracy": [0.20472857356071472, 0.12415797263383865, 0.1320829540491104, 0.09787346422672272, 0.09774138033390045, 0.10196803510189056], "val_loss": [1.5250301361083984, 1.9728686468941825, 1.9768342290605818, 1.9739439828055245, 1.9737487520490373, 1.9736254555838448], "val_accuracy": [0.34466665983200073, 0.09799999743700027, 0.09833333641290665, 0.09966666996479034, 0.09733333438634872, 0.0976666659116745]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [4, 6, 6, 1, 1, 8, 4, 8, 2], [2, 0, 2, 3, 2, 3, 2, 1, 4, 1, 3, 2, 1, 3, 5], [49, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [0, 3], [6, 4], [], [0, 0, 0, 1], [0, 0, 0], [1, 3, 3, 1], [87]], "fitness": -0.31371429562568665, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 1, 4, 3, 2, 1, 0, 4, 3, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(beta, tf.math.subtract(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))), tf.math.add(beta, beta))), tf.math.add(grad, tf.math.add(beta, beta)))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(alpha)))", "other_info": {"loss": [2.3921206016046748, 2.2943153978102653, 2.2802681069190807, 2.3051915780317986, 2.3034791861070443, 2.3028535545620197], "accuracy": [0.20472857356071472, 0.12415797263383865, 0.1320829540491104, 0.09787346422672272, 0.09774138033390045, 0.10196803510189056], "val_loss": [1.5250301361083984, 1.9728686468941825, 1.9768342290605818, 1.9739439828055245, 1.9737487520490373, 1.9736254555838448], "val_accuracy": [0.34466665983200073, 0.09799999743700027, 0.09833333641290665, 0.09966666996479034, 0.09733333438634872, 0.0976666659116745]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 2, 2, 3], [44, 57], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [4, 4, 6, 6, 5, 2, 2, 4, 5, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [48, 53, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1], [0, 6, 3, 2, 9], [3, 1, 1, 1], [45, 38]], "fitness": -0.10400000214576721, "mapping_values": [1, 3, 3, 1, 2, 0, 21, 21, 11, 10, 3, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(sigma, alpha))", "other_info": {"loss": [209284046699.15408, 80669040650863.52, 1116207898058776.9, 8.80650474499687e+16, 5.506963048412145e+17, 1.675948472000729e+18, 4.3521447523891784e+18, 6.102597694691709e+18], "accuracy": [0.10315678268671036, 0.10170386731624603, 0.1014397069811821, 0.10170386731624603, 0.10579843819141388, 0.09760929644107819, 0.10540219396352768, 0.10460969805717468], "val_loss": [1392166530486.8572, 539765604913737.1, 1456656450397330.2, 5.0177880071722016e+17, 1.0910230544121856e+17, 2.2605117940679311e+18, 5.164311243517704e+18, 4.4191057714569733e+18], "val_accuracy": [0.10066666454076767, 0.09833333641290665, 0.10133333504199982, 0.09966666996479034, 0.09166666865348816, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [1, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [1, 6, 6, 6, 5, 0, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 1, 2, 3, 2, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0], [6, 3, 3, 5, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), alpha)), grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.math.multiply(sigma, tf.math.multiply(tf.math.square(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), sigma)))", "other_info": {"loss": [1.966288911322566e+30, 2.3025782967707205e+30, 2.2954526720646788e+30, 2.4073227636720234e+30, 2.3270480355846801e+30, 2.4582609679701565e+30], "accuracy": [0.10579843819141388, 0.10619468986988068, 0.10527011007070541, 0.10249637067317963, 0.1006472036242485, 0.1014397069811821], "val_loss": [1.9727231663547338e+30, 1.9727231663547338e+30, 1.9727231663547338e+30, 1.9727231663547338e+30, 1.9727231663547338e+30, 1.9727231663547338e+30], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [2, 6, 6, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 5, 1, 3, 0, 0], [48, 53, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 0], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), grad)), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07938185334205627, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0], [9, 6, 4, 9], [3, 3, 2, 3], [44, 57, 55], [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 1, 3, 1, 1, 3, 0, 0, 1], [90, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [87], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 3, 1, 6, 9, 4, 6], [1, 3, 3, 1, 2], [4]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 28, 28, 17, 11, 6, 1, 0, 0, 0, 0, 12, 7, 5, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(alpha, grad), tf.math.add(beta, tf.math.add(alpha, alpha)))), grad))))), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.subtract(alpha, tf.math.divide_no_nan(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma))), tf.math.divide_no_nan(alpha, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [43, 38, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 3, 3, 2, 9, 2, 5, 4, 6, 3, 5, 5], [3, 3, 3, 1, 2, 1, 2], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 18, 18, 9, 9, 2, 1, 1, 0, 1, 0, 19, 12, 7, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(sigma), tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(sigma, alpha), tf.math.square(tf.math.square(beta))), alpha)))), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 9, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [63, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 3, 3, 6, 9, 0], [3, 1, 3], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 9, 6, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, alpha), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.negative(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08175934851169586, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [7, 6, 4, 0, 8, 0, 9], [0, 2, 2, 3], [44, 57], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [2, 6, 6, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 2, 3, 3, 0, 0, 1, 4, 1, 3, 2, 1, 3, 5], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 3, 2, 6, 2, 9, 7, 3, 1, 5, 1, 5, 5, 1, 1, 9, 6, 3, 0, 7, 0, 8, 8, 1, 2, 2, 6, 0, 7, 3, 6, 8, 9, 7, 1, 7, 6, 8, 5, 2, 7, 9, 0, 3, 0, 4, 7, 2, 7, 0, 9, 0], [3, 1, 3, 1, 1, 3, 3, 1, 1, 0, 0, 0, 1, 3, 1, 0, 2, 2, 2, 0, 1, 0, 0, 1, 1, 3, 0], [18, 36, 63, 43, 8, 75, 12, 55, 24, 90, 91, 52, 5]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 1, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 79, 52, 27, 13], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.sqrt(tf.math.add(beta, beta)), grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(sigma, tf.math.divide_no_nan(alpha, tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.multiply(tf.math.subtract(tf.math.square(alpha), tf.math.subtract(alpha, tf.math.square(sigma))), sigma))))), tf.math.square(tf.math.subtract(tf.math.subtract(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.math.add(tf.math.add(sigma, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.multiply(alpha, tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))), beta), tf.math.pow(beta, tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), alpha), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), alpha), alpha), sigma)))))), tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0], [1, 6, 6, 6, 5, 2, 2, 4, 8, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [90, 93, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 3, 3, 6, 9, 7, 0], [3, 3, 3, 1], [72, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 17, 17, 9, 8, 1, 1, 1, 0, 1, 0, 11, 7, 4, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)), sigma), tf.math.negative(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [4, 2, 0, 6, 2, 4, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 4, 1, 0, 1, 1, 3, 0, 0], [79, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 6, 9], [3, 1, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07938185334205627, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 0, 8, 8, 0], [3, 1, 2, 3], [44, 57, 55], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [5, 6, 6, 1, 1, 8, 4, 8], [2, 0, 2, 3, 2, 0, 2, 1, 4, 1, 3, 2, 1, 3, 5], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [6], [], [0, 0, 1, 1, 0, 1, 0], [0, 3, 3, 5, 9], [3, 1, 3, 1], [18]], "fitness": -0.05485714226961136, "mapping_values": [1, 3, 3, 1, 2, 0, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), alpha), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, alpha))", "other_info": {"loss": [2.3032308577420517, 2.3031530800339346, 2.3041120601163296, 2.305195295075384, 2.306970386929626, 2.307843552289496, 2.308587749604898, 2.310568038514419, 2.3120837307656523, 2.313750322453019, 2.3181653649752496, 2.315699439904693, 2.3197387019955897, 2.3224207000835713, 2.328856663161643, 2.328961829215843, 2.334544279729339, 2.349478324611252, 2.364807646996656, 2.4103390632634936, NaN, NaN, NaN, NaN], "accuracy": [0.09232597798109055, 0.08889182657003403, 0.08809932321310043, 0.08717474341392517, 0.0812310129404068, 0.08519349992275238, 0.08730682730674744, 0.08558975160121918, 0.0816272646188736, 0.08479725569486618, 0.07806102186441422, 0.08598599582910538, 0.08070268481969833, 0.07991018146276474, 0.07885351777076721, 0.08149518072605133, 0.0796460211277008, 0.07924976944923401, 0.07977809756994247, 0.08545766770839691, 0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9710969243730818, 1.971676962716239, 1.9723717144557409, 1.9730961663382394, 1.9740689822605677, 1.9750547409057617, 1.9760306903294154, 1.9773104531424386, 1.9784013884408134, 1.9795841489519392, 1.9816618646894182, 1.9829797063555037, 1.9849522454398019, 1.9868902478899275, 1.9889886038643974, 1.992497784750802, 1.9976719447544642, 2.006382874080113, 2.022147927965437, 2.097346305847168, NaN, NaN, NaN, NaN], "val_accuracy": [0.03700000047683716, 0.03566666692495346, 0.03633333370089531, 0.03500000014901161, 0.041999999433755875, 0.044333335012197495, 0.04866666719317436, 0.04933333396911621, 0.043666668236255646, 0.045666664838790894, 0.05299999937415123, 0.058666665107011795, 0.06199999898672104, 0.06599999964237213, 0.0689999982714653, 0.0860000029206276, 0.09433333575725555, 0.0989999994635582, 0.10000000149011612, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0], [7, 6, 4, 9], [1, 2, 2, 3], [44, 57], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [9, 6, 6, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 2, 1, 0, 2, 1, 3, 0, 0], [89, 53, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0], [0, 3, 3, 6, 9], [3, 0], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3029439460961982, 2.3022386893588696, 2.302131877677977, 2.3022523622597215, 2.3033677850495775, 2.302819661617972], "accuracy": [0.09272222965955734, 0.09087307006120682, 0.08955223858356476, 0.08955223858356476, 0.0874389111995697, 0.0886276587843895], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0], [6, 6, 4, 0, 8, 8], [1, 2, 2, 3], [44, 57], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 8, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 2, 1, 0, 2, 1, 3, 0, 0], [48, 53, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [58], [0, 0, 1, 1], [0, 3, 1, 6, 9, 4, 6], [1, 0, 3, 1, 2], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)))))), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3029439460961982, 2.3022386893588696, 2.302131877677977, 2.3022523622597215, 2.3033677850495775, 2.302819661617972], "accuracy": [0.09272222965955734, 0.09087307006120682, 0.08955223858356476, 0.08955223858356476, 0.0874389111995697, 0.0886276587843895], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 2, 2, 3], [44, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 0, 0, 1, 1, 3, 0, 0, 5, 0], [48, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 3, 3, 9], [3, 3, 3, 1], [21, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 28, 28, 16, 12, 6, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(grad))))))), tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(sigma, sigma))", "other_info": {"loss": [2.3029439460961982, 2.3022386893588696, 2.302131877677977, 2.3022523622597215, 2.3033677850495775, 2.302819661617972], "accuracy": [0.09272222965955734, 0.09087307006120682, 0.08955223858356476, 0.08955223858356476, 0.0874389111995697, 0.0886276587843895], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1], [7, 6, 4, 9, 7], [3, 2, 2, 3], [44, 57], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [4, 6, 2, 2, 5, 2, 2, 2, 5, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 2, 1, 0, 2, 1, 3, 0, 0], [48, 53, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [3], [], [0, 0, 1, 1], [6, 5, 3, 6, 9], [3, 0], [48, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 9, 9, 5, 4, 1, 19, 19, 10, 9, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), beta))))))), tf.math.square(tf.math.add(beta, alpha)))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(sigma), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3029439460961982, 2.3022386893588696, 2.302131877677977, 2.3022523622597215, 2.3033677850495775, 2.302819661617972], "accuracy": [0.09272222965955734, 0.09087307006120682, 0.08955223858356476, 0.08955223858356476, 0.0874389111995697, 0.0886276587843895], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [4, 6, 4, 6, 5, 2, 2, 4, 5, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 0, 3, 3, 0, 0], [48, 53, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.03799999877810478, "mapping_values": [1, 7, 7, 4, 3, 1, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), grad), tf.math.add(beta, grad))), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, sigma))", "other_info": {"loss": [2.3034686775507316, 2.3040577751250866, 2.3060226396342247, 2.3085117785685947, 2.3117688971267416, 2.314792845180211], "accuracy": [0.09206181764602661, 0.08757099509239197, 0.08519349992275238, 0.080042265355587, 0.07634394615888596, 0.07845727354288101], "val_loss": [1.9717108862740653, 1.9729692595345634, 1.9746346473693848, 1.9768304143633162, 1.9789701870509557, 1.9816333225795202], "val_accuracy": [0.03266666829586029, 0.03166666626930237, 0.029666665941476822, 0.027666667476296425, 0.02666666731238365, 0.03033333271741867]}}]