[{"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [2, 6, 9, 9, 0], [0, 1, 1, 3], [5, 57], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 2, 4, 2, 2, 1, 3, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 2, 2, 3, 3, 0], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.8237142562866211, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 8, 9, 2, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))), beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [2.225587911735578, 1.8415541393000137, 1.401006624368298, 1.1095663027803675, 0.9592578217275013, 0.8439882175088826, 0.771523236338772, 0.7975981345486568, 0.7457639314022676, 0.7063106239715886, 0.6956504460386297, 0.6757542882865021, 0.6347735921673062, 0.6219349550123874, 0.5923832507653716, 0.63894253356692, 0.5677627187206005, 0.5806148271078226, 0.5605972853035676, 0.541418348305324, 0.5392387616494234, 0.5204450237225107, 0.5062141159876321, 0.5189358139034936, 0.533339707402033, 0.4944086111673605, 0.46729133488038876, 0.4760461546536749, 0.4808420408293241, 0.4530062956612234, 0.4475488031915056], "accuracy": [0.3047153651714325, 0.40707963705062866, 0.540219247341156, 0.6020340919494629, 0.6515651941299438, 0.6803592443466187, 0.7141724824905396, 0.6956809163093567, 0.7202483415603638, 0.7281733155250549, 0.733588695526123, 0.7411174178123474, 0.7582882046699524, 0.7668735980987549, 0.7746664881706238, 0.7532690763473511, 0.7877426743507385, 0.7729493975639343, 0.7848368883132935, 0.7957997918128967, 0.7980451583862305, 0.798309326171875, 0.8083476424217224, 0.8055738806724548, 0.8000264167785645, 0.8137630224227905, 0.82683926820755, 0.8207634687423706, 0.8178576231002808, 0.8276317715644836, 0.8374059200286865], "val_loss": [1.7375690596444267, 1.1562166554587228, 0.9979883602687291, 0.6924761363438198, 0.6629833493913923, 0.6046054533549717, 0.7032993180411202, 0.6208636931010655, 0.5538549252918789, 0.5334768465587071, 0.5270702838897705, 0.5380935668945312, 0.4920194149017334, 0.4741158996309553, 0.48254142488752094, 0.4680817127227783, 0.521672214780535, 0.4674794503620693, 0.4460828389440264, 0.4285492641585214, 0.4419536164828709, 0.4223888005529131, 0.43351781368255615, 0.4875240666525705, 0.40160112721579416, 0.3972010016441345, 0.39714418990271433, 0.39724652256284443, 0.4006811891283308, 0.41593873500823975, 0.40670573711395264], "val_accuracy": [0.37599998712539673, 0.6013333201408386, 0.5370000004768372, 0.6953333616256714, 0.7086666822433472, 0.7476666569709778, 0.6743333339691162, 0.7103333473205566, 0.7596666812896729, 0.7680000066757202, 0.765999972820282, 0.7366666793823242, 0.7766666412353516, 0.777999997138977, 0.7723333239555359, 0.7879999876022339, 0.7630000114440918, 0.7923333048820496, 0.8140000104904175, 0.812666654586792, 0.8023333549499512, 0.8173333406448364, 0.8080000281333923, 0.7796666622161865, 0.8196666836738586, 0.8349999785423279, 0.8336666822433472, 0.8289999961853027, 0.8209999799728394, 0.8209999799728394, 0.8220000267028809]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [7, 6, 4, 9, 1, 3], [0, 3, 0, 3, 1], [5, 57, 10], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [7, 1, 4, 8, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 2, 3, 2, 0], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.8237142562866211, "mapping_values": [1, 11, 11, 6, 5, 3, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.pow(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.negative(grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [2.225587911735578, 1.8415541393000137, 1.401006624368298, 1.1095663027803675, 0.9592578217275013, 0.8439882175088826, 0.771523236338772, 0.7975981345486568, 0.7457639314022676, 0.7063106239715886, 0.6956504460386297, 0.6757542882865021, 0.6347735921673062, 0.6219349550123874, 0.5923832507653716, 0.63894253356692, 0.5677627187206005, 0.5806148271078226, 0.5605972853035676, 0.541418348305324, 0.5392387616494234, 0.5204450237225107, 0.5062141159876321, 0.5189358139034936, 0.533339707402033, 0.4944086111673605, 0.46729133488038876, 0.4760461546536749, 0.4808420408293241, 0.4530062956612234, 0.4475488031915056], "accuracy": [0.3047153651714325, 0.40707963705062866, 0.540219247341156, 0.6020340919494629, 0.6515651941299438, 0.6803592443466187, 0.7141724824905396, 0.6956809163093567, 0.7202483415603638, 0.7281733155250549, 0.733588695526123, 0.7411174178123474, 0.7582882046699524, 0.7668735980987549, 0.7746664881706238, 0.7532690763473511, 0.7877426743507385, 0.7729493975639343, 0.7848368883132935, 0.7957997918128967, 0.7980451583862305, 0.798309326171875, 0.8083476424217224, 0.8055738806724548, 0.8000264167785645, 0.8137630224227905, 0.82683926820755, 0.8207634687423706, 0.8178576231002808, 0.8276317715644836, 0.8374059200286865], "val_loss": [1.7375690596444267, 1.1562166554587228, 0.9979883602687291, 0.6924761363438198, 0.6629833493913923, 0.6046054533549717, 0.7032993180411202, 0.6208636931010655, 0.5538549252918789, 0.5334768465587071, 0.5270702838897705, 0.5380935668945312, 0.4920194149017334, 0.4741158996309553, 0.48254142488752094, 0.4680817127227783, 0.521672214780535, 0.4674794503620693, 0.4460828389440264, 0.4285492641585214, 0.4419536164828709, 0.4223888005529131, 0.43351781368255615, 0.4875240666525705, 0.40160112721579416, 0.3972010016441345, 0.39714418990271433, 0.39724652256284443, 0.4006811891283308, 0.41593873500823975, 0.40670573711395264], "val_accuracy": [0.37599998712539673, 0.6013333201408386, 0.5370000004768372, 0.6953333616256714, 0.7086666822433472, 0.7476666569709778, 0.6743333339691162, 0.7103333473205566, 0.7596666812896729, 0.7680000066757202, 0.765999972820282, 0.7366666793823242, 0.7766666412353516, 0.777999997138977, 0.7723333239555359, 0.7879999876022339, 0.7630000114440918, 0.7923333048820496, 0.8140000104904175, 0.812666654586792, 0.8023333549499512, 0.8173333406448364, 0.8080000281333923, 0.7796666622161865, 0.8196666836738586, 0.8349999785423279, 0.8336666822433472, 0.8289999961853027, 0.8209999799728394, 0.8209999799728394, 0.8220000267028809]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [6, 6, 4, 2, 4, 7], [2, 0, 0, 3, 1, 0], [5, 57, 85], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0], [7, 2, 4, 2, 0, 1, 5, 4, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 1, 3, 0, 0, 2, 3, 2, 0], [97, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 1, 3, 1], [48, 38]], "fitness": -0.34685713052749634, "mapping_values": [1, 9, 9, 4, 5, 2, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.017779181110955, 2.6458990224017724, 2.305173202890525, 2.303504104863667, 2.3031807332510614, 2.3029608682414024], "accuracy": [0.2114647924900055, 0.15559370815753937, 0.09826971590518951, 0.09377889335155487, 0.09893012791872025, 0.10011887550354004], "val_loss": [1.7054211412157332, 1.9763118880135673, 1.974252496446882, 1.9737462316240584, 1.973637512751988, 1.9735476630074638], "val_accuracy": [0.38733333349227905, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [7, 6, 4, 4, 1, 3], [0, 3, 2, 0, 1], [5, 57], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [7, 8, 4, 2, 0, 1, 9, 0, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 1, 2, 3, 2, 0], [42, 14, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.34685713052749634, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.017779181110955, 2.6458990224017724, 2.305173202890525, 2.303504104863667, 2.3031807332510614, 2.3029608682414024], "accuracy": [0.2114647924900055, 0.15559370815753937, 0.09826971590518951, 0.09377889335155487, 0.09893012791872025, 0.10011887550354004], "val_loss": [1.7054211412157332, 1.9763118880135673, 1.974252496446882, 1.9737462316240584, 1.973637512751988, 1.9735476630074638], "val_accuracy": [0.38733333349227905, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0], [5, 6, 4, 9], [0, 3, 2, 3], [5, 57], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [7, 5, 9, 2, 0, 1, 3, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 2, 3, 0, 2, 3, 3, 2, 0], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [84, 38]], "fitness": -0.3417142927646637, "mapping_values": [1, 1, 1, 0, 1, 1, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [3.0128960366640203, 2.485283750033476, 2.304840502438528, 2.303401786732148, 2.3031368379060067, 2.30298247187444], "accuracy": [0.2114647924900055, 0.15242372453212738, 0.10236428678035736, 0.09417514503002167, 0.09774138033390045, 0.09945846349000931], "val_loss": [1.6965884481157576, 1.9756913866315569, 1.9741193226405553, 1.9737205505371094, 1.9736392838614327, 1.9735477992466517], "val_accuracy": [0.37400001287460327, 0.10400000214576721, 0.09700000286102295, 0.09833333641290665, 0.09833333641290665, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [7, 6, 4, 9, 4, 6, 7, 7, 6, 8, 0, 7, 7, 3, 5, 4, 1, 3, 7, 7, 2, 8, 0, 9], [0, 3, 2, 3, 1, 2, 1, 2, 2, 3, 3, 0, 1, 2, 1, 3], [5, 2, 39, 12], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [6, 2, 6, 6, 2, 1, 3, 4, 0, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 1, 3, 0, 3, 2, 1, 2, 0], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [6, 1, 9, 8, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.11628571152687073, "mapping_values": [1, 40, 40, 24, 16, 4, 18, 18, 9, 9, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, alpha), tf.math.add(alpha, tf.math.sqrt(grad))))), tf.math.add(alpha, tf.math.negative(alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.sqrt(tf.math.negative(alpha)), tf.math.add(alpha, grad))), alpha))), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))))))), grad))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))), alpha), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(sigma, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [3.9642275013280976e+21, 4.45145645994872e+21, 4.253314695190662e+21, 4.124317971685187e+21, 3.9502403193762323e+21, 3.8402934131873305e+21, 3.7109651439093405e+21], "accuracy": [0.09906221181154251, 0.1026284471154213, 0.10685510188341141, 0.10830801725387573, 0.11042134463787079, 0.10949676483869553, 0.11227050423622131], "val_loss": [2.3277792387843964e+21, 2.2957477885418335e+21, 2.2541389511631354e+21, 2.1682015847593392e+21, 2.1231152446755142e+21, 2.1043329020081435e+21, 2.0412032117029462e+21], "val_accuracy": [0.11966666579246521, 0.12033333629369736, 0.11999999731779099, 0.11699999868869781, 0.11699999868869781, 0.11666666716337204, 0.11500000208616257]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [2, 6, 9, 9, 0], [2, 2, 1, 3], [48, 57], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [7, 2, 3, 2, 5, 1, 3, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 78, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 9, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 18, 18, 9, 9, 1, 5, 4, 2, 2, 0, 2, 2, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [4426815.383296986, 83350640.69105798, 389457767.2571655, 1076205145.9770176, 2317970459.354907, 4220465849.9727907], "accuracy": [0.09721305221319199, 0.0956280529499054, 0.10038304328918457, 0.09945846349000931, 0.1006472036242485, 0.10170386731624603], "val_loss": [16737837.142857144, 133634724.57142857, 450719030.85714287, 1068019126.8571428, 2085576118.857143, 3603403190.857143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [7, 6, 4, 9, 6, 3, 7, 5, 0, 1, 1, 6], [0, 3, 2, 3, 1, 1, 1, 3, 2], [5, 57], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 4, 2, 4, 1, 9, 4, 8, 4, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 3, 2, 3, 2, 0], [42, 58, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [63, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 12, 9, 2, 18, 18, 10, 8, 2, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.square(alpha)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.pow(tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad)), beta))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [4.1348351658615e+18, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15849953889846802, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1], [7, 6, 4, 9, 1, 3, 5, 2, 0, 8, 7, 9], [1, 3, 2, 3, 1, 2], [5, 57], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [7, 2, 4, 2, 0, 5, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 3, 2, 3, 2, 0], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 12, 6, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 3, 0, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, alpha), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad)))), alpha))))), tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3023618671793615, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 9, 9, 0], [0, 1, 1, 3], [5, 57], [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], [7, 2, 4, 2, 2, 1, 3, 4, 2, 1, 8, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 3, 2, 3, 2, 0, 2, 5, 5], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 2, 9, 9, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 19, 19, 9, 10, 3, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta)))), grad)), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [17621860.409544345, 332223414.1603487, 1552918692.9747722, 4291969061.465064, 9245081492.473913, 16834115282.926958], "accuracy": [0.09708096832036972, 0.0956280529499054, 0.10038304328918457, 0.09945846349000931, 0.1006472036242485, 0.10170386731624603], "val_loss": [66680923.428571425, 532780525.71428573, 1797384118.857143, 4259588827.428571, 8318491209.142858, 14373210697.142857], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [2, 6, 9, 9, 0], [2, 1, 1, 3], [48, 57], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 2, 6, 4, 0, 2, 3, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 3, 0, 2, 2, 3, 2, 0], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [93, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 14, 14, 7, 7, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, beta))))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [9.901267847400477e+30, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15612204372882843, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0], [7, 6, 4, 9, 2, 9, 1, 3, 4, 6, 2, 9, 8, 9], [2, 0, 2, 3, 2, 0], [31, 57, 35, 60, 3, 26], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [7, 3, 5, 2, 3, 1, 3, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 1, 2, 2, 3, 3, 3], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0], [5, 3, 9, 4, 9], [3, 1, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 14, 6, 6, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.square(grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07211729139089584, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [7, 6, 4, 9, 1, 3], [2, 3, 2, 3, 1], [5, 57], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [8, 2, 5, 2, 5, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 2, 1, 2, 0], [39, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 3, 9, 2, 9], [1, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 1, 2, 2, 1, 1, 0, 6, 4, 3, 1, 0, 6, 5, 1, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [7, 6, 4, 9, 1, 3, 8], [0, 3, 2, 3, 1], [5, 57], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 6, 2, 0, 9, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 3, 2, 3, 2, 0], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 3, 9, 5, 9], [3, 1, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 2, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 5, 5, 0, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [10.409497524690256, 84.27324396268709, 287.44343184971336, 687.7523066548781, 1380.9513308840374, 2416.4535032228755], "accuracy": [0.09813763201236725, 0.09655263274908066, 0.10051512718200684, 0.09945846349000931, 0.10077928751707077, 0.10210011899471283], "val_loss": [23.85165732247489, 110.9249267578125, 303.7310093470982, 653.1220354352679, 1212.874755859375, 2032.459681919643], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [3, 6, 4, 9], [0, 3, 2, 3], [5, 57], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 5, 8, 2, 0, 1, 3, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 2, 3, 3, 2, 0], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [2, 1, 3, 1], [7, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))", "other_info": {"loss": [2.3046716057534673, 4.7915140216723096, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.022322017699480057, 0.08955223858356476, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.993612493787493, 118.17497035435268, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.007666666526347399, 0.07366666942834854, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9, 1, 3], [0, 1, 1, 3], [5, 57], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [7, 6, 4, 2, 2, 1, 3, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 3, 2, 3, 2, 0], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 2, 3, 1], [55, 38]], "fitness": -0.07457143068313599, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, beta)))", "other_info": {"loss": [30.81501644792306, 3.084820365893165, 2.2226609195842246, 2.699411677552126, 2.2721423801414056, 2.2459768243768763, 2.3678365498800886], "accuracy": [0.17170783877372742, 0.1460837423801422, 0.1636507660150528, 0.14938580989837646, 0.1438383311033249, 0.13115836679935455, 0.11015717685222626], "val_loss": [5.942886080060687, 1.9792871475219727, 1.9363957132611955, 1.9512484414236886, 1.8781162670680456, 1.913015501839774, 1.9769187654767717], "val_accuracy": [0.0976666659116745, 0.16699999570846558, 0.14133332669734955, 0.12066666781902313, 0.1576666682958603, 0.14633333683013916, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9, 0], [1, 1, 1, 3], [38, 57, 47], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 2, 2, 3, 3, 0], [42, 30, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 7, 4, 3, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)), sigma)", "other_info": {"loss": [2.302332063408387, 2.3017537630056237, 2.300496616478153, 2.301139211264174, 2.3031787022371586, 2.3012726481060675], "accuracy": [0.08281600475311279, 0.09113723784685135, 0.0956280529499054, 0.09945846349000931, 0.08625016361474991, 0.09721305221319199], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0], [3, 6, 4, 9], [1, 0, 0, 3, 1, 0], [48, 57, 47], [1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [7, 0, 6, 6, 0, 9, 3, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 2, 3, 3, 2, 3, 2, 0], [64, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [48, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 5, 4, 0, 5, 4, 2, 2, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad)))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.302332063408387, 2.3017537630056237, 2.300496616478153, 2.301139211264174, 2.3031787022371586, 2.3012726481060675], "accuracy": [0.08281600475311279, 0.09113723784685135, 0.0956280529499054, 0.09945846349000931, 0.08625016361474991, 0.09721305221319199], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 6, 4, 9, 5, 5, 5], [0, 3, 2, 3, 1], [49, 57], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [6, 0, 6, 4, 0, 2, 3, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 2, 2, 3, 2, 0], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 8, 1, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 9, 9, 7, 2, 2, 19, 19, 10, 9, 1, 1, 1, 0, 1, 0, 7, 4, 3, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.square(grad)))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, beta), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), beta), tf.math.add(beta, grad)))))))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.subtract(sigma, sigma)), sigma))", "other_info": {"loss": [2.302332063408387, 2.3017537630056237, 2.300496616478153, 2.301139211264174, 2.3031787022371586, 2.3012726481060675], "accuracy": [0.08281600475311279, 0.09113723784685135, 0.0956280529499054, 0.09945846349000931, 0.08625016361474991, 0.09721305221319199], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [7, 6, 4, 9, 1, 3], [1, 3, 2, 3, 1], [5, 57], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [7, 2, 4, 2, 0, 1, 3, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 2, 3, 3, 1, 0], [42, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 11, 11, 6, 5, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, sigma)))", "other_info": {"loss": [2.3023949776028347, 2.3019785220045788, 2.3008693803838374, 2.3017218119243763, 2.303983672483014, 2.302204458610556], "accuracy": [0.08268392831087112, 0.09100515395402908, 0.0940430611371994, 0.09787346422672272, 0.08506141602993011, 0.09430722147226334], "val_loss": [1.970726830618722, 1.9708776473999023, 1.971017565046038, 1.9711756025041853, 1.9713470595223563, 1.9715150424412318], "val_accuracy": [0.03866666555404663, 0.038333334028720856, 0.03799999877810478, 0.03733333200216293, 0.035999998450279236, 0.03500000014901161]}}]