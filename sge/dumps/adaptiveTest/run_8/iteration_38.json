[{"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.8122857213020325, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), grad)))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [2.0575084600466242, 1.3980612935737737, 1.0641860093942581, 0.8483844535887092, 0.7919886740616615, 0.7839377451141387, 0.7178919803685264, 0.7044673311617459, 0.676870502485276, 0.6531184930858706, 0.6112498603618503, 0.6095423757077334, 0.6004528905249165, 0.5991459349835822, 0.5537387078558811, 0.5599682819747245, 0.5308570838276863, 0.5286937543642346, 0.5025651781959871, 0.5228572003066091, 0.4847914497881612, 0.4916941583542351, 0.484279200468144, 0.46181027931134777, 0.458107798795627, 0.44976686212239, 0.4567756303557158], "accuracy": [0.3043191134929657, 0.5248976349830627, 0.616299033164978, 0.69673752784729, 0.7041342258453369, 0.7014925479888916, 0.7298903465270996, 0.7275128960609436, 0.7397965788841248, 0.7499669790267944, 0.7726852297782898, 0.767930269241333, 0.7707040309906006, 0.7758552432060242, 0.7946110367774963, 0.789988100528717, 0.8075551390647888, 0.7960638999938965, 0.8138951063156128, 0.8079513907432556, 0.8231409192085266, 0.8212917447090149, 0.8211596608161926, 0.8244617581367493, 0.8341038227081299, 0.8333113193511963, 0.8285563588142395], "val_loss": [1.4285995279039656, 1.0336995806012834, 0.6622543505259922, 0.697412405695234, 0.6399538006101336, 0.6292485850197929, 0.5437223059790475, 0.5036902938570295, 0.5646101747240339, 0.48356607982090544, 0.47814556530543734, 0.4613022378512791, 0.5062022890363421, 0.47180298396519255, 0.48295085770743235, 0.44983941316604614, 0.4452647226197379, 0.443766713142395, 0.4332270451954433, 0.409562281199864, 0.41699129343032837, 0.39427403041294645, 0.4005341018949236, 0.3975236075265067, 0.39152735471725464, 0.38988893372671946, 0.3957795330456325], "val_accuracy": [0.5130000114440918, 0.6460000276565552, 0.718999981880188, 0.6793333292007446, 0.6956666707992554, 0.715666651725769, 0.7590000033378601, 0.7846666574478149, 0.7329999804496765, 0.7896666526794434, 0.7910000085830688, 0.7883333563804626, 0.777999997138977, 0.7929999828338623, 0.7710000276565552, 0.7983333468437195, 0.8026666641235352, 0.8046666383743286, 0.8100000023841858, 0.8213333487510681, 0.8193333148956299, 0.8356666564941406, 0.8223333358764648, 0.8293333053588867, 0.8309999704360962, 0.8263333439826965, 0.8293333053588867]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 4, 6, 6, 8, 3, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0, 5, 4, 5, 7, 0, 7], [3, 3, 3, 1, 0, 3, 0, 3, 3, 0, 0, 0, 5], [42, 71, 43, 99, 1, 78, 38], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 3, 6, 9, 2, 9], [3, 0, 3, 1], [45, 38]], "fitness": -0.3531428575515747, "mapping_values": [1, 3, 3, 1, 2, 1, 34, 34, 23, 11, 7, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.subtract(alpha, tf.math.pow(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.sqrt(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.287926513032985, 2.3566274159242133, 2.302905035781004, 2.3029781696330667, 2.302257025293812, 2.2573473448483163, 2.1836902741286197, 2.6002711450513547, 2.3040715268794747, 2.302976414732504, 2.3038626526167616, 2.3034289239057855], "accuracy": [0.23180557787418365, 0.1002509593963623, 0.0936468094587326, 0.0940430611371994, 0.09800554811954498, 0.15915995836257935, 0.22718267142772675, 0.1294412910938263, 0.09232597798109055, 0.10302469879388809, 0.09391097724437714, 0.0944393053650856], "val_loss": [2.227853911263602, 1.9738684381757463, 1.9737587656293596, 1.9734272956848145, 1.9721146992274694, 1.9661643164498466, 3.2799098832266673, 1.9747679574148995, 1.973979881831578, 1.9738831520080566, 1.9737040655953544, 1.9738429614475794], "val_accuracy": [0.10000000149011612, 0.09966666996479034, 0.09833333641290665, 0.0976666659116745, 0.15733332931995392, 0.17033334076404572, 0.3526666760444641, 0.09833333641290665, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 5, 2, 2, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 5, 2, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 2, 1, 2], [41, 38]], "fitness": -0.3531428575515747, "mapping_values": [1, 3, 3, 1, 2, 1, 14, 14, 8, 6, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.divide_no_nan(alpha, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), beta))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.287926513032985, 2.3566274159242133, 2.302905035781004, 2.3029781696330667, 2.302257025293812, 2.2573473448483163, 2.1836902741286197, 2.6002711450513547, 2.3040715268794747, 2.302976414732504, 2.3038626526167616, 2.3034289239057855], "accuracy": [0.23180557787418365, 0.1002509593963623, 0.0936468094587326, 0.0940430611371994, 0.09800554811954498, 0.15915995836257935, 0.22718267142772675, 0.1294412910938263, 0.09232597798109055, 0.10302469879388809, 0.09391097724437714, 0.0944393053650856], "val_loss": [2.227853911263602, 1.9738684381757463, 1.9737587656293596, 1.9734272956848145, 1.9721146992274694, 1.9661643164498466, 3.2799098832266673, 1.9747679574148995, 1.973979881831578, 1.9738831520080566, 1.9737040655953544, 1.9738429614475794], "val_accuracy": [0.10000000149011612, 0.09966666996479034, 0.09833333641290665, 0.0976666659116745, 0.15733332931995392, 0.17033334076404572, 0.3526666760444641, 0.09833333641290665, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 6, 6, 6, 2, 3, 9, 4, 2, 1, 4, 9, 8, 9, 1, 8, 9, 0, 0, 0, 1, 7, 8, 6], [3, 3, 3, 1, 0, 3, 2, 3, 3, 3, 2, 2, 5], [42, 71, 43, 99, 81, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 3, 6, 9, 2, 9], [3, 0, 3, 1], [45, 38]], "fitness": -0.3531428575515747, "mapping_values": [1, 3, 3, 1, 2, 1, 35, 35, 24, 11, 5, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(grad, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, tf.math.negative(grad)))))), tf.math.negative(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.287926513032985, 2.3566274159242133, 2.302905035781004, 2.3029781696330667, 2.302257025293812, 2.2573473448483163, 2.1836902741286197, 2.6002711450513547, 2.3040715268794747, 2.302976414732504, 2.3038626526167616, 2.3034289239057855], "accuracy": [0.23180557787418365, 0.1002509593963623, 0.0936468094587326, 0.0940430611371994, 0.09800554811954498, 0.15915995836257935, 0.22718267142772675, 0.1294412910938263, 0.09232597798109055, 0.10302469879388809, 0.09391097724437714, 0.0944393053650856], "val_loss": [2.227853911263602, 1.9738684381757463, 1.9737587656293596, 1.9734272956848145, 1.9721146992274694, 1.9661643164498466, 3.2799098832266673, 1.9747679574148995, 1.973979881831578, 1.9738831520080566, 1.9737040655953544, 1.9738429614475794], "val_accuracy": [0.10000000149011612, 0.09966666996479034, 0.09833333641290665, 0.0976666659116745, 0.15733332931995392, 0.17033334076404572, 0.3526666760444641, 0.09833333641290665, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [1, 2, 2, 3], [44, 57], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 2, 6, 6, 8, 0, 9, 4, 2, 4, 4, 9, 8, 2, 1, 8, 1, 0, 5, 4, 5, 7, 5, 7], [3, 3, 3, 1, 0, 3, 2, 3, 3, 0, 2, 2, 5], [42, 71, 43, 94, 1, 78], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3], [4, 3], [], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 2, 1, 2], [45, 38]], "fitness": -0.10457143187522888, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 1, 1, 1, 0, 1, 0, 6, 5, 1, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.negative(grad))), tf.math.add(beta, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [51.992755619321656, 4769455.015183885, 7584.640255867451, 30554644.71925778, 2.3068150056587817, 2.3053268942267997], "accuracy": [0.10117553919553757, 0.10038304328918457, 0.09919429570436478, 0.09021265059709549, 0.09576013684272766, 0.09826971590518951], "val_loss": [1.9748334884643555, 1067.480399131775, 205809302.85714287, 1.9781848362513952, 1.976586205618722, 1.9756396838596888], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.0430000014603138, 0.10400000214576721, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1], [7, 6, 4, 9, 0, 0], [2, 2, 2, 3], [79, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 6, 0, 5, 2, 2, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0], [0, 3, 0], [2, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [9, 8, 9, 2, 9], [3, 2, 1, 2], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 1, 13, 13, 7, 6, 1, 4, 3, 2, 1, 0, 1, 1, 0, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(grad)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026403738381354, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [1, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 6, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 1, 3, 3, 3, 1, 2, 3, 3, 0], [94, 59, 66, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 2, 9], [2, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(grad, grad)))), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.add(beta, sigma), sigma), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1458.1962516567003, 4.734380229428987e+31, 5.471642046099348e+31, 5.4515354384111e+31, 5.441499659472459e+31, 5.48890432396909e+31], "accuracy": [0.054550256580114365, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [97829076992.0, 4.67179462890205e+31, 4.67179462890205e+31, 4.67179462890205e+31, 4.67179462890205e+31, 4.67179462890205e+31], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 2, 2, 3], [79, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 3, 3, 0, 3, 2, 3, 3, 0], [11, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [5, 3, 3, 5, 5, 2, 9], [3, 2, 1, 2], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, alpha), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07621186226606369, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [1, 2, 6, 6, 8, 3, 9, 4, 2, 1, 9, 9, 8, 1, 1, 8, 9, 0, 5, 4, 5, 7, 8, 7], [1, 3, 3, 0, 3, 2, 2, 3, 3, 0, 2, 4], [42, 71, 43, 99, 1, 78], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 2, 9], [3, 2, 1, 2], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.sqrt(alpha), grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(grad, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.add(sigma, beta), alpha), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [5, 6, 4, 9], [0, 3, 2, 3], [72, 57], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [6, 2, 8, 2, 5, 0, 2, 9, 3, 1, 4, 9, 8, 1, 1, 8, 6, 0, 7, 1, 2, 2, 3, 9], [3, 3, 3, 1, 0, 3, 2, 3, 3, 2, 2, 2, 5], [42, 71, 43, 99, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 4, 8, 9], [1, 0, 3, 1], [71, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 19, 19, 13, 6, 3, 1, 1, 0, 1, 0, 7, 4, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(tf.math.square(grad), tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.sqrt(alpha), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [1, 2, 2, 3], [44, 57], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 5, 2, 4, 1, 0, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 2, 3, 3, 0], [42, 71, 43, 99, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 3, 6, 9], [2, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 1, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 8, 3, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0, 5, 4, 5, 7, 8, 7], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 2, 9, 2, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), grad), grad)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [279241.1270339576, 2.319017148650853, 2.3039543025954337, 2.303351171862857, 2.303059786412505, 2.30343923813096], "accuracy": [0.1002509593963623, 0.08770307898521423, 0.09734513610601425, 0.0940430611371994, 0.09694888442754745, 0.09100515395402908], "val_loss": [2.007397242954799, 1.976280689239502, 1.974099908556257, 1.973714896610805, 1.9740607397896903, 1.9740871020725794], "val_accuracy": [0.09833333641290665, 0.09700000286102295, 0.09833333641290665, 0.0976666659116745, 0.0976666659116745, 0.09733333438634872]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 5, 6, 6, 8, 3, 9, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0, 3, 4, 5, 7, 8, 7], [3, 3, 3, 1, 0, 3, 2, 3, 3, 0, 2, 2, 5], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [2, 3, 3, 6, 9, 2, 9], [0, 2, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 7, 4, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.multiply(beta, sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 0, 2, 3], [44, 57], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 6, 4, 2, 1, 4, 9, 8, 3, 1, 8, 9, 0, 8, 7, 1, 7, 3, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0, 5], [42, 71, 43, 99, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 3, 6, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.05657142773270607, "mapping_values": [1, 3, 3, 1, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, sigma), sigma))", "other_info": {"loss": [2.300683129402184, 2.3032626654131536, 2.3017010095175845, 2.301683560968343, 2.302888697857366, 2.302037581476663, 2.3021823285734806, 2.3021087067679264, 2.3009094077173144, 2.3015261022028373, 2.301051277447339, 2.3009647441310275, 2.302445893904253, 2.3007472098983746, 2.300662311470315, 2.3005673966592313, 2.3009596575740905, 2.301241712767954, 2.301899010620853, 2.3028759585710454, 2.2988374513201095, 2.2992812720870517, 2.2999427258425134, 2.299677978873867, 2.3003941587783943, 2.29986912488402, 2.3022640873459683, 2.299770010744245, 2.299097363565576, 2.2997434383307183, 2.30025340628709, 2.3002297683021, 2.298586877581781, 2.2999557288976913, 2.297898894933394, 2.299538538456278, 2.2999444474255673, 2.298814869418262, 2.299094873160545, 2.3002850113449127, 2.300000251355094, 2.297747556480828, 2.2986913974085788, 2.2985007601989778, 2.2991235316972753, 2.299254509656657, 2.300368647486574, 2.2992924708322433, 2.297207070348002, 2.299122466702172, 2.299649324147551, 2.2989489473860103, 2.2990499223306777, 2.299072777165272, 2.2984561743816254, 2.2976342091518167, 2.297452165969941, 2.2984492582903875, 2.2994095575634703, 2.2977455639174713, 2.2980121857045175, 2.2990646826167542, 2.297795330670374, 2.2973907906790894, 2.2976608405165497, 2.2973984498326425, 2.297998995151754, 2.297726845272056, 2.2984310833690755, 2.297269136803954, 2.298335641524134, 2.2979674002340427, 2.296932455224604, 2.297031645761615, 2.298300654235344, 2.2988795277118492, 2.29731124062438, 2.297342196778063, 2.2967044540982693, 2.298319901237241, 2.295465524595616, 2.296426638762051, 2.297366517929432, 2.2964595931474765, 2.295201593622508, 2.296898294921722, 2.2960667714088854, 2.2965722370928683, 2.2966889258719645, 2.2968306547111257, 2.2955788686495606, 2.2969969290437446, 2.295999777488673, 2.2956844969920636, 2.295537483485903, 2.2966198953009553, 2.296804874958285, 2.296596651142772, 2.29559697951812, 2.297203634991669], "accuracy": [0.09602430462837219, 0.09232597798109055, 0.08717474341392517, 0.09589222073554993, 0.08915598690509796, 0.09325055778026581, 0.08809932321310043, 0.08717474341392517, 0.08942015469074249, 0.09549596905708313, 0.09417514503002167, 0.10276053100824356, 0.09536388516426086, 0.09721305221319199, 0.09113723784685135, 0.09496764093637466, 0.0936468094587326, 0.09140139818191528, 0.08677849918603897, 0.0940430611371994, 0.09826971590518951, 0.09708096832036972, 0.09325055778026581, 0.09919429570436478, 0.09589222073554993, 0.09734513610601425, 0.09298639744520187, 0.09774138033390045, 0.10210011899471283, 0.09496764093637466, 0.09589222073554993, 0.09694888442754745, 0.10593052208423615, 0.10170386731624603, 0.10210011899471283, 0.10051512718200684, 0.09536388516426086, 0.0940430611371994, 0.09549596905708313, 0.1014397069811821, 0.09787346422672272, 0.10249637067317963, 0.09628847241401672, 0.1018359512090683, 0.0952318087220192, 0.09998679161071777, 0.09774138033390045, 0.09932637959718704, 0.10210011899471283, 0.09985470771789551, 0.09457138925790787, 0.09747721254825592, 0.09549596905708313, 0.09747721254825592, 0.1026284471154213, 0.09972262382507324, 0.1080438494682312, 0.10421344637870789, 0.09945846349000931, 0.1006472036242485, 0.09972262382507324, 0.10381719470024109, 0.10434553027153015, 0.1010434553027153, 0.1002509593963623, 0.10487385839223862, 0.09985470771789551, 0.1010434553027153, 0.10091137140989304, 0.10619468986988068, 0.10038304328918457, 0.10315678268671036, 0.10949676483869553, 0.10474177449941635, 0.10408136248588562, 0.1006472036242485, 0.10355303436517715, 0.1080438494682312, 0.10698718577623367, 0.10619468986988068, 0.10236428678035736, 0.10830801725387573, 0.10170386731624603, 0.1022322028875351, 0.10777968913316727, 0.10051512718200684, 0.10751552134752274, 0.10527011007070541, 0.10672302544116974, 0.10619468986988068, 0.10896842926740646, 0.10460969805717468, 0.10447761416435242, 0.11345925182104111, 0.1072513535618782, 0.09853387624025345, 0.1072513535618782, 0.10579843819141388, 0.10738343745470047, 0.10606260597705841], "val_loss": [1.9705053738185339, 1.9704226766313826, 1.9703352791922433, 1.9702472005571638, 1.9701800346374512, 1.9701033319745744, 1.9700325557163783, 1.9699557168143136, 1.969876766204834, 1.969796998160226, 1.9697117805480957, 1.9696378026689803, 1.969559873853411, 1.9694834436689104, 1.9694116456168038, 1.9693428448268346, 1.96927125113351, 1.9691929136003767, 1.9691190038408553, 1.9690468651907784, 1.9689737047467912, 1.9689015660967146, 1.9688341276986259, 1.9687608991350447, 1.9686854907444544, 1.9686168943132674, 1.9685469354901994, 1.968480042048863, 1.968409197671073, 1.9683417592729842, 1.9682825633457728, 1.9682224137442452, 1.9681549072265625, 1.968090534210205, 1.9680320875985282, 1.9679773194449288, 1.9679173742021834, 1.96785340990339, 1.9677935327802385, 1.9677237101963587, 1.9676658085414342, 1.9676035472324915, 1.9675442150660925, 1.9674882888793945, 1.9674325670514787, 1.9673783438546317, 1.9673191479274206, 1.9672649928501673, 1.9672043664114816, 1.9671470097133092, 1.9670913560049874, 1.9670356341770716, 1.96697998046875, 1.966928209577288, 1.966879027230399, 1.9668256214686803, 1.966775689806257, 1.9667226246425085, 1.9666760308401925, 1.9666248730250768, 1.9665724209376745, 1.9665273938860213, 1.9664795058114188, 1.966428279876709, 1.9663782119750977, 1.966332231249128, 1.966285569327218, 1.9662353651864188, 1.9661816188267298, 1.9661338669913155, 1.9660840034484863, 1.9660365240914481, 1.9659875461033411, 1.9659384999956404, 1.9658950396946497, 1.9658454486301966, 1.9657938820975167, 1.9657432692391532, 1.9656905446733748, 1.9656430653163366, 1.9655887058803014, 1.9655406815665108, 1.9654926572527205, 1.9654404095241003, 1.965386254446847, 1.9653407505580358, 1.965287753513881, 1.9652412278311593, 1.9651944977896554, 1.9651446342468262, 1.965097086770194, 1.965047836303711, 1.9650051253182548, 1.9649580546787806, 1.9649107796805245, 1.9648620060511999, 1.9648181370326452, 1.9647714069911413, 1.9647269930158342, 1.96468870980399], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03966666758060455, 0.041333332657814026, 0.041999999433755875, 0.041999999433755875, 0.04266666620969772, 0.04333333298563957, 0.04333333298563957, 0.04399999976158142, 0.044333335012197495, 0.04500000178813934, 0.04533333331346512, 0.045666664838790894, 0.045666664838790894, 0.045666664838790894, 0.04600000008940697, 0.046666666865348816, 0.04800000041723251, 0.04866666719317436, 0.04899999871850014, 0.04933333396911621, 0.05000000074505806, 0.05000000074505806, 0.052000001072883606, 0.052666667848825455, 0.05299999937415123, 0.05366666615009308, 0.05433333292603493, 0.05433333292603493, 0.05433333292603493, 0.054999999701976776, 0.054999999701976776, 0.055666666477918625, 0.055666666477918625, 0.0560000017285347, 0.05666666850447655, 0.05700000002980232, 0.05766666680574417, 0.057999998331069946, 0.059333331882953644, 0.059333331882953644, 0.059333331882953644, 0.05966666713356972, 0.05966666713356972, 0.060333333909511566, 0.060333333909511566, 0.061000000685453415, 0.06133333221077919, 0.06133333221077919, 0.06133333221077919, 0.06133333221077919, 0.061666667461395264, 0.061666667461395264, 0.06199999898672104, 0.06233333423733711, 0.06233333423733711, 0.06300000101327896, 0.06333333253860474, 0.06366666406393051, 0.06366666406393051, 0.06366666406393051, 0.06433333456516266, 0.06466666609048843, 0.06466666609048843, 0.06466666609048843, 0.06499999761581421, 0.06533333659172058, 0.06566666811704636, 0.06566666811704636, 0.06566666811704636, 0.06566666811704636, 0.06566666811704636, 0.0663333311676979, 0.06666667014360428, 0.06800000369548798, 0.06866666674613953, 0.0689999982714653, 0.06866666674613953, 0.06933332979679108, 0.07000000029802322, 0.07066666334867477, 0.07100000232458115, 0.07199999690055847, 0.07199999690055847, 0.0716666653752327, 0.07233333587646484, 0.07233333587646484, 0.07333333045244217, 0.07400000095367432, 0.07433333247900009, 0.07533333450555801, 0.07566666603088379, 0.07599999755620956, 0.07666666805744171, 0.07733333110809326, 0.07733333110809326, 0.07733333110809326, 0.07800000160932541, 0.07866666465997696]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 2, 1, 2, 1, 3, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 2, 0, 0, 1, 1, 3, 3, 0], [89, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 2, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 5, 6, 2, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, beta), sigma))", "other_info": {"loss": [2.3007185222009516, 2.3034327511679713, 2.3020252149811418, 2.302089548633713, 2.3034137687222076, 2.3026646859515787, 2.3028733406903297], "accuracy": [0.0956280529499054, 0.09311848133802414, 0.08598599582910538, 0.0940430611371994, 0.08849557489156723, 0.09232597798109055, 0.08928807079792023], "val_loss": [1.9705852781023299, 1.9706212452479772, 1.970618452344622, 1.9706199509756905, 1.9706173624311174, 1.9706307819911413, 1.9706772395542689], "val_accuracy": [0.039000000804662704, 0.03933333232998848, 0.039000000804662704, 0.038333334028720856, 0.039000000804662704, 0.03866666555404663, 0.038333334028720856]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 5, 2, 2, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [94, 82, 66, 84, 1, 78], [0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1], [3, 3, 2], [4, 3], [], [1, 1, 0, 0, 1, 1, 1, 0, 1, 0], [5, 3, 4, 8, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 8, 6, 2, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3007168886668143, 2.303382574653802, 2.301912758533335, 2.3019943911842526, 2.3032531745209277, 2.302499894783434], "accuracy": [0.09602430462837219, 0.09166556596755981, 0.0866464152932167, 0.0944393053650856, 0.08836349099874496, 0.09272222965955734], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [1, 2, 2, 3], [44, 57], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 7, 6, 5, 2, 2, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 71, 43, 99, 1, 78], [1, 0, 0, 1, 0, 0], [0, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 3, 6, 9, 2, 9], [3, 0, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), sigma))", "other_info": {"loss": [2.3007168886668143, 2.303382574653802, 2.301912758533335, 2.3019943911842526, 2.3032531745209277, 2.302499894783434], "accuracy": [0.09602430462837219, 0.09166556596755981, 0.0866464152932167, 0.0944393053650856, 0.08836349099874496, 0.09272222965955734], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 5, 2, 2, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 4, 0, 1, 3, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [3, 3, 0], [4, 0], [81], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 2, 2, 9], [3, 2, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 10, 10, 5, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3007168886668143, 2.303382574653802, 2.301912758533335, 2.3019943911842526, 2.3032531745209277, 2.302499894783434], "accuracy": [0.09602430462837219, 0.09166556596755981, 0.0866464152932167, 0.0944393053650856, 0.08836349099874496, 0.09272222965955734], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 4, 6, 8, 5, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 3, 3, 0, 3, 2, 3, 3, 0], [94, 39, 66, 84, 1, 78], [0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0], [3, 3, 2], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 2, 10, 10, 5, 5, 1, 5, 3, 2, 1, 0, 6, 4, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, beta))), grad), tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [2.3007168886668143, 2.303382574653802, 2.301912758533335, 2.3019943911842526, 2.3032531745209277, 2.302499894783434], "accuracy": [0.09602430462837219, 0.09166556596755981, 0.0866464152932167, 0.0944393053650856, 0.08836349099874496, 0.09272222965955734], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 5, 1, 2, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 32, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 3, 4, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.03742857277393341, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 5, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(alpha, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, sigma))", "other_info": {"loss": [2.3011453398277637, 2.3053748958130647, 2.306104684660164, 2.3084735175669233, 2.312997869103104, 2.3159347141675504], "accuracy": [0.09457138925790787, 0.09060890227556229, 0.08255184441804886, 0.08519349992275238, 0.07858935743570328, 0.07977809756994247], "val_loss": [1.971590518951416, 1.9730324745178223, 1.9749623707362585, 1.9771480560302734, 1.979642050606864, 1.9824951716831751], "val_accuracy": [0.03433333337306976, 0.03033333271741867, 0.029333332553505898, 0.027666667476296425, 0.028999999165534973, 0.03333333507180214]}}]