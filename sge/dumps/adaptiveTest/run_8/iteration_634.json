[{"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [13, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [3, 1, 4, 5, 8, 2, 9, 0, 5, 2, 2, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 2, 2, 1, 3, 0, 0], [5, 60, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.8111428618431091, "mapping_values": [1, 1, 1, 1, 0, 1, 12, 12, 8, 4, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))))), alpha)), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.383774973760113, 2.1451998945114523, 2.154767627272671, 1.7608752541491037, 1.529905897168719, 1.0494111439870286, 0.8423127775037325, 0.923065822114404, 0.7465818408552398, 0.7811448268445728, 0.6568932511928988, 0.6303690039659645, 0.6119709515521209, 0.5968063284519122, 0.5681060350975734, 0.5823178124260893, 0.5478457491183089, 0.5339043103094507, 0.5469534024822557, 0.5309308407140083, 0.49962289952772043, 0.5138890790492159, 0.49741412189264717, 0.4859028149353373, 0.47819673055356066, 0.48086711857234166, 0.4800571935240776, 0.4562473040742802], "accuracy": [0.2522784173488617, 0.2662792205810547, 0.27763834595680237, 0.4039096534252167, 0.48064985871315, 0.6268656849861145, 0.6970016956329346, 0.6699247360229492, 0.7248712182044983, 0.7211728692054749, 0.7491744756698608, 0.7623828053474426, 0.7656848430633545, 0.7761194109916687, 0.7955356240272522, 0.7790252566337585, 0.7965922355651855, 0.7987055778503418, 0.7897239327430725, 0.8041210174560547, 0.8140271902084351, 0.8057059645652771, 0.8109893202781677, 0.8171972036361694, 0.8187822103500366, 0.8164047002792358, 0.8207634687423706, 0.8264430165290833], "val_loss": [1.7682703222547258, 1.8407018525259835, 1.618161337716239, 1.3330108097621374, 0.8555418082645961, 0.6074605328696114, 0.9029341765812465, 0.5593522787094116, 0.5967318330492292, 0.5073748997279576, 0.5246346848351615, 0.47608019624437603, 0.4943317856107439, 0.4321881192071097, 0.4543580838612148, 0.46577554089682444, 0.4126389537538801, 0.442425651209695, 0.4171294569969177, 0.4174523523875645, 0.399679924760546, 0.3872477837971279, 0.3816232255526951, 0.38632592133113314, 0.40950483083724976, 0.40694225685937063, 0.39308037076677593, 0.38393910442079815], "val_accuracy": [0.3089999854564667, 0.2763333320617676, 0.48766666650772095, 0.47466665506362915, 0.6959999799728394, 0.7506666779518127, 0.5713333487510681, 0.7506666779518127, 0.7336666584014893, 0.7643333077430725, 0.7586666941642761, 0.7860000133514404, 0.7636666893959045, 0.8059999942779541, 0.7983333468437195, 0.7973333597183228, 0.8220000267028809, 0.8040000200271606, 0.8069999814033508, 0.8140000104904175, 0.8270000219345093, 0.8226666450500488, 0.8309999704360962, 0.8259999752044678, 0.8169999718666077, 0.8090000152587891, 0.8253333568572998, 0.8286666870117188]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 4, 5, 2, 1, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 4, 2, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 0, 2, 1, 3, 0, 0], [95, 33, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7908571362495422, "mapping_values": [1, 34, 34, 24, 10, 7, 14, 14, 9, 5, 5, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.square(grad), grad))))), grad)), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(grad)))))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), tf.math.add(grad, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2569032828915847, 2.0550970587008, 1.6263932637755172, 1.2599947953252524, 1.1000977938500505, 1.0056630585880453, 0.9493706225089236, 0.9002135110931185, 0.8582382550439216, 0.825154557337992, 0.801876311477905, 0.7781072648650761, 0.7754956193651112, 0.7691067552774369, 0.7406993296168122, 0.7239833768206723, 0.7171373151832205, 0.7092449118227865, 0.691220256654326, 0.6901942771565346, 0.6759438071473243, 0.677122691154417, 0.6595642368444882, 0.6479797482238612, 0.648047091237873, 0.6481536132170461, 0.6537052560649323, 0.6387573323544573, 0.6228033542680294, 0.6326979129085483, 0.6249182039893708, 0.6155024146076364, 0.6105874766841808, 0.623433577866366, 0.6118458091008145, 0.6006714754163818, 0.5995362170809185, 0.5932284708366954], "accuracy": [0.20314356684684753, 0.38568219542503357, 0.4905560612678528, 0.5672962665557861, 0.6152423620223999, 0.6413947939872742, 0.663848876953125, 0.6803592443466187, 0.6931713223457336, 0.7021529674530029, 0.7129837274551392, 0.719852089881897, 0.7187954187393188, 0.7153612375259399, 0.7308149337768555, 0.733060359954834, 0.7378153204917908, 0.7424382567405701, 0.7427024245262146, 0.7457403540611267, 0.7475894689559937, 0.7503632307052612, 0.7523444890975952, 0.7574957013130188, 0.7601373791694641, 0.7623828053474426, 0.759609043598175, 0.7630431652069092, 0.7712323069572449, 0.7663452625274658, 0.7647602558135986, 0.7730814814567566, 0.7720248103141785, 0.7711002230644226, 0.770439863204956, 0.7754589915275574, 0.7784969210624695, 0.7798177003860474], "val_loss": [1.8503978593008858, 1.509568725313459, 1.0491204261779785, 0.8296542167663574, 0.7408634424209595, 0.6883249623434884, 0.6722152403422764, 0.6118459360940116, 0.5971448080880302, 0.5862817083086286, 0.5738766363688877, 0.5725986276354108, 0.5388365473066058, 0.545735239982605, 0.5336682285581317, 0.5166195631027222, 0.509920563016619, 0.5058966875076294, 0.5073144435882568, 0.5074903794697353, 0.49016049930027555, 0.4926316056932722, 0.4836761099951608, 0.4778300864355905, 0.4945194550922939, 0.47403412205832346, 0.4696042537689209, 0.47026240825653076, 0.4754715987614223, 0.46214188848223003, 0.4617361341203962, 0.4571947881153652, 0.45429673365184237, 0.4665447643824986, 0.4573723929268973, 0.445903480052948, 0.44896808692387175, 0.45507499149867464], "val_accuracy": [0.44733333587646484, 0.5526666641235352, 0.659333348274231, 0.6863333582878113, 0.703000009059906, 0.7096666693687439, 0.7023333311080933, 0.7446666955947876, 0.737666666507721, 0.7293333411216736, 0.7436666488647461, 0.734666645526886, 0.7730000019073486, 0.7599999904632568, 0.7649999856948853, 0.7833333611488342, 0.7893333435058594, 0.7910000085830688, 0.7789999842643738, 0.7826666831970215, 0.7933333516120911, 0.7903333306312561, 0.7893333435058594, 0.7979999780654907, 0.7776666879653931, 0.8013333082199097, 0.8073333501815796, 0.7919999957084656, 0.8026666641235352, 0.8080000281333923, 0.7990000247955322, 0.8033333420753479, 0.8109999895095825, 0.7943333387374878, 0.8033333420753479, 0.8109999895095825, 0.8106666803359985, 0.8073333501815796]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 2, 8, 4, 9, 6, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [96, 25, 50, 71, 34]], "fitness": -0.24257142841815948, "mapping_values": [1, 16, 16, 9, 7, 2, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, grad), grad))), tf.math.divide_no_nan(grad, grad)))))), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.2371322965388916, 11.135747821402509, 2.2892442123056354, 2.6612707469851005, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2390701323747635, 0.10421344637870789, 0.12481838464736938, 0.18372738361358643, 0.12151630967855453, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [45.23966435023716, 1.9730953489031111, 1.8830436979021346, 2.201298713684082, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09833333641290665, 0.1979999989271164, 0.2849999964237213, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 8, 4, 9, 6, 0, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.13199999928474426, "mapping_values": [1, 1, 1, 1, 0, 1, 14, 14, 9, 5, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.negative(alpha), grad)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.306762814348589, 12.552633542804166, 2.3044376211112216, 2.2977008401064305, 2.3029247987004258, 2.3112285337459455, 2.3068966826490676, 2.303591468944809, 2.303130208288658], "accuracy": [0.23933430016040802, 0.11081759631633759, 0.09800554811954498, 0.10962884873151779, 0.1018359512090683, 0.14251750707626343, 0.09866596013307571, 0.0952318087220192, 0.09285431355237961], "val_loss": [52.294949122837615, 1.9759924752371651, 1.972968305860247, 1.9510484422956194, 1.97102233341762, 1.9789744785853796, 1.9740001133510046, 1.9736713681902205, 1.9736364228384835], "val_accuracy": [0.0976666659116745, 0.09700000286102295, 0.09700000286102295, 0.27900001406669617, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 6, 8, 4, 1, 1, 2, 4, 2, 6, 4, 2, 9, 3, 8, 6, 5, 4, 0, 2, 5, 0, 0, 0, 2, 4, 8, 3, 3, 0, 0, 2, 8, 1, 9, 9], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [5, 93, 28, 44, 79, 82, 84, 52, 79, 92, 42], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 1, 2, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 2, 1, 3, 0, 2, 1, 3, 0, 0], [95, 12, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.13199999928474426, "mapping_values": [1, 37, 37, 23, 14, 9, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(grad, grad))), tf.math.pow(grad, tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, beta)), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.306762814348589, 12.552633542804166, 2.3044376211112216, 2.2977008401064305, 2.3029247987004258, 2.3112285337459455, 2.3068966826490676, 2.303591468944809, 2.303130208288658], "accuracy": [0.23933430016040802, 0.11081759631633759, 0.09800554811954498, 0.10962884873151779, 0.1018359512090683, 0.14251750707626343, 0.09866596013307571, 0.0952318087220192, 0.09285431355237961], "val_loss": [52.294949122837615, 1.9759924752371651, 1.972968305860247, 1.9510484422956194, 1.97102233341762, 1.9789744785853796, 1.9740001133510046, 1.9736713681902205, 1.9736364228384835], "val_accuracy": [0.0976666659116745, 0.09700000286102295, 0.09700000286102295, 0.27900001406669617, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.13199999928474426, "mapping_values": [1, 1, 1, 1, 0, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.306762814348589, 12.552633542804166, 2.3044376211112216, 2.2977008401064305, 2.3029247987004258, 2.3112285337459455, 2.3068966826490676, 2.303591468944809, 2.303130208288658], "accuracy": [0.23933430016040802, 0.11081759631633759, 0.09800554811954498, 0.10962884873151779, 0.1018359512090683, 0.14251750707626343, 0.09866596013307571, 0.0952318087220192, 0.09285431355237961], "val_loss": [52.294949122837615, 1.9759924752371651, 1.972968305860247, 1.9510484422956194, 1.97102233341762, 1.9789744785853796, 1.9740001133510046, 1.9736713681902205, 1.9736364228384835], "val_accuracy": [0.0976666659116745, 0.09700000286102295, 0.09700000286102295, 0.27900001406669617, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 71, 35, 44, 70, 79, 53, 52, 44], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [2.303448724456987, 2.3993639962359223, 5.061150087168377, 12.578044506914942, 20.294092424730536, 27.97682365359033], "accuracy": [0.10328886657953262, 0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.985882146017892, 2.473751817430769, 8.014110292707171, 14.676773071289062, 21.327681405203684, 27.89815194266183], "val_accuracy": [0.10000000149011612, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 6, 2, 4, 1, 1, 2, 4, 2, 6, 4, 2, 9, 3, 8, 6, 5, 4, 0, 2, 2, 2, 0, 0, 2, 4, 8, 3, 3, 0, 0, 2, 8, 1, 9, 9], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [61, 93, 56, 44, 40, 82, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08149518072605133, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 71, 35, 44, 70, 79, 53, 52, 44], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [3, 1, 3, 3, 8, 5, 0, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 3, 1, 3, 0, 2, 1, 3, 0, 0], [64, 2, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 20, 20, 12, 8, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.divide_no_nan(alpha, grad))))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022324075599343, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [6, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 2, 2, 1, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [5, 93, 56, 44, 79, 82, 53, 52, 79, 92, 42], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 2, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 2, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07911768555641174, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 1, 3, 0, 2, 1, 3, 0, 0], [64, 2, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, beta), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.square(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 6, 2, 2, 6, 1, 2, 4, 2, 6, 9, 2, 4, 3, 2, 5, 8, 4, 0, 2, 2, 0, 8, 0, 2, 4, 8, 3, 2, 0, 2, 2, 8, 2, 6, 9, 6, 6, 2, 6], [0, 0, 2, 2, 1, 2, 1, 2, 2, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 1, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 36, 35, 73, 52, 79, 52, 52, 22, 31], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 3, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [9, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 20, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 60, 60, 36, 24, 7, 13, 13, 8, 5, 3, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), grad), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), alpha)), tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), alpha)), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.sqrt(grad)), grad)), tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))), grad)))), grad))))), alpha)), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), alpha))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022324075599343, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 8, 1, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [1, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 19, 19, 12, 7, 4, 3, 1, 1, 0, 0, 2, 1, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), alpha), grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [234612619.95746008, 4506834626.967112, 21197264911.959846, 58336554364.73702, 123891016808.55052, 230793664819.02417], "accuracy": [0.10091137140989304, 0.1018359512090683, 0.10170386731624603, 0.10460969805717468, 0.1010434553027153, 0.09615638852119446], "val_loss": [900104576.0, 7197044004.571428, 24285920694.857143, 57561503451.42857, 112421203382.85715, 194256811739.42856], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [6, 8, 1, 4, 5, 3, 3, 4, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [5, 93, 56, 44, 79, 82, 53, 52, 79, 92, 42], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 1, 2, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)))), tf.math.pow(grad, tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [70, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 3, 4, 9, 8, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 1, 3, 0, 2, 1, 3, 0, 0], [32, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [1175155674.0208597, 22582687729.66319, 106226439670.19417, 292357693291.76276, 620905963568.691, 1156688587202.3923], "accuracy": [0.10091137140989304, 0.1018359512090683, 0.10170386731624603, 0.10460969805717468, 0.1010434553027153, 0.09615638852119446], "val_loss": [4509544448.0, 36065476608.0, 121708169508.57143, 288478593024.0, 563423121993.1428, 973565179611.4286], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [9, 5, 2, 4, 0, 2, 2, 1, 6, 1, 5, 1, 0, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 93, 35, 5, 70, 79, 15, 52, 44, 91], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 1, 8, 8, 4, 9, 6, 0, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 2, 1, 3, 0, 0], [95, 17, 35, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 9, 5, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022324075599343, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 71, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 3, 1, 3, 0, 2, 1, 3, 0, 0], [64, 52, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.07342857122421265, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, grad), grad), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(sigma)", "other_info": {"loss": [2.3020695954769863, 2.3005389858624246, 2.301856862996406, 2.301341812041583, 2.299749969286674, 2.3000755704956095, 2.3002806018136037, 2.2993752707611255, 2.300167492052914, 2.2996592767612416, 2.298702935816007, 2.299317539675109, 2.300501102847572, 2.300469755638293], "accuracy": [0.09457138925790787, 0.09628847241401672, 0.09655263274908066, 0.09113723784685135, 0.09391097724437714, 0.10196803510189056, 0.09721305221319199, 0.09589222073554993, 0.0952318087220192, 0.09813763201236725, 0.10355303436517715, 0.10210011899471283, 0.09747721254825592, 0.09734513610601425], "val_loss": [1.9698461123875208, 1.9695873941693987, 1.969264302934919, 1.9690626008169991, 1.9690337862287248, 1.9690359660557337, 1.969081265585763, 1.9691376686096191, 1.9690568787711007, 1.969109058380127, 1.969287940434047, 1.9695196832929338, 1.9697015626089913, 1.9699546950204032], "val_accuracy": [0.04699999839067459, 0.05133333429694176, 0.058666665107011795, 0.06266666948795319, 0.06733333319425583, 0.070333331823349, 0.07433333247900009, 0.07633333653211594, 0.08166666328907013, 0.08166666328907013, 0.0806666687130928, 0.07900000363588333, 0.07699999958276749, 0.07466666400432587]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [5, 93, 56, 44, 79, 82, 53, 52, 79, 92, 42], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 2, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.07342857122421265, "mapping_values": [1, 1, 1, 1, 0, 1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(sigma)", "other_info": {"loss": [2.3020695954769863, 2.3005389858624246, 2.301856862996406, 2.301341812041583, 2.299749969286674, 2.3000755704956095, 2.3002806018136037, 2.2993752707611255, 2.300167492052914, 2.2996592767612416, 2.298702935816007, 2.299317539675109, 2.300501102847572, 2.300469755638293], "accuracy": [0.09457138925790787, 0.09628847241401672, 0.09655263274908066, 0.09113723784685135, 0.09391097724437714, 0.10196803510189056, 0.09721305221319199, 0.09589222073554993, 0.0952318087220192, 0.09813763201236725, 0.10355303436517715, 0.10210011899471283, 0.09747721254825592, 0.09734513610601425], "val_loss": [1.9698461123875208, 1.9695873941693987, 1.969264302934919, 1.9690626008169991, 1.9690337862287248, 1.9690359660557337, 1.969081265585763, 1.9691376686096191, 1.9690568787711007, 1.969109058380127, 1.969287940434047, 1.9695196832929338, 1.9697015626089913, 1.9699546950204032], "val_accuracy": [0.04699999839067459, 0.05133333429694176, 0.058666665107011795, 0.06266666948795319, 0.06733333319425583, 0.070333331823349, 0.07433333247900009, 0.07633333653211594, 0.08166666328907013, 0.08166666328907013, 0.0806666687130928, 0.07900000363588333, 0.07699999958276749, 0.07466666400432587]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 73, 70, 79, 52, 52, 71, 31], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 9, 8, 8, 4, 9, 6, 9, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 3, 2, 1, 3, 0, 0], [64, 2, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.0722857117652893, "mapping_values": [1, 15, 15, 9, 6, 2, 7, 7, 5, 2, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(grad)))))))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3023278032705186, 2.3010293213981976, 2.302751415205071, 2.3023618468676483, 2.300740215111056, 2.300790520171605, 2.3009253534201886, 2.2997759860095064, 2.301171810997633, 2.3004090963274715, 2.298842963698738, 2.299625886508487, 2.301303912021575, 2.300949331193379, 2.2993807555221215, 2.2999129387932746, 2.300452371456714, 2.2992136150602462, 2.3003829973185805, 2.3000237187531805, 2.2997496794117533, 2.300420993386227, 2.2999833096224696, 2.2994372942003323, 2.300398955302956, 2.299319674577916, 2.301056344416856, 2.3002995250877247, 2.298848422574109, 2.2994121618400616, 2.3004594853745948], "accuracy": [0.09351472556591034, 0.09509972482919693, 0.09470347315073013, 0.09034473448991776, 0.09417514503002167, 0.09470347315073013, 0.09721305221319199, 0.09496764093637466, 0.09377889335155487, 0.09008057415485382, 0.09628847241401672, 0.09668471664190292, 0.09509972482919693, 0.09457138925790787, 0.10170386731624603, 0.09826971590518951, 0.09774138033390045, 0.09192973375320435, 0.09602430462837219, 0.0936468094587326, 0.09932637959718704, 0.09985470771789551, 0.09747721254825592, 0.09694888442754745, 0.09642054885625839, 0.10051512718200684, 0.09893012791872025, 0.09457138925790787, 0.10447761416435242, 0.09985470771789551, 0.10315678268671036], "val_loss": [1.970306328364781, 1.970116410936628, 1.9698670251028878, 1.9696604864937919, 1.9694585800170898, 1.969320842197963, 1.9692249298095703, 1.969151292528425, 1.9690348080226354, 1.9689906665257044, 1.9690186636788505, 1.9690394401550293, 1.9690018381391252, 1.9690163476126534, 1.9690630095345634, 1.9690837860107422, 1.9691155978611536, 1.969160488673619, 1.969198567526681, 1.9691950253077917, 1.9691758837018694, 1.9691619191850935, 1.9691354206630163, 1.9691132817949568, 1.9690838541303362, 1.969083513532366, 1.9690607615879603, 1.969088077545166, 1.9691246577671595, 1.9691602843148368, 1.9691832406180245], "val_accuracy": [0.04233333468437195, 0.04500000178813934, 0.047333333641290665, 0.04833333194255829, 0.05066666752099991, 0.05299999937415123, 0.05433333292603493, 0.0560000017285347, 0.05900000035762787, 0.06066666543483734, 0.05966666713356972, 0.06133333221077919, 0.06233333423733711, 0.06466666609048843, 0.06499999761581421, 0.06700000166893005, 0.070333331823349, 0.07066666334867477, 0.0716666653752327, 0.07333333045244217, 0.07366666942834854, 0.07599999755620956, 0.07666666805744171, 0.07866666465997696, 0.07900000363588333, 0.0793333351612091, 0.07866666465997696, 0.07900000363588333, 0.07866666465997696, 0.07699999958276749, 0.07633333653211594]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 6, 2, 4, 1, 1, 2, 4, 2, 6, 4, 2, 9, 3, 8, 6, 5, 4, 0, 2, 2, 2, 0, 0, 2, 4, 8, 3, 3, 0, 0, 2, 8, 1, 9, 9], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [41, 93, 35, 73, 70, 79, 52, 52, 71, 31], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 3, 8, 4, 3, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 3, 1, 3, 0, 2, 1, 3, 0, 0], [60, 52, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 36, 36, 20, 16, 5, 14, 14, 7, 7, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)))))), alpha)), tf.math.add(alpha, grad))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.sqrt(alpha), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.pow(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(grad, alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, alpha))))), tf.math.sqrt(tf.math.pow(tf.math.multiply(grad, tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)))), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.302469573898275, 2.3013972091699997, 2.303529185295231, 2.3034233465926555, 2.302110601646112, 2.302210603517989], "accuracy": [0.09351472556591034, 0.09325055778026581, 0.09219389408826828, 0.08902391046285629, 0.08915598690509796, 0.09100515395402908], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]