[{"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8031428456306458, "mapping_values": [1, 14, 14, 7, 7, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0747696925085046, 1.8054165633567776, 1.3724355959322285, 0.9833957787518016, 0.9036553383046736, 0.7921783204296592, 0.7755023098310003, 0.7271853424239672, 0.686947805148389, 0.6953533615072122, 0.6653334121772752, 0.6597760617142545, 0.5943458034472301, 0.6166656772222154, 0.5951505356760167, 0.5863240658252813, 0.5576114734528229, 0.5800148311811998, 0.5624773014868728, 0.5429220052836766, 0.536251187045041, 0.4965874517456793, 0.5045290265368622, 0.49806733101728395, 0.48598475939073993, 0.48135606656221275, 0.4822899316516393, 0.4703543001689679, 0.4744116249747044, 0.4440630040054135, 0.4334242709749615, 0.45458155498843483, 0.44106200163028403, 0.4518717193584621, 0.43563447702341956, 0.42305377422543, 0.4081150045004094, 0.42950562990069185, 0.42288481691226576, 0.3991442466408837, 0.40431837208707805, 0.3782821752257933, 0.4175221016653903, 0.372440149263384, 0.39314279380239564, 0.3840400275025527, 0.390671351783075, 0.36671004009489305, 0.37833059303685895, 0.37683026174733103, 0.360047410476351, 0.36026636086844216], "accuracy": [0.30524370074272156, 0.4225333631038666, 0.5237088799476624, 0.6425835490226746, 0.6672830581665039, 0.705058753490448, 0.7046625018119812, 0.7224937081336975, 0.7388719916343689, 0.7378153204917908, 0.7421740889549255, 0.7526086568832397, 0.7799497842788696, 0.7640998363494873, 0.7697794437408447, 0.7758552432060242, 0.7890635132789612, 0.7792893648147583, 0.7887993454933167, 0.7930260300636292, 0.7980451583862305, 0.8113855719566345, 0.811649739742279, 0.8127063512802124, 0.8178576231002808, 0.8231409192085266, 0.8168009519577026, 0.819442629814148, 0.8236692547798157, 0.834632158279419, 0.837537944316864, 0.8318583965301514, 0.8364813327789307, 0.8302733898162842, 0.8370096683502197, 0.8422929644584656, 0.8491612672805786, 0.8441421389579773, 0.8430854678153992, 0.8537842035293579, 0.8500858545303345, 0.8569541573524475, 0.8433496356010437, 0.8636903762817383, 0.8469158411026001, 0.8564258217811584, 0.8539162874221802, 0.8631620407104492, 0.8589354157447815, 0.8584070801734924, 0.8677849769592285, 0.8619733452796936], "val_loss": [1.8994136537824358, 1.5083551747458321, 0.7809286117553711, 0.6337901864733014, 0.5832185915538243, 0.6014049223491124, 0.6561643055507115, 0.5363669395446777, 0.5843120983668736, 0.5401157481329781, 0.49934327602386475, 0.5030086891991752, 0.4693448713847569, 0.5197357620511737, 0.5123579502105713, 0.46961755411965506, 0.5108610221317836, 0.4533891592706953, 0.43689420393535067, 0.4316164766039167, 0.4190438304628645, 0.4117739030293056, 0.4236786791256496, 0.4046618172100612, 0.42836651631764006, 0.40691730805805754, 0.4033093197005136, 0.43303907769066946, 0.3814602153641837, 0.3681741612298148, 0.37610859530312674, 0.3797527977398464, 0.4379029018538339, 0.4006086673055376, 0.3589865820748465, 0.36397836038044523, 0.374029849256788, 0.3672026055199759, 0.36198432956423077, 0.37944873741694857, 0.35459065437316895, 0.3507497225488935, 0.34882781335285734, 0.35933486904416767, 0.3581820470946176, 0.3611324599811009, 0.34529400723321096, 0.35271696533475605, 0.3482222301619394, 0.3573482206889561, 0.34268189328057425, 0.3595500758716038], "val_accuracy": [0.33799999952316284, 0.4659999907016754, 0.6696666479110718, 0.7443333268165588, 0.746999979019165, 0.7096666693687439, 0.7003333568572998, 0.7646666765213013, 0.7213333249092102, 0.7413333058357239, 0.7713333368301392, 0.777999997138977, 0.7963333129882812, 0.7776666879653931, 0.762333333492279, 0.7996666431427002, 0.7519999742507935, 0.8013333082199097, 0.7963333129882812, 0.8106666803359985, 0.8149999976158142, 0.8243333101272583, 0.8230000138282776, 0.8270000219345093, 0.8053333163261414, 0.8230000138282776, 0.8190000057220459, 0.8143333196640015, 0.8346666693687439, 0.8453333377838135, 0.8399999737739563, 0.8386666774749756, 0.7979999780654907, 0.8230000138282776, 0.8473333120346069, 0.8516666889190674, 0.843666672706604, 0.8446666598320007, 0.8429999947547913, 0.8396666646003723, 0.8546666502952576, 0.8566666841506958, 0.856333315372467, 0.843999981880188, 0.8456666469573975, 0.846666693687439, 0.859000027179718, 0.846666693687439, 0.8543333411216736, 0.8456666469573975, 0.8576666712760925, 0.8423333168029785]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 1, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 1, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 8, 8, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8031428456306458, "mapping_values": [1, 10, 10, 5, 5, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0747696925085046, 1.8054165633567776, 1.3724355959322285, 0.9833957787518016, 0.9036553383046736, 0.7921783204296592, 0.7755023098310003, 0.7271853424239672, 0.686947805148389, 0.6953533615072122, 0.6653334121772752, 0.6597760617142545, 0.5943458034472301, 0.6166656772222154, 0.5951505356760167, 0.5863240658252813, 0.5576114734528229, 0.5800148311811998, 0.5624773014868728, 0.5429220052836766, 0.536251187045041, 0.4965874517456793, 0.5045290265368622, 0.49806733101728395, 0.48598475939073993, 0.48135606656221275, 0.4822899316516393, 0.4703543001689679, 0.4744116249747044, 0.4440630040054135, 0.4334242709749615, 0.45458155498843483, 0.44106200163028403, 0.4518717193584621, 0.43563447702341956, 0.42305377422543, 0.4081150045004094, 0.42950562990069185, 0.42288481691226576, 0.3991442466408837, 0.40431837208707805, 0.3782821752257933, 0.4175221016653903, 0.372440149263384, 0.39314279380239564, 0.3840400275025527, 0.390671351783075, 0.36671004009489305, 0.37833059303685895, 0.37683026174733103, 0.360047410476351, 0.36026636086844216], "accuracy": [0.30524370074272156, 0.4225333631038666, 0.5237088799476624, 0.6425835490226746, 0.6672830581665039, 0.705058753490448, 0.7046625018119812, 0.7224937081336975, 0.7388719916343689, 0.7378153204917908, 0.7421740889549255, 0.7526086568832397, 0.7799497842788696, 0.7640998363494873, 0.7697794437408447, 0.7758552432060242, 0.7890635132789612, 0.7792893648147583, 0.7887993454933167, 0.7930260300636292, 0.7980451583862305, 0.8113855719566345, 0.811649739742279, 0.8127063512802124, 0.8178576231002808, 0.8231409192085266, 0.8168009519577026, 0.819442629814148, 0.8236692547798157, 0.834632158279419, 0.837537944316864, 0.8318583965301514, 0.8364813327789307, 0.8302733898162842, 0.8370096683502197, 0.8422929644584656, 0.8491612672805786, 0.8441421389579773, 0.8430854678153992, 0.8537842035293579, 0.8500858545303345, 0.8569541573524475, 0.8433496356010437, 0.8636903762817383, 0.8469158411026001, 0.8564258217811584, 0.8539162874221802, 0.8631620407104492, 0.8589354157447815, 0.8584070801734924, 0.8677849769592285, 0.8619733452796936], "val_loss": [1.8994136537824358, 1.5083551747458321, 0.7809286117553711, 0.6337901864733014, 0.5832185915538243, 0.6014049223491124, 0.6561643055507115, 0.5363669395446777, 0.5843120983668736, 0.5401157481329781, 0.49934327602386475, 0.5030086891991752, 0.4693448713847569, 0.5197357620511737, 0.5123579502105713, 0.46961755411965506, 0.5108610221317836, 0.4533891592706953, 0.43689420393535067, 0.4316164766039167, 0.4190438304628645, 0.4117739030293056, 0.4236786791256496, 0.4046618172100612, 0.42836651631764006, 0.40691730805805754, 0.4033093197005136, 0.43303907769066946, 0.3814602153641837, 0.3681741612298148, 0.37610859530312674, 0.3797527977398464, 0.4379029018538339, 0.4006086673055376, 0.3589865820748465, 0.36397836038044523, 0.374029849256788, 0.3672026055199759, 0.36198432956423077, 0.37944873741694857, 0.35459065437316895, 0.3507497225488935, 0.34882781335285734, 0.35933486904416767, 0.3581820470946176, 0.3611324599811009, 0.34529400723321096, 0.35271696533475605, 0.3482222301619394, 0.3573482206889561, 0.34268189328057425, 0.3595500758716038], "val_accuracy": [0.33799999952316284, 0.4659999907016754, 0.6696666479110718, 0.7443333268165588, 0.746999979019165, 0.7096666693687439, 0.7003333568572998, 0.7646666765213013, 0.7213333249092102, 0.7413333058357239, 0.7713333368301392, 0.777999997138977, 0.7963333129882812, 0.7776666879653931, 0.762333333492279, 0.7996666431427002, 0.7519999742507935, 0.8013333082199097, 0.7963333129882812, 0.8106666803359985, 0.8149999976158142, 0.8243333101272583, 0.8230000138282776, 0.8270000219345093, 0.8053333163261414, 0.8230000138282776, 0.8190000057220459, 0.8143333196640015, 0.8346666693687439, 0.8453333377838135, 0.8399999737739563, 0.8386666774749756, 0.7979999780654907, 0.8230000138282776, 0.8473333120346069, 0.8516666889190674, 0.843666672706604, 0.8446666598320007, 0.8429999947547913, 0.8396666646003723, 0.8546666502952576, 0.8566666841506958, 0.856333315372467, 0.843999981880188, 0.8456666469573975, 0.846666693687439, 0.859000027179718, 0.846666693687439, 0.8543333411216736, 0.8456666469573975, 0.8576666712760925, 0.8423333168029785]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [3, 2, 8, 6, 0, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 3, 8, 6, 6, 0, 7, 7, 1, 4, 4, 0, 5, 8, 1, 5], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 0, 1, 2, 3, 2, 0, 3, 1, 2, 3], [81, 62, 35, 55, 64, 1, 81, 19, 77, 41, 8], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 6, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [57, 25, 50, 71, 34]], "fitness": -0.3742857277393341, "mapping_values": [1, 57, 57, 35, 22, 7, 20, 20, 11, 9, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, grad))), tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.negative(alpha))), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), tf.math.square(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.square(alpha), tf.math.add(alpha, grad))))))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(grad, grad), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha)))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222689047969485, 2.262195233639914, 2.3106815938416756, 2.212255926967344, 2.2523798294480546, 2.1782876503324275], "accuracy": [0.2234843522310257, 0.24884428083896637, 0.12653546035289764, 0.24078720808029175, 0.2230881005525589, 0.21991810202598572], "val_loss": [1.930550983973912, 1.931673867361886, 1.9605903625488281, 1.9700332369123186, 1.937239374433245, 1.8942979403904505], "val_accuracy": [0.3073333203792572, 0.2446666657924652, 0.19066666066646576, 0.15466666221618652, 0.09933333098888397, 0.17466667294502258]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 6, 6, 2, 1, 0, 2, 3, 2, 9, 2, 8, 9, 3, 2, 6, 0, 5, 0, 2, 6, 0, 8, 8, 5, 9], [1, 1, 2, 1, 0, 2, 2, 2, 2, 0, 1, 3, 1, 1, 3], [31, 62, 35, 73, 14, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 9, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.1371428519487381, "mapping_values": [1, 29, 29, 18, 11, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))))), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [3.046876797035559, 2.3906040362331766, 2.401825711900658, 2.3590033873118554, 2.326438245866529, 2.3288622914587487, 2.3278601786180526], "accuracy": [0.19680359959602356, 0.10791176557540894, 0.11570466309785843, 0.09589222073554993, 0.09668471664190292, 0.09325055778026581, 0.09879804402589798], "val_loss": [2.0526424135480608, 1.9833104951041085, 2.008016586303711, 1.9947150094168526, 1.9947069713047572, 2.0015269688197543, 1.9920353208269392], "val_accuracy": [0.09700000286102295, 0.10599999874830246, 0.10433333367109299, 0.0976666659116745, 0.10400000214576721, 0.09700000286102295, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [3, 2, 6, 2, 1, 0, 2, 3, 2, 2, 2, 8, 9, 3, 2, 6, 0, 5, 0, 2, 6, 0, 8, 8, 5, 9], [2, 2, 2, 1, 0, 2, 2, 2, 0, 0, 1, 3, 1, 2, 3], [22, 55, 35, 95, 60, 16, 86, 73], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.1371428519487381, "mapping_values": [1, 23, 23, 13, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, grad)))))), tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [3.046876797035559, 2.3906040362331766, 2.401825711900658, 2.3590033873118554, 2.326438245866529, 2.3288622914587487, 2.3278601786180526], "accuracy": [0.19680359959602356, 0.10791176557540894, 0.11570466309785843, 0.09589222073554993, 0.09668471664190292, 0.09325055778026581, 0.09879804402589798], "val_loss": [2.0526424135480608, 1.9833104951041085, 2.008016586303711, 1.9947150094168526, 1.9947069713047572, 2.0015269688197543, 1.9920353208269392], "val_accuracy": [0.09700000286102295, 0.10599999874830246, 0.10433333367109299, 0.0976666659116745, 0.10400000214576721, 0.09700000286102295, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 4, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [93, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 8, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 2, 3, 2, 2, 0, 2, 3, 2, 6, 2, 8, 1, 3, 2, 6, 0, 3, 0, 2, 4, 0, 8, 0, 5, 4, 4, 1, 1, 9, 2, 3, 1, 1, 9, 4, 9], [1, 2, 2, 0, 0, 0, 1, 2, 2, 0, 0, 3, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0], [22, 55, 10, 95, 20, 16, 86, 73, 44, 68], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 0, 3, 8, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 23, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07911768555641174, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [5, 2, 6, 6, 0, 4, 2, 3, 2, 1, 3, 8, 9, 3, 2, 6, 0, 4, 0, 2, 4, 2, 6, 3, 2, 7, 2, 3, 3, 6, 2, 0, 9, 0], [0, 1, 2, 0, 1, 0, 1, 2, 0, 0, 0, 3, 2, 2, 2, 3, 2, 0, 1, 0, 1, 1, 1, 0], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 9, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [32, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [57], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 13, 9, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [693085555.8323307, 13150994954.617355, 60707233050.813896, 168645608350.21213, 359237878491.4479, 669306212482.3838], "accuracy": [0.09734513610601425, 0.09945846349000931, 0.10091137140989304, 0.09893012791872025, 0.09879804402589798, 0.09959053993225098], "val_loss": [2605560027.428571, 20836934217.142857, 70316582034.28572, 166661998884.57144, 325501049709.7143, 562463674953.1428], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [5, 2, 6, 6, 0, 4, 2, 3, 2, 9, 3, 8, 9, 3, 2, 6, 0, 4, 0, 2, 4, 2, 3, 3, 0, 7, 2, 3, 3, 6, 2, 0, 5, 0], [0, 1, 2, 0, 1, 0, 1, 2, 2, 2, 0, 3, 2, 2, 2, 3, 2, 1, 1, 0, 1, 1, 1, 0], [81, 62, 35, 73, 95, 1, 77, 19, 77, 41, 8], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 9, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 13, 7, 5, 18, 18, 12, 6, 4, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.sqrt(alpha), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(grad, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07911768555641174, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [5, 2, 6, 2, 1, 0, 2, 3, 2, 6, 2, 8, 9, 3, 2, 6, 0, 5, 0, 2, 6, 0, 8, 8, 5, 9], [2, 1, 2, 2, 2, 2, 1, 0, 1, 0, 0, 3, 2, 2], [31, 62, 35, 73, 14, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [8, 1, 3, 8, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 1, 0, 2, 1, 3, 0, 0], [93, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07911768555641174, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 2, 0, 6, 2, 8, 2, 5, 2, 1, 5, 8, 9, 3, 5, 6, 5, 5, 0, 2, 5, 7, 1, 7, 3, 8, 0, 3, 6, 7, 7, 6, 8, 6, 6, 6, 7, 9, 2, 7, 2], [1, 2, 2, 1, 0, 0, 1, 2, 2, 1, 0, 3, 2, 2, 3, 0, 3, 1, 1, 3, 2, 3, 1, 3, 2, 2, 2, 2], [22, 55, 35, 95, 95, 65, 86, 73], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [80, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 13, 7, 3, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))))))))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [5, 2, 6, 6, 0, 4, 2, 3, 4, 1, 3, 8, 9, 3, 2, 6, 0, 1, 0, 2, 4, 2, 6, 3, 2, 1, 9, 3, 3, 6, 2, 0, 1, 0, 3, 8, 1, 0], [1, 0, 2, 1, 0, 0, 1, 2, 0, 1, 0, 3, 2, 2, 3, 0, 3, 1, 3, 3, 2, 3, 1, 0, 1, 0], [22, 17, 35, 70, 9, 16, 17, 1, 71, 66], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 64, 64, 38, 26, 10, 7, 7, 5, 2, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), grad)))), grad)), tf.math.multiply(grad, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(grad), tf.math.add(alpha, grad))))), grad)))), grad))))))), tf.math.subtract(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, alpha))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 8, 8, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.09399999678134918, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.5668009042960307, 2.3614723444016477, 2.3092427258446797, 2.30417843690685, 2.3031466050375378, 2.3031536505254127], "accuracy": [0.19495442509651184, 0.1760665625333786, 0.09985470771789551, 0.09747721254825592, 0.09694888442754745, 0.1014397069811821], "val_loss": [1.9741764749799455, 1.9828106335231237, 1.974942684173584, 1.9737356730869837, 1.9737162590026855, 1.9736281803676061], "val_accuracy": [0.10266666859388351, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.09966666996479034, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 1, 2, 2, 1, 0, 1, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 8, 8, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [93, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.05485714226961136, "mapping_values": [1, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), alpha)), grad)), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3018239290171674, 2.301865938270034, 2.302904144112523, 2.3008953142537734, 2.3021046643590317, 2.302387311962129, 2.300834420838644, 2.301597450104183, 2.3017310244359077, 2.301207833805923, 2.3025479214365583, 2.3013579154830204, 2.3017775239315896, 2.3010503259773945, 2.3017102868691444, 2.3004432827679078, 2.3014597679566964, 2.301213218110538, 2.301173143540517, 2.301001750876513, 2.3012963271238673, 2.300640196108059, 2.3012165184333386, 2.299552017718794, 2.2998119989296133, 2.3007606020567044, 2.3014489331848162, 2.300528293178066, 2.3021221569957135, 2.3000198638418707, 2.299034142805963, 2.300245912713366, 2.3005955469307566, 2.3009058995537233, 2.3000581685845813, 2.3000436505904807, 2.2999561773929234, 2.3009340178303637, 2.299356862963655], "accuracy": [0.09311848133802414, 0.08902391046285629, 0.09034473448991776, 0.09377889335155487, 0.08955223858356476, 0.0952318087220192, 0.09391097724437714, 0.09311848133802414, 0.09285431355237961, 0.09074098616838455, 0.0882314071059227, 0.09245806187391281, 0.09113723784685135, 0.09655263274908066, 0.08968432247638702, 0.09549596905708313, 0.09272222965955734, 0.09338264167308807, 0.09549596905708313, 0.09206181764602661, 0.09074098616838455, 0.09457138925790787, 0.09853387624025345, 0.09668471664190292, 0.0936468094587326, 0.0956280529499054, 0.09166556596755981, 0.09325055778026581, 0.09642054885625839, 0.09430722147226334, 0.10117553919553757, 0.08955223858356476, 0.0940430611371994, 0.0936468094587326, 0.09826971590518951, 0.09589222073554993, 0.09694888442754745, 0.08717474341392517, 0.09774138033390045], "val_loss": [1.9705134800502233, 1.970445019858224, 1.9703708376203264, 1.970325197492327, 1.9702561923435755, 1.9701712472098214, 1.9701220648629325, 1.9700469289507185, 1.9699788093566895, 1.9699122565133231, 1.9698604856218611, 1.9698099408830916, 1.9697555133274622, 1.9696946144104004, 1.9696262223379952, 1.9695674351283483, 1.969522408076695, 1.969475405556815, 1.9694220679146903, 1.9693818092346191, 1.9693446159362793, 1.9693200928824288, 1.9692812647138322, 1.9692658696855818, 1.9692445482526506, 1.9692178453717912, 1.969191551208496, 1.9691600118364607, 1.9691264288766044, 1.969104221888951, 1.969097478049142, 1.9690820830208915, 1.9690613065447127, 1.9690418924604143, 1.9690335137503487, 1.9690313339233398, 1.9690247944423132, 1.9690197535923548, 1.9690204347882951], "val_accuracy": [0.03933333232998848, 0.03966666758060455, 0.041333332657814026, 0.041999999433755875, 0.0430000014603138, 0.043666668236255646, 0.04500000178813934, 0.04533333331346512, 0.04600000008940697, 0.04766666516661644, 0.04866666719317436, 0.04800000041723251, 0.04766666516661644, 0.04800000041723251, 0.04899999871850014, 0.04866666719317436, 0.049666665494441986, 0.049666665494441986, 0.050333332270383835, 0.050333332270383835, 0.05066666752099991, 0.05166666582226753, 0.052666667848825455, 0.05299999937415123, 0.05366666615009308, 0.05433333292603493, 0.05533333495259285, 0.055666666477918625, 0.0560000017285347, 0.0560000017285347, 0.0560000017285347, 0.05666666850447655, 0.05766666680574417, 0.05833333358168602, 0.05833333358168602, 0.057999998331069946, 0.05766666680574417, 0.057999998331069946, 0.05833333358168602]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 2, 3, 2, 2, 2, 2, 8, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 2, 2, 2, 1, 2, 1, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [8, 0, 3, 8, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [93, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [57, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 22, 22, 12, 10, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.subtract(grad, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3018591705645237, 2.301990327361458, 2.303130682323115, 2.301147784413348, 2.302471265186959, 2.3028725743876346], "accuracy": [0.09298639744520187, 0.08889182657003403, 0.09113723784685135, 0.09272222965955734, 0.08889182657003403, 0.09377889335155487], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 2, 3, 2, 1, 2, 2, 8, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [93, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.3018591705645237, 2.301990327361458, 2.303130682323115, 2.301147784413348, 2.302471265186959, 2.3028725743876346], "accuracy": [0.09298639744520187, 0.08889182657003403, 0.09113723784685135, 0.09272222965955734, 0.08889182657003403, 0.09377889335155487], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [3, 2, 3, 2, 1, 0, 2, 5, 2, 6, 2, 8, 9, 3, 2, 6, 0, 5, 0, 2, 4, 0, 8, 4, 5, 4, 4, 1, 1, 8, 2, 9, 1, 1, 4, 4, 9], [0, 1, 2, 0, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2, 2, 3, 2, 0, 1, 0, 1, 1, 1, 0], [22, 3, 81, 95, 95, 57, 86, 73], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 5, 3, 0, 3, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(grad)))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(sigma))", "other_info": {"loss": [2.3018591705645237, 2.301990327361458, 2.303130682323115, 2.301147784413348, 2.302471265186959, 2.3028725743876346], "accuracy": [0.09298639744520187, 0.08889182657003403, 0.09113723784685135, 0.09272222965955734, 0.08889182657003403, 0.09377889335155487], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 1, 3, 2, 6, 2, 2, 3, 3, 1, 8, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 2, 2, 2, 1, 0, 1, 0, 0, 3, 2, 2], [31, 62, 35, 73, 14, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [8, 1, 3, 0, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 3, 1, 3, 0, 0], [60, 23, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [10, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 11, 11, 5, 6, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3018591705645237, 2.301990327361458, 2.303130682323115, 2.301147784413348, 2.302471265186959, 2.3028725743876346], "accuracy": [0.09298639744520187, 0.08889182657003403, 0.09113723784685135, 0.09272222965955734, 0.08889182657003403, 0.09377889335155487], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 4, 6, 0, 8, 9, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3018591705645237, 2.301990327361458, 2.303130682323115, 2.301147784413348, 2.302471265186959, 2.3028725743876346], "accuracy": [0.09298639744520187, 0.08889182657003403, 0.09113723784685135, 0.09272222965955734, 0.08889182657003403, 0.09377889335155487], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [5, 2, 6, 6, 2, 4, 2, 3, 2, 1, 3, 8, 9, 3, 0, 6, 0, 2, 0, 4, 4, 2, 5, 3, 2, 3, 5, 3, 3, 6, 2, 0, 9, 2], [1, 2, 2, 1, 0, 0, 2, 2, 0, 1, 0, 3, 1, 2, 3, 0, 3, 1, 3, 3, 2, 3, 1, 0], [81, 62, 35, 73, 95, 1, 81, 19, 77, 41, 8], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 3, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 3, 0, 2, 1, 3, 0, 0], [37, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 0, 14, 14, 8, 6, 4, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, alpha), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), grad)))), tf.math.pow(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3018591705645237, 2.301990327361458, 2.303130682323115, 2.301147784413348, 2.302471265186959, 2.3028725743876346], "accuracy": [0.09298639744520187, 0.08889182657003403, 0.09113723784685135, 0.09272222965955734, 0.08889182657003403, 0.09377889335155487], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]