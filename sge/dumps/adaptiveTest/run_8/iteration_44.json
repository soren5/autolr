[{"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [1, 3, 2, 3], [48, 57], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 30, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.7985714077949524, "mapping_values": [1, 3, 3, 1, 2, 0, 18, 18, 10, 8, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), beta)))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.08585387414016, 1.393623203224179, 1.1028933247413302, 0.9012055697694289, 0.8632778767990855, 0.8057721515751124, 0.7776448423316717, 0.7484177147014786, 0.7008669740173401, 0.6825973219828063, 0.6664128359503135, 0.6450466161327844, 0.6535500484434936, 0.686377781320163, 0.6088424772004473, 0.6048840205934872, 0.6125172017477507, 0.5966642461180797, 0.5872968049050007, 0.5785144970889703, 0.573703579867379], "accuracy": [0.3135649263858795, 0.49689605832099915, 0.6107515692710876, 0.6679434776306152, 0.6812838315963745, 0.7009642124176025, 0.7049266695976257, 0.715889573097229, 0.7333245277404785, 0.7358341217041016, 0.7460044622421265, 0.7625148296356201, 0.7500990629196167, 0.7384757399559021, 0.7697794437408447, 0.7726852297782898, 0.763439416885376, 0.7763835787773132, 0.776251494884491, 0.7746664881706238, 0.7828556299209595], "val_loss": [1.2125168868473597, 0.8094797134399414, 0.6692324876785278, 0.6368583951677594, 0.6268915619168963, 0.5773206949234009, 0.5597261020115444, 0.5438368150166103, 0.5327247892107282, 0.5093467065266201, 0.5153860194342477, 0.5133670227868217, 0.6602741990770612, 0.47908040455409456, 0.48148299966539654, 0.4580520306314741, 0.47726150921412874, 0.47575511251177105, 0.46270556109292166, 0.46955101830618723, 0.45485085248947144], "val_accuracy": [0.5053333044052124, 0.6466666460037231, 0.7080000042915344, 0.7149999737739563, 0.7256666421890259, 0.7423333525657654, 0.7683333158493042, 0.7649999856948853, 0.765999972820282, 0.7839999794960022, 0.7829999923706055, 0.7436666488647461, 0.715666651725769, 0.8043333292007446, 0.7903333306312561, 0.8103333115577698, 0.7919999957084656, 0.7743333578109741, 0.7986666560173035, 0.7916666865348816, 0.8076666593551636]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 3, 2, 3], [79, 57], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [6, 5, 6, 6, 2, 3, 9, 8, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [1, 0, 3, 3, 0, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 9, 2, 9], [3, 3, 3, 1], [43, 38]], "fitness": -0.7908571362495422, "mapping_values": [1, 3, 3, 1, 2, 0, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [2.1347475043377306, 1.596412956360356, 1.540488939542875, 1.0826211144596343, 0.981898662042876, 0.8319275429330372, 0.7774391420733706, 0.7324338961727725, 0.6986917961999457, 0.6847137847218798, 0.6515321739046502, 0.6279774300725531, 0.6108539358594273, 0.6145068906348977, 0.5605990987223342], "accuracy": [0.2945449650287628, 0.49029189348220825, 0.4830273389816284, 0.604939877986908, 0.6349227428436279, 0.6860388517379761, 0.7121912837028503, 0.7182670831680298, 0.7375511527061462, 0.7424382567405701, 0.7477215528488159, 0.7651565074920654, 0.7614582180976868, 0.7638356685638428, 0.7887993454933167], "val_loss": [1.3806208883013045, 1.4590651648385184, 1.0442802224840437, 0.7903091396604266, 0.6664777142660958, 0.6950313874653408, 0.543602466583252, 0.5222512994493756, 0.5426079375403268, 0.4872469902038574, 0.5217520850045341, 0.4934539794921875, 0.5293130704334804, 0.4841815914426531, 0.49217658383505686], "val_accuracy": [0.6006666421890259, 0.46566668152809143, 0.628000020980835, 0.6193333268165588, 0.6796666383743286, 0.6733333468437195, 0.7639999985694885, 0.7566666603088379, 0.7676666378974915, 0.7846666574478149, 0.7526666522026062, 0.7733333110809326, 0.7543333172798157, 0.7699999809265137, 0.7596666812896729]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [1, 4, 4, 9], [2, 1, 2, 3], [79, 57], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [5, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 2, 3, 0, 3, 1, 3, 3, 0], [42, 6, 19, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.7900000214576721, "mapping_values": [1, 3, 3, 1, 2, 0, 19, 19, 11, 8, 2, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))), beta)), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [2.159702980097936, 1.7982161880216547, 1.2842118241106435, 1.0065333730650774, 0.8962106928455674, 0.8271047409420645, 0.7488414580008578, 0.7502932629691076, 0.6963970594244894, 0.6778598782991327, 0.6600868656194095, 0.645365566727728, 0.6293673983197785, 0.5794951985414868, 0.5529281623989222, 0.5939574498053886, 0.5441589018750924], "accuracy": [0.28358209133148193, 0.4151366949081421, 0.5704662799835205, 0.6474705934524536, 0.6622639298439026, 0.6903975605964661, 0.7209087014198303, 0.7224937081336975, 0.733588695526123, 0.7405890822410583, 0.7508915662765503, 0.7560427784919739, 0.7593448758125305, 0.7786290049552917, 0.791969358921051, 0.769911527633667, 0.7971205711364746], "val_loss": [1.8077639852251326, 1.1192889894757951, 1.0280161244528634, 0.7040551900863647, 0.6385917493275234, 0.7348840577261788, 0.5739091805049351, 0.6161761454173497, 0.5550071852547782, 0.4929992471422468, 0.5156211171831403, 0.478195207459586, 0.476216231073652, 0.45521219287599834, 0.5564279045377459, 0.4622360127312796, 0.46995714732578825], "val_accuracy": [0.3036666810512543, 0.6610000133514404, 0.6499999761581421, 0.6663333177566528, 0.7129999995231628, 0.6603333353996277, 0.7266666889190674, 0.699999988079071, 0.7429999709129333, 0.7913333177566528, 0.7726666927337646, 0.79666668176651, 0.7893333435058594, 0.7926666736602783, 0.7486666440963745, 0.7933333516120911, 0.7826666831970215]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 7, 0, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [3, 40, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 2, 6, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.3499999940395355, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.5595178382114225, 2.2776929742041956, 2.305652404426662, 2.3377931335614486, 2.304008098436526, 2.303049820320654], "accuracy": [0.2052568942308426, 0.15942411124706268, 0.19838859140872955, 0.09945846349000931, 0.09813763201236725, 0.09800554811954498], "val_loss": [1.6312804562704903, 1.9724810464041573, 2.1042310850960866, 1.9753327369689941, 1.9739022936139787, 1.9736601284572057], "val_accuracy": [0.3580000102519989, 0.11533333361148834, 0.10400000214576721, 0.0976666659116745, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [2, 3, 9, 2, 9], [3, 1, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 5, 5, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 2, 3, 3, 0], [90, 40, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [20, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 7, 5, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad))))), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.310453959932228, 2.4047098341178366, 2.5842337129988673, 2.8239723624271127, 3.1068056809699076, 3.423667664037263], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0118727002825056, 2.13626868384225, 2.320629528590611, 2.5468758174351285, 2.804659843444824, 3.0881549290248325], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [8, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 2, 3, 0, 8, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [1, 2, 3, 3, 0, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 2, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 14, 14, 7, 7, 1, 1, 0, 0, 0, 0, 6, 4, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(beta, beta)), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [4365969.125527424, 84778817.43072249, 388133373.62462026, 1083092205.6732268, 2349901535.167349, 4200440445.514727], "accuracy": [0.09760929644107819, 0.10011887550354004, 0.09628847241401672, 0.09549596905708313, 0.09866596013307571, 0.10038304328918457], "val_loss": [16737837.142857144, 133634724.57142857, 450719030.85714287, 1068019126.8571428, 2085576118.857143, 3603403190.857143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 4, 4, 9], [2, 1, 2, 3], [79, 57], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 3, 6, 5, 2, 3, 9, 4, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [3, 3, 3, 1, 0, 3, 0, 1, 3, 0, 0, 0, 5], [58, 45, 43, 93, 81, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 1, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 10, 10, 5, 5, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), grad)), tf.math.add(grad, alpha))), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, alpha)))", "other_info": {"loss": [1070.154521109012, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.13855500519275665, 0.09351472556591034, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [189086381787.42856, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [6, 5, 6, 2, 2, 3, 9, 8, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [1, 3, 3, 0, 0, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 9, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 19, 19, 11, 8, 3, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, beta))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [4365969.125527424, 84778817.43072249, 388133373.62462026, 1083092205.6732268, 2349901535.167349, 4200440445.514727], "accuracy": [0.09760929644107819, 0.10011887550354004, 0.09628847241401672, 0.09549596905708313, 0.09866596013307571, 0.10038304328918457], "val_loss": [16737837.142857144, 133634724.57142857, 450719030.85714287, 1068019126.8571428, 2085576118.857143, 3603403190.857143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [2, 1, 4, 9], [2, 2, 2, 3], [79, 57], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 0, 0, 1, 8, 0, 2, 2, 8, 4, 6, 9, 8, 2, 1, 8, 1, 0, 5, 4, 5, 7, 5, 7], [1, 3, 4, 1, 2, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [6, 3, 9, 2, 9], [3, 3, 3, 1], [45, 81]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), tf.math.negative(tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07290978729724884, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 3, 2, 3], [79, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [8, 5, 6, 6, 2, 3, 9, 8, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [1, 0, 3, 3, 3, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [1, 3], [], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 5, 9], [3, 3, 3, 1], [43, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 14, 14, 9, 5, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(grad, tf.math.add(beta, grad))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1142517477273941, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 1, 2, 3], [79, 57], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 3, 0, 1, 3, 0, 0, 0, 5], [58, 45, 43, 93, 81, 78], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 2, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 1, 1, 1, 0, 1, 0, 6, 5, 1, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [12.850190965427998, 2.3934027862712584, 116.24331038846253, 2.345411904058783, 2.3390920715498305, 2.3371055091550055], "accuracy": [0.10091137140989304, 0.09826971590518951, 0.10038304328918457, 0.09826971590518951, 0.09985470771789551, 0.10077928751707077], "val_loss": [2.0004774502345493, 2.1317698614937917, 2.1032052721296037, 1.9855288778032576, 2.0383458818708147, 2.0356811114719937], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 0, 2, 3], [79, 57], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 4, 0, 3, 0, 1, 3, 0, 0, 0, 5], [58, 45, 43, 93, 81, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 2, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), grad), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07290978729724884, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 0, 6, 0, 3, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [90, 54, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 5, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.05657142773270607, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.divide_no_nan(alpha, grad)), tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(sigma)))", "other_info": {"loss": [2.302376536361892, 2.3025033985067904, 2.3018542152936856, 2.304301602351368, 2.3032702788732244, 2.301887614836294, 2.302123669415354, 2.3021281625868353, 2.302594778481381, 2.3013692516550615, 2.3010224397266548, 2.300719801649961, 2.3006727318202564, 2.3012601357755913, 2.300688665304611, 2.300810268731118, 2.30166138630848, 2.3011768274870312, 2.301337682843413, 2.301575617846276, 2.301299003514915, 2.300367996220607, 2.301425994489612, 2.3010014018929317, 2.299835777742484, 2.2989987535026994, 2.300075124771588, 2.3005031868923673, 2.300122097955325, 2.300134408144887, 2.301324551808694, 2.2991188463360452, 2.299489353153731, 2.298922941968457, 2.3003035312189546, 2.3007385047702993, 2.29910646718113, 2.298803667807387, 2.298833395118144, 2.299972780785934, 2.299625937083079, 2.298132698974589, 2.3008722608367513, 2.298704153511109, 2.2984592726894766, 2.300649788590344, 2.298820004754803, 2.297739526079536, 2.3005691383965434, 2.2976798259539613, 2.2987605541326492, 2.297997134630281, 2.299178163940093, 2.2984435638936125, 2.29955624321653, 2.298139851311525, 2.2970693083707574, 2.298008528462396, 2.2966346358736476, 2.2986325790003197, 2.297934876425454, 2.2972343908939, 2.2972304164111543, 2.2987667525433406, 2.2984698231918403, 2.2972730384794415, 2.298323494678538, 2.2971217986882686, 2.2976649813349095, 2.298035141215931, 2.297187802656499, 2.2971733844889592, 2.297305062997768, 2.296596467550074, 2.298148570138198, 2.297319121380303, 2.2981055988658925, 2.2966843421952663, 2.2964869082454267, 2.2976233148933827, 2.2970582134829787, 2.2968950581163257, 2.297712469617405, 2.2965402179595076, 2.2954176194033904, 2.2962616996805445, 2.296103032289353, 2.297404228341956, 2.297133245456803, 2.2971204346543557, 2.297405074946774, 2.2979236130921628, 2.2958992907494253, 2.2970344195544143, 2.2948183830403823, 2.295469499424763, 2.296400602829691, 2.2960972365229564, 2.295246440752418, 2.296475531733378], "accuracy": [0.09047681838274002, 0.08440100401639938, 0.09259014576673508, 0.08347642421722412, 0.08374059200286865, 0.08849557489156723, 0.09391097724437714, 0.0936468094587326, 0.08651433140039444, 0.09219389408826828, 0.09259014576673508, 0.0940430611371994, 0.09655263274908066, 0.09536388516426086, 0.09206181764602661, 0.0948355570435524, 0.09074098616838455, 0.09272222965955734, 0.08902391046285629, 0.09734513610601425, 0.09589222073554993, 0.09285431355237961, 0.0948355570435524, 0.09708096832036972, 0.09853387624025345, 0.10368511080741882, 0.09259014576673508, 0.10051512718200684, 0.09549596905708313, 0.09602430462837219, 0.0952318087220192, 0.09628847241401672, 0.09985470771789551, 0.10091137140989304, 0.0948355570435524, 0.09298639744520187, 0.09919429570436478, 0.10051512718200684, 0.09972262382507324, 0.09642054885625839, 0.1014397069811821, 0.10051512718200684, 0.09919429570436478, 0.09760929644107819, 0.09245806187391281, 0.09628847241401672, 0.10381719470024109, 0.10513802617788315, 0.09972262382507324, 0.09919429570436478, 0.09972262382507324, 0.09774138033390045, 0.1018359512090683, 0.09906221181154251, 0.09959053993225098, 0.09826971590518951, 0.10117553919553757, 0.1006472036242485, 0.10738343745470047, 0.10157178342342377, 0.10091137140989304, 0.10434553027153015, 0.1010434553027153, 0.09906221181154251, 0.09932637959718704, 0.1022322028875351, 0.09787346422672272, 0.10302469879388809, 0.10302469879388809, 0.10342095047235489, 0.10276053100824356, 0.10196803510189056, 0.10077928751707077, 0.09972262382507324, 0.10011887550354004, 0.10830801725387573, 0.1002509593963623, 0.10566636174917221, 0.10315678268671036, 0.10130762308835983, 0.10447761416435242, 0.1022322028875351, 0.10355303436517715, 0.1022322028875351, 0.11266675591468811, 0.10394927859306335, 0.10593052208423615, 0.10421344637870789, 0.10606260597705841, 0.10474177449941635, 0.10434553027153015, 0.10527011007070541, 0.10593052208423615, 0.10408136248588562, 0.109232597053051, 0.1080438494682312, 0.1022322028875351, 0.11028926074504852, 0.11042134463787079, 0.10857218503952026], "val_loss": [1.970498902457101, 1.9704062598092216, 1.970322949545724, 1.9702442032950265, 1.9701598712376185, 1.9700860295976912, 1.9700103487287248, 1.9699360983712333, 1.969860281263079, 1.9697818756103516, 1.9697006770542689, 1.9696261542184013, 1.9695585795811243, 1.9694835799080985, 1.9693950244358607, 1.9693187304905482, 1.9692440032958984, 1.9691720008850098, 1.9690989085606165, 1.9690307208469935, 1.9689568792070662, 1.9688779285975866, 1.9688061305454798, 1.9687384877886092, 1.9686745234898158, 1.9685944148472376, 1.9685264314923967, 1.9684598786490304, 1.9683945519583566, 1.9683252743312292, 1.9682588577270508, 1.9681989806038993, 1.9681386266435896, 1.9680754116603307, 1.9680185999189104, 1.9679537500653947, 1.9678940773010254, 1.9678348813738142, 1.9677718707493372, 1.9677134241376604, 1.967653751373291, 1.9675979614257812, 1.9675421714782715, 1.9674839292253767, 1.967420986720494, 1.9673636300223214, 1.967308180672782, 1.967252322605678, 1.9671947615487235, 1.9671404021126884, 1.9670916966029577, 1.9670401981898717, 1.9669817515781947, 1.966930525643485, 1.9668779373168945, 1.9668224879673548, 1.966764177594866, 1.9667091369628906, 1.9666454451424735, 1.9665923118591309, 1.966543129512242, 1.966494151524135, 1.9664427212306432, 1.9663927895682198, 1.9663419723510742, 1.9662910188947404, 1.9662459237234933, 1.9661969457353865, 1.966146673474993, 1.96609708241054, 1.9660508292061942, 1.9660024642944336, 1.9659535544259208, 1.9659072331019811, 1.9658569608415877, 1.9658112525939941, 1.9657579149518694, 1.9657046454293388, 1.965644700186593, 1.965592384338379, 1.9655419077192033, 1.965493883405413, 1.965444837297712, 1.9653949737548828, 1.9653486524309431, 1.9652996744428362, 1.9652575765337263, 1.965207576751709, 1.9651619366237096, 1.9651158196585519, 1.9650686127798898, 1.965022359575544, 1.9649804660252161, 1.964930806841169, 1.9648855073111398, 1.9648374829973494, 1.9647884368896484, 1.9647389820643835, 1.964693818773542, 1.964651380266462], "val_accuracy": [0.039000000804662704, 0.03966666758060455, 0.03966666758060455, 0.041333332657814026, 0.041999999433755875, 0.0430000014603138, 0.04266666620969772, 0.0430000014603138, 0.044333335012197495, 0.04466666653752327, 0.045666664838790894, 0.045666664838790894, 0.045666664838790894, 0.04600000008940697, 0.04600000008940697, 0.047333333641290665, 0.047333333641290665, 0.04766666516661644, 0.04800000041723251, 0.04833333194255829, 0.04899999871850014, 0.05066666752099991, 0.05066666752099991, 0.05133333429694176, 0.05299999937415123, 0.0533333346247673, 0.05366666615009308, 0.05366666615009308, 0.05400000140070915, 0.05433333292603493, 0.054666668176651, 0.054666668176651, 0.054999999701976776, 0.05533333495259285, 0.055666666477918625, 0.055666666477918625, 0.056333333253860474, 0.056333333253860474, 0.05766666680574417, 0.057999998331069946, 0.05900000035762787, 0.059333331882953644, 0.059333331882953644, 0.05966666713356972, 0.05966666713356972, 0.05966666713356972, 0.060333333909511566, 0.06066666543483734, 0.06133333221077919, 0.06133333221077919, 0.061666667461395264, 0.061666667461395264, 0.061666667461395264, 0.061666667461395264, 0.06199999898672104, 0.06266666948795319, 0.06300000101327896, 0.06300000101327896, 0.06300000101327896, 0.06266666948795319, 0.06333333253860474, 0.06400000303983688, 0.06400000303983688, 0.06433333456516266, 0.06466666609048843, 0.06466666609048843, 0.06499999761581421, 0.06499999761581421, 0.06499999761581421, 0.06533333659172058, 0.06533333659172058, 0.06599999964237213, 0.06700000166893005, 0.0676666647195816, 0.06833333522081375, 0.0689999982714653, 0.06933332979679108, 0.07000000029802322, 0.07000000029802322, 0.07100000232458115, 0.07100000232458115, 0.07100000232458115, 0.0716666653752327, 0.07199999690055847, 0.07199999690055847, 0.07266666740179062, 0.07366666942834854, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.07533333450555801, 0.07599999755620956, 0.07733333110809326, 0.07733333110809326, 0.07766667008399963, 0.07866666465997696, 0.07900000363588333, 0.07999999821186066, 0.08133333176374435]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [2, 4, 4, 9], [2, 1, 2, 3], [79, 57], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 6, 6, 5, 2, 3, 9, 4, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [3, 3, 3, 1, 0, 3, 0, 1, 3, 0, 0, 0, 5], [42, 71, 43, 84, 1, 78], [1, 0, 0, 1, 0], [0, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 7, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 1, 18, 18, 10, 8, 3, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024142850045246, 2.302637850619452, 2.302077635797952, 2.3046109468520295, 2.303675302881622, 2.302363094101335], "accuracy": [0.09008057415485382, 0.08387266844511032, 0.09153348207473755, 0.08228767663240433, 0.08321225643157959, 0.08730682730674744], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0], [2, 4, 4, 9], [2, 0, 2, 3], [79, 57], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 6, 6, 5, 2, 3, 9, 4, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [3, 3, 3, 1, 0, 3, 0, 1, 3, 0, 0, 0, 5], [58, 45, 43, 93, 81, 78], [1, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [3, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 2, 12, 12, 7, 5, 2, 1, 0, 0, 0, 0, 7, 4, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, grad), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(grad))), tf.math.add(tf.math.multiply(grad, alpha), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), sigma), tf.math.add(sigma, sigma))", "other_info": {"loss": [2.3024142850045246, 2.302637850619452, 2.302077635797952, 2.3046109468520295, 2.303675302881622, 2.302363094101335], "accuracy": [0.09008057415485382, 0.08387266844511032, 0.09153348207473755, 0.08228767663240433, 0.08321225643157959, 0.08730682730674744], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 1, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [98, 40, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 5, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3024142850045246, 2.302637850619452, 2.302077635797952, 2.3046109468520295, 2.303675302881622, 2.302363094101335], "accuracy": [0.09008057415485382, 0.08387266844511032, 0.09153348207473755, 0.08228767663240433, 0.08321225643157959, 0.08730682730674744], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [9, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 3, 0, 0, 3, 2, 3, 3, 0], [62, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 2, 1, 1, 1, 0, 1, 5, 4, 2, 2, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024142850045246, 2.302637850619452, 2.302077635797952, 2.3046109468520295, 2.303675302881622, 2.302363094101335], "accuracy": [0.09008057415485382, 0.08387266844511032, 0.09153348207473755, 0.08228767663240433, 0.08321225643157959, 0.08730682730674744], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [50, 57], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 5, 0, 3, 0, 3, 3, 0], [62, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 5, 5, 1, 5, 4, 2, 2, 0, 3, 2, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(sigma))", "other_info": {"loss": [2.3024142850045246, 2.302637850619452, 2.302077635797952, 2.3046109468520295, 2.303675302881622, 2.302363094101335], "accuracy": [0.09008057415485382, 0.08387266844511032, 0.09153348207473755, 0.08228767663240433, 0.08321225643157959, 0.08730682730674744], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 1, 3, 3, 0, 3, 2, 3, 3, 0], [90, 40, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [61, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 5, 5, 1, 5, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3024142850045246, 2.302637850619452, 2.302077635797952, 2.3046109468520295, 2.303675302881622, 2.302363094101335], "accuracy": [0.09008057415485382, 0.08387266844511032, 0.09153348207473755, 0.08228767663240433, 0.08321225643157959, 0.08730682730674744], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]