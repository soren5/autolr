[{"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7788571715354919, "mapping_values": [1, 14, 14, 7, 7, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1168729480168507, 1.725589619210651, 1.3932928195199348, 1.037689300977543, 0.9422576722609385, 0.8171339348291189, 0.8004113527620316, 0.7514217401602643, 0.7163948621165405, 0.7135750770238192, 0.6937675966546992, 0.6749953009889834, 0.6299993017125738, 0.6165540843292738, 0.6103883021464516, 0.6016024353639278, 0.5803409087864194], "accuracy": [0.2938845455646515, 0.48064985871315, 0.5361247062683105, 0.6236956715583801, 0.6498481035232544, 0.6927750706672668, 0.695813000202179, 0.7083608508110046, 0.7215691208839417, 0.7250033020973206, 0.7284374833106995, 0.7337207794189453, 0.7565711140632629, 0.7680623531341553, 0.7637035846710205, 0.7734777331352234, 0.7757231593132019], "val_loss": [1.8024063791547502, 1.0634595326014928, 0.8961435045514788, 0.8882984093257359, 0.7497489622661045, 0.6960432529449463, 0.5668328830174038, 0.5745511225291661, 0.600367614201137, 0.609618970326015, 0.5238161257335118, 0.4782824345997402, 0.5159621579306466, 0.4919234003339495, 0.5142149414334979, 0.4745802368436541, 0.5070948941367013], "val_accuracy": [0.4673333466053009, 0.6286666393280029, 0.6106666922569275, 0.624666690826416, 0.6366666555404663, 0.7126666903495789, 0.7400000095367432, 0.7526666522026062, 0.7160000205039978, 0.7083333134651184, 0.7516666650772095, 0.7863333225250244, 0.7663333415985107, 0.7713333368301392, 0.7636666893959045, 0.7860000133514404, 0.7319999933242798]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 5, 1, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 3, 2, 2], [3, 62, 35, 73, 95, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 2, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.7788571715354919, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1168729480168507, 1.725589619210651, 1.3932928195199348, 1.037689300977543, 0.9422576722609385, 0.8171339348291189, 0.8004113527620316, 0.7514217401602643, 0.7163948621165405, 0.7135750770238192, 0.6937675966546992, 0.6749953009889834, 0.6299993017125738, 0.6165540843292738, 0.6103883021464516, 0.6016024353639278, 0.5803409087864194], "accuracy": [0.2938845455646515, 0.48064985871315, 0.5361247062683105, 0.6236956715583801, 0.6498481035232544, 0.6927750706672668, 0.695813000202179, 0.7083608508110046, 0.7215691208839417, 0.7250033020973206, 0.7284374833106995, 0.7337207794189453, 0.7565711140632629, 0.7680623531341553, 0.7637035846710205, 0.7734777331352234, 0.7757231593132019], "val_loss": [1.8024063791547502, 1.0634595326014928, 0.8961435045514788, 0.8882984093257359, 0.7497489622661045, 0.6960432529449463, 0.5668328830174038, 0.5745511225291661, 0.600367614201137, 0.609618970326015, 0.5238161257335118, 0.4782824345997402, 0.5159621579306466, 0.4919234003339495, 0.5142149414334979, 0.4745802368436541, 0.5070948941367013], "val_accuracy": [0.4673333466053009, 0.6286666393280029, 0.6106666922569275, 0.624666690826416, 0.6366666555404663, 0.7126666903495789, 0.7400000095367432, 0.7526666522026062, 0.7160000205039978, 0.7083333134651184, 0.7516666650772095, 0.7863333225250244, 0.7663333415985107, 0.7713333368301392, 0.7636666893959045, 0.7860000133514404, 0.7319999933242798]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7788571715354919, "mapping_values": [1, 10, 10, 5, 5, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.pow(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1168729480168507, 1.725589619210651, 1.3932928195199348, 1.037689300977543, 0.9422576722609385, 0.8171339348291189, 0.8004113527620316, 0.7514217401602643, 0.7163948621165405, 0.7135750770238192, 0.6937675966546992, 0.6749953009889834, 0.6299993017125738, 0.6165540843292738, 0.6103883021464516, 0.6016024353639278, 0.5803409087864194], "accuracy": [0.2938845455646515, 0.48064985871315, 0.5361247062683105, 0.6236956715583801, 0.6498481035232544, 0.6927750706672668, 0.695813000202179, 0.7083608508110046, 0.7215691208839417, 0.7250033020973206, 0.7284374833106995, 0.7337207794189453, 0.7565711140632629, 0.7680623531341553, 0.7637035846710205, 0.7734777331352234, 0.7757231593132019], "val_loss": [1.8024063791547502, 1.0634595326014928, 0.8961435045514788, 0.8882984093257359, 0.7497489622661045, 0.6960432529449463, 0.5668328830174038, 0.5745511225291661, 0.600367614201137, 0.609618970326015, 0.5238161257335118, 0.4782824345997402, 0.5159621579306466, 0.4919234003339495, 0.5142149414334979, 0.4745802368436541, 0.5070948941367013], "val_accuracy": [0.4673333466053009, 0.6286666393280029, 0.6106666922569275, 0.624666690826416, 0.6366666555404663, 0.7126666903495789, 0.7400000095367432, 0.7526666522026062, 0.7160000205039978, 0.7083333134651184, 0.7516666650772095, 0.7863333225250244, 0.7663333415985107, 0.7713333368301392, 0.7636666893959045, 0.7860000133514404, 0.7319999933242798]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 8, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 1, 8, 8, 5, 6, 5, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 1, 2, 0, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.7788571715354919, "mapping_values": [1, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), alpha)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1168729480168507, 1.725589619210651, 1.3932928195199348, 1.037689300977543, 0.9422576722609385, 0.8171339348291189, 0.8004113527620316, 0.7514217401602643, 0.7163948621165405, 0.7135750770238192, 0.6937675966546992, 0.6749953009889834, 0.6299993017125738, 0.6165540843292738, 0.6103883021464516, 0.6016024353639278, 0.5803409087864194], "accuracy": [0.2938845455646515, 0.48064985871315, 0.5361247062683105, 0.6236956715583801, 0.6498481035232544, 0.6927750706672668, 0.695813000202179, 0.7083608508110046, 0.7215691208839417, 0.7250033020973206, 0.7284374833106995, 0.7337207794189453, 0.7565711140632629, 0.7680623531341553, 0.7637035846710205, 0.7734777331352234, 0.7757231593132019], "val_loss": [1.8024063791547502, 1.0634595326014928, 0.8961435045514788, 0.8882984093257359, 0.7497489622661045, 0.6960432529449463, 0.5668328830174038, 0.5745511225291661, 0.600367614201137, 0.609618970326015, 0.5238161257335118, 0.4782824345997402, 0.5159621579306466, 0.4919234003339495, 0.5142149414334979, 0.4745802368436541, 0.5070948941367013], "val_accuracy": [0.4673333466053009, 0.6286666393280029, 0.6106666922569275, 0.624666690826416, 0.6366666555404663, 0.7126666903495789, 0.7400000095367432, 0.7526666522026062, 0.7160000205039978, 0.7083333134651184, 0.7516666650772095, 0.7863333225250244, 0.7663333415985107, 0.7713333368301392, 0.7636666893959045, 0.7860000133514404, 0.7319999933242798]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [3, 2, 4, 5, 0, 2, 2, 2, 2, 1, 5, 8, 2, 3, 2, 6, 2, 5, 0, 2, 3, 2], [1, 1, 2, 2, 1, 2, 2, 2, 0, 0, 2, 2, 2, 2, 1, 3, 0], [31, 9, 35, 25, 95, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 4, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 1, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7734285593032837, "mapping_values": [1, 39, 39, 22, 17, 3, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))), tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.2749116866973726, 2.1855598971387415, 1.9960124128136605, 1.6830076785560582, 1.3889952505647294, 1.216380442815324, 1.1128427737172664, 1.0337499988675827, 0.9774425185005411, 0.926934386839594, 0.8995953969841447, 0.8709344987415162, 0.8489984473012552, 0.8231012443934984, 0.8161322362686523, 0.7946869887538542, 0.7867773103282563, 0.7634341577733466, 0.7635861245742831, 0.752746325969822, 0.7359182070731612, 0.7281086659466097, 0.7355768786776005, 0.7152885486342415, 0.7223422798057353, 0.7097209742780627, 0.6966796164908792, 0.6939919472779926, 0.6816150808866549, 0.6864404926336578, 0.6736803971985784, 0.6765558163739623, 0.664908242594092, 0.6574090458241121, 0.6631953526623355, 0.6555006359593744], "accuracy": [0.16814158856868744, 0.31184783577919006, 0.4053625762462616, 0.4822348356246948, 0.54220050573349, 0.579447865486145, 0.6111478209495544, 0.6361114978790283, 0.6559239029884338, 0.6686038970947266, 0.6785101294517517, 0.6863030195236206, 0.6966054439544678, 0.7043983340263367, 0.7086250185966492, 0.7141724824905396, 0.7144366502761841, 0.7255316376686096, 0.7219653725624084, 0.7228899598121643, 0.7283053994178772, 0.7360982894897461, 0.7353057861328125, 0.7364945411682129, 0.7384757399559021, 0.7392682433128357, 0.7424382567405701, 0.7434949278831482, 0.7490423917770386, 0.7497028112411499, 0.7475894689559937, 0.7485140562057495, 0.7534011602401733, 0.7664773464202881, 0.7580240368843079, 0.7607977986335754], "val_loss": [1.9013876914978027, 1.7748703956604004, 1.5101568698883057, 1.1713581085205078, 0.9446916580200195, 0.824989778654916, 0.7535616670336042, 0.7081327438354492, 0.6675762448992048, 0.6457128524780273, 0.6200753450393677, 0.6027700901031494, 0.5906096185956683, 0.5722121511186872, 0.5683424643107823, 0.5574707644326347, 0.5484874929700579, 0.5465912648609706, 0.5371200868061611, 0.5276721205030169, 0.5232709135328021, 0.5291050672531128, 0.5196328503744942, 0.5090398107256208, 0.5076461349214826, 0.5055959054401943, 0.4973643847874233, 0.494550211088998, 0.49881783553532194, 0.4904299293245588, 0.48794308730534147, 0.48293544564928326, 0.48391311509268625, 0.4803253241947719, 0.47402664593287874, 0.4707294021333967], "val_accuracy": [0.39633333683013916, 0.503000020980835, 0.5763333439826965, 0.6103333234786987, 0.6853333115577698, 0.6859999895095825, 0.7070000171661377, 0.7206666469573975, 0.7300000190734863, 0.7310000061988831, 0.7416666746139526, 0.7523333430290222, 0.7523333430290222, 0.7639999985694885, 0.762666642665863, 0.7743333578109741, 0.7699999809265137, 0.7670000195503235, 0.7803333401679993, 0.7823333144187927, 0.7816666960716248, 0.7736666798591614, 0.7816666960716248, 0.7799999713897705, 0.784333348274231, 0.7956666946411133, 0.7889999747276306, 0.7933333516120911, 0.7746666669845581, 0.7916666865348816, 0.7996666431427002, 0.793666660785675, 0.7986666560173035, 0.7893333435058594, 0.7976666688919067, 0.7973333597183228]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 3, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [31, 62, 35, 73, 95, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 1, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [10, 25, 50, 71, 34]], "fitness": -0.40628570318222046, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3037167107188203, 2.3026615617266106, 2.3004750431079937, 2.2995513988256047, 2.297652388765292, 2.2982185577530636, 2.2986276009929587, 2.297330758543598, 2.2964758125388816, 2.2951464799763333, 2.2937402168143426, 2.2940124643162303, 2.2930870013639453, 2.2926880264672715, 2.2921918546676383, 2.2916424410485825, 2.2898637573590856, 2.289046219830909, 2.288598552056906, 2.2885513737091157, 2.288275842291253, 2.285214278676239, 2.2864626000318324, 2.2855067155175695, 2.2862943901976007, 2.2841517843385777, 2.283741794100464, 2.283217535200309, 2.281217891841501, 2.282491963915207, 2.2798222428252433, 2.2820638779242275, 2.2794606900722156, 2.2771306239445415, 2.2775678046391135, 2.277910520812823, 2.2754923457152114, 2.2754918068722176, 2.2756163168262105, 2.274105563281534, 2.2740363857418933, 2.2709146704829335, 2.270716135543745, 2.2698588625094547, 2.2717296949640287, 2.270461379859772, 2.26985792234479, 2.2684989943874037, 2.2680978734400985, 2.2670678787888976, 2.265889634073308, 2.2657787822823656, 2.2642183101030784, 2.2625670556174358, 2.26366199034395, 2.263380100320532, 2.2610483858264465, 2.261498560380816, 2.2603607257721587, 2.2596168858799337, 2.257800197494249, 2.256660440137846, 2.256073130246214, 2.257321206003274, 2.2554437822874243, 2.2531797711749384, 2.2539962084380596, 2.25302246262164, 2.251046323190512, 2.251785082131203, 2.248819376987442, 2.249294129659975, 2.2482827912389705, 2.2483898484239235, 2.247361735141257, 2.2459469696534167, 2.2457970485805663, 2.2431709360153667, 2.2436038712783812, 2.2434946555723494, 2.2430597641810985, 2.239998635520174, 2.240670025293554, 2.2395400051836956, 2.238599984810542, 2.2367273858352155, 2.2390189559436697, 2.2351261457479263, 2.232602177515258, 2.2355740602541405, 2.23305757898208, 2.232333172928026, 2.2299256311541833, 2.229146708114477, 2.22995764159602, 2.2278606081053, 2.22682375914826, 2.225555299941055, 2.224218883817978, 2.223213547524082], "accuracy": [0.0878351628780365, 0.09298639744520187, 0.0936468094587326, 0.09747721254825592, 0.09747721254825592, 0.10210011899471283, 0.1006472036242485, 0.10276053100824356, 0.10394927859306335, 0.10434553027153015, 0.1146479994058609, 0.11055342853069305, 0.11319508403539658, 0.11161009222269058, 0.1138555034995079, 0.12098798155784607, 0.11728965491056442, 0.1266675442457199, 0.12257297337055206, 0.1274600476026535, 0.1278562992811203, 0.12600713968276978, 0.1332716941833496, 0.1336679458618164, 0.13512085378170013, 0.13697001338005066, 0.13538502156734467, 0.14159291982650757, 0.13657376170158386, 0.1402720957994461, 0.15176330506801605, 0.13881917297840118, 0.14898955821990967, 0.15849953889846802, 0.15598995983600616, 0.15242372453212738, 0.16061286628246307, 0.15915995836257935, 0.1612732857465744, 0.1674811840057373, 0.1608770340681076, 0.16616034507751465, 0.17157575488090515, 0.17038699984550476, 0.17263241112232208, 0.17619864642620087, 0.18174614012241364, 0.18121780455112457, 0.1826707124710083, 0.18451987206935883, 0.1942940205335617, 0.1872936189174652, 0.1946902722120285, 0.19072777032852173, 0.19402985274791718, 0.190859854221344, 0.19574692845344543, 0.19733192026615143, 0.2005019187927246, 0.20353981852531433, 0.2098798006772995, 0.21212521195411682, 0.2090873122215271, 0.2118610441684723, 0.2141064554452896, 0.21120063960552216, 0.21238937973976135, 0.21582353115081787, 0.22572976350784302, 0.22216351330280304, 0.2285034954547882, 0.22374852001667023, 0.23523972928524017, 0.2312772423028946, 0.22837141156196594, 0.22956016659736633, 0.23299431800842285, 0.2390701323747635, 0.23352265357971191, 0.23154141008853912, 0.23959846794605255, 0.24303261935710907, 0.24157971143722534, 0.24435345828533173, 0.24157971143722534, 0.2541275918483734, 0.23893804848194122, 0.24937260150909424, 0.25439175963401794, 0.2525425851345062, 0.2475234419107437, 0.26059964299201965, 0.26495838165283203, 0.26522254943847656, 0.26443007588386536, 0.26958128809928894, 0.2608638107776642, 0.27658170461654663, 0.27341169118881226, 0.2724871337413788], "val_loss": [1.9699029922485352, 1.9692243848528181, 1.9685471398489816, 1.9678645815168108, 1.9671852929251534, 1.9665069580078125, 1.965839454105922, 1.965167454310826, 1.9644949776785714, 1.9638233184814453, 1.9631518636431013, 1.9624733243669783, 1.9618101119995117, 1.9611402239118303, 1.9604748317173548, 1.959808690207345, 1.9591367585318429, 1.9584758622305733, 1.9578116961887904, 1.9571420805794852, 1.9564746447971888, 1.9558016232081823, 1.9551264217921667, 1.9544572830200195, 1.9537851469857352, 1.9531207765851701, 1.9524519784109933, 1.9517814772469657, 1.951105730874198, 1.9504366602216447, 1.9497682707650321, 1.9491033554077148, 1.9484266553606306, 1.9477440289088659, 1.9470714841570174, 1.9464007786342077, 1.9457263946533203, 1.9450509207589286, 1.9443708147321428, 1.9436844417027064, 1.9429992267063685, 1.9423115594046456, 1.9416189193725586, 1.9409222602844238, 1.9402221270969935, 1.9395251955304826, 1.9388255391802107, 1.9381163460867745, 1.9374145780290877, 1.9367093358721053, 1.9359993934631348, 1.9352879524230957, 1.93457065309797, 1.933849879673549, 1.9331316947937012, 1.9324116025652205, 1.9316799300057548, 1.9309570448739188, 1.9302137238638741, 1.929478985922677, 1.928739411490304, 1.9279937062944685, 1.9272415297372, 1.9264870371137346, 1.9257317270551408, 1.9249715123857771, 1.9242121151515417, 1.9234435217721122, 1.9226745877947127, 1.9219025203159876, 1.9211224828447615, 1.920337336403983, 1.9195483752659388, 1.9187531471252441, 1.9179553985595703, 1.9171502249581474, 1.9163383075169154, 1.9155122212001257, 1.914682252066476, 1.9138631139482771, 1.9130379131862096, 1.9122020857674735, 1.911365168435233, 1.9105235508510046, 1.9096770967755998, 1.9088153839111328, 1.9079624584742956, 1.9070864404950822, 1.9061989103044783, 1.905317987714495, 1.9044376100812639, 1.9035423823765345, 1.902632508959089, 1.9017271314348494, 1.900815827505929, 1.8998983246939523, 1.8989671979631697, 1.8980365480695451, 1.8970942497253418, 1.8961411203656877], "val_accuracy": [0.04233333468437195, 0.04899999871850014, 0.05166666582226753, 0.05666666850447655, 0.06133333221077919, 0.06499999761581421, 0.06966666877269745, 0.07466666400432587, 0.07999999821186066, 0.0860000029206276, 0.09233333170413971, 0.10000000149011612, 0.10866666585206985, 0.11299999803304672, 0.11999999731779099, 0.12733332812786102, 0.1326666623353958, 0.13866665959358215, 0.1456666737794876, 0.15166667103767395, 0.1599999964237213, 0.16699999570846558, 0.1720000058412552, 0.18199999630451202, 0.18766666948795319, 0.19633333384990692, 0.20100000500679016, 0.20900000631809235, 0.21466666460037231, 0.22033333778381348, 0.22233332693576813, 0.23000000417232513, 0.2329999953508377, 0.23866666853427887, 0.24433332681655884, 0.2486666738986969, 0.25566667318344116, 0.2630000114440918, 0.2669999897480011, 0.27300000190734863, 0.2786666750907898, 0.2840000092983246, 0.29100000858306885, 0.29499998688697815, 0.29733332991600037, 0.30266666412353516, 0.3086666762828827, 0.312333345413208, 0.3166666626930237, 0.31966665387153625, 0.3240000009536743, 0.3283333480358124, 0.33133333921432495, 0.33633333444595337, 0.34033334255218506, 0.3449999988079071, 0.34833332896232605, 0.3499999940395355, 0.35333332419395447, 0.3553333282470703, 0.3580000102519989, 0.3596666753292084, 0.36133334040641785, 0.3630000054836273, 0.36399999260902405, 0.36633333563804626, 0.36766666173934937, 0.3683333396911621, 0.3696666657924652, 0.3733333349227905, 0.3766666650772095, 0.3786666691303253, 0.3786666691303253, 0.38066667318344116, 0.3816666603088379, 0.3840000033378601, 0.38466668128967285, 0.3853333294391632, 0.3866666555404663, 0.38866665959358215, 0.39100000262260437, 0.3919999897480011, 0.39399999380111694, 0.39500001072883606, 0.3970000147819519, 0.39899998903274536, 0.3996666669845581, 0.4009999930858612, 0.4026666581630707, 0.40400001406669617, 0.4046666622161865, 0.40566667914390564, 0.4059999883174896, 0.4073333442211151, 0.4090000092983246, 0.41066667437553406, 0.41233333945274353, 0.4143333435058594, 0.41466665267944336, 0.4153333306312561]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 3, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [31, 62, 35, 73, 95, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 2, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.12942856550216675, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.157728515643139, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.30920618772506714, 0.10460969805717468, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [20.91434642246791, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [3, 2, 3, 0, 4, 2, 2, 3, 2, 1, 5, 3, 9, 3, 2, 2, 0, 5, 0, 2], [2, 1, 2, 2, 1, 0, 2, 2, 0, 0, 2, 3, 2, 2], [92, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 3, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [17, 25, 50, 71, 34]], "fitness": -0.10542856901884079, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.329427940309197, 2.3343134403165777, 2.3031149606474197, 14.689361624918625, 137589.49808017732, 2.311473921006303, 2.30484296377734, 2.3034336047323074], "accuracy": [0.10170386731624603, 0.09391097724437714, 0.09615638852119446, 0.10540219396352768, 0.09998679161071777, 0.09998679161071777, 0.09840179979801178, 0.0956280529499054], "val_loss": [1.9753769465855189, 1.973998955317906, 1.9737693922860282, 885728.8214285715, 1.9851765632629395, 1.9761385917663574, 1.974123409816197, 1.9737674849373954], "val_accuracy": [0.0820000022649765, 0.09966666996479034, 0.10233332961797714, 0.09733333438634872, 0.09966666996479034, 0.09700000286102295, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [4, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 1, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.pow(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [9, 2, 9, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 2, 1, 0, 2, 2, 0, 0, 2, 3, 2, 2], [31, 9, 35, 73, 95, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 3, 5, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [76, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [43, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.8058403528062597, 2.359943324296765, 2.306329810498114, 2.3034305496931298, 2.3030541724123266, 2.302860300790648], "accuracy": [0.18782195448875427, 0.15876370668411255, 0.09932637959718704, 0.09813763201236725, 0.09642054885625839, 0.09879804402589798], "val_loss": [2.0023413385663713, 1.978820868900844, 1.9747138704572404, 1.9737753868103027, 1.9737139429364885, 1.9737269537789481], "val_accuracy": [0.10000000149011612, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.09700000286102295, 0.09733333438634872]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 2, 0, 9, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 2, 0, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [92, 55, 35, 73, 95], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 0, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 17, 17, 10, 7, 2, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.negative(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 1, 2, 1, 2, 2, 3, 2, 1, 5, 5, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [31, 62, 35, 38, 95, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 1, 8, 8, 5, 6, 5, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 1, 2, 0, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [4, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)), tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 5, 4, 2, 2, 8, 2, 3, 2, 2, 0, 8, 6, 4, 2, 6, 6, 5, 0, 2, 4, 4, 4, 8, 9], [2, 2, 2, 0, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [92, 55, 35, 73, 55], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [716176.4651581472, 13454891.840179633, 61832174.36956809, 173661054.31356493, 365415830.2322018, 677319875.1108176], "accuracy": [0.10394927859306335, 0.09853387624025345, 0.10289261490106583, 0.10408136248588562, 0.10130762308835983, 0.09959053993225098], "val_loss": [2670753.0, 21285450.285714287, 71749945.14285715, 169969577.14285713, 331850934.85714287, 573298413.7142857], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 8, 1, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [31, 62, 35, 73, 95, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 9, 8, 8, 5, 6, 5, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 1, 2, 0, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 1, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [87, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 9, 5, 4, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(alpha), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, tf.math.subtract(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08558975160121918, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 3, 2, 1, 2, 2, 3, 4, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 2, 2, 0, 1, 2, 1, 0, 2, 3, 2, 2], [76, 61, 15, 73, 95], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 8, 9, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, grad))), tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.add(beta, grad)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 3, 2, 1, 8, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 2, 0, 0, 1, 0, 1, 0, 0, 3, 2, 2], [31, 62, 35, 73, 95, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 9, 8, 8, 5, 6, 5, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 1, 2, 0, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07924976944923401, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 2, 1, 0, 1, 2, 1, 0, 0, 3, 2, 2], [76, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 2, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 41, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 6, 6, 1, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), alpha), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), grad))))))), tf.math.sqrt(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07924976944923401, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 2, 0, 2, 2, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 3, 3, 6, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 9, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [22, 17, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [115.83388720401416, 1588.2977605942392, 6797.863380699173, 18608.58247187046, 38661.05583135897, 71098.17161599359], "accuracy": [0.10421344637870789, 0.09893012791872025, 0.10315678268671036, 0.10421344637870789, 0.10170386731624603, 0.09959053993225098], "val_loss": [352.9723161969866, 2396.46240234375, 7760.362723214285, 18067.73270089286, 34935.53236607143, 59983.39732142857], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 2, 0, 2, 2, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 8, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [74, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 0, 1, 1, 2, 0, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 2, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 1, 0, 2, 1, 3, 0, 0], [84, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 5, 5, 2, 3, 0, 10, 10, 7, 3, 2, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))), tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.304017796602704, 2.303680739272398, 2.302205917400974, 2.3020221384965733, 2.3008361671421556, 2.302121519144925], "accuracy": [0.08730682730674744, 0.09074098616838455, 0.08942015469074249, 0.09166556596755981, 0.08994849026203156, 0.09338264167308807], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]