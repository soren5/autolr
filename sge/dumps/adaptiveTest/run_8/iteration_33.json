[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.8111428618431091, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.971633566794158, 1.4820210639086728, 1.12507308456073, 0.8773017905218538, 0.7986141210612588, 0.7376540676084067, 0.755428011367633, 0.7156287269695576, 0.6634575692953262, 0.6267510062400234, 0.640438633406907, 0.6117449280309041, 0.6167688982802579, 0.579032473851661, 0.5489708087652461, 0.5739416819065317, 0.5483066146368395, 0.542314625537438, 0.5105018985427334, 0.5147376198967639, 0.511070039459365, 0.4962475665367322, 0.4864090947332698, 0.4499688079178908, 0.485887631382279, 0.46832429321922914, 0.45717286181849826], "accuracy": [0.34922730922698975, 0.5143309831619263, 0.5894861817359924, 0.666358470916748, 0.7003037929534912, 0.7265883088111877, 0.7153612375259399, 0.7244749665260315, 0.7465327978134155, 0.7648923397064209, 0.7524765729904175, 0.7658169269561768, 0.7622507214546204, 0.7816668748855591, 0.7973847389221191, 0.7796856164932251, 0.8009510040283203, 0.7960638999938965, 0.8074230551719666, 0.8042530417442322, 0.8100647330284119, 0.8148196935653687, 0.8169330358505249, 0.8327829837799072, 0.8171972036361694, 0.8244617581367493, 0.8274996876716614], "val_loss": [1.1126148700714111, 0.9582665307181222, 0.6722788981028965, 0.5952781098229545, 0.5698647839682442, 0.5493980475834438, 0.5762748377663749, 0.5117434774126325, 0.4973839691707066, 0.5259370292936053, 0.5331686735153198, 0.5142876761300224, 0.4870847633906773, 0.46704040254865375, 0.4490131820951189, 0.4608782614980425, 0.4620110137122018, 0.4362837161336626, 0.42709261178970337, 0.4301202893257141, 0.4338493858064924, 0.3928147554397583, 0.3893784625189645, 0.4022639989852905, 0.41387122869491577, 0.38497819219316753, 0.4067321760313852], "val_accuracy": [0.574999988079071, 0.6056666374206543, 0.7233333587646484, 0.7356666922569275, 0.7509999871253967, 0.7440000176429749, 0.7226666808128357, 0.7693333625793457, 0.778333306312561, 0.7570000290870667, 0.7593333125114441, 0.765666663646698, 0.8023333549499512, 0.79666668176651, 0.8063333630561829, 0.7913333177566528, 0.7793333530426025, 0.8063333630561829, 0.8109999895095825, 0.8213333487510681, 0.8153333067893982, 0.8376666903495789, 0.8363333344459534, 0.8159999847412109, 0.8149999976158142, 0.8343333601951599, 0.8209999799728394]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 3, 6, 0, 1, 1, 9, 8, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 0, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.8111428618431091, "mapping_values": [1, 3, 3, 1, 2, 0, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.971633566794158, 1.4820210639086728, 1.12507308456073, 0.8773017905218538, 0.7986141210612588, 0.7376540676084067, 0.755428011367633, 0.7156287269695576, 0.6634575692953262, 0.6267510062400234, 0.640438633406907, 0.6117449280309041, 0.6167688982802579, 0.579032473851661, 0.5489708087652461, 0.5739416819065317, 0.5483066146368395, 0.542314625537438, 0.5105018985427334, 0.5147376198967639, 0.511070039459365, 0.4962475665367322, 0.4864090947332698, 0.4499688079178908, 0.485887631382279, 0.46832429321922914, 0.45717286181849826], "accuracy": [0.34922730922698975, 0.5143309831619263, 0.5894861817359924, 0.666358470916748, 0.7003037929534912, 0.7265883088111877, 0.7153612375259399, 0.7244749665260315, 0.7465327978134155, 0.7648923397064209, 0.7524765729904175, 0.7658169269561768, 0.7622507214546204, 0.7816668748855591, 0.7973847389221191, 0.7796856164932251, 0.8009510040283203, 0.7960638999938965, 0.8074230551719666, 0.8042530417442322, 0.8100647330284119, 0.8148196935653687, 0.8169330358505249, 0.8327829837799072, 0.8171972036361694, 0.8244617581367493, 0.8274996876716614], "val_loss": [1.1126148700714111, 0.9582665307181222, 0.6722788981028965, 0.5952781098229545, 0.5698647839682442, 0.5493980475834438, 0.5762748377663749, 0.5117434774126325, 0.4973839691707066, 0.5259370292936053, 0.5331686735153198, 0.5142876761300224, 0.4870847633906773, 0.46704040254865375, 0.4490131820951189, 0.4608782614980425, 0.4620110137122018, 0.4362837161336626, 0.42709261178970337, 0.4301202893257141, 0.4338493858064924, 0.3928147554397583, 0.3893784625189645, 0.4022639989852905, 0.41387122869491577, 0.38497819219316753, 0.4067321760313852], "val_accuracy": [0.574999988079071, 0.6056666374206543, 0.7233333587646484, 0.7356666922569275, 0.7509999871253967, 0.7440000176429749, 0.7226666808128357, 0.7693333625793457, 0.778333306312561, 0.7570000290870667, 0.7593333125114441, 0.765666663646698, 0.8023333549499512, 0.79666668176651, 0.8063333630561829, 0.7913333177566528, 0.7793333530426025, 0.8063333630561829, 0.8109999895095825, 0.8213333487510681, 0.8153333067893982, 0.8376666903495789, 0.8363333344459534, 0.8159999847412109, 0.8149999976158142, 0.8343333601951599, 0.8209999799728394]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 4], [4], [85], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 3, 3, 6, 3, 9, 1, 6, 9, 8, 5, 4, 7, 7, 0, 3, 5], [1, 3, 1, 0, 0, 2], [63, 38, 24, 18]], "fitness": -0.7720000147819519, "mapping_values": [1, 3, 3, 1, 2, 1, 22, 22, 13, 9, 3, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(grad, tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(grad)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(alpha, sigma), alpha))", "other_info": {"loss": [2.272718220905873, 2.1917337288300374, 2.045140213608002, 1.7882390305224727, 1.5099063363955116, 1.3057241896124343, 1.1905416863044302, 1.0928373128478837, 1.0338196913012896, 1.0207579045121884, 0.9536032465234519, 0.9238658923010674, 0.8868300087888715, 0.885310611712572, 0.8474169604184054, 0.821598584121953, 0.8164890090377812, 0.8016356658296279, 0.7847205410386593, 0.7705962417415734, 0.7612504131837119, 0.7557755524157029, 0.7630867585372522, 0.7602438816241994, 0.7393421241321017, 0.7256722003713559, 0.7246187989501717, 0.7391892219767547, 0.7137806838167468, 0.7073704899420213, 0.6955298492779679, 0.6912627082695468, 0.6922282746140164, 0.6722169054765365, 0.6773695943141737, 0.6754723015620079, 0.6715001963022882, 0.6660901004092536, 0.669122177430935, 0.6525784075189307, 0.6561316939755013], "accuracy": [0.17342491447925568, 0.3151499032974243, 0.39664509892463684, 0.4600449204444885, 0.5020473003387451, 0.5527671575546265, 0.590278685092926, 0.6147140264511108, 0.6276581883430481, 0.6353189945220947, 0.6576409935951233, 0.6701889038085938, 0.6824725866317749, 0.6873596906661987, 0.6946242451667786, 0.7042662501335144, 0.7036058902740479, 0.7046625018119812, 0.7186633348464966, 0.7186633348464966, 0.7239466309547424, 0.7211728692054749, 0.7197200059890747, 0.7236824631690979, 0.726192057132721, 0.7327961921691895, 0.7333245277404785, 0.7235503792762756, 0.7390040755271912, 0.7382115721702576, 0.7409853339195251, 0.746268630027771, 0.7524765729904175, 0.750231146812439, 0.7437590956687927, 0.7516840696334839, 0.7511557340621948, 0.7539294958114624, 0.7486461400985718, 0.7609298825263977, 0.7539294958114624], "val_loss": [1.9097905158996582, 1.8087713377816337, 1.6096843310764857, 1.3120081084115165, 1.0522971153259277, 0.9058962549482074, 0.8082671846662249, 0.754194974899292, 0.6992730583463397, 0.7167632068906512, 0.6595626728875297, 0.6374980722154889, 0.6132364613669259, 0.6250579697745187, 0.5949310064315796, 0.5737517901829311, 0.570426447050912, 0.563467161996024, 0.5572459357125419, 0.548281056540353, 0.5418923241751534, 0.5561653545924595, 0.5308959313801357, 0.5434363058635167, 0.5231585672923497, 0.5267496109008789, 0.5169672114508492, 0.5199884857450213, 0.5144311189651489, 0.5076547861099243, 0.5035699095044818, 0.49704767976488384, 0.5024340152740479, 0.4907417297363281, 0.49478178364889963, 0.4864039250782558, 0.48728372369493755, 0.4820080484662737, 0.48776849678584505, 0.4792792286191668, 0.47448151452200754], "val_accuracy": [0.41200000047683716, 0.4906666576862335, 0.5479999780654907, 0.5836666822433472, 0.6439999938011169, 0.6673333048820496, 0.6643333435058594, 0.6743333339691162, 0.7103333473205566, 0.6850000023841858, 0.7283333539962769, 0.7246666550636292, 0.7519999742507935, 0.7229999899864197, 0.7360000014305115, 0.7570000290870667, 0.7609999775886536, 0.7566666603088379, 0.7636666893959045, 0.7716666460037231, 0.7646666765213013, 0.7570000290870667, 0.7786666750907898, 0.7699999809265137, 0.7743333578109741, 0.7733333110809326, 0.7793333530426025, 0.7833333611488342, 0.7756666541099548, 0.7853333353996277, 0.7910000085830688, 0.784333348274231, 0.7736666798591614, 0.7916666865348816, 0.781000018119812, 0.8013333082199097, 0.7913333177566528, 0.7956666946411133, 0.7946666479110718, 0.7900000214576721, 0.800000011920929]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 1, 2, 3], [74, 57, 46], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [2, 5, 0, 1, 3, 2, 2, 5, 2, 1, 8, 3, 5, 1, 1, 8, 8, 0], [2, 3, 3, 2, 0, 3, 0, 2, 3, 3, 1], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0, 1, 1], [1, 0, 1], [3, 3], [0, 0], [85], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 2, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [0, 3, 3, 1], [29, 38]], "fitness": -0.4528571367263794, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 3, 2, 0, 1, 1, 0, 1, 1, 7, 3, 4, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(sigma, sigma), alpha))", "other_info": {"loss": [2.2871134690541823, 2.250686163663581, 2.20947161676263, 2.149496988424488, 2.0730492485481213, 2.024417786912486, 2.092972739214249, 2.1766600742032733], "accuracy": [0.13234710693359375, 0.22137102484703064, 0.3003566265106201, 0.33905693888664246, 0.34381189942359924, 0.29982829093933105, 0.22797517478466034, 0.20076608657836914], "val_loss": [1.9394048282078333, 1.9038637706211634, 1.855834688459124, 1.7874816485813685, 1.7219485555376326, 1.725898197719029, 1.7912541798182897, 1.8582233020237513], "val_accuracy": [0.2996666729450226, 0.40799999237060547, 0.4566666781902313, 0.4466666579246521, 0.3803333342075348, 0.2253333330154419, 0.18266665935516357, 0.15700000524520874]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 3, 2, 3], [63, 57], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 4, 2, 8, 1, 1, 8, 9, 0, 1], [3, 3, 3, 2, 2, 3, 3, 2, 3, 0, 1, 0, 3, 1], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0, 0], [15], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 5, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [3, 2, 1, 2], [29, 38]], "fitness": -0.2962857186794281, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 6, 3, 3, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.multiply(tf.math.square(beta), alpha))", "other_info": {"loss": [2.3023818304132178, 2.3001629322779067, 2.30114746981797, 2.302671198138881, 2.301799771115292, 2.302573627846793, 2.3013968797423474, 2.301854484541982, 2.300585419006509, 2.3006168871413384, 2.3003391047132453, 2.299805706266273, 2.3003283873084293, 2.298873917553576, 2.2982859842655383, 2.297682901871691, 2.2973925742994696, 2.2949495552679204, 2.2974515703486227, 2.294595597773149, 2.292990998978691, 2.293486778431596, 2.291870038491419, 2.2923339903079096, 2.290821481768198, 2.288722603690465, 2.290125334850156, 2.287426494856111, 2.286025202647491, 2.285064710082474, 2.2854255946588524, 2.2846144972665043, 2.285052295122259, 2.282068252815405, 2.2799982653632846, 2.282208678272375, 2.2805889791832024, 2.2792040998468686, 2.278309892559442, 2.279164511876225, 2.2790191882731436, 2.2776316278535993, 2.2759970386723296, 2.2733581562430207, 2.2727195052989737, 2.271170348633613, 2.2690542126533266, 2.2687339009295178, 2.2658788099768863, 2.265473863877294, 2.2661238554965992, 2.2636798085348873, 2.261979948118646, 2.262633126252174, 2.2602666454418476, 2.2567618284022664, 2.254740110273138, 2.2532825207965343, 2.2538081858341075, 2.250310519493928, 2.2471350420892766, 2.247213533919454, 2.2434593647415326], "accuracy": [0.09192973375320435, 0.09430722147226334, 0.09879804402589798, 0.08796724677085876, 0.09576013684272766, 0.08149518072605133, 0.08572183549404144, 0.08928807079792023, 0.09232597798109055, 0.09734513610601425, 0.09509972482919693, 0.09708096832036972, 0.0936468094587326, 0.09589222073554993, 0.09879804402589798, 0.10777968913316727, 0.10579843819141388, 0.10857218503952026, 0.10500594228506088, 0.1146479994058609, 0.10619468986988068, 0.11213842034339905, 0.12032756209373474, 0.11662924289703369, 0.12019548565149307, 0.11927089840173721, 0.12534672021865845, 0.12640337646007538, 0.13115836679935455, 0.13578127324581146, 0.13908334076404572, 0.1332716941833496, 0.13895125687122345, 0.146479994058609, 0.14093250036239624, 0.14595165848731995, 0.14370624721050262, 0.15176330506801605, 0.14661207795143127, 0.1472724825143814, 0.15242372453212738, 0.15717871487140656, 0.1574428677558899, 0.15493330359458923, 0.16272619366645813, 0.1644432693719864, 0.16853784024715424, 0.1682736724615097, 0.17540615797042847, 0.17302866280078888, 0.17302866280078888, 0.17791573703289032, 0.17870822548866272, 0.1736890822649002, 0.1846519559621811, 0.18491612374782562, 0.1818782240152359, 0.18584071099758148, 0.18042530119419098, 0.18412363529205322, 0.18372738361358643, 0.18055738508701324, 0.18623696267604828], "val_loss": [1.9705884797232491, 1.9705798966544015, 1.970555373600551, 1.9705039433070592, 1.9704185894557409, 1.9703068733215332, 1.9701495170593262, 1.9699462481907435, 1.9697048323495048, 1.9693882805960519, 1.9690078326633997, 1.9685862404959542, 1.9681057929992676, 1.9675651277814592, 1.9669599533081055, 1.966297217777797, 1.9656433377947127, 1.964890480041504, 1.9641426631382533, 1.963402339390346, 1.9626568385532923, 1.9618471690586634, 1.9610607283455985, 1.9602724484034948, 1.9594272886003767, 1.9586629186357771, 1.9578360148838587, 1.9570157868521554, 1.9561829566955566, 1.9553711073739188, 1.9545254707336426, 1.9536552429199219, 1.952857221875872, 1.9520694187709264, 1.9511786188398088, 1.9503439494541712, 1.9495258331298828, 1.9485971587044852, 1.9476542472839355, 1.9467148780822754, 1.9457286425999232, 1.9447615487234933, 1.9436616897583008, 1.9424610819135393, 1.9412753922598702, 1.9400291442871094, 1.9385884829929896, 1.9371844700404577, 1.935756002153669, 1.9341872760227747, 1.9324861935206823, 1.9307927404131209, 1.9288934980119978, 1.9269500459943498, 1.9247766903468542, 1.9225590569632394, 1.9202806609017509, 1.9179345539637975, 1.9153770038059779, 1.9126413890293665, 1.9096849986485072, 1.9065062659127372, 1.9033873421805245], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.039000000804662704, 0.03933333232998848, 0.03966666758060455, 0.041333332657814026, 0.04333333298563957, 0.04600000008940697, 0.04800000041723251, 0.050333332270383835, 0.05233333259820938, 0.05666666850447655, 0.05833333358168602, 0.05999999865889549, 0.0689999982714653, 0.07366666942834854, 0.0806666687130928, 0.08966666460037231, 0.09733333438634872, 0.10066666454076767, 0.10899999737739563, 0.11533333361148834, 0.12133333086967468, 0.1303333342075348, 0.13600000739097595, 0.14433333277702332, 0.15299999713897705, 0.16333332657814026, 0.17033334076404572, 0.1756666600704193, 0.18133333325386047, 0.18666666746139526, 0.1926666647195816, 0.19699999690055847, 0.2070000022649765, 0.21133333444595337, 0.2160000056028366, 0.21933333575725555, 0.2240000069141388, 0.23000000417232513, 0.23399999737739563, 0.23600000143051147, 0.2423333376646042, 0.2486666738986969, 0.25, 0.2513333261013031, 0.2526666522026062, 0.2549999952316284, 0.257666677236557, 0.2639999985694885, 0.27266666293144226, 0.2773333191871643, 0.27799999713897705, 0.28066667914390564, 0.2809999883174896, 0.2836666703224182, 0.2893333435058594, 0.28600001335144043, 0.28466665744781494, 0.2826666533946991, 0.2759999930858612, 0.2680000066757202]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [1, 0, 6, 6, 1, 4, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 3, 3, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 1, 2, 9, 4, 2], [3, 3, 3, 1, 2], [59, 38]], "fitness": -0.2840000092983246, "mapping_values": [1, 1, 1, 0, 1, 1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.subtract(tf.math.add(sigma, sigma), sigma), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.0453958935851606, 2.2816803729954556, 2.3031076648688478, 2.2862648813716016, 2.6559373321251045, 2.2168348256575827, 2.3116856892315814, 2.3048811340848485, 2.3032727819691403], "accuracy": [0.19653943181037903, 0.13419628143310547, 0.10077928751707077, 0.15361246466636658, 0.19204860925674438, 0.16602826118469238, 0.1442345827817917, 0.09866596013307571, 0.09602430462837219], "val_loss": [1.9609110014779227, 1.9750163214547294, 1.9717662675040108, 1.7156753540039062, 1.972498961857387, 1.8108935356140137, 1.9772488049098425, 1.9737745693751745, 1.9736547470092773], "val_accuracy": [0.17733334004878998, 0.09966666996479034, 0.10400000214576721, 0.4153333306312561, 0.10499999672174454, 0.3310000002384186, 0.10233332961797714, 0.10000000149011612, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [2, 3, 2, 3], [74, 57, 46], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [2, 3, 6, 1, 1, 5, 1, 1, 2, 1, 4, 2, 8, 1, 1, 8, 9, 0, 1, 1, 1, 4, 9, 7, 2, 0, 0, 1, 6, 9, 1, 7, 2, 5, 5, 3, 8, 4, 3, 4, 5, 3], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0, 5, 2, 0, 2, 5, 4, 5, 2, 5, 3, 5, 2, 3, 4, 5, 4, 4], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0, 0], [93], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [29, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 69, 69, 42, 27, 6, 1, 1, 0, 1, 1, 8, 5, 3, 1], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))), tf.math.square(grad))))))))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))), beta)), tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), grad)), tf.math.add(beta, grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302288083698866, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 2, 4, 9], [0, 3, 2, 3], [74, 57, 46], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 2, 1, 1, 1, 5, 1, 1, 2, 1, 4, 2, 8, 1, 1, 8, 9, 0, 1], [2, 3, 3, 3, 0, 3, 0, 2, 3, 0, 1], [58, 84, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [85], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 2, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [3, 0, 1, 1], [63, 38, 24, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 6, 6, 1, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.subtract(beta, grad), tf.math.add(beta, grad)), tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.sqrt(sigma), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [2, 3, 2, 3], [44, 54], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [1, 6, 1, 1, 1, 5, 1, 1, 2, 4, 4, 9, 8, 1, 1, 8, 9, 0], [5, 3, 4, 3, 0, 0, 1, 3, 3, 0, 5], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 4], [4], [85], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 3, 3, 6, 3, 1, 1, 6, 9, 8, 5, 4, 6, 7, 0, 3, 5], [3, 3, 0, 1, 1, 0, 3, 0, 1, 1, 0, 3, 0, 0, 1, 1, 2, 3, 3, 0], [75, 19, 58, 18, 77]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 12, 12, 6, 6, 2, 1, 1, 0, 1, 0, 8, 4, 4, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), grad))), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, sigma), tf.math.divide_no_nan(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 6, 43, 84, 1, 78], [1, 0, 0, 1, 0], [0, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [9, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302288083698866, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [2, 6, 4, 9], [0, 3, 2, 3], [44, 57, 63, 98, 28], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [9, 5, 6, 1, 3, 2, 2, 5, 2, 1, 0, 3, 8, 1, 1, 8, 9, 0], [4, 3, 3, 1, 0, 3, 1, 3, 3, 0, 0], [9, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [47], [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [1, 3, 2, 6, 3, 5, 5, 7, 4, 9, 8, 3], [0, 3, 3, 1, 1, 3, 2], [12, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3021166465380376, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [2, 6, 4, 9], [2, 2, 2, 3], [74, 57, 46], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [5, 9, 6, 6, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 2, 2, 3, 3, 2, 3, 0, 1, 0, 3, 1], [94, 82, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [1, 0], [41], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [29, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 6, 5, 1, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [13.214308787204681, 115.27369283833099, 411.2762421101721, 1020.4262378648791, 2044.4695600077082, 3654.3033232018147], "accuracy": [0.10447761416435242, 0.1002509593963623, 0.09721305221319199, 0.09708096832036972, 0.1014397069811821, 0.09906221181154251], "val_loss": [32.07689993722098, 156.29999215262276, 440.84195382254467, 966.0471888950893, 1811.0882393973213, 3051.4791434151784], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [5, 9, 6, 6, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0, 1, 1], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 3, 3, 6, 3, 1, 1, 6, 9, 8, 5, 4, 6, 7, 0, 4, 5, 0, 8, 7, 9], [3, 3, 3, 1, 1, 3, 0, 3, 3, 1, 3, 2], [45, 38, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 32, 21, 11, 3], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, tf.math.multiply(sigma, tf.math.subtract(sigma, tf.math.subtract(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), alpha), tf.math.sqrt(tf.math.square(tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.negative(tf.math.pow(sigma, tf.math.square(tf.math.negative(tf.math.sqrt(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(sigma, sigma))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))))))), alpha), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 0, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 3, 1, 2, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [2, 1], [], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 3, 3, 1, 9], [2, 3, 1, 1], [12, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 14, 14, 8, 6, 2, 5, 4, 2, 2, 0, 8, 5, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), beta), sigma), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [2, 3, 2, 3], [74, 57, 46], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 2, 6, 6, 1, 1, 9, 4, 2, 1, 8, 9, 9, 1, 2, 4, 9, 0], [3, 3, 3, 3, 2, 3, 3, 2, 3, 0, 1, 0, 3, 1], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 1, 9], [2, 0, 1, 1], [29, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 20, 20, 13, 7, 3, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.subtract(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), grad)), beta)), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.subtract(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), alpha), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08691058307886124, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 1, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [3, 28, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 8, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 19, 19, 9, 10, 2, 1, 1, 0, 1, 0, 7, 4, 3, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.math.subtract(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(alpha, grad))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.sqrt(sigma), sigma), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [5, 9, 6, 6, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 2, 2, 3, 3, 2, 3, 0, 1, 0, 3, 1], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [85], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 6, 9, 0, 9], [2, 3, 3, 1], [29, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.negative(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [2, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 4, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 1, 3, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4, 0], [40], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 2, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [3, 0, 1, 3], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.sqrt(sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.square(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [0, 3, 2, 3], [74, 57, 46], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [2, 2, 9, 0, 2, 5, 1, 1, 2, 1, 4, 2, 8, 1, 1, 8, 9, 0, 1], [3, 3, 3, 2, 2, 3, 3, 2, 3, 0, 1, 0, 3, 1], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [85], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 1, 9], [3, 0, 1, 1], [29, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 15, 15, 9, 6, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), beta)))))))), tf.math.add(beta, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [1204138.3045141487, 30381036.582749967, 118789676.61022322, 153040968.50825518, 185560654.92431647, 150215180833541.5], "accuracy": [0.10527011007070541, 0.10210011899471283, 0.09681680053472519, 0.09945846349000931, 0.09959053993225098, 0.09945846349000931], "val_loss": [8224314.285714285, 40868972.571428575, 59490242.28571428, 102904134.85714285, 130324868.57142857, 1.6159081131407139e+32], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09700000286102295, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 8, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 1, 1, 2, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [87, 38]], "fitness": -0.05657142773270607, "mapping_values": [1, 1, 1, 0, 1, 1, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, sigma), sigma))", "other_info": {"loss": [2.302346294330269, 2.3000432642270483, 2.300961953427546, 2.302439307713033, 2.3015546752729152, 2.3023552606134463, 2.3012357870065903, 2.301805631312334, 2.300692394881626, 2.3009465267598084, 2.300954169475045, 2.3007710556926635, 2.301691120358317, 2.300728864138231, 2.3007284318293877, 2.3007088561871143, 2.301003129679718, 2.299123630736561, 2.302388984104268, 2.3001240089569173, 2.299511935150052, 2.300550947603753, 2.299849138693204, 2.3012475584791225, 2.3006190317433823, 2.2991949794566735, 2.301883329474112, 2.2994248943558113, 2.299274785690902, 2.2993826068482144, 2.3005359933644303, 2.3003855254498644, 2.3009084814087024, 2.298611564343994, 2.2984275643725702, 2.300403294924181, 2.2998102816923214, 2.299320282953101, 2.2992642764102955, 2.2999339199116546, 2.300770600521333, 2.3008493466730586, 2.3004020178369986, 2.2993584887824903, 2.2994184955362127, 2.299049617591992, 2.2981252578649194, 2.2979281221981047, 2.2973762606554153, 2.297283121403009, 2.2991082059267947, 2.2984331078013533, 2.2987170032364674, 2.2993598228684347, 2.298265849311102, 2.297875437832874, 2.297669804784301, 2.2992536596193163, 2.2988451265970697, 2.299139689208809, 2.2983188985943745, 2.2991098878941343, 2.297710815708572, 2.299318758535379, 2.3000737193584633, 2.297598876721351, 2.2986888115857305, 2.2971091854290453, 2.2982489078618973, 2.2988425291855226, 2.2968922001165155, 2.2971799807258177, 2.2989980800985395, 2.2984032879699536, 2.2974537384744647, 2.2980001218377826, 2.297836893254488, 2.2964187014797313, 2.2973989383844637, 2.2970401436472296, 2.296002524388134, 2.2976305812908246, 2.296250989581647, 2.297740185281242, 2.2967819794687725, 2.297906867359702, 2.2977878767438553, 2.2976788657924927, 2.296762247819942, 2.297215112054573, 2.2969488898257002, 2.296948550604338, 2.295530578038633, 2.2961594388312068, 2.2974945837874157, 2.295926335906277, 2.2955069798897947, 2.2954872370301582, 2.296468662437809, 2.295082135931722], "accuracy": [0.09206181764602661, 0.0944393053650856, 0.09893012791872025, 0.08902391046285629, 0.09655263274908066, 0.08215559273958206, 0.08611807972192764, 0.08994849026203156, 0.09232597798109055, 0.09655263274908066, 0.09285431355237961, 0.09285431355237961, 0.09206181764602661, 0.09087307006120682, 0.0886276587843895, 0.09800554811954498, 0.09470347315073013, 0.09866596013307571, 0.09100515395402908, 0.09747721254825592, 0.09351472556591034, 0.09628847241401672, 0.09708096832036972, 0.09325055778026581, 0.09377889335155487, 0.09126931428909302, 0.09192973375320435, 0.09589222073554993, 0.09642054885625839, 0.09681680053472519, 0.09866596013307571, 0.0944393053650856, 0.09866596013307571, 0.10342095047235489, 0.09496764093637466, 0.09774138033390045, 0.09694888442754745, 0.09840179979801178, 0.09576013684272766, 0.1002509593963623, 0.09893012791872025, 0.09774138033390045, 0.09906221181154251, 0.09813763201236725, 0.09787346422672272, 0.10553427785634995, 0.09972262382507324, 0.09813763201236725, 0.10447761416435242, 0.1018359512090683, 0.10038304328918457, 0.09985470771789551, 0.10328886657953262, 0.09694888442754745, 0.11161009222269058, 0.10513802617788315, 0.10170386731624603, 0.09866596013307571, 0.09959053993225098, 0.09774138033390045, 0.09694888442754745, 0.09813763201236725, 0.09576013684272766, 0.09760929644107819, 0.09813763201236725, 0.10579843819141388, 0.10289261490106583, 0.10117553919553757, 0.1022322028875351, 0.1006472036242485, 0.10342095047235489, 0.1018359512090683, 0.10077928751707077, 0.10117553919553757, 0.1018359512090683, 0.09840179979801178, 0.10117553919553757, 0.10711926966905594, 0.10249637067317963, 0.10527011007070541, 0.1088363528251648, 0.09734513610601425, 0.10632677376270294, 0.10447761416435242, 0.10857218503952026, 0.1018359512090683, 0.107647605240345, 0.10077928751707077, 0.10540219396352768, 0.10685510188341141, 0.10606260597705841, 0.10196803510189056, 0.10672302544116974, 0.10460969805717468, 0.10196803510189056, 0.10474177449941635, 0.10870426893234253, 0.1088363528251648, 0.1080438494682312, 0.10236428678035736], "val_loss": [1.9705040114266532, 1.970424039023263, 1.9703446115766252, 1.9702652522495814, 1.970183985573905, 1.9701173646109444, 1.9700418199811662, 1.9699669565473283, 1.9698963846479143, 1.9698192051478796, 1.9697396414620536, 1.9696625982012068, 1.9695817402430944, 1.969501563480922, 1.9694188662937708, 1.9693352154323034, 1.9692596708025252, 1.9691863059997559, 1.9691132817949568, 1.9690419605800085, 1.9689670971461706, 1.968900544302804, 1.9688312666756767, 1.9687625340053014, 1.9686839921133858, 1.9686152594430106, 1.9685444831848145, 1.9684758186340332, 1.96840272630964, 1.9683263642447335, 1.9682585171290807, 1.968195847102574, 1.9681388310023717, 1.9680870601109095, 1.9680222102573939, 1.967963491167341, 1.967900616782052, 1.9678375380379813, 1.9677814756120955, 1.9677271842956543, 1.9676707812717982, 1.9676105635506767, 1.96754789352417, 1.967480046408517, 1.9674197605678014, 1.9673563412257604, 1.967296736580985, 1.96724271774292, 1.9671789578029089, 1.9671258926391602, 1.9670724187578474, 1.9670195579528809, 1.9669619968959264, 1.9669079099382674, 1.9668613842555456, 1.9668090684073312, 1.9667517798287528, 1.9666969435555595, 1.9666486467633928, 1.9665981020246233, 1.9665429932730538, 1.9664945602416992, 1.9664462634495325, 1.9663994652884347, 1.9663568224225725, 1.966311250414167, 1.9662601607186454, 1.9662133625575475, 1.966167654309954, 1.9661145210266113, 1.966069153376988, 1.9660211290631975, 1.965970175606864, 1.965916633605957, 1.9658615248543876, 1.9658143179757255, 1.965761457170759, 1.9657156126839774, 1.9656598908560616, 1.9656089373997279, 1.965555054800851, 1.9655049868992396, 1.9654575756617956, 1.965409278869629, 1.9653660910470145, 1.9653210639953613, 1.9652718816484724, 1.965221336909703, 1.9651712008884974, 1.965122904096331, 1.9650764465332031, 1.9650308064052038, 1.964979784829276, 1.964930534362793, 1.9648893901279993, 1.9648402077811105, 1.9647931371416365, 1.9647482463291712, 1.964700630732945, 1.964656148638044], "val_accuracy": [0.039000000804662704, 0.03933333232998848, 0.03966666758060455, 0.04100000113248825, 0.0416666679084301, 0.0430000014603138, 0.0430000014603138, 0.043666668236255646, 0.04333333298563957, 0.04500000178813934, 0.04533333331346512, 0.045666664838790894, 0.04600000008940697, 0.045666664838790894, 0.045666664838790894, 0.04699999839067459, 0.047333333641290665, 0.04800000041723251, 0.04800000041723251, 0.04899999871850014, 0.049666665494441986, 0.05000000074505806, 0.05166666582226753, 0.05233333259820938, 0.052666667848825455, 0.05299999937415123, 0.05299999937415123, 0.0533333346247673, 0.05366666615009308, 0.05400000140070915, 0.054666668176651, 0.054666668176651, 0.054666668176651, 0.05533333495259285, 0.055666666477918625, 0.056333333253860474, 0.05666666850447655, 0.05700000002980232, 0.05766666680574417, 0.05900000035762787, 0.059333331882953644, 0.059333331882953644, 0.05900000035762787, 0.05966666713356972, 0.060333333909511566, 0.060333333909511566, 0.060333333909511566, 0.061000000685453415, 0.06133333221077919, 0.06199999898672104, 0.06233333423733711, 0.06233333423733711, 0.06233333423733711, 0.06233333423733711, 0.06300000101327896, 0.06300000101327896, 0.06266666948795319, 0.06266666948795319, 0.06300000101327896, 0.06333333253860474, 0.06300000101327896, 0.06366666406393051, 0.06400000303983688, 0.06433333456516266, 0.06466666609048843, 0.06466666609048843, 0.06566666811704636, 0.06599999964237213, 0.06599999964237213, 0.0663333311676979, 0.06599999964237213, 0.0663333311676979, 0.06800000369548798, 0.06800000369548798, 0.06800000369548798, 0.0689999982714653, 0.06966666877269745, 0.07000000029802322, 0.07066666334867477, 0.07100000232458115, 0.07100000232458115, 0.0716666653752327, 0.07133333384990692, 0.0716666653752327, 0.07199999690055847, 0.0729999989271164, 0.07333333045244217, 0.07366666942834854, 0.07366666942834854, 0.07466666400432587, 0.07500000298023224, 0.07500000298023224, 0.07566666603088379, 0.07666666805744171, 0.07699999958276749, 0.07766667008399963, 0.07999999821186066, 0.0820000022649765, 0.0820000022649765, 0.0820000022649765]}}]