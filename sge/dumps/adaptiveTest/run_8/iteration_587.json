[{"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8337143063545227, "mapping_values": [1, 14, 14, 7, 7, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0949979649086385, 1.5943891110279778, 1.0790630861626735, 0.8821265867294621, 0.8309267943309456, 0.7524771226269615, 0.7425789852986924, 0.7031484844583514, 0.6830023439993963, 0.6487122576203029, 0.6124022027772604, 0.6361186630800494, 0.5990835066169812, 0.5798873099133228, 0.5786837158800195, 0.5638717017500015, 0.5416125992049536, 0.5427221647067518, 0.5284168097037901, 0.5187377493458023, 0.5040485277829028, 0.4880938223363733, 0.5012173325929502, 0.4787416511743359, 0.4964134443539985, 0.470530830665177, 0.4612688927555349, 0.43419937560933375, 0.45572841020229393, 0.43338034580396606, 0.44853736510004083, 0.43679824383298815, 0.4220537038220076, 0.4383943743079708, 0.4132558582654451, 0.3997520644273331, 0.3894687972253324, 0.4085797567086339, 0.4054070782896046, 0.38862080572303637, 0.3923839486042081, 0.3575045616044785, 0.37477832450417636, 0.3731067010267079, 0.35909376929244347, 0.3557661808697523], "accuracy": [0.31303659081459045, 0.4505349397659302, 0.6069211363792419, 0.6782459616661072, 0.6802271604537964, 0.7102100253105164, 0.7123233675956726, 0.7306828498840332, 0.7454761862754822, 0.7530049085617065, 0.774798572063446, 0.7539294958114624, 0.7701756954193115, 0.7783648371696472, 0.7905164361000061, 0.7861577272415161, 0.7988376617431641, 0.7954035401344299, 0.7989697456359863, 0.8074230551719666, 0.8144234418869019, 0.8190463781356812, 0.8109893202781677, 0.8220842480659485, 0.8168009519577026, 0.8245938420295715, 0.8273676037788391, 0.8429533839225769, 0.8240655064582825, 0.8412362933158875, 0.8338396549224854, 0.832650899887085, 0.8454629778862, 0.8374059200286865, 0.8474441766738892, 0.8527275323867798, 0.8552370667457581, 0.850350022315979, 0.8487650156021118, 0.8595958352088928, 0.8556333184242249, 0.8696341514587402, 0.8638224601745605, 0.8602562546730042, 0.8656716346740723, 0.8681812286376953], "val_loss": [1.6523800577436174, 0.7460800749914986, 0.7848957266126361, 0.6641850301197597, 0.6650518349238804, 0.6343851940972465, 0.5683704103742327, 0.5458472285951886, 0.519106422151838, 0.5111277954918998, 0.4862762859889439, 0.49296702657427105, 0.47448422227587017, 0.45591534887041363, 0.4520119513784136, 0.479583740234375, 0.4549532873289926, 0.4310690334865025, 0.46237222637448994, 0.42284389053072247, 0.4026805247579302, 0.4138147064617702, 0.3963752729552133, 0.39583643845149447, 0.39935074533735004, 0.40525926862444195, 0.4061355079923357, 0.373922484261649, 0.3800236327307565, 0.4469928911754063, 0.3855242814336504, 0.41639975139072966, 0.36775191341127667, 0.38040114300591604, 0.3667158825056894, 0.3477837358202253, 0.37891431365694317, 0.41920394556862967, 0.3533509543963841, 0.4000815153121948, 0.33933238472257343, 0.34810144560677664, 0.35934988941465107, 0.36529018197740826, 0.3514460580689566, 0.3608213322503226], "val_accuracy": [0.40400001406669617, 0.6790000200271606, 0.6460000276565552, 0.6856666803359985, 0.6859999895095825, 0.7036666870117188, 0.7453333139419556, 0.7333333492279053, 0.7726666927337646, 0.768666684627533, 0.79666668176651, 0.781000018119812, 0.7943333387374878, 0.800000011920929, 0.8056666851043701, 0.7856666445732117, 0.8090000152587891, 0.8183333277702332, 0.7923333048820496, 0.8113333582878113, 0.8263333439826965, 0.8136666417121887, 0.831333339214325, 0.8233333230018616, 0.8236666917800903, 0.8159999847412109, 0.815666675567627, 0.840666651725769, 0.8270000219345093, 0.8003333210945129, 0.8296666741371155, 0.8209999799728394, 0.8433333039283752, 0.8353333473205566, 0.8429999947547913, 0.8500000238418579, 0.8386666774749756, 0.7953333258628845, 0.856333315372467, 0.8136666417121887, 0.8576666712760925, 0.8546666502952576, 0.843666672706604, 0.843999981880188, 0.8483333587646484, 0.8519999980926514]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 1, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 8, 8, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8337143063545227, "mapping_values": [1, 10, 10, 5, 5, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0949979649086385, 1.5943891110279778, 1.0790630861626735, 0.8821265867294621, 0.8309267943309456, 0.7524771226269615, 0.7425789852986924, 0.7031484844583514, 0.6830023439993963, 0.6487122576203029, 0.6124022027772604, 0.6361186630800494, 0.5990835066169812, 0.5798873099133228, 0.5786837158800195, 0.5638717017500015, 0.5416125992049536, 0.5427221647067518, 0.5284168097037901, 0.5187377493458023, 0.5040485277829028, 0.4880938223363733, 0.5012173325929502, 0.4787416511743359, 0.4964134443539985, 0.470530830665177, 0.4612688927555349, 0.43419937560933375, 0.45572841020229393, 0.43338034580396606, 0.44853736510004083, 0.43679824383298815, 0.4220537038220076, 0.4383943743079708, 0.4132558582654451, 0.3997520644273331, 0.3894687972253324, 0.4085797567086339, 0.4054070782896046, 0.38862080572303637, 0.3923839486042081, 0.3575045616044785, 0.37477832450417636, 0.3731067010267079, 0.35909376929244347, 0.3557661808697523], "accuracy": [0.31303659081459045, 0.4505349397659302, 0.6069211363792419, 0.6782459616661072, 0.6802271604537964, 0.7102100253105164, 0.7123233675956726, 0.7306828498840332, 0.7454761862754822, 0.7530049085617065, 0.774798572063446, 0.7539294958114624, 0.7701756954193115, 0.7783648371696472, 0.7905164361000061, 0.7861577272415161, 0.7988376617431641, 0.7954035401344299, 0.7989697456359863, 0.8074230551719666, 0.8144234418869019, 0.8190463781356812, 0.8109893202781677, 0.8220842480659485, 0.8168009519577026, 0.8245938420295715, 0.8273676037788391, 0.8429533839225769, 0.8240655064582825, 0.8412362933158875, 0.8338396549224854, 0.832650899887085, 0.8454629778862, 0.8374059200286865, 0.8474441766738892, 0.8527275323867798, 0.8552370667457581, 0.850350022315979, 0.8487650156021118, 0.8595958352088928, 0.8556333184242249, 0.8696341514587402, 0.8638224601745605, 0.8602562546730042, 0.8656716346740723, 0.8681812286376953], "val_loss": [1.6523800577436174, 0.7460800749914986, 0.7848957266126361, 0.6641850301197597, 0.6650518349238804, 0.6343851940972465, 0.5683704103742327, 0.5458472285951886, 0.519106422151838, 0.5111277954918998, 0.4862762859889439, 0.49296702657427105, 0.47448422227587017, 0.45591534887041363, 0.4520119513784136, 0.479583740234375, 0.4549532873289926, 0.4310690334865025, 0.46237222637448994, 0.42284389053072247, 0.4026805247579302, 0.4138147064617702, 0.3963752729552133, 0.39583643845149447, 0.39935074533735004, 0.40525926862444195, 0.4061355079923357, 0.373922484261649, 0.3800236327307565, 0.4469928911754063, 0.3855242814336504, 0.41639975139072966, 0.36775191341127667, 0.38040114300591604, 0.3667158825056894, 0.3477837358202253, 0.37891431365694317, 0.41920394556862967, 0.3533509543963841, 0.4000815153121948, 0.33933238472257343, 0.34810144560677664, 0.35934988941465107, 0.36529018197740826, 0.3514460580689566, 0.3608213322503226], "val_accuracy": [0.40400001406669617, 0.6790000200271606, 0.6460000276565552, 0.6856666803359985, 0.6859999895095825, 0.7036666870117188, 0.7453333139419556, 0.7333333492279053, 0.7726666927337646, 0.768666684627533, 0.79666668176651, 0.781000018119812, 0.7943333387374878, 0.800000011920929, 0.8056666851043701, 0.7856666445732117, 0.8090000152587891, 0.8183333277702332, 0.7923333048820496, 0.8113333582878113, 0.8263333439826965, 0.8136666417121887, 0.831333339214325, 0.8233333230018616, 0.8236666917800903, 0.8159999847412109, 0.815666675567627, 0.840666651725769, 0.8270000219345093, 0.8003333210945129, 0.8296666741371155, 0.8209999799728394, 0.8433333039283752, 0.8353333473205566, 0.8429999947547913, 0.8500000238418579, 0.8386666774749756, 0.7953333258628845, 0.856333315372467, 0.8136666417121887, 0.8576666712760925, 0.8546666502952576, 0.843666672706604, 0.843999981880188, 0.8483333587646484, 0.8519999980926514]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 3, 4, 6, 5, 1, 2, 3, 2, 1, 5, 1, 9, 3, 2, 3, 0, 5, 0, 2], [1, 1, 2, 1, 1, 2, 2, 2, 2, 0, 1, 3, 1, 1, 3], [31, 62, 35, 73, 14, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 9, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8337143063545227, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0949979649086385, 1.5943891110279778, 1.0790630861626735, 0.8821265867294621, 0.8309267943309456, 0.7524771226269615, 0.7425789852986924, 0.7031484844583514, 0.6830023439993963, 0.6487122576203029, 0.6124022027772604, 0.6361186630800494, 0.5990835066169812, 0.5798873099133228, 0.5786837158800195, 0.5638717017500015, 0.5416125992049536, 0.5427221647067518, 0.5284168097037901, 0.5187377493458023, 0.5040485277829028, 0.4880938223363733, 0.5012173325929502, 0.4787416511743359, 0.4964134443539985, 0.470530830665177, 0.4612688927555349, 0.43419937560933375, 0.45572841020229393, 0.43338034580396606, 0.44853736510004083, 0.43679824383298815, 0.4220537038220076, 0.4383943743079708, 0.4132558582654451, 0.3997520644273331, 0.3894687972253324, 0.4085797567086339, 0.4054070782896046, 0.38862080572303637, 0.3923839486042081, 0.3575045616044785, 0.37477832450417636, 0.3731067010267079, 0.35909376929244347, 0.3557661808697523], "accuracy": [0.31303659081459045, 0.4505349397659302, 0.6069211363792419, 0.6782459616661072, 0.6802271604537964, 0.7102100253105164, 0.7123233675956726, 0.7306828498840332, 0.7454761862754822, 0.7530049085617065, 0.774798572063446, 0.7539294958114624, 0.7701756954193115, 0.7783648371696472, 0.7905164361000061, 0.7861577272415161, 0.7988376617431641, 0.7954035401344299, 0.7989697456359863, 0.8074230551719666, 0.8144234418869019, 0.8190463781356812, 0.8109893202781677, 0.8220842480659485, 0.8168009519577026, 0.8245938420295715, 0.8273676037788391, 0.8429533839225769, 0.8240655064582825, 0.8412362933158875, 0.8338396549224854, 0.832650899887085, 0.8454629778862, 0.8374059200286865, 0.8474441766738892, 0.8527275323867798, 0.8552370667457581, 0.850350022315979, 0.8487650156021118, 0.8595958352088928, 0.8556333184242249, 0.8696341514587402, 0.8638224601745605, 0.8602562546730042, 0.8656716346740723, 0.8681812286376953], "val_loss": [1.6523800577436174, 0.7460800749914986, 0.7848957266126361, 0.6641850301197597, 0.6650518349238804, 0.6343851940972465, 0.5683704103742327, 0.5458472285951886, 0.519106422151838, 0.5111277954918998, 0.4862762859889439, 0.49296702657427105, 0.47448422227587017, 0.45591534887041363, 0.4520119513784136, 0.479583740234375, 0.4549532873289926, 0.4310690334865025, 0.46237222637448994, 0.42284389053072247, 0.4026805247579302, 0.4138147064617702, 0.3963752729552133, 0.39583643845149447, 0.39935074533735004, 0.40525926862444195, 0.4061355079923357, 0.373922484261649, 0.3800236327307565, 0.4469928911754063, 0.3855242814336504, 0.41639975139072966, 0.36775191341127667, 0.38040114300591604, 0.3667158825056894, 0.3477837358202253, 0.37891431365694317, 0.41920394556862967, 0.3533509543963841, 0.4000815153121948, 0.33933238472257343, 0.34810144560677664, 0.35934988941465107, 0.36529018197740826, 0.3514460580689566, 0.3608213322503226], "val_accuracy": [0.40400001406669617, 0.6790000200271606, 0.6460000276565552, 0.6856666803359985, 0.6859999895095825, 0.7036666870117188, 0.7453333139419556, 0.7333333492279053, 0.7726666927337646, 0.768666684627533, 0.79666668176651, 0.781000018119812, 0.7943333387374878, 0.800000011920929, 0.8056666851043701, 0.7856666445732117, 0.8090000152587891, 0.8183333277702332, 0.7923333048820496, 0.8113333582878113, 0.8263333439826965, 0.8136666417121887, 0.831333339214325, 0.8233333230018616, 0.8236666917800903, 0.8159999847412109, 0.815666675567627, 0.840666651725769, 0.8270000219345093, 0.8003333210945129, 0.8296666741371155, 0.8209999799728394, 0.8433333039283752, 0.8353333473205566, 0.8429999947547913, 0.8500000238418579, 0.8386666774749756, 0.7953333258628845, 0.856333315372467, 0.8136666417121887, 0.8576666712760925, 0.8546666502952576, 0.843666672706604, 0.843999981880188, 0.8483333587646484, 0.8519999980926514]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.772857129573822, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.square(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9824770910864917, 1.4119820957721705, 1.015574749891296, 0.9035918345824209, 0.7760900326802384, 0.7978515011082393, 0.723768979047252, 0.7026578676604545, 0.6772304601783309, 0.6453366480121177, 0.6381779535099217, 0.6585081400038024, 0.583232287229438, 0.5972284805489695, 0.557629693540143], "accuracy": [0.3255844712257385, 0.5160480737686157, 0.6292431354522705, 0.6588297486305237, 0.7086250185966492, 0.6859067678451538, 0.7215691208839417, 0.7230220437049866, 0.7313432693481445, 0.7499669790267944, 0.752740740776062, 0.7499669790267944, 0.7774402499198914, 0.7660810947418213, 0.7927618622779846], "val_loss": [1.4344849245888847, 0.8370404073170253, 0.6832016365868705, 0.6119140556880406, 0.6535406623567853, 0.6229197127478463, 0.5692282404218402, 0.5202678271702358, 0.5129407814570835, 0.4905693360737392, 0.5575267417090279, 0.4895883968898228, 0.4631596292768206, 0.47087788581848145, 0.4602589011192322], "val_accuracy": [0.46433332562446594, 0.5989999771118164, 0.6850000023841858, 0.7266666889190674, 0.67166668176651, 0.6890000104904175, 0.7276666760444641, 0.7603333592414856, 0.7839999794960022, 0.7929999828338623, 0.7490000128746033, 0.7896666526794434, 0.7896666526794434, 0.7896666526794434, 0.7883333563804626]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 3, 4, 6, 9, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 0, 1, 2, 3, 2, 0, 3, 1, 2, 3], [81, 62, 35, 55, 64, 1, 81, 19, 77, 41, 8], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [14, 25, 50, 71, 34]], "fitness": -0.5360000133514404, "mapping_values": [1, 11, 11, 6, 5, 1, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, alpha), grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302342081208507, 2.2994866252433606, 2.2994270904771783, 2.2962539542100813, 2.296638373543857, 2.293574304628555, 2.2929421539367105, 2.2906284040668465, 2.2881633050059755, 2.286894168206304, 2.285588111513405, 2.28519173805913, 2.2824586930764332, 2.282179801691761, 2.2806271926334207, 2.2784585433156814, 2.2767536772114645, 2.275325983333676, 2.274056110336733, 2.271722765804014, 2.269313663145838, 2.267691043169271, 2.2683199999779915, 2.263973163150762, 2.2632360929479813, 2.2612634476984277, 2.2611081447772627, 2.257757823795706, 2.2554847792296786, 2.256085615305459, 2.2518680267928537, 2.2507117323005645, 2.2480823244511288, 2.246923582885464, 2.2458388074797537, 2.242959978085751, 2.2395465891705433, 2.239972056241603, 2.235459159031804, 2.2341535229330853, 2.2325509233780823, 2.231043145735628, 2.2287814498750715, 2.225784211536015, 2.224902197134068, 2.2216881754029587, 2.2192976671580893, 2.217838306279624, 2.215749973791654, 2.212722058466885, 2.2094438467767685, 2.2080594714543507, 2.201712905266313, 2.2023310054798704, 2.199224777760806, 2.1954818596976575, 2.195610765799272, 2.192087424571378, 2.1869184215385933, 2.187377357086123, 2.1825026594778456, 2.179244476208015, 2.1759179363696646, 2.1739491554472377, 2.1692651131244114, 2.1676811321048435, 2.163910940606376, 2.160137221167951, 2.154669680820244, 2.1551921160119383, 2.1490164119900337, 2.147371988569851, 2.144185765229511, 2.137709017238282, 2.133486667628522, 2.1311039949814403, 2.1261054393779397, 2.1221722746254383, 2.1175192597834758, 2.115649420052094, 2.1103615676092353, 2.1048071139744637, 2.0993700340486647, 2.0942920273982493, 2.090734130277169, 2.0867681367569566, 2.080556456124101, 2.0796601654531903, 2.0705377274280083, 2.0661350409777692, 2.0621826774046452, 2.0543236039050456, 2.0465529485228133, 2.041938081755693, 2.042220718966751, 2.0318388407965062, 2.028869489967831, 2.022193024171389, 2.0140951733783785, 2.0080432250058537], "accuracy": [0.0886276587843895, 0.09430722147226334, 0.09377889335155487, 0.10870426893234253, 0.10976093262434006, 0.1150442510843277, 0.11147800832986832, 0.11240258812904358, 0.12693171203136444, 0.12851670384407043, 0.1286487877368927, 0.13353586196899414, 0.1414608359336853, 0.1426495909690857, 0.14832915365695953, 0.15493330359458923, 0.15757495164871216, 0.15612204372882843, 0.16166952252388, 0.17342491447925568, 0.1768590658903122, 0.17778365314006805, 0.18676528334617615, 0.18940694630146027, 0.190859854221344, 0.1978602558374405, 0.19376568496227264, 0.20816272497177124, 0.2052568942308426, 0.22005018591880798, 0.2207106053829193, 0.21912561357021332, 0.22440892457962036, 0.22797517478466034, 0.23206974565982819, 0.2429005354642868, 0.24461762607097626, 0.23801347613334656, 0.2639017403125763, 0.2587504982948303, 0.25795799493789673, 0.26244881749153137, 0.2646942138671875, 0.27103421092033386, 0.2751287817955017, 0.2712983787059784, 0.2822612524032593, 0.278959184885025, 0.2837141752243042, 0.28305375576019287, 0.29784706234931946, 0.2915070652961731, 0.30458328127861023, 0.31026285886764526, 0.3055078685283661, 0.31118741631507874, 0.30841368436813354, 0.30920618772506714, 0.3230748772621155, 0.3129045069217682, 0.3218861520290375, 0.3287544548511505, 0.33443403244018555, 0.3249240517616272, 0.33483028411865234, 0.33483028411865234, 0.34064191579818726, 0.33866068720817566, 0.3486989736557007, 0.3427552580833435, 0.3509443998336792, 0.34803855419158936, 0.35028398036956787, 0.3547748029232025, 0.36600184440612793, 0.36203935742378235, 0.36626601219177246, 0.3615110218524933, 0.3673226833343506, 0.3667943477630615, 0.3755118250846863, 0.3727380931377411, 0.38541802763938904, 0.38053098320961, 0.38621053099632263, 0.3777572214603424, 0.38383305072784424, 0.3825122117996216, 0.38885220885276794, 0.3949280083179474, 0.39704135060310364, 0.39545634388923645, 0.4003434181213379, 0.40523049235343933, 0.3971734344959259, 0.41104212403297424, 0.40364548563957214, 0.4089288115501404, 0.4157971143722534, 0.4135517179965973], "val_loss": [1.969052995954241, 1.967536313193185, 1.9660141808646066, 1.9645228385925293, 1.9630017280578613, 1.9615086827959334, 1.9600022860935755, 1.958484445299421, 1.9569886752537318, 1.9555003983633858, 1.9539946147373743, 1.9525049754551478, 1.9510143824986048, 1.9495046479361398, 1.9480088778904505, 1.9465022087097168, 1.944979463304792, 1.9434380531311035, 1.9419092450823103, 1.9403578213282995, 1.9388087817600794, 1.9372220039367676, 1.9356417655944824, 1.9340365954807825, 1.9324113982064384, 1.9307943752833776, 1.9291730608258928, 1.9275140762329102, 1.9258166721888952, 1.9241440636771066, 1.9224265643528529, 1.920692035130092, 1.9189355032784599, 1.9171404838562012, 1.9153271402631487, 1.9134759902954102, 1.9116029058183943, 1.909696170261928, 1.9077700206211634, 1.9058004106794084, 1.90379456111363, 1.9017829895019531, 1.8997421945844377, 1.897638933999198, 1.8955121040344238, 1.8933516229901994, 1.8911642347063338, 1.8889380182538713, 1.8866639137268066, 1.8843273435320174, 1.8819589614868164, 1.8795584269932337, 1.8770674296787806, 1.8745976175580705, 1.8720355715070451, 1.869417463030134, 1.8667841638837541, 1.8640929630824499, 1.8613225391932897, 1.858562810080392, 1.8556989942278181, 1.8527723039899553, 1.8497773579188757, 1.8467262131827218, 1.8436083793640137, 1.8404334613255091, 1.837174960545131, 1.8338604654584612, 1.830472196851458, 1.8270737784249442, 1.8235605784824915, 1.8200180189950126, 1.816401754106794, 1.8126862389700753, 1.8088767187935966, 1.8050451959882463, 1.801133496420724, 1.7971079690115792, 1.7930004937308175, 1.7888877051217216, 1.7846685818263464, 1.7803634234837122, 1.7759689603533064, 1.7714790616716658, 1.766918522971017, 1.7623256955827986, 1.7575618198939733, 1.7527967861720495, 1.7479215349469865, 1.7429257120404924, 1.737861156463623, 1.7327042307172502, 1.72738892691476, 1.7220442635672433, 1.7166793687003, 1.7111166204724992, 1.7055043492998396, 1.6997850963047572, 1.6939647878919328, 1.6880625656672887], "val_accuracy": [0.049666665494441986, 0.05966666713356972, 0.06866666674613953, 0.08033332973718643, 0.09366666525602341, 0.11033333092927933, 0.125, 0.13766667246818542, 0.1536666601896286, 0.16866666078567505, 0.18700000643730164, 0.2006666660308838, 0.21566666662693024, 0.22599999606609344, 0.2370000034570694, 0.24966666102409363, 0.2626666724681854, 0.2763333320617676, 0.28966665267944336, 0.29733332991600037, 0.3096666634082794, 0.31700000166893005, 0.32766667008399963, 0.33766666054725647, 0.3466666638851166, 0.351666659116745, 0.35733333230018616, 0.3623333275318146, 0.36633333563804626, 0.36899998784065247, 0.3766666650772095, 0.37966665625572205, 0.382999986410141, 0.38466668128967285, 0.3863333463668823, 0.39100000262260437, 0.3959999978542328, 0.39800000190734863, 0.4000000059604645, 0.4036666750907898, 0.40533334016799927, 0.40833333134651184, 0.41100001335144043, 0.41466665267944336, 0.4183333218097687, 0.42266666889190674, 0.42633333802223206, 0.4273333251476288, 0.4323333203792572, 0.43299999833106995, 0.4333333373069763, 0.43566668033599854, 0.43700000643730164, 0.4410000145435333, 0.44566667079925537, 0.44866666197776794, 0.4506666660308838, 0.45399999618530273, 0.4560000002384186, 0.45899999141693115, 0.4606666564941406, 0.46533334255218506, 0.4659999907016754, 0.4690000116825104, 0.4703333377838135, 0.4729999899864197, 0.47600001096725464, 0.47733333706855774, 0.4803333282470703, 0.48233333230018616, 0.48533332347869873, 0.4860000014305115, 0.4883333444595337, 0.4893333315849304, 0.49266666173934937, 0.4946666657924652, 0.4963333308696747, 0.4973333477973938, 0.49966666102409363, 0.5023333430290222, 0.5059999823570251, 0.5073333382606506, 0.5099999904632568, 0.512333333492279, 0.5166666507720947, 0.518666684627533, 0.5223333239555359, 0.5236666798591614, 0.5260000228881836, 0.5263333320617676, 0.5299999713897705, 0.5320000052452087, 0.5339999794960022, 0.5350000262260437, 0.5373333096504211, 0.5379999876022339, 0.5386666655540466, 0.5403333306312561, 0.5413333177566528, 0.5433333516120911]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [2, 2, 8, 6, 0, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 3, 1, 6, 6, 0, 7, 3, 3, 4, 4, 0, 5, 8, 1, 8, 0], [1, 0, 2, 1, 0, 0, 1, 2, 0, 1, 0, 3, 2, 2, 3, 0, 3, 0, 3, 2, 2, 3, 1, 0, 1, 0], [81, 62, 35, 55, 64, 1, 81, 19, 77, 41, 8], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 5, 2, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 58, 58, 35, 23, 8, 8, 8, 6, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))))))))), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, grad), grad)))))), tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), tf.math.square(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), tf.math.add(alpha, grad))))))))))), grad)))), alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, beta), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 7, 4, 2, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 0, 2, 2, 2, 2, 0, 1, 3, 1, 1, 3], [31, 62, 35, 73, 14, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 9, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), alpha), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07726852595806122, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 1, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 3, 1, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 8, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 0, 9, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 1, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 8, 8, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06630563735961914, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [3, 2, 8, 6, 0, 1, 2, 3, 2, 8, 5, 9, 9, 8, 9, 6, 0, 9, 8, 2, 3, 8, 0, 6, 0, 1, 7, 1, 4, 4, 0, 8, 8, 1, 5], [1, 2, 2, 1, 1, 0, 1, 2, 0, 0, 0, 3, 0, 1, 2, 3, 2, 0, 3, 1, 2, 3], [76, 62, 35, 73, 95, 1, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 8, 8, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 1, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [57, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.subtract(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07713644206523895, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [3, 2, 8, 6, 0, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 3, 4, 6, 6, 0, 7, 7, 1, 4, 3, 0, 5, 8, 1, 5], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 0, 1, 1, 3, 2, 0, 3, 1, 2, 3], [81, 62, 35, 63, 64, 1, 36, 19, 77, 41, 8], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 2, 9, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 2, 1, 2, 1, 3, 0, 0], [60, 32, 81, 17, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [57, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 0, 17, 17, 11, 6, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), grad))))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [3, 2, 4, 6, 0, 1, 5, 3, 2, 1, 2, 8, 9, 3, 2, 6, 0, 5, 0, 2, 3, 2, 5, 8, 0, 3], [1, 2, 1, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2, 1], [22, 55, 95, 73, 95, 80], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 6, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [221376.81497880985, 2.3143708186929945, 2.305553329335763, 2.3035837409203754, 2.3031861280106973, 2.302923341610523, 2.3029735411761254], "accuracy": [0.0956280529499054, 0.09457138925790787, 0.09536388516426086, 0.0956280529499054, 0.09879804402589798, 0.0956280529499054, 0.09391097724437714], "val_loss": [1.9914096423557825, 1.9783142634800501, 1.9747989518301827, 1.9739327430725098, 1.973768983568464, 1.9738723209926061, 1.973785059792655], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10233332961797714, 0.10233332961797714, 0.10000000149011612, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 3, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 1, 1, 3, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [6, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 4, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 4, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.pow(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [4, 2, 6, 6, 0, 4, 2, 3, 4, 1, 3, 8, 9, 3, 2, 6, 0, 1, 0, 2, 4, 2, 6, 3, 2, 1, 9, 3, 3, 6, 2, 0, 1, 0, 3, 8, 1, 0], [1, 2, 2, 0, 0, 0, 1, 2, 2, 0, 0, 3, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 0], [22, 55, 10, 95, 20, 16, 86, 73, 44, 68], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 0, 3, 8, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 64, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 4, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 4, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 8, 8, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [93, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303009028951836, 2.3017538579825665, 2.303320922430842, 2.3016936660301037, 2.303784209251278, 2.302210950139743], "accuracy": [0.0870426595211029, 0.08928807079792023, 0.08519349992275238, 0.09708096832036972, 0.08981640636920929, 0.09338264167308807], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 1, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 3, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 8, 8, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, grad)), tf.math.sqrt(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303009028951836, 2.3017538579825665, 2.303320922430842, 2.3016936660301037, 2.303784209251278, 2.302210950139743], "accuracy": [0.0870426595211029, 0.08928807079792023, 0.08519349992275238, 0.09708096832036972, 0.08981640636920929, 0.09338264167308807], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [3, 2, 0, 6, 2, 8, 2, 5, 2, 1, 5, 8, 9, 3, 5, 6, 5, 5, 0, 2, 5, 7, 1, 7, 3, 8, 0, 3, 6, 7, 7, 6, 8, 6, 6, 6, 7, 9, 2, 7, 2], [1, 2, 2, 1, 2, 0, 1, 1, 0, 1, 0, 3, 2, 2, 3, 0, 3, 1, 1, 3, 2, 3, 1, 3, 2, 2, 2, 2], [81, 62, 35, 55, 64, 1, 81, 19, 77, 41, 8], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 1, 8, 0, 6, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 3, 1, 3, 0, 0], [60, 17, 13, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [57, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 28, 28, 19, 9, 3, 14, 14, 9, 5, 3, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, grad)))), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303009028951836, 2.3017538579825665, 2.303320922430842, 2.3016936660301037, 2.303784209251278, 2.302210950139743], "accuracy": [0.0870426595211029, 0.08928807079792023, 0.08519349992275238, 0.09708096832036972, 0.08981640636920929, 0.09338264167308807], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [3, 2, 8, 6, 0, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 2, 5, 0, 2, 3, 8, 6, 6, 3, 7, 7, 1, 3, 4, 0, 5, 8, 1, 5], [0, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2, 2, 3, 0, 2, 0, 3, 2, 1, 0], [22, 55, 35, 73, 95, 1, 97, 27, 81], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 8, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 56, 56, 33, 23, 9, 9, 9, 7, 2, 2, 3, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.square(tf.math.sqrt(alpha))))))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(sigma))", "other_info": {"loss": [2.303009028951836, 2.3017538579825665, 2.303320922430842, 2.3016936660301037, 2.303784209251278, 2.302210950139743], "accuracy": [0.0870426595211029, 0.08928807079792023, 0.08519349992275238, 0.09708096832036972, 0.08981640636920929, 0.09338264167308807], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [3, 2, 3, 2, 2, 0, 2, 3, 2, 6, 8, 8, 1, 3, 2, 6, 0, 3, 0, 2, 2, 0, 8, 6, 5, 4, 5, 1, 1, 9, 2, 3, 1, 1, 9, 4, 9], [1, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 3, 2, 2, 1, 2, 2, 2, 1, 2, 1, 0, 0, 2], [22, 55, 10, 95, 20, 16, 86, 73, 44, 68], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 1, 2, 9, 6, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 2, 3, 3, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [57, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, grad)), lambda shape,  alpha, beta, grad: tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303009028951836, 2.3017538579825665, 2.303320922430842, 2.3016936660301037, 2.303784209251278, 2.302210950139743], "accuracy": [0.0870426595211029, 0.08928807079792023, 0.08519349992275238, 0.09708096832036972, 0.08981640636920929, 0.09338264167308807], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 7, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 1, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 10, 95, 20, 16, 86, 73, 44, 68], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 0, 3, 8, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 23, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 10, 10, 5, 5, 0, 8, 8, 5, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303009028951836, 2.3017538579825665, 2.303320922430842, 2.3016936660301037, 2.303784209251278, 2.302210950139743], "accuracy": [0.0870426595211029, 0.08928807079792023, 0.08519349992275238, 0.09708096832036972, 0.08981640636920929, 0.09338264167308807], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]