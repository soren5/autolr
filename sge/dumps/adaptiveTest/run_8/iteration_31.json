[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.8022857308387756, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9374660743997554, 1.4983187207235966, 1.0067685525556833, 0.831177640261982, 0.7852523611237769, 0.7400629063638887, 0.7403159133589042, 0.6542949719498926, 0.666003924138227, 0.6321427333450997, 0.6150553968557041, 0.6004705984578896, 0.5816864628109084, 0.5974972178797129, 0.5580140658341946, 0.5749570107998518, 0.540247288874159, 0.5229287972350745, 0.5365907591347524, 0.48521807191079364, 0.4938385784271733, 0.48523109741907516, 0.4719660718758124, 0.4777570102925251, 0.4588597737613875, 0.4486045631647834, 0.43485127251854566, 0.4361630455928944, 0.43872640989381306, 0.43477270760556347, 0.42064746118035884, 0.41403853616552616, 0.42567795433971023, 0.4036774292141455, 0.3943664794781614, 0.41237437328673815, 0.3739614526254941, 0.39925222494236595, 0.38352683678972027, 0.3852966755742741, 0.37863430763043593, 0.3584240816170435, 0.37033358489076745, 0.3731542591602417, 0.3420140578754354, 0.34146369260536164, 0.3498093927021528, 0.3277008080991063, 0.34263456101194584, 0.33556151097602754, 0.31953970200082393, 0.34029279223144676, 0.31972052368111914, 0.29950268455012097, 0.31296851065463993, 0.3128494960465656, 0.31642152945505014, 0.2993870650292262, 0.2957837025069951, 0.2865165900584178], "accuracy": [0.33364152908325195, 0.4807819426059723, 0.6279223561286926, 0.6952846646308899, 0.7059833407402039, 0.7224937081336975, 0.7172104120254517, 0.7524765729904175, 0.7461365461349487, 0.7557786107063293, 0.767401933670044, 0.7680623531341553, 0.7840443849563599, 0.7755910754203796, 0.7948752045631409, 0.7791573405265808, 0.7967243194580078, 0.8021397590637207, 0.7955356240272522, 0.8177255392074585, 0.8149517774581909, 0.8216879963874817, 0.8272355198860168, 0.8212917447090149, 0.8300092220306396, 0.8358209133148193, 0.8367455005645752, 0.8397833704948425, 0.8350284099578857, 0.8356888294219971, 0.8408400416374207, 0.8470479249954224, 0.8385946154594421, 0.8465195894241333, 0.8515387773513794, 0.8479725122451782, 0.8599920868873596, 0.8495575189590454, 0.8543124794960022, 0.8565579056739807, 0.8581429123878479, 0.8663320541381836, 0.8613129258155823, 0.8588033318519592, 0.872407853603363, 0.8753136992454529, 0.8710870146751404, 0.8775591254234314, 0.8691058158874512, 0.8762382864952087, 0.883238673210144, 0.8772949576377869, 0.8761062026023865, 0.885219931602478, 0.8809932470321655, 0.8819178342819214, 0.8775591254234314, 0.8828424215316772, 0.8879936337471008, 0.895918607711792], "val_loss": [1.4747024263654436, 0.7970487901142665, 0.730559059551784, 0.6739074672971453, 0.6420352799551827, 0.5605212279728481, 0.5312355756759644, 0.5158433403287616, 0.503130418913705, 0.5006166696548462, 0.4678596087864467, 0.46548857007707867, 0.48095595836639404, 0.47965293271201, 0.45373295886175974, 0.4375316415514265, 0.4356533629553659, 0.4641014848436628, 0.4223202722413199, 0.4387959752764021, 0.42877700499125887, 0.40365542684282574, 0.4055260419845581, 0.39945898737226215, 0.39260573046548025, 0.38690963813236784, 0.372415372303554, 0.4022276742117746, 0.37278378861291067, 0.3659862620489938, 0.39232824529920307, 0.42671226603644236, 0.37169464996882845, 0.35787919589451384, 0.3767569661140442, 0.3546700733048575, 0.37979529585157124, 0.3406553438731602, 0.3757429804120745, 0.3844389830316816, 0.35800119808741976, 0.3599602154323033, 0.34122553893498014, 0.3509474056107657, 0.33718715395246235, 0.3503623179027012, 0.32381556715284077, 0.3203206743512835, 0.352292673928397, 0.3232127002307347, 0.3602755921227591, 0.35229331254959106, 0.3246321167264666, 0.32603852237973896, 0.3303035582814898, 0.35623339244297575, 0.31624728441238403, 0.33268988132476807, 0.3144386240414211, 0.3917884571211679], "val_accuracy": [0.34966665506362915, 0.6809999942779541, 0.6776666641235352, 0.6946666836738586, 0.7136666774749756, 0.7446666955947876, 0.7546666860580444, 0.7620000243186951, 0.7616666555404663, 0.7639999985694885, 0.8040000200271606, 0.8036666512489319, 0.7993333339691162, 0.796999990940094, 0.8029999732971191, 0.8183333277702332, 0.8063333630561829, 0.7773333191871643, 0.8233333230018616, 0.809333324432373, 0.8203333616256714, 0.8303333520889282, 0.8316666483879089, 0.8296666741371155, 0.8346666693687439, 0.8356666564941406, 0.8416666388511658, 0.8286666870117188, 0.8416666388511658, 0.8446666598320007, 0.8223333358764648, 0.8073333501815796, 0.8420000076293945, 0.8473333120346069, 0.8376666903495789, 0.8523333072662354, 0.8299999833106995, 0.8573333621025085, 0.8303333520889282, 0.8256666660308838, 0.8546666502952576, 0.8410000205039978, 0.8643333315849304, 0.8476666808128357, 0.8636666536331177, 0.8556666374206543, 0.8643333315849304, 0.871666669845581, 0.8523333072662354, 0.8730000257492065, 0.8519999980926514, 0.856333315372467, 0.8709999918937683, 0.8709999918937683, 0.8743333220481873, 0.8456666469573975, 0.8730000257492065, 0.8600000143051147, 0.8683333396911621, 0.8183333277702332]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [74, 57], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 1, 1, 1, 5, 1, 1, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 1, 1, 1, 3, 3, 0], [85, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [85], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 4, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [3, 2, 1, 1], [29, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 6, 6, 0, 1, 1, 0, 1, 0, 7, 3, 4, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, alpha)))), alpha)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.math.pow(beta, alpha), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [0, 3, 2, 3], [44, 57], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 3, 6, 8, 1, 9, 4, 8, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 3, 2, 1, 1, 3, 0, 0], [42, 6, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [4, 7], [47], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [3, 3, 4, 6, 0, 5, 5, 7, 4, 9, 8, 3], [3, 3, 0, 1, 1, 1, 2], [12, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 5, 4, 2, 2, 0, 16, 10, 6, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.pow(sigma, tf.math.divide_no_nan(sigma, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.math.negative(alpha)), tf.math.square(tf.math.square(tf.math.add(tf.math.pow(alpha, alpha), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 1, 2, 3, 3, 2, 1, 2, 2, 3, 1, 2, 0, 2, 0], [19, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 9, 3, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [47], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 3, 4, 6, 4, 5, 5, 6, 4, 9, 8, 3], [3, 3, 0, 1, 1, 1, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 11, 11, 7, 4, 3, 1, 1, 0, 1, 0, 12, 6, 6, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(sigma, tf.math.pow(tf.math.divide_no_nan(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, alpha))), tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0], [7, 6, 8, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 8, 3, 6, 6, 8, 2, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 4, 4, 3, 0, 1, 1, 3, 3, 0], [42, 65, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 3, 3, 6, 9, 1, 5, 3, 7, 1, 4, 3, 3, 3, 2, 6, 8, 4, 7, 6, 3, 3, 5, 6, 2, 0, 5], [3, 3, 0, 1, 3, 0, 3, 0, 1, 1, 0, 3, 0, 0, 1, 1, 2, 3, 3, 0], [8, 38, 29, 58, 66, 44, 61, 76]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 13, 13, 7, 6, 1, 1, 1, 0, 1, 0, 47, 27, 20, 8], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(grad, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.pow(sigma, tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), alpha), tf.math.add(tf.math.divide_no_nan(sigma, tf.math.sqrt(tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), sigma))), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.square(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.negative(alpha), tf.math.square(alpha)))), beta), sigma)), sigma)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [2, 2, 3, 6, 6, 8, 2, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 2, 0, 3, 0, 2, 3, 0, 1], [9, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 3, 4], [4], [], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 3, 6, 3, 1, 1, 6, 9, 8, 5, 4, 7, 7, 0, 3, 5], [3, 0, 0, 1, 2, 3, 2, 2, 0, 3, 1], [12, 38, 58, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 22, 22, 11, 11, 3, 7, 4, 3, 1, 0, 28, 17, 11, 4], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), beta))), tf.math.add(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.pow(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, tf.math.multiply(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.divide_no_nan(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.math.square(beta))))), tf.math.pow(sigma, tf.math.add(tf.math.add(tf.math.negative(beta), beta), tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.square(sigma))))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [0, 3, 2, 3], [63, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 2, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 0, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 9, 9, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 13, 13, 6, 7, 2, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad)))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [30523109.893018052, 562917610.089024, 2624001962.012944, 7211336830.190992, 15665614990.556597, 28646533828.454895], "accuracy": [0.09972262382507324, 0.09800554811954498, 0.1014397069811821, 0.1002509593963623, 0.09628847241401672, 0.09932637959718704], "val_loss": [112155428.57142857, 896301147.4285715, 3023962989.714286, 7166656512.0, 13995870208.0, 24183408932.57143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 1, 2, 3], [44, 57, 63, 98, 28], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [2, 5, 6, 1, 3, 2, 2, 5, 2, 1, 0, 3, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 3, 1, 3, 3, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [19], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [10, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 28, 28, 17, 11, 4, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(grad, grad)))), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [30.231876156884667, 314.96501467423496, 1230.795880089063, 3174.105447854065, 6683.312482328746, 12006.801222644383], "accuracy": [0.10077928751707077, 0.09840179979801178, 0.1010434553027153, 0.09972262382507324, 0.09602430462837219, 0.09959053993225098], "val_loss": [79.62590898786273, 446.3743373325893, 1361.8021763392858, 3092.9322684151784, 5906.492606026785, 10067.068917410714], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [0, 3, 2, 3], [44, 57], [0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [5, 2, 0, 6, 1, 0, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [0, 2, 1, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 10, 10, 6, 4, 0, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, grad))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), beta), alpha), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [1, 2, 3, 6, 6, 8, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 2, 2, 3, 3, 2, 3, 0], [26, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 1, 1], [12, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 27, 27, 17, 10, 3, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), beta))), tf.math.add(beta, grad))))), tf.math.add(beta, grad)))), tf.math.add(beta, beta))), tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(sigma, alpha)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [0, 3, 2, 3], [44, 57], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [5, 9, 6, 6, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 0, 1, 1, 3, 3, 0], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 4, 9], [3, 3, 3, 1, 0], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.pow(sigma, sigma), sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 0, 2, 3], [74, 57, 46], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 1, 1, 1, 5, 1, 1, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 1, 0, 1, 3, 3, 0], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4, 0], [85], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 4, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [3, 3, 0, 1, 0], [29, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 3, 12, 12, 6, 6, 1, 1, 1, 0, 1, 0, 7, 3, 4, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, alpha)))), alpha)), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.multiply(tf.math.pow(sigma, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [5, 2, 6, 6, 1, 2, 4, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4, 0], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [6, 3, 3, 6, 9], [3, 1, 3, 1], [45, 38]], "fitness": -0.0454285703599453, "mapping_values": [1, 3, 3, 1, 2, 1, 18, 18, 9, 9, 1, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, alpha), sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.301956507539579, 2.3017764863966637, 2.3018424407665234, 2.30137853417115, 2.3018122507895713, 2.300944714041717], "accuracy": [0.09192973375320435, 0.09708096832036972, 0.09509972482919693, 0.09179764986038208, 0.09153348207473755, 0.0886276587843895], "val_loss": [1.9704447473798479, 1.970444679260254, 1.970444679260254, 1.970444679260254, 1.970444679260254, 1.970444679260254], "val_accuracy": [0.043666668236255646, 0.043666668236255646, 0.043666668236255646, 0.043666668236255646, 0.043666668236255646, 0.043666668236255646]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57, 63, 98, 28], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [5, 2, 6, 6, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 3, 0], [56, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0], [3, 3, 7, 8], [4, 0], [], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 3, 3, 6, 9], [3, 3, 3, 1, 0], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 8, 5, 4, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(grad, tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.302180023587627, 2.302182575904021, 2.3022505305525396, 2.301622695485756, 2.30215779555047, 2.3012451277181], "accuracy": [0.09166556596755981, 0.09734513610601425, 0.09166556596755981, 0.08955223858356476, 0.09100515395402908, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [4, 6, 2, 9], [2, 1, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [6, 2, 6, 6, 1, 1, 1, 2, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 2, 0, 3, 1, 2, 3, 0], [42, 71, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 3, 3, 6, 2, 3, 5, 8, 3, 8, 0], [3, 2, 0, 1, 3, 0, 3], [12, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 11, 7, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.multiply(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.multiply(alpha, tf.math.sqrt(tf.math.negative(sigma))))))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), sigma))", "other_info": {"loss": [2.302180023587627, 2.302182575904021, 2.3022505305525396, 2.301622695485756, 2.30215779555047, 2.3012451277181], "accuracy": [0.09166556596755981, 0.09734513610601425, 0.09166556596755981, 0.08955223858356476, 0.09100515395402908, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [6, 6, 6, 0, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 3, 3, 3, 0], [42, 71, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 0, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 7, 5, 2, 1, 0, 0, 0, 0, 8, 5, 3, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302180023587627, 2.302182575904021, 2.3022505305525396, 2.301622695485756, 2.30215779555047, 2.3012451277181], "accuracy": [0.09166556596755981, 0.09734513610601425, 0.09166556596755981, 0.08955223858356476, 0.09100515395402908, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [1, 0, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 6, 6, 1, 1, 9, 4, 8, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 3, 0], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 3, 3, 6, 2, 6, 3, 2, 3, 1, 1, 1, 3, 0, 2, 2, 1, 9, 4, 5], [1, 3, 3, 1, 0, 0, 1, 3, 2, 3, 1, 3, 3, 1, 1, 0], [45, 38, 43, 24]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 36, 20, 16, 4], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(alpha, sigma), sigma), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.subtract(alpha, tf.math.subtract(sigma, beta)), tf.math.multiply(tf.math.negative(tf.math.add(sigma, tf.math.add(alpha, sigma))), tf.math.subtract(sigma, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), alpha), tf.math.pow(tf.math.square(alpha), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [2.302180023587627, 2.302182575904021, 2.3022505305525396, 2.301622695485756, 2.30215779555047, 2.3012451277181], "accuracy": [0.09166556596755981, 0.09734513610601425, 0.09166556596755981, 0.08955223858356476, 0.09100515395402908, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 6, 2, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [59, 74, 43, 84, 1, 78], [0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0], [3, 3, 3, 8], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 5, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 8, 5, 4, 1, 0, 7, 4, 3, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma)))", "other_info": {"loss": [2.302180023587627, 2.302182575904021, 2.3022505305525396, 2.301622695485756, 2.30215779555047, 2.3012451277181], "accuracy": [0.09166556596755981, 0.09734513610601425, 0.09166556596755981, 0.08955223858356476, 0.09100515395402908, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 33, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 3, 3, 6, 9, 6, 1], [3, 3, 2, 1, 1], [58, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 12, 7, 5, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), alpha))), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, tf.math.subtract(alpha, alpha))))", "other_info": {"loss": [2.302180023587627, 2.302182575904021, 2.3022505305525396, 2.301622695485756, 2.30215779555047, 2.3012451277181], "accuracy": [0.09166556596755981, 0.09734513610601425, 0.09166556596755981, 0.08955223858356476, 0.09100515395402908, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [2, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [2, 5, 3, 6, 6, 8, 2, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 2, 0, 3, 3, 2, 3, 0], [10, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1, 0], [45, 38]], "fitness": -0.03742857277393341, "mapping_values": [1, 7, 7, 4, 3, 2, 19, 19, 10, 9, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, beta)))))), tf.math.add(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, sigma))", "other_info": {"loss": [2.3026342653973133, 2.3042591480672825, 2.3063437063869405, 2.3075340381781535, 2.3109919547152917, 2.312865326669411], "accuracy": [0.09074098616838455, 0.09272222965955734, 0.08638224750757217, 0.07858935743570328, 0.08070268481969833, 0.07634394615888596], "val_loss": [1.9717155865260534, 1.9731907163347517, 1.9748920713152205, 1.9767248971121651, 1.9790996823992049, 1.9814821652003698], "val_accuracy": [0.03266666829586029, 0.026333333924412727, 0.02566666714847088, 0.027000000700354576, 0.026000000536441803, 0.030666666105389595]}}]