[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 5, 2, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [39, 47, 50, 41, 34]], "fitness": -0.798285722732544, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [1.9710393208774672, 1.4677842077152714, 1.0500198659360243, 0.8860872125014685, 0.7919440681451599, 0.8309014688204497, 0.7402567260962247, 0.7143605428207441, 0.6626148916207222, 0.6724732292956522, 0.6697154920713037, 0.6294529608542719, 0.6254553340760205, 0.597200851902718, 0.5951517956163338, 0.5885719564911743, 0.5917629659010545, 0.5743788971073985, 0.5681227837586998, 0.5462535820963392, 0.5616541470613431, 0.5354871821756203, 0.5288813328698894], "accuracy": [0.34922730922698975, 0.4908202290534973, 0.6288469433784485, 0.6687359809875488, 0.7061154246330261, 0.6905296444892883, 0.7199841737747192, 0.7276449799537659, 0.7477215528488159, 0.7446836829185486, 0.7392682433128357, 0.755118191242218, 0.7648923397064209, 0.7709681391716003, 0.772288978099823, 0.7753269076347351, 0.7741381525993347, 0.7835160493850708, 0.7827235460281372, 0.7960638999938965, 0.7897239327430725, 0.7954035401344299, 0.7977809906005859], "val_loss": [1.5114924567086356, 0.9466244833809989, 0.652866074017116, 0.7163393327168056, 0.7132143463407244, 0.5455339636121478, 0.528414215360369, 0.5354693106242588, 0.520401052066258, 0.5215986285890851, 0.49564290046691895, 0.49260527747017996, 0.4678434985024588, 0.4689054318836757, 0.4825664928981236, 0.4531724878719875, 0.4698869671140398, 0.4341795529638018, 0.43547883204051424, 0.4704341547829764, 0.4245825580188206, 0.41925446476255146, 0.43646086965288433], "val_accuracy": [0.35866665840148926, 0.6413333415985107, 0.718999981880188, 0.6713333129882812, 0.6846666932106018, 0.7676666378974915, 0.7713333368301392, 0.7406666874885559, 0.7696666717529297, 0.7573333382606506, 0.7836666703224182, 0.7986666560173035, 0.7986666560173035, 0.796999990940094, 0.7786666750907898, 0.8040000200271606, 0.7889999747276306, 0.8236666917800903, 0.8196666836738586, 0.7926666736602783, 0.8213333487510681, 0.8143333196640015, 0.8216666579246521]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 1, 5, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [39, 47, 50, 41, 34]], "fitness": -0.798285722732544, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))))))), tf.math.subtract(tf.math.add(beta, beta), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [1.9710393208774672, 1.4677842077152714, 1.0500198659360243, 0.8860872125014685, 0.7919440681451599, 0.8309014688204497, 0.7402567260962247, 0.7143605428207441, 0.6626148916207222, 0.6724732292956522, 0.6697154920713037, 0.6294529608542719, 0.6254553340760205, 0.597200851902718, 0.5951517956163338, 0.5885719564911743, 0.5917629659010545, 0.5743788971073985, 0.5681227837586998, 0.5462535820963392, 0.5616541470613431, 0.5354871821756203, 0.5288813328698894], "accuracy": [0.34922730922698975, 0.4908202290534973, 0.6288469433784485, 0.6687359809875488, 0.7061154246330261, 0.6905296444892883, 0.7199841737747192, 0.7276449799537659, 0.7477215528488159, 0.7446836829185486, 0.7392682433128357, 0.755118191242218, 0.7648923397064209, 0.7709681391716003, 0.772288978099823, 0.7753269076347351, 0.7741381525993347, 0.7835160493850708, 0.7827235460281372, 0.7960638999938965, 0.7897239327430725, 0.7954035401344299, 0.7977809906005859], "val_loss": [1.5114924567086356, 0.9466244833809989, 0.652866074017116, 0.7163393327168056, 0.7132143463407244, 0.5455339636121478, 0.528414215360369, 0.5354693106242588, 0.520401052066258, 0.5215986285890851, 0.49564290046691895, 0.49260527747017996, 0.4678434985024588, 0.4689054318836757, 0.4825664928981236, 0.4531724878719875, 0.4698869671140398, 0.4341795529638018, 0.43547883204051424, 0.4704341547829764, 0.4245825580188206, 0.41925446476255146, 0.43646086965288433], "val_accuracy": [0.35866665840148926, 0.6413333415985107, 0.718999981880188, 0.6713333129882812, 0.6846666932106018, 0.7676666378974915, 0.7713333368301392, 0.7406666874885559, 0.7696666717529297, 0.7573333382606506, 0.7836666703224182, 0.7986666560173035, 0.7986666560173035, 0.796999990940094, 0.7786666750907898, 0.8040000200271606, 0.7889999747276306, 0.8236666917800903, 0.8196666836738586, 0.7926666736602783, 0.8213333487510681, 0.8143333196640015, 0.8216666579246521]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [8, 2, 3, 5, 2, 8, 2, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 3, 2, 3, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [39, 47, 50, 41, 34]], "fitness": -0.26085713505744934, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 9, 4, 5, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, grad)))))), tf.math.subtract(tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.862408021248689, 2.1896764864585876, 2.267744600402838, 2.3050025111223493, 2.302453543799444, 2.2180923479360093], "accuracy": [0.1982565075159073, 0.17078325152397156, 0.1410645842552185, 0.09325055778026581, 0.1080438494682312, 0.19680359959602356], "val_loss": [1.6454169750213623, 1.9115583556038993, 1.976010526929583, 1.973689079284668, 1.9701344626290458, 1.9801427296229772], "val_accuracy": [0.2619999945163727, 0.1743333339691162, 0.09833333641290665, 0.10400000214576721, 0.13333334028720856, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 7, 6, 6, 0, 3, 4, 1, 5, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 9, 5, 2, 1, 1, 6, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0], [60, 85, 93, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 3, 2, 3, 0, 9], [1, 3, 0, 0, 3, 2], [4, 47, 50, 41, 34]], "fitness": -0.20200000703334808, "mapping_values": [1, 1, 1, 0, 1, 1, 16, 16, 10, 6, 4, 1, 1, 0, 1, 0, 10, 5, 5, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.721648179654983, 2.34527900747698, 2.303885017702876, 2.3030937434093057, 2.3029876765542263, 2.302945958498903], "accuracy": [0.18214239180088043, 0.1286487877368927, 0.09536388516426086, 0.09668471664190292, 0.09206181764602661, 0.09800554811954498], "val_loss": [1.8689759799412318, 1.9751439094543457, 1.974043369293213, 1.973639624459403, 1.973733629499163, 1.9736945969717843], "val_accuracy": [0.21566666662693024, 0.09833333641290665, 0.09833333641290665, 0.10233332961797714, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 8, 8, 5, 6, 9, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0, 4], [1, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [6, 3, 2, 3, 3, 2, 6], [1, 3, 0, 0, 3, 2, 0, 2], [92, 47, 50, 41, 34]], "fitness": -0.12942856550216675, "mapping_values": [1, 3, 3, 2, 1, 1, 8, 8, 6, 2, 2, 1, 1, 0, 1, 0, 15, 7, 8, 3], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.divide_no_nan(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), beta)", "other_info": {"loss": [2.301359326375584, 2.303092827902116, 2.3018714366981365, 2.301466477120384, 2.299299079445076, 2.297319466458997, 2.3022377156247678, 2.2996789994036373, NaN, NaN], "accuracy": [0.08730682730674744, 0.08611807972192764, 0.0952318087220192, 0.09615638852119446, 0.1072513535618782, 0.10645885765552521, 0.09126931428909302, 0.09338264167308807, 0.10579843819141388, 0.09998679161071777], "val_loss": [1.9704512187412806, 1.9701076916285925, 1.9695119857788086, 1.968172482081822, 1.9670800481523787, 1.9650632994515556, 1.9671759605407715, 1.9660074370247977, NaN, NaN], "val_accuracy": [0.03933333232998848, 0.04800000041723251, 0.0573333315551281, 0.12099999934434891, 0.13600000739097595, 0.09600000083446503, 0.05700000002980232, 0.0806666687130928, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0], [2, 7, 6, 6, 0, 3, 4, 1, 5, 9, 8, 9], [2, 3, 0, 0, 1, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 6, 5, 5, 2, 1, 1, 6, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 2, 1, 3, 0, 0], [60, 85, 93, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0, 4], [1, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [9, 3, 2, 3, 3, 2, 6], [1, 3, 0, 0, 3, 2], [4, 47, 50, 41, 34]], "fitness": -0.10257142782211304, "mapping_values": [1, 3, 3, 1, 2, 0, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(grad), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.pow(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), beta)))), tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))))), alpha), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3013188155918325, 2.3025639136201907, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09681680053472519, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973639896937779, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.10133333504199982, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 5, 2, 8, 2, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 2, 2, 1, 3, 0, 0], [60, 85, 93, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [9, 3, 2, 3, 3, 2, 6], [1, 3, 0, 0, 3, 2, 2, 1, 3, 3, 1, 0], [4, 47, 50, 41, 34]], "fitness": -0.10257142782211304, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 6, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.sqrt(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3013188155918325, 2.3025639136201907, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09681680053472519, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973639896937779, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.10133333504199982, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 7, 6, 6, 0, 3, 4, 1, 5, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 5, 5, 2, 1, 1, 6, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [0, 0, 1], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [9, 3, 2, 3, 3, 2, 6], [1, 3, 0, 0, 3, 2], [4, 47, 50, 41, 34]], "fitness": -0.10257142782211304, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3013188155918325, 2.3025639136201907, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09681680053472519, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973639896937779, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.10133333504199982, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 7, 6, 6, 0, 3, 4, 1, 5, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 5, 1, 2, 2, 5, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 0, 3, 3, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 1, 0, 0, 0], [0, 0, 1, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 3, 2, 3, 6, 9], [0, 3, 1, 0, 3, 2], [39, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 5, 4, 2, 2, 0, 7, 3, 4, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3027190699191253, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 5, 2, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0], [1, 8, 2, 3, 6, 9, 2, 6, 5, 9], [1, 3, 0, 0, 3, 2], [39, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 7, 2, 1, 1, 1, 0, 1, 0, 15, 10, 5, 4], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.square(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 8, 8, 5, 3, 5, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 61, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0, 4], [1, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [9, 3, 2, 3, 3, 2, 6], [1, 3, 0, 0, 3, 2], [16, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027185975536932, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [3, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 5, 2, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 1, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [28], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [1, 7, 2, 3, 6, 9, 8, 9], [1, 3, 0, 3, 3, 2], [4, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 12, 8, 4, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(alpha, sigma), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [4067708.8632927774, 79452519.29520538, 363572033.0651169, 1022674682.1164972, 2160397939.438383, 4026009304.4723287], "accuracy": [0.09893012791872025, 0.09747721254825592, 0.09853387624025345, 0.10051512718200684, 0.1002509593963623, 0.09985470771789551], "val_loss": [15655501.714285715, 124987753.14285715, 421549339.4285714, 998891556.5714285, 1950568521.142857, 3370136941.714286], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 0, 5, 2, 8, 4, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0], [88, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 0, 8, 9], [1, 3, 0, 0, 3, 2], [39, 47, 72, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07475894689559937, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 6, 2, 8, 2, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 0, 3, 0, 2, 1, 3, 0, 0], [56, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [1, 3, 2, 3, 6, 0, 1, 0, 4, 4, 0, 5, 2, 8, 4, 6, 5], [1, 3, 0, 3, 3, 2, 3, 3, 0, 1, 2, 3], [5, 62, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 4, 1, 1, 0, 1, 0, 29, 17, 12, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.divide_no_nan(grad, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(alpha, sigma), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), sigma), tf.math.negative(sigma)), tf.math.subtract(tf.math.negative(beta), tf.math.pow(tf.math.pow(tf.math.negative(sigma), sigma), tf.math.square(tf.math.add(tf.math.sqrt(tf.math.pow(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, beta))), tf.math.square(sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 5, 3, 5, 2, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 38, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 3, 2, 3, 6, 9, 7, 5, 4, 1, 4, 0], [1, 3, 0, 0, 3, 2, 1, 3, 1], [21, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 21, 12, 9, 3], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, beta), tf.math.negative(alpha))))))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 8, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 0, 5, 3, 2, 8, 2, 6, 4, 0, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 3, 1, 0, 1, 3, 0, 0], [10, 85, 93, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [1, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [9, 3, 2, 3, 3, 2, 6], [1, 3, 0, 0, 3, 2, 2, 1, 3, 3, 1, 0], [43, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, alpha)), tf.math.negative(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))))))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027190699191253, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 5, 1, 2, 2, 5, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 1, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [1, 3, 2, 3, 2, 9, 4, 3, 4, 9, 3, 2], [0, 3, 0, 0, 3, 2, 0, 1, 3], [4, 47, 50, 41, 34, 80]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 21, 12, 9, 6], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.multiply(beta, tf.math.pow(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), alpha), sigma))))", "other_info": {"loss": [2.5244586974433574, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09417514503002167, 0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [6770855204.571428, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [3, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [97, 86, 3], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 8, 3, 5, 2, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 1, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [39, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 7, 3, 3, 1, 0, 0, 0, 0, 11, 6, 5, 3], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0734381154179573, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 5, 1, 2, 2, 3, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 3, 3, 3, 3, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 1], [0, 0, 1, 1], [3, 3, 0], [4, 4], [28], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 3, 2, 3, 2, 9, 1], [1, 3, 0, 0, 1, 2], [4, 3, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 3, 5, 3, 2, 1, 0, 13, 7, 6, 3], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))), grad)), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(sigma, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), alpha)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 8, 3, 5, 2, 8, 2, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [6, 3, 5, 7, 7, 9], [1, 0, 0, 0, 0, 2], [12, 80, 50, 41, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301276989081406, 2.303362449902459, 2.302386306233142, 2.302959857568324, 2.3021732454270953, 2.300802730566097], "accuracy": [0.08836349099874496, 0.08691058307886124, 0.09272222965955734, 0.08902391046285629, 0.09008057415485382, 0.09259014576673508], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]