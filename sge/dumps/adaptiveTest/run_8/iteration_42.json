[{"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.8202857375144958, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), grad)))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [2.026044011430938, 1.525176830232545, 1.0286960081259935, 0.8971686126880044, 0.834158300660652, 0.7481526062788035, 0.7147104796275581, 0.6869705549840205, 0.6578532156454905, 0.6327028527487821, 0.6446504517317039, 0.6129229181100349, 0.5790968593542114, 0.5596058815776743, 0.5835303391652604, 0.5296615405939888, 0.5137811345061165, 0.5343592079749212, 0.49711390278358597, 0.4930124413445956, 0.47781767187070034, 0.47762510773685585, 0.48191216262088177, 0.46991534478565833, 0.4619251556282172, 0.4478787255049413, 0.4504437614913787, 0.43001590048585037, 0.430184954850429, 0.442937361573688, 0.4058170750935977, 0.42578378816511275, 0.4143272880014569, 0.39291270867850187, 0.39855529382291516, 0.38520991042100866, 0.380923268234788], "accuracy": [0.3175274133682251, 0.4873860776424408, 0.6243560910224915, 0.6674151420593262, 0.6872276067733765, 0.7191916704177856, 0.7265883088111877, 0.7360982894897461, 0.7425703406333923, 0.761590301990509, 0.7515519857406616, 0.7681944370269775, 0.7796856164932251, 0.7841764688491821, 0.7759873270988464, 0.8041210174560547, 0.8050455451011658, 0.7981772422790527, 0.8129705190658569, 0.8144234418869019, 0.8255184292793274, 0.8211596608161926, 0.8193105459213257, 0.8203672170639038, 0.8253863453865051, 0.8358209133148193, 0.8352925777435303, 0.8411042094230652, 0.8400475382804871, 0.833179235458374, 0.8532558679580688, 0.8417646288871765, 0.8436138033866882, 0.8533879518508911, 0.8506141901016235, 0.8560295701026917, 0.8541803956031799], "val_loss": [1.549692119870867, 0.8173575741904122, 0.6717266525541034, 0.6896234921046666, 0.5947107757840838, 0.5716031278882708, 0.5636655773435321, 0.5323442731584821, 0.5479698181152344, 0.5240958077566964, 0.5028625726699829, 0.4899893317903791, 0.505505016871861, 0.4872291258403233, 0.46002607686179026, 0.431330212524959, 0.46965845993586947, 0.4119723779814584, 0.4361000657081604, 0.42852852174213957, 0.44604564564568655, 0.4209414209638323, 0.40939548185893465, 0.38551456587655203, 0.42098077705928255, 0.38283961159842356, 0.4185165507452829, 0.3895050031798227, 0.4347554785864694, 0.37456756830215454, 0.4143243602343968, 0.362517705985478, 0.36146614381245207, 0.4067444716181074, 0.3584968362535749, 0.4029043231691633, 0.3648344022887094], "val_accuracy": [0.3856666684150696, 0.6773333549499512, 0.6803333163261414, 0.6726666688919067, 0.734333336353302, 0.7440000176429749, 0.731333315372467, 0.7416666746139526, 0.7406666874885559, 0.7753333449363708, 0.7820000052452087, 0.7773333191871643, 0.7649999856948853, 0.7873333096504211, 0.7896666526794434, 0.824999988079071, 0.7916666865348816, 0.8253333568572998, 0.8026666641235352, 0.8103333115577698, 0.793666660785675, 0.8316666483879089, 0.8253333568572998, 0.8323333263397217, 0.8096666932106018, 0.8416666388511658, 0.8223333358764648, 0.82833331823349, 0.8100000023841858, 0.8446666598320007, 0.8199999928474426, 0.8546666502952576, 0.8510000109672546, 0.8086666464805603, 0.8496666550636292, 0.8236666917800903, 0.8453333377838135]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 3, 2, 3], [79, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 5, 6, 6, 2, 3, 9, 8, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.8202857375144958, "mapping_values": [1, 7, 7, 4, 3, 1, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.multiply(tf.math.add(beta, grad), grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [2.026044011430938, 1.525176830232545, 1.0286960081259935, 0.8971686126880044, 0.834158300660652, 0.7481526062788035, 0.7147104796275581, 0.6869705549840205, 0.6578532156454905, 0.6327028527487821, 0.6446504517317039, 0.6129229181100349, 0.5790968593542114, 0.5596058815776743, 0.5835303391652604, 0.5296615405939888, 0.5137811345061165, 0.5343592079749212, 0.49711390278358597, 0.4930124413445956, 0.47781767187070034, 0.47762510773685585, 0.48191216262088177, 0.46991534478565833, 0.4619251556282172, 0.4478787255049413, 0.4504437614913787, 0.43001590048585037, 0.430184954850429, 0.442937361573688, 0.4058170750935977, 0.42578378816511275, 0.4143272880014569, 0.39291270867850187, 0.39855529382291516, 0.38520991042100866, 0.380923268234788], "accuracy": [0.3175274133682251, 0.4873860776424408, 0.6243560910224915, 0.6674151420593262, 0.6872276067733765, 0.7191916704177856, 0.7265883088111877, 0.7360982894897461, 0.7425703406333923, 0.761590301990509, 0.7515519857406616, 0.7681944370269775, 0.7796856164932251, 0.7841764688491821, 0.7759873270988464, 0.8041210174560547, 0.8050455451011658, 0.7981772422790527, 0.8129705190658569, 0.8144234418869019, 0.8255184292793274, 0.8211596608161926, 0.8193105459213257, 0.8203672170639038, 0.8253863453865051, 0.8358209133148193, 0.8352925777435303, 0.8411042094230652, 0.8400475382804871, 0.833179235458374, 0.8532558679580688, 0.8417646288871765, 0.8436138033866882, 0.8533879518508911, 0.8506141901016235, 0.8560295701026917, 0.8541803956031799], "val_loss": [1.549692119870867, 0.8173575741904122, 0.6717266525541034, 0.6896234921046666, 0.5947107757840838, 0.5716031278882708, 0.5636655773435321, 0.5323442731584821, 0.5479698181152344, 0.5240958077566964, 0.5028625726699829, 0.4899893317903791, 0.505505016871861, 0.4872291258403233, 0.46002607686179026, 0.431330212524959, 0.46965845993586947, 0.4119723779814584, 0.4361000657081604, 0.42852852174213957, 0.44604564564568655, 0.4209414209638323, 0.40939548185893465, 0.38551456587655203, 0.42098077705928255, 0.38283961159842356, 0.4185165507452829, 0.3895050031798227, 0.4347554785864694, 0.37456756830215454, 0.4143243602343968, 0.362517705985478, 0.36146614381245207, 0.4067444716181074, 0.3584968362535749, 0.4029043231691633, 0.3648344022887094], "val_accuracy": [0.3856666684150696, 0.6773333549499512, 0.6803333163261414, 0.6726666688919067, 0.734333336353302, 0.7440000176429749, 0.731333315372467, 0.7416666746139526, 0.7406666874885559, 0.7753333449363708, 0.7820000052452087, 0.7773333191871643, 0.7649999856948853, 0.7873333096504211, 0.7896666526794434, 0.824999988079071, 0.7916666865348816, 0.8253333568572998, 0.8026666641235352, 0.8103333115577698, 0.793666660785675, 0.8316666483879089, 0.8253333568572998, 0.8323333263397217, 0.8096666932106018, 0.8416666388511658, 0.8223333358764648, 0.82833331823349, 0.8100000023841858, 0.8446666598320007, 0.8199999928474426, 0.8546666502952576, 0.8510000109672546, 0.8086666464805603, 0.8496666550636292, 0.8236666917800903, 0.8453333377838135]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 40, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.8202857375144958, "mapping_values": [1, 3, 3, 1, 2, 1, 18, 18, 10, 8, 2, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), grad)), tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), beta)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [2.026044011430938, 1.525176830232545, 1.0286960081259935, 0.8971686126880044, 0.834158300660652, 0.7481526062788035, 0.7147104796275581, 0.6869705549840205, 0.6578532156454905, 0.6327028527487821, 0.6446504517317039, 0.6129229181100349, 0.5790968593542114, 0.5596058815776743, 0.5835303391652604, 0.5296615405939888, 0.5137811345061165, 0.5343592079749212, 0.49711390278358597, 0.4930124413445956, 0.47781767187070034, 0.47762510773685585, 0.48191216262088177, 0.46991534478565833, 0.4619251556282172, 0.4478787255049413, 0.4504437614913787, 0.43001590048585037, 0.430184954850429, 0.442937361573688, 0.4058170750935977, 0.42578378816511275, 0.4143272880014569, 0.39291270867850187, 0.39855529382291516, 0.38520991042100866, 0.380923268234788], "accuracy": [0.3175274133682251, 0.4873860776424408, 0.6243560910224915, 0.6674151420593262, 0.6872276067733765, 0.7191916704177856, 0.7265883088111877, 0.7360982894897461, 0.7425703406333923, 0.761590301990509, 0.7515519857406616, 0.7681944370269775, 0.7796856164932251, 0.7841764688491821, 0.7759873270988464, 0.8041210174560547, 0.8050455451011658, 0.7981772422790527, 0.8129705190658569, 0.8144234418869019, 0.8255184292793274, 0.8211596608161926, 0.8193105459213257, 0.8203672170639038, 0.8253863453865051, 0.8358209133148193, 0.8352925777435303, 0.8411042094230652, 0.8400475382804871, 0.833179235458374, 0.8532558679580688, 0.8417646288871765, 0.8436138033866882, 0.8533879518508911, 0.8506141901016235, 0.8560295701026917, 0.8541803956031799], "val_loss": [1.549692119870867, 0.8173575741904122, 0.6717266525541034, 0.6896234921046666, 0.5947107757840838, 0.5716031278882708, 0.5636655773435321, 0.5323442731584821, 0.5479698181152344, 0.5240958077566964, 0.5028625726699829, 0.4899893317903791, 0.505505016871861, 0.4872291258403233, 0.46002607686179026, 0.431330212524959, 0.46965845993586947, 0.4119723779814584, 0.4361000657081604, 0.42852852174213957, 0.44604564564568655, 0.4209414209638323, 0.40939548185893465, 0.38551456587655203, 0.42098077705928255, 0.38283961159842356, 0.4185165507452829, 0.3895050031798227, 0.4347554785864694, 0.37456756830215454, 0.4143243602343968, 0.362517705985478, 0.36146614381245207, 0.4067444716181074, 0.3584968362535749, 0.4029043231691633, 0.3648344022887094], "val_accuracy": [0.3856666684150696, 0.6773333549499512, 0.6803333163261414, 0.6726666688919067, 0.734333336353302, 0.7440000176429749, 0.731333315372467, 0.7416666746139526, 0.7406666874885559, 0.7753333449363708, 0.7820000052452087, 0.7773333191871643, 0.7649999856948853, 0.7873333096504211, 0.7896666526794434, 0.824999988079071, 0.7916666865348816, 0.8253333568572998, 0.8026666641235352, 0.8103333115577698, 0.793666660785675, 0.8316666483879089, 0.8253333568572998, 0.8323333263397217, 0.8096666932106018, 0.8416666388511658, 0.8223333358764648, 0.82833331823349, 0.8100000023841858, 0.8446666598320007, 0.8199999928474426, 0.8546666502952576, 0.8510000109672546, 0.8086666464805603, 0.8496666550636292, 0.8236666917800903, 0.8453333377838135]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [1, 6, 4, 9], [0, 2, 2, 3], [79, 99], [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 2, 3, 3, 0], [7, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4], [], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.13828571140766144, "mapping_values": [1, 7, 7, 4, 3, 2, 10, 10, 5, 5, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(grad, grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.0118933930735245, 2.645667611899204, 2.304211454337315, 2.3034255629312628, 2.3029812990540544, 2.3030513170892535, 2.3026750949332584], "accuracy": [0.20803064107894897, 0.09615638852119446, 0.09853387624025345, 0.09919429570436478, 0.09377889335155487, 0.09642054885625839, 0.1014397069811821], "val_loss": [3.8478641510009766, 1.9747137342180525, 1.9737400327410017, 1.9735567910330636, 1.973487309047154, 1.9736415318080358, 1.9736783163888114], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.09700000286102295]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [2, 1, 4, 9], [2, 2, 2, 3], [79, 57], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 4, 0, 6, 6, 3, 3, 9, 1, 4, 4, 9, 2, 1, 1, 8, 9, 0, 5, 4, 5, 7, 0, 7], [3, 3, 3, 1, 0, 3, 0, 3, 3, 0, 0, 0, 5], [37, 66, 43, 99, 87, 78, 36], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3], [4, 3], [], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9, 2, 9], [3, 0, 3, 1], [45, 38]], "fitness": -0.13828571140766144, "mapping_values": [1, 7, 7, 4, 3, 1, 28, 28, 18, 10, 6, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(grad, alpha)), tf.math.pow(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, grad))), tf.math.sqrt(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.0118933930735245, 2.645667611899204, 2.304211454337315, 2.3034255629312628, 2.3029812990540544, 2.3030513170892535, 2.3026750949332584], "accuracy": [0.20803064107894897, 0.09615638852119446, 0.09853387624025345, 0.09919429570436478, 0.09377889335155487, 0.09642054885625839, 0.1014397069811821], "val_loss": [3.8478641510009766, 1.9747137342180525, 1.9737400327410017, 1.9735567910330636, 1.973487309047154, 1.9736415318080358, 1.9736783163888114], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.09700000286102295]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0], [2, 4, 4, 9], [2, 1, 2, 3], [79, 57], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 6, 6, 5, 2, 3, 1, 4, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [3, 3, 3, 1, 0, 3, 0, 3, 3, 0, 0, 0, 5], [58, 45, 43, 99, 81, 78], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 3, 6, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.13828571140766144, "mapping_values": [1, 1, 1, 0, 1, 0, 29, 29, 20, 9, 5, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(grad))), tf.math.add(tf.math.multiply(grad, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.0118933930735245, 2.645667611899204, 2.304211454337315, 2.3034255629312628, 2.3029812990540544, 2.3030513170892535, 2.3026750949332584], "accuracy": [0.20803064107894897, 0.09615638852119446, 0.09853387624025345, 0.09919429570436478, 0.09377889335155487, 0.09642054885625839, 0.1014397069811821], "val_loss": [3.8478641510009766, 1.9747137342180525, 1.9737400327410017, 1.9735567910330636, 1.973487309047154, 1.9736415318080358, 1.9736783163888114], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.09700000286102295]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0], [4, 6, 4, 9], [2, 1, 2, 3], [79, 10], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 3, 0, 3, 3, 0, 0, 0, 5], [58, 13, 43, 99, 81, 78], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.13828571140766144, "mapping_values": [1, 7, 7, 4, 3, 1, 18, 18, 10, 8, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha))), tf.math.pow(tf.math.add(alpha, grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), alpha)))), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.0118933930735245, 2.645667611899204, 2.304211454337315, 2.3034255629312628, 2.3029812990540544, 2.3030513170892535, 2.3026750949332584], "accuracy": [0.20803064107894897, 0.09615638852119446, 0.09853387624025345, 0.09919429570436478, 0.09377889335155487, 0.09642054885625839, 0.1014397069811821], "val_loss": [3.8478641510009766, 1.9747137342180525, 1.9737400327410017, 1.9735567910330636, 1.973487309047154, 1.9736415318080358, 1.9736783163888114], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [2, 1, 4, 9], [0, 3, 2, 3], [11, 57], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0], [1, 3, 6, 6, 6, 3, 3, 3, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0, 5, 4, 5, 7, 0, 7], [2, 1, 3, 5, 2, 3, 3, 3, 3, 2, 2, 3], [41, 66, 43, 99, 87, 78], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3], [4, 3], [], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9, 2, 9], [3, 0, 3, 1], [41, 38]], "fitness": -0.13828571140766144, "mapping_values": [1, 7, 7, 4, 3, 2, 24, 24, 13, 11, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(grad, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), grad))))))), grad), tf.math.add(beta, grad)))), grad), tf.math.add(beta, beta))), tf.math.sqrt(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.0118933930735245, 2.645667611899204, 2.304211454337315, 2.3034255629312628, 2.3029812990540544, 2.3030513170892535, 2.3026750949332584], "accuracy": [0.20803064107894897, 0.09615638852119446, 0.09853387624025345, 0.09919429570436478, 0.09377889335155487, 0.09642054885625839, 0.1014397069811821], "val_loss": [3.8478641510009766, 1.9747137342180525, 1.9737400327410017, 1.9735567910330636, 1.973487309047154, 1.9736415318080358, 1.9736783163888114], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.09700000286102295]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0], [1, 2, 4, 9], [0, 2, 0, 3], [79, 57], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [1, 4, 6, 6, 6, 2, 3, 2, 1, 4, 6, 9, 8, 1, 1, 8, 9, 0, 5, 4, 5, 7, 0, 7, 0, 1, 0, 3, 1, 6, 2, 7, 3, 6, 7, 6, 0, 2], [1, 3, 3, 5, 2, 3, 2, 3, 3, 0, 3, 3, 1, 1, 2, 1, 5, 1, 2, 0, 1, 0, 0, 2, 1, 4], [37, 34, 43, 99, 87, 78], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9, 2, 9], [3, 0, 3, 1], [41, 38]], "fitness": -0.13828571140766144, "mapping_values": [1, 1, 1, 0, 1, 1, 64, 64, 38, 26, 6, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.sqrt(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), grad))))))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))))), grad)))))), grad)), tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), alpha))))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, beta), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))))))))))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.0118933930735245, 2.645667611899204, 2.304211454337315, 2.3034255629312628, 2.3029812990540544, 2.3030513170892535, 2.3026750949332584], "accuracy": [0.20803064107894897, 0.09615638852119446, 0.09853387624025345, 0.09919429570436478, 0.09377889335155487, 0.09642054885625839, 0.1014397069811821], "val_loss": [3.8478641510009766, 1.9747137342180525, 1.9737400327410017, 1.9735567910330636, 1.973487309047154, 1.9736415318080358, 1.9736783163888114], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.09700000286102295]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [3, 6, 4, 9], [2, 2, 2, 3, 1], [33, 57], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 8, 0, 1, 8, 0, 2, 2, 8, 4, 6, 9, 8, 2, 1, 8, 1, 0, 5, 4, 5, 7, 5, 7], [1, 3, 4, 1, 2, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9, 2, 9], [3, 0, 3, 1], [45, 81]], "fitness": -0.13828571140766144, "mapping_values": [1, 7, 7, 4, 3, 1, 9, 9, 6, 3, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))), tf.math.pow(grad, tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.subtract(grad, tf.math.sqrt(tf.math.negative(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.0118933930735245, 2.645667611899204, 2.304211454337315, 2.3034255629312628, 2.3029812990540544, 2.3030513170892535, 2.3026750949332584], "accuracy": [0.20803064107894897, 0.09615638852119446, 0.09853387624025345, 0.09919429570436478, 0.09377889335155487, 0.09642054885625839, 0.1014397069811821], "val_loss": [3.8478641510009766, 1.9747137342180525, 1.9737400327410017, 1.9735567910330636, 1.973487309047154, 1.9736415318080358, 1.9736783163888114], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.09700000286102295]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0], [0, 1, 4, 9], [2, 1, 2, 3], [83, 10], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [9, 6, 6, 8, 2, 3, 9, 4, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [3, 3, 3, 1, 0, 3, 0, 3, 3, 0, 0, 0, 5], [37, 66, 43, 99, 87, 78], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3, 0], [7, 3], [], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9, 2, 9], [3, 0, 3, 1], [45, 38]], "fitness": -0.13828571140766144, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.0118933930735245, 2.645667611899204, 2.304211454337315, 2.3034255629312628, 2.3029812990540544, 2.3030513170892535, 2.3026750949332584], "accuracy": [0.20803064107894897, 0.09615638852119446, 0.09853387624025345, 0.09919429570436478, 0.09377889335155487, 0.09642054885625839, 0.1014397069811821], "val_loss": [3.8478641510009766, 1.9747137342180525, 1.9737400327410017, 1.9735567910330636, 1.973487309047154, 1.9736415318080358, 1.9736783163888114], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.09700000286102295]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 2, 2, 3], [79, 57], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 5, 6, 6, 2, 9, 8, 8, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [0, 3, 0, 1, 0, 3, 0, 3, 3, 0, 0, 0, 5], [42, 29, 43, 94, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 4, 9, 2, 9], [2, 2, 1, 2], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 6, 4, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1], [5, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 5, 3, 6, 2, 3, 9, 8, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [3, 3, 0, 1, 0, 3, 0, 3, 3, 0, 0, 0, 5], [37, 66, 87, 99, 87, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 9, 2, 9], [1, 3, 3, 1], [91, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 2, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 0, 3, 0, 3, 2, 3, 3, 0], [84, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 18, 18, 10, 8, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))), tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), grad))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), beta)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07290978729724884, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [2, 4, 4, 9], [2, 3, 2, 3], [79, 57], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 6, 1, 8, 2, 3, 9, 4, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [3, 3, 3, 1, 0, 3, 0, 3, 3, 0, 0, 0, 5], [58, 45, 43, 99, 81, 78], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 3, 6, 9, 2, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07290978729724884, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 5, 1, 6, 2, 3, 9, 8, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [1, 3, 3, 3, 3, 3, 2, 3, 3, 0, 5, 3], [37, 66, 43, 99, 87, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 4, 2, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 10, 10, 5, 5, 0, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, alpha), tf.math.divide_no_nan(grad, grad)))), tf.math.add(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.pow(sigma, sigma), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 0, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 3, 3, 2, 3, 3, 0], [42, 39, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [2, 3, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 5, 5, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), sigma), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07251353561878204, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 3, 6, 6, 2, 3, 9, 8, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [3, 3, 3, 1, 0, 3, 0, 3, 3, 0, 0, 0, 5], [58, 45, 43, 99, 81, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 9, 2, 9], [0, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 21, 21, 14, 7, 5, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3416.180583720068, 61581.631552552506, 278412.75830058777, 767317.0413584731, 1663565.603090741, 3092838.9768194426], "accuracy": [0.09919429570436478, 0.09721305221319199, 0.09774138033390045, 0.09879804402589798, 0.10011887550354004, 0.09853387624025345], "val_loss": [12472.231863839286, 97010.84151785714, 324657.6339285714, 766444.8214285715, 1493408.4285714286, 2576581.3571428573], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0], [2, 4, 4, 9], [0, 3, 2, 3], [79, 10], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 5, 4, 2, 2, 3, 9, 8, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [3, 3, 3, 1, 0, 3, 0, 3, 3, 0, 0, 0, 5], [58, 45, 43, 99, 81, 78], [0, 0, 0, 1, 0, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 3, 3, 6, 9, 2, 9], [3, 3, 3, 1], [41, 38]], "fitness": -0.056857142597436905, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, sigma), sigma))", "other_info": {"loss": [2.30311448223571, 2.302415727545572, 2.3015936529159293, 2.3007799400046927, 2.301543968638031, 2.303152612581103, 2.301584333429373, 2.3027334172003586, 2.3015959321106303, 2.301301820891298, 2.3017354658361375, 2.3006090219104927, 2.3010727015815124, 2.300815748390568, 2.3015531046893445, 2.3012715952665013, 2.301923224041412, 2.301185144204757, 2.300631785200666, 2.299922283598618, 2.3009099780828284, 2.301511057269351, 2.301455864801131, 2.3008694179841256, 2.3013738437713553, 2.299754580832932, 2.3003261846054373, 2.3010972880762894, 2.300508314860007, 2.2998919497706463, 2.2997377664500287, 2.300006182973789, 2.299303723679022, 2.2990561169309545, 2.2990805832559658, 2.2986467025377935, 2.300226180151296, 2.2985116102440073, 2.299160172768934, 2.298425739215523, 2.299834514259426, 2.2993341691426914, 2.2991900500084794, 2.300055497452536, 2.2992724376568123, 2.2998104501378345, 2.2991102118423474, 2.2973470385867243, 2.299260508004842, 2.297638709849654, 2.297968380203368, 2.2984143048859447, 2.2972341923744546, 2.2986753703643776, 2.2982646244045544, 2.29678056004214, 2.2990214750672595, 2.2969511867498507, 2.2977483461498664, 2.2972711310678267, 2.2997106470373314, 2.296546112639226, 2.297384843440844, 2.2971135445432167, 2.297124100934403, 2.296985162830214, 2.2977386237041055, 2.297679377836621, 2.2978873789790693, 2.2960974756343377, 2.2975135950474708, 2.2959324618561108, 2.2968635148439014, 2.2975610019571477, 2.297013388239334, 2.298533084921282, 2.297731725909155, 2.297607824172893, 2.2970503762476575, 2.29710081945935, 2.296221145439173, 2.2970882529643046, 2.2969435719671565, 2.2973908706977935, 2.2951998139699974, 2.2974730258163696, 2.2974803608642547, 2.297598352742123, 2.2967008885265328, 2.296831967225715, 2.296783379685877, 2.2956227040986783, 2.2979662827748855, 2.295503173695107, 2.2954241394004677, 2.2962009725380472, 2.296189173573847, 2.2965812456684973, 2.2957201839170405, 2.2970532110070887], "accuracy": [0.08770307898521423, 0.08585391938686371, 0.09470347315073013, 0.09298639744520187, 0.09549596905708313, 0.09021265059709549, 0.09192973375320435, 0.0874389111995697, 0.09602430462837219, 0.09338264167308807, 0.09509972482919693, 0.09998679161071777, 0.09232597798109055, 0.09259014576673508, 0.0944393053650856, 0.09430722147226334, 0.09021265059709549, 0.09576013684272766, 0.08915598690509796, 0.09325055778026581, 0.09325055778026581, 0.09034473448991776, 0.10077928751707077, 0.0936468094587326, 0.09549596905708313, 0.09800554811954498, 0.09787346422672272, 0.09866596013307571, 0.09734513610601425, 0.1022322028875351, 0.10091137140989304, 0.09615638852119446, 0.09615638852119446, 0.09826971590518951, 0.09906221181154251, 0.09628847241401672, 0.09615638852119446, 0.1006472036242485, 0.10091137140989304, 0.10210011899471283, 0.09840179979801178, 0.09642054885625839, 0.09906221181154251, 0.1010434553027153, 0.09972262382507324, 0.10117553919553757, 0.10130762308835983, 0.09589222073554993, 0.09932637959718704, 0.10077928751707077, 0.1026284471154213, 0.10447761416435242, 0.1010434553027153, 0.1002509593963623, 0.09747721254825592, 0.10394927859306335, 0.10368511080741882, 0.09985470771789551, 0.10632677376270294, 0.09972262382507324, 0.1014397069811821, 0.109232597053051, 0.11094967275857925, 0.10236428678035736, 0.09972262382507324, 0.10289261490106583, 0.10527011007070541, 0.09509972482919693, 0.09919429570436478, 0.10500594228506088, 0.10196803510189056, 0.1088363528251648, 0.10606260597705841, 0.10117553919553757, 0.10236428678035736, 0.09893012791872025, 0.10645885765552521, 0.10579843819141388, 0.10289261490106583, 0.09826971590518951, 0.10566636174917221, 0.10474177449941635, 0.10553427785634995, 0.10500594228506088, 0.10540219396352768, 0.09813763201236725, 0.10540219396352768, 0.10011887550354004, 0.10434553027153015, 0.10606260597705841, 0.1010434553027153, 0.10711926966905594, 0.10355303436517715, 0.10249637067317963, 0.10632677376270294, 0.10910051316022873, 0.10910051316022873, 0.10487385839223862, 0.10751552134752274, 0.10685510188341141], "val_loss": [1.9704996517726354, 1.9704172951834542, 1.9703290803091866, 1.970245361328125, 1.97016784123012, 1.970090321132115, 1.9700196811131068, 1.9699482917785645, 1.9698737008231026, 1.9697929791041784, 1.9697229521615165, 1.9696546282087053, 1.9695765631539481, 1.9694960457938058, 1.9694170270647322, 1.9693491118294852, 1.9692719323294503, 1.969191346849714, 1.9691167558942522, 1.9690424374171667, 1.968968187059675, 1.968897887638637, 1.9688215936933244, 1.9687572887965612, 1.9686882155282157, 1.9686191422598702, 1.9685550417218889, 1.9684867858886719, 1.9684193474905831, 1.9683468682425362, 1.9682846750531877, 1.9682215281895228, 1.968162672860282, 1.9681028638567244, 1.9680413518633162, 1.9679749352591378, 1.9679104260035925, 1.9678426470075334, 1.9677807944161552, 1.9677153996058874, 1.9676590647016252, 1.9675943510872977, 1.9675348145621163, 1.9674764360700334, 1.967423370906285, 1.967367376599993, 1.9673052515302385, 1.9672479629516602, 1.9671901294163294, 1.96713011605399, 1.9670788219996862, 1.967024462563651, 1.9669765063694544, 1.9669224194117956, 1.9668701035635812, 1.9668192863464355, 1.966766698019845, 1.9667184693472726, 1.9666624069213867, 1.9666098185947962, 1.966566903250558, 1.9665146555219377, 1.9664634295872279, 1.9664134298052107, 1.966367312840053, 1.9663198334830148, 1.966268811907087, 1.9662178584507533, 1.9661674499511719, 1.9661172458103724, 1.9660724231175013, 1.9660227639334542, 1.9659768513270788, 1.965926170349121, 1.9658799171447754, 1.9658325059073312, 1.9657838685171944, 1.9657372065952845, 1.9656857763017928, 1.9656379563467843, 1.965585776737758, 1.965540817805699, 1.965494087764195, 1.9654413631984167, 1.9653891154697962, 1.9653425897870744, 1.965292181287493, 1.9652400697980608, 1.9651907512119837, 1.9651480402265276, 1.9651011739458357, 1.9650513104030065, 1.9650045803615026, 1.9649554661342077, 1.964909212929862, 1.9648637771606445, 1.9648232460021973, 1.9647716794695174, 1.9647218159266882, 1.9646758352007185], "val_accuracy": [0.039000000804662704, 0.03933333232998848, 0.03999999910593033, 0.041333332657814026, 0.0416666679084301, 0.04266666620969772, 0.0430000014603138, 0.04333333298563957, 0.04333333298563957, 0.04399999976158142, 0.04466666653752327, 0.04533333331346512, 0.045666664838790894, 0.045666664838790894, 0.045666664838790894, 0.04633333161473274, 0.04699999839067459, 0.047333333641290665, 0.04766666516661644, 0.04833333194255829, 0.04833333194255829, 0.04933333396911621, 0.050333332270383835, 0.05233333259820938, 0.05233333259820938, 0.05233333259820938, 0.05299999937415123, 0.0533333346247673, 0.05400000140070915, 0.054666668176651, 0.054666668176651, 0.054999999701976776, 0.05533333495259285, 0.055666666477918625, 0.055666666477918625, 0.056333333253860474, 0.05666666850447655, 0.0573333315551281, 0.05766666680574417, 0.05900000035762787, 0.05900000035762787, 0.059333331882953644, 0.059333331882953644, 0.059333331882953644, 0.05966666713356972, 0.060333333909511566, 0.060333333909511566, 0.060333333909511566, 0.06066666543483734, 0.06133333221077919, 0.061666667461395264, 0.06233333423733711, 0.06233333423733711, 0.06233333423733711, 0.06233333423733711, 0.06300000101327896, 0.06333333253860474, 0.06366666406393051, 0.06300000101327896, 0.06333333253860474, 0.06333333253860474, 0.06400000303983688, 0.06400000303983688, 0.06499999761581421, 0.06533333659172058, 0.06533333659172058, 0.06566666811704636, 0.06599999964237213, 0.06566666811704636, 0.06599999964237213, 0.0663333311676979, 0.06733333319425583, 0.06833333522081375, 0.06933332979679108, 0.07000000029802322, 0.07000000029802322, 0.070333331823349, 0.07100000232458115, 0.0716666653752327, 0.0716666653752327, 0.0716666653752327, 0.07199999690055847, 0.07233333587646484, 0.0716666653752327, 0.0729999989271164, 0.07333333045244217, 0.07400000095367432, 0.07400000095367432, 0.07400000095367432, 0.07500000298023224, 0.07500000298023224, 0.07533333450555801, 0.07599999755620956, 0.07599999755620956, 0.07633333653211594, 0.07699999958276749, 0.07833333313465118, 0.0793333351612091, 0.07999999821186066, 0.08033332973718643]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [1, 6, 4, 9], [0, 3, 2, 3], [79, 57], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 5, 6, 6, 2, 3, 9, 8, 2, 1, 4, 9, 8, 9, 1, 0, 9, 0, 0, 5, 1, 7, 8, 6], [0, 3, 3, 3, 0, 3, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9, 2, 9], [3, 0, 3, 1], [41, 38]], "fitness": -0.03828571364283562, "mapping_values": [1, 7, 7, 4, 3, 2, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), sigma), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303409010774156, 2.3035189341780784, 2.3036674063486933, 2.303790669006017, 2.3060924649758188, 2.3094223579789164], "accuracy": [0.08717474341392517, 0.08440100401639938, 0.09245806187391281, 0.0878351628780365, 0.08849557489156723, 0.07938185334205627], "val_loss": [1.971135139465332, 1.9718330247061593, 1.9726642881120955, 1.9734668050493513, 1.9746006556919642, 1.9758037158421107], "val_accuracy": [0.036666665226221085, 0.03233333304524422, 0.03033333271741867, 0.028999999165534973, 0.028333334252238274, 0.028333334252238274]}}]