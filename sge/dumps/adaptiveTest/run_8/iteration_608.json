[{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7665714025497437, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.934859275203796, 1.5202726337179422, 1.1924218088801763, 0.9199136187922858, 0.8086193784227019, 0.7178767594080623, 0.6737747607434572, 0.6655131297702913, 0.6359981000856433, 0.6230428969430224, 0.6030482286003052], "accuracy": [0.3471139967441559, 0.4773477613925934, 0.5931845307350159, 0.6509047746658325, 0.685510516166687, 0.7279091477394104, 0.7374191284179688, 0.7434949278831482, 0.7574957013130188, 0.7580240368843079, 0.7688548564910889], "val_loss": [1.181396245956421, 0.9316193376268659, 0.7658839906964984, 0.582539405141558, 0.5461856978280204, 0.5143859216145107, 0.6199805566242763, 0.5279941388538906, 0.49268342767442974, 0.5418921709060669, 0.4968261889048985], "val_accuracy": [0.5173333287239075, 0.6413333415985107, 0.621666669845581, 0.7239999771118164, 0.7603333592414856, 0.7816666960716248, 0.7009999752044678, 0.7513333559036255, 0.7710000276565552, 0.768666684627533, 0.7693333625793457]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 8, 2, 4, 5, 3, 5, 1, 2, 1, 2, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 78, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7665714025497437, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.934859275203796, 1.5202726337179422, 1.1924218088801763, 0.9199136187922858, 0.8086193784227019, 0.7178767594080623, 0.6737747607434572, 0.6655131297702913, 0.6359981000856433, 0.6230428969430224, 0.6030482286003052], "accuracy": [0.3471139967441559, 0.4773477613925934, 0.5931845307350159, 0.6509047746658325, 0.685510516166687, 0.7279091477394104, 0.7374191284179688, 0.7434949278831482, 0.7574957013130188, 0.7580240368843079, 0.7688548564910889], "val_loss": [1.181396245956421, 0.9316193376268659, 0.7658839906964984, 0.582539405141558, 0.5461856978280204, 0.5143859216145107, 0.6199805566242763, 0.5279941388538906, 0.49268342767442974, 0.5418921709060669, 0.4968261889048985], "val_accuracy": [0.5173333287239075, 0.6413333415985107, 0.621666669845581, 0.7239999771118164, 0.7603333592414856, 0.7816666960716248, 0.7009999752044678, 0.7513333559036255, 0.7710000276565552, 0.768666684627533, 0.7693333625793457]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 4, 2, 4, 3, 2, 2, 1, 2, 1, 5, 2, 6, 3, 8, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 1, 2, 2, 2, 2, 1, 2, 1, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7665714025497437, "mapping_values": [1, 24, 24, 12, 12, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), alpha), tf.math.square(tf.math.add(alpha, tf.math.add(grad, alpha)))), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.934859275203796, 1.5202726337179422, 1.1924218088801763, 0.9199136187922858, 0.8086193784227019, 0.7178767594080623, 0.6737747607434572, 0.6655131297702913, 0.6359981000856433, 0.6230428969430224, 0.6030482286003052], "accuracy": [0.3471139967441559, 0.4773477613925934, 0.5931845307350159, 0.6509047746658325, 0.685510516166687, 0.7279091477394104, 0.7374191284179688, 0.7434949278831482, 0.7574957013130188, 0.7580240368843079, 0.7688548564910889], "val_loss": [1.181396245956421, 0.9316193376268659, 0.7658839906964984, 0.582539405141558, 0.5461856978280204, 0.5143859216145107, 0.6199805566242763, 0.5279941388538906, 0.49268342767442974, 0.5418921709060669, 0.4968261889048985], "val_accuracy": [0.5173333287239075, 0.6413333415985107, 0.621666669845581, 0.7239999771118164, 0.7603333592414856, 0.7816666960716248, 0.7009999752044678, 0.7513333559036255, 0.7710000276565552, 0.768666684627533, 0.7693333625793457]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 1, 2, 4, 5, 8, 2, 1, 2, 8, 5, 0, 9, 3, 8, 6, 1, 5, 0, 2, 8, 2, 9, 9, 2], [0, 0, 2, 0, 1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 11, 39, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7665714025497437, "mapping_values": [1, 23, 23, 15, 8, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.square(tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, tf.math.sqrt(tf.math.add(alpha, grad))))))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.934859275203796, 1.5202726337179422, 1.1924218088801763, 0.9199136187922858, 0.8086193784227019, 0.7178767594080623, 0.6737747607434572, 0.6655131297702913, 0.6359981000856433, 0.6230428969430224, 0.6030482286003052], "accuracy": [0.3471139967441559, 0.4773477613925934, 0.5931845307350159, 0.6509047746658325, 0.685510516166687, 0.7279091477394104, 0.7374191284179688, 0.7434949278831482, 0.7574957013130188, 0.7580240368843079, 0.7688548564910889], "val_loss": [1.181396245956421, 0.9316193376268659, 0.7658839906964984, 0.582539405141558, 0.5461856978280204, 0.5143859216145107, 0.6199805566242763, 0.5279941388538906, 0.49268342767442974, 0.5418921709060669, 0.4968261889048985], "val_accuracy": [0.5173333287239075, 0.6413333415985107, 0.621666669845581, 0.7239999771118164, 0.7603333592414856, 0.7816666960716248, 0.7009999752044678, 0.7513333559036255, 0.7710000276565552, 0.768666684627533, 0.7693333625793457]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 3, 2, 4, 3, 3, 2, 1, 2, 1, 5, 2, 6, 2, 2, 5, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 18, 35, 27, 57, 79, 12, 74], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7665714025497437, "mapping_values": [1, 39, 39, 23, 16, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.multiply(tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)), tf.math.square(tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.add(tf.math.add(alpha, tf.math.add(grad, grad)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))), tf.math.square(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(alpha)), tf.math.add(tf.math.sqrt(tf.math.add(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.934859275203796, 1.5202726337179422, 1.1924218088801763, 0.9199136187922858, 0.8086193784227019, 0.7178767594080623, 0.6737747607434572, 0.6655131297702913, 0.6359981000856433, 0.6230428969430224, 0.6030482286003052], "accuracy": [0.3471139967441559, 0.4773477613925934, 0.5931845307350159, 0.6509047746658325, 0.685510516166687, 0.7279091477394104, 0.7374191284179688, 0.7434949278831482, 0.7574957013130188, 0.7580240368843079, 0.7688548564910889], "val_loss": [1.181396245956421, 0.9316193376268659, 0.7658839906964984, 0.582539405141558, 0.5461856978280204, 0.5143859216145107, 0.6199805566242763, 0.5279941388538906, 0.49268342767442974, 0.5418921709060669, 0.4968261889048985], "val_accuracy": [0.5173333287239075, 0.6413333415985107, 0.621666669845581, 0.7239999771118164, 0.7603333592414856, 0.7816666960716248, 0.7009999752044678, 0.7513333559036255, 0.7710000276565552, 0.768666684627533, 0.7693333625793457]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [5, 4, 2, 4, 5, 6, 2, 1, 2, 1, 5, 2, 5, 5, 0, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 1, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 35, 27, 57, 79, 12, 74], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 4, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [80, 25, 50, 71, 34]], "fitness": -0.2751428484916687, "mapping_values": [1, 28, 28, 18, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.subtract(tf.math.square(tf.math.add(tf.math.square(alpha), tf.math.square(grad))), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.square(grad))))))))))))), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.pow(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.5925072856850675, 2.2243972882114744, 2.7615302895132925, 2.306238646772418, 2.3043218930289413, 2.303490609099852, 2.303115230871938], "accuracy": [0.2608638107776642, 0.18782195448875427, 0.1868973672389984, 0.09589222073554993, 0.0952318087220192, 0.10077928751707077, 0.10011887550354004], "val_loss": [1.9949934141976493, 1.5743605409349715, 1.9781993457249232, 1.9755782399858748, 1.9749296733311243, 1.974306583404541, 1.9739197322300501], "val_accuracy": [0.0976666659116745, 0.2933333218097687, 0.09933333098888397, 0.10233332961797714, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 4, 0, 4, 3, 2, 2, 1, 2, 1, 5, 2, 6, 3, 8, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 3, 0, 2, 2, 0, 1, 2, 2, 0, 2, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 37, 63, 57, 79, 58, 16, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [11, 25, 50, 71, 34]], "fitness": -0.26428571343421936, "mapping_values": [1, 21, 21, 11, 10, 4, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), alpha))))), grad), tf.math.subtract(tf.math.add(alpha, tf.math.square(grad)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3376631875630807, 2.193355303021029, 2.300232091804679, 2.2688719363433654, 2.2396693156616108, 2.3041874166366965, 2.256386630019618, 2.294559930467083, 2.0645461148589654], "accuracy": [0.20459648966789246, 0.17633073031902313, 0.11662924289703369, 0.1546691358089447, 0.17817988991737366, 0.10038304328918457, 0.14621582627296448, 0.1344604343175888, 0.2755250334739685], "val_loss": [1.8213701248168945, 1.9739518846784319, 1.948204789842878, 1.4344170093536377, 1.9764855248587472, 1.9656601633344377, 1.97459990637643, 1.791670867374965, 1.9701976094927107], "val_accuracy": [0.2029999941587448, 0.09700000286102295, 0.09966666996479034, 0.28299999237060547, 0.10400000214576721, 0.10266666859388351, 0.10000000149011612, 0.25, 0.10833333432674408]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [5, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 5, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 0, 2, 0, 2, 0, 0, 0, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 83, 27, 57, 79, 12, 74], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 5, 4, 1, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3028822358667638, 2.3040888542512374, 2.3115580218610763, 2.3557625223443712, 443.97054207433627, 17795399.638498258], "accuracy": [0.09813763201236725, 0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.974276406424386, 1.9764435631888253, 1.9928876331874303, 2.210096836090088, 11536.321707589286, 470564626.28571427], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [5, 4, 4, 4, 2, 6, 2, 5, 4, 1, 5, 2, 5, 5, 0, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 35, 27, 57, 79, 12, 74], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 6, 6, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad)), grad))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07660810649394989, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [6, 2, 2, 4, 5, 6, 2, 9, 2, 9, 0, 3, 9, 2, 5, 3, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 0, 2, 0, 2, 2, 0, 0, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 0, 35, 7, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 9, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))), grad)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [66155834.805300616, 1280853868.1009114, 5904479299.761723, 16385626601.345133, 34879105180.6229, 65397696997.01704], "accuracy": [0.09470347315073013, 0.09998679161071777, 0.09826971590518951, 0.09391097724437714, 0.10196803510189056, 0.09311848133802414], "val_loss": [252293065.14285713, 2016736256.0, 6804672073.142858, 16127298998.857143, 31496456484.57143, 54422684818.28571], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 4, 2, 4, 8, 2, 2, 1, 2, 1, 5, 2, 6, 3, 8, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 1, 2, 2, 1, 2, 1, 2, 1, 0, 2, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 0, 35, 7, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [97], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 1, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 11, 10, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 1, 6, 4, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))), grad))), tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), grad), alpha))))), grad), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.subtract(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 2, 4, 6, 3, 2, 1, 2, 1, 5, 2, 9, 5, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 5, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [4, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(grad, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)), grad))))), tf.math.add(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 8, 2, 2, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(grad, tf.math.add(alpha, grad))))))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08096684515476227, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 4, 2, 9, 5, 3, 2, 1, 2, 1, 5, 5, 2, 3, 2, 6, 6, 5, 0, 2, 8, 2, 0, 9, 2], [0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 10, 35, 27, 57, 79, 12, 74], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), grad))))), grad), tf.math.square(grad)))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07660810649394989, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 2, 5, 3, 2, 8, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [67, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 21, 11, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.square(tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.sqrt(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(grad, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))))))))))), tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [21008255.17855792, 2.3132637446157496, 2.3052107114140634, 2.3033583507782214, 2.3031394152892597, 2.3029543177610092, 2.3028385453708515], "accuracy": [0.0940430611371994, 0.09774138033390045, 0.09866596013307571, 0.09906221181154251, 0.09179764986038208, 0.09377889335155487, 0.09721305221319199], "val_loss": [1.9897143500191825, 1.9779472351074219, 1.9747108731951033, 1.9739762033735002, 1.9736439159938268, 1.9736664635794503, 1.9736648968287878], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.09700000286102295, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 5, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 0, 2, 0, 2, 2, 0, 0, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 3, 83, 27, 57, 79, 12, 74], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.05657142773270607, "mapping_values": [1, 15, 15, 8, 7, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.multiply(grad, tf.math.add(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(beta)))", "other_info": {"loss": [2.3034595366497994, 2.3016543838688412, 2.3009858560946324, 2.303586558391232, 2.300517287220953, 2.3027366682397, 2.301999817875792, 2.3015740921059304, 2.301752879398846, 2.3027659799318587, 2.3008514290488296, 2.301112527088986, 2.30202222349086, 2.3011870334145574, 2.3002695461636473, 2.3024246643531465, 2.301129831787208, 2.300482230935319, 2.2995349728845413, 2.299942674984502, 2.301868906551427, 2.300011770458521, 2.299623733498338, 2.300413259598935, 2.298199843264464, 2.2996207812773695, 2.2998858733247096, 2.300859443421188, 2.2993759439763393, 2.2989235635698746, 2.299191539439669, 2.2994780252008487, 2.300479831287433, 2.300262279482786, 2.300587722480793, 2.300084353438017, 2.3003809878445414, 2.299538586637552, 2.2989469690251076, 2.298942083223479, 2.2995988809673493, 2.2988338054147586, 2.300366088336627, 2.300328641598487, 2.300071392139943, 2.2997423531183743, 2.3002183760760277, 2.29951516253963, 2.2980117752189573, 2.2962062865546855, 2.2981497910453847, 2.3003232989565037, 2.2998696431318812, 2.298451874691025, 2.2974763536623297, 2.2986219788051128, 2.2987273868678693, 2.2973753924477514, 2.297823132871558, 2.2965493520268865, 2.2987052881328767, 2.298284181278175, 2.297603100959446, 2.2984530836631123, 2.2985565120738336, 2.2968068883687027, 2.297662141788842, 2.2972763456357956, 2.298880531016027, 2.298065695166194, 2.296928013572446, 2.2981778312557646, 2.297492547986876, 2.2967156569058034, 2.2975931287268447, 2.295725357578163, 2.2973926087506555, 2.296174699730168, 2.2977529596485686, 2.297976775554193, 2.2978020590120978, 2.2967167286084957, 2.297876941057134, 2.2962920338549178, 2.2969613746015263, 2.296342363667416, 2.2958960977795417, 2.295773696244401, 2.2967703242611184, 2.2965288101138848, 2.295412635507207, 2.2959963569016333, 2.296572480675976, 2.2968489526049054, 2.2965259433910594, 2.2969340242651146, 2.2967871616639637, 2.2956777289716435, 2.296438173610993, 2.294619370634215], "accuracy": [0.08651433140039444, 0.08757099509239197, 0.09113723784685135, 0.08942015469074249, 0.08928807079792023, 0.09206181764602661, 0.0878351628780365, 0.08875974267721176, 0.09219389408826828, 0.09060890227556229, 0.09311848133802414, 0.09113723784685135, 0.09285431355237961, 0.0948355570435524, 0.09457138925790787, 0.09087307006120682, 0.08942015469074249, 0.09259014576673508, 0.0948355570435524, 0.09747721254825592, 0.09338264167308807, 0.09945846349000931, 0.09338264167308807, 0.09245806187391281, 0.09906221181154251, 0.09800554811954498, 0.09602430462837219, 0.09417514503002167, 0.0944393053650856, 0.10051512718200684, 0.09787346422672272, 0.09945846349000931, 0.0936468094587326, 0.0944393053650856, 0.08915598690509796, 0.09140139818191528, 0.09787346422672272, 0.09325055778026581, 0.09787346422672272, 0.1018359512090683, 0.09893012791872025, 0.09668471664190292, 0.09259014576673508, 0.09509972482919693, 0.09589222073554993, 0.09866596013307571, 0.09906221181154251, 0.10289261490106583, 0.10355303436517715, 0.10645885765552521, 0.09932637959718704, 0.09576013684272766, 0.1002509593963623, 0.1014397069811821, 0.10355303436517715, 0.1002509593963623, 0.10315678268671036, 0.10130762308835983, 0.09694888442754745, 0.10157178342342377, 0.10196803510189056, 0.09747721254825592, 0.09800554811954498, 0.10038304328918457, 0.09945846349000931, 0.10566636174917221, 0.1026284471154213, 0.10434553027153015, 0.10302469879388809, 0.09959053993225098, 0.10077928751707077, 0.09747721254825592, 0.09998679161071777, 0.11108175665140152, 0.11081759631633759, 0.10474177449941635, 0.10381719470024109, 0.10527011007070541, 0.10051512718200684, 0.1010434553027153, 0.10606260597705841, 0.10500594228506088, 0.10632677376270294, 0.10249637067317963, 0.10513802617788315, 0.10355303436517715, 0.10289261490106583, 0.10711926966905594, 0.09840179979801178, 0.10315678268671036, 0.10606260597705841, 0.10949676483869553, 0.1026284471154213, 0.10632677376270294, 0.10276053100824356, 0.10500594228506088, 0.10672302544116974, 0.10460969805717468, 0.10381719470024109, 0.11266675591468811], "val_loss": [1.9704910687037878, 1.970419270651681, 1.9703350067138672, 1.9702581678118025, 1.9701801027570451, 1.970101969582694, 1.9700267655508858, 1.9699484961373466, 1.9698717934744698, 1.9697957038879395, 1.9697225434439523, 1.9696501323154993, 1.9695774487086706, 1.9695031983511788, 1.9694348062787737, 1.9693502017429896, 1.9692699568612235, 1.969193799155099, 1.96911587033953, 1.9690430504935128, 1.9689713205610002, 1.9688985007149833, 1.9688288143702917, 1.9687579699925013, 1.9686951637268066, 1.9686319487435477, 1.9685611043657576, 1.9684927122933524, 1.9684255463736398, 1.968362535749163, 1.968299388885498, 1.9682344709123885, 1.9681767736162459, 1.9681107657296317, 1.9680462564740862, 1.9679883548191615, 1.9679275240216936, 1.9678651264735632, 1.967809064047677, 1.9677502087184362, 1.967681816646031, 1.9676188741411482, 1.9675587926592146, 1.9674970081874303, 1.967437812260219, 1.9673813411167689, 1.9673256192888533, 1.967271396092006, 1.9672130857195174, 1.9671617235456194, 1.967102118900844, 1.9670508929661341, 1.9669974190848214, 1.9669452394757951, 1.9668901307242257, 1.9668409483773368, 1.9667833873203822, 1.966731003352574, 1.9666780744280135, 1.9666314806256975, 1.96658536366054, 1.966531208583287, 1.966484614780971, 1.9664369991847448, 1.966386181967599, 1.9663358415876115, 1.9662808690752303, 1.9662297793797083, 1.9661812782287598, 1.9661337307521276, 1.9660823685782296, 1.9660376140049525, 1.9659898621695382, 1.965935162135533, 1.9658846855163574, 1.9658331871032715, 1.9657771927969796, 1.96572630746024, 1.9656739234924316, 1.9656265122549874, 1.9655777386256628, 1.965529305594308, 1.9654769216264998, 1.9654245376586914, 1.9653701782226562, 1.9653185435703822, 1.9652681350708008, 1.9652188846043177, 1.9651710646493095, 1.9651283536638533, 1.9650778770446777, 1.9650266511099679, 1.964979784829276, 1.9649342128208704, 1.9648905481610979, 1.964844022478376, 1.9647980417524065, 1.96475430897304, 1.9647119385855538, 1.964667865208217], "val_accuracy": [0.039000000804662704, 0.03966666758060455, 0.03999999910593033, 0.041333332657814026, 0.0416666679084301, 0.04266666620969772, 0.0430000014603138, 0.04333333298563957, 0.04333333298563957, 0.04399999976158142, 0.04466666653752327, 0.045666664838790894, 0.045666664838790894, 0.045666664838790894, 0.045666664838790894, 0.04600000008940697, 0.046666666865348816, 0.047333333641290665, 0.047333333641290665, 0.04766666516661644, 0.04833333194255829, 0.04933333396911621, 0.049666665494441986, 0.05000000074505806, 0.05133333429694176, 0.05233333259820938, 0.05299999937415123, 0.0533333346247673, 0.05366666615009308, 0.05400000140070915, 0.054666668176651, 0.054999999701976776, 0.054999999701976776, 0.054999999701976776, 0.0560000017285347, 0.056333333253860474, 0.0560000017285347, 0.0560000017285347, 0.05666666850447655, 0.05766666680574417, 0.05833333358168602, 0.059333331882953644, 0.059333331882953644, 0.05966666713356972, 0.059333331882953644, 0.05966666713356972, 0.060333333909511566, 0.06066666543483734, 0.061000000685453415, 0.06133333221077919, 0.06233333423733711, 0.06233333423733711, 0.06233333423733711, 0.06233333423733711, 0.06266666948795319, 0.06300000101327896, 0.06333333253860474, 0.06333333253860474, 0.06333333253860474, 0.06333333253860474, 0.06333333253860474, 0.06366666406393051, 0.06400000303983688, 0.06433333456516266, 0.06466666609048843, 0.06499999761581421, 0.06599999964237213, 0.06566666811704636, 0.0663333311676979, 0.06666667014360428, 0.06666667014360428, 0.0676666647195816, 0.06800000369548798, 0.0689999982714653, 0.06933332979679108, 0.06966666877269745, 0.07000000029802322, 0.07000000029802322, 0.07133333384990692, 0.07133333384990692, 0.07100000232458115, 0.07100000232458115, 0.07133333384990692, 0.07199999690055847, 0.07233333587646484, 0.07233333587646484, 0.0729999989271164, 0.07400000095367432, 0.07433333247900009, 0.07433333247900009, 0.07466666400432587, 0.07500000298023224, 0.07599999755620956, 0.07733333110809326, 0.07766667008399963, 0.07800000160932541, 0.07900000363588333, 0.07966666668653488, 0.08166666328907013, 0.08133333176374435]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 4, 2, 4, 3, 3, 2, 1, 2, 6, 5, 2, 6, 3, 8, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 2, 2, 2, 2, 2, 1, 2, 1, 0, 2, 0, 2, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 0, 35, 7, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.05657142773270607, "mapping_values": [1, 32, 32, 18, 14, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(grad, tf.math.add(alpha, grad)))))), tf.math.add(alpha, alpha)), tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), grad))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))), tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(beta)))", "other_info": {"loss": [2.3034595366497994, 2.3016543838688412, 2.3009858560946324, 2.303586558391232, 2.300517287220953, 2.3027366682397, 2.301999817875792, 2.3015740921059304, 2.301752879398846, 2.3027659799318587, 2.3008514290488296, 2.301112527088986, 2.30202222349086, 2.3011870334145574, 2.3002695461636473, 2.3024246643531465, 2.301129831787208, 2.300482230935319, 2.2995349728845413, 2.299942674984502, 2.301868906551427, 2.300011770458521, 2.299623733498338, 2.300413259598935, 2.298199843264464, 2.2996207812773695, 2.2998858733247096, 2.300859443421188, 2.2993759439763393, 2.2989235635698746, 2.299191539439669, 2.2994780252008487, 2.300479831287433, 2.300262279482786, 2.300587722480793, 2.300084353438017, 2.3003809878445414, 2.299538586637552, 2.2989469690251076, 2.298942083223479, 2.2995988809673493, 2.2988338054147586, 2.300366088336627, 2.300328641598487, 2.300071392139943, 2.2997423531183743, 2.3002183760760277, 2.29951516253963, 2.2980117752189573, 2.2962062865546855, 2.2981497910453847, 2.3003232989565037, 2.2998696431318812, 2.298451874691025, 2.2974763536623297, 2.2986219788051128, 2.2987273868678693, 2.2973753924477514, 2.297823132871558, 2.2965493520268865, 2.2987052881328767, 2.298284181278175, 2.297603100959446, 2.2984530836631123, 2.2985565120738336, 2.2968068883687027, 2.297662141788842, 2.2972763456357956, 2.298880531016027, 2.298065695166194, 2.296928013572446, 2.2981778312557646, 2.297492547986876, 2.2967156569058034, 2.2975931287268447, 2.295725357578163, 2.2973926087506555, 2.296174699730168, 2.2977529596485686, 2.297976775554193, 2.2978020590120978, 2.2967167286084957, 2.297876941057134, 2.2962920338549178, 2.2969613746015263, 2.296342363667416, 2.2958960977795417, 2.295773696244401, 2.2967703242611184, 2.2965288101138848, 2.295412635507207, 2.2959963569016333, 2.296572480675976, 2.2968489526049054, 2.2965259433910594, 2.2969340242651146, 2.2967871616639637, 2.2956777289716435, 2.296438173610993, 2.294619370634215], "accuracy": [0.08651433140039444, 0.08757099509239197, 0.09113723784685135, 0.08942015469074249, 0.08928807079792023, 0.09206181764602661, 0.0878351628780365, 0.08875974267721176, 0.09219389408826828, 0.09060890227556229, 0.09311848133802414, 0.09113723784685135, 0.09285431355237961, 0.0948355570435524, 0.09457138925790787, 0.09087307006120682, 0.08942015469074249, 0.09259014576673508, 0.0948355570435524, 0.09747721254825592, 0.09338264167308807, 0.09945846349000931, 0.09338264167308807, 0.09245806187391281, 0.09906221181154251, 0.09800554811954498, 0.09602430462837219, 0.09417514503002167, 0.0944393053650856, 0.10051512718200684, 0.09787346422672272, 0.09945846349000931, 0.0936468094587326, 0.0944393053650856, 0.08915598690509796, 0.09140139818191528, 0.09787346422672272, 0.09325055778026581, 0.09787346422672272, 0.1018359512090683, 0.09893012791872025, 0.09668471664190292, 0.09259014576673508, 0.09509972482919693, 0.09589222073554993, 0.09866596013307571, 0.09906221181154251, 0.10289261490106583, 0.10355303436517715, 0.10645885765552521, 0.09932637959718704, 0.09576013684272766, 0.1002509593963623, 0.1014397069811821, 0.10355303436517715, 0.1002509593963623, 0.10315678268671036, 0.10130762308835983, 0.09694888442754745, 0.10157178342342377, 0.10196803510189056, 0.09747721254825592, 0.09800554811954498, 0.10038304328918457, 0.09945846349000931, 0.10566636174917221, 0.1026284471154213, 0.10434553027153015, 0.10302469879388809, 0.09959053993225098, 0.10077928751707077, 0.09747721254825592, 0.09998679161071777, 0.11108175665140152, 0.11081759631633759, 0.10474177449941635, 0.10381719470024109, 0.10527011007070541, 0.10051512718200684, 0.1010434553027153, 0.10606260597705841, 0.10500594228506088, 0.10632677376270294, 0.10249637067317963, 0.10513802617788315, 0.10355303436517715, 0.10289261490106583, 0.10711926966905594, 0.09840179979801178, 0.10315678268671036, 0.10606260597705841, 0.10949676483869553, 0.1026284471154213, 0.10632677376270294, 0.10276053100824356, 0.10500594228506088, 0.10672302544116974, 0.10460969805717468, 0.10381719470024109, 0.11266675591468811], "val_loss": [1.9704910687037878, 1.970419270651681, 1.9703350067138672, 1.9702581678118025, 1.9701801027570451, 1.970101969582694, 1.9700267655508858, 1.9699484961373466, 1.9698717934744698, 1.9697957038879395, 1.9697225434439523, 1.9696501323154993, 1.9695774487086706, 1.9695031983511788, 1.9694348062787737, 1.9693502017429896, 1.9692699568612235, 1.969193799155099, 1.96911587033953, 1.9690430504935128, 1.9689713205610002, 1.9688985007149833, 1.9688288143702917, 1.9687579699925013, 1.9686951637268066, 1.9686319487435477, 1.9685611043657576, 1.9684927122933524, 1.9684255463736398, 1.968362535749163, 1.968299388885498, 1.9682344709123885, 1.9681767736162459, 1.9681107657296317, 1.9680462564740862, 1.9679883548191615, 1.9679275240216936, 1.9678651264735632, 1.967809064047677, 1.9677502087184362, 1.967681816646031, 1.9676188741411482, 1.9675587926592146, 1.9674970081874303, 1.967437812260219, 1.9673813411167689, 1.9673256192888533, 1.967271396092006, 1.9672130857195174, 1.9671617235456194, 1.967102118900844, 1.9670508929661341, 1.9669974190848214, 1.9669452394757951, 1.9668901307242257, 1.9668409483773368, 1.9667833873203822, 1.966731003352574, 1.9666780744280135, 1.9666314806256975, 1.96658536366054, 1.966531208583287, 1.966484614780971, 1.9664369991847448, 1.966386181967599, 1.9663358415876115, 1.9662808690752303, 1.9662297793797083, 1.9661812782287598, 1.9661337307521276, 1.9660823685782296, 1.9660376140049525, 1.9659898621695382, 1.965935162135533, 1.9658846855163574, 1.9658331871032715, 1.9657771927969796, 1.96572630746024, 1.9656739234924316, 1.9656265122549874, 1.9655777386256628, 1.965529305594308, 1.9654769216264998, 1.9654245376586914, 1.9653701782226562, 1.9653185435703822, 1.9652681350708008, 1.9652188846043177, 1.9651710646493095, 1.9651283536638533, 1.9650778770446777, 1.9650266511099679, 1.964979784829276, 1.9649342128208704, 1.9648905481610979, 1.964844022478376, 1.9647980417524065, 1.96475430897304, 1.9647119385855538, 1.964667865208217], "val_accuracy": [0.039000000804662704, 0.03966666758060455, 0.03999999910593033, 0.041333332657814026, 0.0416666679084301, 0.04266666620969772, 0.0430000014603138, 0.04333333298563957, 0.04333333298563957, 0.04399999976158142, 0.04466666653752327, 0.045666664838790894, 0.045666664838790894, 0.045666664838790894, 0.045666664838790894, 0.04600000008940697, 0.046666666865348816, 0.047333333641290665, 0.047333333641290665, 0.04766666516661644, 0.04833333194255829, 0.04933333396911621, 0.049666665494441986, 0.05000000074505806, 0.05133333429694176, 0.05233333259820938, 0.05299999937415123, 0.0533333346247673, 0.05366666615009308, 0.05400000140070915, 0.054666668176651, 0.054999999701976776, 0.054999999701976776, 0.054999999701976776, 0.0560000017285347, 0.056333333253860474, 0.0560000017285347, 0.0560000017285347, 0.05666666850447655, 0.05766666680574417, 0.05833333358168602, 0.059333331882953644, 0.059333331882953644, 0.05966666713356972, 0.059333331882953644, 0.05966666713356972, 0.060333333909511566, 0.06066666543483734, 0.061000000685453415, 0.06133333221077919, 0.06233333423733711, 0.06233333423733711, 0.06233333423733711, 0.06233333423733711, 0.06266666948795319, 0.06300000101327896, 0.06333333253860474, 0.06333333253860474, 0.06333333253860474, 0.06333333253860474, 0.06333333253860474, 0.06366666406393051, 0.06400000303983688, 0.06433333456516266, 0.06466666609048843, 0.06499999761581421, 0.06599999964237213, 0.06566666811704636, 0.0663333311676979, 0.06666667014360428, 0.06666667014360428, 0.0676666647195816, 0.06800000369548798, 0.0689999982714653, 0.06933332979679108, 0.06966666877269745, 0.07000000029802322, 0.07000000029802322, 0.07133333384990692, 0.07133333384990692, 0.07100000232458115, 0.07100000232458115, 0.07133333384990692, 0.07199999690055847, 0.07233333587646484, 0.07233333587646484, 0.0729999989271164, 0.07400000095367432, 0.07433333247900009, 0.07433333247900009, 0.07466666400432587, 0.07500000298023224, 0.07599999755620956, 0.07733333110809326, 0.07766667008399963, 0.07800000160932541, 0.07900000363588333, 0.07966666668653488, 0.08166666328907013, 0.08133333176374435]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 8, 5, 4, 5, 3, 2, 1, 2, 1, 5, 2, 6, 5, 6, 6, 0, 5, 0, 2, 8, 2, 0, 9, 2, 2], [0, 2, 2, 2, 1, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [57, 10, 41, 63, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 41, 41, 26, 15, 6, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 6, 4, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), grad)))), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), alpha)))), grad), tf.math.negative(tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))))), tf.math.sqrt(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3034964435057415, 2.3017782921867287, 2.301197219219316, 2.30388011086524, 2.300891020074103, 2.3031942030347774], "accuracy": [0.08611807972192764, 0.0870426595211029, 0.09008057415485382, 0.0886276587843895, 0.08928807079792023, 0.09074098616838455], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 0, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 69, 83, 27, 57, 79, 12, 74], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 23, 23, 14, 9, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(grad, grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(grad, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3034964435057415, 2.3017782921867287, 2.301197219219316, 2.30388011086524, 2.300891020074103, 2.3031942030347774], "accuracy": [0.08611807972192764, 0.0870426595211029, 0.09008057415485382, 0.0886276587843895, 0.08928807079792023, 0.09074098616838455], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 5, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [3, 3, 0, 2, 2, 0, 1, 2, 2, 0, 2, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [98, 10, 83, 27, 57, 79, 12, 74], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [1, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 5, 4, 1, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3034964435057415, 2.3017782921867287, 2.301197219219316, 2.30388011086524, 2.300891020074103, 2.3031942030347774], "accuracy": [0.08611807972192764, 0.0870426595211029, 0.09008057415485382, 0.0886276587843895, 0.08928807079792023, 0.09074098616838455], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]