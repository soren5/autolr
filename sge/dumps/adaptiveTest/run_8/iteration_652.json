[{"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7911428809165955, "mapping_values": [1, 30, 30, 23, 7, 4, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.negative(grad))))))))), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2570907882553883, 2.056670986839242, 1.6218890235125192, 1.2662143962352723, 1.0897776402061674, 1.0141620045844448, 0.9263277597997985, 0.88354483218855, 0.8458290621667821, 0.8187657111136039, 0.8010108241819514, 0.7698756081474424, 0.7728334678209784, 0.7495658172592432, 0.7327025273236396, 0.7268706965109518, 0.7140237860171991, 0.7022979946074123, 0.6886732254156174, 0.689582080463802, 0.6764646803288805, 0.6629622706317032, 0.6636868165295436, 0.6665717764553251, 0.6523642893228643, 0.6472721827217554, 0.6396498275769936, 0.6314476659473978, 0.6237722062526079, 0.6354525456213129, 0.6258407986442789, 0.6189961265642189, 0.6101812562843623, 0.6050386322708241, 0.6063796040908205, 0.5976517280693366, 0.5910889159859982], "accuracy": [0.19997358322143555, 0.39004093408584595, 0.4876502454280853, 0.5672962665557861, 0.6153744459152222, 0.6445648074150085, 0.6705851554870605, 0.6844538450241089, 0.6955488324165344, 0.7051908373832703, 0.711530864238739, 0.7169462442398071, 0.7180029153823853, 0.7265883088111877, 0.7338528633117676, 0.7321357727050781, 0.7412495017051697, 0.739400327205658, 0.7452120184898376, 0.7456082701683044, 0.7549861073493958, 0.7568352818489075, 0.7523444890975952, 0.7497028112411499, 0.7585523724555969, 0.7588165402412415, 0.7592127919197083, 0.7687227725982666, 0.7626469135284424, 0.7613261342048645, 0.7631752490997314, 0.7684586048126221, 0.7718927264213562, 0.776251494884491, 0.7749306559562683, 0.7770439982414246, 0.7794214487075806], "val_loss": [1.8518338884626115, 1.5084427084241594, 1.0359586306980677, 0.8195615495954242, 0.7238567045756749, 0.683985812323434, 0.6341419560568673, 0.6237785986491612, 0.5897208963121686, 0.5790240594318935, 0.5721045732498169, 0.5562405245644706, 0.5335723161697388, 0.5317802599498204, 0.5332399266106742, 0.5136228629520961, 0.5168320451463971, 0.508475763457162, 0.5118705034255981, 0.5025594064167568, 0.4855632611683437, 0.4832373176302229, 0.4808037110737392, 0.480367762701852, 0.4813640798841204, 0.4712944030761719, 0.47057676315307617, 0.46620702743530273, 0.4696054458618164, 0.47228665011269705, 0.45955947467259, 0.456112265586853, 0.45423145805086407, 0.4479133827345712, 0.46040781906672884, 0.45452589648110525, 0.4507919294493539], "val_accuracy": [0.44333332777023315, 0.5633333325386047, 0.6516666412353516, 0.6949999928474426, 0.7173333168029785, 0.7236666679382324, 0.7329999804496765, 0.7333333492279053, 0.7536666393280029, 0.7486666440963745, 0.7450000047683716, 0.7593333125114441, 0.7766666412353516, 0.7853333353996277, 0.753000020980835, 0.7826666831970215, 0.7739999890327454, 0.7863333225250244, 0.7710000276565552, 0.7879999876022339, 0.7933333516120911, 0.8023333549499512, 0.7886666655540466, 0.7823333144187927, 0.7860000133514404, 0.8003333210945129, 0.8076666593551636, 0.8029999732971191, 0.7933333516120911, 0.7926666736602783, 0.8026666641235352, 0.8153333067893982, 0.8083333373069763, 0.8119999766349792, 0.8073333501815796, 0.8130000233650208, 0.8136666417121887]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 1, 8, 4, 4, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 4, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7911428809165955, "mapping_values": [1, 26, 26, 19, 7, 4, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha))))), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.negative(grad), grad)))))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2570907882553883, 2.056670986839242, 1.6218890235125192, 1.2662143962352723, 1.0897776402061674, 1.0141620045844448, 0.9263277597997985, 0.88354483218855, 0.8458290621667821, 0.8187657111136039, 0.8010108241819514, 0.7698756081474424, 0.7728334678209784, 0.7495658172592432, 0.7327025273236396, 0.7268706965109518, 0.7140237860171991, 0.7022979946074123, 0.6886732254156174, 0.689582080463802, 0.6764646803288805, 0.6629622706317032, 0.6636868165295436, 0.6665717764553251, 0.6523642893228643, 0.6472721827217554, 0.6396498275769936, 0.6314476659473978, 0.6237722062526079, 0.6354525456213129, 0.6258407986442789, 0.6189961265642189, 0.6101812562843623, 0.6050386322708241, 0.6063796040908205, 0.5976517280693366, 0.5910889159859982], "accuracy": [0.19997358322143555, 0.39004093408584595, 0.4876502454280853, 0.5672962665557861, 0.6153744459152222, 0.6445648074150085, 0.6705851554870605, 0.6844538450241089, 0.6955488324165344, 0.7051908373832703, 0.711530864238739, 0.7169462442398071, 0.7180029153823853, 0.7265883088111877, 0.7338528633117676, 0.7321357727050781, 0.7412495017051697, 0.739400327205658, 0.7452120184898376, 0.7456082701683044, 0.7549861073493958, 0.7568352818489075, 0.7523444890975952, 0.7497028112411499, 0.7585523724555969, 0.7588165402412415, 0.7592127919197083, 0.7687227725982666, 0.7626469135284424, 0.7613261342048645, 0.7631752490997314, 0.7684586048126221, 0.7718927264213562, 0.776251494884491, 0.7749306559562683, 0.7770439982414246, 0.7794214487075806], "val_loss": [1.8518338884626115, 1.5084427084241594, 1.0359586306980677, 0.8195615495954242, 0.7238567045756749, 0.683985812323434, 0.6341419560568673, 0.6237785986491612, 0.5897208963121686, 0.5790240594318935, 0.5721045732498169, 0.5562405245644706, 0.5335723161697388, 0.5317802599498204, 0.5332399266106742, 0.5136228629520961, 0.5168320451463971, 0.508475763457162, 0.5118705034255981, 0.5025594064167568, 0.4855632611683437, 0.4832373176302229, 0.4808037110737392, 0.480367762701852, 0.4813640798841204, 0.4712944030761719, 0.47057676315307617, 0.46620702743530273, 0.4696054458618164, 0.47228665011269705, 0.45955947467259, 0.456112265586853, 0.45423145805086407, 0.4479133827345712, 0.46040781906672884, 0.45452589648110525, 0.4507919294493539], "val_accuracy": [0.44333332777023315, 0.5633333325386047, 0.6516666412353516, 0.6949999928474426, 0.7173333168029785, 0.7236666679382324, 0.7329999804496765, 0.7333333492279053, 0.7536666393280029, 0.7486666440963745, 0.7450000047683716, 0.7593333125114441, 0.7766666412353516, 0.7853333353996277, 0.753000020980835, 0.7826666831970215, 0.7739999890327454, 0.7863333225250244, 0.7710000276565552, 0.7879999876022339, 0.7933333516120911, 0.8023333549499512, 0.7886666655540466, 0.7823333144187927, 0.7860000133514404, 0.8003333210945129, 0.8076666593551636, 0.8029999732971191, 0.7933333516120911, 0.7926666736602783, 0.8026666641235352, 0.8153333067893982, 0.8083333373069763, 0.8119999766349792, 0.8073333501815796, 0.8130000233650208, 0.8136666417121887]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 6, 2, 4, 4, 8, 5, 8, 0, 8, 2, 4, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [3, 41, 73, 59, 38, 45, 53, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7911428809165955, "mapping_values": [1, 30, 30, 22, 8, 3, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.math.pow(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))))))))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2570907882553883, 2.056670986839242, 1.6218890235125192, 1.2662143962352723, 1.0897776402061674, 1.0141620045844448, 0.9263277597997985, 0.88354483218855, 0.8458290621667821, 0.8187657111136039, 0.8010108241819514, 0.7698756081474424, 0.7728334678209784, 0.7495658172592432, 0.7327025273236396, 0.7268706965109518, 0.7140237860171991, 0.7022979946074123, 0.6886732254156174, 0.689582080463802, 0.6764646803288805, 0.6629622706317032, 0.6636868165295436, 0.6665717764553251, 0.6523642893228643, 0.6472721827217554, 0.6396498275769936, 0.6314476659473978, 0.6237722062526079, 0.6354525456213129, 0.6258407986442789, 0.6189961265642189, 0.6101812562843623, 0.6050386322708241, 0.6063796040908205, 0.5976517280693366, 0.5910889159859982], "accuracy": [0.19997358322143555, 0.39004093408584595, 0.4876502454280853, 0.5672962665557861, 0.6153744459152222, 0.6445648074150085, 0.6705851554870605, 0.6844538450241089, 0.6955488324165344, 0.7051908373832703, 0.711530864238739, 0.7169462442398071, 0.7180029153823853, 0.7265883088111877, 0.7338528633117676, 0.7321357727050781, 0.7412495017051697, 0.739400327205658, 0.7452120184898376, 0.7456082701683044, 0.7549861073493958, 0.7568352818489075, 0.7523444890975952, 0.7497028112411499, 0.7585523724555969, 0.7588165402412415, 0.7592127919197083, 0.7687227725982666, 0.7626469135284424, 0.7613261342048645, 0.7631752490997314, 0.7684586048126221, 0.7718927264213562, 0.776251494884491, 0.7749306559562683, 0.7770439982414246, 0.7794214487075806], "val_loss": [1.8518338884626115, 1.5084427084241594, 1.0359586306980677, 0.8195615495954242, 0.7238567045756749, 0.683985812323434, 0.6341419560568673, 0.6237785986491612, 0.5897208963121686, 0.5790240594318935, 0.5721045732498169, 0.5562405245644706, 0.5335723161697388, 0.5317802599498204, 0.5332399266106742, 0.5136228629520961, 0.5168320451463971, 0.508475763457162, 0.5118705034255981, 0.5025594064167568, 0.4855632611683437, 0.4832373176302229, 0.4808037110737392, 0.480367762701852, 0.4813640798841204, 0.4712944030761719, 0.47057676315307617, 0.46620702743530273, 0.4696054458618164, 0.47228665011269705, 0.45955947467259, 0.456112265586853, 0.45423145805086407, 0.4479133827345712, 0.46040781906672884, 0.45452589648110525, 0.4507919294493539], "val_accuracy": [0.44333332777023315, 0.5633333325386047, 0.6516666412353516, 0.6949999928474426, 0.7173333168029785, 0.7236666679382324, 0.7329999804496765, 0.7333333492279053, 0.7536666393280029, 0.7486666440963745, 0.7450000047683716, 0.7593333125114441, 0.7766666412353516, 0.7853333353996277, 0.753000020980835, 0.7826666831970215, 0.7739999890327454, 0.7863333225250244, 0.7710000276565552, 0.7879999876022339, 0.7933333516120911, 0.8023333549499512, 0.7886666655540466, 0.7823333144187927, 0.7860000133514404, 0.8003333210945129, 0.8076666593551636, 0.8029999732971191, 0.7933333516120911, 0.7926666736602783, 0.8026666641235352, 0.8153333067893982, 0.8083333373069763, 0.8119999766349792, 0.8073333501815796, 0.8130000233650208, 0.8136666417121887]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 1, 8, 4, 1, 2, 3, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 1, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7911428809165955, "mapping_values": [1, 20, 20, 12, 8, 1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.pow(tf.math.subtract(grad, tf.math.add(alpha, grad)), alpha)))), tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.negative(alpha), tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2570907882553883, 2.056670986839242, 1.6218890235125192, 1.2662143962352723, 1.0897776402061674, 1.0141620045844448, 0.9263277597997985, 0.88354483218855, 0.8458290621667821, 0.8187657111136039, 0.8010108241819514, 0.7698756081474424, 0.7728334678209784, 0.7495658172592432, 0.7327025273236396, 0.7268706965109518, 0.7140237860171991, 0.7022979946074123, 0.6886732254156174, 0.689582080463802, 0.6764646803288805, 0.6629622706317032, 0.6636868165295436, 0.6665717764553251, 0.6523642893228643, 0.6472721827217554, 0.6396498275769936, 0.6314476659473978, 0.6237722062526079, 0.6354525456213129, 0.6258407986442789, 0.6189961265642189, 0.6101812562843623, 0.6050386322708241, 0.6063796040908205, 0.5976517280693366, 0.5910889159859982], "accuracy": [0.19997358322143555, 0.39004093408584595, 0.4876502454280853, 0.5672962665557861, 0.6153744459152222, 0.6445648074150085, 0.6705851554870605, 0.6844538450241089, 0.6955488324165344, 0.7051908373832703, 0.711530864238739, 0.7169462442398071, 0.7180029153823853, 0.7265883088111877, 0.7338528633117676, 0.7321357727050781, 0.7412495017051697, 0.739400327205658, 0.7452120184898376, 0.7456082701683044, 0.7549861073493958, 0.7568352818489075, 0.7523444890975952, 0.7497028112411499, 0.7585523724555969, 0.7588165402412415, 0.7592127919197083, 0.7687227725982666, 0.7626469135284424, 0.7613261342048645, 0.7631752490997314, 0.7684586048126221, 0.7718927264213562, 0.776251494884491, 0.7749306559562683, 0.7770439982414246, 0.7794214487075806], "val_loss": [1.8518338884626115, 1.5084427084241594, 1.0359586306980677, 0.8195615495954242, 0.7238567045756749, 0.683985812323434, 0.6341419560568673, 0.6237785986491612, 0.5897208963121686, 0.5790240594318935, 0.5721045732498169, 0.5562405245644706, 0.5335723161697388, 0.5317802599498204, 0.5332399266106742, 0.5136228629520961, 0.5168320451463971, 0.508475763457162, 0.5118705034255981, 0.5025594064167568, 0.4855632611683437, 0.4832373176302229, 0.4808037110737392, 0.480367762701852, 0.4813640798841204, 0.4712944030761719, 0.47057676315307617, 0.46620702743530273, 0.4696054458618164, 0.47228665011269705, 0.45955947467259, 0.456112265586853, 0.45423145805086407, 0.4479133827345712, 0.46040781906672884, 0.45452589648110525, 0.4507919294493539], "val_accuracy": [0.44333332777023315, 0.5633333325386047, 0.6516666412353516, 0.6949999928474426, 0.7173333168029785, 0.7236666679382324, 0.7329999804496765, 0.7333333492279053, 0.7536666393280029, 0.7486666440963745, 0.7450000047683716, 0.7593333125114441, 0.7766666412353516, 0.7853333353996277, 0.753000020980835, 0.7826666831970215, 0.7739999890327454, 0.7863333225250244, 0.7710000276565552, 0.7879999876022339, 0.7933333516120911, 0.8023333549499512, 0.7886666655540466, 0.7823333144187927, 0.7860000133514404, 0.8003333210945129, 0.8076666593551636, 0.8029999732971191, 0.7933333516120911, 0.7926666736602783, 0.8026666641235352, 0.8153333067893982, 0.8083333373069763, 0.8119999766349792, 0.8073333501815796, 0.8130000233650208, 0.8136666417121887]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 73, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7911428809165955, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 8, 4, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2570907882553883, 2.056670986839242, 1.6218890235125192, 1.2662143962352723, 1.0897776402061674, 1.0141620045844448, 0.9263277597997985, 0.88354483218855, 0.8458290621667821, 0.8187657111136039, 0.8010108241819514, 0.7698756081474424, 0.7728334678209784, 0.7495658172592432, 0.7327025273236396, 0.7268706965109518, 0.7140237860171991, 0.7022979946074123, 0.6886732254156174, 0.689582080463802, 0.6764646803288805, 0.6629622706317032, 0.6636868165295436, 0.6665717764553251, 0.6523642893228643, 0.6472721827217554, 0.6396498275769936, 0.6314476659473978, 0.6237722062526079, 0.6354525456213129, 0.6258407986442789, 0.6189961265642189, 0.6101812562843623, 0.6050386322708241, 0.6063796040908205, 0.5976517280693366, 0.5910889159859982], "accuracy": [0.19997358322143555, 0.39004093408584595, 0.4876502454280853, 0.5672962665557861, 0.6153744459152222, 0.6445648074150085, 0.6705851554870605, 0.6844538450241089, 0.6955488324165344, 0.7051908373832703, 0.711530864238739, 0.7169462442398071, 0.7180029153823853, 0.7265883088111877, 0.7338528633117676, 0.7321357727050781, 0.7412495017051697, 0.739400327205658, 0.7452120184898376, 0.7456082701683044, 0.7549861073493958, 0.7568352818489075, 0.7523444890975952, 0.7497028112411499, 0.7585523724555969, 0.7588165402412415, 0.7592127919197083, 0.7687227725982666, 0.7626469135284424, 0.7613261342048645, 0.7631752490997314, 0.7684586048126221, 0.7718927264213562, 0.776251494884491, 0.7749306559562683, 0.7770439982414246, 0.7794214487075806], "val_loss": [1.8518338884626115, 1.5084427084241594, 1.0359586306980677, 0.8195615495954242, 0.7238567045756749, 0.683985812323434, 0.6341419560568673, 0.6237785986491612, 0.5897208963121686, 0.5790240594318935, 0.5721045732498169, 0.5562405245644706, 0.5335723161697388, 0.5317802599498204, 0.5332399266106742, 0.5136228629520961, 0.5168320451463971, 0.508475763457162, 0.5118705034255981, 0.5025594064167568, 0.4855632611683437, 0.4832373176302229, 0.4808037110737392, 0.480367762701852, 0.4813640798841204, 0.4712944030761719, 0.47057676315307617, 0.46620702743530273, 0.4696054458618164, 0.47228665011269705, 0.45955947467259, 0.456112265586853, 0.45423145805086407, 0.4479133827345712, 0.46040781906672884, 0.45452589648110525, 0.4507919294493539], "val_accuracy": [0.44333332777023315, 0.5633333325386047, 0.6516666412353516, 0.6949999928474426, 0.7173333168029785, 0.7236666679382324, 0.7329999804496765, 0.7333333492279053, 0.7536666393280029, 0.7486666440963745, 0.7450000047683716, 0.7593333125114441, 0.7766666412353516, 0.7853333353996277, 0.753000020980835, 0.7826666831970215, 0.7739999890327454, 0.7863333225250244, 0.7710000276565552, 0.7879999876022339, 0.7933333516120911, 0.8023333549499512, 0.7886666655540466, 0.7823333144187927, 0.7860000133514404, 0.8003333210945129, 0.8076666593551636, 0.8029999732971191, 0.7933333516120911, 0.7926666736602783, 0.8026666641235352, 0.8153333067893982, 0.8083333373069763, 0.8119999766349792, 0.8073333501815796, 0.8130000233650208, 0.8136666417121887]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 6, 4, 1, 8, 8, 0, 4, 9, 2, 2, 2, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 96, 93, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [31, 25, 50, 71, 34]], "fitness": -0.25514286756515503, "mapping_values": [1, 29, 29, 21, 8, 3, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(grad))), grad)), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), grad)))), grad))), tf.math.add(tf.math.add(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.441411976202714, 2.385663593009069, 2.649874310845539, 2.517048157374652, 2.3038070928686722, 2.303194524873092, 2.30306842572433, 2.3026690344217826], "accuracy": [0.1706511676311493, 0.1740853190422058, 0.14370624721050262, 0.11781799048185349, 0.1002509593963623, 0.09391097724437714, 0.09721305221319199, 0.09972262382507324], "val_loss": [1.9725373813084193, 3.8972195216587613, 2.7575014659336636, 1.9748543330601283, 1.9737903731209892, 1.9737202780587333, 1.9735653741019112, 1.9728025708879744], "val_accuracy": [0.1303333342075348, 0.14666666090488434, 0.2616666555404663, 0.09700000286102295, 0.09866666793823242, 0.09799999743700027, 0.10199999809265137, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 2, 4, 1, 2, 8, 0, 4, 9, 5, 1, 3, 8, 2, 3, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 72, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.25514286756515503, "mapping_values": [1, 37, 37, 24, 13, 5, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))))), alpha), tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(grad))), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(grad, grad))))))), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.441411976202714, 2.385663593009069, 2.649874310845539, 2.517048157374652, 2.3038070928686722, 2.303194524873092, 2.30306842572433, 2.3026690344217826], "accuracy": [0.1706511676311493, 0.1740853190422058, 0.14370624721050262, 0.11781799048185349, 0.1002509593963623, 0.09391097724437714, 0.09721305221319199, 0.09972262382507324], "val_loss": [1.9725373813084193, 3.8972195216587613, 2.7575014659336636, 1.9748543330601283, 1.9737903731209892, 1.9737202780587333, 1.9735653741019112, 1.9728025708879744], "val_accuracy": [0.1303333342075348, 0.14666666090488434, 0.2616666555404663, 0.09700000286102295, 0.09866666793823242, 0.09799999743700027, 0.10199999809265137, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 0, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 4, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07753269374370575, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 72, 73, 52, 8, 79, 86, 52, 44], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 9, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 1, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [3, 41, 73, 59, 38, 45, 53, 52, 44], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [7, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, beta), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0746268630027771, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 2, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [0, 2, 0, 0, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 25, 44], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [66], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 4, 13, 13, 6, 7, 3, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), beta)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08730682730674744, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 5, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 1, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 25, 44], [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 9, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [48, 33, 83, 82, 91, 78], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 2, 4, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 3, 2, 1, 1, 0, 10, 6, 4, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [5, 6, 0, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 0, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.divide_no_nan(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10698718577623367, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [17, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 8, 4, 4, 3, 1, 1, 0, 0, 6, 4, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [13, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 8, 4, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [0, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 5, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.05485714226961136, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.multiply(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.302269507959739, 2.3011410204867615, 2.3032447592677725, 2.302138734062224, 2.3029547238063346, 2.3032262476128893, 2.3013795105819894, 2.301111169101351, 2.301240158276299, 2.3015329087682765, 2.3006117667000545, 2.3012612369538865, 2.3022785769981433, 2.3012544156506456, 2.301630240011965, 2.3023956257826805, 2.3011564612624795, 2.301156388014346, 2.3010269808904638, 2.3012974610528327, 2.3019678393028764, 2.3012806270825092, 2.301781445320461, 2.3001054364928573, 2.301541444348653, 2.3003807422145166, 2.3017895835785267, 2.3013802211770544, 2.299509455074078, 2.3022133809637477, 2.301077525597742, 2.3008058223867964, 2.3002350732808132, 2.3017079102097093, 2.3015042757077886, 2.3011740456325285, 2.3010591642180485, 2.3005031894431407, 2.3009870365358474, 2.300382114404606, 2.301918096451664, 2.3003442864360717, 2.299665688649617, 2.3002019895302417, 2.3019864767959106, 2.300625958887971, 2.3009370267666753, 2.2993206308659877, 2.302528308729344, 2.2998665237565317, 2.3012439770044164, 2.3011150275711465, 2.300736976227252, 2.301727508147631, 2.3007102515546007, 2.2998221500627496, 2.2997568830790662, 2.2999426956426166, 2.2995002316666504, 2.2998282215331036, 2.30019548102739], "accuracy": [0.09087307006120682, 0.09377889335155487, 0.0878351628780365, 0.09206181764602661, 0.08479725569486618, 0.08189142495393753, 0.09008057415485382, 0.09192973375320435, 0.09668471664190292, 0.09259014576673508, 0.09787346422672272, 0.09694888442754745, 0.09140139818191528, 0.09206181764602661, 0.08889182657003403, 0.09100515395402908, 0.09245806187391281, 0.09113723784685135, 0.09034473448991776, 0.0944393053650856, 0.0944393053650856, 0.09100515395402908, 0.09113723784685135, 0.09708096832036972, 0.09047681838274002, 0.09549596905708313, 0.08915598690509796, 0.09219389408826828, 0.09047681838274002, 0.0956280529499054, 0.09351472556591034, 0.09615638852119446, 0.09377889335155487, 0.08889182657003403, 0.09192973375320435, 0.09549596905708313, 0.09285431355237961, 0.09087307006120682, 0.09747721254825592, 0.0944393053650856, 0.08545766770839691, 0.09774138033390045, 0.0948355570435524, 0.09470347315073013, 0.09179764986038208, 0.09391097724437714, 0.09377889335155487, 0.0944393053650856, 0.09087307006120682, 0.09509972482919693, 0.09893012791872025, 0.09034473448991776, 0.10117553919553757, 0.09232597798109055, 0.09496764093637466, 0.09985470771789551, 0.09589222073554993, 0.09787346422672272, 0.09760929644107819, 0.09140139818191528, 0.09866596013307571], "val_loss": [1.9705446107046944, 1.9705024446759904, 1.9704486301967077, 1.970400060926165, 1.970355442592076, 1.9703078951154436, 1.970268658229283, 1.9702230181012834, 1.9701770373753138, 1.9701316697256905, 1.9701004709516252, 1.9700512204851424, 1.9700066702706474, 1.9699684551783971, 1.969933305467878, 1.9698969977242606, 1.9698655945914132, 1.9698398453848702, 1.969808646610805, 1.969782488686698, 1.9697537422180176, 1.969724450792585, 1.9696916852678572, 1.969662870679583, 1.9696294920785087, 1.9696011543273926, 1.9695696830749512, 1.969541277204241, 1.9695185933794295, 1.9694841929844447, 1.969461100442069, 1.9694367136274065, 1.9694196156093053, 1.969395569392613, 1.9693762915475028, 1.9693608283996582, 1.9693433897835868, 1.9693243844168526, 1.9693071501595634, 1.9692937987191337, 1.9692676407950265, 1.9692531313214983, 1.9692418234688895, 1.9692305156162806, 1.969216755458287, 1.9691986356462752, 1.969186510358538, 1.9691784722464425, 1.9691525186811174, 1.9691376004900252, 1.9691222735813685, 1.9691175052097865, 1.9691081728254045, 1.9690894399370467, 1.9690738405500139, 1.9690636226109095, 1.9690525872366769, 1.96905551637922, 1.969057219369071, 1.9690487725394112, 1.9690427098955428], "val_accuracy": [0.03966666758060455, 0.03933333232998848, 0.03933333232998848, 0.03999999910593033, 0.0416666679084301, 0.0416666679084301, 0.04233333468437195, 0.0430000014603138, 0.04399999976158142, 0.04466666653752327, 0.04500000178813934, 0.045666664838790894, 0.04600000008940697, 0.04633333161473274, 0.04633333161473274, 0.046666666865348816, 0.04699999839067459, 0.04600000008940697, 0.04699999839067459, 0.047333333641290665, 0.04766666516661644, 0.04766666516661644, 0.04833333194255829, 0.04800000041723251, 0.04800000041723251, 0.04800000041723251, 0.04866666719317436, 0.04899999871850014, 0.04899999871850014, 0.049666665494441986, 0.049666665494441986, 0.05000000074505806, 0.05000000074505806, 0.050333332270383835, 0.05133333429694176, 0.052000001072883606, 0.052000001072883606, 0.052666667848825455, 0.052666667848825455, 0.05299999937415123, 0.05299999937415123, 0.05400000140070915, 0.05400000140070915, 0.054666668176651, 0.05433333292603493, 0.05433333292603493, 0.054666668176651, 0.05533333495259285, 0.055666666477918625, 0.055666666477918625, 0.0560000017285347, 0.055666666477918625, 0.05666666850447655, 0.05700000002980232, 0.05700000002980232, 0.05766666680574417, 0.05766666680574417, 0.05766666680574417, 0.0573333315551281, 0.05700000002980232, 0.05666666850447655]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 6, 2, 4, 4, 8, 5, 8, 0, 8, 2, 4, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3022915937519186, 2.3012120637124034, 2.3033884695539575, 2.3023513343434656, 2.303217176527568, 2.3035560393015375], "accuracy": [0.09100515395402908, 0.0936468094587326, 0.08757099509239197, 0.09166556596755981, 0.08519349992275238, 0.08096684515476227], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [3, 41, 73, 59, 38, 20, 53, 52, 44], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [66], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(sigma))", "other_info": {"loss": [2.3022915937519186, 2.3012120637124034, 2.3033884695539575, 2.3023513343434656, 2.303217176527568, 2.3035560393015375], "accuracy": [0.09100515395402908, 0.0936468094587326, 0.08757099509239197, 0.09166556596755981, 0.08519349992275238, 0.08096684515476227], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 1, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 9, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3022915937519186, 2.3012120637124034, 2.3033884695539575, 2.3023513343434656, 2.303217176527568, 2.3035560393015375], "accuracy": [0.09100515395402908, 0.0936468094587326, 0.08757099509239197, 0.09166556596755981, 0.08519349992275238, 0.08096684515476227], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 6, 2, 4, 4, 8, 5, 8, 0, 8, 2, 4, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 1, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [3, 41, 73, 59, 38, 45, 53, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 9, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03828571364283562, "mapping_values": [1, 30, 30, 22, 8, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.square(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.math.add(grad, tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.3041194573904877, 2.3215598099267303, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08691058307886124, 0.07792893797159195, 0.09232597798109055, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9771639960152763, 2.0211819240025113, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02566666714847088, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]