[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.7968571186065674, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 3, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))), tf.math.add(tf.math.add(beta, beta), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.182423423609131, 1.4897613785349069, 1.1674721846097433, 0.9808307636635981, 0.9461468878265984, 0.8357493859618458, 0.8203334016980055, 0.7569386332325727, 0.7423868542885217, 0.7203507494334421, 0.7206133563032617, 0.672716614033615, 0.6675211141106633, 0.6640840776371933, 0.669061265522699, 0.6649031131463736, 0.6277209077025008, 0.6310093188566098, 0.6194448737404712, 0.6152015448703018, 0.6161412762187932, 0.5991241551503655, 0.5963639218289822, 0.5777235924528417, 0.5774228069146453, 0.574844500636223, 0.5819161308754893, 0.5565995707125821], "accuracy": [0.27024170756340027, 0.5090476870536804, 0.5900145173072815, 0.6448289752006531, 0.653150200843811, 0.7038700580596924, 0.6991150379180908, 0.7205125093460083, 0.724210798740387, 0.7354378700256348, 0.735569953918457, 0.7508915662765503, 0.7512878179550171, 0.7530049085617065, 0.750759482383728, 0.7510236501693726, 0.7655527591705322, 0.7667415142059326, 0.7685906887054443, 0.7689869403839111, 0.76542067527771, 0.7757231593132019, 0.7759873270988464, 0.7847048044204712, 0.7865539789199829, 0.7860256433486938, 0.7803460359573364, 0.7938185334205627], "val_loss": [1.525216749736241, 0.9444525241851807, 0.8039272853306362, 0.6543967723846436, 0.7156991618020194, 0.6228362151554653, 0.5811035462788173, 0.5524027517863682, 0.6160969734191895, 0.5536842346191406, 0.5231985534940448, 0.5097789594105312, 0.5182756526129586, 0.5552865266799927, 0.5134259462356567, 0.4926384006227766, 0.47081669739314486, 0.4828662702015468, 0.46387599195752827, 0.4722099644797189, 0.47079001154218403, 0.47291224343436106, 0.4396378993988037, 0.451035737991333, 0.4482418554169791, 0.4611168248312814, 0.4466546518462045, 0.44312541825430735], "val_accuracy": [0.5789999961853027, 0.637333333492279, 0.6586666703224182, 0.7243333458900452, 0.6706666946411133, 0.7173333168029785, 0.7523333430290222, 0.7403333187103271, 0.7283333539962769, 0.746666669845581, 0.7710000276565552, 0.7776666879653931, 0.7573333382606506, 0.7266666889190674, 0.7670000195503235, 0.7770000100135803, 0.7913333177566528, 0.7893333435058594, 0.8003333210945129, 0.7923333048820496, 0.7990000247955322, 0.7796666622161865, 0.8209999799728394, 0.7933333516120911, 0.8176666498184204, 0.7956666946411133, 0.8073333501815796, 0.8076666593551636]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 2, 3, 8, 3, 4, 6, 6, 9, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0, 4, 2], [42, 64, 99, 21, 43, 78, 33, 29], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 2, 3, 6, 9], [3, 3, 1, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.29171428084373474, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 3, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(sigma, sigma), alpha)", "other_info": {"loss": [5.344482600555097, 2.30370775076534, 2.3339366923548748, 2.2474837720260297, 2.1938805210591936, 2.4131719079141716, 2.306429118307716, 2.3031469362601786, 2.303142586876735], "accuracy": [0.14978206157684326, 0.10606260597705841, 0.1562541276216507, 0.15334829688072205, 0.19931316375732422, 0.148064985871315, 0.09985470771789551, 0.1010434553027153, 0.09470347315073013], "val_loss": [1.9806481088910783, 1.9488684109279089, 1.9725263459341866, 1.5244701249258858, 1.7109431879861015, 1.9777116775512695, 1.9739411217825753, 1.973691190992083, 1.9735946655273438], "val_accuracy": [0.09966666996479034, 0.20933333039283752, 0.09966666996479034, 0.36666667461395264, 0.32233333587646484, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [3, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [5, 8, 3, 4, 6, 4, 6, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 0, 0, 2, 1, 3, 0, 0], [42, 34, 99, 54, 1, 78], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 2, 3, 6, 9], [3, 3, 1, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.29171428084373474, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 6, 6, 4, 3, 1, 0, 5, 2, 3, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), sigma)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(sigma, sigma), alpha)", "other_info": {"loss": [5.344482600555097, 2.30370775076534, 2.3339366923548748, 2.2474837720260297, 2.1938805210591936, 2.4131719079141716, 2.306429118307716, 2.3031469362601786, 2.303142586876735], "accuracy": [0.14978206157684326, 0.10606260597705841, 0.1562541276216507, 0.15334829688072205, 0.19931316375732422, 0.148064985871315, 0.09985470771789551, 0.1010434553027153, 0.09470347315073013], "val_loss": [1.9806481088910783, 1.9488684109279089, 1.9725263459341866, 1.5244701249258858, 1.7109431879861015, 1.9777116775512695, 1.9739411217825753, 1.973691190992083, 1.9735946655273438], "val_accuracy": [0.09966666996479034, 0.20933333039283752, 0.09966666996479034, 0.36666667461395264, 0.32233333587646484, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 9, 3, 4, 1, 4, 6, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0], [26, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 0, 0, 0], [9, 3, 0], [4, 3], [55], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 2, 3, 6, 9], [3, 3, 1, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.29171428084373474, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 1, 1, 0, 1, 5, 2, 3, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(sigma, sigma), alpha)", "other_info": {"loss": [5.344482600555097, 2.30370775076534, 2.3339366923548748, 2.2474837720260297, 2.1938805210591936, 2.4131719079141716, 2.306429118307716, 2.3031469362601786, 2.303142586876735], "accuracy": [0.14978206157684326, 0.10606260597705841, 0.1562541276216507, 0.15334829688072205, 0.19931316375732422, 0.148064985871315, 0.09985470771789551, 0.1010434553027153, 0.09470347315073013], "val_loss": [1.9806481088910783, 1.9488684109279089, 1.9725263459341866, 1.5244701249258858, 1.7109431879861015, 1.9777116775512695, 1.9739411217825753, 1.973691190992083, 1.9735946655273438], "val_accuracy": [0.09966666996479034, 0.20933333039283752, 0.09966666996479034, 0.36666667461395264, 0.32233333587646484, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 3, 4, 6, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 1, 0, 0, 2, 2, 3, 0, 0], [75, 4, 99, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [3, 3, 3, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.1274285763502121, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, sigma), sigma)", "other_info": {"loss": [4.481103488845029, 2.312444982779355, 2.3103204152335612, 2.303529720107373, 2.303227594830593, 2.303112129540948, 2.3030234329484127, 2.3031266264675505, 2.303094049911489, 2.303203720883324], "accuracy": [0.15189538896083832, 0.10130762308835983, 0.09906221181154251, 0.09694888442754745, 0.09681680053472519, 0.09509972482919693, 0.10196803510189056, 0.0940430611371994, 0.09800554811954498, 0.0956280529499054], "val_loss": [1.9891366277422224, 1.9766040529523576, 1.9744298117501395, 1.9740571294512068, 1.9736364228384835, 1.9736615589686803, 1.9736110823495048, 1.9736554963248116, 1.9737300872802734, 1.9736078126089913], "val_accuracy": [0.09966666996479034, 0.0976666659116745, 0.0976666659116745, 0.09833333641290665, 0.10400000214576721, 0.0976666659116745, 0.10400000214576721, 0.09966666996479034, 0.09733333438634872, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [8, 9, 3, 4, 1, 4, 6, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 0, 0, 0, 0, 2, 3, 0, 0, 0, 3], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [6, 1, 2, 3, 6, 9], [0, 3, 1, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.11942857503890991, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma), alpha)", "other_info": {"loss": [2.3086889974611112e+23, 2.6515319038201023e+23, 2.7204151524770515e+23, 2.667248648126762e+23, 2.7576744868134727e+23, 2.7710390207480434e+23], "accuracy": [0.09232597798109055, 0.09391097724437714, 0.0940430611371994, 0.09338264167308807, 0.09166556596755981, 0.09655263274908066], "val_loss": [1.960084886694992e+23, 1.9731396124765537e+23, 1.9856158701871205e+23, 1.996554212962078e+23, 2.0054408701559357e+23, 2.01344811588427e+23], "val_accuracy": [0.11733333021402359, 0.11699999868869781, 0.11666666716337204, 0.11633333563804626, 0.11666666716337204, 0.11633333563804626]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [8, 8, 3, 4, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 3, 3, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 11, 10, 4, 1, 1, 0, 1, 0, 7, 3, 4, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))), tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, sigma), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [545207885426.51996, 2.3275385040569896, 2.3288227975518083, 2.330053168328179, 2.33142966339853, 2.332875721206786], "accuracy": [0.09311848133802414, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9944349016462053, 1.995497362954276, 1.9965468815394811, 1.997720514025007, 1.998917579650879, 2.0002173696245467], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 3, 4, 6, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 1, 0, 0, 2, 2, 3, 0, 0], [75, 66, 99, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [2, 3, 3, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), beta))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, sigma), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [1, 2, 3, 4, 6, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 0, 0, 0, 2, 0, 0, 0, 0, 3], [42, 47, 99, 84, 1, 78, 75], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 2, 3, 6, 9], [3, 1, 1, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 11, 12, 7, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad))))), tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), beta), tf.math.add(beta, tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(sigma), alpha)", "other_info": {"loss": [2.4242299043888455e+30, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1406683325767517, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0], [9, 3, 3, 4, 5, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [0, 3, 0, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 2, 4, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 83, 99, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [9, 3, 2, 3, 6, 9], [3, 3, 3, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3019833450130958, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 3, 4, 6, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 1, 1, 2, 2, 3, 2, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [1, 9, 2, 3, 6, 9], [3, 3, 3, 0, 3, 2, 1], [70, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 1, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), beta))), tf.math.add(beta, beta)))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.3019833450130958, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], [2, 8, 6, 6, 0, 3, 4, 1, 5, 6, 0, 4, 8, 2, 8, 8, 0, 6, 7, 9, 1, 0], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50, 21, 94, 33, 71], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 3, 3, 4, 5, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 1, 0, 0, 2, 2, 3, 0, 0], [42, 64, 99, 84, 1, 78, 56, 63], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 2, 3, 6, 9], [3, 3, 1, 0, 3, 2, 1], [3, 47, 46, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 34, 34, 22, 12, 7, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(sigma, sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 1, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0, 1], [0, 0, 1], [3, 3, 0], [4, 3], [], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 4, 2, 3, 2, 9], [0, 3, 1, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3019833450130958, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0], [3, 3, 3, 4, 5, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0], [42, 64, 99, 84, 1, 78, 56, 63], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 2, 3, 6, 9], [3, 0, 1, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 22, 22, 12, 10, 7, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08149518072605133, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 3, 3, 4, 5, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07013604789972305, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 0, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0], [5, 8, 3, 4, 6, 3, 0, 6, 2, 5, 9, 9, 8, 1, 1, 8, 9, 0], [1, 2, 1, 0, 0, 2, 2, 1, 0, 0], [42, 34, 99, 84, 1, 78], [0, 0, 0, 1, 1, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 6, 2, 3, 6, 9], [3, 3, 2, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 0, 17, 17, 12, 5, 4, 5, 3, 2, 1, 0, 5, 2, 3, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.divide_no_nan(sigma, sigma), beta)", "other_info": {"loss": [2.3027756543223097, 2.3015487726259667, 2.303850200969498, 2.301071928539737, 2.30048342381549, 2.3013111961799573], "accuracy": [0.09391097724437714, 0.09259014576673508, 0.08955223858356476, 0.09576013684272766, 0.09126931428909302, 0.09298639744520187], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 1, 4, 9, 6, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 1, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 1, 2, 3, 6, 9], [3, 0, 1, 3, 3, 2, 1], [13, 47, 50, 41, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3027756543223097, 2.3015487726259667, 2.303850200969498, 2.301071928539737, 2.30048342381549, 2.3013111961799573], "accuracy": [0.09391097724437714, 0.09259014576673508, 0.08955223858356476, 0.09576013684272766, 0.09126931428909302, 0.09298639744520187], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 0, 6, 6, 0, 3, 4, 1, 5], [3, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 3, 4, 6, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 1, 0, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [1, 3], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [3, 9, 2, 3, 6, 9], [1, 3, 3, 0, 3, 2, 1], [3, 47, 46, 41, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.square(alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.3027756543223097, 2.3015487726259667, 2.303850200969498, 2.301071928539737, 2.30048342381549, 2.3013111961799573], "accuracy": [0.09391097724437714, 0.09259014576673508, 0.08955223858356476, 0.09576013684272766, 0.09126931428909302, 0.09298639744520187], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 2, 3, 4, 1, 4, 6, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0], [68, 47, 99, 84, 1, 78], [0, 1, 1, 1, 1, 1], [0, 0, 1, 0], [3, 3, 2], [4, 3], [], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 4, 2, 3, 6, 9], [3, 3, 0, 0, 3, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 11, 10, 5, 3, 1, 1, 0, 0, 3, 1, 2, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, sigma)", "other_info": {"loss": [2.3027756543223097, 2.3015487726259667, 2.303850200969498, 2.301071928539737, 2.30048342381549, 2.3013111961799573], "accuracy": [0.09391097724437714, 0.09259014576673508, 0.08955223858356476, 0.09576013684272766, 0.09126931428909302, 0.09298639744520187], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]