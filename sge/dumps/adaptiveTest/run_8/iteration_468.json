[{"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 2, 4, 1, 5, 6, 1, 8], [2, 2, 0, 0, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [24, 89, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [68, 25, 50, 71, 34]], "fitness": -0.7605714201927185, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.282703581361439, 2.2307563285943526, 2.1474004080896725, 2.0008279896683114, 1.7950306377233278, 1.5640879355999835, 1.378126690432128, 1.2513277232292668, 1.1483201814475643, 1.1014364094797804, 1.0371300778085404, 0.9881360447559501, 0.9616507542068775, 0.9410513646220644, 0.910586287182997, 0.8841362956524084, 0.8651255835017445, 0.8449662896100761, 0.8477612671646161, 0.816812861919907, 0.8099608364169466, 0.8017983027594736, 0.7987074319712631, 0.7813135493133897, 0.7714834377325096, 0.7642410622060637, 0.7632853867922319, 0.7458904783534588, 0.7557569618206833, 0.7376779830057418, 0.7292480040235826, 0.723756669015145, 0.7127911167106357, 0.7031506588509085, 0.7045442252001034], "accuracy": [0.14397041499614716, 0.2534671723842621, 0.34486857056617737, 0.41262713074684143, 0.450931191444397, 0.5075947642326355, 0.5414080023765564, 0.5757495760917664, 0.6107515692710876, 0.6160348653793335, 0.6330735683441162, 0.6513010263442993, 0.656980574131012, 0.6646413803100586, 0.6695284843444824, 0.6857746839523315, 0.6897371411323547, 0.6972658634185791, 0.6954167485237122, 0.7073041796684265, 0.7066437602043152, 0.7096816897392273, 0.7092854380607605, 0.715889573097229, 0.7187954187393188, 0.7181349992752075, 0.7238145470619202, 0.7232862114906311, 0.7271166443824768, 0.7284374833106995, 0.7378153204917908, 0.7334566116333008, 0.7434949278831482, 0.7441553473472595, 0.7453441023826599], "val_loss": [1.9244706971304757, 1.8623305729457311, 1.7536698750087194, 1.5705972058432442, 1.3353925773075648, 1.1172394752502441, 0.9609528269086566, 0.8621488639286586, 0.794822233063834, 0.744823864528111, 0.7126783984048026, 0.6877081734793526, 0.6598858492715018, 0.6401530504226685, 0.6238824810300555, 0.619505763053894, 0.5990758963993618, 0.5906686953135899, 0.5822928292410714, 0.5790614570890155, 0.5706829173224313, 0.5599382604871478, 0.5538407053266253, 0.5499803168433053, 0.543300884110587, 0.5386603730065482, 0.5410956144332886, 0.5272304500852313, 0.5264538867133004, 0.5191362074443272, 0.5138817174094064, 0.5155745233808245, 0.510394981929234, 0.5053969962256295, 0.5058281081063407], "val_accuracy": [0.36800000071525574, 0.44966667890548706, 0.5133333206176758, 0.5669999718666077, 0.5923333168029785, 0.6316666603088379, 0.6683333516120911, 0.6893333196640015, 0.6936666369438171, 0.7039999961853027, 0.7059999704360962, 0.721666693687439, 0.7269999980926514, 0.737666666507721, 0.7413333058357239, 0.750333309173584, 0.7513333559036255, 0.7549999952316284, 0.7566666603088379, 0.7536666393280029, 0.762666642665863, 0.7666666507720947, 0.7716666460037231, 0.7663333415985107, 0.7726666927337646, 0.7789999842643738, 0.7689999938011169, 0.778333306312561, 0.7773333191871643, 0.7863333225250244, 0.7850000262260437, 0.784333348274231, 0.7856666445732117, 0.7846666574478149, 0.7863333225250244]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 1, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [84, 89, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7422857284545898, "mapping_values": [1, 16, 16, 10, 6, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.1416093539788563, 1.7676387268082026, 1.3112133668791963, 1.0877425892241894, 0.9439824772485731, 0.826720172576995, 0.7746711858527189, 0.7595050744864887, 0.6834379734773803, 0.7085733953452523], "accuracy": [0.30458328127861023, 0.43230748176574707, 0.5370492935180664, 0.617751955986023, 0.6596222519874573, 0.6913221478462219, 0.7096816897392273, 0.7129837274551392, 0.7448157668113708, 0.7351737022399902], "val_loss": [1.6030553068433488, 0.8543483529772077, 1.0972386768886022, 0.8432337897164481, 0.5849581105368478, 0.5742098774228778, 0.5983598232269287, 0.5907097033091954, 0.5616400071552822, 0.5869285719735282], "val_accuracy": [0.42399999499320984, 0.6370000243186951, 0.5400000214576721, 0.5976666808128357, 0.7476666569709778, 0.7423333525657654, 0.7223333120346069, 0.7203333377838135, 0.7363333106040955, 0.7283333539962769]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [3, 4, 6, 6, 5, 3, 2, 1, 9, 6, 1, 8, 2], [2, 3, 0, 0, 2, 0, 1, 0, 0, 0, 0, 3, 2, 2], [84, 89, 68, 73, 46, 23, 55], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 1, 0, 0], [1, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7422857284545898, "mapping_values": [1, 23, 23, 13, 10, 7, 1, 1, 0, 1, 0, 6, 4, 3, 1, 0, 5, 2, 3, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), alpha)))))))), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.negative(sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.1416093539788563, 1.7676387268082026, 1.3112133668791963, 1.0877425892241894, 0.9439824772485731, 0.826720172576995, 0.7746711858527189, 0.7595050744864887, 0.6834379734773803, 0.7085733953452523], "accuracy": [0.30458328127861023, 0.43230748176574707, 0.5370492935180664, 0.617751955986023, 0.6596222519874573, 0.6913221478462219, 0.7096816897392273, 0.7129837274551392, 0.7448157668113708, 0.7351737022399902], "val_loss": [1.6030553068433488, 0.8543483529772077, 1.0972386768886022, 0.8432337897164481, 0.5849581105368478, 0.5742098774228778, 0.5983598232269287, 0.5907097033091954, 0.5616400071552822, 0.5869285719735282], "val_accuracy": [0.42399999499320984, 0.6370000243186951, 0.5400000214576721, 0.5976666808128357, 0.7476666569709778, 0.7423333525657654, 0.7223333120346069, 0.7203333377838135, 0.7363333106040955, 0.7283333539962769]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 6, 6, 5, 0, 8, 2, 5, 5, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 89, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [1, 7], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7422857284545898, "mapping_values": [1, 16, 16, 10, 6, 3, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.1416093539788563, 1.7676387268082026, 1.3112133668791963, 1.0877425892241894, 0.9439824772485731, 0.826720172576995, 0.7746711858527189, 0.7595050744864887, 0.6834379734773803, 0.7085733953452523], "accuracy": [0.30458328127861023, 0.43230748176574707, 0.5370492935180664, 0.617751955986023, 0.6596222519874573, 0.6913221478462219, 0.7096816897392273, 0.7129837274551392, 0.7448157668113708, 0.7351737022399902], "val_loss": [1.6030553068433488, 0.8543483529772077, 1.0972386768886022, 0.8432337897164481, 0.5849581105368478, 0.5742098774228778, 0.5983598232269287, 0.5907097033091954, 0.5616400071552822, 0.5869285719735282], "val_accuracy": [0.42399999499320984, 0.6370000243186951, 0.5400000214576721, 0.5976666808128357, 0.7476666569709778, 0.7423333525657654, 0.7223333120346069, 0.7203333377838135, 0.7363333106040955, 0.7283333539962769]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [2, 9, 6, 6, 2, 3, 8, 1, 5, 6, 1, 8], [2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 2, 2], [82, 89, 94, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [1, 7], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7422857284545898, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.1416093539788563, 1.7676387268082026, 1.3112133668791963, 1.0877425892241894, 0.9439824772485731, 0.826720172576995, 0.7746711858527189, 0.7595050744864887, 0.6834379734773803, 0.7085733953452523], "accuracy": [0.30458328127861023, 0.43230748176574707, 0.5370492935180664, 0.617751955986023, 0.6596222519874573, 0.6913221478462219, 0.7096816897392273, 0.7129837274551392, 0.7448157668113708, 0.7351737022399902], "val_loss": [1.6030553068433488, 0.8543483529772077, 1.0972386768886022, 0.8432337897164481, 0.5849581105368478, 0.5742098774228778, 0.5983598232269287, 0.5907097033091954, 0.5616400071552822, 0.5869285719735282], "val_accuracy": [0.42399999499320984, 0.6370000243186951, 0.5400000214576721, 0.5976666808128357, 0.7476666569709778, 0.7423333525657654, 0.7223333120346069, 0.7203333377838135, 0.7363333106040955, 0.7283333539962769]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 2, 0, 3, 4, 1, 0, 6, 1, 8], [2, 1, 0, 0, 2, 1, 2, 2, 0, 0, 0, 3, 2, 2], [24, 51, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [79, 25, 50, 71, 34]], "fitness": -0.7031428813934326, "mapping_values": [1, 15, 15, 9, 6, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(grad))))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3000893769184234, 2.2960169318172325, 2.290281292595773, 2.2837076047628533, 2.28042649356775, 2.272891730806217, 2.2695147099984303, 2.2616819497726817, 2.255428710744019, 2.251442195685501, 2.244134109128247, 2.2369267771414414, 2.2300274905243946, 2.2241125806542184, 2.2158272414080864, 2.2063945246693826, 2.197563495429405, 2.1877105804781447, 2.182758307963976, 2.1695746364626256, 2.1563033167995624, 2.1451854753362, 2.1350653184450628, 2.119160239691149, 2.1020023253111715, 2.0866320140137256, 2.072525577774421, 2.052869680078668, 2.0377984472379835, 2.017602593245964, 1.994640465315543, 1.9722003356073008, 1.953745290540575, 1.9238428625180626, 1.899635921206693, 1.8804067452160784, 1.8493165292004237, 1.8300825752964456, 1.8016695032943557, 1.7711265132947132, 1.7554846402282775, 1.7145499400395947, 1.688579884675736, 1.6664340125728734, 1.6357059631806166, 1.6078879097118637, 1.5903917286358553, 1.5608651822253525, 1.540537758116646, 1.5188043486125686, 1.4958699294022124, 1.4716336735644913, 1.4458904438298439, 1.435752186808588, 1.4140130411033949, 1.3975182705551579, 1.3846500233384549, 1.36274209647304, 1.347683145306791, 1.3317942631132866, 1.310766392679357, 1.3075119611404795, 1.2900308644404705, 1.278129494815313, 1.2490239540316, 1.2541988748270272, 1.2405280838742028, 1.2214327338443787, 1.2246282870003324, 1.2082710079528935, 1.1912946466284184, 1.1888709007678109, 1.1729623354216607, 1.1562048387313326, 1.1555693929284523, 1.1499234310876203, 1.1259526560697353, 1.1394704767363717, 1.1241087776054843, 1.1169755400888295, 1.1142395352328442, 1.0959922685882655, 1.1025648241140082, 1.0893600094886804, 1.0831833815829723, 1.0662037706047616, 1.0707829340085881, 1.0655360023311857, 1.0525107437262777, 1.0499732587095327, 1.0477353567775403, 1.0397340926700784, 1.0479506513682244, 1.0273110974482131, 1.0361135705996498, 1.0203201346755768, 1.0216504405313527, 1.0110663390666612, 1.0026632361424015, 1.0036334934456317], "accuracy": [0.09457138925790787, 0.1072513535618782, 0.12151630967855453, 0.13829085230827332, 0.15189538896083832, 0.16642451286315918, 0.1748778223991394, 0.19693566858768463, 0.22137102484703064, 0.2226918488740921, 0.23854179680347443, 0.2479196935892105, 0.25716549158096313, 0.2646942138671875, 0.28463876247406006, 0.29745081067085266, 0.313300758600235, 0.3203011453151703, 0.32043322920799255, 0.33403778076171875, 0.3403777480125427, 0.3529256284236908, 0.3475102484226227, 0.36785101890563965, 0.3755118250846863, 0.390569269657135, 0.38766345381736755, 0.40364548563957214, 0.3980979919433594, 0.413419634103775, 0.4205521047115326, 0.428609162569046, 0.4275524914264679, 0.4423457980155945, 0.4352133274078369, 0.4431383013725281, 0.4505349397659302, 0.45568618178367615, 0.4558182656764984, 0.472989022731781, 0.46189406514167786, 0.47404569387435913, 0.48751816153526306, 0.4865935742855072, 0.49570730328559875, 0.4974243938922882, 0.4908202290534973, 0.509311854839325, 0.5155197381973267, 0.5037643909454346, 0.5184255838394165, 0.5237088799476624, 0.5373134613037109, 0.5344076156616211, 0.5279355645179749, 0.5396909117698669, 0.5387663245201111, 0.54655921459198, 0.5521067380905151, 0.5513142347335815, 0.5569937825202942, 0.55791836977005, 0.5601637959480286, 0.5672962665557861, 0.5723153948783875, 0.5741645693778992, 0.5761458277702332, 0.5762779116630554, 0.5768062472343445, 0.5840708017349243, 0.5904107689857483, 0.589750349521637, 0.5968828201293945, 0.5999207496643066, 0.6004490852355957, 0.6003170013427734, 0.6067890524864197, 0.604939877986908, 0.6111478209495544, 0.6135252714157104, 0.6140536069869995, 0.6160348653793335, 0.6159027814865112, 0.6218464970588684, 0.6205257177352905, 0.629507303237915, 0.6232994198799133, 0.6198652982711792, 0.6390172839164734, 0.627129852771759, 0.63096022605896, 0.6383568644523621, 0.6292431354522705, 0.637432336807251, 0.6343944072723389, 0.643772304058075, 0.6424514651298523, 0.6452252268791199, 0.6536785364151001, 0.6464139223098755], "val_loss": [1.965482439313616, 1.9604579380580358, 1.9554687908717565, 1.9504284177507674, 1.9453910418919154, 1.9402121816362654, 1.9349330493382044, 1.9294915199279785, 1.9238040787833077, 1.9180024691990443, 1.9118546077183314, 1.9053851536342077, 1.8985671997070312, 1.891409465244838, 1.8837897436959403, 1.875753538949149, 1.8671540532793318, 1.8579607009887695, 1.8482396262032645, 1.837756974356515, 1.8264553206307548, 1.814467225755964, 1.8017798832484655, 1.7881031717572893, 1.7733558927263533, 1.757953439440046, 1.7417028972080775, 1.7242459569658553, 1.705986670085362, 1.6865822247096471, 1.6661007404327393, 1.6444825444902693, 1.622215781893049, 1.5985336984906877, 1.574195180620466, 1.5491649763924735, 1.523231029510498, 1.4968759672982352, 1.4702400820595878, 1.4432222161974226, 1.4164580617632185, 1.3888065474373954, 1.3613043853214808, 1.3340330805097307, 1.306943655014038, 1.2798995290483748, 1.2539904458182198, 1.228494303567069, 1.203599146434239, 1.179637806756156, 1.1566030297960554, 1.1343658311026437, 1.1127439907618932, 1.0926262310573034, 1.0733004638126917, 1.0548527581351144, 1.0373554910932268, 1.0202682358878, 1.0041159902300154, 0.9887189524514335, 0.9734827109745571, 0.9597286837441581, 0.9464688301086426, 0.9340765476226807, 0.9215624332427979, 0.9101065908159528, 0.8991942746298653, 0.8884199006216866, 0.8786614962986538, 0.8689066512244088, 0.8595543759209769, 0.8504927498953683, 0.8413968426840646, 0.833261387688773, 0.8255027532577515, 0.8178335428237915, 0.8101863009589059, 0.8036772012710571, 0.7969421318599156, 0.7907637868608747, 0.7846547535487584, 0.7781622069222587, 0.772755469594683, 0.7672263383865356, 0.7619791201182774, 0.7568698099681309, 0.752204247883388, 0.7474127156393868, 0.7424077476773944, 0.7377977541514805, 0.7336947407041278, 0.7293709175927299, 0.7257426125662667, 0.7219057594026838, 0.7182138477052961, 0.7144349132265363, 0.7110023839133126, 0.7074900184358869, 0.7035362379891532, 0.7004906449999128], "val_accuracy": [0.07233333587646484, 0.12166666984558105, 0.16866666078567505, 0.22066666185855865, 0.2593333423137665, 0.2983333468437195, 0.3323333263397217, 0.3566666543483734, 0.3696666657924652, 0.382999986410141, 0.3956666588783264, 0.40966665744781494, 0.4166666567325592, 0.4259999990463257, 0.4350000023841858, 0.44333332777023315, 0.45399999618530273, 0.45899999141693115, 0.4659999907016754, 0.4699999988079071, 0.4790000021457672, 0.48399999737739563, 0.4909999966621399, 0.49566665291786194, 0.5070000290870667, 0.5146666765213013, 0.5216666460037231, 0.528333306312561, 0.5383333563804626, 0.5423333048820496, 0.5453333258628845, 0.550000011920929, 0.5550000071525574, 0.5583333373069763, 0.5596666932106018, 0.5643333196640015, 0.5716666579246521, 0.574999988079071, 0.5756666660308838, 0.5756666660308838, 0.5773333311080933, 0.5816666483879089, 0.5883333086967468, 0.5923333168029785, 0.5929999947547913, 0.5953333377838135, 0.6013333201408386, 0.6060000061988831, 0.609000027179718, 0.6143333315849304, 0.6206666827201843, 0.6256666779518127, 0.6346666812896729, 0.6399999856948853, 0.6423333287239075, 0.6480000019073486, 0.652999997138977, 0.6576666831970215, 0.6629999876022339, 0.6663333177566528, 0.6679999828338623, 0.6746666431427002, 0.6779999732971191, 0.6803333163261414, 0.6819999814033508, 0.6836666464805603, 0.6866666674613953, 0.6890000104904175, 0.6896666884422302, 0.6916666626930237, 0.6940000057220459, 0.6926666498184204, 0.6930000185966492, 0.6933333277702332, 0.6953333616256714, 0.6963333487510681, 0.6993333101272583, 0.6996666789054871, 0.7020000219345093, 0.703000009059906, 0.7023333311080933, 0.70333331823349, 0.70333331823349, 0.70333331823349, 0.7049999833106995, 0.7053333520889282, 0.706333339214325, 0.706333339214325, 0.7083333134651184, 0.7120000123977661, 0.7089999914169312, 0.7096666693687439, 0.7116666436195374, 0.7120000123977661, 0.7123333215713501, 0.7129999995231628, 0.7143333554267883, 0.7160000205039978, 0.7179999947547913, 0.7183333039283752]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 1, 5, 6, 1, 8], [2, 3, 0, 2, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [84, 89, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 3, 2, 2, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.4328571557998657, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(beta, sigma), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))", "other_info": {"loss": [2.318955028345241, 2.126128104510576, 2.2734632497733815, 2.3600842988628044, 2.1060474468748156, 2.2090324917174664, 2.3054663902575454, 2.3044450563320695, 2.3039088167014956], "accuracy": [0.20063400268554688, 0.24342887103557587, 0.15902787446975708, 0.17884030938148499, 0.2172764539718628, 0.20604939758777618, 0.10487385839223862, 0.09826971590518951, 0.09932637959718704], "val_loss": [1.8580006871904646, 1.9751983370099748, 2.5228819165910994, 1.3853461742401123, 1.9389713151114327, 1.9758224487304688, 1.9739488874162947, 1.9739394869123186, 1.9737699372427804], "val_accuracy": [0.367000013589859, 0.15933333337306976, 0.19200000166893005, 0.45100000500679016, 0.28600001335144043, 0.09733333438634872, 0.10400000214576721, 0.10400000214576721, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 5, 5, 6, 1, 3, 8, 1, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [84, 89, 68, 73, 46], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.1371428519487381, "mapping_values": [1, 15, 15, 9, 6, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(grad))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.6026739319947576, 2.4622518462968492, 2.323254488903565, 2.2770682964594515, 2.1099826463256703, 3.18651673561074, 2.3634082273075907, 2.2591305055229056, 3.161478866785745, 2.3566789674626647], "accuracy": [0.2599392533302307, 0.1670849323272705, 0.14159291982650757, 0.1706511676311493, 0.25637298822402954, 0.2657508850097656, 0.14700831472873688, 0.14714039862155914, 0.1306300312280655, 0.09985470771789551], "val_loss": [1.9227759497506278, 1.997607912336077, 1.9733709607805525, 1.7817213875906808, 1.5477050713130407, 2.03288425718035, 1.9052151952471053, 1.882599149431501, 2.0381825992039273, 2.0275876181466237], "val_accuracy": [0.10233332961797714, 0.09866666793823242, 0.15266667306423187, 0.2966666519641876, 0.3790000081062317, 0.16866666078567505, 0.19566667079925537, 0.17033334076404572, 0.10233332961797714, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 1, 5, 6, 1, 8], [1, 3, 0, 0, 2, 1, 2, 2, 0, 0, 0, 3, 2, 2], [24, 89, 68, 73, 46], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [57, 25, 50, 71, 34]], "fitness": -0.10942856967449188, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 2], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(beta, sigma), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [4.64847414447269, 2.3094627752028214, 2.3055078363563437, 2.3046306204943847, 2.3099632677290622, 2.3087264703580055, 2.3062264678689544], "accuracy": [0.09932637959718704, 0.09879804402589798, 0.09800554811954498, 0.1014397069811821, 0.09998679161071777, 0.09668471664190292, 0.10038304328918457], "val_loss": [1.9780617441449846, 1.977994441986084, 1.9741436413356237, 1.9791573115757533, 1.9783274786812919, 1.973931108202253, 1.9799799237932478], "val_accuracy": [0.09833333641290665, 0.10400000214576721, 0.0976666659116745, 0.09966666996479034, 0.09966666996479034, 0.10400000214576721, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [2, 9, 6, 6, 3, 3, 8, 1, 4, 6, 1, 8, 6, 2, 8, 8, 3, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 2, 0, 3, 2, 2], [9, 89, 68, 81, 46, 49], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 2], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 6, 4, 3, 1, 0, 9, 5, 4, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(sigma, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 7, 6, 6, 0, 3, 8, 1, 5, 6, 1, 8], [2, 3, 0, 0, 2, 1, 2, 2, 0, 0, 0, 3, 2, 2], [24, 89, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [5, 3], [], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 11, 9, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad))))), grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 9, 6, 6, 0, 3, 8, 1, 5, 6, 1, 8], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [84, 89, 71, 73, 46], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 5, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [2, 9, 4, 6, 0, 1, 6, 1, 4, 6, 1, 8, 8, 1, 6], [2, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [82, 89, 68, 73, 46, 51, 59, 31], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [1, 7], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 3, 2, 9, 2, 9], [2, 0, 1, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 15, 11, 8, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), grad))), tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 2, 3, 4, 1, 0, 6, 1, 8], [2, 3, 0, 0, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [24, 89, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 6, 2, 9, 2, 9], [2, 1, 0, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 9, 5, 4, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.divide_no_nan(beta, alpha), tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [498451954.4282434, 317019.2957850427, 115.56021803308079, 124.37430482621772, 120.93975899106461, 63036.26758960487], "accuracy": [0.10302469879388809, 0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.1014397069811821], "val_loss": [5.809789930071149, 9.70137459891183, 112.68338884626117, 104.68450491768974, 107.1749768938337, 109.67519705636161], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 0, 6, 4, 8, 3, 8, 6, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [16, 89, 68, 73, 46], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [1, 7], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 0, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(beta), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3729488.8233150467, 2.6926967887326696, 2.4685329818108364, 2.580700761338802, 2.656992478786978, 2.50130768880994, 2.6051697904218725, 2.6293279397221543], "accuracy": [0.09496764093637466, 0.09681680053472519, 0.1006472036242485, 0.09959053993225098, 0.09972262382507324, 0.09787346422672272, 0.09893012791872025, 0.10196803510189056], "val_loss": [2.3417583874293735, 2.2968452998570035, 2.306783676147461, 2.194602830069406, 2.318054744175502, 2.2666365078517368, 2.1418734277997697, 2.314974852970668], "val_accuracy": [0.09833333641290665, 0.09966666996479034, 0.10400000214576721, 0.10000000149011612, 0.09966666996479034, 0.10400000214576721, 0.0976666659116745, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 3, 1, 2, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [24, 89, 35, 45, 46], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [1, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 2, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 9, 7, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 9, 5, 4, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3022061125508797, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.1014397069811821, 0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.0976666659116745, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [5, 9, 3, 3, 0, 3, 1, 1, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [84, 89, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 0, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [23, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1968.1970019949551, 35404.47248443898, 161785.48283747194, 438393.88847246073, 946892.6591929732, 1735077.0166754723], "accuracy": [0.10513802617788315, 0.09774138033390045, 0.10289261490106583, 0.10196803510189056, 0.09906221181154251, 0.09959053993225098], "val_loss": [7165.313337053572, 55316.92299107143, 184747.35267857142, 435737.35714285716, 848568.8928571428, 1463522.0714285714], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 4, 6, 6, 9, 3, 2, 1, 3, 6, 3, 8], [0, 2, 0, 0, 1, 0, 2, 2, 0, 0, 0, 3, 2, 2], [84, 89, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0], [0, 8, 5], [1, 7], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 2, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [6, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 4, 4, 0, 3, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 9, 5, 4, 1, 8], [2, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [84, 89, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 9, 6, 6, 0, 3, 8, 1, 5, 6, 1, 8], [2, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [84, 89, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 0, 1, 1], [8, 3, 0], [5, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 1, 1, 0, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022061125508797, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]