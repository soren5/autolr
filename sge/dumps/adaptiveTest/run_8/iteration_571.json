[{"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.803428590297699, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, alpha)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.0682167124518345, 1.4935514325589205, 1.114061030020819, 0.9161082980355976, 0.8190246163546968, 0.7853668756992621, 0.7151803852954104, 0.695310718985502, 0.6686007333248991, 0.6575194991433215, 0.6245238136039072, 0.6241080759538714, 0.6068141115434481, 0.6005121502878171, 0.5644986577132248, 0.556731844661636, 0.5788942165441516, 0.5230808332847834, 0.5245358067622605, 0.5163517675033225, 0.49284821987278066, 0.48915492764018104, 0.48548694533001807, 0.48133183000755664, 0.47784544381294203, 0.45804393120634557, 0.4801764485582841, 0.4443891219939412, 0.437559366056932, 0.4424047389239557, 0.4198750940965482, 0.4139878495124353, 0.415533122715933, 0.40424435920231, 0.39441629212923873, 0.39355372445316616, 0.40251492602147165, 0.390851822515536, 0.3942246137317523, 0.3958695774002161], "accuracy": [0.31224408745765686, 0.4982168674468994, 0.5988640785217285, 0.6548672318458557, 0.6927750706672668, 0.7013604640960693, 0.7260599732398987, 0.7364945411682129, 0.7453441023826599, 0.7464007139205933, 0.7605336308479309, 0.7629110813140869, 0.7648923397064209, 0.7716285586357117, 0.789459764957428, 0.7913089394569397, 0.7792893648147583, 0.7984414100646973, 0.8049134612083435, 0.8086118102073669, 0.8108572363853455, 0.8187822103500366, 0.8170651197433472, 0.8230088353157043, 0.8216879963874817, 0.8290846943855286, 0.8216879963874817, 0.8347642421722412, 0.8366134166717529, 0.8364813327789307, 0.8421608805656433, 0.8453308939933777, 0.8500858545303345, 0.852859616279602, 0.8544445633888245, 0.8532558679580688, 0.8490291833877563, 0.8555012345314026, 0.8556333184242249, 0.8507462739944458], "val_loss": [1.7546734128679549, 1.1358524390629359, 0.743388295173645, 0.6069659846169608, 0.5660100323813302, 0.5595048836299351, 0.5830160890306745, 0.5614984716687884, 0.537311281476702, 0.5344747815813337, 0.47248501437050955, 0.4881978716169085, 0.46310722827911377, 0.4617902381079538, 0.47000885009765625, 0.48685480867113384, 0.44646791900907246, 0.4115174923624311, 0.4315234933580671, 0.40339939083371845, 0.415276689188821, 0.43083243710654123, 0.40760449852262226, 0.41249329703194754, 0.3918573260307312, 0.41500011512211393, 0.3860488874571664, 0.3794444629124233, 0.3970293572970799, 0.37859152044568745, 0.3612477779388428, 0.39035276004246305, 0.3624292697225298, 0.3805048550878252, 0.35208503689084736, 0.3558700510433742, 0.35230120590754915, 0.346414463860648, 0.370059745652335, 0.3421126093183245], "val_accuracy": [0.4753333330154419, 0.5013333559036255, 0.6583333611488342, 0.7266666889190674, 0.7480000257492065, 0.746666669845581, 0.7210000157356262, 0.7543333172798157, 0.7413333058357239, 0.737333357334137, 0.7943333387374878, 0.7803333401679993, 0.8019999861717224, 0.8033333420753479, 0.7836666703224182, 0.7799999713897705, 0.7990000247955322, 0.8256666660308838, 0.8083333373069763, 0.8243333101272583, 0.8149999976158142, 0.8080000281333923, 0.82833331823349, 0.8196666836738586, 0.8309999704360962, 0.8190000057220459, 0.831333339214325, 0.8376666903495789, 0.8336666822433472, 0.8373333215713501, 0.8496666550636292, 0.8323333263397217, 0.8473333120346069, 0.8293333053588867, 0.8560000061988831, 0.8479999899864197, 0.8560000061988831, 0.8543333411216736, 0.8403333425521851, 0.8543333411216736]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 5, 0, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [1, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.7954285740852356, "mapping_values": [1, 6, 6, 3, 3, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.square(alpha), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2064174009178763, 1.633255695229146, 1.2097752770538643, 1.0489774073875497, 0.9320375500983723, 0.8600450072778514, 0.8457434516163425, 0.798537860102799, 0.7721838212882397, 0.7473304009535183, 0.728191719724675, 0.7150298730650945, 0.6908903450557128, 0.6765560500216506, 0.6790882393652815, 0.6639245764186684, 0.6588663675797346, 0.6422544492785296, 0.6282956083578881, 0.6328459355840909, 0.6216338607676356, 0.6141007206994529, 0.610781480812236, 0.6032470965728689, 0.5991104751246685, 0.5807535101661687, 0.5731238176195675, 0.5840762184359347, 0.5783788493327996, 0.5756217914093061, 0.5724722135414962, 0.5601415827037824, 0.5636173477262286, 0.5552668177283215, 0.5519710399408256], "accuracy": [0.2631092369556427, 0.48632940649986267, 0.5712587237358093, 0.6268656849861145, 0.6649055480957031, 0.6939638257026672, 0.683529257774353, 0.7086250185966492, 0.7103421092033386, 0.7265883088111877, 0.7323999404907227, 0.733060359954834, 0.741909921169281, 0.7481178045272827, 0.7510236501693726, 0.7493065595626831, 0.7498348951339722, 0.7617223858833313, 0.7646281719207764, 0.7684586048126221, 0.7642319202423096, 0.7741381525993347, 0.7677981853485107, 0.76542067527771, 0.77677983045578, 0.7845727205276489, 0.7893276810646057, 0.7810064554214478, 0.7849689722061157, 0.7829877138137817, 0.7881389260292053, 0.7886672616004944, 0.7862898111343384, 0.7946110367774963, 0.7954035401344299], "val_loss": [1.6454364572252547, 0.9407773358481271, 0.8797368662697929, 0.6610830000468663, 0.6481514828545707, 0.5977507829666138, 0.5778527089527675, 0.569388917514256, 0.540845445224217, 0.5507923875536237, 0.5170774459838867, 0.5116905655179705, 0.49884348256247385, 0.49328977721078054, 0.4907792295728411, 0.5141820907592773, 0.47571117537362234, 0.48281945501055035, 0.47343560627528597, 0.4704300846372332, 0.4581623077392578, 0.475360563823155, 0.46966889926365446, 0.46869196210588726, 0.4487730434962681, 0.44698614733559744, 0.44970706530979704, 0.44382438489368986, 0.4435300827026367, 0.4331170065062387, 0.463533878326416, 0.45201289653778076, 0.4283942920821054, 0.43120235204696655, 0.44755795172282625], "val_accuracy": [0.5170000195503235, 0.6466666460037231, 0.5950000286102295, 0.7293333411216736, 0.7133333086967468, 0.7326666712760925, 0.7476666569709778, 0.7490000128746033, 0.7676666378974915, 0.746999979019165, 0.7796666622161865, 0.7870000004768372, 0.7873333096504211, 0.7873333096504211, 0.7850000262260437, 0.7673333287239075, 0.7973333597183228, 0.8019999861717224, 0.8046666383743286, 0.8053333163261414, 0.8059999942779541, 0.7860000133514404, 0.8009999990463257, 0.8033333420753479, 0.8213333487510681, 0.812666654586792, 0.8073333501815796, 0.8220000267028809, 0.8133333325386047, 0.8259999752044678, 0.7770000100135803, 0.8036666512489319, 0.8199999928474426, 0.8143333196640015, 0.7996666431427002]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 8, 0, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 2, 1, 3, 0, 0], [58, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.6382856965065002, "mapping_values": [1, 21, 21, 13, 8, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))), alpha)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))), tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(sigma, sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.8383926090673293, 2.2007541656179233, 1.8867730931551732, 2.082859958088897, 2.0357466077036186, 2.145978761906511, 2.597361916170585, 2.3072046886865314], "accuracy": [0.19878484308719635, 0.19918107986450195, 0.3481706380844116, 0.3078853487968445, 0.27922335267066956, 0.28860124945640564, 0.12759213149547577, 0.09325055778026581], "val_loss": [1.962855407169887, 1.4413608482905798, 1.0750907489231654, 1.788738455091204, 2.3305581637791226, 2.959064551762172, 1.9771248272487096, 1.97468478339059], "val_accuracy": [0.13966666162014008, 0.4103333353996277, 0.6633333563804626, 0.28299999237060547, 0.24199999868869781, 0.32366666197776794, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 2, 8, 0, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.50685715675354, "mapping_values": [1, 13, 13, 7, 6, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.171259390506384, 2.2846678260011664, 2.068326900474872, 6.086746583509565, 92108260787449.19, NaN, NaN, NaN], "accuracy": [0.19957733154296875, 0.14291374385356903, 0.2900541424751282, 0.29612997174263, 0.11240258812904358, 0.09536388516426086, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.8156638826642717, 1.8785077503749303, 1.4903415952410017, 9.179506301879883, Infinity, NaN, NaN, NaN], "val_accuracy": [0.21466666460037231, 0.2980000078678131, 0.46299999952316284, 0.10966666787862778, 0.09233333170413971, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 7, 0, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 6, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 3, 0, 1, 0, 2, 1, 3, 0, 0], [58, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 3, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 66, 50, 71, 34]], "fitness": -0.50685715675354, "mapping_values": [1, 22, 22, 13, 9, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.171259390506384, 2.2846678260011664, 2.068326900474872, 6.086746583509565, 92108260787449.19, NaN, NaN, NaN], "accuracy": [0.19957733154296875, 0.14291374385356903, 0.2900541424751282, 0.29612997174263, 0.11240258812904358, 0.09536388516426086, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.8156638826642717, 1.8785077503749303, 1.4903415952410017, 9.179506301879883, Infinity, NaN, NaN, NaN], "val_accuracy": [0.21466666460037231, 0.2980000078678131, 0.46299999952316284, 0.10966666787862778, 0.09233333170413971, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 6, 0, 2, 3, 8, 3, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 8, 6, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 2, 1, 3, 0, 0], [35, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.4977142810821533, "mapping_values": [1, 14, 14, 8, 6, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.multiply(tf.math.add(alpha, grad), alpha))), grad)))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.300711160385692, 2.29995712709937, 2.2971895523925325, 2.296089781840653, 2.2983564113377106, 2.294062107466845, 2.293603325941937, 2.2936903743255157, 2.2909749697354083, 2.2907329281449336, 2.2899774784551177, 2.2871936981184544, 2.287752365124397, 2.283735776353805, 2.285240329818766, 2.280925558101799, 2.2815689303698306, 2.2783209360853522, 2.2785154683888154, 2.2761616225350316, 2.2756548197419653, 2.274967193036677, 2.2723505878650028, 2.2730617836529095, 2.272036180583131, 2.2697998023760584, 2.266253203889713, 2.2672293173276423, 2.263465855776941, 2.2640807829544354, 2.261765394574852, 2.261368385505651, 2.2594655952307496, 2.257558492574363, 2.2575722595389176, 2.254262838129354, 2.2538097308154716, 2.253122108739365, 2.2484743609294253, 2.249594890021094, 2.2471247884528416, 2.245991579215005, 2.2443154834721617, 2.2430220055558094, 2.241115948936927, 2.236889826638934, 2.238400498999738, 2.235609330143423, 2.2329388064101168, 2.231900312739624, 2.2321916737844285, 2.229140999830158, 2.2269288440500787, 2.225383289832449, 2.221983826911492, 2.2220556761815073, 2.2204267552279684, 2.2190511631628684, 2.2150299975806225, 2.212551243600277, 2.2126470179275013, 2.2101920272034583, 2.2086769727400313, 2.2063345704426967, 2.20263115000243, 2.2022277352800774, 2.2005996620020514, 2.1971381987248115, 2.1940525129187485, 2.193593620324982, 2.1923001770487613, 2.1892691640774524, 2.184260798986987, 2.1838016749026674, 2.1812182264777693, 2.1784506900640226, 2.1761631604750016, 2.1729103166035784, 2.1738779134817126, 2.170013085458383, 2.166774658746786, 2.163750194807283, 2.1598892326541406, 2.1576759729875374, 2.1526602007032403, 2.1531184699320915, 2.1479685977307987, 2.146473832653813, 2.1422687870809636, 2.1404660401516242, 2.136574450390702, 2.1333806026314135, 2.130241078250932, 2.1251451520084657, 2.12057613161309, 2.117995401745727, 2.115524724143576, 2.111417162514413, 2.109267964071491, 2.1056132785175863], "accuracy": [0.09311848133802414, 0.0874389111995697, 0.10051512718200684, 0.10751552134752274, 0.10302469879388809, 0.10619468986988068, 0.11359133571386337, 0.11187426000833511, 0.12178047746419907, 0.11728965491056442, 0.12402588874101639, 0.1224408894777298, 0.13498876988887787, 0.13168670237064362, 0.13697001338005066, 0.14793290197849274, 0.14436666667461395, 0.1538766324520111, 0.15031039714813232, 0.16695284843444824, 0.15374454855918884, 0.16140536963939667, 0.17223615944385529, 0.1706511676311493, 0.1690661758184433, 0.1784440577030182, 0.1838594675064087, 0.18280279636383057, 0.19535067677497864, 0.19191652536392212, 0.19997358322143555, 0.1990489959716797, 0.20182274281978607, 0.2067098170518875, 0.20499274134635925, 0.21120063960552216, 0.21635186672210693, 0.21516312658786774, 0.22493726015090942, 0.22797517478466034, 0.2324659824371338, 0.23101307451725006, 0.23682472109794617, 0.23656055331230164, 0.24659886956214905, 0.2537313401699066, 0.25016510486602783, 0.25624093413352966, 0.26403382420539856, 0.26324132084846497, 0.25676923990249634, 0.2599392533302307, 0.27684587240219116, 0.27882710099220276, 0.272090882062912, 0.2727513015270233, 0.27420419454574585, 0.28041210770606995, 0.29243165254592896, 0.29612997174263, 0.29137498140335083, 0.2965262234210968, 0.2917712330818176, 0.29745081067085266, 0.3065645098686218, 0.2973187267780304, 0.29877161979675293, 0.3077532649040222, 0.3148857355117798, 0.31884822249412537, 0.3082816004753113, 0.3086778521537781, 0.3263769745826721, 0.32360321283340454, 0.32439571619033813, 0.3265090584754944, 0.3292827904224396, 0.3327169418334961, 0.3283582031726837, 0.33245277404785156, 0.3357548415660858, 0.3443402349948883, 0.3443402349948883, 0.3413023352622986, 0.35186898708343506, 0.3451327383518219, 0.35860520601272583, 0.3564918637275696, 0.3520010709762573, 0.35609564185142517, 0.3579447865486145, 0.35966187715530396, 0.3609826862812042, 0.3661339282989502, 0.3707568347454071, 0.37022849917411804, 0.36903974413871765, 0.37022849917411804, 0.3803988993167877, 0.3727380931377411], "val_loss": [1.9693316050938197, 1.9680750029427665, 1.9668374742780412, 1.9656051227024622, 1.9643688201904297, 1.9631306103297643, 1.9618989399501257, 1.9606904983520508, 1.9594560350690569, 1.958226272038051, 1.9569965090070451, 1.9557702200753349, 1.9545528548104423, 1.953322274344308, 1.9521099499293737, 1.9508696964808874, 1.9496363231113978, 1.9483938217163086, 1.9471535682678223, 1.9459101813180106, 1.9446627071925573, 1.943399224962507, 1.94213833127703, 1.9408702169145857, 1.9395990371704102, 1.9383117130824499, 1.9370207786560059, 1.9357310022626604, 1.9344232422964913, 1.9330981799534388, 1.9317583356584822, 1.9304304804120744, 1.9291011946541923, 1.9277434349060059, 1.926384585244315, 1.9250098637172155, 1.9236212457929338, 1.922219685145787, 1.9207812717982702, 1.9193493979317802, 1.9178746087210519, 1.916395800454276, 1.9149001666477747, 1.9133992195129395, 1.9118623733520508, 1.9103003229413713, 1.9087396349225725, 1.9071433884756905, 1.905512877873012, 1.9038730348859514, 1.9022371428353446, 1.9005600384303503, 1.8988489423479353, 1.8971454756600517, 1.8953858784266882, 1.8936127935137068, 1.8918136869158064, 1.8900100163051061, 1.8881707191467285, 1.8862763132367815, 1.8843797274998255, 1.8824607304164342, 1.8805171421595983, 1.878530706678118, 1.8764939989362444, 1.874443531036377, 1.872379984174456, 1.8702800614493233, 1.8681353160313197, 1.8659364155360632, 1.8637237548828125, 1.8614728791373116, 1.8591647148132324, 1.8568122727530343, 1.8544370787484306, 1.8520248958042689, 1.8495618275233678, 1.8470610891069685, 1.8445375306265694, 1.841956956045968, 1.8393338748386927, 1.8367125647408622, 1.834012576511928, 1.8312762805393763, 1.8284660066877092, 1.8256597518920898, 1.8227646691458566, 1.819833823612758, 1.816877978188651, 1.8138728141784668, 1.8108092035566057, 1.8076804706028529, 1.8045380456107003, 1.8013089724949427, 1.7980138233729772, 1.7946983746119909, 1.7913273402622767, 1.7878978593008858, 1.7844444683619909, 1.7809256144932337], "val_accuracy": [0.04800000041723251, 0.054999999701976776, 0.06266666948795319, 0.07100000232458115, 0.08100000023841858, 0.09200000017881393, 0.10700000077486038, 0.11733333021402359, 0.12933333218097687, 0.13966666162014008, 0.15333333611488342, 0.16566666960716248, 0.179666668176651, 0.19200000166893005, 0.20466665923595428, 0.21799999475479126, 0.22433333098888397, 0.23266667127609253, 0.24699999392032623, 0.2549999952316284, 0.26633334159851074, 0.2770000100135803, 0.28866666555404663, 0.296999990940094, 0.3050000071525574, 0.31200000643730164, 0.31966665387153625, 0.32633334398269653, 0.3330000042915344, 0.3423333466053009, 0.34833332896232605, 0.35366666316986084, 0.35766667127609253, 0.3610000014305115, 0.3623333275318146, 0.367333322763443, 0.3686666786670685, 0.37299999594688416, 0.3776666522026062, 0.3803333342075348, 0.382666677236557, 0.38466668128967285, 0.38600000739097595, 0.39100000262260437, 0.3943333327770233, 0.39666667580604553, 0.3996666669845581, 0.40299999713897705, 0.4046666622161865, 0.40666666626930237, 0.40833333134651184, 0.4116666615009308, 0.4153333306312561, 0.4180000126361847, 0.4206666648387909, 0.42366665601730347, 0.4266666769981384, 0.42933332920074463, 0.4300000071525574, 0.4320000112056732, 0.4346666634082794, 0.43533334136009216, 0.4359999895095825, 0.437333345413208, 0.43966665863990784, 0.4423333406448364, 0.44433334469795227, 0.4463333189487457, 0.44966667890548706, 0.45100000500679016, 0.45266667008399963, 0.45633333921432495, 0.4586666524410248, 0.460999995470047, 0.46166667342185974, 0.46399998664855957, 0.46666666865348816, 0.46933332085609436, 0.4703333377838135, 0.4723333418369293, 0.47433334589004517, 0.4763333201408386, 0.4776666760444641, 0.4790000021457672, 0.48133334517478943, 0.4833333194255829, 0.48500001430511475, 0.48500001430511475, 0.4856666624546051, 0.4873333275318146, 0.4896666705608368, 0.49033331871032715, 0.49266666173934937, 0.49533334374427795, 0.4950000047683716, 0.49666666984558105, 0.500333309173584, 0.5019999742507935, 0.5053333044052124, 0.5076666474342346]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 6, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 6, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 89, 50, 71, 34]], "fitness": -0.11114285886287689, "mapping_values": [1, 14, 14, 7, 7, 2, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, alpha)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [3.6132761285037662, 26877254570.789894, NaN, NaN, NaN, NaN], "accuracy": [0.21621978282928467, 0.13538502156734467, 0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.3183932985578264, 6.72034043631311e+23, NaN, NaN, NaN, NaN], "val_accuracy": [0.23233333230018616, 0.0976666659116745, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 2, 6, 4, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 1, 4, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [9, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [1, 25, 50, 71, 34]], "fitness": -0.10085714608430862, "mapping_values": [1, 14, 14, 7, 7, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3000895389397664, 2.3019947669352083, 2.302568502272471, 2.3025824303451294, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09668471664190292, 0.10434553027153015, 0.10011887550354004, 0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9730000495910645, 1.9736430985586983, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09033333510160446, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 6, 0, 2, 8, 8, 3, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 6, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 2, 1, 3, 0, 0], [58, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 0, 9, 9, 4, 5, 2, 1, 0, 0, 0, 0, 6, 4, 2, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [4.170818665307574, 21.351106178365317, 61.694782979106385, 133.14503463485127, 246.81730406175058, 408.20343996672], "accuracy": [0.09774138033390045, 0.09602430462837219, 0.09998679161071777, 0.10540219396352768, 0.09760929644107819, 0.10091137140989304], "val_loss": [6.972174508231027, 25.670216151646205, 61.7884521484375, 120.78290666852679, 208.92657470703125, 333.1804896763393], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 8, 0, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 0, 1, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 3, 6, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 2, 1, 3, 0, 0], [58, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 8, 2, 9, 2, 9], [3, 1, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, tf.math.negative(alpha))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [25, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 0, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 2, 9, 2, 9], [0, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 3, 1, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3015684507085568, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 8, 0, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 5, 2, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 4, 2, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.square(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301321734684239, 2.3022800607924383, 2.302724172599469, 2.3049454708235406, 2.3147971376908565, 2.3605728654530163], "accuracy": [0.10434553027153015, 0.10368511080741882, 0.10540219396352768, 0.10593052208423615, 0.10315678268671036, 0.10011887550354004], "val_loss": [1.973665509905134, 1.973846708025251, 1.974700655255999, 1.9787066323416573, 1.9969702448163713, 2.086671829223633], "val_accuracy": [0.10000000149011612, 0.09966666996479034, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 0, 2, 6, 4, 2, 4, 3, 2, 1, 5, 8, 1, 3, 2, 6, 0, 5, 0, 2, 8, 3, 4, 0, 6, 1, 5, 1], [2, 2, 2, 2, 1, 0, 2, 2, 0, 0, 0, 3, 2, 2, 2, 1, 2, 2, 0, 2], [98, 55, 35, 73, 95], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 9, 9, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 0, 2, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 28, 20, 5, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.negative(tf.math.add(grad, tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, grad), alpha)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.divide_no_nan(tf.math.subtract(alpha, grad), tf.math.add(alpha, tf.math.square(grad)))))), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07872143387794495, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 2, 6, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 1, 4, 8, 8, 2, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 2, 1, 3, 0, 0], [35, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [74, 22, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 6, 5, 3, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), grad), tf.math.sqrt(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1063856361.2806315, 3.0969049421992394, 2.7835969383595973, 2.797295120996554, 3.0668868571382077, 2.7269522414750993], "accuracy": [0.09747721254825592, 0.09972262382507324, 0.09998679161071777, 0.09879804402589798, 0.09668471664190292, 0.10289261490106583], "val_loss": [2.68601655960083, 2.329111303601946, 2.1860695566449846, 2.69294159752982, 2.267892292567662, 2.2319863864353726], "val_accuracy": [0.10233332961797714, 0.09833333641290665, 0.09733333438634872, 0.09966666996479034, 0.10000000149011612, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 8, 0, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 6, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 3, 2, 1, 3, 0, 0], [58, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(alpha, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07872143387794495, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 8, 0, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 2, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 9, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 8, 6, 2, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [295.20335692305053, 2.3083248730459074, 2.305348967422568, 88264182727.57399, 2.3142081351564263, 2.308452437724168, 2.3056314858809563, 2.3040732730570217, 2.3033832452867515], "accuracy": [0.09866596013307571, 0.09813763201236725, 0.09721305221319199, 0.09708096832036972, 0.09642054885625839, 0.09734513610601425, 0.09642054885625839, 0.09668471664190292, 0.09747721254825592], "val_loss": [1.981003761291504, 1.977294989994594, 1.975407600402832, 1.98825318472726, 1.9814883640834264, 1.9778729847499303, 1.9758239473615373, 1.9747843061174666, 1.974245275769915], "val_accuracy": [0.09833333641290665, 0.09966666996479034, 0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10000000149011612, 0.10233332961797714, 0.10233332961797714, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 8, 0, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 1, 2, 1, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 9, 3, 6, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 4, 0, 2, 1, 3, 0, 0], [58, 17, 93, 84, 1, 78], [1, 1, 0, 1, 0, 1], [0, 1, 1, 0], [2, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [7, 3, 2, 9, 2, 9], [0, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(alpha))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.3015684507085568, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 8, 0, 2, 3, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 2, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [8, 25, 50, 71, 34]], "fitness": -0.09971428662538528, "mapping_values": [1, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 6, 2, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, tf.math.negative(alpha))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3373052271176733, 2.7234486284005315, 3.7863585274091345, 5.659704918496723, 8.375865505607987, 11.788812259436757, 16.15331578963248], "accuracy": [0.09391097724437714, 0.09417514503002167, 0.10091137140989304, 0.1072513535618782, 0.09787346422672272, 0.10011887550354004, 0.09906221181154251], "val_loss": [2.041100706372942, 2.4147791862487793, 3.2894369534083774, 4.703737122671945, 6.61551434653146, 9.016204016549247, 11.927076612200056], "val_accuracy": [0.09866666793823242, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 1, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 2, 3, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [95, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(grad)), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301256121866077, 2.3018471978013353, 2.3003741558658417, 2.3005932563992855, 2.3041848437566608, 2.3012028377227116], "accuracy": [0.09179764986038208, 0.08360850811004639, 0.09377889335155487, 0.09747721254825592, 0.08942015469074249, 0.09047681838274002], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 5, 9, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 8, 3, 6, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 4, 5, 2, 1, 3, 0, 0], [58, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [2, 1, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.square(alpha), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, alpha))", "other_info": {"loss": [2.301256121866077, 2.3018471978013353, 2.3003741558658417, 2.3005932563992855, 2.3041848437566608, 2.3012028377227116], "accuracy": [0.09179764986038208, 0.08360850811004639, 0.09377889335155487, 0.09747721254825592, 0.08942015469074249, 0.09047681838274002], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]