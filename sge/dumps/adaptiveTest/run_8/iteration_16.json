[{"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [4, 6, 6, 6, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 0, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 1, 3, 1], [45, 38]], "fitness": -0.8048571348190308, "mapping_values": [1, 3, 3, 1, 2, 0, 14, 14, 7, 7, 1, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)), grad)), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), alpha)), sigma))", "other_info": {"loss": [2.103808543732799, 1.367218495785143, 1.0858224697195544, 0.9536787996423117, 0.8622305704271631, 0.7837651359910554, 0.7591732103811074, 0.7336653453358066, 0.7211844353879904, 0.6947903808680161, 0.6591902794288118, 0.6566912336608344, 0.6598771343992025, 0.6175059434083066, 0.6145987802760444, 0.6328025629664961, 0.6099384962260652, 0.6081313090459184, 0.5669020266502037, 0.5718461880988103, 0.5775916192588585, 0.5860438296319692, 0.5564408359305891, 0.5553376072622357, 0.5325011766314302, 0.5330804633332156, 0.5583185308550516, 0.5328192479181221, 0.526474538236451, 0.5062163786023064], "accuracy": [0.31964072585105896, 0.5303130149841309, 0.6095628142356873, 0.6609430909156799, 0.6873596906661987, 0.7136441469192505, 0.7157574892044067, 0.7202483415603638, 0.7327961921691895, 0.7390040755271912, 0.7498348951339722, 0.7500990629196167, 0.7461365461349487, 0.7691190242767334, 0.7707040309906006, 0.7557786107063293, 0.7650244235992432, 0.7664773464202881, 0.7848368883132935, 0.7810064554214478, 0.7796856164932251, 0.7757231593132019, 0.7936864495277405, 0.7862898111343384, 0.8043851256370544, 0.8026680946350098, 0.7907806038856506, 0.798309326171875, 0.8010830879211426, 0.8100647330284119], "val_loss": [1.212531430380685, 0.8186394657407489, 0.8145692689078194, 0.636562636920384, 0.5814285448619297, 0.5796959229878017, 0.533665554864066, 0.6929424490247454, 0.547134246144976, 0.5299809149333409, 0.5375807455607823, 0.5794466052736554, 0.5006973232541766, 0.4949425458908081, 0.4780938795634678, 0.4979264565876552, 0.4694229875292097, 0.4601436257362366, 0.46653798648289274, 0.47571046011788504, 0.5294704266956874, 0.45006902728761944, 0.47448272364480154, 0.44199253831590923, 0.42674081666128977, 0.4441984295845032, 0.4328524555478777, 0.4429960676601955, 0.43445857082094463, 0.42292085715702604], "val_accuracy": [0.5693333148956299, 0.6463333368301392, 0.6273333430290222, 0.7233333587646484, 0.750333309173584, 0.7450000047683716, 0.7586666941642761, 0.7089999914169312, 0.7446666955947876, 0.7643333077430725, 0.7363333106040955, 0.734666645526886, 0.7829999923706055, 0.7776666879653931, 0.7913333177566528, 0.7766666412353516, 0.7983333468437195, 0.8043333292007446, 0.7770000100135803, 0.7940000295639038, 0.7463333606719971, 0.8076666593551636, 0.7816666960716248, 0.800000011920929, 0.8216666579246521, 0.8103333115577698, 0.8086666464805603, 0.809333324432373, 0.8213333487510681, 0.8199999928474426]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1, 1], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57, 55], [1, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6, 2, 5, 2, 2, 4, 5, 8, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 2, 0, 1, 2, 0, 0, 2], [1, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.7639999985694885, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.098497960325308, 1.8066321605736033, 1.266067569486658, 1.0117621918506217, 0.8603071622514076, 0.7966020003821257, 0.7751013716891174, 0.7258929999087859, 0.675365196471327, 0.6686270747596026, 0.6523305660052432, 0.6404019071598882, 0.6185925786426874, 0.5948333298572696], "accuracy": [0.3043191134929657, 0.39823007583618164, 0.5548804402351379, 0.635451078414917, 0.6664905548095703, 0.6972658634185791, 0.7100779414176941, 0.7214370369911194, 0.7483819723129272, 0.7425703406333923, 0.7486461400985718, 0.7564390301704407, 0.761590301990509, 0.7683265209197998], "val_loss": [1.9089172227042062, 0.949373722076416, 0.7719983373369489, 0.6418099914278302, 0.6467751094273159, 0.581566299710955, 0.5524689640317645, 0.5314979723521641, 0.5072944845472064, 0.5109848294939313, 0.5152831758771624, 0.5274587188448224, 0.498879143169948, 0.5098330293382917], "val_accuracy": [0.32733333110809326, 0.6286666393280029, 0.6629999876022339, 0.7016666531562805, 0.7120000123977661, 0.7546666860580444, 0.7486666440963745, 0.7680000066757202, 0.7839999794960022, 0.7583333253860474, 0.7593333125114441, 0.765666663646698, 0.7633333206176758, 0.7633333206176758]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [4, 9, 6, 6, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 2, 0, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 1, 3, 1], [45, 38]], "fitness": -0.2865714430809021, "mapping_values": [1, 7, 7, 4, 3, 1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.5072247892275716, 2.882438658817711, 2.3049410839657725, 2.303991006869587, 2.301030403744858, 2.250271947360892, 2.330554146509066, 2.2329508955641475, 2.306286787486048, 2.3034150704353746, 2.3032037745440372], "accuracy": [0.1834632158279419, 0.11015717685222626, 0.10236428678035736, 0.09760929644107819, 0.107647605240345, 0.1690661758184433, 0.11834631860256195, 0.16800950467586517, 0.09985470771789551, 0.09576013684272766, 0.09655263274908066], "val_loss": [3.8603549684797014, 1.9736112185886927, 1.9736544745309013, 1.9727302959987096, 1.9671282087053572, 1.938750880105155, 1.9678500039236886, 1.9785729816981725, 1.9741966383797782, 1.9736956868852888, 1.9735994338989258], "val_accuracy": [0.09700000286102295, 0.10400000214576721, 0.0976666659116745, 0.10266666859388351, 0.09366666525602341, 0.3449999988079071, 0.10400000214576721, 0.10233332961797714, 0.10233332961797714, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0], [6, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 6, 1, 1, 8, 4], [3, 5, 2, 0, 2, 5, 0], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 1, 1, 1], [0, 4], [3, 0], [45]], "fitness": -0.2865714430809021, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(beta, beta), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(beta, grad)))))), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.5072247892275716, 2.882438658817711, 2.3049410839657725, 2.303991006869587, 2.301030403744858, 2.250271947360892, 2.330554146509066, 2.2329508955641475, 2.306286787486048, 2.3034150704353746, 2.3032037745440372], "accuracy": [0.1834632158279419, 0.11015717685222626, 0.10236428678035736, 0.09760929644107819, 0.107647605240345, 0.1690661758184433, 0.11834631860256195, 0.16800950467586517, 0.09985470771789551, 0.09576013684272766, 0.09655263274908066], "val_loss": [3.8603549684797014, 1.9736112185886927, 1.9736544745309013, 1.9727302959987096, 1.9671282087053572, 1.938750880105155, 1.9678500039236886, 1.9785729816981725, 1.9741966383797782, 1.9736956868852888, 1.9735994338989258], "val_accuracy": [0.09700000286102295, 0.10400000214576721, 0.0976666659116745, 0.10266666859388351, 0.09366666525602341, 0.3449999988079071, 0.10400000214576721, 0.10233332961797714, 0.10233332961797714, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [8, 6, 4, 6], [2, 1, 3, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 2, 3, 0, 1, 3, 2, 0, 1, 1, 3, 3, 0, 2, 2, 1, 2, 2, 0, 3, 1, 1, 3, 0, 3, 2], [44, 57], [0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6], [3], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [7], [], [0, 1, 0, 1, 0, 1], [0, 3, 3], [3, 0, 0], [45, 11]], "fitness": -0.2865714430809021, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.5072247892275716, 2.882438658817711, 2.3049410839657725, 2.303991006869587, 2.301030403744858, 2.250271947360892, 2.330554146509066, 2.2329508955641475, 2.306286787486048, 2.3034150704353746, 2.3032037745440372], "accuracy": [0.1834632158279419, 0.11015717685222626, 0.10236428678035736, 0.09760929644107819, 0.107647605240345, 0.1690661758184433, 0.11834631860256195, 0.16800950467586517, 0.09985470771789551, 0.09576013684272766, 0.09655263274908066], "val_loss": [3.8603549684797014, 1.9736112185886927, 1.9736544745309013, 1.9727302959987096, 1.9671282087053572, 1.938750880105155, 1.9678500039236886, 1.9785729816981725, 1.9741966383797782, 1.9736956868852888, 1.9735994338989258], "val_accuracy": [0.09700000286102295, 0.10400000214576721, 0.0976666659116745, 0.10266666859388351, 0.09366666525602341, 0.3449999988079071, 0.10400000214576721, 0.10233332961797714, 0.10233332961797714, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [5, 6, 4, 9], [3, 2, 2, 3], [44, 57, 44, 27, 0, 94, 42, 86, 73, 42, 21, 46, 85, 6, 20, 75], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [4, 6, 1, 4, 3, 5, 2, 2, 9, 5, 0, 9], [0, 3, 3, 2, 3, 2, 3], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 1, 1, 1], [0, 3, 9, 4], [3, 0], [45, 38]], "fitness": -0.2865714430809021, "mapping_values": [1, 2, 2, 1, 1, 0, 14, 14, 7, 7, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.multiply(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta)))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.5072247892275716, 2.882438658817711, 2.3049410839657725, 2.303991006869587, 2.301030403744858, 2.250271947360892, 2.330554146509066, 2.2329508955641475, 2.306286787486048, 2.3034150704353746, 2.3032037745440372], "accuracy": [0.1834632158279419, 0.11015717685222626, 0.10236428678035736, 0.09760929644107819, 0.107647605240345, 0.1690661758184433, 0.11834631860256195, 0.16800950467586517, 0.09985470771789551, 0.09576013684272766, 0.09655263274908066], "val_loss": [3.8603549684797014, 1.9736112185886927, 1.9736544745309013, 1.9727302959987096, 1.9671282087053572, 1.938750880105155, 1.9678500039236886, 1.9785729816981725, 1.9741966383797782, 1.9736956868852888, 1.9735994338989258], "val_accuracy": [0.09700000286102295, 0.10400000214576721, 0.0976666659116745, 0.10266666859388351, 0.09366666525602341, 0.3449999988079071, 0.10400000214576721, 0.10233332961797714, 0.10233332961797714, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1, 1], [6, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [4, 6, 6, 6, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 0, 0, 0], [89, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [1], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 1, 5, 0], [3, 1, 3, 1], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 8, 5, 3, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.subtract(sigma, tf.math.square(tf.math.negative(alpha))), sigma))", "other_info": {"loss": [2.3104117412010376, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08770307898521423, 0.09140139818191528, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0142853600638255, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 0], [3, 2, 2, 9], [2, 2, 2], [31, 57], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [4, 6, 6, 6, 5, 1, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 5, 0, 3, 0, 1, 3, 0, 0, 3, 2], [42, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [9, 3, 8], [3, 0, 0], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 14, 14, 7, 7, 2, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302324077944793, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1], [7, 6, 4, 2, 8, 8, 1, 8, 8, 5, 4, 6, 6, 2, 2, 6, 2, 3, 9, 1, 4, 9, 5, 6, 8, 4, 0, 3, 0, 2, 4, 0, 1, 7, 8, 9, 7, 5, 4, 0, 4, 3, 2, 9, 0, 9, 3, 2, 8, 0, 2, 1, 2, 1, 8, 9], [3, 2, 2, 3], [44, 57, 44, 27, 0, 94, 42, 86, 73, 42, 21, 46, 85, 6, 20, 75], [0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6, 4, 3, 5, 7, 2, 9, 5, 0, 9], [0], [1, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 1, 1], [0, 3], [0, 0], [45, 98]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(alpha, grad), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [29917389.025046118, 562386873.972791, 2619359380.6091666, 7290578102.997227, 15476934381.70704, 28925981557.09523], "accuracy": [0.09602430462837219, 0.09734513610601425, 0.09866596013307571, 0.0952318087220192, 0.10170386731624603, 0.09430722147226334], "val_loss": [112136754.28571428, 896153947.4285715, 3023469056.0, 7165490614.857142, 13993675337.142857, 24179315858.285713], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [4, 6, 6, 6, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 0, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [35], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 3, 3, 6, 9, 2, 6, 1, 7, 7, 0, 6, 3, 9, 1, 5, 3, 8, 7, 8], [3, 1, 3, 1, 3, 2, 1, 1, 3, 0, 3, 0], [45, 38, 96, 11]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 17, 17, 9, 8, 2, 1, 1, 0, 1, 1, 32, 20, 12, 4], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)), grad)), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.square(tf.math.add(beta, alpha))))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, sigma))), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(sigma, tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, alpha)), sigma)), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))))), sigma), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 6, 4, 9, 3, 4, 5, 9, 6, 1, 7, 1, 6, 7, 4, 2, 0, 4, 9, 3, 1, 0, 6, 3, 7, 7, 9, 0, 4, 7, 1, 4, 4, 7, 1, 2, 1, 1, 5, 5, 1, 3, 6, 9, 0, 4, 6, 7, 5, 5, 0, 1, 1, 1, 8, 0, 2, 0, 5, 0, 9, 4, 6, 7, 5, 1, 6, 5], [2, 1, 2, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 2, 3, 0, 1, 3, 2, 0, 1, 1, 3, 3, 0, 2, 2, 1, 2, 2, 0, 3, 1, 1, 3, 0, 3, 2], [44, 57, 88, 27, 0, 44, 42, 35, 73, 42, 46, 86, 85, 6, 20, 59, 93, 8], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1], [9, 6, 6], [3, 1, 3, 1, 0, 1], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [1, 1, 1, 1], [0, 3], [3, 0, 0], [45, 11]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08268392831087112, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2], [44, 57], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 6, 6, 6, 5, 2, 8, 4, 5, 1, 4, 9, 8, 1, 2, 8, 9, 0], [1, 2, 3, 1, 0, 1, 0, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 2, 1, 0, 3, 0], [59, 50, 79]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 8, 6, 1, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(sigma, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [6, 6, 4, 9, 2, 1, 7, 2, 8, 0, 4, 2, 9, 0, 3, 7, 0, 0, 6, 0, 9, 0, 7], [2, 1, 2, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 2, 3, 0, 1, 3, 2, 0, 1, 1, 3, 3, 0, 2, 2, 1, 2, 2, 0, 3, 1, 1, 3, 0, 3, 2], [44, 57, 93, 49, 67, 95, 27], [0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6], [3], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 3, 3, 6, 0, 3], [3, 0, 0, 0, 0], [45, 11, 54, 24]], "fitness": -0.10000000149011612, "mapping_values": [1, 34, 34, 23, 11, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 11, 6, 5, 4], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.pow(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha)))))), tf.math.negative(tf.math.add(tf.math.add(alpha, alpha), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09126931428909302, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [6, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [4, 6, 6, 2, 5, 2, 2, 4, 5, 3, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 3, 0, 1, 1, 0, 0, 0], [54, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 1, 1, 1], [2, 3], [3, 0], [45]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 22, 22, 13, 9, 6, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.pow(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.multiply(tf.math.pow(alpha, tf.math.add(beta, alpha)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301919032837406, 2.30226311493449, 2.3025278164930727, 2.30416230184842, 2.311205135218739, 2.343727114146742], "accuracy": [0.107647605240345, 0.10011887550354004, 0.10830801725387573, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9737189156668526, 1.9740079471043177, 1.9747140748160226, 1.9778245517185755, 1.9921033723013741, 2.0554800033569336], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 0, 1], [5, 6, 4, 9], [3, 2, 3, 1], [44, 57], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [9, 6, 6], [3, 3, 3, 1, 0, 1, 1, 0, 0, 0], [1, 70], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 3, 8, 3, 8], [3, 1, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08268392831087112, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1, 1], [6, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [4, 6, 6, 6, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 1, 1, 0, 0, 0], [1, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [5], [], [0, 0, 0, 1], [0, 3, 9], [3, 3], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.30303372982203, 2.302600551196345, 2.302632946804955, 2.303145781043278, 2.3023600928488346, 2.303357575343128], "accuracy": [0.09272222965955734, 0.08942015469074249, 0.09232597798109055, 0.0878351628780365, 0.08717474341392517, 0.08994849026203156], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1, 1], [6, 6, 4, 9], [1, 2, 2, 3], [44, 57], [0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6, 6, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 1, 1, 0, 0, 0], [1, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [1, 1], [], [1, 0, 1, 1], [0, 3], [3, 0], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 5, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), sigma)), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.30303372982203, 2.302600551196345, 2.302632946804955, 2.303145781043278, 2.3023600928488346, 2.303357575343128], "accuracy": [0.09272222965955734, 0.08942015469074249, 0.09232597798109055, 0.0878351628780365, 0.08717474341392517, 0.08994849026203156], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [7, 6, 4, 5, 3, 4, 8, 4, 6, 1, 7, 1, 6, 7, 4, 2, 0, 4, 9, 3, 1, 0, 6, 3, 7, 7, 9, 0, 4, 7, 1, 4, 4, 7, 1, 2, 1, 1, 5, 5, 1, 3, 6, 9, 0, 4, 6, 7, 5, 5, 0, 1, 1, 1, 8, 0, 2, 0, 5, 0, 9, 4, 6, 7, 5, 1, 6, 5, 4, 9, 1, 6, 6, 7, 0, 5, 0, 7], [2, 1, 2, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 2, 3, 0, 1, 3, 2, 0, 1, 1, 3, 3, 0, 2, 2, 1, 2, 2, 0, 3, 1, 1, 3, 0, 3, 2, 2, 2, 2, 0, 3, 2, 1, 3, 0], [44, 22, 39, 27, 0, 44, 42, 35, 73, 42, 46, 86, 85, 6, 20, 59, 93, 8], [0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6], [3], [1, 70], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [5, 2], [], [0, 0, 1, 1, 1, 1], [0, 3, 9, 4], [3, 0, 0], [45, 11]], "fitness": -0.03999999910593033, "mapping_values": [1, 126, 126, 78, 48, 18, 1, 1, 0, 1, 0, 5, 4, 2, 2, 0, 4, 2, 2, 1], "tree_depth": 82, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, alpha)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(tf.math.add(tf.math.subtract(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, grad))))))), tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.negative(alpha)))), tf.math.add(alpha, grad)), grad)), tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(grad))), alpha))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30303372982203, 2.302600551196345, 2.302632946804955, 2.303145781043278, 2.3023600928488346, 2.303357575343128], "accuracy": [0.09272222965955734, 0.08942015469074249, 0.09232597798109055, 0.0878351628780365, 0.08717474341392517, 0.08994849026203156], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 1], [1, 0, 0, 1, 1], [4, 6, 6], [3], [1, 70], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [5, 5], [], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0], [0, 3, 5, 3, 8], [3, 0, 2], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 5, 4, 2, 2, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.30303372982203, 2.302600551196345, 2.302632946804955, 2.303145781043278, 2.3023600928488346, 2.303357575343128], "accuracy": [0.09272222965955734, 0.08942015469074249, 0.09232597798109055, 0.0878351628780365, 0.08717474341392517, 0.08994849026203156], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [3, 2, 2, 3], [44, 57, 55], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [4, 6, 6, 2, 5, 3, 2, 4, 5, 8, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 3, 1, 0, 0, 0], [54, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [3], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9], [3, 0], [45]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)), grad)), tf.math.add(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.square(tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.30303372982203, 2.302600551196345, 2.302632946804955, 2.303145781043278, 2.3023600928488346, 2.303357575343128], "accuracy": [0.09272222965955734, 0.08942015469074249, 0.09232597798109055, 0.0878351628780365, 0.08717474341392517, 0.08994849026203156], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]