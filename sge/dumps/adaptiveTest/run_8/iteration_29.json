[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.7639999985694885, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.026780843671759, 1.3651647341643436, 1.0341952194737374, 0.8743575191406479, 0.7620069157209662, 0.763202513449889, 0.718885577546922, 0.6727085796880716, 0.6724552017602277, 0.655611191703155, 0.6297009178219438], "accuracy": [0.32003697752952576, 0.5085193514823914, 0.6252806782722473, 0.6749438643455505, 0.7100779414176941, 0.7096816897392273, 0.722229540348053, 0.741909921169281, 0.7368907928466797, 0.7449478507041931, 0.754589855670929], "val_loss": [1.1193902492523193, 0.8554174048560006, 0.8205880267279488, 0.6096815552030291, 0.6029562950134277, 0.527778046471732, 0.5417685508728027, 0.5221882547651019, 0.5683373894010272, 0.5347444670540946, 0.5063888856342861], "val_accuracy": [0.49266666173934937, 0.6589999794960022, 0.6666666865348816, 0.7210000157356262, 0.7123333215713501, 0.7749999761581421, 0.7573333382606506, 0.7716666460037231, 0.7353333234786987, 0.7580000162124634, 0.7730000019073486]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 3, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 2, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 1, 1, 3, 3, 0], [42, 65, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [4, 2, 3, 6, 9, 8], [3, 2, 0, 1, 3], [8, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 13, 13, 7, 6, 4, 1, 0, 0, 0, 0, 9, 5, 4, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(sigma, beta), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.311356640573758, 2.6659294157893574, 75.19050027426319, 756.4212669863315, 1663.064948145834, 2494.038889237871, 3293.240367683327, 4127.716105374331], "accuracy": [0.09708096832036972, 0.09840179979801178, 0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.046537126813616, 3.736131395612444, 330.8802751813616, 1131.6715611049108, 1881.4408482142858, 2578.542898995536, 3275.359444754464, 4039.9990234375], "val_accuracy": [0.0976666659116745, 0.09700000286102295, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [2, 6, 4, 9, 4], [0, 3, 2, 3], [44, 57, 63, 98, 28], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 1, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 1, 3, 1, 0, 0, 2, 3, 0, 0], [15, 85, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [85], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 4, 1, 2, 5, 3, 7], [3, 3, 3, 1, 2, 3], [10, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 19, 19, 9, 10, 4, 1, 1, 0, 1, 0, 9, 4, 5, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, alpha)))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), grad)), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.pow(sigma, tf.math.subtract(sigma, sigma)), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [6, 6, 4, 9], [0, 2, 2, 3], [44, 57, 63, 98, 28], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [1, 1, 6, 6, 3, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [15, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [85], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [3, 3, 4, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [3, 1, 2, 1, 1, 1, 2, 1, 3, 1, 3], [10, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 19, 19, 9, 10, 2, 1, 1, 0, 1, 0, 10, 6, 4, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), alpha)), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.pow(sigma, tf.math.sqrt(tf.math.square(alpha))), tf.math.square(beta)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [1, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 1, 6, 1, 5, 9, 1, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [6, 3, 3, 6, 9], [3, 3, 3, 1], [29, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 9, 5, 4, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, tf.math.subtract(tf.math.square(grad), tf.math.add(beta, alpha)))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.303695745188499, 2.30303790033643, 2.3030395949631632, 2.3030394471757654, 2.303039450041449, 2.3030393773601543], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736037254333496, 1.973602635519845, 1.9736028398786272, 1.9736028398786272, 1.9736028398786272, 1.9736028398786272], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [7, 6, 4, 0, 5, 6, 1, 7], [0, 2, 2, 3, 1, 1, 2], [44, 57], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 2, 3, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 1, 3, 0, 1, 3, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [14], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0], [2, 3, 4, 1, 9], [2, 3, 1, 1, 0], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 1, 7, 7, 3, 4, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(beta, tf.math.add(beta, grad))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09509972482919693, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [0, 3, 2, 3], [44, 57], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 0, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [0, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, grad)), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma), sigma), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [21761.513243638576, 406451.3977512878, 1880831.4228965791, 5236951.457601374, 11036464.489499405, 20522061.553823803], "accuracy": [0.09879804402589798, 0.10342095047235489, 0.09853387624025345, 0.09602430462837219, 0.09681680053472519, 0.09774138033390045], "val_loss": [81479.875, 643416.1964285715, 2162687.214285714, 5116165.0, 9980726.857142856, 17233263.42857143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [8, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [5, 2, 6, 6, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [2, 3], [4, 0], [28], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1, 0], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 18, 18, 10, 8, 2, 5, 4, 2, 2, 1, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), alpha)))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2724.221868793805, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09126931428909302, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [21243.73660714286, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [7, 6, 4, 0, 5, 3, 1, 7], [2, 0, 2, 3, 0, 3, 0], [48, 70, 57], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 2, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 0, 1, 3, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [14], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [2, 3, 4, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 3, 21, 21, 11, 10, 5, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [5.235686513174952, 31.897327638242412, 97.39712307151157, 218.52448445326303, 406.06476683409426, 698.1081524346215], "accuracy": [0.09787346422672272, 0.10249637067317963, 0.09853387624025345, 0.09615638852119446, 0.09708096832036972, 0.09800554811954498], "val_loss": [9.863481521606445, 39.283865792410715, 98.21781921386719, 197.5290309361049, 349.62794712611606, 568.1060442243304], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [0, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [17, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 9, 3, 6, 9], [3, 3, 3, 1], [61, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(grad, alpha)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [940123817.1615509, 17973918213.477745, 83700067407.9345, 233684553923.30524, 493210099048.7196, 917982505473.1497], "accuracy": [0.09853387624025345, 0.10315678268671036, 0.09866596013307571, 0.09576013684272766, 0.09655263274908066, 0.09774138033390045], "val_loss": [3572330496.0, 28569270564.57143, 96410781988.57143, 228518592512.0, 446309896777.1429, 771196715008.0], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [0, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], [5, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [15, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [1], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [3, 3, 4, 6, 5, 5, 5, 7], [3, 0, 3, 2, 1], [21, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 20, 20, 11, 9, 2, 1, 0, 0, 0, 0, 11, 6, 5, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, alpha)))))), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(sigma, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), sigma), tf.math.square(beta)), tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 9, 2, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 2, 0, 3, 1, 2, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 19, 19, 10, 9, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, grad), alpha)))))))))), tf.math.add(beta, beta))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07568352669477463, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [5, 6, 4, 6, 4, 4, 4, 7, 0, 8, 3, 2, 5, 2, 9, 0, 2, 3, 3, 0], [2, 3, 2, 3], [44, 57], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 2, 6, 6, 1, 1, 0, 4, 2, 5, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 2, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [85], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [3, 3, 4, 6, 5, 5, 5, 7, 4, 1, 8, 5, 7], [3, 3, 3, 1, 3, 2, 1, 0, 1], [10, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 22, 13, 9, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(sigma, tf.math.pow(sigma, tf.math.divide_no_nan(tf.math.square(tf.math.square(sigma)), tf.math.square(tf.math.add(alpha, sigma))))), tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.math.square(beta)), alpha), tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 1, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 3, 3, 6, 9, 5], [3, 3, 1, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 21, 21, 12, 9, 2, 1, 1, 0, 1, 0, 9, 6, 3, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha))))))))), tf.math.add(beta, alpha)), tf.math.add(beta, alpha))), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.square(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0], [5, 6, 4, 6, 4, 4, 4, 7, 0, 8, 3, 2, 5, 2, 9, 0, 2, 3, 3, 0], [0, 1, 2, 3, 3, 2, 1, 2, 2, 3, 1, 2, 0, 2, 0], [44, 57, 63, 98, 28], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 2, 3, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 3, 0, 1, 1, 3, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 0, 0], [1, 0, 1, 0], [3, 7, 9], [1], [47], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 6, 4, 5, 5, 7, 4, 9, 8, 3], [2, 3, 1, 1, 3, 2], [34, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 12, 6, 6, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.math.pow(sigma, tf.math.divide_no_nan(tf.math.pow(alpha, alpha), tf.math.square(sigma)))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [5, 6, 4, 9], [0, 1, 2, 3], [44, 57], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 8, 0, 4, 2, 5, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [6, 3, 5, 4, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.0762857124209404, "mapping_values": [1, 2, 2, 1, 1, 1, 17, 17, 9, 8, 1, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(alpha, tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(sigma), sigma), sigma)", "other_info": {"loss": [2.3005197854042683, 2.3014715990417463, 2.301328380865869, 2.3005842246777504, 2.29941369775201, 2.300798596108925, 2.3000048543987743, 2.3003965106228983, 2.2993277009798474, 2.299702371572853, 2.2995857061601, 2.2992797193274033, 2.2998442744314396, 2.2992559139046134, 2.300119906085247], "accuracy": [0.09298639744520187, 0.09259014576673508, 0.09325055778026581, 0.09259014576673508, 0.09747721254825592, 0.0874389111995697, 0.09787346422672272, 0.09576013684272766, 0.09959053993225098, 0.0956280529499054, 0.09840179979801178, 0.1072513535618782, 0.09721305221319199, 0.10130762308835983, 0.0944393053650856], "val_loss": [1.9698246547154017, 1.9693975448608398, 1.9691527911594935, 1.9690581730433874, 1.9691647802080428, 1.969223976135254, 1.9691674368722099, 1.9690358298165458, 1.969043799809047, 1.9691590581621443, 1.9693029948643275, 1.969475337437221, 1.9697630746023995, 1.9700719969613212, 1.9702957698277064], "val_accuracy": [0.047333333641290665, 0.052666667848825455, 0.058666665107011795, 0.061000000685453415, 0.06233333423733711, 0.06333333253860474, 0.07066666334867477, 0.07800000160932541, 0.07766667008399963, 0.07833333313465118, 0.07633333653211594, 0.07333333045244217, 0.07066666334867477, 0.06866666674613953, 0.06833333522081375]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [7, 6, 4, 9, 0, 4, 5, 9], [0, 2, 2, 3], [70, 57, 63, 98, 28], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [1, 2, 3, 6, 1, 1, 5, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 0, 0], [15, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [85], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [8, 3, 4, 6, 5, 5, 5, 7], [3, 3, 1, 2, 3], [61, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 8, 8, 5, 3, 2, 23, 23, 13, 10, 4, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(grad, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, alpha)))), tf.math.add(beta, alpha)), tf.math.add(beta, grad))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [2.300915482872119, 2.3026891925536157, 2.3030854705585826, 2.3025823157492757, 2.301229386392003, 2.3029782085559782], "accuracy": [0.09192973375320435, 0.09153348207473755, 0.0870426595211029, 0.08849557489156723, 0.09298639744520187, 0.08532558381557465], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 3, 1, 1, 3, 3, 0], [42, 91, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 3, 3, 6, 9, 5, 4, 4, 4, 5, 4, 6, 7, 5, 6, 8, 8, 4, 4, 2, 6, 5, 6, 8, 1, 7, 0], [3, 3, 3, 1, 2, 1, 2, 0, 3, 0, 0, 0, 1, 3, 0, 0, 1, 3], [50, 38, 88, 81, 86, 34, 60]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 27, 27, 17, 10, 4, 1, 0, 0, 0, 0, 45, 27, 18, 7], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), sigma), tf.math.square(sigma)), tf.math.pow(tf.math.pow(tf.math.pow(tf.math.square(alpha), tf.math.pow(beta, tf.math.divide_no_nan(tf.math.add(tf.math.square(alpha), beta), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(sigma)), tf.math.pow(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.math.subtract(sigma, tf.math.add(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), alpha))))), sigma)))", "other_info": {"loss": [2.300915482872119, 2.3026891925536157, 2.3030854705585826, 2.3025823157492757, 2.301229386392003, 2.3029782085559782], "accuracy": [0.09192973375320435, 0.09153348207473755, 0.0870426595211029, 0.08849557489156723, 0.09298639744520187, 0.08532558381557465], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0], [5, 6, 4, 6, 4, 4, 4, 7, 0, 8, 3, 2, 5, 2, 9, 0, 2, 3, 3, 0], [3, 1, 2, 3, 3, 2, 1, 2, 2, 3, 1, 2, 0, 2, 0], [44, 57, 63, 98, 28], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 7, 9], [4, 7], [35], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0], [4, 3, 6, 6, 9], [3, 3, 3, 1], [10, 38]], "fitness": -0.03742857277393341, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3013785040972174, 2.3044895227669318, 2.306945600624271, 2.308273101952003, 2.3089836425690557, 2.3145680684518064], "accuracy": [0.09192973375320435, 0.08717474341392517, 0.08321225643157959, 0.08109892904758453, 0.08545766770839691, 0.07370228320360184], "val_loss": [1.971644333430699, 1.972829818725586, 1.9745100566319056, 1.976301942552839, 1.9781650815691267, 1.980661255972726], "val_accuracy": [0.03266666829586029, 0.03099999949336052, 0.02800000086426735, 0.02666666731238365, 0.026333333924412727, 0.029333332553505898]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 1, 2, 3], [24, 57], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [1, 8, 6, 6, 5, 2, 2, 5, 4, 4, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 2, 1, 1, 3, 0, 3, 2], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 1, 1, 1], [3, 3], [4, 1], [], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 2, 6, 0, 9, 6, 2, 3, 1, 6, 7, 7, 9, 0, 9, 4, 9, 6, 1, 4, 1, 4, 8, 4, 4, 8, 1], [3, 1, 1, 1], [97, 38]], "fitness": -0.037142857909202576, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 0, 3, 3, 1, 2, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3014234935980684, 2.304685141132996, 2.3072982755839124, 2.308794693593509, 2.3096820002517933, 2.3154722490425295], "accuracy": [0.09153348207473755, 0.08677849918603897, 0.08255184441804886, 0.08057060092687607, 0.08585391938686371, 0.07357019931077957], "val_loss": [1.9717610222952706, 1.9731146948678153, 1.974940640585763, 1.9769133159092493, 1.9788992745535714, 1.981649739401681], "val_accuracy": [0.03166666626930237, 0.029999999329447746, 0.0273333340883255, 0.02566666714847088, 0.026000000536441803, 0.028333334252238274]}}]