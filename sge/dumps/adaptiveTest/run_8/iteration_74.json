[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [7, 4, 2, 4, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 1, 2, 3, 3, 0], [28, 16, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [56, 38]], "fitness": -0.7937142848968506, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 2, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(grad, tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.pow(tf.math.negative(grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.235233653002663, 1.8573262861234447, 1.3321893926089419, 1.103058675323983, 0.9820501455509935, 0.9019406114224792, 0.878905881940728, 0.8276777840120414, 0.8025491461462868, 0.7650776421625411, 0.7528715782146003, 0.7312712566003257, 0.7205576359194347, 0.7043234557917153, 0.691024846341616, 0.6774389861266469, 0.6846157264684279, 0.6833853037318597, 0.6618100424027635, 0.6413920999297597, 0.6315997051619551, 0.6316021897805097, 0.6263294201312268, 0.630453976949035, 0.6130465750665303, 0.6054043837620865, 0.6140563455728287, 0.601731395291583, 0.5918999026952528, 0.6005864420492636, 0.5927569637555551, 0.5908148775735567, 0.5721653877956646, 0.5761394204795479], "accuracy": [0.2312772423028946, 0.4407607913017273, 0.5515784025192261, 0.6108836531639099, 0.653150200843811, 0.6770572066307068, 0.6833971738815308, 0.7033417224884033, 0.7008321285247803, 0.7234182953834534, 0.7205125093460083, 0.735569953918457, 0.7376832365989685, 0.7421740889549255, 0.7446836829185486, 0.7460044622421265, 0.7457403540611267, 0.7470611333847046, 0.7543256878852844, 0.7626469135284424, 0.7648923397064209, 0.7633073329925537, 0.7646281719207764, 0.765949010848999, 0.7769119143486023, 0.7757231593132019, 0.7714964747428894, 0.7754589915275574, 0.7770439982414246, 0.7734777331352234, 0.7884030938148499, 0.7786290049552917, 0.7885351777076721, 0.7823272943496704], "val_loss": [1.7696640150887626, 1.1583373546600342, 0.8345039061137608, 0.7537881987435477, 0.6498010669435773, 0.648735659463065, 0.6026865243911743, 0.5867847544806344, 0.5684219769069127, 0.5579101528440203, 0.5397763592856271, 0.5318445648465838, 0.520602890423366, 0.5031308446611676, 0.5020316328321185, 0.5004750319889614, 0.5056236812046596, 0.4986191136496408, 0.48105859756469727, 0.47260068144117084, 0.48489735807691303, 0.47910715852464947, 0.4677492209843227, 0.47624899659837994, 0.4699482577187674, 0.47374558448791504, 0.45349874666758944, 0.46517605440957205, 0.4542186771120344, 0.4560356480734689, 0.4570108311516898, 0.45140041623796734, 0.4443395137786865, 0.4395192691258022], "val_accuracy": [0.49033331871032715, 0.6209999918937683, 0.6663333177566528, 0.6793333292007446, 0.722000002861023, 0.7196666598320007, 0.7473333477973938, 0.7509999871253967, 0.762333333492279, 0.7630000114440918, 0.778333306312561, 0.765666663646698, 0.7836666703224182, 0.7853333353996277, 0.7856666445732117, 0.7723333239555359, 0.7789999842643738, 0.7919999957084656, 0.7926666736602783, 0.7979999780654907, 0.7910000085830688, 0.796999990940094, 0.7933333516120911, 0.7923333048820496, 0.8063333630561829, 0.7889999747276306, 0.8140000104904175, 0.815666675567627, 0.8176666498184204, 0.8086666464805603, 0.812666654586792, 0.8036666512489319, 0.8173333406448364, 0.812666654586792]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [7, 4, 2, 4, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [41, 38]], "fitness": -0.7685714364051819, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 3, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.2909843779321926, 2.262384460051424, 2.231321294341404, 2.1861859116776587, 2.126035882434384, 2.0400024796237624, 1.9316486728315765, 1.800620349186318, 1.6625070672985616, 1.5310567504048678, 1.420667190593326, 1.3307102846352967, 1.2568482687570603, 1.2070996133075997, 1.150126321724204, 1.11152443346047, 1.0863271531742547, 1.048290714186574, 1.0096263337396691, 0.9904901329961829, 0.9579329917601244, 0.9463854000757651, 0.9381436437994277, 0.919245403991667, 0.9044206755870778, 0.8825908186901452, 0.8799272271478653, 0.8786485686971055, 0.860244241010842, 0.848239614790016, 0.844668543365543, 0.8366076786520301, 0.8145553775435788, 0.8163694720289664, 0.8112004166187281, 0.8007272351151837, 0.7980018681019304, 0.7872710526265079, 0.7939711810969059, 0.7755165059552956, 0.7795880826047666, 0.7671025847604546, 0.7592807853651746, 0.7581394403570632, 0.7438110449074471, 0.7487928242006984, 0.7490125270315591, 0.7483441881169228, 0.7412797541760686, 0.7353341865375798, 0.7293803948437171, 0.7208647276463683, 0.7304393498023046, 0.7147591508862963, 0.7129205961143021, 0.7169694780295692, 0.712041955976092, 0.7037958152746685, 0.7139921206540562, 0.7113335077489576, 0.6972494771325939, 0.7013128307344041, 0.6901063814202257, 0.6873683979277913, 0.682600597254494, 0.6937694398954701, 0.679157528579983, 0.6726464761514327, 0.675926674760139], "accuracy": [0.11266675591468811, 0.19376568496227264, 0.26099589467048645, 0.31898030638694763, 0.3645489513874054, 0.40509840846061707, 0.4361378848552704, 0.4644036591053009, 0.48064985871315, 0.5099722743034363, 0.5355963706970215, 0.5514463186264038, 0.5735041499137878, 0.5819574594497681, 0.603090763092041, 0.6139215230941772, 0.6170915365219116, 0.6325452327728271, 0.6448289752006531, 0.6568484902381897, 0.6580372452735901, 0.6601505875587463, 0.6679434776306152, 0.6690001487731934, 0.6748117804527283, 0.6843217611312866, 0.6892088055610657, 0.6836613416671753, 0.6910579800605774, 0.6927750706672668, 0.6960771083831787, 0.6975300312042236, 0.7088891863822937, 0.7069079279899597, 0.7092854380607605, 0.7150970697402954, 0.7112666964530945, 0.7189275026321411, 0.7116629481315613, 0.7219653725624084, 0.7217012047767639, 0.7264562249183655, 0.724739134311676, 0.7289658188819885, 0.7284374833106995, 0.7312111854553223, 0.7276449799537659, 0.7277770638465881, 0.7300224304199219, 0.7277770638465881, 0.735569953918457, 0.7384757399559021, 0.7357020378112793, 0.7367587089538574, 0.7388719916343689, 0.7342491149902344, 0.7364945411682129, 0.7403249144554138, 0.7467969655990601, 0.7440232634544373, 0.744419515132904, 0.746268630027771, 0.748778223991394, 0.7503632307052612, 0.7518161535263062, 0.7437590956687927, 0.7516840696334839, 0.7588165402412415, 0.7536653280258179], "val_loss": [1.9438214983258928, 1.9153477123805456, 1.8792244366237096, 1.8295660700116838, 1.7595084054129464, 1.6628248350960868, 1.5402061939239502, 1.4013452189309257, 1.261533158166068, 1.1353062220982142, 1.0321245534079415, 0.9518745286124093, 0.8897015026637486, 0.84271810735975, 0.8044476338795253, 0.7701854876109532, 0.747747506414141, 0.7254749366215297, 0.7030819824763707, 0.6859325000217983, 0.6687809910093035, 0.6567256110055106, 0.6453298160008022, 0.63642304284232, 0.6292217288698468, 0.618524432182312, 0.6098284721374512, 0.6064193248748779, 0.5996504340853009, 0.5925452709197998, 0.5871659346989223, 0.5816029480525425, 0.5754787240709577, 0.5718233925955636, 0.5676913091114589, 0.5625924723488944, 0.5598772593906948, 0.5542182752064296, 0.5527959891727993, 0.5466694150652204, 0.5450289760317121, 0.5418178694588798, 0.5383865492684501, 0.5352352006094796, 0.5326552391052246, 0.5300288540976388, 0.5281450407845634, 0.5256997857775006, 0.5231284924915859, 0.5200979369027274, 0.5183885778699603, 0.514823487826756, 0.5146899734224591, 0.5114764826638358, 0.5112007686070034, 0.5072487933295113, 0.506170494215829, 0.5047798837934222, 0.5034137112753732, 0.5022399425506592, 0.5004474265234811, 0.49818975584847586, 0.49659151690346853, 0.49527748993464876, 0.4944474867412022, 0.4922044106892177, 0.4896918705531529, 0.48791095188685824, 0.48793801239558626], "val_accuracy": [0.2770000100135803, 0.3930000066757202, 0.4423333406448364, 0.4740000069141388, 0.5253333449363708, 0.5496666431427002, 0.5669999718666077, 0.5806666612625122, 0.6056666374206543, 0.640666663646698, 0.6596666574478149, 0.671999990940094, 0.6886666417121887, 0.6933333277702332, 0.703000009059906, 0.7059999704360962, 0.7139999866485596, 0.7143333554267883, 0.7120000123977661, 0.722000002861023, 0.7279999852180481, 0.734666645526886, 0.7336666584014893, 0.7409999966621399, 0.7419999837875366, 0.7446666955947876, 0.750333309173584, 0.753000020980835, 0.753000020980835, 0.7523333430290222, 0.7566666603088379, 0.7613333463668823, 0.7613333463668823, 0.7663333415985107, 0.7649999856948853, 0.7676666378974915, 0.765666663646698, 0.7696666717529297, 0.7696666717529297, 0.7726666927337646, 0.7733333110809326, 0.7753333449363708, 0.7739999890327454, 0.7756666541099548, 0.7749999761581421, 0.7763333320617676, 0.7799999713897705, 0.778333306312561, 0.7826666831970215, 0.7839999794960022, 0.781000018119812, 0.784333348274231, 0.7826666831970215, 0.7846666574478149, 0.7820000052452087, 0.7900000214576721, 0.7870000004768372, 0.7850000262260437, 0.7886666655540466, 0.7900000214576721, 0.7903333306312561, 0.7923333048820496, 0.7906666398048401, 0.7946666479110718, 0.7929999828338623, 0.7940000295639038, 0.7929999828338623, 0.7940000295639038, 0.7929999828338623]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [7, 9, 2, 4, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 3, 1, 2, 3, 3, 0], [37, 60, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [41, 38]], "fitness": -0.7685714364051819, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 3, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.2909843779321926, 2.262384460051424, 2.231321294341404, 2.1861859116776587, 2.126035882434384, 2.0400024796237624, 1.9316486728315765, 1.800620349186318, 1.6625070672985616, 1.5310567504048678, 1.420667190593326, 1.3307102846352967, 1.2568482687570603, 1.2070996133075997, 1.150126321724204, 1.11152443346047, 1.0863271531742547, 1.048290714186574, 1.0096263337396691, 0.9904901329961829, 0.9579329917601244, 0.9463854000757651, 0.9381436437994277, 0.919245403991667, 0.9044206755870778, 0.8825908186901452, 0.8799272271478653, 0.8786485686971055, 0.860244241010842, 0.848239614790016, 0.844668543365543, 0.8366076786520301, 0.8145553775435788, 0.8163694720289664, 0.8112004166187281, 0.8007272351151837, 0.7980018681019304, 0.7872710526265079, 0.7939711810969059, 0.7755165059552956, 0.7795880826047666, 0.7671025847604546, 0.7592807853651746, 0.7581394403570632, 0.7438110449074471, 0.7487928242006984, 0.7490125270315591, 0.7483441881169228, 0.7412797541760686, 0.7353341865375798, 0.7293803948437171, 0.7208647276463683, 0.7304393498023046, 0.7147591508862963, 0.7129205961143021, 0.7169694780295692, 0.712041955976092, 0.7037958152746685, 0.7139921206540562, 0.7113335077489576, 0.6972494771325939, 0.7013128307344041, 0.6901063814202257, 0.6873683979277913, 0.682600597254494, 0.6937694398954701, 0.679157528579983, 0.6726464761514327, 0.675926674760139], "accuracy": [0.11266675591468811, 0.19376568496227264, 0.26099589467048645, 0.31898030638694763, 0.3645489513874054, 0.40509840846061707, 0.4361378848552704, 0.4644036591053009, 0.48064985871315, 0.5099722743034363, 0.5355963706970215, 0.5514463186264038, 0.5735041499137878, 0.5819574594497681, 0.603090763092041, 0.6139215230941772, 0.6170915365219116, 0.6325452327728271, 0.6448289752006531, 0.6568484902381897, 0.6580372452735901, 0.6601505875587463, 0.6679434776306152, 0.6690001487731934, 0.6748117804527283, 0.6843217611312866, 0.6892088055610657, 0.6836613416671753, 0.6910579800605774, 0.6927750706672668, 0.6960771083831787, 0.6975300312042236, 0.7088891863822937, 0.7069079279899597, 0.7092854380607605, 0.7150970697402954, 0.7112666964530945, 0.7189275026321411, 0.7116629481315613, 0.7219653725624084, 0.7217012047767639, 0.7264562249183655, 0.724739134311676, 0.7289658188819885, 0.7284374833106995, 0.7312111854553223, 0.7276449799537659, 0.7277770638465881, 0.7300224304199219, 0.7277770638465881, 0.735569953918457, 0.7384757399559021, 0.7357020378112793, 0.7367587089538574, 0.7388719916343689, 0.7342491149902344, 0.7364945411682129, 0.7403249144554138, 0.7467969655990601, 0.7440232634544373, 0.744419515132904, 0.746268630027771, 0.748778223991394, 0.7503632307052612, 0.7518161535263062, 0.7437590956687927, 0.7516840696334839, 0.7588165402412415, 0.7536653280258179], "val_loss": [1.9438214983258928, 1.9153477123805456, 1.8792244366237096, 1.8295660700116838, 1.7595084054129464, 1.6628248350960868, 1.5402061939239502, 1.4013452189309257, 1.261533158166068, 1.1353062220982142, 1.0321245534079415, 0.9518745286124093, 0.8897015026637486, 0.84271810735975, 0.8044476338795253, 0.7701854876109532, 0.747747506414141, 0.7254749366215297, 0.7030819824763707, 0.6859325000217983, 0.6687809910093035, 0.6567256110055106, 0.6453298160008022, 0.63642304284232, 0.6292217288698468, 0.618524432182312, 0.6098284721374512, 0.6064193248748779, 0.5996504340853009, 0.5925452709197998, 0.5871659346989223, 0.5816029480525425, 0.5754787240709577, 0.5718233925955636, 0.5676913091114589, 0.5625924723488944, 0.5598772593906948, 0.5542182752064296, 0.5527959891727993, 0.5466694150652204, 0.5450289760317121, 0.5418178694588798, 0.5383865492684501, 0.5352352006094796, 0.5326552391052246, 0.5300288540976388, 0.5281450407845634, 0.5256997857775006, 0.5231284924915859, 0.5200979369027274, 0.5183885778699603, 0.514823487826756, 0.5146899734224591, 0.5114764826638358, 0.5112007686070034, 0.5072487933295113, 0.506170494215829, 0.5047798837934222, 0.5034137112753732, 0.5022399425506592, 0.5004474265234811, 0.49818975584847586, 0.49659151690346853, 0.49527748993464876, 0.4944474867412022, 0.4922044106892177, 0.4896918705531529, 0.48791095188685824, 0.48793801239558626], "val_accuracy": [0.2770000100135803, 0.3930000066757202, 0.4423333406448364, 0.4740000069141388, 0.5253333449363708, 0.5496666431427002, 0.5669999718666077, 0.5806666612625122, 0.6056666374206543, 0.640666663646698, 0.6596666574478149, 0.671999990940094, 0.6886666417121887, 0.6933333277702332, 0.703000009059906, 0.7059999704360962, 0.7139999866485596, 0.7143333554267883, 0.7120000123977661, 0.722000002861023, 0.7279999852180481, 0.734666645526886, 0.7336666584014893, 0.7409999966621399, 0.7419999837875366, 0.7446666955947876, 0.750333309173584, 0.753000020980835, 0.753000020980835, 0.7523333430290222, 0.7566666603088379, 0.7613333463668823, 0.7613333463668823, 0.7663333415985107, 0.7649999856948853, 0.7676666378974915, 0.765666663646698, 0.7696666717529297, 0.7696666717529297, 0.7726666927337646, 0.7733333110809326, 0.7753333449363708, 0.7739999890327454, 0.7756666541099548, 0.7749999761581421, 0.7763333320617676, 0.7799999713897705, 0.778333306312561, 0.7826666831970215, 0.7839999794960022, 0.781000018119812, 0.784333348274231, 0.7826666831970215, 0.7846666574478149, 0.7820000052452087, 0.7900000214576721, 0.7870000004768372, 0.7850000262260437, 0.7886666655540466, 0.7900000214576721, 0.7903333306312561, 0.7923333048820496, 0.7906666398048401, 0.7946666479110718, 0.7929999828338623, 0.7940000295639038, 0.7929999828338623, 0.7940000295639038, 0.7929999828338623]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [7, 4, 2, 4, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 40, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [41, 38]], "fitness": -0.7685714364051819, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 3, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), alpha), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.2909843779321926, 2.262384460051424, 2.231321294341404, 2.1861859116776587, 2.126035882434384, 2.0400024796237624, 1.9316486728315765, 1.800620349186318, 1.6625070672985616, 1.5310567504048678, 1.420667190593326, 1.3307102846352967, 1.2568482687570603, 1.2070996133075997, 1.150126321724204, 1.11152443346047, 1.0863271531742547, 1.048290714186574, 1.0096263337396691, 0.9904901329961829, 0.9579329917601244, 0.9463854000757651, 0.9381436437994277, 0.919245403991667, 0.9044206755870778, 0.8825908186901452, 0.8799272271478653, 0.8786485686971055, 0.860244241010842, 0.848239614790016, 0.844668543365543, 0.8366076786520301, 0.8145553775435788, 0.8163694720289664, 0.8112004166187281, 0.8007272351151837, 0.7980018681019304, 0.7872710526265079, 0.7939711810969059, 0.7755165059552956, 0.7795880826047666, 0.7671025847604546, 0.7592807853651746, 0.7581394403570632, 0.7438110449074471, 0.7487928242006984, 0.7490125270315591, 0.7483441881169228, 0.7412797541760686, 0.7353341865375798, 0.7293803948437171, 0.7208647276463683, 0.7304393498023046, 0.7147591508862963, 0.7129205961143021, 0.7169694780295692, 0.712041955976092, 0.7037958152746685, 0.7139921206540562, 0.7113335077489576, 0.6972494771325939, 0.7013128307344041, 0.6901063814202257, 0.6873683979277913, 0.682600597254494, 0.6937694398954701, 0.679157528579983, 0.6726464761514327, 0.675926674760139], "accuracy": [0.11266675591468811, 0.19376568496227264, 0.26099589467048645, 0.31898030638694763, 0.3645489513874054, 0.40509840846061707, 0.4361378848552704, 0.4644036591053009, 0.48064985871315, 0.5099722743034363, 0.5355963706970215, 0.5514463186264038, 0.5735041499137878, 0.5819574594497681, 0.603090763092041, 0.6139215230941772, 0.6170915365219116, 0.6325452327728271, 0.6448289752006531, 0.6568484902381897, 0.6580372452735901, 0.6601505875587463, 0.6679434776306152, 0.6690001487731934, 0.6748117804527283, 0.6843217611312866, 0.6892088055610657, 0.6836613416671753, 0.6910579800605774, 0.6927750706672668, 0.6960771083831787, 0.6975300312042236, 0.7088891863822937, 0.7069079279899597, 0.7092854380607605, 0.7150970697402954, 0.7112666964530945, 0.7189275026321411, 0.7116629481315613, 0.7219653725624084, 0.7217012047767639, 0.7264562249183655, 0.724739134311676, 0.7289658188819885, 0.7284374833106995, 0.7312111854553223, 0.7276449799537659, 0.7277770638465881, 0.7300224304199219, 0.7277770638465881, 0.735569953918457, 0.7384757399559021, 0.7357020378112793, 0.7367587089538574, 0.7388719916343689, 0.7342491149902344, 0.7364945411682129, 0.7403249144554138, 0.7467969655990601, 0.7440232634544373, 0.744419515132904, 0.746268630027771, 0.748778223991394, 0.7503632307052612, 0.7518161535263062, 0.7437590956687927, 0.7516840696334839, 0.7588165402412415, 0.7536653280258179], "val_loss": [1.9438214983258928, 1.9153477123805456, 1.8792244366237096, 1.8295660700116838, 1.7595084054129464, 1.6628248350960868, 1.5402061939239502, 1.4013452189309257, 1.261533158166068, 1.1353062220982142, 1.0321245534079415, 0.9518745286124093, 0.8897015026637486, 0.84271810735975, 0.8044476338795253, 0.7701854876109532, 0.747747506414141, 0.7254749366215297, 0.7030819824763707, 0.6859325000217983, 0.6687809910093035, 0.6567256110055106, 0.6453298160008022, 0.63642304284232, 0.6292217288698468, 0.618524432182312, 0.6098284721374512, 0.6064193248748779, 0.5996504340853009, 0.5925452709197998, 0.5871659346989223, 0.5816029480525425, 0.5754787240709577, 0.5718233925955636, 0.5676913091114589, 0.5625924723488944, 0.5598772593906948, 0.5542182752064296, 0.5527959891727993, 0.5466694150652204, 0.5450289760317121, 0.5418178694588798, 0.5383865492684501, 0.5352352006094796, 0.5326552391052246, 0.5300288540976388, 0.5281450407845634, 0.5256997857775006, 0.5231284924915859, 0.5200979369027274, 0.5183885778699603, 0.514823487826756, 0.5146899734224591, 0.5114764826638358, 0.5112007686070034, 0.5072487933295113, 0.506170494215829, 0.5047798837934222, 0.5034137112753732, 0.5022399425506592, 0.5004474265234811, 0.49818975584847586, 0.49659151690346853, 0.49527748993464876, 0.4944474867412022, 0.4922044106892177, 0.4896918705531529, 0.48791095188685824, 0.48793801239558626], "val_accuracy": [0.2770000100135803, 0.3930000066757202, 0.4423333406448364, 0.4740000069141388, 0.5253333449363708, 0.5496666431427002, 0.5669999718666077, 0.5806666612625122, 0.6056666374206543, 0.640666663646698, 0.6596666574478149, 0.671999990940094, 0.6886666417121887, 0.6933333277702332, 0.703000009059906, 0.7059999704360962, 0.7139999866485596, 0.7143333554267883, 0.7120000123977661, 0.722000002861023, 0.7279999852180481, 0.734666645526886, 0.7336666584014893, 0.7409999966621399, 0.7419999837875366, 0.7446666955947876, 0.750333309173584, 0.753000020980835, 0.753000020980835, 0.7523333430290222, 0.7566666603088379, 0.7613333463668823, 0.7613333463668823, 0.7663333415985107, 0.7649999856948853, 0.7676666378974915, 0.765666663646698, 0.7696666717529297, 0.7696666717529297, 0.7726666927337646, 0.7733333110809326, 0.7753333449363708, 0.7739999890327454, 0.7756666541099548, 0.7749999761581421, 0.7763333320617676, 0.7799999713897705, 0.778333306312561, 0.7826666831970215, 0.7839999794960022, 0.781000018119812, 0.784333348274231, 0.7826666831970215, 0.7846666574478149, 0.7820000052452087, 0.7900000214576721, 0.7870000004768372, 0.7850000262260437, 0.7886666655540466, 0.7900000214576721, 0.7903333306312561, 0.7923333048820496, 0.7906666398048401, 0.7946666479110718, 0.7929999828338623, 0.7940000295639038, 0.7929999828338623, 0.7940000295639038, 0.7929999828338623]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [50, 57], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [7, 5, 8, 1, 0, 4, 3, 5, 2, 9, 4, 9, 6, 1, 1, 8, 9, 0], [3, 1, 0, 1, 0, 1, 2, 3, 1, 0], [6, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [41, 36, 15]], "fitness": -0.7634285688400269, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))), alpha)))))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.2946004000605686, 2.2750734394536027, 2.256782111868394, 2.231921020515874, 2.203597054552676, 2.167547170685393, 2.124749499667259, 2.069257280688323, 2.001709123092982, 1.9206673141483774, 1.8297862756710483, 1.7332220974536603, 1.6354674568675087, 1.549574569342017, 1.464289869173816, 1.3999317729824239, 1.3451120430499555, 1.2871176674381428, 1.2306587278189487, 1.2008123663296522, 1.1523931434425019, 1.1288873501709502, 1.110957491730088, 1.0828664630962448, 1.0604470936912886, 1.026882320315752, 1.0206369363856969, 1.0134467413207842, 0.9880012186243392, 0.9708169789409373, 0.9595922170030505, 0.9512025908535151, 0.9252214397280019, 0.9252941931999276, 0.9139131631880798, 0.9039788107121893, 0.8981581978542206, 0.883054094347011, 0.8874164332315009, 0.8663611405513951, 0.870341885540196, 0.8548145379215231, 0.8451696350164795, 0.8412721307128727, 0.8246161515733837, 0.8299128079710383, 0.8301438946907216, 0.8285179234467415, 0.8199317483082581, 0.8132686630342111, 0.8046796282662566, 0.7942278714794697, 0.8037433434297947, 0.7887204988143542, 0.7845384650195137, 0.7889753426417163, 0.7828194100969204, 0.7723462004561419, 0.7835090266652095, 0.7806567461451898, 0.7657508110767027, 0.7715028140444435, 0.7578320609438358, 0.7554747820876735, 0.7516789807934472, 0.7595892670116468, 0.7451120087452033, 0.7367445183641104, 0.7403934563486378, 0.7421609126124887, 0.7435992474191303, 0.7293199015614725, 0.7283516121483782, 0.7264734043531477, 0.728029468370986, 0.7235701505959293, 0.724726891528661, 0.7255931216113839, 0.7279905644642158, 0.7187937765766397, 0.7118720779912094, 0.7110663545193091, 0.7069349173132171, 0.7073764449900419, 0.705618839930896, 0.700965712484887, 0.7071221347230536, 0.6967816158150952], "accuracy": [0.10355303436517715, 0.15757495164871216, 0.20974771678447723, 0.2615242302417755, 0.3003566265106201, 0.33786818385124207, 0.3630960285663605, 0.39083343744277954, 0.410910040140152, 0.4365341365337372, 0.45951658487319946, 0.4745740294456482, 0.4893673360347748, 0.5032360553741455, 0.5317659378051758, 0.5349359512329102, 0.5451063513755798, 0.5609562993049622, 0.5795799493789673, 0.5900145173072815, 0.5979394912719727, 0.6038832664489746, 0.618280291557312, 0.620261549949646, 0.6242240071296692, 0.6406022906303406, 0.6402060389518738, 0.637432336807251, 0.6460176706314087, 0.6547351479530334, 0.6626601219177246, 0.657508909702301, 0.6744155287742615, 0.672698438167572, 0.6750759482383728, 0.6811517477035522, 0.6807554960250854, 0.6870955228805542, 0.684982180595398, 0.6900013089179993, 0.6922467350959778, 0.6979262828826904, 0.6993792057037354, 0.7061154246330261, 0.705058753490448, 0.7021529674530029, 0.7043983340263367, 0.700700044631958, 0.7049266695976257, 0.7059833407402039, 0.7100779414176941, 0.7129837274551392, 0.7111346125602722, 0.7145687341690063, 0.7177387475967407, 0.7149649858474731, 0.7123233675956726, 0.719852089881897, 0.7206445932388306, 0.7190595865249634, 0.7226257920265198, 0.724210798740387, 0.7275128960609436, 0.7251353859901428, 0.7289658188819885, 0.7207766771316528, 0.7285695672035217, 0.735569953918457, 0.7327961921691895, 0.7318716049194336, 0.7333245277404785, 0.7318716049194336, 0.7351737022399902, 0.7343811988830566, 0.7343811988830566, 0.7384757399559021, 0.733588695526123, 0.7367587089538574, 0.7339849472045898, 0.7383436560630798, 0.7387399077415466, 0.7413815855979919, 0.7477215528488159, 0.7423061728477478, 0.7425703406333923, 0.7445515990257263, 0.7395324110984802, 0.7432307600975037], "val_loss": [1.9521449634007044, 1.9337516512189592, 1.913132803780692, 1.888643673488072, 1.858572551182338, 1.8201494216918945, 1.7718426840645927, 1.711662871497018, 1.6384660857064384, 1.5526406083788191, 1.4577455180031913, 1.3594397136143275, 1.2624262060437883, 1.1738776820046561, 1.0953757762908936, 1.0278136389596122, 0.9725372110094342, 0.9264352662222726, 0.8844209398542132, 0.849888733455113, 0.8183448484965733, 0.793998156275068, 0.7720864840916225, 0.7536170652934483, 0.7376195873532977, 0.7211279698780605, 0.7070073229925973, 0.6974403517586845, 0.686212250164577, 0.6754027605056763, 0.665561488696507, 0.6578097513743809, 0.6489863225391933, 0.6420340027127948, 0.6361401762281146, 0.628969669342041, 0.6237173591341291, 0.6167707954134259, 0.6133351155689785, 0.606713056564331, 0.6025107247488839, 0.5983573709215436, 0.5935537133898053, 0.5896311146872384, 0.5850753273282733, 0.5809681415557861, 0.5784728697368077, 0.5753206014633179, 0.5725981678281512, 0.5686509949820382, 0.5656716993876866, 0.5618704387119838, 0.5600245339529855, 0.5574379989079067, 0.5556877510888236, 0.5521599054336548, 0.5502531187874931, 0.5484567369733538, 0.5461791242871966, 0.5444056647164481, 0.5423406532832554, 0.5400703293936593, 0.5377029010227748, 0.5353440386908395, 0.5336608716419765, 0.5314083099365234, 0.5295861107962472, 0.5274770089558193, 0.5268669639314923, 0.5238670451300484, 0.5222773722239903, 0.5199011564254761, 0.5188522168568203, 0.517884543963841, 0.5168269532067435, 0.5152738094329834, 0.5125565358570644, 0.5115120240620205, 0.5100484234946114, 0.5088061094284058, 0.5087342943464007, 0.5055130038942609, 0.5047107594353812, 0.5032504115785871, 0.5037896633148193, 0.5022501264299665, 0.4998081752232143, 0.5001897641590664], "val_accuracy": [0.20800000429153442, 0.3409999907016754, 0.39800000190734863, 0.4300000071525574, 0.4663333296775818, 0.48766666650772095, 0.515666663646698, 0.5356666445732117, 0.5573333501815796, 0.5706666707992554, 0.5773333311080933, 0.5856666564941406, 0.5963333249092102, 0.6163333058357239, 0.640333354473114, 0.6620000004768372, 0.6713333129882812, 0.6773333549499512, 0.6846666932106018, 0.6883333325386047, 0.6983333230018616, 0.7013333439826965, 0.70333331823349, 0.7080000042915344, 0.7086666822433472, 0.7103333473205566, 0.715666651725769, 0.715666651725769, 0.7196666598320007, 0.7263333201408386, 0.7279999852180481, 0.7310000061988831, 0.7353333234786987, 0.7360000014305115, 0.734666645526886, 0.7433333396911621, 0.7400000095367432, 0.7490000128746033, 0.7493333220481873, 0.7516666650772095, 0.7526666522026062, 0.7553333044052124, 0.7583333253860474, 0.7573333382606506, 0.7559999823570251, 0.7599999904632568, 0.7603333592414856, 0.7633333206176758, 0.765666663646698, 0.7673333287239075, 0.765333354473114, 0.7670000195503235, 0.7696666717529297, 0.7683333158493042, 0.7666666507720947, 0.7703333497047424, 0.7706666588783264, 0.7716666460037231, 0.7713333368301392, 0.7723333239555359, 0.7743333578109741, 0.7749999761581421, 0.7743333578109741, 0.7763333320617676, 0.7753333449363708, 0.7776666879653931, 0.7763333320617676, 0.7786666750907898, 0.7786666750907898, 0.7836666703224182, 0.7776666879653931, 0.7816666960716248, 0.7836666703224182, 0.7860000133514404, 0.7863333225250244, 0.7833333611488342, 0.7883333563804626, 0.7846666574478149, 0.7889999747276306, 0.7853333353996277, 0.7879999876022339, 0.7873333096504211, 0.7910000085830688, 0.7906666398048401, 0.7883333563804626, 0.7856666445732117, 0.7886666655540466, 0.7893333435058594]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [7, 4, 6, 4, 0, 2, 6, 5, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 0, 3, 1, 1, 2, 3, 3, 0], [15, 61, 33, 18, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 4], [], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 4, 9, 5], [1, 3, 3, 1], [41, 38, 15]], "fitness": -0.1614285707473755, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.pow(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad))))), alpha))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.7977748213505875, 2.4884194233130628, 4.904061081859461, 2.8123412229255553, 2.5981835811964165, 2.5664792079431757, 2.590882545543495], "accuracy": [0.19178444147109985, 0.15889579057693481, 0.1476687341928482, 0.1026284471154213, 0.09959053993225098, 0.09826971590518951, 0.09985470771789551], "val_loss": [2.706327506474086, 1.8597589901515417, 2.2851968492780412, 2.356334550040109, 2.0212693214416504, 2.0760884966169084, 2.3814843041556224], "val_accuracy": [0.10000000149011612, 0.2043333351612091, 0.09799999743700027, 0.09966666996479034, 0.09733333438634872, 0.09700000286102295, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [1, 0, 0, 3, 1, 0], [50, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 0, 2, 9, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 16, 72, 84, 1, 78], [0, 0, 1, 0, 0], [0, 0, 1, 1, 1], [3, 3, 0], [4, 3, 6], [], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [41, 5]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 3, 5, 4, 2, 2, 0, 1, 0, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.301854231794985, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 4, 6, 4, 0, 2, 4, 5, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 3, 2, 3, 3, 0], [15, 16, 61, 39, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 3, 9, 3, 9], [2, 3, 3, 1], [41, 38, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [1, 0, 0, 3, 1, 0], [5, 57], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 2, 2, 5, 0, 3, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0], [3, 3, 0, 7, 3], [4, 3, 7], [], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [9, 4, 4, 4, 9, 6, 0, 9], [0, 3, 3, 3], [10, 38, 56]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 3, 8, 7, 4, 3, 0, 1, 1, 0, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))), grad)))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, sigma), tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3015524532659226, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 2, 4, 0, 5, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 2, 3, 0, 1, 2, 3, 3, 0], [60, 16, 50, 84, 1, 78], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3, 5], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 4, 9, 5], [0, 2, 3, 3], [60, 5]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.square(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), beta), grad)))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.pow(beta, sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [7, 4, 6, 4, 0, 2, 4, 5, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 16, 61, 39, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [2, 2, 5, 3, 9, 6, 0, 9], [0, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(sigma), tf.math.multiply(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3018218251330236, 2.3025450695460075, 2.302560769839294, 2.3025459028616115, 2.3025440076685157, 2.3025554369595294, 2.302561970781168, 2.302557630813542], "accuracy": [0.10038304328918457, 0.10421344637870789, 0.10091137140989304, 0.10936468094587326, 0.10368511080741882, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736438478742326, 1.9736430304391044, 1.9736413274492537, 1.9736435072762626, 1.973637240273612, 1.9736341067722865, 1.9736318588256836, 1.9736332212175642], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.10400000214576721, 0.09966666996479034, 0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [2, 5, 2, 2, 2, 2, 8, 1, 2, 1, 6, 8, 8, 1, 1, 8, 9, 0], [3, 0, 0, 1, 0, 1, 2, 3, 3, 0], [6, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 3, 4, 9, 5], [0, 3, 3, 1], [41, 38, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 12, 10, 4, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, alpha), beta))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.301854231794985, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [7, 3, 6, 4, 0, 2, 2, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 1, 2, 3, 3, 0], [15, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [5, 9, 9, 3, 9], [0, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 2, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301854231794985, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [7, 4, 4, 4, 0, 2, 3, 5, 2, 1, 4, 4, 8, 1, 1, 8, 9, 0, 6, 6, 4, 6, 3, 2, 7, 1, 1, 7, 4, 0, 8, 2, 4, 2, 9, 7, 3, 4, 2, 8, 5, 3, 0, 9], [3, 2, 2, 3, 0, 1, 2, 1, 3, 0, 3, 0, 5, 1, 1, 1, 3, 1, 0, 4, 2, 5, 3, 0, 4, 0, 0, 5, 2], [15, 16, 61, 39, 1, 78, 14, 81, 85, 20], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 3, 9, 3, 9], [2, 3, 3, 3], [81, 38, 93]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 73, 73, 44, 29, 10, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.pow(tf.math.negative(tf.math.add(beta, grad)), beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.pow(tf.math.sqrt(grad), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, beta))), tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [0, 0, 0, 3, 1, 0], [50, 57, 26], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [2, 5, 1, 6, 9, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 0, 2, 3, 3, 0], [2, 16, 43, 84, 1, 78], [0, 0, 1, 1, 0], [1, 0, 1, 1], [9, 3, 0], [4, 4], [], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 3, 4, 9, 5], [2, 3, 3, 1], [41, 38, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 3, 8, 8, 5, 3, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [2, 6, 9, 4, 0, 4, 1, 2], [2, 0, 0, 3, 1, 0], [5, 57, 31, 91], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [7, 4, 2, 4, 0, 2, 3, 5, 2, 1, 4, 9, 3, 1, 1, 8, 9, 0], [3, 0, 0, 1, 3, 1, 2, 3, 3, 0], [15, 16, 5, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [2, 2, 4, 3, 9, 6, 0, 9], [3, 3, 3, 1], [41, 38, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 4, 12, 12, 6, 6, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07106062769889832, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [3, 4, 2, 4, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 2, 14, 14, 7, 7, 3, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3455.1705897107904, 61787.49409857515, 277647.0911372342, 778801.8700633998, 1654477.6835292564, 3040188.013703606], "accuracy": [0.0940430611371994, 0.09734513610601425, 0.09893012791872025, 0.09787346422672272, 0.09919429570436478, 0.10210011899471283], "val_loss": [12472.231863839286, 97010.84151785714, 324657.6339285714, 766444.8214285715, 1493408.4285714286, 2576581.3571428573], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [7, 0, 2, 4, 0, 1, 8, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [0, 3], [8], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [4, 3, 9, 0, 9], [0, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 3, 1, 1, 0, 1, 1, 6, 4, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.subtract(tf.math.sqrt(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [2, 5, 2, 2, 5, 4, 2, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 52, 43, 84, 1, 78], [0, 1, 0, 1, 0], [0, 0, 1, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 3, 2, 9, 5], [0, 3, 3, 1], [41, 38, 15]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 3, 5, 3, 2, 1, 0, 6, 3, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), grad)))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), sigma), sigma))", "other_info": {"loss": [2.3026894109439007, 2.302137590528495, 2.304218431174747, 2.3031638124914626, 2.301857306988421, 2.302012829905913], "accuracy": [0.08492933213710785, 0.08889182657003403, 0.08625016361474991, 0.08611807972192764, 0.09470347315073013, 0.0936468094587326], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [0, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1], [7, 2, 2, 2, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 0, 3, 1, 2, 3, 3, 0], [51, 16, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [41, 38, 56]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 22, 22, 13, 9, 4, 1, 0, 0, 0, 0, 6, 4, 2, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), beta))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.3026894109439007, 2.302137590528495, 2.304218431174747, 2.3031638124914626, 2.301857306988421, 2.302012829905913], "accuracy": [0.08492933213710785, 0.08889182657003403, 0.08625016361474991, 0.08611807972192764, 0.09470347315073013, 0.0936468094587326], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]