[{"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8040000200271606, "mapping_values": [1, 14, 14, 7, 7, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0127902176748287, 1.3794425719166319, 1.0570859401422232, 0.9177581008005576, 0.7800552572997459, 0.7338562827966216, 0.7424668720479907, 0.6780234000717786, 0.6548621012802058, 0.6233555595589163, 0.6293519931131776, 0.5781184900013242, 0.6106567716302496, 0.5639535028700501, 0.5546012394274892, 0.5416073738670526, 0.5317321870037593, 0.5302573548583873, 0.5120237426609174, 0.5035690820495828, 0.5031293707044449], "accuracy": [0.3195086419582367, 0.5315017700195312, 0.6082419753074646, 0.6573768258094788, 0.7059833407402039, 0.7186633348464966, 0.7205125093460083, 0.7375511527061462, 0.7576277852058411, 0.7689869403839111, 0.7561748623847961, 0.7802139520645142, 0.763967752456665, 0.7829877138137817, 0.7913089394569397, 0.7918372750282288, 0.7993659973144531, 0.7961959838867188, 0.8074230551719666, 0.8142913579940796, 0.8124422430992126], "val_loss": [1.5617013999394007, 0.8106737307139805, 0.7301039866038731, 0.6077111107962472, 0.5877651827675956, 0.5928524051393781, 0.5547900540488107, 0.503220932824271, 0.4882520777838571, 0.5026717356273106, 0.4691309758595058, 0.4603623151779175, 0.4865909814834595, 0.450338397707258, 0.43117315428597586, 0.43721563475472586, 0.46926421778542654, 0.43601873942783903, 0.4259535074234009, 0.4301922917366028, 0.41999385186604093], "val_accuracy": [0.44699999690055847, 0.6363333463668823, 0.6683333516120911, 0.7120000123977661, 0.7563333511352539, 0.7203333377838135, 0.7329999804496765, 0.768666684627533, 0.7786666750907898, 0.7829999923706055, 0.7940000295639038, 0.7973333597183228, 0.781333327293396, 0.7986666560173035, 0.8029999732971191, 0.8183333277702332, 0.7856666445732117, 0.8053333163261414, 0.8130000233650208, 0.812333345413208, 0.8066666722297668]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [5, 2, 6, 6, 0, 4, 2, 3, 2, 1, 3, 8, 9, 3, 2, 6, 0, 4, 0, 2, 4, 2, 6, 3, 2, 7, 2, 3, 3, 6, 2, 0, 9, 0], [0, 1, 2, 0, 1, 0, 1, 2, 0, 0, 0, 3, 2, 2, 2, 3, 2, 0, 1, 0, 1, 1, 1, 0], [81, 62, 35, 73, 95, 1, 81, 19, 77, 41, 8], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 9, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8040000200271606, "mapping_values": [1, 58, 58, 34, 24, 11, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.sqrt(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(grad, grad))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(alpha))), tf.math.add(alpha, alpha))))), alpha))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0127902176748287, 1.3794425719166319, 1.0570859401422232, 0.9177581008005576, 0.7800552572997459, 0.7338562827966216, 0.7424668720479907, 0.6780234000717786, 0.6548621012802058, 0.6233555595589163, 0.6293519931131776, 0.5781184900013242, 0.6106567716302496, 0.5639535028700501, 0.5546012394274892, 0.5416073738670526, 0.5317321870037593, 0.5302573548583873, 0.5120237426609174, 0.5035690820495828, 0.5031293707044449], "accuracy": [0.3195086419582367, 0.5315017700195312, 0.6082419753074646, 0.6573768258094788, 0.7059833407402039, 0.7186633348464966, 0.7205125093460083, 0.7375511527061462, 0.7576277852058411, 0.7689869403839111, 0.7561748623847961, 0.7802139520645142, 0.763967752456665, 0.7829877138137817, 0.7913089394569397, 0.7918372750282288, 0.7993659973144531, 0.7961959838867188, 0.8074230551719666, 0.8142913579940796, 0.8124422430992126], "val_loss": [1.5617013999394007, 0.8106737307139805, 0.7301039866038731, 0.6077111107962472, 0.5877651827675956, 0.5928524051393781, 0.5547900540488107, 0.503220932824271, 0.4882520777838571, 0.5026717356273106, 0.4691309758595058, 0.4603623151779175, 0.4865909814834595, 0.450338397707258, 0.43117315428597586, 0.43721563475472586, 0.46926421778542654, 0.43601873942783903, 0.4259535074234009, 0.4301922917366028, 0.41999385186604093], "val_accuracy": [0.44699999690055847, 0.6363333463668823, 0.6683333516120911, 0.7120000123977661, 0.7563333511352539, 0.7203333377838135, 0.7329999804496765, 0.768666684627533, 0.7786666750907898, 0.7829999923706055, 0.7940000295639038, 0.7973333597183228, 0.781333327293396, 0.7986666560173035, 0.8029999732971191, 0.8183333277702332, 0.7856666445732117, 0.8053333163261414, 0.8130000233650208, 0.812333345413208, 0.8066666722297668]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 2, 3, 2, 1, 2, 2, 8, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 2, 2, 2, 1, 0, 1, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 8, 8, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [93, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8040000200271606, "mapping_values": [1, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.multiply(grad, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0127902176748287, 1.3794425719166319, 1.0570859401422232, 0.9177581008005576, 0.7800552572997459, 0.7338562827966216, 0.7424668720479907, 0.6780234000717786, 0.6548621012802058, 0.6233555595589163, 0.6293519931131776, 0.5781184900013242, 0.6106567716302496, 0.5639535028700501, 0.5546012394274892, 0.5416073738670526, 0.5317321870037593, 0.5302573548583873, 0.5120237426609174, 0.5035690820495828, 0.5031293707044449], "accuracy": [0.3195086419582367, 0.5315017700195312, 0.6082419753074646, 0.6573768258094788, 0.7059833407402039, 0.7186633348464966, 0.7205125093460083, 0.7375511527061462, 0.7576277852058411, 0.7689869403839111, 0.7561748623847961, 0.7802139520645142, 0.763967752456665, 0.7829877138137817, 0.7913089394569397, 0.7918372750282288, 0.7993659973144531, 0.7961959838867188, 0.8074230551719666, 0.8142913579940796, 0.8124422430992126], "val_loss": [1.5617013999394007, 0.8106737307139805, 0.7301039866038731, 0.6077111107962472, 0.5877651827675956, 0.5928524051393781, 0.5547900540488107, 0.503220932824271, 0.4882520777838571, 0.5026717356273106, 0.4691309758595058, 0.4603623151779175, 0.4865909814834595, 0.450338397707258, 0.43117315428597586, 0.43721563475472586, 0.46926421778542654, 0.43601873942783903, 0.4259535074234009, 0.4301922917366028, 0.41999385186604093], "val_accuracy": [0.44699999690055847, 0.6363333463668823, 0.6683333516120911, 0.7120000123977661, 0.7563333511352539, 0.7203333377838135, 0.7329999804496765, 0.768666684627533, 0.7786666750907898, 0.7829999923706055, 0.7940000295639038, 0.7973333597183228, 0.781333327293396, 0.7986666560173035, 0.8029999732971191, 0.8183333277702332, 0.7856666445732117, 0.8053333163261414, 0.8130000233650208, 0.812333345413208, 0.8066666722297668]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [3, 2, 3, 2, 1, 0, 2, 3, 2, 6, 2, 8, 9, 3, 2, 6, 0, 5, 0, 2, 4, 0, 8, 4, 5, 4, 4, 1, 1, 8, 2, 9, 1, 1, 4, 4, 9], [1, 2, 2, 1, 0, 0, 1, 2, 0, 1, 0, 3, 2, 2, 3, 0, 3, 1, 3, 3, 2, 3, 1], [22, 55, 35, 95, 95, 16, 86, 73], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.7945713996887207, "mapping_values": [1, 60, 60, 37, 23, 8, 7, 7, 5, 2, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, grad), tf.math.subtract(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, tf.math.sqrt(alpha)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), grad)), alpha))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9496090817429432, 1.5270211822746327, 1.1083634456528837, 0.866608359133169, 0.8221353971490518, 0.7545911137454026, 0.7371045280252355, 0.7180543652677958, 0.6517286481653868, 0.701854768517058, 0.6348324271634648, 0.6122962463139826, 0.6307897906198856, 0.6042750674924673, 0.5723822596066538, 0.5696472186753149, 0.5556834830568294, 0.5424883538359396, 0.523712605604044], "accuracy": [0.3509443998336792, 0.5116893649101257, 0.5869766473770142, 0.670320987701416, 0.6827367544174194, 0.7104741930961609, 0.7121912837028503, 0.7263241410255432, 0.7519482374191284, 0.739400327205658, 0.7526086568832397, 0.7685906887054443, 0.7508915662765503, 0.7697794437408447, 0.78113853931427, 0.7823272943496704, 0.7885351777076721, 0.793422281742096, 0.8075551390647888], "val_loss": [1.096046311514718, 0.9114656788962228, 0.6786173922674996, 0.6141641139984131, 0.6246822391237531, 0.5807398046766009, 0.5286011866160801, 0.5204408679689679, 0.5381290231432233, 0.5086612701416016, 0.4773038455418178, 0.5356805665152413, 0.47422618525368826, 0.45594821657453266, 0.473900522504534, 0.48519877025059294, 0.4415926848139082, 0.4841209650039673, 0.4425637977463858], "val_accuracy": [0.5913333296775818, 0.5836666822433472, 0.7136666774749756, 0.7193333506584167, 0.7080000042915344, 0.7586666941642761, 0.7599999904632568, 0.7789999842643738, 0.7519999742507935, 0.7670000195503235, 0.7906666398048401, 0.7419999837875366, 0.7896666526794434, 0.8113333582878113, 0.8013333082199097, 0.7713333368301392, 0.8009999990463257, 0.7976666688919067, 0.8050000071525574]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 0, 3, 2, 6, 0, 5, 0, 2, 2, 7, 0, 3, 1, 1, 9, 7, 4, 9], [1, 2, 2, 1, 0, 0, 1, 2, 2, 0, 0, 3, 2, 2, 1, 2, 2, 2, 0], [33, 62, 14, 73, 14, 1, 53], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 0, 3, 8, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 23, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [57, 25, 50, 71, 34]], "fitness": -0.7760000228881836, "mapping_values": [1, 49, 49, 30, 19, 7, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.pow(grad, tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.613347148630739, 2.2741628620587067, 2.3128091706701825, 2.3178116790591106, 2.083953884016049, 1.6658232661915997, 1.219675049396349, 0.9573192691380998, 0.8591537523373574, 0.7959761582172274, 0.7625345155673493, 0.7035257654214626, 0.699516471217038, 0.6631064630770303, 0.6478073913203003, 0.6534197782843483, 0.596932206061286, 0.6017710139659795, 0.5737848437268579], "accuracy": [0.2176727056503296, 0.15480121970176697, 0.15863162279129028, 0.13776251673698425, 0.24316470324993134, 0.4485536813735962, 0.5904107689857483, 0.6621318459510803, 0.691850483417511, 0.7103421092033386, 0.7272487282752991, 0.7457403540611267, 0.7474573850631714, 0.7564390301704407, 0.7604015469551086, 0.7629110813140869, 0.7740060687065125, 0.7757231593132019, 0.7840443849563599], "val_loss": [1.974170752934047, 1.7624457904270716, 1.9424173491341727, 1.8481369699750627, 1.577697447368077, 0.9623673983982631, 0.656420111656189, 0.7781752518245152, 0.6474128791264125, 0.6268103293010167, 0.5556228331157139, 0.5408483403069633, 0.506774936403547, 0.4906198978424072, 0.5156807558877128, 0.4754131521497454, 0.49247465814862934, 0.4769153765269688, 0.499757034437997], "val_accuracy": [0.14100000262260437, 0.21166667342185974, 0.15666666626930237, 0.33666667342185974, 0.43566668033599854, 0.6066666841506958, 0.7256666421890259, 0.6943333148956299, 0.6983333230018616, 0.721666693687439, 0.7423333525657654, 0.765666663646698, 0.778333306312561, 0.7950000166893005, 0.7770000100135803, 0.7916666865348816, 0.7833333611488342, 0.7770000100135803, 0.7723333239555359]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0], [3, 2, 6, 2, 1, 0, 2, 3, 2, 6, 2, 8, 9, 3, 2, 6, 0, 5, 0, 2, 6, 0, 8, 8, 5, 9], [1, 1, 2, 1, 0, 2, 2, 2, 0, 0, 1, 3, 1, 2, 3], [31, 62, 35, 73, 14, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 1, 3, 8, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.2085714340209961, "mapping_values": [1, 40, 40, 26, 14, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))))))))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(grad)), tf.math.sqrt(tf.math.add(alpha, alpha))), grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [3.9020750671881004, 2.370348502080895, 2.202627599483405, 2.423352161245481, 2.3796423672842484, 2.346489342212236, 2.3997235670380697], "accuracy": [0.18412363529205322, 0.1632545292377472, 0.22784309089183807, 0.10830801725387573, 0.10976093262434006, 0.10672302544116974, 0.09747721254825592], "val_loss": [2.0130558695111955, 1.8917845317295618, 2.098395211356027, 1.9444406373160226, 1.901541301182338, 1.9961421149117606, 1.9787567002432687], "val_accuracy": [0.11566666513681412, 0.13733333349227905, 0.09966666996479034, 0.12033333629369736, 0.10899999737739563, 0.0976666659116745, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 3, 2, 6, 2, 2, 3, 3, 1, 1, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 0, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [31, 62, 35, 73, 14, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 1, 3, 0, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 3, 1, 3, 0, 0], [60, 23, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [10, 25, 50, 71, 34]], "fitness": -0.10342857241630554, "mapping_values": [1, 24, 24, 12, 12, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), tf.math.add(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))), grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.8891751341705767, 2.3063032694811425, 3.4001450613898814, 2.3064842271042725, 2.3034908645235865, 2.3020508011586283, 2.2990129164354505], "accuracy": [0.1744815707206726, 0.10289261490106583, 0.1795007288455963, 0.10579843819141388, 0.09800554811954498, 0.09509972482919693, 0.10513802617788315], "val_loss": [1.9813519205365862, 1.9614212172372, 1.978445053100586, 1.9744183676583427, 1.9731405121939523, 1.9724066598074776, 1.9648404121398926], "val_accuracy": [0.10233332961797714, 0.16766667366027832, 0.10300000011920929, 0.10433333367109299, 0.10766666382551193, 0.13899999856948853, 0.10466666519641876]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 3, 2, 1, 2, 2, 3, 9, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 2, 2, 1, 2, 2, 2, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 8, 8, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 2, 3, 0, 3, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [10, 25, 50, 71, 34]], "fitness": -0.10342857241630554, "mapping_values": [1, 11, 11, 5, 6, 0, 25, 25, 15, 10, 4, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, alpha), grad))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), alpha))))), tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.8891751341705767, 2.3063032694811425, 3.4001450613898814, 2.3064842271042725, 2.3034908645235865, 2.3020508011586283, 2.2990129164354505], "accuracy": [0.1744815707206726, 0.10289261490106583, 0.1795007288455963, 0.10579843819141388, 0.09800554811954498, 0.09509972482919693, 0.10513802617788315], "val_loss": [1.9813519205365862, 1.9614212172372, 1.978445053100586, 1.9744183676583427, 1.9731405121939523, 1.9724066598074776, 1.9648404121398926], "val_accuracy": [0.10233332961797714, 0.16766667366027832, 0.10300000011920929, 0.10433333367109299, 0.10766666382551193, 0.13899999856948853, 0.10466666519641876]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 3, 4, 1, 2, 2, 8, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 1, 2, 0, 1, 2, 0, 1, 0, 3, 2, 2], [22, 7, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [2, 1, 3, 8, 9, 8, 6, 6, 2, 8, 0, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 3, 3, 1, 3, 0, 0], [82, 17, 19, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [10, 25, 50, 71, 34]], "fitness": -0.10342857241630554, "mapping_values": [1, 16, 16, 8, 8, 1, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad)))))))), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.8891751341705767, 2.3063032694811425, 3.4001450613898814, 2.3064842271042725, 2.3034908645235865, 2.3020508011586283, 2.2990129164354505], "accuracy": [0.1744815707206726, 0.10289261490106583, 0.1795007288455963, 0.10579843819141388, 0.09800554811954498, 0.09509972482919693, 0.10513802617788315], "val_loss": [1.9813519205365862, 1.9614212172372, 1.978445053100586, 1.9744183676583427, 1.9731405121939523, 1.9724066598074776, 1.9648404121398926], "val_accuracy": [0.10233332961797714, 0.16766667366027832, 0.10300000011920929, 0.10433333367109299, 0.10766666382551193, 0.13899999856948853, 0.10466666519641876]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 3, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10342857241630554, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [3.8891751341705767, 2.3063032694811425, 3.4001450613898814, 2.3064842271042725, 2.3034908645235865, 2.3020508011586283, 2.2990129164354505], "accuracy": [0.1744815707206726, 0.10289261490106583, 0.1795007288455963, 0.10579843819141388, 0.09800554811954498, 0.09509972482919693, 0.10513802617788315], "val_loss": [1.9813519205365862, 1.9614212172372, 1.978445053100586, 1.9744183676583427, 1.9731405121939523, 1.9724066598074776, 1.9648404121398926], "val_accuracy": [0.10233332961797714, 0.16766667366027832, 0.10300000011920929, 0.10433333367109299, 0.10766666382551193, 0.13899999856948853, 0.10466666519641876]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [3, 2, 4, 6, 0, 1, 2, 5, 2, 1, 5, 1, 9, 3, 2, 6, 0, 5, 0, 2, 6, 6, 6, 9, 2, 5, 9, 2], [2, 2, 1, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2, 0, 0], [22, 55, 35, 73, 95, 50, 30, 10, 28], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 1, 3, 8, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [81, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 44, 44, 28, 16, 9, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.square(sigma), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09285431355237961, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [4, 2, 3, 2, 1, 2, 2, 3, 2, 1, 5, 0, 9, 3, 2, 6, 0, 9, 0, 2], [2, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 19, 12, 5, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, grad)))), tf.math.negative(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0742306187748909, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [3, 0, 4, 1, 8, 1, 2, 3, 2, 1, 2, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 0, 0, 1, 2, 0, 0, 1, 3, 1, 2, 3], [53, 62, 9, 73, 72, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 1, 3, 8, 5, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 23, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [6, 17, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [5, 2, 6, 6, 0, 1, 6, 3, 2, 1, 5, 8, 9, 3, 2, 6, 5, 5, 0, 2], [2, 2, 2, 1, 0, 0, 1, 0, 0, 1, 0, 3, 2, 2], [22, 75, 35, 73, 95, 57], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [15], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 28, 17, 11, 6, 8, 8, 5, 3, 1, 1, 1, 0, 1, 1, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302765235767357, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 3, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 2, 0, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [31, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 6, 2, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 10, 6, 4, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))), tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.divide_no_nan(beta, tf.math.add(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [5, 2, 6, 6, 0, 1, 0, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 0, 0, 2, 2, 0, 1, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [33, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 13, 7, 3, 8, 8, 5, 3, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 2, 6, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 4, 2, 0, 5, 0, 2, 8], [2, 3, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 3, 8, 8, 8, 4, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 2, 3, 3, 0, 2, 1, 3, 0, 0], [45, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.07257142663002014, "mapping_values": [1, 33, 33, 21, 12, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3040491731616215, 2.3013839620278573, 2.3027349257151117, 2.3017521880447998, 2.3020844269327876, 2.3012602496471515, 2.3015076272664934, 2.3019715947025348, 2.301426584757456, 2.299482583905161, 2.3008023603890533, 2.301192717387802, 2.3012617539735976, 2.300949188066653, 2.301017510026532, 2.300396443452534, 2.301503482637719, 2.3011155906937235, 2.301824089432468, 2.300805770300635, 2.300812852129157, 2.300431356642933, 2.300935502915791, 2.3004869257123666, 2.300865463246255, 2.3011277888067143, 2.300622195048717, 2.3013393776905833, 2.300245445040097, 2.300018211948464, 2.3006453246110468, 2.30012333441908, 2.300158537075016, 2.300724495356314, 2.30103394163598, 2.300294274021653, 2.300382430133661, 2.3004434318149474, 2.3015222440479515, 2.300404309848548, 2.301375263292461, 2.300703212113003], "accuracy": [0.08506141602993011, 0.08875974267721176, 0.08677849918603897, 0.08928807079792023, 0.09272222965955734, 0.08770307898521423, 0.09589222073554993, 0.08598599582910538, 0.08994849026203156, 0.09972262382507324, 0.09100515395402908, 0.09311848133802414, 0.09166556596755981, 0.09681680053472519, 0.09377889335155487, 0.09787346422672272, 0.09060890227556229, 0.09074098616838455, 0.09615638852119446, 0.0936468094587326, 0.08955223858356476, 0.09377889335155487, 0.09457138925790787, 0.0952318087220192, 0.09787346422672272, 0.09087307006120682, 0.09985470771789551, 0.09298639744520187, 0.10011887550354004, 0.09285431355237961, 0.09047681838274002, 0.09998679161071777, 0.0956280529499054, 0.09655263274908066, 0.09298639744520187, 0.10011887550354004, 0.0948355570435524, 0.09628847241401672, 0.09245806187391281, 0.09509972482919693, 0.09087307006120682, 0.08942015469074249], "val_loss": [1.9704136848449707, 1.9702795573643275, 1.9700937952314104, 1.9699691363743372, 1.9698258127485002, 1.9697713170732771, 1.9697341918945312, 1.9696780613490514, 1.9696529252188546, 1.9696777888706751, 1.969663143157959, 1.969684055873326, 1.969709873199463, 1.9697578293936593, 1.9697891644069128, 1.9698247909545898, 1.9698541504996163, 1.9699202265058244, 1.9699646404811315, 1.9699902534484863, 1.9699869837079729, 1.969996111733573, 1.9700000626700265, 1.9699756758553642, 1.9699684551783971, 1.9699448176792689, 1.9699712480817522, 1.969954490661621, 1.9699502672467912, 1.9699691363743372, 1.9699604170663017, 1.969991820199149, 1.9700335775102888, 1.970066683632987, 1.9700767653329032, 1.9701380729675293, 1.970195702144078, 1.9702976090567452, 1.9703655924115862, 1.9704571451459612, 1.9705444744655065, 1.9706130708966936], "val_accuracy": [0.041333332657814026, 0.04399999976158142, 0.04466666653752327, 0.04633333161473274, 0.04833333194255829, 0.04899999871850014, 0.04899999871850014, 0.05166666582226753, 0.0533333346247673, 0.0533333346247673, 0.05400000140070915, 0.05400000140070915, 0.0533333346247673, 0.05299999937415123, 0.05366666615009308, 0.054999999701976776, 0.055666666477918625, 0.05700000002980232, 0.0573333315551281, 0.05666666850447655, 0.057999998331069946, 0.05966666713356972, 0.05999999865889549, 0.06300000101327896, 0.06400000303983688, 0.06499999761581421, 0.06499999761581421, 0.06599999964237213, 0.06700000166893005, 0.06666667014360428, 0.0663333311676979, 0.0676666647195816, 0.06800000369548798, 0.06800000369548798, 0.06733333319425583, 0.0676666647195816, 0.06833333522081375, 0.06666667014360428, 0.06599999964237213, 0.06400000303983688, 0.06300000101327896, 0.061666667461395264]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 2, 2, 1, 0, 0, 1, 2, 0, 1, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3041601871628536, 2.3016422637906198, 2.303321871035103, 2.3024765999246943, 2.3031159889869657, 2.3022572071545033], "accuracy": [0.08426892012357712, 0.0874389111995697, 0.08440100401639938, 0.08915598690509796, 0.08994849026203156, 0.08519349992275238], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3041601871628536, 2.3016422637906198, 2.303321871035103, 2.3024765999246943, 2.3031159889869657, 2.3022572071545033], "accuracy": [0.08426892012357712, 0.0874389111995697, 0.08440100401639938, 0.08915598690509796, 0.08994849026203156, 0.08519349992275238], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]