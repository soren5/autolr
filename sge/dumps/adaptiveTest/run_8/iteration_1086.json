[{"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [73, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 3, 8, 3, 2, 6, 2, 3, 4, 4, 8, 2, 2, 1, 2, 9, 9, 5, 4, 7, 5, 3, 6, 6, 3, 8, 0, 3, 3, 3, 1, 0, 3, 6, 0, 3, 5, 1, 2, 9, 2, 9, 3, 7, 5, 4, 2, 9, 4, 3, 3, 1, 0, 2, 0, 2], [3, 2, 3, 3, 0, 3, 2, 3, 0, 0, 1, 4, 0, 0, 0, 4, 3, 2, 1, 1, 4, 3, 5, 5, 1, 3, 0, 0, 0, 1, 5, 5, 4, 0, 2, 4], [14, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.795714259147644, "mapping_values": [1, 1, 1, 0, 1, 0, 93, 93, 57, 36, 15, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, grad), beta), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))), tf.math.add(beta, beta)), tf.math.add(beta, grad))), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad))))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.subtract(tf.math.add(grad, tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad)))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.pow(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.multiply(alpha, grad), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), beta)))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.020873785018921, 1.4862263202667236, 1.0475775003433228, 0.8942950963973999, 0.8351856470108032, 0.7770000100135803, 0.7446483969688416, 0.7166334986686707, 0.6826487183570862, 0.6680465340614319, 0.6738724708557129, 0.6288216710090637, 0.6228031516075134, 0.6204066872596741, 0.5801042318344116, 0.5893882513046265, 0.597531795501709, 0.5907785296440125, 0.5681669116020203, 0.5392239689826965, 0.5411193370819092, 0.5282881855964661, 0.5288951992988586, 0.5273926258087158, 0.5281949639320374, 0.513285219669342], "accuracy": [0.33245277404785156, 0.49293357133865356, 0.6287148594856262, 0.6656980514526367, 0.6796988248825073, 0.7091533541679382, 0.7185312509536743, 0.7327961921691895, 0.7396644949913025, 0.7473253011703491, 0.7387399077415466, 0.7539294958114624, 0.7662131786346436, 0.7621186375617981, 0.778232753276825, 0.7777044177055359, 0.7714964747428894, 0.7753269076347351, 0.7882710099220276, 0.7948752045631409, 0.7976489067077637, 0.802271842956543, 0.8037247657775879, 0.7971205711364746, 0.7985734939575195, 0.809140145778656], "val_loss": [1.5953947305679321, 0.9075121879577637, 0.798206627368927, 0.7807648181915283, 0.689254641532898, 0.7160719633102417, 0.6650168299674988, 0.6572644114494324, 0.6058029532432556, 0.5972828269004822, 0.6202130317687988, 0.5633684992790222, 0.5682587623596191, 0.5697386264801025, 0.5592254996299744, 0.556203305721283, 0.5254585146903992, 0.5331411361694336, 0.5242456793785095, 0.5063168406486511, 0.49248966574668884, 0.5176854133605957, 0.5081487894058228, 0.49229174852371216, 0.49465450644493103, 0.48712271451950073], "val_accuracy": [0.5143333077430725, 0.6970000267028809, 0.6983333230018616, 0.6819999814033508, 0.7210000157356262, 0.7056666612625122, 0.7453333139419556, 0.7213333249092102, 0.762666642665863, 0.7620000243186951, 0.7333333492279053, 0.7823333144187927, 0.7903333306312561, 0.7770000100135803, 0.781000018119812, 0.768666684627533, 0.8003333210945129, 0.7923333048820496, 0.8053333163261414, 0.8006666898727417, 0.8146666884422302, 0.7979999780654907, 0.8069999814033508, 0.8136666417121887, 0.7976666688919067, 0.8106666803359985]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [73, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [4, 4, 3, 8, 5, 2, 3, 2, 3, 2, 4, 8, 2, 2, 1, 8, 0, 9, 5, 4, 7, 5], [2, 2, 3, 1, 0, 3, 2, 1, 1, 2, 5, 1, 4, 1, 4], [82, 32, 83, 71, 27, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.7951428294181824, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, beta), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0266802310943604, 1.4156224727630615, 1.0338480472564697, 0.8687308430671692, 0.8443771004676819, 0.7627944350242615, 0.7433033585548401, 0.7128542065620422, 0.6726385354995728, 0.68474942445755, 0.6530925035476685, 0.642113983631134, 0.6500539779663086, 0.6275104880332947, 0.6223943829536438, 0.6017034649848938, 0.5911436676979065, 0.5930408835411072, 0.5707225799560547, 0.5863497853279114, 0.5576922297477722, 0.5251638889312744, 0.5304210782051086, 0.5275718569755554, 0.5231743454933167, 0.5199612975120544], "accuracy": [0.3343019485473633, 0.5044247508049011, 0.6293752193450928, 0.6705851554870605, 0.6812838315963745, 0.7127195596694946, 0.7166820764541626, 0.7316074371337891, 0.7429665923118591, 0.7432307600975037, 0.7485140562057495, 0.7568352818489075, 0.7491744756698608, 0.76542067527771, 0.7638356685638428, 0.7738739848136902, 0.7730814814567566, 0.7792893648147583, 0.7800818681716919, 0.7784969210624695, 0.7882710099220276, 0.8059701323509216, 0.8021397590637207, 0.8042530417442322, 0.7991018295288086, 0.8013472557067871], "val_loss": [1.6566240787506104, 0.9224293828010559, 0.7990530729293823, 0.8812685012817383, 0.7499567270278931, 0.6591763496398926, 0.6535542607307434, 0.6312199831008911, 0.6246340274810791, 0.6329454779624939, 0.6404448747634888, 0.5712810754776001, 0.5586000084877014, 0.5784887075424194, 0.5527842044830322, 0.5698436498641968, 0.5372921228408813, 0.5307473540306091, 0.5898603200912476, 0.5321809649467468, 0.49811500310897827, 0.5197157263755798, 0.5084332227706909, 0.48753979802131653, 0.5123547911643982, 0.48358234763145447], "val_accuracy": [0.39800000190734863, 0.6990000009536743, 0.7070000171661377, 0.6589999794960022, 0.7039999961853027, 0.7559999823570251, 0.7476666569709778, 0.7590000033378601, 0.7400000095367432, 0.75, 0.7406666874885559, 0.7786666750907898, 0.7916666865348816, 0.7636666893959045, 0.7803333401679993, 0.7676666378974915, 0.7940000295639038, 0.7979999780654907, 0.7676666378974915, 0.8003333210945129, 0.8196666836738586, 0.8056666851043701, 0.7953333258628845, 0.8109999895095825, 0.7823333144187927, 0.8159999847412109]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [88, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [5, 4, 6, 1, 8, 1, 9, 6, 3, 4, 4, 8, 8, 0, 1, 8, 9, 0], [2, 1, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [69, 65, 83, 71, 27, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.7934285998344421, "mapping_values": [1, 1, 1, 0, 1, 1, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))), tf.math.subtract(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)))))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0208754539489746, 1.485731840133667, 1.0477217435836792, 0.894342303276062, 0.8306789994239807, 0.7647652626037598, 0.760694146156311, 0.7070469260215759, 0.6821364760398865, 0.6654132008552551, 0.6810997724533081, 0.631806492805481, 0.618117094039917, 0.5880210399627686, 0.589377760887146, 0.598840057849884, 0.5915837287902832, 0.5807173252105713, 0.5723824501037598, 0.5523195266723633, 0.5397676825523376, 0.524309515953064, 0.5304508209228516, 0.5232308506965637, 0.5293199419975281, 0.5116877555847168], "accuracy": [0.33258485794067383, 0.49253731966018677, 0.629111111164093, 0.6670188903808594, 0.6798309087753296, 0.7137762308120728, 0.7143045663833618, 0.7382115721702576, 0.7420420050621033, 0.7499669790267944, 0.7360982894897461, 0.757099449634552, 0.7691190242767334, 0.7792893648147583, 0.7758552432060242, 0.7763835787773132, 0.7744023203849792, 0.7808743715286255, 0.7887993454933167, 0.7885351777076721, 0.800818920135498, 0.8039889335632324, 0.800290584564209, 0.7989697456359863, 0.7971205711364746, 0.8082155585289001], "val_loss": [1.5964159965515137, 0.9076565504074097, 0.8011975884437561, 0.7946255803108215, 0.704193115234375, 0.7291082143783569, 0.6579240560531616, 0.6644136309623718, 0.6107833385467529, 0.604357123374939, 0.5955992937088013, 0.5575795769691467, 0.5714299082756042, 0.5924477577209473, 0.5469526648521423, 0.5566935539245605, 0.5164890885353088, 0.53666752576828, 0.5245005488395691, 0.5123789310455322, 0.49036088585853577, 0.5266855955123901, 0.49720627069473267, 0.5014346241950989, 0.4910241663455963, 0.486817866563797], "val_accuracy": [0.5143333077430725, 0.6966666579246521, 0.6953333616256714, 0.668666660785675, 0.7103333473205566, 0.7009999752044678, 0.7556666731834412, 0.7166666388511658, 0.7599999904632568, 0.7609999775886536, 0.7576666474342346, 0.7826666831970215, 0.7770000100135803, 0.7590000033378601, 0.7946666479110718, 0.7699999809265137, 0.8066666722297668, 0.7913333177566528, 0.8023333549499512, 0.7986666560173035, 0.8159999847412109, 0.7919999957084656, 0.8140000104904175, 0.8063333630561829, 0.8066666722297668, 0.812333345413208]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [20, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [2, 4, 3, 0, 3, 2, 6, 2, 3, 4, 4, 8, 2, 2, 1, 0, 2, 9, 5, 4, 7, 5], [2, 2, 3, 1, 0, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [82, 32, 83, 71, 27, 78, 71, 18], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.7862856984138489, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.020871877670288, 1.486276388168335, 1.0504558086395264, 0.8942371606826782, 0.8331387639045715, 0.7631698846817017, 0.7560432553291321, 0.7039003372192383, 0.6884785890579224, 0.6712400317192078, 0.679640531539917, 0.6280832290649414, 0.6294897198677063, 0.621860682964325, 0.5776661038398743, 0.5976799726486206, 0.5927123427391052, 0.5959436297416687, 0.5672280192375183, 0.5393834114074707, 0.5427425503730774, 0.5388105511665344, 0.5252740979194641, 0.5224782824516296], "accuracy": [0.33245277404785156, 0.49266940355300903, 0.628582775592804, 0.6664905548095703, 0.6791704893112183, 0.7145687341690063, 0.7144366502761841, 0.7417778372764587, 0.7397965788841248, 0.7495707273483276, 0.7382115721702576, 0.7592127919197083, 0.7606657147407532, 0.7589486241340637, 0.7815347909927368, 0.7746664881706238, 0.7745344042778015, 0.7697794437408447, 0.7897239327430725, 0.7979130744934082, 0.7989697456359863, 0.7944789528846741, 0.8004226684570312, 0.7991018295288086], "val_loss": [1.5953930616378784, 0.9079996943473816, 0.7962353229522705, 0.7841330766677856, 0.6956679821014404, 0.7030015587806702, 0.6641519665718079, 0.6973867416381836, 0.6100365519523621, 0.6164588332176208, 0.6169478893280029, 0.571317195892334, 0.5785188674926758, 0.5652062296867371, 0.567618191242218, 0.5573223829269409, 0.5439706444740295, 0.531901478767395, 0.5191441178321838, 0.5054095387458801, 0.504095196723938, 0.5191817879676819, 0.4990624189376831, 0.49837779998779297], "val_accuracy": [0.5143333077430725, 0.6966666579246521, 0.6966666579246521, 0.6803333163261414, 0.7133333086967468, 0.7133333086967468, 0.7556666731834412, 0.7096666693687439, 0.7609999775886536, 0.7516666650772095, 0.7360000014305115, 0.7746666669845581, 0.784333348274231, 0.7776666879653931, 0.7736666798591614, 0.7723333239555359, 0.7839999794960022, 0.7926666736602783, 0.8106666803359985, 0.8036666512489319, 0.8040000200271606, 0.8053333163261414, 0.8100000023841858, 0.8056666851043701]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [88, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [5, 0, 6, 2, 8, 1, 9, 6, 3, 4, 4, 8, 8, 0, 1, 8, 9, 0], [2, 1, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [95, 65, 83, 71, 27, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.7717142701148987, "mapping_values": [1, 1, 1, 0, 1, 1, 10, 10, 7, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0307512283325195, 1.3713151216506958, 1.0671812295913696, 0.9451219439506531, 0.8356409668922424, 0.7840926051139832, 0.738930881023407, 0.7164429426193237, 0.6871659159660339, 0.6507624387741089, 0.6643466353416443, 0.6359129548072815, 0.6560906171798706, 0.6066696643829346, 0.6052538752555847, 0.6012170314788818, 0.5786221027374268, 0.5686285495758057], "accuracy": [0.3267732262611389, 0.5153876543045044, 0.6160348653793335, 0.6431118845939636, 0.6922467350959778, 0.7014925479888916, 0.7255316376686096, 0.7265883088111877, 0.7407211661338806, 0.7611940503120422, 0.7523444890975952, 0.7638356685638428, 0.7491744756698608, 0.7737419009208679, 0.7738739848136902, 0.7729493975639343, 0.7810064554214478, 0.7852331399917603], "val_loss": [1.71553373336792, 1.0574513673782349, 0.8739185929298401, 0.75870680809021, 0.7098903059959412, 0.7089335322380066, 0.669438898563385, 0.6382496953010559, 0.6039555072784424, 0.6034006476402283, 0.5994373559951782, 0.554790198802948, 0.5734163522720337, 0.5668473839759827, 0.6132988929748535, 0.5525602102279663, 0.5518200397491455, 0.5515660643577576], "val_accuracy": [0.36266666650772095, 0.6276666522026062, 0.6656666398048401, 0.7160000205039978, 0.7179999947547913, 0.7413333058357239, 0.7426666617393494, 0.7553333044052124, 0.7730000019073486, 0.7643333077430725, 0.7646666765213013, 0.7856666445732117, 0.7946666479110718, 0.7649999856948853, 0.7549999952316284, 0.7739999890327454, 0.7946666479110718, 0.7693333625793457]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [75, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [5, 4, 6, 1, 8, 1, 0, 6, 3, 4, 4, 8, 8, 0, 1, 8, 9, 0], [3, 2, 0, 1, 0, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [69, 65, 83, 71, 27, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.7697142958641052, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, beta)))), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0307555198669434, 1.3706018924713135, 1.0700018405914307, 0.9458677172660828, 0.8365859985351562, 0.7809051275253296, 0.7378607988357544, 0.7099521160125732, 0.6896333694458008, 0.6809285283088684, 0.6517099142074585, 0.6374039053916931, 0.6540069580078125, 0.5960237979888916, 0.609494686126709, 0.6009669303894043, 0.5770241022109985, 0.5720463395118713], "accuracy": [0.3267732262611389, 0.5155197381973267, 0.6127327680587769, 0.6420552134513855, 0.6939638257026672, 0.7067758440971375, 0.7263241410255432, 0.7368907928466797, 0.7412495017051697, 0.7428345084190369, 0.7573636174201965, 0.7597411274909973, 0.750759482383728, 0.7796856164932251, 0.7721568942070007, 0.7730814814567566, 0.7840443849563599, 0.7829877138137817], "val_loss": [1.715895652770996, 1.0405563116073608, 0.8508477210998535, 0.7547654509544373, 0.6967243552207947, 0.7103986740112305, 0.6669169068336487, 0.6458993554115295, 0.6163840889930725, 0.5881296396255493, 0.5848616361618042, 0.5922916531562805, 0.5742091536521912, 0.5651803612709045, 0.6045308709144592, 0.5519391894340515, 0.5488953590393066, 0.5524066090583801], "val_accuracy": [0.36266666650772095, 0.6353333592414856, 0.6756666898727417, 0.7179999947547913, 0.7423333525657654, 0.7390000224113464, 0.734666645526886, 0.7406666874885559, 0.7683333158493042, 0.7736666798591614, 0.7689999938011169, 0.7546666860580444, 0.7923333048820496, 0.7689999938011169, 0.762666642665863, 0.7833333611488342, 0.7916666865348816, 0.7703333497047424]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [88, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0], [2, 4, 3, 8, 3, 2, 8, 2, 3, 2, 2, 6, 2, 8, 1, 8, 3, 9, 5, 4, 7, 5, 0, 9], [3, 2, 3, 3, 0, 3, 2, 0, 0, 0, 1, 4, 0, 0, 0], [82, 63, 83, 71, 27, 78, 71, 18], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [20, 9, 43, 71, 34]], "fitness": -0.6991428732872009, "mapping_values": [1, 1, 1, 0, 1, 0, 38, 38, 24, 14, 8, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.sqrt(grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, beta)))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.negative(alpha)), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2992780208587646, 2.294112205505371, 2.289694309234619, 2.2856104373931885, 2.280186891555786, 2.271821975708008, 2.268115282058716, 2.2609071731567383, 2.2566826343536377, 2.2507987022399902, 2.2441864013671875, 2.2365000247955322, 2.2307143211364746, 2.2246131896972656, 2.2163166999816895, 2.208127021789551, 2.1997649669647217, 2.190767526626587, 2.177263021469116, 2.1686043739318848, 2.1570637226104736, 2.143735647201538, 2.1332948207855225, 2.1193747520446777, 2.104489326477051, 2.0908496379852295, 2.0737152099609375, 2.055940866470337, 2.0350236892700195, 2.013129472732544, 1.9993096590042114, 1.9781402349472046, 1.9518518447875977, 1.9267990589141846, 1.9024887084960938, 1.8822462558746338, 1.8561112880706787, 1.8285654783248901, 1.8020142316818237, 1.7768054008483887, 1.75163733959198, 1.7208497524261475, 1.690727949142456, 1.6712714433670044, 1.6522127389907837, 1.6184751987457275, 1.5929661989212036, 1.5679316520690918, 1.5435148477554321, 1.518731951713562, 1.4894827604293823, 1.484493374824524, 1.4599294662475586, 1.4405561685562134, 1.4104162454605103, 1.4020615816116333, 1.3776288032531738, 1.3579514026641846, 1.3431048393249512, 1.3270645141601562, 1.3125001192092896, 1.294834017753601, 1.293010950088501, 1.2750341892242432, 1.2600399255752563, 1.256176471710205, 1.2368419170379639, 1.220710277557373, 1.2255947589874268, 1.2046629190444946, 1.2036980390548706, 1.1923515796661377, 1.1634471416473389, 1.1647289991378784, 1.1444553136825562, 1.1561778783798218, 1.1450623273849487, 1.1257076263427734, 1.1172327995300293, 1.12051522731781, 1.1157695055007935, 1.1139642000198364, 1.0994558334350586, 1.0804566144943237, 1.0848160982131958, 1.074945092201233, 1.0678215026855469, 1.0714720487594604, 1.0647108554840088, 1.0482348203659058, 1.0360594987869263, 1.0333834886550903, 1.0385146141052246, 1.021090030670166, 1.0239434242248535, 1.0172215700149536, 1.0144976377487183, 1.002021074295044, 1.0015716552734375, 0.9951344132423401], "accuracy": [0.10051512718200684, 0.11134592443704605, 0.12112006545066833, 0.13512085378170013, 0.14938580989837646, 0.17593449354171753, 0.186104878783226, 0.19931316375732422, 0.20803064107894897, 0.22440892457962036, 0.23233389854431152, 0.25597676634788513, 0.26495838165283203, 0.26839256286621094, 0.287280410528183, 0.2930920720100403, 0.3063003420829773, 0.3181878328323364, 0.32941487431526184, 0.32981112599372864, 0.34566107392311096, 0.3533218801021576, 0.35147273540496826, 0.3637564480304718, 0.3715493381023407, 0.369700163602829, 0.38541802763938904, 0.3867388665676117, 0.3999471664428711, 0.41408005356788635, 0.4069475531578064, 0.413419634103775, 0.4299300014972687, 0.43243956565856934, 0.43970412015914917, 0.43930789828300476, 0.44591203331947327, 0.4543653428554535, 0.4493461847305298, 0.46189406514167786, 0.4621582329273224, 0.4682340621948242, 0.48170650005340576, 0.4807819426059723, 0.4777440130710602, 0.4916127324104309, 0.4904239773750305, 0.5042926669120789, 0.5049530863761902, 0.5119535326957703, 0.5197464227676392, 0.5157839059829712, 0.525029718875885, 0.5272751450538635, 0.538237988948822, 0.5344076156616211, 0.5411438345909119, 0.5458987951278687, 0.5525029897689819, 0.5565975308418274, 0.5621450543403625, 0.5628054141998291, 0.5589750409126282, 0.5669000148773193, 0.568749189376831, 0.5659754276275635, 0.577070415019989, 0.5812970399856567, 0.5696737766265869, 0.5863162279129028, 0.5789195895195007, 0.5896182656288147, 0.5967507362365723, 0.59661865234375, 0.6013736724853516, 0.5949016213417053, 0.6001849174499512, 0.6086382269859314, 0.6135252714157104, 0.602562427520752, 0.6067890524864197, 0.6083740592002869, 0.6115440726280212, 0.6236956715583801, 0.6194690465927124, 0.6236956715583801, 0.625148594379425, 0.6231673359870911, 0.6240919232368469, 0.6310923099517822, 0.6288469433784485, 0.6347906589508057, 0.6300356388092041, 0.6408664584159851, 0.6446968913078308, 0.6453573107719421, 0.6439043879508972, 0.6473385095596313, 0.6415268778800964, 0.6510368585586548], "val_loss": [2.2941699028015137, 2.2884597778320312, 2.2826905250549316, 2.2769315242767334, 2.2711312770843506, 2.265228271484375, 2.2592360973358154, 2.252943992614746, 2.2465131282806396, 2.2398741245269775, 2.232879161834717, 2.2255589962005615, 2.21777606010437, 2.2096102237701416, 2.2009408473968506, 2.1917757987976074, 2.181889533996582, 2.171437978744507, 2.1599836349487305, 2.1479268074035645, 2.135030508041382, 2.121273994445801, 2.1067066192626953, 2.091240167617798, 2.074666738510132, 2.0571680068969727, 2.0386223793029785, 2.0189507007598877, 1.9978396892547607, 1.9756134748458862, 1.95243501663208, 1.9281984567642212, 1.9026556015014648, 1.8758050203323364, 1.848035454750061, 1.8194999694824219, 1.7903170585632324, 1.7603466510772705, 1.7298303842544556, 1.6992781162261963, 1.668105959892273, 1.6366251707077026, 1.6050028800964355, 1.5740867853164673, 1.543621301651001, 1.5133466720581055, 1.4834777116775513, 1.4540562629699707, 1.425519347190857, 1.39808988571167, 1.3712893724441528, 1.345881700515747, 1.3215805292129517, 1.2980728149414062, 1.2750738859176636, 1.2534050941467285, 1.2323706150054932, 1.2121986150741577, 1.193233847618103, 1.1752195358276367, 1.1578320264816284, 1.1414238214492798, 1.1261261701583862, 1.110967993736267, 1.0970098972320557, 1.0838087797164917, 1.070761799812317, 1.0584772825241089, 1.0470157861709595, 1.0354965925216675, 1.025122880935669, 1.0150914192199707, 1.00493323802948, 0.9950342774391174, 0.9854749441146851, 0.9768214225769043, 0.9685298800468445, 0.960052490234375, 0.9517920017242432, 0.9446547627449036, 0.937559962272644, 0.9310290813446045, 0.9243890643119812, 0.9173771739006042, 0.9110691547393799, 0.904877781867981, 0.8989405632019043, 0.8937311172485352, 0.8881730437278748, 0.8825132846832275, 0.8767250776290894, 0.8712424039840698, 0.8666646480560303, 0.862236499786377, 0.8576266169548035, 0.8528299331665039, 0.8486448526382446, 0.844168484210968, 0.8400741219520569, 0.8362618684768677], "val_accuracy": [0.06833333522081375, 0.1120000034570694, 0.1653333306312561, 0.20733332633972168, 0.25433334708213806, 0.2933333218097687, 0.32366666197776794, 0.3426666557788849, 0.3619999885559082, 0.37466666102409363, 0.3883333206176758, 0.39766666293144226, 0.4086666703224182, 0.42100000381469727, 0.4346666634082794, 0.4436666667461395, 0.4490000009536743, 0.46000000834465027, 0.4646666646003723, 0.4713333249092102, 0.476666659116745, 0.4846666753292084, 0.49300000071525574, 0.500333309173584, 0.5066666603088379, 0.5146666765213013, 0.5216666460037231, 0.5270000100135803, 0.5326666831970215, 0.5396666526794434, 0.5413333177566528, 0.5473333597183228, 0.5516666769981384, 0.5556666851043701, 0.562666654586792, 0.5676666498184204, 0.5696666836738586, 0.5709999799728394, 0.5743333101272583, 0.5793333053588867, 0.5826666951179504, 0.5863333344459534, 0.5910000205039978, 0.5933333039283752, 0.597000002861023, 0.6016666889190674, 0.6050000190734863, 0.606333315372467, 0.6106666922569275, 0.6190000176429749, 0.6236666440963745, 0.6306666731834412, 0.6399999856948853, 0.6443333625793457, 0.6470000147819519, 0.6499999761581421, 0.6570000052452087, 0.6573333144187927, 0.6589999794960022, 0.6646666526794434, 0.6660000085830688, 0.6693333387374878, 0.6703333258628845, 0.671999990940094, 0.6736666560173035, 0.6773333549499512, 0.6776666641235352, 0.6783333420753479, 0.6809999942779541, 0.6830000281333923, 0.6819999814033508, 0.6826666593551636, 0.6859999895095825, 0.6850000023841858, 0.6866666674613953, 0.6899999976158142, 0.6916666626930237, 0.6916666626930237, 0.6919999718666077, 0.6953333616256714, 0.6953333616256714, 0.6970000267028809, 0.6963333487510681, 0.6966666579246521, 0.6990000009536743, 0.7013333439826965, 0.699999988079071, 0.7016666531562805, 0.7020000219345093, 0.7039999961853027, 0.706333339214325, 0.7089999914169312, 0.7113333344459534, 0.7110000252723694, 0.7093333601951599, 0.7113333344459534, 0.7120000123977661, 0.7120000123977661, 0.7133333086967468, 0.7139999866485596]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [75, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [9, 4, 3, 8, 3, 2, 6, 2, 1, 4, 4, 8, 2, 2, 1, 8, 9, 9, 5, 4, 7, 5], [2, 2, 0, 3, 3, 3, 2, 0, 3, 0, 5, 3, 4, 1, 4], [82, 32, 83, 71, 27, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.400857150554657, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.249744176864624, 2.2879676818847656, 2.338411569595337, 2.304011583328247, 2.30295467376709, 2.3022677898406982, 2.254148006439209, 2.383023262023926, 2.2777786254882812, 2.2466485500335693, 2.2600133419036865, 2.3067052364349365], "accuracy": [0.21938978135585785, 0.16259410977363586, 0.15361246466636658, 0.09734513610601425, 0.10170386731624603, 0.10619468986988068, 0.1702549159526825, 0.1954827606678009, 0.14859332144260406, 0.1608770340681076, 0.15215955674648285, 0.09774138033390045], "val_loss": [2.298391580581665, 2.2416419982910156, 2.3047406673431396, 2.3029701709747314, 2.302283763885498, 2.2983181476593018, 2.118110418319702, 2.3011908531188965, 2.3030664920806885, 2.300462007522583, 2.3102359771728516, 2.3046815395355225], "val_accuracy": [0.10199999809265137, 0.22833333909511566, 0.10100000351667404, 0.10199999809265137, 0.12866666913032532, 0.10266666859388351, 0.37599998712539673, 0.11233333498239517, 0.10133333504199982, 0.0976666659116745, 0.10233332961797714, 0.09300000220537186]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [75, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [2, 4, 1, 5, 3, 9, 2, 8, 3, 4, 8, 8, 2, 2, 1, 8, 9, 0, 5, 4, 7, 5, 5, 0, 3], [3, 3, 2, 1, 0, 3, 2, 3, 3, 0, 5, 3, 1, 1, 3, 2], [45, 91, 18, 61, 35, 78, 62, 36], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [2, 9, 43, 71, 34]], "fitness": -0.13171428442001343, "mapping_values": [1, 2, 2, 1, 1, 1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.pow(grad, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha)))), tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301466703414917, 2.30149507522583, 2.302334785461426, 2.3034377098083496, 2.303151845932007, 2.2999796867370605, 2.301377058029175, 2.300356864929199, 2.301243782043457, 2.301072597503662, 2.3009986877441406, 2.2997655868530273, 2.300734043121338, 2.3017144203186035, 2.301182746887207, 2.3005897998809814, 2.3013031482696533, 2.3006088733673096, 2.2989537715911865, 2.2997353076934814, 2.2995102405548096, 2.298870801925659, 2.300097703933716, 2.2991855144500732, 2.2991137504577637, 2.300981283187866, 2.299408197402954, 2.299755334854126, 2.2989754676818848, 2.29693865776062, 2.298959970474243, 2.2987215518951416, 2.2987053394317627, 2.2978038787841797, 2.297145366668701, 2.2990047931671143, 2.297907829284668, 2.297062873840332, 2.29689884185791, 2.2972800731658936, 2.2980682849884033, 2.2966010570526123, 2.296746253967285, 2.296292304992676, 2.2979846000671387, 2.2956249713897705, 2.2962965965270996, 2.2957541942596436, 2.296783208847046, 2.2954559326171875, 2.2948429584503174, 2.2961435317993164, 2.2954587936401367, 2.2960386276245117, 2.2944815158843994, 2.2963457107543945, 2.2955574989318848, 2.2957069873809814, 2.292621612548828, 2.2931785583496094, 2.2942187786102295, 2.2939469814300537, 2.2951273918151855, 2.2939417362213135, 2.293386697769165, 2.2934489250183105, 2.2938787937164307, 2.2918896675109863, 2.2935798168182373, 2.292309284210205, 2.2935996055603027, 2.2926673889160156, 2.2918319702148438, 2.29315185546875, 2.292116165161133, 2.2920100688934326, 2.2914531230926514, 2.291367292404175, 2.2923624515533447, 2.291264533996582, 2.2913498878479004, 2.291900634765625, 2.291635513305664, 2.2888731956481934, 2.2906742095947266, 2.291168451309204, 2.2905473709106445, 2.2899348735809326, 2.291949987411499, 2.2904255390167236, 2.2897260189056396, 2.2895474433898926, 2.289494514465332, 2.2882726192474365, 2.290349006652832, 2.288973331451416, 2.289424419403076, 2.2900466918945312, 2.289947986602783, 2.2876713275909424], "accuracy": [0.09642054885625839, 0.09259014576673508, 0.08902391046285629, 0.08915598690509796, 0.09021265059709549, 0.0956280529499054, 0.0948355570435524, 0.0948355570435524, 0.09298639744520187, 0.09615638852119446, 0.0952318087220192, 0.10130762308835983, 0.09536388516426086, 0.09642054885625839, 0.09325055778026581, 0.09351472556591034, 0.1014397069811821, 0.09628847241401672, 0.09668471664190292, 0.09668471664190292, 0.09681680053472519, 0.09668471664190292, 0.09972262382507324, 0.09972262382507324, 0.10157178342342377, 0.09787346422672272, 0.09496764093637466, 0.09879804402589798, 0.09866596013307571, 0.10487385839223862, 0.09589222073554993, 0.09972262382507324, 0.09589222073554993, 0.10381719470024109, 0.1018359512090683, 0.09774138033390045, 0.10077928751707077, 0.10777968913316727, 0.10513802617788315, 0.10342095047235489, 0.09496764093637466, 0.10394927859306335, 0.1006472036242485, 0.10777968913316727, 0.1022322028875351, 0.10460969805717468, 0.10830801725387573, 0.10645885765552521, 0.10910051316022873, 0.109232597053051, 0.11768590658903122, 0.10817593336105347, 0.11094967275857925, 0.10632677376270294, 0.109232597053051, 0.10910051316022873, 0.1080438494682312, 0.10527011007070541, 0.11517632752656937, 0.10976093262434006, 0.11411966383457184, 0.10949676483869553, 0.107647605240345, 0.11068551242351532, 0.11081759631633759, 0.11517632752656937, 0.11081759631633759, 0.11953506618738174, 0.11227050423622131, 0.1200634017586708, 0.10949676483869553, 0.10777968913316727, 0.12138422578573227, 0.11094967275857925, 0.11517632752656937, 0.11081759631633759, 0.12376172095537186, 0.11742173880338669, 0.11530841141939163, 0.12098798155784607, 0.1200634017586708, 0.11610091477632523, 0.1150442510843277, 0.12323339283466339, 0.12640337646007538, 0.11979923397302628, 0.12336547672748566, 0.12772421538829803, 0.1212521493434906, 0.12468630075454712, 0.1228371411561966, 0.12508255243301392, 0.12217672914266586, 0.1310262829065323, 0.11715757846832275, 0.1154404953122139, 0.12600713968276978, 0.11940298229455948, 0.11940298229455948, 0.1266675442457199], "val_loss": [2.2999019622802734, 2.299748182296753, 2.2995924949645996, 2.2994368076324463, 2.2992823123931885, 2.2991275787353516, 2.29897403717041, 2.298816680908203, 2.2986621856689453, 2.2985081672668457, 2.2983531951904297, 2.2981984615325928, 2.298043727874756, 2.297889232635498, 2.2977354526519775, 2.297581195831299, 2.2974259853363037, 2.297272205352783, 2.2971174716949463, 2.2969634532928467, 2.296809434890747, 2.296654224395752, 2.2964999675750732, 2.296346426010132, 2.2961926460266113, 2.296038866043091, 2.2958858013153076, 2.295732021331787, 2.295577049255371, 2.2954232692718506, 2.295271873474121, 2.2951197624206543, 2.2949678897857666, 2.2948129177093506, 2.294661045074463, 2.294508695602417, 2.294356346130371, 2.294203758239746, 2.2940516471862793, 2.2938995361328125, 2.293748617172241, 2.293597936630249, 2.2934439182281494, 2.2932913303375244, 2.293139934539795, 2.2929890155792236, 2.2928378582000732, 2.2926876544952393, 2.2925350666046143, 2.2923831939697266, 2.2922301292419434, 2.2920804023742676, 2.291928768157959, 2.2917752265930176, 2.291623592376709, 2.2914693355560303, 2.2913177013397217, 2.2911651134490967, 2.291013717651367, 2.2908623218536377, 2.2907092571258545, 2.2905569076538086, 2.2904059886932373, 2.2902562618255615, 2.290104866027832, 2.2899532318115234, 2.289802312850952, 2.2896506786346436, 2.289499282836914, 2.2893478870391846, 2.2891972064971924, 2.2890465259552, 2.2888925075531006, 2.288740873336792, 2.2885873317718506, 2.2884361743927, 2.288285732269287, 2.2881317138671875, 2.287980794906616, 2.287830114364624, 2.287679672241211, 2.287527561187744, 2.2873764038085938, 2.287224292755127, 2.2870726585388184, 2.2869198322296143, 2.286768674850464, 2.286618709564209, 2.2864675521850586, 2.2863168716430664, 2.2861640453338623, 2.2860114574432373, 2.285860061645508, 2.285707950592041, 2.285557270050049, 2.2854063510894775, 2.2852554321289062, 2.285104274749756, 2.2849538326263428, 2.284804105758667], "val_accuracy": [0.03766666725277901, 0.039000000804662704, 0.03933333232998848, 0.03966666758060455, 0.04100000113248825, 0.0416666679084301, 0.0430000014603138, 0.04333333298563957, 0.044333335012197495, 0.045666664838790894, 0.046666666865348816, 0.04800000041723251, 0.04899999871850014, 0.04933333396911621, 0.049666665494441986, 0.049666665494441986, 0.050333332270383835, 0.05066666752099991, 0.05233333259820938, 0.05299999937415123, 0.0533333346247673, 0.05433333292603493, 0.054666668176651, 0.05700000002980232, 0.0573333315551281, 0.057999998331069946, 0.05833333358168602, 0.058666665107011795, 0.059333331882953644, 0.06066666543483734, 0.06133333221077919, 0.061666667461395264, 0.06233333423733711, 0.06300000101327896, 0.06499999761581421, 0.06700000166893005, 0.06700000166893005, 0.06733333319425583, 0.06966666877269745, 0.07000000029802322, 0.07066666334867477, 0.0716666653752327, 0.0729999989271164, 0.07500000298023224, 0.07599999755620956, 0.07800000160932541, 0.07866666465997696, 0.07966666668653488, 0.08133333176374435, 0.08233333379030228, 0.08299999684095383, 0.08433333039283752, 0.08533333241939545, 0.08533333241939545, 0.0860000029206276, 0.08733333647251129, 0.08833333104848862, 0.08900000154972076, 0.09066666662693024, 0.09133332967758179, 0.09399999678134918, 0.09533333033323288, 0.0963333323597908, 0.0963333323597908, 0.0976666659116745, 0.09866666793823242, 0.1003333330154419, 0.10166666656732559, 0.10166666656732559, 0.10300000011920929, 0.10400000214576721, 0.10633333027362823, 0.10766666382551193, 0.109333336353302, 0.10999999940395355, 0.1106666699051857, 0.1120000034570694, 0.1133333370089531, 0.11566666513681412, 0.11699999868869781, 0.11833333224058151, 0.11966666579246521, 0.1223333328962326, 0.12266666442155838, 0.12566666305065155, 0.12600000202655792, 0.1276666671037674, 0.12866666913032532, 0.12999999523162842, 0.1316666603088379, 0.1326666623353958, 0.13466666638851166, 0.13566666841506958, 0.13699999451637268, 0.13833333551883698, 0.13966666162014008, 0.14000000059604645, 0.14133332669734955, 0.1433333307504654, 0.14399999380111694]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [88, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1], [2, 4, 3, 8, 3, 2, 0, 2, 3, 4, 2, 8, 2, 2, 1, 8, 9, 9, 5, 4, 7, 5], [3, 2, 3, 3, 0, 3, 2, 0, 0, 0, 1, 4, 0, 0, 0], [91, 32, 50, 61, 35, 78, 62, 36], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [22], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [9, 0, 3, 3, 7, 5, 3, 1, 4, 3, 2, 2, 0, 2, 8, 6, 3, 4], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302626848220825, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [73, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [2, 4, 3, 8, 3, 2, 6, 2, 3, 4, 4, 8, 2, 2, 1, 8, 9, 9, 5, 4, 7, 5], [3, 2, 3, 1, 0, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [82, 32, 83, 71, 27, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 30, 30, 17, 13, 4, 1, 1, 0, 1, 0, 11, 6, 5, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.add(tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), grad))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), alpha))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.multiply(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(sigma, beta), tf.math.square(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [73, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 5, 6, 8, 3, 1, 6, 4, 3, 4, 4, 1, 2, 2, 1, 8, 9, 0, 2, 4, 7, 5], [3, 2, 3, 3, 0, 3, 2, 0, 0, 0, 1, 4, 0, 0, 0], [91, 32, 50, 61, 35, 78, 62, 36], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [98], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [9, 0, 3, 3, 7, 5, 3, 1, 4, 3, 2, 2, 0, 2, 8, 6, 3, 4], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [63, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 33, 33, 19, 14, 7, 1, 1, 0, 1, 1, 1, 1, 0, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.subtract(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))), grad)))), tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302626848220825, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [73, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [5, 4, 6, 3, 8, 1, 9, 6, 8, 3, 4, 8, 8, 0, 1, 8, 9, 0], [2, 3, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [91, 32, 50, 61, 35, 78, 62, 1], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [63, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 9, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, beta), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, grad)))), alpha), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0796460211277008, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [75, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [2, 4, 3, 8, 3, 2, 6, 2, 3, 4, 4, 8, 2, 2, 1, 8, 9, 9, 5, 4, 7, 5], [3, 2, 3, 3, 0, 3, 2, 0, 0, 0, 1, 4, 0, 0, 0], [82, 32, 83, 71, 27, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0796460211277008, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [73, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [9, 4, 2, 5, 0, 9, 2, 8, 3, 4, 8, 8, 2, 2, 1, 8, 9, 0, 5, 4, 7, 5, 5, 0, 3], [2, 2, 3, 1, 2, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [25, 32, 18, 61, 35, 78, 62, 36], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [2, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.45080828666687, 11.567484855651855, 82.11124420166016, 394.6241455078125, 1485.77880859375, 4533.47265625], "accuracy": [0.09721305221319199, 0.09734513610601425, 0.09787346422672272, 0.10077928751707077, 0.09536388516426086, 0.10540219396352768], "val_loss": [3.243288516998291, 24.765304565429688, 142.6289825439453, 601.6544799804688, 2042.1910400390625, 5760.3974609375], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [73, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [2, 4, 3, 8, 3, 2, 6, 2, 3, 4, 4, 2, 2, 2, 1, 8, 9, 9, 5, 4, 7, 5], [2, 2, 3, 1, 1, 3, 2, 0, 3, 0, 5, 2, 4, 1, 4], [69, 65, 83, 71, 27, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [90, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 16, 16, 8, 8, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha))), alpha)), tf.math.add(beta, grad)))))), beta)), tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08981640636920929, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [42, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [2, 4, 5, 9, 3, 2, 6, 2, 3, 4, 4, 8, 2, 2, 1, 8, 9, 9, 5, 4, 7, 5], [2, 1, 3, 1, 1, 3, 3, 0, 1, 0, 5, 1, 4, 1, 4], [69, 65, 83, 71, 27, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 11, 6, 5, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.multiply(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(sigma, beta), tf.math.square(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [73, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [2, 4, 3, 8, 3, 2, 6, 2, 3, 4, 4, 8, 2, 3, 1, 8, 9, 1, 5, 4, 7, 5], [3, 2, 1, 3, 0, 3, 2, 0, 3, 0, 0, 4, 0, 0, 0], [91, 32, 50, 61, 35, 78, 62, 1], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [63, 9, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(beta))), tf.math.add(beta, alpha))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3015263080596924, 2.3016974925994873, 2.3026833534240723, 2.3039321899414062, 2.303788661956787, 2.3007564544677734], "accuracy": [0.09642054885625839, 0.09192973375320435, 0.08796724677085876, 0.08849557489156723, 0.08915598690509796, 0.09377889335155487], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [1, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [75, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [2, 4, 3, 8, 3, 2, 6, 2, 3, 3, 4, 8, 3, 2, 9, 8, 9, 9, 5, 4, 7, 5], [2, 2, 3, 3, 0, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [82, 32, 83, 71, 27, 78], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [42, 9, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 1, 1, 0, 1, 0, 28, 28, 17, 11, 5, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.multiply(tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(alpha))))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3015263080596924, 2.3016974925994873, 2.3026833534240723, 2.3039321899414062, 2.303788661956787, 2.3007564544677734], "accuracy": [0.09642054885625839, 0.09192973375320435, 0.08796724677085876, 0.08849557489156723, 0.08915598690509796, 0.09377889335155487], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [88, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [5, 4, 6, 1, 8, 1, 9, 6, 3, 4, 4, 8, 8, 0, 1, 8, 9, 0], [2, 1, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [22, 32, 50, 14, 35, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [79, 9, 43, 71, 34, 56]], "fitness": -0.04114285856485367, "mapping_values": [1, 2, 2, 1, 1, 0, 13, 13, 8, 5, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))), tf.math.subtract(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)))))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3015263080596924, 2.3016974925994873, 2.3026833534240723, 2.3039321899414062, 2.303788661956787, 2.3007564544677734], "accuracy": [0.09642054885625839, 0.09192973375320435, 0.08796724677085876, 0.08849557489156723, 0.08915598690509796, 0.09377889335155487], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}]