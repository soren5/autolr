[{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8128571510314941, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.981351069550016, 1.5349047169189696, 1.3723243342461824, 0.9147770745942243, 0.7592220188462582, 0.7541607434503028, 0.6601786821777511, 0.6503169212075525, 0.6077379690752116, 0.5879406829110825, 0.6203387808790296, 0.5513474061866682, 0.5339801613255704, 0.5327362981746068, 0.50473991010435, 0.4983430227677836, 0.4902150674723458, 0.46884170538713715, 0.4874148141155311, 0.4612260999507624, 0.4541456229328369, 0.42220527198588326, 0.42256745304791776, 0.43151147482716695, 0.41934546090592606, 0.40800120973898796, 0.40826248711661706, 0.4036161505102151, 0.40626187906556865, 0.37746918974944926, 0.38102380289944515, 0.39793492795186286, 0.37672083299268017, 0.3863700123991177, 0.34821092360102507, 0.3530099042347472, 0.3396710169990821, 0.33817939929690705, 0.31686892103304903, 0.33382838343695376, 0.32304515237223125, 0.31880944150864976, 0.325867084672879, 0.2975122168858951, 0.3013393040212579], "accuracy": [0.31898030638694763, 0.47391360998153687, 0.5312376022338867, 0.6501122713088989, 0.7088891863822937, 0.7111346125602722, 0.7500990629196167, 0.7556465268135071, 0.7708360552787781, 0.7774402499198914, 0.7621186375617981, 0.7932901978492737, 0.8005547523498535, 0.802271842956543, 0.8094043135643005, 0.8129705190658569, 0.817989706993103, 0.8235371708869934, 0.8183859586715698, 0.8297450542449951, 0.8330471515655518, 0.8407079577445984, 0.8413683772087097, 0.839519202709198, 0.8424250483512878, 0.8477083444595337, 0.8492933511734009, 0.8442742228507996, 0.8462554216384888, 0.8615770936012268, 0.8602562546730042, 0.8510104417800903, 0.8585391640663147, 0.8553691506385803, 0.8702945709228516, 0.8673887252807617, 0.8701624870300293, 0.8739928603172302, 0.8771628737449646, 0.8755778670310974, 0.880729079246521, 0.8790120482444763, 0.8742570281028748, 0.8882578015327454, 0.8865407705307007], "val_loss": [1.003479242324829, 1.314337934766497, 0.6698019504547119, 0.5962587084089007, 0.5956063781465802, 0.5398834092276437, 0.5194756814411708, 0.4984877790723528, 0.51069404397692, 0.49093406541006906, 0.44585560049329487, 0.4685847418648856, 0.4242000494684492, 0.40511077642440796, 0.4040274790355137, 0.4399793744087219, 0.39216584818703787, 0.4567304849624634, 0.38168942076819284, 0.4251028895378113, 0.37271805320467266, 0.38042813539505005, 0.3837026613099234, 0.3892624293054853, 0.36412328481674194, 0.3695366382598877, 0.3856170177459717, 0.36429629155567717, 0.38013467618397306, 0.3443787693977356, 0.39546823501586914, 0.3637915679386684, 0.3536943793296814, 0.3298490473202297, 0.3573636072022574, 0.35138880355017527, 0.32792116914476666, 0.35199064016342163, 0.3320005110331944, 0.3197729502405439, 0.3424496991293771, 0.3356079033442906, 0.3422314524650574, 0.33718281984329224, 0.3545259066990444], "val_accuracy": [0.6159999966621399, 0.4896666705608368, 0.7056666612625122, 0.734333336353302, 0.7126666903495789, 0.762333333492279, 0.7683333158493042, 0.7836666703224182, 0.777999997138977, 0.7699999809265137, 0.7953333258628845, 0.793666660785675, 0.8076666593551636, 0.8216666579246521, 0.8266666531562805, 0.7983333468437195, 0.8360000252723694, 0.8029999732971191, 0.8410000205039978, 0.8180000185966492, 0.8446666598320007, 0.8366666436195374, 0.8266666531562805, 0.8293333053588867, 0.8503333330154419, 0.843999981880188, 0.8346666693687439, 0.8356666564941406, 0.8429999947547913, 0.8560000061988831, 0.8223333358764648, 0.8496666550636292, 0.8579999804496765, 0.8673333525657654, 0.8603333234786987, 0.859666645526886, 0.8683333396911621, 0.8506666421890259, 0.8643333315849304, 0.875, 0.862333357334137, 0.8610000014305115, 0.8640000224113464, 0.862333357334137, 0.8483333587646484]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 4, 2, 5, 5, 2, 0, 8, 2, 0, 4, 6, 8, 3, 2, 8, 9, 5, 0, 1, 4, 2, 3, 9, 2], [0, 0, 0, 2, 2, 2, 1, 2, 2, 0, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 71, 62, 29, 31, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8128571510314941, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.981351069550016, 1.5349047169189696, 1.3723243342461824, 0.9147770745942243, 0.7592220188462582, 0.7541607434503028, 0.6601786821777511, 0.6503169212075525, 0.6077379690752116, 0.5879406829110825, 0.6203387808790296, 0.5513474061866682, 0.5339801613255704, 0.5327362981746068, 0.50473991010435, 0.4983430227677836, 0.4902150674723458, 0.46884170538713715, 0.4874148141155311, 0.4612260999507624, 0.4541456229328369, 0.42220527198588326, 0.42256745304791776, 0.43151147482716695, 0.41934546090592606, 0.40800120973898796, 0.40826248711661706, 0.4036161505102151, 0.40626187906556865, 0.37746918974944926, 0.38102380289944515, 0.39793492795186286, 0.37672083299268017, 0.3863700123991177, 0.34821092360102507, 0.3530099042347472, 0.3396710169990821, 0.33817939929690705, 0.31686892103304903, 0.33382838343695376, 0.32304515237223125, 0.31880944150864976, 0.325867084672879, 0.2975122168858951, 0.3013393040212579], "accuracy": [0.31898030638694763, 0.47391360998153687, 0.5312376022338867, 0.6501122713088989, 0.7088891863822937, 0.7111346125602722, 0.7500990629196167, 0.7556465268135071, 0.7708360552787781, 0.7774402499198914, 0.7621186375617981, 0.7932901978492737, 0.8005547523498535, 0.802271842956543, 0.8094043135643005, 0.8129705190658569, 0.817989706993103, 0.8235371708869934, 0.8183859586715698, 0.8297450542449951, 0.8330471515655518, 0.8407079577445984, 0.8413683772087097, 0.839519202709198, 0.8424250483512878, 0.8477083444595337, 0.8492933511734009, 0.8442742228507996, 0.8462554216384888, 0.8615770936012268, 0.8602562546730042, 0.8510104417800903, 0.8585391640663147, 0.8553691506385803, 0.8702945709228516, 0.8673887252807617, 0.8701624870300293, 0.8739928603172302, 0.8771628737449646, 0.8755778670310974, 0.880729079246521, 0.8790120482444763, 0.8742570281028748, 0.8882578015327454, 0.8865407705307007], "val_loss": [1.003479242324829, 1.314337934766497, 0.6698019504547119, 0.5962587084089007, 0.5956063781465802, 0.5398834092276437, 0.5194756814411708, 0.4984877790723528, 0.51069404397692, 0.49093406541006906, 0.44585560049329487, 0.4685847418648856, 0.4242000494684492, 0.40511077642440796, 0.4040274790355137, 0.4399793744087219, 0.39216584818703787, 0.4567304849624634, 0.38168942076819284, 0.4251028895378113, 0.37271805320467266, 0.38042813539505005, 0.3837026613099234, 0.3892624293054853, 0.36412328481674194, 0.3695366382598877, 0.3856170177459717, 0.36429629155567717, 0.38013467618397306, 0.3443787693977356, 0.39546823501586914, 0.3637915679386684, 0.3536943793296814, 0.3298490473202297, 0.3573636072022574, 0.35138880355017527, 0.32792116914476666, 0.35199064016342163, 0.3320005110331944, 0.3197729502405439, 0.3424496991293771, 0.3356079033442906, 0.3422314524650574, 0.33718281984329224, 0.3545259066990444], "val_accuracy": [0.6159999966621399, 0.4896666705608368, 0.7056666612625122, 0.734333336353302, 0.7126666903495789, 0.762333333492279, 0.7683333158493042, 0.7836666703224182, 0.777999997138977, 0.7699999809265137, 0.7953333258628845, 0.793666660785675, 0.8076666593551636, 0.8216666579246521, 0.8266666531562805, 0.7983333468437195, 0.8360000252723694, 0.8029999732971191, 0.8410000205039978, 0.8180000185966492, 0.8446666598320007, 0.8366666436195374, 0.8266666531562805, 0.8293333053588867, 0.8503333330154419, 0.843999981880188, 0.8346666693687439, 0.8356666564941406, 0.8429999947547913, 0.8560000061988831, 0.8223333358764648, 0.8496666550636292, 0.8579999804496765, 0.8673333525657654, 0.8603333234786987, 0.859666645526886, 0.8683333396911621, 0.8506666421890259, 0.8643333315849304, 0.875, 0.862333357334137, 0.8610000014305115, 0.8640000224113464, 0.862333357334137, 0.8483333587646484]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 3, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 42, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 1, 3, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8128571510314941, "mapping_values": [1, 20, 20, 11, 9, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), alpha)), tf.math.square(tf.math.add(alpha, grad))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.981351069550016, 1.5349047169189696, 1.3723243342461824, 0.9147770745942243, 0.7592220188462582, 0.7541607434503028, 0.6601786821777511, 0.6503169212075525, 0.6077379690752116, 0.5879406829110825, 0.6203387808790296, 0.5513474061866682, 0.5339801613255704, 0.5327362981746068, 0.50473991010435, 0.4983430227677836, 0.4902150674723458, 0.46884170538713715, 0.4874148141155311, 0.4612260999507624, 0.4541456229328369, 0.42220527198588326, 0.42256745304791776, 0.43151147482716695, 0.41934546090592606, 0.40800120973898796, 0.40826248711661706, 0.4036161505102151, 0.40626187906556865, 0.37746918974944926, 0.38102380289944515, 0.39793492795186286, 0.37672083299268017, 0.3863700123991177, 0.34821092360102507, 0.3530099042347472, 0.3396710169990821, 0.33817939929690705, 0.31686892103304903, 0.33382838343695376, 0.32304515237223125, 0.31880944150864976, 0.325867084672879, 0.2975122168858951, 0.3013393040212579], "accuracy": [0.31898030638694763, 0.47391360998153687, 0.5312376022338867, 0.6501122713088989, 0.7088891863822937, 0.7111346125602722, 0.7500990629196167, 0.7556465268135071, 0.7708360552787781, 0.7774402499198914, 0.7621186375617981, 0.7932901978492737, 0.8005547523498535, 0.802271842956543, 0.8094043135643005, 0.8129705190658569, 0.817989706993103, 0.8235371708869934, 0.8183859586715698, 0.8297450542449951, 0.8330471515655518, 0.8407079577445984, 0.8413683772087097, 0.839519202709198, 0.8424250483512878, 0.8477083444595337, 0.8492933511734009, 0.8442742228507996, 0.8462554216384888, 0.8615770936012268, 0.8602562546730042, 0.8510104417800903, 0.8585391640663147, 0.8553691506385803, 0.8702945709228516, 0.8673887252807617, 0.8701624870300293, 0.8739928603172302, 0.8771628737449646, 0.8755778670310974, 0.880729079246521, 0.8790120482444763, 0.8742570281028748, 0.8882578015327454, 0.8865407705307007], "val_loss": [1.003479242324829, 1.314337934766497, 0.6698019504547119, 0.5962587084089007, 0.5956063781465802, 0.5398834092276437, 0.5194756814411708, 0.4984877790723528, 0.51069404397692, 0.49093406541006906, 0.44585560049329487, 0.4685847418648856, 0.4242000494684492, 0.40511077642440796, 0.4040274790355137, 0.4399793744087219, 0.39216584818703787, 0.4567304849624634, 0.38168942076819284, 0.4251028895378113, 0.37271805320467266, 0.38042813539505005, 0.3837026613099234, 0.3892624293054853, 0.36412328481674194, 0.3695366382598877, 0.3856170177459717, 0.36429629155567717, 0.38013467618397306, 0.3443787693977356, 0.39546823501586914, 0.3637915679386684, 0.3536943793296814, 0.3298490473202297, 0.3573636072022574, 0.35138880355017527, 0.32792116914476666, 0.35199064016342163, 0.3320005110331944, 0.3197729502405439, 0.3424496991293771, 0.3356079033442906, 0.3422314524650574, 0.33718281984329224, 0.3545259066990444], "val_accuracy": [0.6159999966621399, 0.4896666705608368, 0.7056666612625122, 0.734333336353302, 0.7126666903495789, 0.762333333492279, 0.7683333158493042, 0.7836666703224182, 0.777999997138977, 0.7699999809265137, 0.7953333258628845, 0.793666660785675, 0.8076666593551636, 0.8216666579246521, 0.8266666531562805, 0.7983333468437195, 0.8360000252723694, 0.8029999732971191, 0.8410000205039978, 0.8180000185966492, 0.8446666598320007, 0.8366666436195374, 0.8266666531562805, 0.8293333053588867, 0.8503333330154419, 0.843999981880188, 0.8346666693687439, 0.8356666564941406, 0.8429999947547913, 0.8560000061988831, 0.8223333358764648, 0.8496666550636292, 0.8579999804496765, 0.8673333525657654, 0.8603333234786987, 0.859666645526886, 0.8683333396911621, 0.8506666421890259, 0.8643333315849304, 0.875, 0.862333357334137, 0.8610000014305115, 0.8640000224113464, 0.862333357334137, 0.8483333587646484]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 3, 2, 1, 5, 4, 2, 1, 6, 1, 2, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [2, 0, 1, 2, 1, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 71, 56, 29, 57, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8128571510314941, "mapping_values": [1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, tf.math.square(alpha)), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.981351069550016, 1.5349047169189696, 1.3723243342461824, 0.9147770745942243, 0.7592220188462582, 0.7541607434503028, 0.6601786821777511, 0.6503169212075525, 0.6077379690752116, 0.5879406829110825, 0.6203387808790296, 0.5513474061866682, 0.5339801613255704, 0.5327362981746068, 0.50473991010435, 0.4983430227677836, 0.4902150674723458, 0.46884170538713715, 0.4874148141155311, 0.4612260999507624, 0.4541456229328369, 0.42220527198588326, 0.42256745304791776, 0.43151147482716695, 0.41934546090592606, 0.40800120973898796, 0.40826248711661706, 0.4036161505102151, 0.40626187906556865, 0.37746918974944926, 0.38102380289944515, 0.39793492795186286, 0.37672083299268017, 0.3863700123991177, 0.34821092360102507, 0.3530099042347472, 0.3396710169990821, 0.33817939929690705, 0.31686892103304903, 0.33382838343695376, 0.32304515237223125, 0.31880944150864976, 0.325867084672879, 0.2975122168858951, 0.3013393040212579], "accuracy": [0.31898030638694763, 0.47391360998153687, 0.5312376022338867, 0.6501122713088989, 0.7088891863822937, 0.7111346125602722, 0.7500990629196167, 0.7556465268135071, 0.7708360552787781, 0.7774402499198914, 0.7621186375617981, 0.7932901978492737, 0.8005547523498535, 0.802271842956543, 0.8094043135643005, 0.8129705190658569, 0.817989706993103, 0.8235371708869934, 0.8183859586715698, 0.8297450542449951, 0.8330471515655518, 0.8407079577445984, 0.8413683772087097, 0.839519202709198, 0.8424250483512878, 0.8477083444595337, 0.8492933511734009, 0.8442742228507996, 0.8462554216384888, 0.8615770936012268, 0.8602562546730042, 0.8510104417800903, 0.8585391640663147, 0.8553691506385803, 0.8702945709228516, 0.8673887252807617, 0.8701624870300293, 0.8739928603172302, 0.8771628737449646, 0.8755778670310974, 0.880729079246521, 0.8790120482444763, 0.8742570281028748, 0.8882578015327454, 0.8865407705307007], "val_loss": [1.003479242324829, 1.314337934766497, 0.6698019504547119, 0.5962587084089007, 0.5956063781465802, 0.5398834092276437, 0.5194756814411708, 0.4984877790723528, 0.51069404397692, 0.49093406541006906, 0.44585560049329487, 0.4685847418648856, 0.4242000494684492, 0.40511077642440796, 0.4040274790355137, 0.4399793744087219, 0.39216584818703787, 0.4567304849624634, 0.38168942076819284, 0.4251028895378113, 0.37271805320467266, 0.38042813539505005, 0.3837026613099234, 0.3892624293054853, 0.36412328481674194, 0.3695366382598877, 0.3856170177459717, 0.36429629155567717, 0.38013467618397306, 0.3443787693977356, 0.39546823501586914, 0.3637915679386684, 0.3536943793296814, 0.3298490473202297, 0.3573636072022574, 0.35138880355017527, 0.32792116914476666, 0.35199064016342163, 0.3320005110331944, 0.3197729502405439, 0.3424496991293771, 0.3356079033442906, 0.3422314524650574, 0.33718281984329224, 0.3545259066990444], "val_accuracy": [0.6159999966621399, 0.4896666705608368, 0.7056666612625122, 0.734333336353302, 0.7126666903495789, 0.762333333492279, 0.7683333158493042, 0.7836666703224182, 0.777999997138977, 0.7699999809265137, 0.7953333258628845, 0.793666660785675, 0.8076666593551636, 0.8216666579246521, 0.8266666531562805, 0.7983333468437195, 0.8360000252723694, 0.8029999732971191, 0.8410000205039978, 0.8180000185966492, 0.8446666598320007, 0.8366666436195374, 0.8266666531562805, 0.8293333053588867, 0.8503333330154419, 0.843999981880188, 0.8346666693687439, 0.8356666564941406, 0.8429999947547913, 0.8560000061988831, 0.8223333358764648, 0.8496666550636292, 0.8579999804496765, 0.8673333525657654, 0.8603333234786987, 0.859666645526886, 0.8683333396911621, 0.8506666421890259, 0.8643333315849304, 0.875, 0.862333357334137, 0.8610000014305115, 0.8640000224113464, 0.862333357334137, 0.8483333587646484]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 3, 2, 1, 5, 3, 8, 1, 2, 1, 6, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 71, 82, 29, 57, 89, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8128571510314941, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.981351069550016, 1.5349047169189696, 1.3723243342461824, 0.9147770745942243, 0.7592220188462582, 0.7541607434503028, 0.6601786821777511, 0.6503169212075525, 0.6077379690752116, 0.5879406829110825, 0.6203387808790296, 0.5513474061866682, 0.5339801613255704, 0.5327362981746068, 0.50473991010435, 0.4983430227677836, 0.4902150674723458, 0.46884170538713715, 0.4874148141155311, 0.4612260999507624, 0.4541456229328369, 0.42220527198588326, 0.42256745304791776, 0.43151147482716695, 0.41934546090592606, 0.40800120973898796, 0.40826248711661706, 0.4036161505102151, 0.40626187906556865, 0.37746918974944926, 0.38102380289944515, 0.39793492795186286, 0.37672083299268017, 0.3863700123991177, 0.34821092360102507, 0.3530099042347472, 0.3396710169990821, 0.33817939929690705, 0.31686892103304903, 0.33382838343695376, 0.32304515237223125, 0.31880944150864976, 0.325867084672879, 0.2975122168858951, 0.3013393040212579], "accuracy": [0.31898030638694763, 0.47391360998153687, 0.5312376022338867, 0.6501122713088989, 0.7088891863822937, 0.7111346125602722, 0.7500990629196167, 0.7556465268135071, 0.7708360552787781, 0.7774402499198914, 0.7621186375617981, 0.7932901978492737, 0.8005547523498535, 0.802271842956543, 0.8094043135643005, 0.8129705190658569, 0.817989706993103, 0.8235371708869934, 0.8183859586715698, 0.8297450542449951, 0.8330471515655518, 0.8407079577445984, 0.8413683772087097, 0.839519202709198, 0.8424250483512878, 0.8477083444595337, 0.8492933511734009, 0.8442742228507996, 0.8462554216384888, 0.8615770936012268, 0.8602562546730042, 0.8510104417800903, 0.8585391640663147, 0.8553691506385803, 0.8702945709228516, 0.8673887252807617, 0.8701624870300293, 0.8739928603172302, 0.8771628737449646, 0.8755778670310974, 0.880729079246521, 0.8790120482444763, 0.8742570281028748, 0.8882578015327454, 0.8865407705307007], "val_loss": [1.003479242324829, 1.314337934766497, 0.6698019504547119, 0.5962587084089007, 0.5956063781465802, 0.5398834092276437, 0.5194756814411708, 0.4984877790723528, 0.51069404397692, 0.49093406541006906, 0.44585560049329487, 0.4685847418648856, 0.4242000494684492, 0.40511077642440796, 0.4040274790355137, 0.4399793744087219, 0.39216584818703787, 0.4567304849624634, 0.38168942076819284, 0.4251028895378113, 0.37271805320467266, 0.38042813539505005, 0.3837026613099234, 0.3892624293054853, 0.36412328481674194, 0.3695366382598877, 0.3856170177459717, 0.36429629155567717, 0.38013467618397306, 0.3443787693977356, 0.39546823501586914, 0.3637915679386684, 0.3536943793296814, 0.3298490473202297, 0.3573636072022574, 0.35138880355017527, 0.32792116914476666, 0.35199064016342163, 0.3320005110331944, 0.3197729502405439, 0.3424496991293771, 0.3356079033442906, 0.3422314524650574, 0.33718281984329224, 0.3545259066990444], "val_accuracy": [0.6159999966621399, 0.4896666705608368, 0.7056666612625122, 0.734333336353302, 0.7126666903495789, 0.762333333492279, 0.7683333158493042, 0.7836666703224182, 0.777999997138977, 0.7699999809265137, 0.7953333258628845, 0.793666660785675, 0.8076666593551636, 0.8216666579246521, 0.8266666531562805, 0.7983333468437195, 0.8360000252723694, 0.8029999732971191, 0.8410000205039978, 0.8180000185966492, 0.8446666598320007, 0.8366666436195374, 0.8266666531562805, 0.8293333053588867, 0.8503333330154419, 0.843999981880188, 0.8346666693687439, 0.8356666564941406, 0.8429999947547913, 0.8560000061988831, 0.8223333358764648, 0.8496666550636292, 0.8579999804496765, 0.8673333525657654, 0.8603333234786987, 0.859666645526886, 0.8683333396911621, 0.8506666421890259, 0.8643333315849304, 0.875, 0.862333357334137, 0.8610000014305115, 0.8640000224113464, 0.862333357334137, 0.8483333587646484]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 1, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 1, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8128571510314941, "mapping_values": [1, 22, 22, 12, 10, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(grad, alpha), grad))))), tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.981351069550016, 1.5349047169189696, 1.3723243342461824, 0.9147770745942243, 0.7592220188462582, 0.7541607434503028, 0.6601786821777511, 0.6503169212075525, 0.6077379690752116, 0.5879406829110825, 0.6203387808790296, 0.5513474061866682, 0.5339801613255704, 0.5327362981746068, 0.50473991010435, 0.4983430227677836, 0.4902150674723458, 0.46884170538713715, 0.4874148141155311, 0.4612260999507624, 0.4541456229328369, 0.42220527198588326, 0.42256745304791776, 0.43151147482716695, 0.41934546090592606, 0.40800120973898796, 0.40826248711661706, 0.4036161505102151, 0.40626187906556865, 0.37746918974944926, 0.38102380289944515, 0.39793492795186286, 0.37672083299268017, 0.3863700123991177, 0.34821092360102507, 0.3530099042347472, 0.3396710169990821, 0.33817939929690705, 0.31686892103304903, 0.33382838343695376, 0.32304515237223125, 0.31880944150864976, 0.325867084672879, 0.2975122168858951, 0.3013393040212579], "accuracy": [0.31898030638694763, 0.47391360998153687, 0.5312376022338867, 0.6501122713088989, 0.7088891863822937, 0.7111346125602722, 0.7500990629196167, 0.7556465268135071, 0.7708360552787781, 0.7774402499198914, 0.7621186375617981, 0.7932901978492737, 0.8005547523498535, 0.802271842956543, 0.8094043135643005, 0.8129705190658569, 0.817989706993103, 0.8235371708869934, 0.8183859586715698, 0.8297450542449951, 0.8330471515655518, 0.8407079577445984, 0.8413683772087097, 0.839519202709198, 0.8424250483512878, 0.8477083444595337, 0.8492933511734009, 0.8442742228507996, 0.8462554216384888, 0.8615770936012268, 0.8602562546730042, 0.8510104417800903, 0.8585391640663147, 0.8553691506385803, 0.8702945709228516, 0.8673887252807617, 0.8701624870300293, 0.8739928603172302, 0.8771628737449646, 0.8755778670310974, 0.880729079246521, 0.8790120482444763, 0.8742570281028748, 0.8882578015327454, 0.8865407705307007], "val_loss": [1.003479242324829, 1.314337934766497, 0.6698019504547119, 0.5962587084089007, 0.5956063781465802, 0.5398834092276437, 0.5194756814411708, 0.4984877790723528, 0.51069404397692, 0.49093406541006906, 0.44585560049329487, 0.4685847418648856, 0.4242000494684492, 0.40511077642440796, 0.4040274790355137, 0.4399793744087219, 0.39216584818703787, 0.4567304849624634, 0.38168942076819284, 0.4251028895378113, 0.37271805320467266, 0.38042813539505005, 0.3837026613099234, 0.3892624293054853, 0.36412328481674194, 0.3695366382598877, 0.3856170177459717, 0.36429629155567717, 0.38013467618397306, 0.3443787693977356, 0.39546823501586914, 0.3637915679386684, 0.3536943793296814, 0.3298490473202297, 0.3573636072022574, 0.35138880355017527, 0.32792116914476666, 0.35199064016342163, 0.3320005110331944, 0.3197729502405439, 0.3424496991293771, 0.3356079033442906, 0.3422314524650574, 0.33718281984329224, 0.3545259066990444], "val_accuracy": [0.6159999966621399, 0.4896666705608368, 0.7056666612625122, 0.734333336353302, 0.7126666903495789, 0.762333333492279, 0.7683333158493042, 0.7836666703224182, 0.777999997138977, 0.7699999809265137, 0.7953333258628845, 0.793666660785675, 0.8076666593551636, 0.8216666579246521, 0.8266666531562805, 0.7983333468437195, 0.8360000252723694, 0.8029999732971191, 0.8410000205039978, 0.8180000185966492, 0.8446666598320007, 0.8366666436195374, 0.8266666531562805, 0.8293333053588867, 0.8503333330154419, 0.843999981880188, 0.8346666693687439, 0.8356666564941406, 0.8429999947547913, 0.8560000061988831, 0.8223333358764648, 0.8496666550636292, 0.8579999804496765, 0.8673333525657654, 0.8603333234786987, 0.859666645526886, 0.8683333396911621, 0.8506666421890259, 0.8643333315849304, 0.875, 0.862333357334137, 0.8610000014305115, 0.8640000224113464, 0.862333357334137, 0.8483333587646484]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 0, 2, 2, 2, 1, 2, 2, 0, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 1, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.44685715436935425, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.072566134897221, 1.9364535862727803, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.3121120035648346, 0.3516048192977905, 0.17738740146160126, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.4493397985185896, 1.6003712926592146, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.32866665720939636, 0.4410000145435333, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 9, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 2, 2, 1, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 3, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 3, 1, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.31057143211364746, "mapping_values": [1, 16, 16, 9, 7, 2, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), alpha), tf.math.add(beta, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.2090780235253242, 2.3416507923686507, 2.249468571757754, 2.2404349519119697, 2.305453134360897, 2.3015887283173533], "accuracy": [0.2238806039094925, 0.12851670384407043, 0.21529521048069, 0.1526878923177719, 0.09734513610601425, 0.10645885765552521], "val_loss": [1.6440016882760184, 1.9602090290614538, 1.9720403126307897, 1.9769824572971888, 1.9740518842424666, 1.946859495980399], "val_accuracy": [0.32233333587646484, 0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10233332961797714, 0.2160000056028366]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 8, 2, 9, 5, 4, 0, 8, 2, 0, 4, 6, 8, 3, 2, 8, 9, 5, 0, 1, 4, 2, 3, 9, 2], [0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [38, 71, 62, 29, 31, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [4, 9, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.31057143211364746, "mapping_values": [1, 6, 6, 4, 2, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2090780235253242, 2.3416507923686507, 2.249468571757754, 2.2404349519119697, 2.305453134360897, 2.3015887283173533], "accuracy": [0.2238806039094925, 0.12851670384407043, 0.21529521048069, 0.1526878923177719, 0.09734513610601425, 0.10645885765552521], "val_loss": [1.6440016882760184, 1.9602090290614538, 1.9720403126307897, 1.9769824572971888, 1.9740518842424666, 1.946859495980399], "val_accuracy": [0.32233333587646484, 0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10233332961797714, 0.2160000056028366]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [9, 8, 2, 4, 8, 0, 2, 8, 6, 3, 6, 2, 5, 4, 2, 5, 9, 8, 0, 2, 2, 2, 0, 3, 2, 2, 0, 2, 2, 7, 7, 6, 6, 1, 9, 2, 7, 1, 1, 5, 2, 0, 0, 9], [0, 0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 2, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 45, 35, 27, 13, 79, 53, 52, 93, 71, 15, 68], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 1, 1, 6, 6, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 3, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 19, 19, 10, 9, 3, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.subtract(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [48.55762702378583, 567.5400477530162, 2327.0847364351844, 6134.559611975383, 12960.417801324544, 23660.596001085556], "accuracy": [0.09668471664190292, 0.10157178342342377, 0.09972262382507324, 0.10289261490106583, 0.10487385839223862, 0.09985470771789551], "val_loss": [137.32084001813615, 833.6907610212054, 2619.855538504464, 6024.727818080357, 11577.424386160714, 19803.276227678572], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 8, 6, 4, 8, 2, 2, 8, 1, 3, 6, 2, 8, 4, 2, 6, 9, 8, 0, 2, 8, 2, 0, 3, 2, 2, 0, 8, 2, 7, 7, 6, 6, 1, 9, 4, 7, 1, 1, 5, 2, 0, 0, 9], [0, 3, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [71, 10, 35, 27, 57, 79, 53, 52, 41, 53, 88, 82, 47, 88, 20, 94], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 3, 8, 1, 1, 6, 6, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [0, 1, 3, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.302932790273279, 2.3024576328780437, 2.3024055927562803, 2.3023917753430974, 2.30250569388788, 2.3024867641266074, 2.30250183497721], "accuracy": [0.1006472036242485, 0.10527011007070541, 0.10460969805717468, 0.1088363528251648, 0.09998679161071777, 0.10645885765552521, 0.1026284471154213], "val_loss": [1.9736827441624232, 1.9736949375697546, 1.9737354006086076, 1.9737426212855749, 1.9737816538129533, 1.9738386017935616, 1.973918846675328], "val_accuracy": [0.09966666996479034, 0.10000000149011612, 0.0976666659116745, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 9, 2, 1, 2, 8, 1, 2, 0, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [2, 0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 71, 82, 29, 57, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 14, 9, 3, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), grad)))))))))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.negative(grad), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 2, 2, 2, 5, 3, 0, 1, 2, 2, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [71, 10, 35, 27, 57, 79, 53, 52, 41, 53, 88, 82, 47, 88, 20, 94], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [3, 1, 3, 8, 9, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 11, 9, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), grad))))))), alpha)), tf.math.add(alpha, tf.math.square(grad)))), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06194690242409706, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [3, 8, 0, 3, 5, 3, 2, 1, 2, 1, 5, 8, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 3, 1, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07436270266771317, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 2, 2, 3, 5, 3, 2, 1, 2, 2, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 0, 1, 2, 2, 2, 0, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 71, 82, 29, 57, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), grad), grad)))))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07436270266771317, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 2, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 83, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [38, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 18, 12, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.add(alpha, grad)))), grad), grad), tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07436270266771317, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 8, 3, 2, 1, 2, 0, 5, 2, 9, 8, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 0, 2, 1, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 71, 62, 29, 31, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07436270266771317, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 3, 5, 2, 9, 3, 2, 8, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 3, 2, 1, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 1, 1, 6, 6, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [53, 25, 50, 71, 34]], "fitness": -0.08542857319116592, "mapping_values": [1, 32, 32, 21, 11, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, alpha)))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.3046493921706928, 2.3047685910996947, 2.3062327565644254, 2.3084876032521806, 2.3120818644813212, 2.3162615794578736, 2.3182509293126046, 2.3228712862886693, 2.3324200505546497, 2.341826693981142, 2.378837499226782, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0886276587843895, 0.0820235088467598, 0.08730682730674744, 0.08241976052522659, 0.07924976944923401, 0.0746268630027771, 0.07700435817241669, 0.0742306187748909, 0.07607977837324142, 0.07660810649394989, 0.07607977837324142, 0.09219389408826828, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9719582285199846, 1.9733406475612096, 1.9748682975769043, 1.9769748960222517, 1.9795574460710799, 1.982463768550328, 1.9856136185782296, 1.9897615568978446, 1.9966000829424178, 2.009282725197928, 2.061445985521589, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03099999949336052, 0.02866666577756405, 0.029666665941476822, 0.027666667476296425, 0.032999999821186066, 0.039000000804662704, 0.04899999871850014, 0.070333331823349, 0.08633333444595337, 0.09700000286102295, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 3, 2, 0, 5, 3, 2, 3, 2, 1, 6, 2, 9, 3, 2, 6, 9, 5, 2, 2, 9, 2, 0, 9, 2, 3, 2, 3, 9, 4, 4, 8, 6, 1, 5, 3, 5, 2, 3, 7, 5], [2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 71, 82, 29, 82, 79, 53, 52, 53, 40, 65], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 3, 3, 0, 8, 9, 9, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 0, 0, 1, 1, 3, 0, 0], [13, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 24, 24, 14, 10, 3, 7, 7, 3, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.304043627906359, 2.3025147424256245, 2.3021592541834335, 2.3022745455481264, 2.302516731493477, 2.302723620656207], "accuracy": [0.08994849026203156, 0.08625016361474991, 0.09272222965955734, 0.09060890227556229, 0.09047681838274002, 0.08875974267721176], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 8, 2, 4, 8, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 8, 2, 8, 2, 0, 9, 2], [0, 3, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 45, 28, 27, 57, 79, 53, 52, 93, 71, 15], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 1, 1, 6, 6, 4, 6, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 1, 1, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 3, 4, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.035428572446107864, "mapping_values": [1, 30, 30, 19, 11, 5, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), grad)))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(beta, beta), beta)", "other_info": {"loss": [1380858.6324392906, 6.025281915197346, 13.425642729781764, 30.65873015633884, 52.79864661272538, 82.71861444245775], "accuracy": [0.06973979622125626, 0.10170386731624603, 0.09998679161071777, 0.09602430462837219, 0.09932637959718704, 0.09866596013307571], "val_loss": [3.192056792122977, 8.605858939034599, 19.928306034633092, 34.09104701450893, 58.00825064522879, 84.00101361955915], "val_accuracy": [0.10000000149011612, 0.09966666996479034, 0.10000000149011612, 0.09966666996479034, 0.10000000149011612, 0.09966666996479034]}}]