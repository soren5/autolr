[{"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 8, 4, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 0, 1, 0, 0], [62, 33, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8214285969734192, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.math.add(beta, grad)), grad), tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.967857013525287, 1.3626542797713406, 0.9964204225494814, 0.9457583361770404, 0.7899730942032325, 0.7324584743303, 0.6938229774471445, 0.7181177045517688, 0.68057207251269, 0.639670884919409, 0.6303730924226163, 0.6365379556657269, 0.6009118941796691, 0.5897169093831561, 0.5805965941170533, 0.5531706901006632, 0.570735978522809, 0.5390952551495587, 0.5262574701025156, 0.5290405731537496, 0.5433826963222258, 0.509468551037759, 0.4914688077805584, 0.4761461034080592, 0.4599169520551754, 0.4651336753058191, 0.468474231690873, 0.4586442665432769, 0.46086145421580366, 0.45825296377839664, 0.44753229734589317, 0.44672540582449777, 0.4323191994555386, 0.4197079784732217, 0.4134528746560517, 0.41130789604641743, 0.40621495477165354, 0.4155947177708661, 0.3896978820642507, 0.3883200410319011, 0.394792553660829, 0.37783354654634604], "accuracy": [0.3559635579586029, 0.5153876543045044, 0.6449610590934753, 0.6495839357376099, 0.7036058902740479, 0.7269845604896545, 0.7397965788841248, 0.733060359954834, 0.7441553473472595, 0.7511557340621948, 0.7633073329925537, 0.7582882046699524, 0.7695152759552002, 0.7724210619926453, 0.774798572063446, 0.7868181467056274, 0.7833839654922485, 0.7972526550292969, 0.8030643463134766, 0.7968564033508301, 0.793422281742096, 0.8057059645652771, 0.8170651197433472, 0.8168009519577026, 0.8301413059234619, 0.8280280232429504, 0.8245938420295715, 0.8301413059234619, 0.8259146809577942, 0.8278959393501282, 0.837537944316864, 0.83119797706604, 0.8367455005645752, 0.8444063067436218, 0.8502179384231567, 0.8490291833877563, 0.8475762605667114, 0.8404437899589539, 0.8569541573524475, 0.8532558679580688, 0.8537842035293579, 0.8594637513160706], "val_loss": [1.4719931738717216, 0.8371666329247611, 0.6540025813238961, 0.6375014611652919, 0.564601080758231, 0.5740386588232858, 0.5529757567814418, 0.550970196723938, 0.5028899567467826, 0.5596287250518799, 0.4840410607201712, 0.5130903380257743, 0.4918849127633231, 0.4589594772883824, 0.44897860288619995, 0.4399729711668832, 0.4912060499191284, 0.4280924115862165, 0.4333464929035732, 0.4514681271144322, 0.4093877502850124, 0.4247278571128845, 0.41345109258379253, 0.4019500953810556, 0.3861211282866342, 0.39755117893218994, 0.42561607701437815, 0.384495028427669, 0.4235885909625462, 0.37877907923289705, 0.3872584956032889, 0.38593894243240356, 0.3722441281591143, 0.36867542777742657, 0.36355944190706524, 0.35361716576984953, 0.3556122524397714, 0.36077362298965454, 0.40231768574033466, 0.3608273182596479, 0.3691584212439401, 0.373456026826586], "val_accuracy": [0.39500001072883606, 0.6399999856948853, 0.6983333230018616, 0.7163333296775818, 0.7483333349227905, 0.7223333120346069, 0.7453333139419556, 0.7450000047683716, 0.7646666765213013, 0.7413333058357239, 0.7863333225250244, 0.7743333578109741, 0.7636666893959045, 0.8050000071525574, 0.79666668176651, 0.8040000200271606, 0.7903333306312561, 0.8163333535194397, 0.8053333163261414, 0.7910000085830688, 0.8263333439826965, 0.8116666674613953, 0.8296666741371155, 0.82833331823349, 0.8386666774749756, 0.8273333311080933, 0.8109999895095825, 0.8373333215713501, 0.8270000219345093, 0.8420000076293945, 0.8316666483879089, 0.8339999914169312, 0.8429999947547913, 0.847000002861023, 0.8426666855812073, 0.8523333072662354, 0.8546666502952576, 0.843999981880188, 0.8243333101272583, 0.8500000238418579, 0.8416666388511658, 0.8306666612625122]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 1, 5, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 4, 0, 1, 3, 1, 3, 0, 0], [55, 33, 93, 9, 74, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8214285969734192, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.967857013525287, 1.3626542797713406, 0.9964204225494814, 0.9457583361770404, 0.7899730942032325, 0.7324584743303, 0.6938229774471445, 0.7181177045517688, 0.68057207251269, 0.639670884919409, 0.6303730924226163, 0.6365379556657269, 0.6009118941796691, 0.5897169093831561, 0.5805965941170533, 0.5531706901006632, 0.570735978522809, 0.5390952551495587, 0.5262574701025156, 0.5290405731537496, 0.5433826963222258, 0.509468551037759, 0.4914688077805584, 0.4761461034080592, 0.4599169520551754, 0.4651336753058191, 0.468474231690873, 0.4586442665432769, 0.46086145421580366, 0.45825296377839664, 0.44753229734589317, 0.44672540582449777, 0.4323191994555386, 0.4197079784732217, 0.4134528746560517, 0.41130789604641743, 0.40621495477165354, 0.4155947177708661, 0.3896978820642507, 0.3883200410319011, 0.394792553660829, 0.37783354654634604], "accuracy": [0.3559635579586029, 0.5153876543045044, 0.6449610590934753, 0.6495839357376099, 0.7036058902740479, 0.7269845604896545, 0.7397965788841248, 0.733060359954834, 0.7441553473472595, 0.7511557340621948, 0.7633073329925537, 0.7582882046699524, 0.7695152759552002, 0.7724210619926453, 0.774798572063446, 0.7868181467056274, 0.7833839654922485, 0.7972526550292969, 0.8030643463134766, 0.7968564033508301, 0.793422281742096, 0.8057059645652771, 0.8170651197433472, 0.8168009519577026, 0.8301413059234619, 0.8280280232429504, 0.8245938420295715, 0.8301413059234619, 0.8259146809577942, 0.8278959393501282, 0.837537944316864, 0.83119797706604, 0.8367455005645752, 0.8444063067436218, 0.8502179384231567, 0.8490291833877563, 0.8475762605667114, 0.8404437899589539, 0.8569541573524475, 0.8532558679580688, 0.8537842035293579, 0.8594637513160706], "val_loss": [1.4719931738717216, 0.8371666329247611, 0.6540025813238961, 0.6375014611652919, 0.564601080758231, 0.5740386588232858, 0.5529757567814418, 0.550970196723938, 0.5028899567467826, 0.5596287250518799, 0.4840410607201712, 0.5130903380257743, 0.4918849127633231, 0.4589594772883824, 0.44897860288619995, 0.4399729711668832, 0.4912060499191284, 0.4280924115862165, 0.4333464929035732, 0.4514681271144322, 0.4093877502850124, 0.4247278571128845, 0.41345109258379253, 0.4019500953810556, 0.3861211282866342, 0.39755117893218994, 0.42561607701437815, 0.384495028427669, 0.4235885909625462, 0.37877907923289705, 0.3872584956032889, 0.38593894243240356, 0.3722441281591143, 0.36867542777742657, 0.36355944190706524, 0.35361716576984953, 0.3556122524397714, 0.36077362298965454, 0.40231768574033466, 0.3608273182596479, 0.3691584212439401, 0.373456026826586], "val_accuracy": [0.39500001072883606, 0.6399999856948853, 0.6983333230018616, 0.7163333296775818, 0.7483333349227905, 0.7223333120346069, 0.7453333139419556, 0.7450000047683716, 0.7646666765213013, 0.7413333058357239, 0.7863333225250244, 0.7743333578109741, 0.7636666893959045, 0.8050000071525574, 0.79666668176651, 0.8040000200271606, 0.7903333306312561, 0.8163333535194397, 0.8053333163261414, 0.7910000085830688, 0.8263333439826965, 0.8116666674613953, 0.8296666741371155, 0.82833331823349, 0.8386666774749756, 0.8273333311080933, 0.8109999895095825, 0.8373333215713501, 0.8270000219345093, 0.8420000076293945, 0.8316666483879089, 0.8339999914169312, 0.8429999947547913, 0.847000002861023, 0.8426666855812073, 0.8523333072662354, 0.8546666502952576, 0.843999981880188, 0.8243333101272583, 0.8500000238418579, 0.8416666388511658, 0.8306666612625122]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 2, 8, 0, 4, 9, 6, 1, 1, 4, 2, 8, 1, 1, 8, 9, 0], [0, 2, 1, 0, 0, 3, 1, 3, 0, 0], [30, 87, 36, 82, 8, 7], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8214285969734192, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.967857013525287, 1.3626542797713406, 0.9964204225494814, 0.9457583361770404, 0.7899730942032325, 0.7324584743303, 0.6938229774471445, 0.7181177045517688, 0.68057207251269, 0.639670884919409, 0.6303730924226163, 0.6365379556657269, 0.6009118941796691, 0.5897169093831561, 0.5805965941170533, 0.5531706901006632, 0.570735978522809, 0.5390952551495587, 0.5262574701025156, 0.5290405731537496, 0.5433826963222258, 0.509468551037759, 0.4914688077805584, 0.4761461034080592, 0.4599169520551754, 0.4651336753058191, 0.468474231690873, 0.4586442665432769, 0.46086145421580366, 0.45825296377839664, 0.44753229734589317, 0.44672540582449777, 0.4323191994555386, 0.4197079784732217, 0.4134528746560517, 0.41130789604641743, 0.40621495477165354, 0.4155947177708661, 0.3896978820642507, 0.3883200410319011, 0.394792553660829, 0.37783354654634604], "accuracy": [0.3559635579586029, 0.5153876543045044, 0.6449610590934753, 0.6495839357376099, 0.7036058902740479, 0.7269845604896545, 0.7397965788841248, 0.733060359954834, 0.7441553473472595, 0.7511557340621948, 0.7633073329925537, 0.7582882046699524, 0.7695152759552002, 0.7724210619926453, 0.774798572063446, 0.7868181467056274, 0.7833839654922485, 0.7972526550292969, 0.8030643463134766, 0.7968564033508301, 0.793422281742096, 0.8057059645652771, 0.8170651197433472, 0.8168009519577026, 0.8301413059234619, 0.8280280232429504, 0.8245938420295715, 0.8301413059234619, 0.8259146809577942, 0.8278959393501282, 0.837537944316864, 0.83119797706604, 0.8367455005645752, 0.8444063067436218, 0.8502179384231567, 0.8490291833877563, 0.8475762605667114, 0.8404437899589539, 0.8569541573524475, 0.8532558679580688, 0.8537842035293579, 0.8594637513160706], "val_loss": [1.4719931738717216, 0.8371666329247611, 0.6540025813238961, 0.6375014611652919, 0.564601080758231, 0.5740386588232858, 0.5529757567814418, 0.550970196723938, 0.5028899567467826, 0.5596287250518799, 0.4840410607201712, 0.5130903380257743, 0.4918849127633231, 0.4589594772883824, 0.44897860288619995, 0.4399729711668832, 0.4912060499191284, 0.4280924115862165, 0.4333464929035732, 0.4514681271144322, 0.4093877502850124, 0.4247278571128845, 0.41345109258379253, 0.4019500953810556, 0.3861211282866342, 0.39755117893218994, 0.42561607701437815, 0.384495028427669, 0.4235885909625462, 0.37877907923289705, 0.3872584956032889, 0.38593894243240356, 0.3722441281591143, 0.36867542777742657, 0.36355944190706524, 0.35361716576984953, 0.3556122524397714, 0.36077362298965454, 0.40231768574033466, 0.3608273182596479, 0.3691584212439401, 0.373456026826586], "val_accuracy": [0.39500001072883606, 0.6399999856948853, 0.6983333230018616, 0.7163333296775818, 0.7483333349227905, 0.7223333120346069, 0.7453333139419556, 0.7450000047683716, 0.7646666765213013, 0.7413333058357239, 0.7863333225250244, 0.7743333578109741, 0.7636666893959045, 0.8050000071525574, 0.79666668176651, 0.8040000200271606, 0.7903333306312561, 0.8163333535194397, 0.8053333163261414, 0.7910000085830688, 0.8263333439826965, 0.8116666674613953, 0.8296666741371155, 0.82833331823349, 0.8386666774749756, 0.8273333311080933, 0.8109999895095825, 0.8373333215713501, 0.8270000219345093, 0.8420000076293945, 0.8316666483879089, 0.8339999914169312, 0.8429999947547913, 0.847000002861023, 0.8426666855812073, 0.8523333072662354, 0.8546666502952576, 0.843999981880188, 0.8243333101272583, 0.8500000238418579, 0.8416666388511658, 0.8306666612625122]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 1, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 3, 3, 1, 3, 0, 0], [55, 56, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8214285969734192, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(grad, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad))))), tf.math.add(beta, grad)))))), alpha), tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.967857013525287, 1.3626542797713406, 0.9964204225494814, 0.9457583361770404, 0.7899730942032325, 0.7324584743303, 0.6938229774471445, 0.7181177045517688, 0.68057207251269, 0.639670884919409, 0.6303730924226163, 0.6365379556657269, 0.6009118941796691, 0.5897169093831561, 0.5805965941170533, 0.5531706901006632, 0.570735978522809, 0.5390952551495587, 0.5262574701025156, 0.5290405731537496, 0.5433826963222258, 0.509468551037759, 0.4914688077805584, 0.4761461034080592, 0.4599169520551754, 0.4651336753058191, 0.468474231690873, 0.4586442665432769, 0.46086145421580366, 0.45825296377839664, 0.44753229734589317, 0.44672540582449777, 0.4323191994555386, 0.4197079784732217, 0.4134528746560517, 0.41130789604641743, 0.40621495477165354, 0.4155947177708661, 0.3896978820642507, 0.3883200410319011, 0.394792553660829, 0.37783354654634604], "accuracy": [0.3559635579586029, 0.5153876543045044, 0.6449610590934753, 0.6495839357376099, 0.7036058902740479, 0.7269845604896545, 0.7397965788841248, 0.733060359954834, 0.7441553473472595, 0.7511557340621948, 0.7633073329925537, 0.7582882046699524, 0.7695152759552002, 0.7724210619926453, 0.774798572063446, 0.7868181467056274, 0.7833839654922485, 0.7972526550292969, 0.8030643463134766, 0.7968564033508301, 0.793422281742096, 0.8057059645652771, 0.8170651197433472, 0.8168009519577026, 0.8301413059234619, 0.8280280232429504, 0.8245938420295715, 0.8301413059234619, 0.8259146809577942, 0.8278959393501282, 0.837537944316864, 0.83119797706604, 0.8367455005645752, 0.8444063067436218, 0.8502179384231567, 0.8490291833877563, 0.8475762605667114, 0.8404437899589539, 0.8569541573524475, 0.8532558679580688, 0.8537842035293579, 0.8594637513160706], "val_loss": [1.4719931738717216, 0.8371666329247611, 0.6540025813238961, 0.6375014611652919, 0.564601080758231, 0.5740386588232858, 0.5529757567814418, 0.550970196723938, 0.5028899567467826, 0.5596287250518799, 0.4840410607201712, 0.5130903380257743, 0.4918849127633231, 0.4589594772883824, 0.44897860288619995, 0.4399729711668832, 0.4912060499191284, 0.4280924115862165, 0.4333464929035732, 0.4514681271144322, 0.4093877502850124, 0.4247278571128845, 0.41345109258379253, 0.4019500953810556, 0.3861211282866342, 0.39755117893218994, 0.42561607701437815, 0.384495028427669, 0.4235885909625462, 0.37877907923289705, 0.3872584956032889, 0.38593894243240356, 0.3722441281591143, 0.36867542777742657, 0.36355944190706524, 0.35361716576984953, 0.3556122524397714, 0.36077362298965454, 0.40231768574033466, 0.3608273182596479, 0.3691584212439401, 0.373456026826586], "val_accuracy": [0.39500001072883606, 0.6399999856948853, 0.6983333230018616, 0.7163333296775818, 0.7483333349227905, 0.7223333120346069, 0.7453333139419556, 0.7450000047683716, 0.7646666765213013, 0.7413333058357239, 0.7863333225250244, 0.7743333578109741, 0.7636666893959045, 0.8050000071525574, 0.79666668176651, 0.8040000200271606, 0.7903333306312561, 0.8163333535194397, 0.8053333163261414, 0.7910000085830688, 0.8263333439826965, 0.8116666674613953, 0.8296666741371155, 0.82833331823349, 0.8386666774749756, 0.8273333311080933, 0.8109999895095825, 0.8373333215713501, 0.8270000219345093, 0.8420000076293945, 0.8316666483879089, 0.8339999914169312, 0.8429999947547913, 0.847000002861023, 0.8426666855812073, 0.8523333072662354, 0.8546666502952576, 0.843999981880188, 0.8243333101272583, 0.8500000238418579, 0.8416666388511658, 0.8306666612625122]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 1, 2, 1, 0, 4, 9, 6, 1, 0, 4, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8214285969734192, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 13, 9, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), tf.math.add(beta, alpha))))), alpha)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.967857013525287, 1.3626542797713406, 0.9964204225494814, 0.9457583361770404, 0.7899730942032325, 0.7324584743303, 0.6938229774471445, 0.7181177045517688, 0.68057207251269, 0.639670884919409, 0.6303730924226163, 0.6365379556657269, 0.6009118941796691, 0.5897169093831561, 0.5805965941170533, 0.5531706901006632, 0.570735978522809, 0.5390952551495587, 0.5262574701025156, 0.5290405731537496, 0.5433826963222258, 0.509468551037759, 0.4914688077805584, 0.4761461034080592, 0.4599169520551754, 0.4651336753058191, 0.468474231690873, 0.4586442665432769, 0.46086145421580366, 0.45825296377839664, 0.44753229734589317, 0.44672540582449777, 0.4323191994555386, 0.4197079784732217, 0.4134528746560517, 0.41130789604641743, 0.40621495477165354, 0.4155947177708661, 0.3896978820642507, 0.3883200410319011, 0.394792553660829, 0.37783354654634604], "accuracy": [0.3559635579586029, 0.5153876543045044, 0.6449610590934753, 0.6495839357376099, 0.7036058902740479, 0.7269845604896545, 0.7397965788841248, 0.733060359954834, 0.7441553473472595, 0.7511557340621948, 0.7633073329925537, 0.7582882046699524, 0.7695152759552002, 0.7724210619926453, 0.774798572063446, 0.7868181467056274, 0.7833839654922485, 0.7972526550292969, 0.8030643463134766, 0.7968564033508301, 0.793422281742096, 0.8057059645652771, 0.8170651197433472, 0.8168009519577026, 0.8301413059234619, 0.8280280232429504, 0.8245938420295715, 0.8301413059234619, 0.8259146809577942, 0.8278959393501282, 0.837537944316864, 0.83119797706604, 0.8367455005645752, 0.8444063067436218, 0.8502179384231567, 0.8490291833877563, 0.8475762605667114, 0.8404437899589539, 0.8569541573524475, 0.8532558679580688, 0.8537842035293579, 0.8594637513160706], "val_loss": [1.4719931738717216, 0.8371666329247611, 0.6540025813238961, 0.6375014611652919, 0.564601080758231, 0.5740386588232858, 0.5529757567814418, 0.550970196723938, 0.5028899567467826, 0.5596287250518799, 0.4840410607201712, 0.5130903380257743, 0.4918849127633231, 0.4589594772883824, 0.44897860288619995, 0.4399729711668832, 0.4912060499191284, 0.4280924115862165, 0.4333464929035732, 0.4514681271144322, 0.4093877502850124, 0.4247278571128845, 0.41345109258379253, 0.4019500953810556, 0.3861211282866342, 0.39755117893218994, 0.42561607701437815, 0.384495028427669, 0.4235885909625462, 0.37877907923289705, 0.3872584956032889, 0.38593894243240356, 0.3722441281591143, 0.36867542777742657, 0.36355944190706524, 0.35361716576984953, 0.3556122524397714, 0.36077362298965454, 0.40231768574033466, 0.3608273182596479, 0.3691584212439401, 0.373456026826586], "val_accuracy": [0.39500001072883606, 0.6399999856948853, 0.6983333230018616, 0.7163333296775818, 0.7483333349227905, 0.7223333120346069, 0.7453333139419556, 0.7450000047683716, 0.7646666765213013, 0.7413333058357239, 0.7863333225250244, 0.7743333578109741, 0.7636666893959045, 0.8050000071525574, 0.79666668176651, 0.8040000200271606, 0.7903333306312561, 0.8163333535194397, 0.8053333163261414, 0.7910000085830688, 0.8263333439826965, 0.8116666674613953, 0.8296666741371155, 0.82833331823349, 0.8386666774749756, 0.8273333311080933, 0.8109999895095825, 0.8373333215713501, 0.8270000219345093, 0.8420000076293945, 0.8316666483879089, 0.8339999914169312, 0.8429999947547913, 0.847000002861023, 0.8426666855812073, 0.8523333072662354, 0.8546666502952576, 0.843999981880188, 0.8243333101272583, 0.8500000238418579, 0.8416666388511658, 0.8306666612625122]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 3, 0, 0], [55, 56, 2, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8057143092155457, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 4, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(grad, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.288166904147149, 2.027055000490469, 1.4600315739402776, 1.2657111017632525, 1.1659501792417462, 0.8852937274825666, 0.8759869128768754, 0.7394590210354072, 0.7075556950672444, 0.6643577372519222, 0.635860848570103, 0.6480671366160776, 0.5829926278723103, 0.5662405841685305, 0.5548502619728484, 0.5395861315161969, 0.5370775822477727, 0.5141894845930404, 0.5346706537380982, 0.48816368903356094, 0.4943704940993725, 0.49403834535445457, 0.4629833520072846, 0.4679709973982092, 0.4535348395929046, 0.43764163869609135, 0.4501910454026145, 0.44775003795893975, 0.44644302057709756, 0.42352133976737694, 0.4096168360304225, 0.4212557110040416, 0.4127342236583668, 0.3908273754590979, 0.3867287873048761, 0.38975417391184125, 0.3852462397157366, 0.3853863020417807, 0.3599374116277966, 0.37277606510294115, 0.35873269912368666, 0.35985454698878666, 0.3609952128495617, 0.3552057421155468], "accuracy": [0.24937260150909424, 0.3203011453151703, 0.4994056224822998, 0.5532954931259155, 0.5923920273780823, 0.6667547225952148, 0.6738871932029724, 0.7228899598121643, 0.7304186820983887, 0.7464007139205933, 0.7668735980987549, 0.7543256878852844, 0.7829877138137817, 0.7833839654922485, 0.7907806038856506, 0.8020076751708984, 0.7950072884559631, 0.8035926818847656, 0.8016114234924316, 0.8142913579940796, 0.813498854637146, 0.8170651197433472, 0.8278959393501282, 0.8239334225654602, 0.8298771381378174, 0.8378021121025085, 0.8313300609588623, 0.8356888294219971, 0.8273676037788391, 0.8432175517082214, 0.8451988101005554, 0.8412362933158875, 0.843481719493866, 0.8495575189590454, 0.8544445633888245, 0.8548408150672913, 0.8477083444595337, 0.8533879518508911, 0.8639545440673828, 0.859199583530426, 0.86118084192276, 0.8648791313171387, 0.8578787446022034, 0.8617091774940491], "val_loss": [1.9138678823198592, 1.0541950634547643, 1.1092234679630824, 1.1069040298461914, 0.6453367982591901, 0.8279340267181396, 0.5544141190392631, 0.5643182141440255, 0.5044402224676949, 0.519606215613229, 0.5106744085039411, 0.5017137697764805, 0.434989401272365, 0.4313646810395377, 0.4458062989371164, 0.424943208694458, 0.4298574754170009, 0.4058228646005903, 0.3971716250692095, 0.40884818349565777, 0.37583340065819876, 0.3886592558452061, 0.39844841616494314, 0.3953867639814104, 0.3644840972764151, 0.3583764774458749, 0.387013988835471, 0.36823004484176636, 0.40811448437826975, 0.35433369874954224, 0.3696868930544172, 0.34718395130974905, 0.3627558265413557, 0.3882320523262024, 0.35798085587365286, 0.35673638752528597, 0.34023494379861013, 0.3433439220700945, 0.33692123208727154, 0.3349977561405727, 0.3420440895216806, 0.3657967873982021, 0.4088848488671439, 0.33290729352406095], "val_accuracy": [0.4480000138282776, 0.5820000171661377, 0.6053333282470703, 0.5910000205039978, 0.722000002861023, 0.6193333268165588, 0.7540000081062317, 0.7483333349227905, 0.765666663646698, 0.7710000276565552, 0.7706666588783264, 0.7866666913032532, 0.8040000200271606, 0.8190000057220459, 0.7979999780654907, 0.8196666836738586, 0.8036666512489319, 0.8296666741371155, 0.8353333473205566, 0.812333345413208, 0.8363333344459534, 0.8363333344459534, 0.8206666707992554, 0.8303333520889282, 0.8496666550636292, 0.8513333201408386, 0.8373333215713501, 0.8413333296775818, 0.8226666450500488, 0.8556666374206543, 0.8403333425521851, 0.8560000061988831, 0.8460000157356262, 0.828000009059906, 0.8446666598320007, 0.8483333587646484, 0.8613333106040955, 0.8583333492279053, 0.8673333525657654, 0.8659999966621399, 0.8619999885559082, 0.8363333344459534, 0.8083333373069763, 0.8616666793823242]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 8, 3, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [55, 33, 2, 9, 74, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 4, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.36885714530944824, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [3.6304626470827044, 2.306337886089032, 2.30365445456091, 2.278765982672082, 2.3110597442248557, 2.2690587128158164, 2.2939881328987863, 2.2200862062038795, 2.3045976923409865, 2.3035089972154292, 2.3034626631736126, 2.303545929169721], "accuracy": [0.19891692698001862, 0.09932637959718704, 0.10527011007070541, 0.14291374385356903, 0.12468630075454712, 0.15374454855918884, 0.19138818979263306, 0.18901069462299347, 0.09787346422672272, 0.10091137140989304, 0.09813763201236725, 0.1010434553027153], "val_loss": [1.9808926582336426, 1.9739750453404017, 1.9727226666041784, 1.8773086411612374, 1.9724572726658411, 1.3727614198412215, 1.58767454964774, 1.9747042655944824, 1.9735046114240373, 1.9736618995666504, 1.9739576067243303, 1.9737358774457658], "val_accuracy": [0.10400000214576721, 0.09700000286102295, 0.09833333641290665, 0.4346666634082794, 0.09833333641290665, 0.42366665601730347, 0.484333336353302, 0.10400000214576721, 0.10400000214576721, 0.09733333438634872, 0.0976666659116745, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 3, 1, 0, 3, 0, 0], [55, 56, 2, 35, 74, 78], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.36885714530944824, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 1, 3, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))), grad), grad)), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [3.6304626470827044, 2.306337886089032, 2.30365445456091, 2.278765982672082, 2.3110597442248557, 2.2690587128158164, 2.2939881328987863, 2.2200862062038795, 2.3045976923409865, 2.3035089972154292, 2.3034626631736126, 2.303545929169721], "accuracy": [0.19891692698001862, 0.09932637959718704, 0.10527011007070541, 0.14291374385356903, 0.12468630075454712, 0.15374454855918884, 0.19138818979263306, 0.18901069462299347, 0.09787346422672272, 0.10091137140989304, 0.09813763201236725, 0.1010434553027153], "val_loss": [1.9808926582336426, 1.9739750453404017, 1.9727226666041784, 1.8773086411612374, 1.9724572726658411, 1.3727614198412215, 1.58767454964774, 1.9747042655944824, 1.9735046114240373, 1.9736618995666504, 1.9739576067243303, 1.9737358774457658], "val_accuracy": [0.10400000214576721, 0.09700000286102295, 0.09833333641290665, 0.4346666634082794, 0.09833333641290665, 0.42366665601730347, 0.484333336353302, 0.10400000214576721, 0.10400000214576721, 0.09733333438634872, 0.0976666659116745, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 3, 5, 4, 0, 4, 9, 6, 1, 1, 4, 6, 8, 1, 1, 8, 9, 0], [0, 3, 3, 2, 0, 3, 1, 3, 0, 0], [55, 33, 2, 9, 74, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [5, 3, 2, 6, 7, 4, 1, 7, 7, 0, 5, 4, 2, 1, 3, 2, 1, 0, 2, 2, 5, 4, 9, 9], [2, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [70, 25, 23, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 11, 11, 7, 4, 2, 3, 1, 1, 0, 0, 40, 24, 16, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(grad, grad)))), tf.math.negative(tf.math.add(beta, tf.math.pow(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.negative(beta), beta)))), tf.math.square(tf.math.pow(tf.math.add(sigma, tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma)), beta))), tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.negative(beta), tf.math.add(tf.math.add(sigma, sigma), tf.math.square(tf.math.pow(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 1, 2, 8, 5, 4, 9, 6, 4, 1, 4, 2, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 1, 3, 0, 0], [52, 87, 36, 12, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 2, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 13, 9, 3, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.pow(alpha, tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))))))), grad), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.sqrt(alpha), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [4, 1, 2, 8, 0, 4, 9, 6, 1, 1, 4, 2, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 3, 3, 0, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [0, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 28, 28, 18, 10, 5, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(alpha, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, grad))))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, grad))))), grad)), tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [11712.45893832, 218384.69465311716, 995094.7070895522, 2769154.689472989, 6023850.910777968, 10976142.197331924], "accuracy": [0.09655263274908066, 0.10077928751707077, 0.09959053993225098, 0.10196803510189056, 0.09813763201236725, 0.10011887550354004], "val_loss": [43759.447544642855, 344190.96428571426, 1155543.6785714286, 2732060.3571428573, 5327982.714285715, 9197561.42857143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [3, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 0, 5, 9, 6, 1, 3, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 3, 0, 3, 1, 1, 0, 0], [52, 86, 36, 34, 36, 7], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [0, 3], [], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 8, 6, 7, 4, 9, 9], [0, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 4, 1, 2, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302327636431048, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [4, 8, 3, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [91, 33, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07158895581960678, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 2, 0, 3, 2, 3, 0, 0], [55, 56, 2, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [8, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 1, 2, 8, 0, 4, 9, 6, 1, 1, 4, 2, 8, 1, 1, 8, 9, 0], [0, 2, 3, 0, 3, 3, 1, 3, 0, 0], [55, 33, 2, 35, 74, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 27, 27, 17, 10, 6, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.subtract(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad)))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), grad))), tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [4, 8, 3, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [49, 33, 2, 35, 74, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [0, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 2, 1, 0, 0, 0, 0, 4, 2, 2, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [20.293178979069754, 198.54034643912627, 730.5536049583475, 1873.6420826527105, 3917.170866577648, 6982.388846007793], "accuracy": [0.09668471664190292, 0.1006472036242485, 0.10011887550354004, 0.10210011899471283, 0.09826971590518951, 0.09959053993225098], "val_loss": [51.92130824497768, 272.5474155970982, 804.256574358259, 1803.3247767857142, 3417.774344308036, 5800.806222098215], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 2, 1, 0, 4, 9, 4, 0, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 0, 3, 0, 0], [48, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 3, 4, 6, 7, 4, 2, 7, 6, 4, 3, 9, 0], [2, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 5, 1, 0, 0, 0, 0, 24, 13, 11, 4], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(beta, tf.math.add(tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(beta, tf.math.pow(beta, tf.math.multiply(sigma, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.negative(sigma)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [3, 1, 2, 8, 0, 4, 9, 4, 1, 5, 4, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 3, 0, 0], [48, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 8, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [15, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 23, 23, 14, 9, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))), tf.math.pow(grad, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.subtract(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.sqrt(alpha), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 1, 3, 1, 2, 4, 3, 6, 1, 2, 6, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 3, 3, 1, 3, 0, 0], [52, 87, 5, 82, 8, 7], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 2, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [8, 25, 61, 71, 34]], "fitness": -0.06400000303983688, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.8779926060087186, 2.3045826934788756, 2.4147814239697953, 2.303523061140386, 2.7416949759951796, 2.3058020632422247, 2.3033899137325387], "accuracy": [0.16338661313056946, 0.09906221181154251, 0.09787346422672272, 0.09206181764602661, 0.10936468094587326, 0.09615638852119446, 0.09549596905708313], "val_loss": [1.9765161105564661, 1.9548619134085519, 1.9737194606236048, 1.9733926909310477, 1.9766123635428292, 1.9737862178257533, 1.973435742514474], "val_accuracy": [0.09833333641290665, 0.14233332872390747, 0.10400000214576721, 0.10366666316986084, 0.09966666996479034, 0.10366666316986084, 0.10333333164453506]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [4, 1, 2, 9, 0, 4, 0, 4, 1, 1, 4, 8, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 0, 3, 0, 0], [19, 16, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 8, 6, 7, 4], [3, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 6, 4, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), grad), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(sigma, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3029089454552123, 2.3028901455314514, 2.3021471712331354, 2.3020532718187847, 2.3035430962997516, 2.302520363857686], "accuracy": [0.09179764986038208, 0.09113723784685135, 0.09325055778026581, 0.09311848133802414, 0.09311848133802414, 0.09245806187391281], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]