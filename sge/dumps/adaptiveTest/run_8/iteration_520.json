[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.8097142577171326, "mapping_values": [1, 16, 16, 10, 6, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.08535345188615, 1.7807580693806355, 1.2412070906661394, 1.005538298524429, 0.8684074314688301, 0.7724447346650032, 0.7435766499607145, 0.6805690178828957, 0.6498151936189074, 0.6318292957034959, 0.5918138802027926, 0.5737400760645596, 0.559363480863507, 0.5502663644163789, 0.5325146301185387, 0.5245494022266725, 0.49167588511793103, 0.5113760603614188, 0.513087704303384, 0.4873213062606326, 0.4710964618255402, 0.4517169895267852, 0.4408936278616291, 0.4529164345383156, 0.4443353027550142, 0.4486601863594229, 0.4281300311358755, 0.4181770159426367, 0.41598659642399927, 0.4049523084777111, 0.39477431313976746, 0.3888467845545469], "accuracy": [0.294148713350296, 0.41989168524742126, 0.5651829242706299, 0.6268656849861145, 0.677189290523529, 0.7082287669181824, 0.7213049530982971, 0.7452120184898376, 0.7559106945991516, 0.7531369924545288, 0.7711002230644226, 0.7837802171707153, 0.7858935594558716, 0.789459764957428, 0.798309326171875, 0.8063663840293884, 0.8173292875289917, 0.8053097128868103, 0.8020076751708984, 0.8148196935653687, 0.8269713521003723, 0.8302733898162842, 0.8374059200286865, 0.8304054737091064, 0.8355567455291748, 0.8318583965301514, 0.8413683772087097, 0.8432175517082214, 0.8471800088882446, 0.8485008478164673, 0.852859616279602, 0.8558974862098694], "val_loss": [1.8684583391462053, 1.2114166532244002, 0.91222197668893, 0.6742158446993146, 0.5599902527672904, 0.6418158326830182, 0.6104987519127982, 0.4995323930467878, 0.53403787953513, 0.4734810931341989, 0.4618856906890869, 0.45418934311185566, 0.4606020620891026, 0.4243574397904532, 0.45664308752332416, 0.42281954629080637, 0.48690174307141987, 0.43189822775977, 0.4097529649734497, 0.42236123766217915, 0.39183459111622404, 0.38816388164247784, 0.4407619323049273, 0.4284310851778303, 0.3720097967556545, 0.36489819628851755, 0.3564996293612889, 0.38193232672555105, 0.35208146061216083, 0.37280737502234323, 0.3566217933382307, 0.34932216576167513], "val_accuracy": [0.34200000762939453, 0.47333332896232605, 0.6006666421890259, 0.7039999961853027, 0.7540000081062317, 0.6883333325386047, 0.7176666855812073, 0.7723333239555359, 0.7463333606719971, 0.7836666703224182, 0.7953333258628845, 0.7879999876022339, 0.7946666479110718, 0.8043333292007446, 0.7963333129882812, 0.8286666870117188, 0.7973333597183228, 0.7979999780654907, 0.8356666564941406, 0.8166666626930237, 0.8386666774749756, 0.8326666951179504, 0.7919999957084656, 0.8073333501815796, 0.8373333215713501, 0.8523333072662354, 0.859000027179718, 0.8323333263397217, 0.8543333411216736, 0.8403333425521851, 0.846666693687439, 0.859000027179718]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [5, 9, 0, 1, 0, 3, 8, 2, 9, 3, 1, 8], [2, 3, 0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.8097142577171326, "mapping_values": [1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.08535345188615, 1.7807580693806355, 1.2412070906661394, 1.005538298524429, 0.8684074314688301, 0.7724447346650032, 0.7435766499607145, 0.6805690178828957, 0.6498151936189074, 0.6318292957034959, 0.5918138802027926, 0.5737400760645596, 0.559363480863507, 0.5502663644163789, 0.5325146301185387, 0.5245494022266725, 0.49167588511793103, 0.5113760603614188, 0.513087704303384, 0.4873213062606326, 0.4710964618255402, 0.4517169895267852, 0.4408936278616291, 0.4529164345383156, 0.4443353027550142, 0.4486601863594229, 0.4281300311358755, 0.4181770159426367, 0.41598659642399927, 0.4049523084777111, 0.39477431313976746, 0.3888467845545469], "accuracy": [0.294148713350296, 0.41989168524742126, 0.5651829242706299, 0.6268656849861145, 0.677189290523529, 0.7082287669181824, 0.7213049530982971, 0.7452120184898376, 0.7559106945991516, 0.7531369924545288, 0.7711002230644226, 0.7837802171707153, 0.7858935594558716, 0.789459764957428, 0.798309326171875, 0.8063663840293884, 0.8173292875289917, 0.8053097128868103, 0.8020076751708984, 0.8148196935653687, 0.8269713521003723, 0.8302733898162842, 0.8374059200286865, 0.8304054737091064, 0.8355567455291748, 0.8318583965301514, 0.8413683772087097, 0.8432175517082214, 0.8471800088882446, 0.8485008478164673, 0.852859616279602, 0.8558974862098694], "val_loss": [1.8684583391462053, 1.2114166532244002, 0.91222197668893, 0.6742158446993146, 0.5599902527672904, 0.6418158326830182, 0.6104987519127982, 0.4995323930467878, 0.53403787953513, 0.4734810931341989, 0.4618856906890869, 0.45418934311185566, 0.4606020620891026, 0.4243574397904532, 0.45664308752332416, 0.42281954629080637, 0.48690174307141987, 0.43189822775977, 0.4097529649734497, 0.42236123766217915, 0.39183459111622404, 0.38816388164247784, 0.4407619323049273, 0.4284310851778303, 0.3720097967556545, 0.36489819628851755, 0.3564996293612889, 0.38193232672555105, 0.35208146061216083, 0.37280737502234323, 0.3566217933382307, 0.34932216576167513], "val_accuracy": [0.34200000762939453, 0.47333332896232605, 0.6006666421890259, 0.7039999961853027, 0.7540000081062317, 0.6883333325386047, 0.7176666855812073, 0.7723333239555359, 0.7463333606719971, 0.7836666703224182, 0.7953333258628845, 0.7879999876022339, 0.7946666479110718, 0.8043333292007446, 0.7963333129882812, 0.8286666870117188, 0.7973333597183228, 0.7979999780654907, 0.8356666564941406, 0.8166666626930237, 0.8386666774749756, 0.8326666951179504, 0.7919999957084656, 0.8073333501815796, 0.8373333215713501, 0.8523333072662354, 0.859000027179718, 0.8323333263397217, 0.8543333411216736, 0.8403333425521851, 0.846666693687439, 0.859000027179718]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [2, 9, 6, 6, 2, 3, 8, 2, 6, 6, 1, 8, 2, 1, 9, 6, 3, 5], [1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 2, 2], [24, 98, 75, 86, 46, 73, 18, 25, 62, 84], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [89, 25, 50, 71, 34]], "fitness": -0.4097142815589905, "mapping_values": [1, 16, 16, 9, 7, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3023925494870583, 2.3008806524086527, 2.301271683724801, 2.2984776340376794, 2.2984918033316184, 2.298928644647373, 2.297964133260241, 2.2959939261091193, 2.2951347881131214, 2.294485271189585, 2.2944578915350253, 2.2948108465443857, 2.293467225872247, 2.2922384176492345, 2.2921492764348637, 2.2918525387377646, 2.288409003870063, 2.2887029457306425, 2.2867343973379723, 2.288096557849465, 2.2869575114030374, 2.2874009613001336, 2.2844369488936436, 2.2852918825223854, 2.284825634411565, 2.2842074583676104, 2.2830693418197723, 2.2829430884909336, 2.2817927719406432, 2.2809923343560197, 2.280722684234188, 2.279802878676719, 2.278234646446622, 2.2788960399282545, 2.277531653504881, 2.276515931816086, 2.2758530196480984, 2.27511098406586, 2.2749303562797656, 2.2731593725247046, 2.273676612987778, 2.2727685077016253, 2.272573681460899, 2.273105552813412, 2.2709984675122605, 2.269643042364991, 2.2676779543955123, 2.268942204763735, 2.26770145917345, 2.2657665878538253, 2.2657038726196976, 2.2660041729598674, 2.26585167651919, 2.2638301999262533, 2.262822331848114, 2.2632554307070234, 2.2612070519265055, 2.26193875920708, 2.2606251894475102, 2.2594019562387824, 2.2593276953227988, 2.2571577787430783, 2.2568669693581165, 2.255420233359064, 2.2559710426605166, 2.2533708421104794, 2.2516938558013417, 2.252758137695762, 2.25315385497147, 2.250942182767629, 2.251611906445148, 2.2488316454198998, 2.2497951367811173, 2.2465982422647914, 2.245766516516568, 2.246307641665351, 2.2453536043203646, 2.244560502917303, 2.2440682957752145, 2.2427083055624446, 2.2424662984546466, 2.2412703511516856, 2.24006534948514, 2.238084957694428, 2.2367565673434613, 2.2364268177268274, 2.234953499111155, 2.235684095514197, 2.2341694229424762, 2.2333626022207866, 2.234926033989943, 2.2314681567536088, 2.2293400552530707, 2.231869127205287, 2.229821399375826, 2.2282033474878973, 2.2274525483617253, 2.2269757873488296, 2.224992671930527, 2.2244659834345177], "accuracy": [0.08691058307886124, 0.09206181764602661, 0.09113723784685135, 0.09615638852119446, 0.09985470771789551, 0.09694888442754745, 0.09840179979801178, 0.11015717685222626, 0.11002509295940399, 0.10157178342342377, 0.11266675591468811, 0.10659094154834747, 0.11187426000833511, 0.11570466309785843, 0.11491216719150543, 0.12112006545066833, 0.12376172095537186, 0.12270505726337433, 0.1294412910938263, 0.1294412910938263, 0.1274600476026535, 0.12878087162971497, 0.13472460210323334, 0.13842293620109558, 0.13380002975463867, 0.13591335713863373, 0.14053626358509064, 0.14317791163921356, 0.14317791163921356, 0.14634791016578674, 0.15149913728237152, 0.14370624721050262, 0.1550653874874115, 0.15110288560390472, 0.15612204372882843, 0.15889579057693481, 0.160084530711174, 0.15968827903270721, 0.1604807823896408, 0.1678774207830429, 0.1674811840057373, 0.16616034507751465, 0.17038699984550476, 0.16312244534492493, 0.1748778223991394, 0.17580240964889526, 0.1802932173013687, 0.17910447716712952, 0.18121780455112457, 0.18372738361358643, 0.18253862857818604, 0.18782195448875427, 0.19059570133686066, 0.19336943328380585, 0.19759608805179596, 0.1888786107301712, 0.19799233973026276, 0.1954827606678009, 0.19733192026615143, 0.1982565075159073, 0.19772817194461823, 0.20921939611434937, 0.20921939611434937, 0.20776647329330444, 0.21159687638282776, 0.22084268927574158, 0.2222955971956253, 0.21820102632045746, 0.21278563141822815, 0.2218993455171585, 0.22335226833820343, 0.22678641974925995, 0.22242768108844757, 0.23497556149959564, 0.2347113937139511, 0.23523972928524017, 0.23603223264217377, 0.23405098915100098, 0.2413155436515808, 0.24303261935710907, 0.2432967871427536, 0.2432967871427536, 0.24778760969638824, 0.2491084337234497, 0.25439175963401794, 0.2513538599014282, 0.25782591104507446, 0.24765552580356598, 0.2584863305091858, 0.25478801131248474, 0.25201427936553955, 0.252938836812973, 0.26244881749153137, 0.26059964299201965, 0.2674679756164551, 0.26601505279541016, 0.2631092369556427, 0.2723550498485565, 0.27037379145622253, 0.27327960729599], "val_loss": [1.9699039459228516, 1.9692234992980957, 1.968545709337507, 1.9678678512573242, 1.9671872002737862, 1.9665077754429408, 1.9658282824925013, 1.9651509012494768, 1.9644765172685896, 1.9638042449951172, 1.9631352424621582, 1.9624556132725306, 1.9617832047598702, 1.9611155646187919, 1.9604440416608537, 1.9597646849496024, 1.9591036524091447, 1.9584380558558874, 1.9577646255493164, 1.9570989608764648, 1.9564307757786341, 1.9557692664010184, 1.9550986971173967, 1.9544287409101213, 1.9537584441048759, 1.9530815396990096, 1.9524126052856445, 1.9517464637756348, 1.9510767800467355, 1.9504075731549944, 1.9497299194335938, 1.949054786137172, 1.9483812195914132, 1.947702203478132, 1.9470229830060686, 1.9463358606610979, 1.9456560952322823, 1.9449701990400041, 1.944291591644287, 1.9436048780168806, 1.9429080826895577, 1.942213671548026, 1.9415298189435686, 1.9408420835222517, 1.9401420184544154, 1.9394477435520716, 1.93874910899571, 1.9380473409380232, 1.9373415538242884, 1.9366272517613001, 1.9359166281563895, 1.9352169718061174, 1.934514113834926, 1.9337874821254186, 1.9330639157976424, 1.93234007699149, 1.931617055620466, 1.9308889252798898, 1.9301530974251884, 1.929417950766427, 1.9286838259015764, 1.9279400280543737, 1.927192074911935, 1.9264360155378069, 1.9256860188075475, 1.9249261447361536, 1.924161502293178, 1.9233967236110143, 1.9226326942443848, 1.921851294381278, 1.921070166996547, 1.9202842031206404, 1.9194891112191337, 1.9186944961547852, 1.9178924560546875, 1.917088576725551, 1.9162778173174178, 1.9154682840619768, 1.9146505083356584, 1.9138219015938895, 1.9129836899893624, 1.9121527671813965, 1.9113079479762487, 1.910456589290074, 1.9095967156546456, 1.9087392943246024, 1.9078678403581892, 1.906989915030343, 1.906109401157924, 1.9052231652396066, 1.904339041028704, 1.9034393855503626, 1.902526923588344, 1.9016269956316267, 1.9007178034101213, 1.899796826498849, 1.8988738059997559, 1.8979445866176061, 1.8970016070774622, 1.8960554259163993], "val_accuracy": [0.04233333468437195, 0.04899999871850014, 0.05233333259820938, 0.0573333315551281, 0.06133333221077919, 0.06466666609048843, 0.07000000029802322, 0.07500000298023224, 0.07999999821186066, 0.0860000029206276, 0.09233333170413971, 0.09966666996479034, 0.10866666585206985, 0.11299999803304672, 0.11999999731779099, 0.1276666671037674, 0.13433332741260529, 0.13866665959358215, 0.1456666737794876, 0.15333333611488342, 0.15966667234897614, 0.16566666960716248, 0.17233332991600037, 0.18166667222976685, 0.18833333253860474, 0.19633333384990692, 0.20233333110809326, 0.20900000631809235, 0.21566666662693024, 0.22166666388511658, 0.22300000488758087, 0.22966666519641876, 0.23333333432674408, 0.23899999260902405, 0.2460000067949295, 0.24933333694934845, 0.2549999952316284, 0.2626666724681854, 0.27033331990242004, 0.27399998903274536, 0.27900001406669617, 0.28700000047683716, 0.2926666736602783, 0.2966666519641876, 0.30000001192092896, 0.30533334612846375, 0.31066668033599854, 0.3136666715145111, 0.3163333237171173, 0.320333331823349, 0.3233333230018616, 0.3283333480358124, 0.33133333921432495, 0.33633333444595337, 0.3409999907016754, 0.3449999988079071, 0.34933334589004517, 0.35066667199134827, 0.3540000021457672, 0.3553333282470703, 0.35766667127609253, 0.3596666753292084, 0.3619999885559082, 0.3646666705608368, 0.36666667461395264, 0.36766666173934937, 0.3696666657924652, 0.37166666984558105, 0.37466666102409363, 0.37700000405311584, 0.3776666522026062, 0.38066667318344116, 0.3816666603088379, 0.38366666436195374, 0.38466668128967285, 0.38499999046325684, 0.3856666684150696, 0.3866666555404663, 0.3876666724681854, 0.38966667652130127, 0.3919999897480011, 0.39399999380111694, 0.3956666588783264, 0.3970000147819519, 0.398333340883255, 0.3996666669845581, 0.40066665410995483, 0.4026666581630707, 0.40400001406669617, 0.4050000011920929, 0.406333327293396, 0.40833333134651184, 0.4099999964237213, 0.41066667437553406, 0.4116666615009308, 0.4129999876022339, 0.41499999165534973, 0.4153333306312561, 0.4163333475589752, 0.41866666078567505]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [2, 2, 2, 2, 3, 3, 0, 2, 5, 6, 4, 4, 2, 5, 3, 9], [1, 3, 2, 2, 2, 1, 2, 2, 0, 0, 0, 3, 2, 2], [24, 98, 68, 73, 46, 73, 84, 25, 62, 84], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 5, 2, 9, 2, 9], [2, 2, 1, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.339428573846817, "mapping_values": [1, 26, 26, 14, 12, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(grad, grad)))), tf.math.add(alpha, alpha))), grad), tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.square(beta), beta)", "other_info": {"loss": [2.4380947621806173, 2.2589700073692636, 2.06097960535089, 2.3047722772190897, 2.303531007555104, 2.303277308269184, 2.303265046922207], "accuracy": [0.21371020376682281, 0.1904636174440384, 0.2588825821876526, 0.10011887550354004, 0.0944393053650856, 0.09602430462837219, 0.09655263274908066], "val_loss": [1.9806887762887138, 1.582672051021031, 1.9773714882986886, 1.9745493616376604, 1.9738969802856445, 1.9736319950648717, 1.9735963685171944], "val_accuracy": [0.11133333295583725, 0.36666667461395264, 0.10000000149011612, 0.10000000149011612, 0.09733333438634872, 0.10000000149011612, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 2, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 1, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [11], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.18457143008708954, "mapping_values": [1, 21, 21, 12, 9, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), alpha))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), grad)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.2122207247207917, 3.728051303384358, 5.5134625101070585, 2.582803017868578, 2.4608085540937252, 2.342042759062828, 2.4665660907910123, 2.3462194668665663, 2.3664470679724396, 2.362352564444773], "accuracy": [0.2856954038143158, 0.20261524617671967, 0.12270505726337433, 0.16563200950622559, 0.16523577272891998, 0.12455421686172485, 0.10011887550354004, 0.10434553027153015, 0.09615638852119446, 0.10196803510189056], "val_loss": [1.9345645223345076, 20.97039304460798, 2.274798665727888, 2.0508999824523926, 1.8811736788068498, 2.069268226623535, 2.003059114728655, 2.005478995186942, 2.048929827553885, 1.9920179503304618], "val_accuracy": [0.16300000250339508, 0.10233332961797714, 0.10400000214576721, 0.17033334076404572, 0.22033333778381348, 0.10233332961797714, 0.10400000214576721, 0.09966666996479034, 0.09733333438634872, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [2, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [24, 61, 68, 73, 46, 73, 84, 25, 62, 99], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0], [2, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.11828571557998657, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 5, 2, 3, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, sigma), beta)", "other_info": {"loss": [2.5526879854709907, 2.386120790440755, 2.1947939978803483, 2.354619066681545, 2.352274564971793, 2.3403372089104835, 2.336834681961499], "accuracy": [0.17461365461349487, 0.137630432844162, 0.21199312806129456, 0.09826971590518951, 0.10408136248588562, 0.10487385839223862, 0.09470347315073013], "val_loss": [2.0061750411987305, 1.8998285021100725, 2.042713369641985, 1.9985265050615584, 1.9994074276515417, 1.9940312249319894, 1.9921845027378626], "val_accuracy": [0.10000000149011612, 0.17000000178813934, 0.09833333641290665, 0.10000000149011612, 0.10499999672174454, 0.10000000149011612, 0.0976666659116745]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [89, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 8, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.square(grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.sqrt(beta), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 7, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 98, 68, 73, 46, 68, 26, 18, 61, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 0, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [90, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 9, 7, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), grad))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 2, 6, 6, 2, 3, 8, 2, 5, 6, 1, 8, 2, 1, 9, 6, 3, 9, 5], [2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 98, 92, 41, 46, 68, 26, 18, 61, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 0, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [95, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 8, 8, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 4], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [2, 9, 6, 8, 2, 3, 8, 2, 6, 6, 1, 8, 2, 1, 9, 6, 3, 5], [2, 3, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [58, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 2, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [89, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 3, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, grad)), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [2, 9, 6, 6, 0, 3, 8, 9, 5, 6, 1, 8], [0, 3, 0, 0, 1, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [11], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 0, 2, 9, 2, 9], [2, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 4, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.math.add(beta, sigma)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3734341.364092883, 2.3143841095761757, 2.305655412418243, 2.3035560544802136, 2.3031485977268584, 2.3030221173162113], "accuracy": [0.09655263274908066, 0.09126931428909302, 0.09998679161071777, 0.09496764093637466, 0.09602430462837219, 0.09338264167308807], "val_loss": [1.9911446571350098, 1.9784670557294572, 1.974850790841239, 1.974208150591169, 1.9738236836024694, 1.9736895561218262], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10000000149011612, 0.09700000286102295, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [9, 7, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [90, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 9, 6, 6, 2, 3, 8, 2, 1, 6, 1, 8, 2, 1, 9, 6, 3, 5], [1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 3, 2, 2], [24, 98, 68, 73, 46, 73, 84, 25, 62, 84], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [4, 2, 0, 0], [0, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))), grad), grad)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [2, 9, 6, 6, 2, 3, 8, 2, 5, 6, 1, 8, 2, 1, 9, 6, 3, 5], [1, 1, 1, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [71, 98, 68, 73, 46, 73, 84, 25, 62, 84], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 0, 0], [4, 2, 0, 0], [0, 3], [11], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [4, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [53, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), alpha)))), tf.math.add(alpha, alpha))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [2, 9, 6, 1, 3, 6, 8, 2, 5, 6, 1, 8, 2, 1, 9, 6, 3, 5], [1, 1, 1, 0, 2, 0, 0, 2, 0, 0, 0, 3, 2, 2], [24, 31, 68, 73, 46, 73, 84, 25, 62, 84], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 1, 0, 0], [4, 2, 0, 0], [0, 3], [11], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 3, 2, 9, 2, 9], [2, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, alpha), alpha))))), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), grad)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07924976944923401, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [2, 9, 2, 6, 2, 3, 8, 2, 5, 9, 1, 8, 2, 1, 9, 8, 3, 5], [1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 2, 2], [24, 98, 75, 86, 46, 73, 84, 25, 62, 84], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 1, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [89, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 2, 3, 8, 2, 5, 6, 1, 8, 2, 1, 9, 6, 3, 9, 5], [2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 98, 68, 73, 46, 68, 26, 18, 61, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [8, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [3, 8, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [95, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(beta), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [2, 2, 2, 1, 0, 3, 8, 8, 0, 6, 4, 4, 2, 5, 3, 9], [1, 1, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [24, 98, 68, 73, 46, 73, 84, 25, 62, 84], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 0, 0], [4, 2, 0, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 2, 2, 9, 2, 9], [2, 2, 1, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 15, 11, 6, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 5, 2, 3, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), alpha)))))), tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(grad, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(beta, beta), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [9, 7, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [78, 98, 75, 86, 46, 73, 84, 25, 62, 84], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [89, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [9, 7, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [1, 1, 1, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 1, 0, 0], [3, 3, 0], [5, 3], [11], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3026894270987985, 2.3018991385689027, 2.3030165054574225, 2.30093753808651, 2.3016864506796195, 2.30285098064278], "accuracy": [0.08585391938686371, 0.08915598690509796, 0.0874389111995697, 0.09113723784685135, 0.09259014576673508, 0.08836349099874496], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]