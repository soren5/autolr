[{"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7862856984138489, "mapping_values": [1, 30, 30, 23, 7, 4, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.negative(grad))))))))), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2565238164668195, 2.0558640241874855, 1.6273974503949333, 1.2649768278693574, 1.0974585888738788, 1.0005304972965798, 0.9341793130449001, 0.901820211819276, 0.8539017683258934, 0.8213820859756389, 0.7974624547031278, 0.7793587454872801, 0.7702972968067743, 0.7650192314765047, 0.7344260332433539, 0.72943425772921, 0.7117367636935429, 0.7100551948256386, 0.6955190939658259, 0.6785928397886568, 0.6747703394318584, 0.669394713831521, 0.6715252540839299, 0.6659653914634499, 0.6464809230085314, 0.6483293181050802, 0.6405311269515132, 0.6309144735698451, 0.633428573230506, 0.6160543992408846, 0.6217366529887205, 0.6174291638083478, 0.6121535021961798, 0.6006682146305673, 0.594243196346158, 0.5951163769949224, 0.6074764849944059, 0.5877598070150448, 0.5823186646678019], "accuracy": [0.2032756507396698, 0.3899088501930237, 0.48725399374961853, 0.5720512270927429, 0.6145819425582886, 0.6452252268791199, 0.6653017997741699, 0.677189290523529, 0.6988508701324463, 0.7038700580596924, 0.7116629481315613, 0.718399167060852, 0.7172104120254517, 0.7190595865249634, 0.7382115721702576, 0.7305507659912109, 0.7421740889549255, 0.7395324110984802, 0.7411174178123474, 0.7530049085617065, 0.7503632307052612, 0.7541936039924622, 0.7497028112411499, 0.7553823590278625, 0.759080708026886, 0.7584202885627747, 0.7618544697761536, 0.7637035846710205, 0.7672698497772217, 0.769911527633667, 0.7646281719207764, 0.7660810947418213, 0.7666094303131104, 0.7784969210624695, 0.7790252566337585, 0.7819310426712036, 0.7738739848136902, 0.7795535326004028, 0.7874785661697388], "val_loss": [1.8500026294163294, 1.5065812042781286, 1.0464109693254744, 0.8214929274150303, 0.7527055059160505, 0.6719473259789603, 0.6643515484673637, 0.62565359047481, 0.594389830316816, 0.5749209608350482, 0.5759072474070958, 0.5494457823889596, 0.5367950371333531, 0.568400400025504, 0.5245870011193412, 0.5172261851174491, 0.5053853477750506, 0.5077581065041679, 0.49919748306274414, 0.4976670742034912, 0.485355019569397, 0.49207195213862825, 0.48737294333321707, 0.4745956999914987, 0.4720062868935721, 0.47458457946777344, 0.4740661552974156, 0.4668238162994385, 0.4706420046942575, 0.4634239673614502, 0.4657961130142212, 0.464481030191694, 0.45872764928000315, 0.4547888381140573, 0.44998161281858173, 0.4538103938102722, 0.44532082762037006, 0.4465022257396153, 0.4478061965533665], "val_accuracy": [0.46000000834465027, 0.5526666641235352, 0.6733333468437195, 0.699999988079071, 0.6816666722297668, 0.7233333587646484, 0.7056666612625122, 0.7166666388511658, 0.7379999756813049, 0.7540000081062317, 0.734000027179718, 0.7633333206176758, 0.7766666412353516, 0.7369999885559082, 0.7753333449363708, 0.7820000052452087, 0.7833333611488342, 0.7836666703224182, 0.7816666960716248, 0.7713333368301392, 0.7933333516120911, 0.7853333353996277, 0.7896666526794434, 0.7963333129882812, 0.8040000200271606, 0.8083333373069763, 0.7990000247955322, 0.8090000152587891, 0.812666654586792, 0.8066666722297668, 0.7929999828338623, 0.8019999861717224, 0.8069999814033508, 0.8209999799728394, 0.8190000057220459, 0.8016666769981384, 0.8109999895095825, 0.8086666464805603, 0.8103333115577698]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [0, 2, 0, 0, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 2, 2, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7862856984138489, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 8, 6, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2565238164668195, 2.0558640241874855, 1.6273974503949333, 1.2649768278693574, 1.0974585888738788, 1.0005304972965798, 0.9341793130449001, 0.901820211819276, 0.8539017683258934, 0.8213820859756389, 0.7974624547031278, 0.7793587454872801, 0.7702972968067743, 0.7650192314765047, 0.7344260332433539, 0.72943425772921, 0.7117367636935429, 0.7100551948256386, 0.6955190939658259, 0.6785928397886568, 0.6747703394318584, 0.669394713831521, 0.6715252540839299, 0.6659653914634499, 0.6464809230085314, 0.6483293181050802, 0.6405311269515132, 0.6309144735698451, 0.633428573230506, 0.6160543992408846, 0.6217366529887205, 0.6174291638083478, 0.6121535021961798, 0.6006682146305673, 0.594243196346158, 0.5951163769949224, 0.6074764849944059, 0.5877598070150448, 0.5823186646678019], "accuracy": [0.2032756507396698, 0.3899088501930237, 0.48725399374961853, 0.5720512270927429, 0.6145819425582886, 0.6452252268791199, 0.6653017997741699, 0.677189290523529, 0.6988508701324463, 0.7038700580596924, 0.7116629481315613, 0.718399167060852, 0.7172104120254517, 0.7190595865249634, 0.7382115721702576, 0.7305507659912109, 0.7421740889549255, 0.7395324110984802, 0.7411174178123474, 0.7530049085617065, 0.7503632307052612, 0.7541936039924622, 0.7497028112411499, 0.7553823590278625, 0.759080708026886, 0.7584202885627747, 0.7618544697761536, 0.7637035846710205, 0.7672698497772217, 0.769911527633667, 0.7646281719207764, 0.7660810947418213, 0.7666094303131104, 0.7784969210624695, 0.7790252566337585, 0.7819310426712036, 0.7738739848136902, 0.7795535326004028, 0.7874785661697388], "val_loss": [1.8500026294163294, 1.5065812042781286, 1.0464109693254744, 0.8214929274150303, 0.7527055059160505, 0.6719473259789603, 0.6643515484673637, 0.62565359047481, 0.594389830316816, 0.5749209608350482, 0.5759072474070958, 0.5494457823889596, 0.5367950371333531, 0.568400400025504, 0.5245870011193412, 0.5172261851174491, 0.5053853477750506, 0.5077581065041679, 0.49919748306274414, 0.4976670742034912, 0.485355019569397, 0.49207195213862825, 0.48737294333321707, 0.4745956999914987, 0.4720062868935721, 0.47458457946777344, 0.4740661552974156, 0.4668238162994385, 0.4706420046942575, 0.4634239673614502, 0.4657961130142212, 0.464481030191694, 0.45872764928000315, 0.4547888381140573, 0.44998161281858173, 0.4538103938102722, 0.44532082762037006, 0.4465022257396153, 0.4478061965533665], "val_accuracy": [0.46000000834465027, 0.5526666641235352, 0.6733333468437195, 0.699999988079071, 0.6816666722297668, 0.7233333587646484, 0.7056666612625122, 0.7166666388511658, 0.7379999756813049, 0.7540000081062317, 0.734000027179718, 0.7633333206176758, 0.7766666412353516, 0.7369999885559082, 0.7753333449363708, 0.7820000052452087, 0.7833333611488342, 0.7836666703224182, 0.7816666960716248, 0.7713333368301392, 0.7933333516120911, 0.7853333353996277, 0.7896666526794434, 0.7963333129882812, 0.8040000200271606, 0.8083333373069763, 0.7990000247955322, 0.8090000152587891, 0.812666654586792, 0.8066666722297668, 0.7929999828338623, 0.8019999861717224, 0.8069999814033508, 0.8209999799728394, 0.8190000057220459, 0.8016666769981384, 0.8109999895095825, 0.8086666464805603, 0.8103333115577698]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7862856984138489, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 8, 4, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2565238164668195, 2.0558640241874855, 1.6273974503949333, 1.2649768278693574, 1.0974585888738788, 1.0005304972965798, 0.9341793130449001, 0.901820211819276, 0.8539017683258934, 0.8213820859756389, 0.7974624547031278, 0.7793587454872801, 0.7702972968067743, 0.7650192314765047, 0.7344260332433539, 0.72943425772921, 0.7117367636935429, 0.7100551948256386, 0.6955190939658259, 0.6785928397886568, 0.6747703394318584, 0.669394713831521, 0.6715252540839299, 0.6659653914634499, 0.6464809230085314, 0.6483293181050802, 0.6405311269515132, 0.6309144735698451, 0.633428573230506, 0.6160543992408846, 0.6217366529887205, 0.6174291638083478, 0.6121535021961798, 0.6006682146305673, 0.594243196346158, 0.5951163769949224, 0.6074764849944059, 0.5877598070150448, 0.5823186646678019], "accuracy": [0.2032756507396698, 0.3899088501930237, 0.48725399374961853, 0.5720512270927429, 0.6145819425582886, 0.6452252268791199, 0.6653017997741699, 0.677189290523529, 0.6988508701324463, 0.7038700580596924, 0.7116629481315613, 0.718399167060852, 0.7172104120254517, 0.7190595865249634, 0.7382115721702576, 0.7305507659912109, 0.7421740889549255, 0.7395324110984802, 0.7411174178123474, 0.7530049085617065, 0.7503632307052612, 0.7541936039924622, 0.7497028112411499, 0.7553823590278625, 0.759080708026886, 0.7584202885627747, 0.7618544697761536, 0.7637035846710205, 0.7672698497772217, 0.769911527633667, 0.7646281719207764, 0.7660810947418213, 0.7666094303131104, 0.7784969210624695, 0.7790252566337585, 0.7819310426712036, 0.7738739848136902, 0.7795535326004028, 0.7874785661697388], "val_loss": [1.8500026294163294, 1.5065812042781286, 1.0464109693254744, 0.8214929274150303, 0.7527055059160505, 0.6719473259789603, 0.6643515484673637, 0.62565359047481, 0.594389830316816, 0.5749209608350482, 0.5759072474070958, 0.5494457823889596, 0.5367950371333531, 0.568400400025504, 0.5245870011193412, 0.5172261851174491, 0.5053853477750506, 0.5077581065041679, 0.49919748306274414, 0.4976670742034912, 0.485355019569397, 0.49207195213862825, 0.48737294333321707, 0.4745956999914987, 0.4720062868935721, 0.47458457946777344, 0.4740661552974156, 0.4668238162994385, 0.4706420046942575, 0.4634239673614502, 0.4657961130142212, 0.464481030191694, 0.45872764928000315, 0.4547888381140573, 0.44998161281858173, 0.4538103938102722, 0.44532082762037006, 0.4465022257396153, 0.4478061965533665], "val_accuracy": [0.46000000834465027, 0.5526666641235352, 0.6733333468437195, 0.699999988079071, 0.6816666722297668, 0.7233333587646484, 0.7056666612625122, 0.7166666388511658, 0.7379999756813049, 0.7540000081062317, 0.734000027179718, 0.7633333206176758, 0.7766666412353516, 0.7369999885559082, 0.7753333449363708, 0.7820000052452087, 0.7833333611488342, 0.7836666703224182, 0.7816666960716248, 0.7713333368301392, 0.7933333516120911, 0.7853333353996277, 0.7896666526794434, 0.7963333129882812, 0.8040000200271606, 0.8083333373069763, 0.7990000247955322, 0.8090000152587891, 0.812666654586792, 0.8066666722297668, 0.7929999828338623, 0.8019999861717224, 0.8069999814033508, 0.8209999799728394, 0.8190000057220459, 0.8016666769981384, 0.8109999895095825, 0.8086666464805603, 0.8103333115577698]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [5, 6, 2, 4, 4, 8, 2, 8, 0, 8, 2, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 1, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [3, 41, 73, 59, 38, 45, 53, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 9, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7862856984138489, "mapping_values": [1, 20, 20, 13, 7, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(alpha, tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(grad)))))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), alpha)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2565238164668195, 2.0558640241874855, 1.6273974503949333, 1.2649768278693574, 1.0974585888738788, 1.0005304972965798, 0.9341793130449001, 0.901820211819276, 0.8539017683258934, 0.8213820859756389, 0.7974624547031278, 0.7793587454872801, 0.7702972968067743, 0.7650192314765047, 0.7344260332433539, 0.72943425772921, 0.7117367636935429, 0.7100551948256386, 0.6955190939658259, 0.6785928397886568, 0.6747703394318584, 0.669394713831521, 0.6715252540839299, 0.6659653914634499, 0.6464809230085314, 0.6483293181050802, 0.6405311269515132, 0.6309144735698451, 0.633428573230506, 0.6160543992408846, 0.6217366529887205, 0.6174291638083478, 0.6121535021961798, 0.6006682146305673, 0.594243196346158, 0.5951163769949224, 0.6074764849944059, 0.5877598070150448, 0.5823186646678019], "accuracy": [0.2032756507396698, 0.3899088501930237, 0.48725399374961853, 0.5720512270927429, 0.6145819425582886, 0.6452252268791199, 0.6653017997741699, 0.677189290523529, 0.6988508701324463, 0.7038700580596924, 0.7116629481315613, 0.718399167060852, 0.7172104120254517, 0.7190595865249634, 0.7382115721702576, 0.7305507659912109, 0.7421740889549255, 0.7395324110984802, 0.7411174178123474, 0.7530049085617065, 0.7503632307052612, 0.7541936039924622, 0.7497028112411499, 0.7553823590278625, 0.759080708026886, 0.7584202885627747, 0.7618544697761536, 0.7637035846710205, 0.7672698497772217, 0.769911527633667, 0.7646281719207764, 0.7660810947418213, 0.7666094303131104, 0.7784969210624695, 0.7790252566337585, 0.7819310426712036, 0.7738739848136902, 0.7795535326004028, 0.7874785661697388], "val_loss": [1.8500026294163294, 1.5065812042781286, 1.0464109693254744, 0.8214929274150303, 0.7527055059160505, 0.6719473259789603, 0.6643515484673637, 0.62565359047481, 0.594389830316816, 0.5749209608350482, 0.5759072474070958, 0.5494457823889596, 0.5367950371333531, 0.568400400025504, 0.5245870011193412, 0.5172261851174491, 0.5053853477750506, 0.5077581065041679, 0.49919748306274414, 0.4976670742034912, 0.485355019569397, 0.49207195213862825, 0.48737294333321707, 0.4745956999914987, 0.4720062868935721, 0.47458457946777344, 0.4740661552974156, 0.4668238162994385, 0.4706420046942575, 0.4634239673614502, 0.4657961130142212, 0.464481030191694, 0.45872764928000315, 0.4547888381140573, 0.44998161281858173, 0.4538103938102722, 0.44532082762037006, 0.4465022257396153, 0.4478061965533665], "val_accuracy": [0.46000000834465027, 0.5526666641235352, 0.6733333468437195, 0.699999988079071, 0.6816666722297668, 0.7233333587646484, 0.7056666612625122, 0.7166666388511658, 0.7379999756813049, 0.7540000081062317, 0.734000027179718, 0.7633333206176758, 0.7766666412353516, 0.7369999885559082, 0.7753333449363708, 0.7820000052452087, 0.7833333611488342, 0.7836666703224182, 0.7816666960716248, 0.7713333368301392, 0.7933333516120911, 0.7853333353996277, 0.7896666526794434, 0.7963333129882812, 0.8040000200271606, 0.8083333373069763, 0.7990000247955322, 0.8090000152587891, 0.812666654586792, 0.8066666722297668, 0.7929999828338623, 0.8019999861717224, 0.8069999814033508, 0.8209999799728394, 0.8190000057220459, 0.8016666769981384, 0.8109999895095825, 0.8086666464805603, 0.8103333115577698]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7862856984138489, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2565238164668195, 2.0558640241874855, 1.6273974503949333, 1.2649768278693574, 1.0974585888738788, 1.0005304972965798, 0.9341793130449001, 0.901820211819276, 0.8539017683258934, 0.8213820859756389, 0.7974624547031278, 0.7793587454872801, 0.7702972968067743, 0.7650192314765047, 0.7344260332433539, 0.72943425772921, 0.7117367636935429, 0.7100551948256386, 0.6955190939658259, 0.6785928397886568, 0.6747703394318584, 0.669394713831521, 0.6715252540839299, 0.6659653914634499, 0.6464809230085314, 0.6483293181050802, 0.6405311269515132, 0.6309144735698451, 0.633428573230506, 0.6160543992408846, 0.6217366529887205, 0.6174291638083478, 0.6121535021961798, 0.6006682146305673, 0.594243196346158, 0.5951163769949224, 0.6074764849944059, 0.5877598070150448, 0.5823186646678019], "accuracy": [0.2032756507396698, 0.3899088501930237, 0.48725399374961853, 0.5720512270927429, 0.6145819425582886, 0.6452252268791199, 0.6653017997741699, 0.677189290523529, 0.6988508701324463, 0.7038700580596924, 0.7116629481315613, 0.718399167060852, 0.7172104120254517, 0.7190595865249634, 0.7382115721702576, 0.7305507659912109, 0.7421740889549255, 0.7395324110984802, 0.7411174178123474, 0.7530049085617065, 0.7503632307052612, 0.7541936039924622, 0.7497028112411499, 0.7553823590278625, 0.759080708026886, 0.7584202885627747, 0.7618544697761536, 0.7637035846710205, 0.7672698497772217, 0.769911527633667, 0.7646281719207764, 0.7660810947418213, 0.7666094303131104, 0.7784969210624695, 0.7790252566337585, 0.7819310426712036, 0.7738739848136902, 0.7795535326004028, 0.7874785661697388], "val_loss": [1.8500026294163294, 1.5065812042781286, 1.0464109693254744, 0.8214929274150303, 0.7527055059160505, 0.6719473259789603, 0.6643515484673637, 0.62565359047481, 0.594389830316816, 0.5749209608350482, 0.5759072474070958, 0.5494457823889596, 0.5367950371333531, 0.568400400025504, 0.5245870011193412, 0.5172261851174491, 0.5053853477750506, 0.5077581065041679, 0.49919748306274414, 0.4976670742034912, 0.485355019569397, 0.49207195213862825, 0.48737294333321707, 0.4745956999914987, 0.4720062868935721, 0.47458457946777344, 0.4740661552974156, 0.4668238162994385, 0.4706420046942575, 0.4634239673614502, 0.4657961130142212, 0.464481030191694, 0.45872764928000315, 0.4547888381140573, 0.44998161281858173, 0.4538103938102722, 0.44532082762037006, 0.4465022257396153, 0.4478061965533665], "val_accuracy": [0.46000000834465027, 0.5526666641235352, 0.6733333468437195, 0.699999988079071, 0.6816666722297668, 0.7233333587646484, 0.7056666612625122, 0.7166666388511658, 0.7379999756813049, 0.7540000081062317, 0.734000027179718, 0.7633333206176758, 0.7766666412353516, 0.7369999885559082, 0.7753333449363708, 0.7820000052452087, 0.7833333611488342, 0.7836666703224182, 0.7816666960716248, 0.7713333368301392, 0.7933333516120911, 0.7853333353996277, 0.7896666526794434, 0.7963333129882812, 0.8040000200271606, 0.8083333373069763, 0.7990000247955322, 0.8090000152587891, 0.812666654586792, 0.8066666722297668, 0.7929999828338623, 0.8019999861717224, 0.8069999814033508, 0.8209999799728394, 0.8190000057220459, 0.8016666769981384, 0.8109999895095825, 0.8086666464805603, 0.8103333115577698]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 8, 1, 8, 4, 1, 1, 8, 0, 5, 9, 2, 2, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [23], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301654043324856, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 3, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [0, 2, 0, 0, 2, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [3, 41, 73, 59, 38, 20, 53, 52, 44], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 1, 3, 1, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [66], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))), tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.negative(grad)))))), tf.math.pow(alpha, tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302118913892112, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 8, 1, 4, 4, 8, 5, 3, 0, 2, 9, 2, 5, 3, 0, 6, 4, 5, 8, 8, 8, 2, 9, 2, 8, 8], [0, 1, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 1, 3, 1, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [8], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 22, 11, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 4, 2, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.pow(tf.math.sqrt(tf.math.square(alpha)), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)))))))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [46], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 1, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 5, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 4, 73, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 23, 7, 4, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), grad))))))), tf.math.add(alpha, grad)), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(grad))))))), grad)))), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 1, 2, 1, 1, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [20, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 11, 6, 2, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 2, 2, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), alpha)), tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), alpha)))))), alpha), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [0, 2, 0, 0, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 8, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [54, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 3, 1, 0, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [218.60395810317843, 3275.1956834673424, 14863.23057864714, 39921.30954309619, 85237.8318511838, 155711.70756216155], "accuracy": [0.10157178342342377, 0.10170386731624603, 0.09813763201236725, 0.10527011007070541, 0.10460969805717468, 0.10381719470024109], "val_loss": [717.4320591517857, 5141.124581473215, 16865.530133928572, 39467.169642857145, 76524.83482142857, 131615.91964285713], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 9, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 72, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 14, 5, 3, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, grad)), tf.math.negative(tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), grad))), grad)))), tf.math.add(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.301712471842687, 2.302340587116645, 2.302486095603557, 2.3040791856236447, 2.3104399704835545, 2.334715992373687], "accuracy": [0.10685510188341141, 0.10619468986988068, 0.10077928751707077, 0.10276053100824356, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9738026346479143, 1.9740001814705985, 1.9750112806047713, 1.978381906236921, 1.9910477910723006, 2.0357018879481723], "val_accuracy": [0.10000000149011612, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [2, 1, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [99, 72, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 8, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [69, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [56], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 8, 3, 2, 1, 1, 0, 1, 1, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), grad))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302118913892112, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 1, 8, 4, 1, 0, 1, 0, 4, 6, 2, 9, 3, 9, 2, 9, 8, 0, 1, 8, 2, 0, 2, 8, 8], [1, 2, 0, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [18, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 21, 10, 6, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, grad)), tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.sqrt(tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.subtract(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.7776781635639645, 7.726356542247429, 19.736206455253388, 38.731580285568754, 66.67658234549519, 105.05728946313441], "accuracy": [0.09853387624025345, 0.10091137140989304, 0.09840179979801178, 0.10553427785634995, 0.10527011007070541, 0.10460969805717468], "val_loss": [3.215962682451521, 8.67691775730678, 18.570594787597656, 33.63251059395926, 54.746892656598774, 82.93691580636161], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 8, 1, 8, 4, 8, 5, 3, 0, 2, 9, 2, 5, 3, 0, 6, 4, 5, 8, 8, 8, 2, 9, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [27, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 23, 8, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)))))))), tf.math.square(tf.math.multiply(tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.sqrt(grad))), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(sigma, tf.math.divide_no_nan(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [3, 41, 73, 59, 38, 45, 53, 52, 44], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 7, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 8, 4, 2, 3, 1, 1, 0, 0, 6, 4, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09311848133802414, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 6, 8, 4, 1, 2, 8, 0, 4, 9, 2, 8, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 1, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [3, 41, 73, 59, 38, 45, 53, 52, 44], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 5, 8, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.0560000017285347, "mapping_values": [1, 20, 20, 13, 7, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.pow(tf.math.subtract(alpha, tf.math.add(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.negative(tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(sigma))", "other_info": {"loss": [2.3021739155876797, 2.3028641198336754, 2.3065306494784252, 2.308508083663203, 2.308913729241527, 2.313671377876321, 2.316091764148011, 2.3202251709368817, 2.3307686170739994, 2.3392157284433437, 2.3619686500066623, 354515660618749.3, NaN, NaN, NaN, NaN], "accuracy": [0.09206181764602661, 0.08942015469074249, 0.08360850811004639, 0.08255184441804886, 0.08440100401639938, 0.08083476126194, 0.08070268481969833, 0.07819310575723648, 0.07409853488206863, 0.07766477018594742, 0.07436270266771317, 0.08915598690509796, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.971508502960205, 1.9728482110159737, 1.9747225216456823, 1.9766590254647392, 1.978719847542899, 1.9811732428414481, 1.9837025914873396, 1.9872123854500907, 1.9931984628949846, 2.004196439470564, 2.0349877221243724, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03333333507180214, 0.03400000184774399, 0.03133333474397659, 0.02800000086426735, 0.03033333271741867, 0.03633333370089531, 0.04100000113248825, 0.052000001072883606, 0.07466666400432587, 0.09233333170413971, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301708927716341, 2.3010332881971327, 2.3024629433676864, 2.3025028380924417, 2.300924777984619, 2.3021057265514333], "accuracy": [0.09245806187391281, 0.0936468094587326, 0.08770307898521423, 0.0866464152932167, 0.09192973375320435, 0.09166556596755981], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [0, 2, 0, 0, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301708927716341, 2.3010332881971327, 2.3024629433676864, 2.3025028380924417, 2.300924777984619, 2.3021057265514333], "accuracy": [0.09245806187391281, 0.0936468094587326, 0.08770307898521423, 0.0866464152932167, 0.09192973375320435, 0.09166556596755981], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]