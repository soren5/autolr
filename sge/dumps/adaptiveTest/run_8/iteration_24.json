[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.8122857213020325, "mapping_values": [1, 3, 3, 1, 2, 0, 18, 18, 9, 9, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)), sigma))", "other_info": {"loss": [2.096215187519171, 1.6629107817525264, 1.211568034084135, 0.9383900783884211, 0.8530214318289434, 0.7592532458542801, 0.7549265878721078, 0.7023933441285303, 0.6950850701602915, 0.652828700215573, 0.6379344958702272, 0.6095705790652607, 0.5933661593138786, 0.5854715882842221, 0.5774747313462417, 0.5867096402342482, 0.5368219059786824, 0.5190518819786665, 0.5302849850004627, 0.5191830231678595, 0.49851162415359473, 0.4956168824765724, 0.4835560093419175], "accuracy": [0.2965262234210968, 0.4422137141227722, 0.5569937825202942, 0.6503764390945435, 0.6778497099876404, 0.7135120630264282, 0.7161537408828735, 0.7367587089538574, 0.7360982894897461, 0.7556465268135071, 0.7561748623847961, 0.7680623531341553, 0.7807422876358032, 0.7693831920623779, 0.7839123010635376, 0.7786290049552917, 0.7969884872436523, 0.8068947196006775, 0.8035926818847656, 0.8037247657775879, 0.8115176558494568, 0.81548011302948, 0.8231409192085266], "val_loss": [1.4806252888270788, 1.0382880142756872, 0.7254148040499006, 0.7677506378718785, 0.6253777742385864, 0.573439189365932, 0.5935815743037632, 0.5811060496738979, 0.5202963011605399, 0.5183783429009574, 0.47936717101505827, 0.539031982421875, 0.47109287125723703, 0.4496546302522932, 0.5015320437295097, 0.4551611372402736, 0.4281867061342512, 0.41876078503472464, 0.4325506602014814, 0.4145029102052961, 0.4190014600753784, 0.42319016797201975, 0.42264725480760845], "val_accuracy": [0.43666666746139526, 0.6266666650772095, 0.6903333067893982, 0.6263333559036255, 0.7116666436195374, 0.7516666650772095, 0.7293333411216736, 0.7223333120346069, 0.7730000019073486, 0.7633333206176758, 0.7953333258628845, 0.7576666474342346, 0.7820000052452087, 0.8026666641235352, 0.7666666507720947, 0.778333306312561, 0.8173333406448364, 0.8263333439826965, 0.8153333067893982, 0.8196666836738586, 0.8080000281333923, 0.8190000057220459, 0.8063333630561829]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 2, 4, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 3, 3, 2, 9], [3, 1, 0, 1], [45, 38]], "fitness": -0.7702857255935669, "mapping_values": [1, 3, 3, 1, 2, 1, 19, 19, 9, 10, 3, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.291544370427029, 2.2592186570372235, 2.224072530237817, 2.1735777670382004, 2.099903552476457, 1.9940216316916703, 1.8633241209418876, 1.709438224604668, 1.555656116368701, 1.442739553266371, 1.3293409197951793, 1.2633980034270291, 1.1919108081912604, 1.1424633125508734, 1.1024420490007927, 1.0606188465496804, 1.0352006421632707, 1.0092788273081126, 0.9809526889914015, 0.9623147566257735, 0.9487437237255357, 0.9126855360990849, 0.9163650367411451, 0.8875523583685261, 0.8860984743546816, 0.8619620313088278, 0.8721681988596711, 0.8445066671959712, 0.839967165144758, 0.8395921850972848, 0.829224104760676, 0.8120086463828837, 0.810382100356773, 0.810521448749703, 0.7936838538560728, 0.7869830376924604, 0.7842919367447095, 0.7767985957945185, 0.7618222724744247, 0.7555520417919847, 0.7530712094667203, 0.7486870913788344, 0.753553839061144, 0.7508553895322386, 0.755299596825233, 0.7416484500627791, 0.731051977371039, 0.7262168455873388, 0.7230223744080256, 0.7246222509180219, 0.7213099852308636, 0.7147847295689183, 0.7128159847667015, 0.715868776602878, 0.7132152327535773, 0.7014447603762944, 0.6943495263198048, 0.7041696016940584, 0.6940821686346518, 0.6996168809056109, 0.6949033760485979, 0.6928707783752193, 0.6849514573336183, 0.6929977122645541, 0.6829965780313855, 0.6774569575056943, 0.6808689434089681, 0.675323204585763, 0.6668066941058993, 0.6592634563133654, 0.6640147899812979, 0.6669631306017552, 0.66981127374381], "accuracy": [0.12178047746419907, 0.20578522980213165, 0.275260865688324, 0.32664114236831665, 0.3797384798526764, 0.416589617729187, 0.4427420496940613, 0.4695548713207245, 0.5087835192680359, 0.5260863900184631, 0.5492008924484253, 0.5698058605194092, 0.5857878923416138, 0.6037511825561523, 0.6168273687362671, 0.6305639743804932, 0.6375643610954285, 0.637432336807251, 0.6520935297012329, 0.652621865272522, 0.6626601219177246, 0.6740192770957947, 0.6715096831321716, 0.6845859289169312, 0.6763967871665955, 0.6866992712020874, 0.6905296444892883, 0.6950204968452454, 0.6972658634185791, 0.7029454708099365, 0.7013604640960693, 0.707568347454071, 0.7053229212760925, 0.7135120630264282, 0.71100252866745, 0.713908314704895, 0.715889573097229, 0.7169462442398071, 0.7201162576675415, 0.7239466309547424, 0.7279091477394104, 0.7325320243835449, 0.7283053994178772, 0.7218332886695862, 0.7305507659912109, 0.72672039270401, 0.7380794882774353, 0.7375511527061462, 0.7372870445251465, 0.7306828498840332, 0.7384757399559021, 0.7391361594200134, 0.737022876739502, 0.7388719916343689, 0.7427024245262146, 0.7411174178123474, 0.748249888420105, 0.7420420050621033, 0.7430986762046814, 0.7407211661338806, 0.7499669790267944, 0.7449478507041931, 0.7535332441329956, 0.7464007139205933, 0.7466648817062378, 0.7457403540611267, 0.7452120184898376, 0.7456082701683044, 0.7493065595626831, 0.7567031979560852, 0.7534011602401733, 0.7544577717781067, 0.7523444890975952], "val_loss": [1.941856792994908, 1.9103539330618722, 1.869140352521624, 1.8102633612496513, 1.7226258686610632, 1.6001238141741072, 1.4480387142726354, 1.2906653881072998, 1.1493191037859236, 1.0348610537392753, 0.9448130811963763, 0.884620121547154, 0.837574805532183, 0.7923539536339896, 0.7609011275427682, 0.7313388586044312, 0.7233699900763375, 0.701972348349435, 0.6742816652570452, 0.6628421034131732, 0.651497653552464, 0.6419017655508858, 0.6286742176328387, 0.6321747813905988, 0.6133803810392108, 0.6027550527027675, 0.5986405100141253, 0.5922808306557792, 0.5868665320532662, 0.5804535491125924, 0.5786263431821551, 0.5683649778366089, 0.572219797543117, 0.5642822980880737, 0.5623399019241333, 0.5559335606438773, 0.5501982654844012, 0.5476242644446236, 0.5467373643602643, 0.5504003082002912, 0.5369716882705688, 0.5339441980634417, 0.53010436466762, 0.5312496764319283, 0.526996271950858, 0.5251251118523734, 0.522161637033735, 0.5208768844604492, 0.5181714126041957, 0.5141042130334037, 0.5089776856558663, 0.5121804305485317, 0.5074074779238019, 0.5114299399512154, 0.5053454807826451, 0.5036626373018537, 0.5036746774400983, 0.5020860433578491, 0.49785198484148296, 0.5010638747896466, 0.4951711211885725, 0.49865775448935373, 0.49585732391902376, 0.49082216194697786, 0.4893191541944231, 0.4909125396183559, 0.4887470858437674, 0.4860998903002058, 0.48786256994519916, 0.4833842005048479, 0.4830754484449114, 0.4798863445009504, 0.4781975405556815], "val_accuracy": [0.30399999022483826, 0.39266666769981384, 0.42266666889190674, 0.4586666524410248, 0.5263333320617676, 0.5559999942779541, 0.5753333568572998, 0.5889999866485596, 0.6163333058357239, 0.6583333611488342, 0.6746666431427002, 0.6736666560173035, 0.6783333420753479, 0.6996666789054871, 0.7020000219345093, 0.7123333215713501, 0.7009999752044678, 0.7039999961853027, 0.7223333120346069, 0.734666645526886, 0.7193333506584167, 0.7329999804496765, 0.7393333315849304, 0.7210000157356262, 0.7476666569709778, 0.7536666393280029, 0.753333330154419, 0.7536666393280029, 0.7583333253860474, 0.7596666812896729, 0.7486666440963745, 0.7613333463668823, 0.7576666474342346, 0.7676666378974915, 0.7596666812896729, 0.7620000243186951, 0.7676666378974915, 0.7666666507720947, 0.7726666927337646, 0.762666642665863, 0.7723333239555359, 0.7766666412353516, 0.7753333449363708, 0.7793333530426025, 0.778333306312561, 0.7776666879653931, 0.7833333611488342, 0.7839999794960022, 0.7746666669845581, 0.7776666879653931, 0.7860000133514404, 0.7839999794960022, 0.7833333611488342, 0.7896666526794434, 0.7799999713897705, 0.7889999747276306, 0.7836666703224182, 0.7929999828338623, 0.7923333048820496, 0.7933333516120911, 0.7870000004768372, 0.7823333144187927, 0.784333348274231, 0.7953333258628845, 0.7963333129882812, 0.7960000038146973, 0.7883333563804626, 0.8026666641235352, 0.7879999876022339, 0.7986666560173035, 0.800000011920929, 0.7996666431427002, 0.7919999957084656]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 6, 8, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 0, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 3, 3, 6, 9, 4, 4, 0], [1, 3, 2, 1, 2], [45, 38]], "fitness": -0.7174285650253296, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 1, 1, 0, 0, 0, 0, 13, 8, 5, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, beta))), tf.math.pow(tf.math.negative(alpha), beta)))", "other_info": {"loss": [2.0196324851707836, 1.6049638597830773, 1.125637284737253, 1.4023020437695584, 1.4870680030846184, 1.3581435783837434, 1.7030387188008653, 1.953489031191468], "accuracy": [0.3593977093696594, 0.5110289454460144, 0.6038832664489746, 0.5580504536628723, 0.533879280090332, 0.5536917448043823, 0.445779949426651, 0.3357548415660858], "val_loss": [1.5810131345476424, 0.8023766108921596, 0.6293765647070748, 0.9459524154663086, 0.8843087809426444, 0.7290713957377842, 1.3024167333330428, 1.144012451171875], "val_accuracy": [0.5540000200271606, 0.6736666560173035, 0.7266666889190674, 0.6046666502952576, 0.6546666622161865, 0.7166666388511658, 0.43700000643730164, 0.4893333315849304]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [24, 57], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 6, 8, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 0, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.5408571362495422, "mapping_values": [1, 7, 7, 4, 3, 2, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.395420805117741, 2.2793851190034693, 2.344467060834567, 2.2927248362048807, 2.3409456240896223, 2.202663403287335, 2.3588333878424566, 2.302205801230569, 2.250046146229321, 2.083589515854827, 2.4426689690224737, 2.217576610917633, 2.307625388173285, 2.3012006905069127, 2.010339995164913, 1.9212412141364847], "accuracy": [0.19865275919437408, 0.19178444147109985, 0.18201030790805817, 0.11900673806667328, 0.1740853190422058, 0.2281072586774826, 0.15797120332717896, 0.10711926966905594, 0.1912561058998108, 0.35068023204803467, 0.2786950170993805, 0.22137102484703064, 0.09536388516426086, 0.10738343745470047, 0.3195086419582367, 0.32624489068984985], "val_loss": [1.8427111761910575, 1.939007009778704, 1.9752655710492815, 1.8523874282836914, 1.9565493719918388, 1.6130716460091727, 1.9736765452793665, 1.9652136393955775, 1.5927050794873918, 4.166164398193359, 1.2887375014168876, 1.97642149244036, 1.9739898954119002, 1.8951308386666434, 1.9670302527291434, 1.2091588292803084], "val_accuracy": [0.3296666741371155, 0.2529999911785126, 0.0963333323597908, 0.17933332920074463, 0.05166666582226753, 0.46166667342185974, 0.10366666316986084, 0.156333327293396, 0.42933332920074463, 0.09700000286102295, 0.5743333101272583, 0.09733333438634872, 0.0976666659116745, 0.19433332979679108, 0.11433333158493042, 0.503333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1], [7, 6, 8, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [7, 6, 5, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1, 1], [3, 3], [4, 0], [32], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 8, 3, 6, 9], [3, 3, 1, 1], [40, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 6, 8, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 1, 1, 3, 3, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [9, 3, 3, 6, 9], [3, 3, 0, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303234452096589, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [1, 2, 2, 3], [44, 57], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [3, 5, 0, 6, 2, 4, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 3, 0, 6, 6], [3, 2, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.square(tf.math.add(beta, grad)), tf.math.subtract(alpha, tf.math.pow(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07819310575723648, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0], [7, 3, 4, 9], [3, 2, 2, 3], [44, 57], [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [82], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 3, 4, 6, 9, 5], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 9, 6, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, grad)), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.pow(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma)), sigma)))", "other_info": {"loss": [2.303234452096589, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [7, 2, 4, 0, 7, 2, 6, 7, 0, 4, 1, 0, 3, 3, 7, 7, 7, 6, 3, 2, 8, 1, 9, 9], [3, 2, 2, 3, 0, 3, 0, 1, 1, 1, 0, 1, 0, 1, 2, 1, 0], [44, 57, 78, 9, 39, 12, 32], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [9, 6, 5, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 0, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 1, 1, 0], [0, 0, 1, 1], [3, 3], [4, 1], [], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0], [4, 3, 3, 2, 9], [1, 0, 2, 2], [45, 98]], "fitness": -0.10000000149011612, "mapping_values": [1, 41, 41, 24, 17, 7, 1, 1, 1, 0, 1, 5, 3, 2, 1, 0, 9, 5, 4, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, grad), grad))))), tf.math.add(alpha, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.negative(tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), alpha)))))), tf.math.multiply(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), beta), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [1, 6, 6, 9, 5, 0], [3, 2, 2, 3], [44, 57], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [6, 1, 6, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 1, 1, 3, 3, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 3, 4, 6, 8, 4, 2, 8, 7, 5, 2, 5, 4, 8, 3, 0, 7, 4, 8, 3, 0, 1, 0, 7, 1, 6, 5], [1, 0, 0, 1, 2, 1, 1, 1, 3, 1, 1, 3, 3, 0, 1], [45, 38, 76, 29]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 11, 6, 5, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), alpha)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1], [1, 9, 4, 9], [1, 2, 0, 1], [44, 57], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 1, 3, 1, 3, 1, 2, 3, 2, 0, 1], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [87], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0], [4, 2, 3, 6, 9, 9], [3, 0, 0, 1], [45, 38, 30, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 13, 10, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, beta)))), tf.math.add(beta, grad))))))))), tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07819310575723648, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [2, 6, 6, 6, 5, 2, 2, 4, 8, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 1, 1, 3, 3, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [4, 8, 3, 2, 9, 7, 0], [3, 3, 0, 1], [55, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07819310575723648, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 8, 4, 9], [1, 2, 2, 3], [44, 57], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [6, 6, 6, 8, 1, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 1, 1, 3, 3, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 8, 3, 7, 9, 7, 0], [2, 3, 1, 1], [45, 25]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [7594038.0706995865, 139138161.7096817, 660303411.4130234, 1792290844.6059966, 3843391059.1805573, 7059285895.557258], "accuracy": [0.09760929644107819, 0.1014397069811821, 0.10038304328918457, 0.10117553919553757, 0.09826971590518951, 0.1018359512090683], "val_loss": [28947477.714285713, 226496685.7142857, 758293668.5714285, 1790334537.142857, 3488636635.428571, 6018887094.857142], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 8, 6, 8, 5, 2, 2, 4, 5, 2, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [9, 1, 3, 6, 9], [3, 0, 0, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 7, 7, 5, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.square(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303234452096589, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0], [3, 0, 4, 9], [2, 2, 2, 3], [24, 57], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 6, 8, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0], [4, 1, 3, 6, 9, 8, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 10, 7, 3, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.subtract(sigma, tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma), sigma)), tf.math.sqrt(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 6, 8, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 0, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [4, 1], [], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [4, 1, 3, 6, 9, 6], [3, 2, 3, 1, 2], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 2, 3, 1, 5, 4, 2, 2, 0, 11, 6, 5, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.subtract(sigma, beta), tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, alpha)), beta))", "other_info": {"loss": [2.303234452096589, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 8, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [4, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 1, 1, 3, 3, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0], [3, 3, 3, 4, 9], [0], [45, 39], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 8, 3, 6, 9, 7, 0], [3, 3, 0, 1], [99, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 0, 12, 12, 6, 6, 2, 9, 6, 5, 1, 2, 9, 6, 3, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(grad))), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(sigma, sigma)), tf.math.add(sigma, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.302721929430505, 2.3016991868798193, 2.3029870923326596, 2.3020997208343474, 2.3011239524751117, 2.300389847058221], "accuracy": [0.09245806187391281, 0.09126931428909302, 0.09126931428909302, 0.09377889335155487, 0.09642054885625839, 0.09377889335155487], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [2, 6, 6, 1, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 2, 0, 1, 3, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 2, 9], [3, 3, 3, 1], [40, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 22, 22, 12, 10, 4, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.add(beta, grad), tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), sigma)), sigma))", "other_info": {"loss": [2.3027428123913483, 2.3017669528655844, 2.3031915251636517, 2.302355599047533, 2.301413781733293, 2.3006851472528367, 2.3040469964702193], "accuracy": [0.09245806187391281, 0.09100515395402908, 0.09113723784685135, 0.09325055778026581, 0.0952318087220192, 0.09285431355237961, 0.08677849918603897], "val_loss": [1.9706294195992606, 1.970682007925851, 1.970768928527832, 1.9708194732666016, 1.9708589826311385, 1.9708995137895857, 1.9709840502057756], "val_accuracy": [0.03866666555404663, 0.039000000804662704, 0.03866666555404663, 0.03866666555404663, 0.038333334028720856, 0.03766666725277901, 0.036666665226221085]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [8, 6, 4, 9], [3, 2, 0, 3], [24, 57], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0, 4, 9, 3, 1, 2, 7, 2, 8, 9, 8], [3, 4, 0, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [4, 7], [], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0], [0, 3, 1, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 0, 7, 7, 3, 4, 1, 5, 4, 2, 2, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.302721929430505, 2.3016991868798193, 2.3029870923326596, 2.3020997208343474, 2.3011239524751117, 2.300389847058221], "accuracy": [0.09245806187391281, 0.09126931428909302, 0.09126931428909302, 0.09377889335155487, 0.09642054885625839, 0.09377889335155487], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0], [7, 4, 4, 9], [3, 2, 2, 3], [44, 57], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 1, 6, 6, 5, 2, 2, 4, 5, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 4, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [4, 2], [], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 1, 5, 4, 2, 2, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.302721929430505, 2.3016991868798193, 2.3029870923326596, 2.3020997208343474, 2.3011239524751117, 2.300389847058221], "accuracy": [0.09245806187391281, 0.09126931428909302, 0.09126931428909302, 0.09377889335155487, 0.09642054885625839, 0.09377889335155487], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]