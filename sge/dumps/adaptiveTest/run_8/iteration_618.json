[{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8057143092155457, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0526721425390893, 1.6194332347585698, 1.171304306003317, 0.9141166806063553, 0.8082028410264986, 0.750684378295448, 0.735046785190483, 0.6987684516780144, 0.6790281800923961, 0.6406626898882458, 0.6799765617666998, 0.6003168608927849, 0.5805402974080353, 0.586629651178852, 0.5449912299049875, 0.5388912810680653, 0.5217865895932109, 0.523041561554924, 0.5033386895811207, 0.48568547360098135, 0.48849496975976087, 0.46169796439997035, 0.47961788004840666, 0.4520021853170154, 0.46585926955181767, 0.4374043518179648, 0.46007886639581047, 0.43275229466542464, 0.41960941592637085, 0.41078119065547114, 0.4062283123725158, 0.38668389240307594, 0.44592623595847525, 0.3974079414798662, 0.4135808742096742, 0.3919185381980541, 0.3869513898847787, 0.3736117642632156, 0.36548894125756143, 0.3669641066213184, 0.3550201449506334], "accuracy": [0.31739532947540283, 0.44089287519454956, 0.5798441171646118, 0.665830135345459, 0.702681303024292, 0.7209087014198303, 0.7199841737747192, 0.7331924438476562, 0.739928662776947, 0.754589855670929, 0.7434949278831482, 0.7647602558135986, 0.7783648371696472, 0.7794214487075806, 0.7951393723487854, 0.7979130744934082, 0.8084797263145447, 0.8034605979919434, 0.8057059645652771, 0.8208954930305481, 0.8146876096725464, 0.8309338092803955, 0.8284242749214172, 0.8314621448516846, 0.8189142942428589, 0.8345000743865967, 0.83119797706604, 0.8387266993522644, 0.845859169960022, 0.8449346423149109, 0.8502179384231567, 0.8578787446022034, 0.8290846943855286, 0.8475762605667114, 0.8474441766738892, 0.8498216867446899, 0.8540483713150024, 0.859199583530426, 0.8640866279602051, 0.8623695969581604, 0.8664641380310059], "val_loss": [1.468850816999163, 0.9261789662497384, 0.6568513257162911, 0.6315560851778302, 0.6229289429528373, 0.5739304678780692, 0.5341360228402274, 0.5617889847074237, 0.5293591873986381, 0.4831381355013166, 0.5052222183772496, 0.4559711643627712, 0.45922101395470755, 0.43395492008754183, 0.4374722157205854, 0.43678194284439087, 0.4322699989591326, 0.44137821027210783, 0.4081057139805385, 0.4149160896028791, 0.4011580688612802, 0.42326721974781584, 0.3889222230230059, 0.3944514053208487, 0.4092884915215628, 0.4268752336502075, 0.38794556685856413, 0.41828528472355436, 0.3764997976166861, 0.3597637244633266, 0.35773755822862896, 0.35310895102364676, 0.38476576123918804, 0.36579422439847675, 0.35566569226128714, 0.34735984461648123, 0.33484935760498047, 0.3632587364741734, 0.34168076515197754, 0.3394050598144531, 0.33993303775787354], "val_accuracy": [0.4233333468437195, 0.624666690826416, 0.7116666436195374, 0.7263333201408386, 0.7043333053588867, 0.7456666827201843, 0.7509999871253967, 0.7450000047683716, 0.7803333401679993, 0.777999997138977, 0.7576666474342346, 0.8050000071525574, 0.796999990940094, 0.8159999847412109, 0.8040000200271606, 0.8053333163261414, 0.8050000071525574, 0.8009999990463257, 0.8253333568572998, 0.8180000185966492, 0.8203333616256714, 0.8136666417121887, 0.8276666402816772, 0.8243333101272583, 0.8226666450500488, 0.8019999861717224, 0.8343333601951599, 0.8236666917800903, 0.8366666436195374, 0.8519999980926514, 0.8460000157356262, 0.8523333072662354, 0.8416666388511658, 0.8483333587646484, 0.8536666631698608, 0.8640000224113464, 0.8610000014305115, 0.8399999737739563, 0.8560000061988831, 0.8619999885559082, 0.8556666374206543]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 50, 27, 57, 91, 53, 52, 57, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 0, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 3, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8057143092155457, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0526721425390893, 1.6194332347585698, 1.171304306003317, 0.9141166806063553, 0.8082028410264986, 0.750684378295448, 0.735046785190483, 0.6987684516780144, 0.6790281800923961, 0.6406626898882458, 0.6799765617666998, 0.6003168608927849, 0.5805402974080353, 0.586629651178852, 0.5449912299049875, 0.5388912810680653, 0.5217865895932109, 0.523041561554924, 0.5033386895811207, 0.48568547360098135, 0.48849496975976087, 0.46169796439997035, 0.47961788004840666, 0.4520021853170154, 0.46585926955181767, 0.4374043518179648, 0.46007886639581047, 0.43275229466542464, 0.41960941592637085, 0.41078119065547114, 0.4062283123725158, 0.38668389240307594, 0.44592623595847525, 0.3974079414798662, 0.4135808742096742, 0.3919185381980541, 0.3869513898847787, 0.3736117642632156, 0.36548894125756143, 0.3669641066213184, 0.3550201449506334], "accuracy": [0.31739532947540283, 0.44089287519454956, 0.5798441171646118, 0.665830135345459, 0.702681303024292, 0.7209087014198303, 0.7199841737747192, 0.7331924438476562, 0.739928662776947, 0.754589855670929, 0.7434949278831482, 0.7647602558135986, 0.7783648371696472, 0.7794214487075806, 0.7951393723487854, 0.7979130744934082, 0.8084797263145447, 0.8034605979919434, 0.8057059645652771, 0.8208954930305481, 0.8146876096725464, 0.8309338092803955, 0.8284242749214172, 0.8314621448516846, 0.8189142942428589, 0.8345000743865967, 0.83119797706604, 0.8387266993522644, 0.845859169960022, 0.8449346423149109, 0.8502179384231567, 0.8578787446022034, 0.8290846943855286, 0.8475762605667114, 0.8474441766738892, 0.8498216867446899, 0.8540483713150024, 0.859199583530426, 0.8640866279602051, 0.8623695969581604, 0.8664641380310059], "val_loss": [1.468850816999163, 0.9261789662497384, 0.6568513257162911, 0.6315560851778302, 0.6229289429528373, 0.5739304678780692, 0.5341360228402274, 0.5617889847074237, 0.5293591873986381, 0.4831381355013166, 0.5052222183772496, 0.4559711643627712, 0.45922101395470755, 0.43395492008754183, 0.4374722157205854, 0.43678194284439087, 0.4322699989591326, 0.44137821027210783, 0.4081057139805385, 0.4149160896028791, 0.4011580688612802, 0.42326721974781584, 0.3889222230230059, 0.3944514053208487, 0.4092884915215628, 0.4268752336502075, 0.38794556685856413, 0.41828528472355436, 0.3764997976166861, 0.3597637244633266, 0.35773755822862896, 0.35310895102364676, 0.38476576123918804, 0.36579422439847675, 0.35566569226128714, 0.34735984461648123, 0.33484935760498047, 0.3632587364741734, 0.34168076515197754, 0.3394050598144531, 0.33993303775787354], "val_accuracy": [0.4233333468437195, 0.624666690826416, 0.7116666436195374, 0.7263333201408386, 0.7043333053588867, 0.7456666827201843, 0.7509999871253967, 0.7450000047683716, 0.7803333401679993, 0.777999997138977, 0.7576666474342346, 0.8050000071525574, 0.796999990940094, 0.8159999847412109, 0.8040000200271606, 0.8053333163261414, 0.8050000071525574, 0.8009999990463257, 0.8253333568572998, 0.8180000185966492, 0.8203333616256714, 0.8136666417121887, 0.8276666402816772, 0.8243333101272583, 0.8226666450500488, 0.8019999861717224, 0.8343333601951599, 0.8236666917800903, 0.8366666436195374, 0.8519999980926514, 0.8460000157356262, 0.8523333072662354, 0.8416666388511658, 0.8483333587646484, 0.8536666631698608, 0.8640000224113464, 0.8610000014305115, 0.8399999737739563, 0.8560000061988831, 0.8619999885559082, 0.8556666374206543]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 5, 2, 3, 4, 6, 4, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 67, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8057143092155457, "mapping_values": [1, 22, 22, 12, 10, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(grad, tf.math.add(alpha, grad)))), tf.math.multiply(grad, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad), grad))))))), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0526721425390893, 1.6194332347585698, 1.171304306003317, 0.9141166806063553, 0.8082028410264986, 0.750684378295448, 0.735046785190483, 0.6987684516780144, 0.6790281800923961, 0.6406626898882458, 0.6799765617666998, 0.6003168608927849, 0.5805402974080353, 0.586629651178852, 0.5449912299049875, 0.5388912810680653, 0.5217865895932109, 0.523041561554924, 0.5033386895811207, 0.48568547360098135, 0.48849496975976087, 0.46169796439997035, 0.47961788004840666, 0.4520021853170154, 0.46585926955181767, 0.4374043518179648, 0.46007886639581047, 0.43275229466542464, 0.41960941592637085, 0.41078119065547114, 0.4062283123725158, 0.38668389240307594, 0.44592623595847525, 0.3974079414798662, 0.4135808742096742, 0.3919185381980541, 0.3869513898847787, 0.3736117642632156, 0.36548894125756143, 0.3669641066213184, 0.3550201449506334], "accuracy": [0.31739532947540283, 0.44089287519454956, 0.5798441171646118, 0.665830135345459, 0.702681303024292, 0.7209087014198303, 0.7199841737747192, 0.7331924438476562, 0.739928662776947, 0.754589855670929, 0.7434949278831482, 0.7647602558135986, 0.7783648371696472, 0.7794214487075806, 0.7951393723487854, 0.7979130744934082, 0.8084797263145447, 0.8034605979919434, 0.8057059645652771, 0.8208954930305481, 0.8146876096725464, 0.8309338092803955, 0.8284242749214172, 0.8314621448516846, 0.8189142942428589, 0.8345000743865967, 0.83119797706604, 0.8387266993522644, 0.845859169960022, 0.8449346423149109, 0.8502179384231567, 0.8578787446022034, 0.8290846943855286, 0.8475762605667114, 0.8474441766738892, 0.8498216867446899, 0.8540483713150024, 0.859199583530426, 0.8640866279602051, 0.8623695969581604, 0.8664641380310059], "val_loss": [1.468850816999163, 0.9261789662497384, 0.6568513257162911, 0.6315560851778302, 0.6229289429528373, 0.5739304678780692, 0.5341360228402274, 0.5617889847074237, 0.5293591873986381, 0.4831381355013166, 0.5052222183772496, 0.4559711643627712, 0.45922101395470755, 0.43395492008754183, 0.4374722157205854, 0.43678194284439087, 0.4322699989591326, 0.44137821027210783, 0.4081057139805385, 0.4149160896028791, 0.4011580688612802, 0.42326721974781584, 0.3889222230230059, 0.3944514053208487, 0.4092884915215628, 0.4268752336502075, 0.38794556685856413, 0.41828528472355436, 0.3764997976166861, 0.3597637244633266, 0.35773755822862896, 0.35310895102364676, 0.38476576123918804, 0.36579422439847675, 0.35566569226128714, 0.34735984461648123, 0.33484935760498047, 0.3632587364741734, 0.34168076515197754, 0.3394050598144531, 0.33993303775787354], "val_accuracy": [0.4233333468437195, 0.624666690826416, 0.7116666436195374, 0.7263333201408386, 0.7043333053588867, 0.7456666827201843, 0.7509999871253967, 0.7450000047683716, 0.7803333401679993, 0.777999997138977, 0.7576666474342346, 0.8050000071525574, 0.796999990940094, 0.8159999847412109, 0.8040000200271606, 0.8053333163261414, 0.8050000071525574, 0.8009999990463257, 0.8253333568572998, 0.8180000185966492, 0.8203333616256714, 0.8136666417121887, 0.8276666402816772, 0.8243333101272583, 0.8226666450500488, 0.8019999861717224, 0.8343333601951599, 0.8236666917800903, 0.8366666436195374, 0.8519999980926514, 0.8460000157356262, 0.8523333072662354, 0.8416666388511658, 0.8483333587646484, 0.8536666631698608, 0.8640000224113464, 0.8610000014305115, 0.8399999737739563, 0.8560000061988831, 0.8619999885559082, 0.8556666374206543]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 6, 5, 9, 6, 2, 2, 5, 9, 1, 4, 2, 6, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [87, 90, 50, 27, 57, 91, 53, 52, 57, 21], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 3, 1, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8057143092155457, "mapping_values": [1, 6, 6, 4, 2, 3, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), alpha))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.0526721425390893, 1.6194332347585698, 1.171304306003317, 0.9141166806063553, 0.8082028410264986, 0.750684378295448, 0.735046785190483, 0.6987684516780144, 0.6790281800923961, 0.6406626898882458, 0.6799765617666998, 0.6003168608927849, 0.5805402974080353, 0.586629651178852, 0.5449912299049875, 0.5388912810680653, 0.5217865895932109, 0.523041561554924, 0.5033386895811207, 0.48568547360098135, 0.48849496975976087, 0.46169796439997035, 0.47961788004840666, 0.4520021853170154, 0.46585926955181767, 0.4374043518179648, 0.46007886639581047, 0.43275229466542464, 0.41960941592637085, 0.41078119065547114, 0.4062283123725158, 0.38668389240307594, 0.44592623595847525, 0.3974079414798662, 0.4135808742096742, 0.3919185381980541, 0.3869513898847787, 0.3736117642632156, 0.36548894125756143, 0.3669641066213184, 0.3550201449506334], "accuracy": [0.31739532947540283, 0.44089287519454956, 0.5798441171646118, 0.665830135345459, 0.702681303024292, 0.7209087014198303, 0.7199841737747192, 0.7331924438476562, 0.739928662776947, 0.754589855670929, 0.7434949278831482, 0.7647602558135986, 0.7783648371696472, 0.7794214487075806, 0.7951393723487854, 0.7979130744934082, 0.8084797263145447, 0.8034605979919434, 0.8057059645652771, 0.8208954930305481, 0.8146876096725464, 0.8309338092803955, 0.8284242749214172, 0.8314621448516846, 0.8189142942428589, 0.8345000743865967, 0.83119797706604, 0.8387266993522644, 0.845859169960022, 0.8449346423149109, 0.8502179384231567, 0.8578787446022034, 0.8290846943855286, 0.8475762605667114, 0.8474441766738892, 0.8498216867446899, 0.8540483713150024, 0.859199583530426, 0.8640866279602051, 0.8623695969581604, 0.8664641380310059], "val_loss": [1.468850816999163, 0.9261789662497384, 0.6568513257162911, 0.6315560851778302, 0.6229289429528373, 0.5739304678780692, 0.5341360228402274, 0.5617889847074237, 0.5293591873986381, 0.4831381355013166, 0.5052222183772496, 0.4559711643627712, 0.45922101395470755, 0.43395492008754183, 0.4374722157205854, 0.43678194284439087, 0.4322699989591326, 0.44137821027210783, 0.4081057139805385, 0.4149160896028791, 0.4011580688612802, 0.42326721974781584, 0.3889222230230059, 0.3944514053208487, 0.4092884915215628, 0.4268752336502075, 0.38794556685856413, 0.41828528472355436, 0.3764997976166861, 0.3597637244633266, 0.35773755822862896, 0.35310895102364676, 0.38476576123918804, 0.36579422439847675, 0.35566569226128714, 0.34735984461648123, 0.33484935760498047, 0.3632587364741734, 0.34168076515197754, 0.3394050598144531, 0.33993303775787354], "val_accuracy": [0.4233333468437195, 0.624666690826416, 0.7116666436195374, 0.7263333201408386, 0.7043333053588867, 0.7456666827201843, 0.7509999871253967, 0.7450000047683716, 0.7803333401679993, 0.777999997138977, 0.7576666474342346, 0.8050000071525574, 0.796999990940094, 0.8159999847412109, 0.8040000200271606, 0.8053333163261414, 0.8050000071525574, 0.8009999990463257, 0.8253333568572998, 0.8180000185966492, 0.8203333616256714, 0.8136666417121887, 0.8276666402816772, 0.8243333101272583, 0.8226666450500488, 0.8019999861717224, 0.8343333601951599, 0.8236666917800903, 0.8366666436195374, 0.8519999980926514, 0.8460000157356262, 0.8523333072662354, 0.8416666388511658, 0.8483333587646484, 0.8536666631698608, 0.8640000224113464, 0.8610000014305115, 0.8399999737739563, 0.8560000061988831, 0.8619999885559082, 0.8556666374206543]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [3, 0, 2, 1, 5, 1, 0, 3, 2, 1, 0, 0, 9, 1, 2, 9, 9, 5, 0, 1, 1, 2, 6, 9, 2, 8, 0], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 50, 27, 57, 91, 53, 52, 44, 21], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [9, 1, 1, 8, 8, 4, 9, 4, 2, 3, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 2, 2, 0, 2, 1, 3, 0, 0], [95, 46, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8057143092155457, "mapping_values": [1, 20, 20, 12, 8, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(grad)))), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, grad)), tf.math.negative(tf.math.negative(tf.math.add(alpha, alpha)))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0526721425390893, 1.6194332347585698, 1.171304306003317, 0.9141166806063553, 0.8082028410264986, 0.750684378295448, 0.735046785190483, 0.6987684516780144, 0.6790281800923961, 0.6406626898882458, 0.6799765617666998, 0.6003168608927849, 0.5805402974080353, 0.586629651178852, 0.5449912299049875, 0.5388912810680653, 0.5217865895932109, 0.523041561554924, 0.5033386895811207, 0.48568547360098135, 0.48849496975976087, 0.46169796439997035, 0.47961788004840666, 0.4520021853170154, 0.46585926955181767, 0.4374043518179648, 0.46007886639581047, 0.43275229466542464, 0.41960941592637085, 0.41078119065547114, 0.4062283123725158, 0.38668389240307594, 0.44592623595847525, 0.3974079414798662, 0.4135808742096742, 0.3919185381980541, 0.3869513898847787, 0.3736117642632156, 0.36548894125756143, 0.3669641066213184, 0.3550201449506334], "accuracy": [0.31739532947540283, 0.44089287519454956, 0.5798441171646118, 0.665830135345459, 0.702681303024292, 0.7209087014198303, 0.7199841737747192, 0.7331924438476562, 0.739928662776947, 0.754589855670929, 0.7434949278831482, 0.7647602558135986, 0.7783648371696472, 0.7794214487075806, 0.7951393723487854, 0.7979130744934082, 0.8084797263145447, 0.8034605979919434, 0.8057059645652771, 0.8208954930305481, 0.8146876096725464, 0.8309338092803955, 0.8284242749214172, 0.8314621448516846, 0.8189142942428589, 0.8345000743865967, 0.83119797706604, 0.8387266993522644, 0.845859169960022, 0.8449346423149109, 0.8502179384231567, 0.8578787446022034, 0.8290846943855286, 0.8475762605667114, 0.8474441766738892, 0.8498216867446899, 0.8540483713150024, 0.859199583530426, 0.8640866279602051, 0.8623695969581604, 0.8664641380310059], "val_loss": [1.468850816999163, 0.9261789662497384, 0.6568513257162911, 0.6315560851778302, 0.6229289429528373, 0.5739304678780692, 0.5341360228402274, 0.5617889847074237, 0.5293591873986381, 0.4831381355013166, 0.5052222183772496, 0.4559711643627712, 0.45922101395470755, 0.43395492008754183, 0.4374722157205854, 0.43678194284439087, 0.4322699989591326, 0.44137821027210783, 0.4081057139805385, 0.4149160896028791, 0.4011580688612802, 0.42326721974781584, 0.3889222230230059, 0.3944514053208487, 0.4092884915215628, 0.4268752336502075, 0.38794556685856413, 0.41828528472355436, 0.3764997976166861, 0.3597637244633266, 0.35773755822862896, 0.35310895102364676, 0.38476576123918804, 0.36579422439847675, 0.35566569226128714, 0.34735984461648123, 0.33484935760498047, 0.3632587364741734, 0.34168076515197754, 0.3394050598144531, 0.33993303775787354], "val_accuracy": [0.4233333468437195, 0.624666690826416, 0.7116666436195374, 0.7263333201408386, 0.7043333053588867, 0.7456666827201843, 0.7509999871253967, 0.7450000047683716, 0.7803333401679993, 0.777999997138977, 0.7576666474342346, 0.8050000071525574, 0.796999990940094, 0.8159999847412109, 0.8040000200271606, 0.8053333163261414, 0.8050000071525574, 0.8009999990463257, 0.8253333568572998, 0.8180000185966492, 0.8203333616256714, 0.8136666417121887, 0.8276666402816772, 0.8243333101272583, 0.8226666450500488, 0.8019999861717224, 0.8343333601951599, 0.8236666917800903, 0.8366666436195374, 0.8519999980926514, 0.8460000157356262, 0.8523333072662354, 0.8416666388511658, 0.8483333587646484, 0.8536666631698608, 0.8640000224113464, 0.8610000014305115, 0.8399999737739563, 0.8560000061988831, 0.8619999885559082, 0.8556666374206543]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [2, 2, 2, 9, 9, 1, 2, 1, 2, 0, 5, 4, 1, 8, 2, 6, 9, 8, 0, 1, 1, 2, 0, 9, 2, 8, 8, 2, 9, 4, 9, 5, 9], [0, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 64, 50, 27, 57, 91, 51, 52, 57, 21, 43, 83], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [4, 2, 9, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 80, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8057143092155457, "mapping_values": [1, 28, 28, 19, 9, 4, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(grad, grad))))))), tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(alpha, grad), alpha)))), tf.math.add(alpha, grad)))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0526721425390893, 1.6194332347585698, 1.171304306003317, 0.9141166806063553, 0.8082028410264986, 0.750684378295448, 0.735046785190483, 0.6987684516780144, 0.6790281800923961, 0.6406626898882458, 0.6799765617666998, 0.6003168608927849, 0.5805402974080353, 0.586629651178852, 0.5449912299049875, 0.5388912810680653, 0.5217865895932109, 0.523041561554924, 0.5033386895811207, 0.48568547360098135, 0.48849496975976087, 0.46169796439997035, 0.47961788004840666, 0.4520021853170154, 0.46585926955181767, 0.4374043518179648, 0.46007886639581047, 0.43275229466542464, 0.41960941592637085, 0.41078119065547114, 0.4062283123725158, 0.38668389240307594, 0.44592623595847525, 0.3974079414798662, 0.4135808742096742, 0.3919185381980541, 0.3869513898847787, 0.3736117642632156, 0.36548894125756143, 0.3669641066213184, 0.3550201449506334], "accuracy": [0.31739532947540283, 0.44089287519454956, 0.5798441171646118, 0.665830135345459, 0.702681303024292, 0.7209087014198303, 0.7199841737747192, 0.7331924438476562, 0.739928662776947, 0.754589855670929, 0.7434949278831482, 0.7647602558135986, 0.7783648371696472, 0.7794214487075806, 0.7951393723487854, 0.7979130744934082, 0.8084797263145447, 0.8034605979919434, 0.8057059645652771, 0.8208954930305481, 0.8146876096725464, 0.8309338092803955, 0.8284242749214172, 0.8314621448516846, 0.8189142942428589, 0.8345000743865967, 0.83119797706604, 0.8387266993522644, 0.845859169960022, 0.8449346423149109, 0.8502179384231567, 0.8578787446022034, 0.8290846943855286, 0.8475762605667114, 0.8474441766738892, 0.8498216867446899, 0.8540483713150024, 0.859199583530426, 0.8640866279602051, 0.8623695969581604, 0.8664641380310059], "val_loss": [1.468850816999163, 0.9261789662497384, 0.6568513257162911, 0.6315560851778302, 0.6229289429528373, 0.5739304678780692, 0.5341360228402274, 0.5617889847074237, 0.5293591873986381, 0.4831381355013166, 0.5052222183772496, 0.4559711643627712, 0.45922101395470755, 0.43395492008754183, 0.4374722157205854, 0.43678194284439087, 0.4322699989591326, 0.44137821027210783, 0.4081057139805385, 0.4149160896028791, 0.4011580688612802, 0.42326721974781584, 0.3889222230230059, 0.3944514053208487, 0.4092884915215628, 0.4268752336502075, 0.38794556685856413, 0.41828528472355436, 0.3764997976166861, 0.3597637244633266, 0.35773755822862896, 0.35310895102364676, 0.38476576123918804, 0.36579422439847675, 0.35566569226128714, 0.34735984461648123, 0.33484935760498047, 0.3632587364741734, 0.34168076515197754, 0.3394050598144531, 0.33993303775787354], "val_accuracy": [0.4233333468437195, 0.624666690826416, 0.7116666436195374, 0.7263333201408386, 0.7043333053588867, 0.7456666827201843, 0.7509999871253967, 0.7450000047683716, 0.7803333401679993, 0.777999997138977, 0.7576666474342346, 0.8050000071525574, 0.796999990940094, 0.8159999847412109, 0.8040000200271606, 0.8053333163261414, 0.8050000071525574, 0.8009999990463257, 0.8253333568572998, 0.8180000185966492, 0.8203333616256714, 0.8136666417121887, 0.8276666402816772, 0.8243333101272583, 0.8226666450500488, 0.8019999861717224, 0.8343333601951599, 0.8236666917800903, 0.8366666436195374, 0.8519999980926514, 0.8460000157356262, 0.8523333072662354, 0.8416666388511658, 0.8483333587646484, 0.8536666631698608, 0.8640000224113464, 0.8610000014305115, 0.8399999737739563, 0.8560000061988831, 0.8619999885559082, 0.8556666374206543]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 2, 2, 5, 6, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 10, 19, 41, 30, 79, 83, 52, 48, 54, 42], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [2, 1, 3, 0, 5, 4, 5, 6, 0, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 3, 2, 1, 0, 0, 0], [95, 46, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8057143092155457, "mapping_values": [1, 23, 23, 14, 9, 3, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.square(grad))))))), tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), alpha))), tf.math.pow(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0526721425390893, 1.6194332347585698, 1.171304306003317, 0.9141166806063553, 0.8082028410264986, 0.750684378295448, 0.735046785190483, 0.6987684516780144, 0.6790281800923961, 0.6406626898882458, 0.6799765617666998, 0.6003168608927849, 0.5805402974080353, 0.586629651178852, 0.5449912299049875, 0.5388912810680653, 0.5217865895932109, 0.523041561554924, 0.5033386895811207, 0.48568547360098135, 0.48849496975976087, 0.46169796439997035, 0.47961788004840666, 0.4520021853170154, 0.46585926955181767, 0.4374043518179648, 0.46007886639581047, 0.43275229466542464, 0.41960941592637085, 0.41078119065547114, 0.4062283123725158, 0.38668389240307594, 0.44592623595847525, 0.3974079414798662, 0.4135808742096742, 0.3919185381980541, 0.3869513898847787, 0.3736117642632156, 0.36548894125756143, 0.3669641066213184, 0.3550201449506334], "accuracy": [0.31739532947540283, 0.44089287519454956, 0.5798441171646118, 0.665830135345459, 0.702681303024292, 0.7209087014198303, 0.7199841737747192, 0.7331924438476562, 0.739928662776947, 0.754589855670929, 0.7434949278831482, 0.7647602558135986, 0.7783648371696472, 0.7794214487075806, 0.7951393723487854, 0.7979130744934082, 0.8084797263145447, 0.8034605979919434, 0.8057059645652771, 0.8208954930305481, 0.8146876096725464, 0.8309338092803955, 0.8284242749214172, 0.8314621448516846, 0.8189142942428589, 0.8345000743865967, 0.83119797706604, 0.8387266993522644, 0.845859169960022, 0.8449346423149109, 0.8502179384231567, 0.8578787446022034, 0.8290846943855286, 0.8475762605667114, 0.8474441766738892, 0.8498216867446899, 0.8540483713150024, 0.859199583530426, 0.8640866279602051, 0.8623695969581604, 0.8664641380310059], "val_loss": [1.468850816999163, 0.9261789662497384, 0.6568513257162911, 0.6315560851778302, 0.6229289429528373, 0.5739304678780692, 0.5341360228402274, 0.5617889847074237, 0.5293591873986381, 0.4831381355013166, 0.5052222183772496, 0.4559711643627712, 0.45922101395470755, 0.43395492008754183, 0.4374722157205854, 0.43678194284439087, 0.4322699989591326, 0.44137821027210783, 0.4081057139805385, 0.4149160896028791, 0.4011580688612802, 0.42326721974781584, 0.3889222230230059, 0.3944514053208487, 0.4092884915215628, 0.4268752336502075, 0.38794556685856413, 0.41828528472355436, 0.3764997976166861, 0.3597637244633266, 0.35773755822862896, 0.35310895102364676, 0.38476576123918804, 0.36579422439847675, 0.35566569226128714, 0.34735984461648123, 0.33484935760498047, 0.3632587364741734, 0.34168076515197754, 0.3394050598144531, 0.33993303775787354], "val_accuracy": [0.4233333468437195, 0.624666690826416, 0.7116666436195374, 0.7263333201408386, 0.7043333053588867, 0.7456666827201843, 0.7509999871253967, 0.7450000047683716, 0.7803333401679993, 0.777999997138977, 0.7576666474342346, 0.8050000071525574, 0.796999990940094, 0.8159999847412109, 0.8040000200271606, 0.8053333163261414, 0.8050000071525574, 0.8009999990463257, 0.8253333568572998, 0.8180000185966492, 0.8203333616256714, 0.8136666417121887, 0.8276666402816772, 0.8243333101272583, 0.8226666450500488, 0.8019999861717224, 0.8343333601951599, 0.8236666917800903, 0.8366666436195374, 0.8519999980926514, 0.8460000157356262, 0.8523333072662354, 0.8416666388511658, 0.8483333587646484, 0.8536666631698608, 0.8640000224113464, 0.8610000014305115, 0.8399999737739563, 0.8560000061988831, 0.8619999885559082, 0.8556666374206543]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [5, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 83, 3, 29, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 1, 4, 9, 6, 2, 8, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [64, 46, 24, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [41, 25, 50, 71, 34]], "fitness": -0.7962856888771057, "mapping_values": [1, 24, 24, 15, 9, 3, 19, 19, 12, 7, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(grad)), grad)), tf.math.add(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0903692687459987, 1.4060214219265263, 1.0755672133782945, 0.9401791833253538, 0.84630687720803, 0.7946564502814316, 0.7305706880348013, 0.7030187730366575, 0.7093796547787175, 0.673706682500523, 0.6452758733181669, 0.6596213099648215, 0.6373469359083356, 0.6090266095365374, 0.6016555614380742, 0.6025334569551626, 0.6027705456996086, 0.5636450029194174, 0.5615598095123085, 0.5674389864018785, 0.5645482995175981, 0.5637600057239404, 0.5420323723988401], "accuracy": [0.3125082552433014, 0.5247655510902405, 0.6062607169151306, 0.6527539491653442, 0.6806234121322632, 0.6989829540252686, 0.7283053994178772, 0.7312111854553223, 0.7320036888122559, 0.7464007139205933, 0.7622507214546204, 0.7508915662765503, 0.7561748623847961, 0.7724210619926453, 0.7709681391716003, 0.7712323069572449, 0.7759873270988464, 0.7889314293861389, 0.7889314293861389, 0.785101056098938, 0.7872143983840942, 0.7829877138137817, 0.7979130744934082], "val_loss": [1.1723294598715646, 1.0907655443464006, 0.7520502465111869, 0.646895340510777, 0.625606758253915, 0.5599513905388969, 0.5966116189956665, 0.5930399554116386, 0.5254971810749599, 0.5041049378258842, 0.50862717628479, 0.527615853718349, 0.5034904820578439, 0.533977883202689, 0.47913696084703716, 0.4994075298309326, 0.4694864749908447, 0.45804673433303833, 0.46116885968617033, 0.4658762216567993, 0.4611020769391741, 0.45384681224823, 0.44508314984185354], "val_accuracy": [0.6086666584014893, 0.49933332204818726, 0.6776666641235352, 0.7179999947547913, 0.7106666564941406, 0.765666663646698, 0.7210000157356262, 0.7239999771118164, 0.7786666750907898, 0.7806666493415833, 0.7749999761581421, 0.765333354473114, 0.7796666622161865, 0.750333309173584, 0.7950000166893005, 0.7793333530426025, 0.7979999780654907, 0.812666654586792, 0.7993333339691162, 0.8009999990463257, 0.8029999732971191, 0.8086666464805603, 0.8019999861717224]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 3, 8, 2, 6, 2, 2, 5, 9, 1, 4, 3, 6, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [87, 70, 50, 27, 57, 91, 53, 52, 57, 21], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 3, 3, 0, 3, 9, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 3, 2, 1, 3, 0, 0], [44, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [15, 25, 50, 71, 34]], "fitness": -0.5671428442001343, "mapping_values": [1, 29, 29, 18, 11, 5, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad)))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, tf.math.pow(grad, grad)), tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(grad, alpha), tf.math.add(alpha, grad)), grad)))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(grad, tf.math.negative(tf.math.add(beta, grad))), alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3015616513545627, 2.3002862511152258, 2.298230876854587, 2.296084689017001, 2.2920874918236187, 2.2918358398639547, 2.2907908172214415, 2.288492488036019, 2.2854692524040945, 2.284218183046854, 2.2818989145001556, 2.2802088931094637, 2.2790074128642326, 2.2779304743474422, 2.273966762541213, 2.2713681689468843, 2.269326749022422, 2.2685109948312068, 2.2666162268329115, 2.26373125265744, 2.262238991873029, 2.260150580185122, 2.2547891257760577, 2.2557812417266767, 2.2526746180079256, 2.2518524000626106, 2.2482711869838012, 2.247299527070148, 2.24563256558363, 2.241055105372096, 2.239260088514107, 2.2377629388419473, 2.233708184015135, 2.230812053859289, 2.227623753622617, 2.2262211030484695, 2.2238082541230333, 2.2207288978563056, 2.218162810309625, 2.21368165747396, 2.2115897174996944, 2.2068339657585114, 2.205454959089667, 2.203599040943791, 2.198549374455805, 2.19756246986107, 2.1927021115982868, 2.190277941301593, 2.18412981781552, 2.1826149317346246, 2.1790103912353516, 2.1745275465126728, 2.1707191151745047, 2.1672645628239735, 2.1640640652300958, 2.159697117066701, 2.1545851958693922, 2.15032385642959, 2.1468730800738505, 2.1403241534479354, 2.1379272771502027, 2.131538966674815, 2.1296719237561743, 2.122040423419828, 2.1139173676482343, 2.1125451108609776, 2.1061739312218415, 2.098971485792449, 2.0949745885511164, 2.086874088921709, 2.0856567133592496, 2.0756957034676726, 2.06857382862276, 2.0640210836098385, 2.059672576120548, 2.0497164453230106, 2.043553978744011, 2.036193259088922, 2.031232332399162, 2.0219908686771273, 2.0157818625773483, 2.0101897206210095, 2.000902542490387, 1.9906679232988722, 1.985747401850681, 1.9799878829663313, 1.9693887106352919, 1.959834047060412, 1.952001078678963, 1.944370586527904, 1.9335371460251412, 1.9314236714461728, 1.9182501508575216, 1.91422094298612, 1.8989501446465837, 1.88825391254027, 1.8782487086269755, 1.8729044657184337, 1.8604965564707376, 1.8542472764154891], "accuracy": [0.09298639744520187, 0.09496764093637466, 0.10276053100824356, 0.10632677376270294, 0.11676132678985596, 0.11438383162021637, 0.11715757846832275, 0.12402588874101639, 0.13578127324581146, 0.1394795924425125, 0.15031039714813232, 0.15057456493377686, 0.15440496802330017, 0.15691454708576202, 0.1604807823896408, 0.17540615797042847, 0.177255317568779, 0.18055738508701324, 0.18253862857818604, 0.1946902722120285, 0.19297318160533905, 0.19852067530155182, 0.21423853933811188, 0.21423853933811188, 0.2164839506149292, 0.2172764539718628, 0.22916391491889954, 0.23642848432064056, 0.23946638405323029, 0.24937260150909424, 0.2513538599014282, 0.24858011305332184, 0.2607317268848419, 0.26680755615234375, 0.26720380783081055, 0.266939640045166, 0.2743362784385681, 0.27261921763420105, 0.28860124945640564, 0.28886541724205017, 0.2880729138851166, 0.30207371711730957, 0.3015453815460205, 0.30062079429626465, 0.3055078685283661, 0.3027341067790985, 0.3183199167251587, 0.31343284249305725, 0.3259807229042053, 0.31845200061798096, 0.3257165551185608, 0.3295469582080841, 0.3365473449230194, 0.3337736129760742, 0.3415665030479431, 0.337339848279953, 0.3362831771373749, 0.3431515097618103, 0.3447364866733551, 0.3571522831916809, 0.3539822995662689, 0.3535860478878021, 0.3571522831916809, 0.3626997768878937, 0.37524765729904175, 0.372209757566452, 0.368511438369751, 0.3789459764957428, 0.3737947344779968, 0.38185179233551025, 0.37683266401290894, 0.38726720213890076, 0.3937392830848694, 0.38964468240737915, 0.3901730179786682, 0.39228636026382446, 0.4003434181213379, 0.39783385396003723, 0.4069475531578064, 0.4167217016220093, 0.4087967276573181, 0.40774005651474, 0.41104212403297424, 0.4142121374607086, 0.416589617729187, 0.4138158857822418, 0.4267600178718567, 0.4231937527656555, 0.43204331398010254, 0.4365341365337372, 0.42808082699775696, 0.43851539492607117, 0.4344208240509033, 0.43283581733703613, 0.4407607913017273, 0.44802534580230713, 0.44908201694488525, 0.4468366205692291, 0.452119916677475, 0.44789329171180725], "val_loss": [1.9687322207859583, 1.9668986456734794, 1.9650359153747559, 1.9631944383893694, 1.9613308225359236, 1.959489141191755, 1.9576643535069056, 1.955831868307931, 1.9539881433759416, 1.9521536145891463, 1.9503066199166434, 1.9484564917428153, 1.946615559714181, 1.9447449275425501, 1.9428624425615584, 1.940969671521868, 1.9390599387032645, 1.937112876347133, 1.935166358947754, 1.9332047189985002, 1.9312330654689245, 1.9292216300964355, 1.9271603311811174, 1.9250803674970354, 1.9229916163853236, 1.9208793640136719, 1.9186979021344865, 1.9165103094918388, 1.914283003125872, 1.9120045389447893, 1.9097042764936174, 1.9073600769042969, 1.9049489838736398, 1.9024844850812639, 1.8999581336975098, 1.8974003791809082, 1.8948052951267786, 1.8921303749084473, 1.8894121987479073, 1.8866175242832728, 1.8837686266217912, 1.8808480671473913, 1.877851963043213, 1.874812058040074, 1.8716746738978796, 1.8685434205191476, 1.8652760641915458, 1.8619407245091029, 1.8584999356951033, 1.8550209317888533, 1.851416996547154, 1.847728865487235, 1.8439504078456335, 1.8400410924639021, 1.8360511916024345, 1.8319997106279646, 1.8278487750462122, 1.8235810143607003, 1.819244384765625, 1.8147634778703963, 1.810192584991455, 1.8055116108485632, 1.8007514136178153, 1.795856135232108, 1.7907823835100447, 1.785656315939767, 1.7804059982299805, 1.7749996866498674, 1.7695188522338867, 1.7638791629246302, 1.758183411189488, 1.752267837524414, 1.7462446349007743, 1.7400809015546526, 1.7337922368730818, 1.727381910596575, 1.7208281244550432, 1.7141379628862654, 1.7073177269526891, 1.700312546321324, 1.6932371684483118, 1.6860383238111223, 1.6787128448486328, 1.6711579050336565, 1.6635431902749198, 1.6558233329227992, 1.6479360376085554, 1.6398931912013464, 1.6317328725542342, 1.6234820229666573, 1.6150054250444685, 1.6065028735569544, 1.5978391851697649, 1.58918639591762, 1.5803264209202357, 1.5712143693651472, 1.5620863097054618, 1.5528441497257777, 1.543520791190011, 1.5341641221727644], "val_accuracy": [0.05000000074505806, 0.061666667461395264, 0.07566666603088379, 0.09233333170413971, 0.11100000143051147, 0.12866666913032532, 0.14666666090488434, 0.16566666960716248, 0.18799999356269836, 0.20466665923595428, 0.22233332693576813, 0.23366667330265045, 0.24966666102409363, 0.265666663646698, 0.2823333442211151, 0.29600000381469727, 0.3100000023841858, 0.31966665387153625, 0.3310000002384186, 0.34299999475479126, 0.35066667199134827, 0.35866665840148926, 0.36500000953674316, 0.3686666786670685, 0.37400001287460327, 0.3799999952316284, 0.38333332538604736, 0.38600000739097595, 0.39100000262260437, 0.39533331990242004, 0.3996666669845581, 0.4050000011920929, 0.40666666626930237, 0.40966665744781494, 0.41466665267944336, 0.41733333468437195, 0.42266666889190674, 0.42633333802223206, 0.42933332920074463, 0.4320000112056732, 0.43433332443237305, 0.4363333284854889, 0.4386666715145111, 0.4429999887943268, 0.445333331823349, 0.44966667890548706, 0.4519999921321869, 0.45533332228660583, 0.45899999141693115, 0.46166667342185974, 0.4663333296775818, 0.4673333466053009, 0.4699999988079071, 0.4729999899864197, 0.476666659116745, 0.47999998927116394, 0.4830000102519989, 0.48533332347869873, 0.48766666650772095, 0.48899999260902405, 0.4909999966621399, 0.4933333396911621, 0.4976666569709778, 0.4986666738986969, 0.5016666650772095, 0.5070000290870667, 0.5096666812896729, 0.5130000114440918, 0.515999972820282, 0.5193333625793457, 0.5230000019073486, 0.5239999890327454, 0.5273333191871643, 0.5293333530426025, 0.531333327293396, 0.5329999923706055, 0.5353333353996277, 0.5383333563804626, 0.5393333435058594, 0.5396666526794434, 0.5400000214576721, 0.5429999828338623, 0.5433333516120911, 0.5460000038146973, 0.5483333468437195, 0.5486666560173035, 0.550000011920929, 0.5516666769981384, 0.5536666512489319, 0.5550000071525574, 0.5559999942779541, 0.5573333501815796, 0.5583333373069763, 0.5603333115577698, 0.562333345413208, 0.5640000104904175, 0.5643333196640015, 0.5640000104904175, 0.5659999847412109, 0.5680000185966492]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 8, 3, 2, 5, 2, 3, 5, 6, 9, 3, 2, 4, 9, 5, 0, 2, 8, 2, 0, 9, 2], [2, 0, 2, 2, 2, 2, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 50, 27, 79, 91, 53, 52, 57, 21], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 5, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 46, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [91, 25, 50, 71, 34]], "fitness": -0.175428569316864, "mapping_values": [1, 23, 23, 14, 9, 2, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), alpha)))))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.7020856142201524, 2.3054607081107807, 2.303505895884439, 2.3030343152717467, 2.3028098494227787, 2.3030678694667976, 2.303184160545691], "accuracy": [0.17936864495277405, 0.09642054885625839, 0.09325055778026581, 0.09893012791872025, 0.09708096832036972, 0.09549596905708313, 0.09140139818191528], "val_loss": [1.977191584450858, 1.9740401676722936, 1.9736460277012415, 1.9736217771257674, 1.9737907818385534, 1.9736595153808594, 1.9736694608415877], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.09966666996479034, 0.0976666659116745, 0.10000000149011612, 0.10400000214576721, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 3, 8, 2, 6, 2, 2, 5, 9, 1, 4, 2, 0, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [0, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [67, 90, 50, 3, 64, 91, 53, 52, 57, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 4, 3, 9, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 3, 2, 1, 3, 0, 0], [18, 34, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 4, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [21, 25, 50, 71, 34]], "fitness": -0.16457143425941467, "mapping_values": [1, 15, 15, 8, 7, 1, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.square(tf.math.add(alpha, grad)), alpha)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.6823109157679657, 2.3057133531715293, 2.3034706498338657, 2.303052815936261, 2.302729290836381, 2.3032122660684644, 2.3031345131752783], "accuracy": [0.17936864495277405, 0.09496764093637466, 0.0944393053650856, 0.09998679161071777, 0.09893012791872025, 0.0944393053650856, 0.0948355570435524], "val_loss": [1.9771716935294015, 1.9740281786237444, 1.9736628532409668, 1.9736129896981376, 1.9737846510750907, 1.9736010687691825, 1.973642076764788], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.09966666996479034, 0.0976666659116745, 0.10000000149011612, 0.10400000214576721, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 1, 2, 4, 5, 3, 6, 5, 2, 3, 5, 6, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 50, 27, 57, 91, 53, 52, 57, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [64, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), grad), grad))), tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), alpha)))))), tf.math.multiply(tf.math.add(alpha, grad), grad)), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.088461840708557, 2.171263503077291, 2.306217772030733, 2.30371261090178, 2.303016683066825, 2.3030240602497063, 2.3030017357240373], "accuracy": [0.19482234120368958, 0.201294407248497, 0.09998679161071777, 0.09747721254825592, 0.09906221181154251, 0.09496764093637466, 0.09377889335155487], "val_loss": [1.9689053807939803, 1.9776551382882255, 1.9743937764848982, 1.9736892155238561, 1.9735862868172782, 1.9736198697771346, 1.9736634663173132], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10233332961797714, 0.09733333438634872]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 3, 3, 9, 6, 2, 2, 2, 0, 1, 9, 8, 6, 2, 2, 5, 3, 8, 6, 9, 8, 2, 0, 9, 2], [0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 50, 27, 57, 91, 53, 52, 57, 21], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 2, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 40, 43, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 8, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 4, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(grad, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(sigma, tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 2, 3, 9, 6, 2, 2, 5, 9, 1, 4, 2, 6, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [87, 90, 50, 27, 57, 91, 53, 52, 57, 21], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 4, 0, 5, 9, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 3, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 4, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(alpha, tf.math.add(grad, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 0, 2, 1, 5, 1, 0, 6, 2, 1, 1, 1, 9, 1, 2, 1, 9, 5, 0, 1, 1, 2, 6, 9, 2, 8], [0, 3, 2, 2, 2, 2, 1, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [41, 10, 50, 41, 80, 79, 83, 52, 48], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 1, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 2, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [8.966509728130767e+30, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05639941990375519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 3, 3, 8, 6, 2, 2, 5, 9, 1, 4, 2, 6, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [87, 90, 50, 27, 57, 91, 53, 52, 57, 21], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 8, 3, 0, 8, 9, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 3, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 6, 6, 2, 7, 7, 4, 3, 2, 3, 1, 1, 0, 0, 4, 4, 0, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(grad)), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(grad, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [49.02898102426384, 569.8462836805069, 2332.849685090518, 6182.732154742397, 13049.141579763655, 23670.196038956215], "accuracy": [0.09219389408826828, 0.1018359512090683, 0.10236428678035736, 0.09959053993225098, 0.10342095047235489, 0.09787346422672272], "val_loss": [137.32084001813615, 833.6907610212054, 2619.855538504464, 6024.727818080357, 11577.424386160714, 19803.276227678572], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 3, 3, 9, 6, 2, 2, 5, 8, 1, 4, 2, 6, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [0, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [67, 90, 50, 1, 57, 91, 53, 52, 57, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 3, 9, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 3, 2, 1, 3, 0, 0], [18, 34, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.multiply(grad, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06458856165409088, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 2, 2, 9, 6, 1, 2, 1, 2, 0, 5, 6, 0, 8, 2, 6, 9, 8, 2, 1, 1, 2, 6, 9, 2, 8], [0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 1, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 94, 27, 57, 91, 78, 52, 57, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 2, 9, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 1, 0, 2, 1, 3, 0, 0], [95, 46, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 27, 17, 10, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(grad)))), grad))))), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad)), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06511688977479935, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1], [3, 3, 3, 9, 6, 2, 2, 5, 9, 2, 4, 2, 6, 6, 3, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [2, 0, 2, 0, 2, 2, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [61, 10, 35, 43, 57, 79, 53, 52, 73, 74, 58], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 1, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 1, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.0868571400642395, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.3026792364444213, 2.3045606785100197, 2.3099526116057882, 2.3200156859686474, 2.3509865388138387, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09047681838274002, 0.08519349992275238, 0.08149518072605133, 0.07740060985088348, 0.07924976944923401, 0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9713870457240514, 1.972397804260254, 1.9806327819824219, 1.9934406280517578, 2.0483623913356235, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.035999998450279236, 0.027000000700354576, 0.05900000035762787, 0.07633333653211594, 0.1003333330154419, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1], [2, 2, 2, 9, 6, 1, 2, 1, 2, 0, 5, 6, 1, 8, 2, 6, 9, 8, 0, 1, 1, 2, 6, 9, 2, 8], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [87, 90, 50, 27, 57, 91, 53, 52, 57, 21], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 2, 9, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 1, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [58, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3023658178548896, 2.3030211727113112, 2.302981886991562, 2.3027373315037485, 2.300780848017017, 2.3024223215465676], "accuracy": [0.09087307006120682, 0.0878351628780365, 0.09311848133802414, 0.09100515395402908, 0.09496764093637466, 0.08849557489156723], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]