[{"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 0, 2, 9, 4, 3, 6, 2, 4, 1, 1, 1, 6, 5, 8, 9, 4, 2], [1, 3, 3, 1, 1, 3, 2, 1, 1, 0, 3, 1, 4, 1, 4], [74, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.8140000104904175, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 5, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.068141222000122, 1.564515471458435, 1.1672128438949585, 0.9110057353973389, 0.8063552975654602, 0.7553004622459412, 0.6887673735618591, 0.7107127904891968, 0.6649422645568848, 0.6305524110794067, 0.6229569315910339, 0.6224856972694397, 0.5469810962677002, 0.5565944910049438, 0.5736931562423706, 0.5433633327484131, 0.5354867577552795, 0.502618670463562, 0.5180036425590515, 0.4690624177455902, 0.48111769556999207, 0.4754800498485565, 0.4554221034049988, 0.426893025636673, 0.46021130681037903, 0.4254905879497528, 0.4460640549659729, 0.4218033254146576, 0.41691187024116516, 0.41154372692108154], "accuracy": [0.3085457682609558, 0.4617619812488556, 0.5768062472343445, 0.6556597352027893, 0.6864351034164429, 0.7113987803459167, 0.7366266250610352, 0.7260599732398987, 0.7436270117759705, 0.7604015469551086, 0.7663452625274658, 0.7647602558135986, 0.7950072884559631, 0.7877426743507385, 0.7839123010635376, 0.7965922355651855, 0.7957997918128967, 0.8095363974571228, 0.8059701323509216, 0.8207634687423706, 0.8234050869941711, 0.8228767514228821, 0.8322546482086182, 0.8417646288871765, 0.8257825970649719, 0.8448025584220886, 0.8358209133148193, 0.841500461101532, 0.8462554216384888, 0.8461233377456665], "val_loss": [2.077397346496582, 1.1403554677963257, 0.9662415385246277, 0.7222139239311218, 0.657991886138916, 0.6157210469245911, 0.6922569870948792, 0.5957087278366089, 0.5588528513908386, 0.5591762065887451, 0.582213282585144, 0.5411344170570374, 0.5880612134933472, 0.5331135988235474, 0.522764265537262, 0.5144897699356079, 0.4763088822364807, 0.46260571479797363, 0.44837403297424316, 0.4800357222557068, 0.4256118834018707, 0.4274841248989105, 0.4370972514152527, 0.4603501856327057, 0.4133385717868805, 0.4244508445262909, 0.45384350419044495, 0.4656619131565094, 0.42139461636543274, 0.4527246952056885], "val_accuracy": [0.3230000138282776, 0.4883333444595337, 0.6383333206176758, 0.7316666841506958, 0.7319999933242798, 0.7563333511352539, 0.7196666598320007, 0.7673333287239075, 0.7856666445732117, 0.7826666831970215, 0.7673333287239075, 0.7820000052452087, 0.7596666812896729, 0.79666668176651, 0.7986666560173035, 0.7953333258628845, 0.8163333535194397, 0.8223333358764648, 0.8349999785423279, 0.8050000071525574, 0.8463333249092102, 0.8410000205039978, 0.8389999866485596, 0.8209999799728394, 0.8486666679382324, 0.846666693687439, 0.8213333487510681, 0.8173333406448364, 0.8456666469573975, 0.8226666450500488]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 0, 2, 3, 2, 0, 6, 2, 4, 1, 9, 1, 6, 6, 9, 9, 4, 2], [1, 1, 3, 1, 1, 3, 2, 3, 1, 0, 5, 1, 4, 1, 4], [61, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.8131428360939026, "mapping_values": [1, 4, 4, 2, 2, 1, 26, 26, 17, 9, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(grad, tf.math.add(beta, beta))))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.068601608276367, 1.5603336095809937, 1.1506927013397217, 0.9455663561820984, 0.8254464268684387, 0.7499468326568604, 0.7319931387901306, 0.7167584300041199, 0.6731928586959839, 0.603296160697937, 0.6122472882270813, 0.6120483875274658, 0.5760883092880249, 0.5499192476272583, 0.5544062852859497, 0.5365757346153259, 0.5267305374145508, 0.49929559230804443, 0.5079550743103027, 0.46689140796661377, 0.4812942445278168, 0.47419577836990356, 0.45496615767478943, 0.4350655972957611, 0.43620455265045166, 0.4250328540802002, 0.4408893287181854, 0.4144147038459778, 0.40263068675994873, 0.41987699270248413, 0.40767914056777954, 0.39556968212127686, 0.38647279143333435, 0.39055630564689636, 0.37866726517677307, 0.36414986848831177, 0.36818015575408936, 0.35433459281921387], "accuracy": [0.3086778521537781, 0.4640074074268341, 0.5799762010574341, 0.6598864197731018, 0.6888125538825989, 0.7120591998100281, 0.7277770638465881, 0.7334566116333008, 0.7400607466697693, 0.7693831920623779, 0.7693831920623779, 0.7712323069572449, 0.7861577272415161, 0.7864218950271606, 0.7857614755630493, 0.798309326171875, 0.7994980812072754, 0.813498854637146, 0.8121780753135681, 0.8231409192085266, 0.8248580098152161, 0.8228767514228821, 0.8300092220306396, 0.8405758738517761, 0.837537944316864, 0.8430854678153992, 0.835160493850708, 0.8437458872795105, 0.8556333184242249, 0.8432175517082214, 0.8469158411026001, 0.8512746095657349, 0.8553691506385803, 0.8536521196365356, 0.858671247959137, 0.863029956817627, 0.8625016212463379, 0.8667283058166504], "val_loss": [2.075817346572876, 1.28290593624115, 1.1032036542892456, 0.7921456694602966, 0.694786787033081, 0.6203942894935608, 0.7083916068077087, 0.6359558701515198, 0.5601633191108704, 0.561505913734436, 0.6223530173301697, 0.5356677770614624, 0.538014829158783, 0.5249886512756348, 0.4958687722682953, 0.5311354398727417, 0.46621379256248474, 0.4587608575820923, 0.45188581943511963, 0.4570850431919098, 0.4287174344062805, 0.41790667176246643, 0.4405088722705841, 0.47108983993530273, 0.40258798003196716, 0.46183472871780396, 0.4374692440032959, 0.41155827045440674, 0.4017468988895416, 0.4500080645084381, 0.4117421805858612, 0.43451082706451416, 0.3771447241306305, 0.44053173065185547, 0.3972241282463074, 0.3723711669445038, 0.4054233431816101, 0.4047602415084839], "val_accuracy": [0.3199999928474426, 0.49900001287460327, 0.5640000104904175, 0.687333345413208, 0.7099999785423279, 0.7573333382606506, 0.7139999866485596, 0.7393333315849304, 0.7776666879653931, 0.7823333144187927, 0.7506666779518127, 0.8050000071525574, 0.7873333096504211, 0.796999990940094, 0.8073333501815796, 0.7879999876022339, 0.8163333535194397, 0.8203333616256714, 0.8323333263397217, 0.8206666707992554, 0.8413333296775818, 0.8446666598320007, 0.8393333554267883, 0.8153333067893982, 0.8510000109672546, 0.8213333487510681, 0.8220000267028809, 0.8450000286102295, 0.8560000061988831, 0.8226666450500488, 0.8489999771118164, 0.8416666388511658, 0.8603333234786987, 0.8246666789054871, 0.8569999933242798, 0.856333315372467, 0.8510000109672546, 0.8360000252723694]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 0, 2, 9, 4, 3, 6, 2, 4, 1, 1, 1, 6, 6, 8, 9, 4, 2], [1, 1, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [56, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.795714259147644, "mapping_values": [1, 1, 1, 0, 1, 1, 27, 27, 15, 12, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(grad, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))))), tf.math.subtract(tf.math.add(beta, grad), beta))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), alpha))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1726787090301514, 2.0785179138183594, 2.047614574432373, 1.5316346883773804, 1.0107171535491943, 0.7665649652481079, 0.7377032041549683, 0.7038453221321106, 0.6529939770698547, 0.6473073959350586, 0.5993914008140564, 0.5766679644584656, 0.5724838972091675, 0.5522672533988953, 0.5381725430488586, 0.517275869846344, 0.5270819664001465, 0.4968234598636627, 0.4943360388278961, 0.48343390226364136], "accuracy": [0.27644962072372437, 0.24554219841957092, 0.33747193217277527, 0.4876502454280853, 0.6345264911651611, 0.7131158113479614, 0.7150970697402954, 0.7333245277404785, 0.7490423917770386, 0.750231146812439, 0.7687227725982666, 0.7827235460281372, 0.7861577272415161, 0.7884030938148499, 0.7924976944923401, 0.7976489067077637, 0.7932901978492737, 0.8101968169212341, 0.8087438941001892, 0.8119139075279236], "val_loss": [2.2782185077667236, 2.2399742603302, 1.7156145572662354, 1.0805318355560303, 0.7045263648033142, 0.6518331170082092, 0.6551518440246582, 0.6315271258354187, 0.5839939117431641, 0.5665565729141235, 0.5737994909286499, 0.544137179851532, 0.5453929305076599, 0.5791072845458984, 0.4778195023536682, 0.5104551315307617, 0.47927597165107727, 0.4775024354457855, 0.5176874399185181, 0.46764397621154785], "val_accuracy": [0.10100000351667404, 0.20200000703334808, 0.49433332681655884, 0.5770000219345093, 0.7223333120346069, 0.7450000047683716, 0.7363333106040955, 0.7396666407585144, 0.7736666798591614, 0.7596666812896729, 0.7710000276565552, 0.7953333258628845, 0.7799999713897705, 0.7490000128746033, 0.8256666660308838, 0.7926666736602783, 0.8100000023841858, 0.8213333487510681, 0.7820000052452087, 0.8256666660308838]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 0, 5, 3, 0, 0, 1, 2, 4, 1, 9, 1, 6, 6, 4, 9, 4, 2], [1, 1, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [94, 32, 39, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.7837142944335938, "mapping_values": [1, 2, 2, 1, 1, 1, 22, 22, 14, 8, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), alpha)), grad)), tf.math.add(beta, alpha))), tf.math.add(beta, alpha))))))))))), tf.math.subtract(grad, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.172393321990967, 2.0754191875457764, 1.9482545852661133, 1.3490279912948608, 1.169081211090088, 0.7733580470085144, 0.718242347240448, 0.6734427213668823, 0.6616347432136536, 0.65232253074646, 0.5865391492843628, 0.5875545740127563, 0.5703483819961548, 0.559185802936554, 0.5467281937599182, 0.525560200214386, 0.5326851010322571, 0.5087263584136963, 0.4861549139022827, 0.49117812514305115], "accuracy": [0.2763175368309021, 0.24593845009803772, 0.36824727058410645, 0.5400871634483337, 0.5835424661636353, 0.7121912837028503, 0.726192057132721, 0.7407211661338806, 0.7452120184898376, 0.7493065595626831, 0.7734777331352234, 0.7770439982414246, 0.7885351777076721, 0.7861577272415161, 0.7927618622779846, 0.7981772422790527, 0.7909126877784729, 0.8087438941001892, 0.8108572363853455, 0.8104609847068787], "val_loss": [2.2761969566345215, 2.224853515625, 1.5075331926345825, 1.218648910522461, 0.682918131351471, 0.6648889183998108, 0.6142051815986633, 0.6572338342666626, 0.6094791889190674, 0.5661579370498657, 0.6761000156402588, 0.5268215537071228, 0.5849631428718567, 0.5232748985290527, 0.49134179949760437, 0.5182098746299744, 0.47428905963897705, 0.4981847405433655, 0.4755069315433502, 0.4698101282119751], "val_accuracy": [0.10100000351667404, 0.3063333332538605, 0.4440000057220459, 0.5356666445732117, 0.7383333444595337, 0.7396666407585144, 0.7613333463668823, 0.7296666502952576, 0.7556666731834412, 0.7723333239555359, 0.718999981880188, 0.7956666946411133, 0.7593333125114441, 0.7870000004768372, 0.8190000057220459, 0.7866666913032532, 0.8159999847412109, 0.8033333420753479, 0.8073333501815796, 0.812333345413208]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 0, 2, 9, 4, 0, 6, 2, 4, 1, 1, 1, 6, 6, 8, 9, 4, 2], [1, 1, 3, 1, 1, 3, 3, 0, 1, 0, 5, 1, 4, 1, 4], [74, 0, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.7540000081062317, "mapping_values": [1, 1, 1, 0, 1, 1, 20, 20, 12, 8, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, alpha)), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3584187030792236, 1.9853945970535278, 1.6329209804534912, 1.3633228540420532, 1.2140884399414062, 0.9770920276641846, 0.8975593447685242, 0.9037652015686035, 0.8243942856788635, 0.7398223876953125, 0.7219053506851196, 0.694809079170227, 0.6677205562591553, 0.6447122693061829, 0.6500371098518372], "accuracy": [0.24580636620521545, 0.31686699390411377, 0.44485536217689514, 0.533879280090332, 0.5572579503059387, 0.6472064256668091, 0.6634526252746582, 0.6619997620582581, 0.6837934255599976, 0.7187954187393188, 0.7298903465270996, 0.7388719916343689, 0.7523444890975952, 0.7572315335273743, 0.7531369924545288], "val_loss": [2.228708028793335, 2.0019371509552, 1.1829357147216797, 1.382457971572876, 0.8715319633483887, 0.8898430466651917, 0.8906243443489075, 0.8490602374076843, 0.6847326755523682, 0.6284747123718262, 0.6409861445426941, 0.6954131126403809, 0.6333599090576172, 0.6644187569618225, 0.6862959265708923], "val_accuracy": [0.2136666625738144, 0.4466666579246521, 0.5216666460037231, 0.42266666889190674, 0.6990000009536743, 0.6653333306312561, 0.6393333077430725, 0.6683333516120911, 0.7173333168029785, 0.7639999985694885, 0.7416666746139526, 0.7170000076293945, 0.7419999837875366, 0.7476666569709778, 0.7206666469573975]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 1, 0, 2, 2, 4, 0, 9, 2, 4, 1, 1, 1, 6, 6, 8, 9, 4, 2], [1, 1, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [56, 19, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [8, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [24, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [1, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [2, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 2, 3, 2, 2, 4, 9, 6, 3, 3, 4, 8, 1, 0, 6, 8, 9, 4, 2], [1, 1, 3, 1, 1, 3, 3, 0, 1, 0, 5, 1, 4, 1, 4], [61, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [9, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [45, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 12, 10, 3, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad))), alpha)), tf.math.add(beta, alpha))), tf.math.add(beta, grad))))))), tf.math.sqrt(tf.math.add(beta, grad)))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028476238250732, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [8, 3, 0, 2, 5, 4, 3, 8, 2, 4, 1, 1, 1, 6, 6, 8, 9, 4, 2, 7, 1, 3, 8], [1, 1, 3, 3, 0, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4, 5], [56, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [4, 5, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 39, 39, 23, 16, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(grad, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.add(beta, grad), beta))))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.multiply(grad, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, alpha))), tf.math.add(beta, grad)), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, tf.math.square(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [88, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 5, 0, 2, 9, 4, 4, 6, 2, 4, 1, 1, 1, 6, 6, 8, 9, 4, 2, 4, 0, 0, 1, 4, 8, 8, 4, 0, 0, 1, 0, 9, 0], [1, 3, 3, 1, 2, 3, 2, 0, 1, 0, 5, 3, 4, 1, 4, 2], [61, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 49, 49, 33, 16, 5, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.divide_no_nan(alpha, tf.math.sqrt(beta)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), alpha))), tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, grad))))))), tf.math.add(beta, grad)), tf.math.add(beta, alpha))), tf.math.sqrt(tf.math.pow(tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), grad)))), tf.math.negative(beta))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.338080406188965, 2.6979100704193115, 3.755505084991455, 5.578915119171143, 8.128495216369629, 11.423720359802246, 15.46082878112793], "accuracy": [0.09351472556591034, 0.09853387624025345, 0.10011887550354004, 0.09998679161071777, 0.09509972482919693, 0.10117553919553757, 0.10117553919553757], "val_loss": [2.3787455558776855, 2.787947654724121, 3.7462587356567383, 5.30513858795166, 7.419548988342285, 10.075373649597168, 13.29241943359375], "val_accuracy": [0.0989999994635582, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [1, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 1, 0, 2, 2, 4, 0, 9, 2, 4, 1, 0, 1, 6, 6, 8, 9, 4, 2], [3, 1, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [74, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [2, 2, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [24, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.negative(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, alpha)))))), alpha))))), grad)))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3024187088012695, 2.309473752975464, 2.5095629692077637, 9.141592025756836, 23.41495132446289, 37.80791091918945], "accuracy": [0.10487385839223862, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.303781032562256, 2.333220958709717, 3.7649686336517334, 17.427305221557617, 31.788043975830078, 46.14727020263672], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 4, 2, 1, 4, 3, 6, 5, 4, 0, 1, 1, 6, 6, 8, 9, 4, 2, 1, 4, 1, 9], [3, 1, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4, 2], [61, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 39, 39, 23, 16, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(alpha, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(grad, alpha), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, alpha)), tf.math.add(beta, grad)))), beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3028476238250732, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 3, 2, 2, 4, 1, 6, 2, 4, 4, 8, 1, 0, 6, 8, 9, 4, 2], [3, 2, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [61, 32, 39, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [9, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [24, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 23, 23, 12, 11, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028476238250732, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 0, 3, 9, 5, 0, 6, 2, 4, 1, 1, 1, 6, 6, 8, 9, 4, 2], [1, 3, 3, 1, 1, 3, 2, 1, 1, 0, 5, 1, 4, 1, 4], [74, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [5, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.0722857117652893, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(sigma)", "other_info": {"loss": [2.301666021347046, 2.300868034362793, 2.3003652095794678, 2.2999563217163086, 2.3002636432647705, 2.299626588821411, 2.2996177673339844, 2.2997896671295166, 2.29939603805542, 2.299272298812866, 2.2995800971984863, 2.2992351055145264, 2.300323486328125, 2.300365447998047, 2.3007564544677734, 2.2991902828216553], "accuracy": [0.09179764986038208, 0.09245806187391281, 0.09602430462837219, 0.10368511080741882, 0.09642054885625839, 0.09272222965955734, 0.09760929644107819, 0.09536388516426086, 0.10302469879388809, 0.10342095047235489, 0.10527011007070541, 0.09668471664190292, 0.09800554811954498, 0.10170386731624603, 0.0956280529499054, 0.1010434553027153], "val_loss": [2.299079179763794, 2.2984097003936768, 2.2980129718780518, 2.297792673110962, 2.297687292098999, 2.2976558208465576, 2.2975234985351562, 2.297546148300171, 2.297553777694702, 2.297638416290283, 2.297726631164551, 2.29819655418396, 2.298571825027466, 2.298879623413086, 2.299205780029297, 2.2994608879089355], "val_accuracy": [0.045666664838790894, 0.05066666752099991, 0.056333333253860474, 0.06233333423733711, 0.06666667014360428, 0.07599999755620956, 0.07966666668653488, 0.08133333176374435, 0.08133333176374435, 0.08100000023841858, 0.08399999886751175, 0.0806666687130928, 0.0793333351612091, 0.07500000298023224, 0.07400000095367432, 0.07133333384990692]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 3, 0, 2, 3, 0, 0, 6, 2, 9, 1, 9, 1, 6, 2, 8, 2, 4, 2, 1, 8, 0, 7, 4, 7, 9, 3, 4, 8, 3, 9, 0, 5, 0, 6, 5, 4, 9], [1, 1, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4, 1, 2, 1], [61, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 5, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 3, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 1, 1, 0, 1, 0, 56, 56, 38, 18, 7, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(beta, grad))))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.pow(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))))), grad))), alpha))))))), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.square(tf.math.add(beta, tf.math.pow(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.square(sigma))", "other_info": {"loss": [2.3021857738494873, 2.3024191856384277, 2.302736282348633, 2.302699327468872, 2.3034019470214844, 2.3030812740325928], "accuracy": [0.09060890227556229, 0.08981640636920929, 0.0882314071059227, 0.0936468094587326, 0.08651433140039444, 0.08400475233793259], "val_loss": [2.30015230178833, 2.300246477127075, 2.3003323078155518, 2.3004207611083984, 2.3005101680755615, 2.30062198638916], "val_accuracy": [0.03733333200216293, 0.03700000047683716, 0.036666665226221085, 0.035999998450279236, 0.03566666692495346, 0.03500000014901161]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 0, 2, 3, 0, 0, 6, 2, 4, 1, 9, 1, 6, 6, 8, 9, 4, 2], [1, 1, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [74, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3021504878997803, 2.3022942543029785, 2.302536725997925, 2.3024208545684814, 2.3030402660369873, 2.3025991916656494], "accuracy": [0.09060890227556229, 0.09034473448991776, 0.08849557489156723, 0.09391097724437714, 0.08730682730674744, 0.08532558381557465], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [8, 3, 0, 2, 3, 0, 0, 6, 2, 4, 1, 9, 0, 6, 6, 8, 9, 4, 2], [2, 2, 5, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [61, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [9, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 3, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [45, 9, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3021504878997803, 2.3022942543029785, 2.302536725997925, 2.3024208545684814, 2.3030402660369873, 2.3025991916656494], "accuracy": [0.09060890227556229, 0.09034473448991776, 0.08849557489156723, 0.09391097724437714, 0.08730682730674744, 0.08532558381557465], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [1, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 0, 2, 3, 0, 0, 3, 2, 4, 1, 0, 1, 9, 6, 8, 9, 4, 2], [1, 1, 3, 3, 1, 3, 2, 2, 1, 0, 5, 1, 4, 1, 4], [61, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 2, 2, 1, 1, 0, 27, 27, 18, 9, 2, 3, 2, 1, 1, 0, 11, 6, 5, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))), tf.math.add(beta, grad))), tf.math.divide_no_nan(grad, tf.math.sqrt(alpha)))), grad)))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(sigma, beta), tf.math.square(beta)))))", "other_info": {"loss": [2.3021504878997803, 2.3022942543029785, 2.302536725997925, 2.3024208545684814, 2.3030402660369873, 2.3025991916656494], "accuracy": [0.09060890227556229, 0.09034473448991776, 0.08849557489156723, 0.09391097724437714, 0.08730682730674744, 0.08532558381557465], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 0, 3, 9, 5, 0, 6, 2, 4, 1, 1, 1, 6, 6, 8, 9, 4, 2], [1, 3, 3, 1, 1, 3, 2, 1, 1, 0, 5, 1, 4, 1, 4], [74, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 5, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 2, 2, 1, 1, 1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.square(beta))", "other_info": {"loss": [2.3021504878997803, 2.3022942543029785, 2.302536725997925, 2.3024208545684814, 2.3030402660369873, 2.3025991916656494], "accuracy": [0.09060890227556229, 0.09034473448991776, 0.08849557489156723, 0.09391097724437714, 0.08730682730674744, 0.08532558381557465], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 3, 0, 3, 9, 5, 0, 6, 2, 4, 1, 1, 1, 6, 6, 8, 9, 4, 2], [1, 3, 3, 1, 1, 3, 2, 1, 1, 0, 5, 1, 4, 1, 4], [74, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [24, 9, 43, 71, 34]], "fitness": -0.04114285856485367, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 11, 6, 5, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(sigma, beta), tf.math.square(beta)))))", "other_info": {"loss": [2.3021504878997803, 2.3022942543029785, 2.302536725997925, 2.3024208545684814, 2.3030402660369873, 2.3025991916656494], "accuracy": [0.09060890227556229, 0.09034473448991776, 0.08849557489156723, 0.09391097724437714, 0.08730682730674744, 0.08532558381557465], "val_loss": [2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743, 2.300058603286743], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 6, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [6, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 0, 2, 3, 4, 0, 9, 2, 4, 6, 2, 8, 6, 6, 8, 9, 4, 2], [1, 3, 3, 1, 1, 3, 2, 0, 1, 0, 5, 1, 4, 1, 4], [74, 32, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [24, 9, 43, 71, 34]], "fitness": -0.03771428391337395, "mapping_values": [1, 1, 1, 0, 1, 1, 26, 26, 17, 9, 3, 3, 2, 1, 1, 0, 4, 2, 2, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3022541999816895, 2.302715539932251, 2.3033666610717773, 2.3036928176879883, 2.304779529571533, 2.304515838623047], "accuracy": [0.08994849026203156, 0.08981640636920929, 0.08836349099874496, 0.09047681838274002, 0.08281600475311279, 0.0816272646188736], "val_loss": [2.300291061401367, 2.3005306720733643, 2.3007702827453613, 2.3010246753692627, 2.301295280456543, 2.301574230194092], "val_accuracy": [0.03566666692495346, 0.032999999821186066, 0.029666665941476822, 0.027000000700354576, 0.025333333760499954, 0.02433333359658718]}}]