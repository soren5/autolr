[{"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7931428551673889, "mapping_values": [1, 30, 30, 23, 7, 4, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.negative(grad))))))))), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.258412269915509, 2.0558629782759454, 1.6208908204562502, 1.2706732579729954, 1.0922009884452997, 1.0052359507792756, 0.9366766088091703, 0.9101489121572862, 0.8595057671584347, 0.8404067069815607, 0.8056513435175201, 0.7827733590964707, 0.7623557216691902, 0.7562245836882716, 0.737963520383098, 0.7237644593052152, 0.7094471164666714, 0.7085004362841449, 0.697590294082356, 0.6947274638000118, 0.678293889138236, 0.6762941250743143, 0.6665329025988691, 0.6556457191520694, 0.6592113764892873, 0.6489827393808416, 0.645841550754597, 0.6389135232990161, 0.6243636154338054, 0.6295673938837381, 0.6227848365432503, 0.6128337231168595, 0.6146556583015815, 0.6013047255702605, 0.5988492620792749, 0.59383728649512, 0.5956836859421912, 0.6003660323392792, 0.5862354762550075, 0.5908718302800686, 0.5815209737858201, 0.5846957181895398, 0.5723041882132023, 0.5762009668532868, 0.5757664957098154, 0.5689832202242885, 0.5620343609886588, 0.5646014498713278, 0.5549344918857303, 0.5527964417078807], "accuracy": [0.19878484308719635, 0.39083343744277954, 0.48989564180374146, 0.5577862858772278, 0.616299033164978, 0.6495839357376099, 0.6664905548095703, 0.677189290523529, 0.6954167485237122, 0.6997754573822021, 0.7098137736320496, 0.7206445932388306, 0.7201162576675415, 0.7231541275978088, 0.7265883088111877, 0.7374191284179688, 0.7363624572753906, 0.739400327205658, 0.739400327205658, 0.7449478507041931, 0.7511557340621948, 0.7520803213119507, 0.7536653280258179, 0.7559106945991516, 0.752212405204773, 0.7576277852058411, 0.7672698497772217, 0.7658169269561768, 0.7734777331352234, 0.7680623531341553, 0.7651565074920654, 0.7703077793121338, 0.769911527633667, 0.7746664881706238, 0.7843085527420044, 0.7761194109916687, 0.7774402499198914, 0.7779685854911804, 0.7840443849563599, 0.7827235460281372, 0.7828556299209595, 0.7854973077774048, 0.7898560166358948, 0.7858935594558716, 0.7898560166358948, 0.7926297783851624, 0.7915731072425842, 0.793422281742096, 0.7917051911354065, 0.7923656105995178], "val_loss": [1.8508903639657157, 1.5079308918544225, 1.0453955786568778, 0.8230866193771362, 0.7182127067020961, 0.6931564978190831, 0.6629753283091954, 0.6201934133257184, 0.6062122242791312, 0.5727616718837193, 0.5652861254555839, 0.54360374382564, 0.5429331575121198, 0.5560014418193272, 0.5244031122752598, 0.5255947453635079, 0.5128100940159389, 0.500123313495091, 0.520092282976423, 0.5042060273034232, 0.49861892632075716, 0.48348101547786165, 0.5070279666355678, 0.47647316115243094, 0.47496908051627024, 0.47615958963121685, 0.47401807989392963, 0.4677687542779105, 0.4656777892793928, 0.4601145471845354, 0.46318760940006803, 0.4672767094203404, 0.45242494344711304, 0.4599207639694214, 0.4479883142880031, 0.4558431761605399, 0.44898591722760883, 0.44482251576014925, 0.4485975333622524, 0.44763623816626413, 0.4492315224238804, 0.44229737349918913, 0.43314792428697857, 0.4438837170600891, 0.4288491351263864, 0.43619916268757414, 0.4282395413943699, 0.430623071534293, 0.4273522581372942, 0.4312875526291983], "val_accuracy": [0.46133333444595337, 0.5703333616256714, 0.6396666765213013, 0.7013333439826965, 0.7163333296775818, 0.7026666402816772, 0.7096666693687439, 0.7379999756813049, 0.7446666955947876, 0.7573333382606506, 0.7543333172798157, 0.7736666798591614, 0.7536666393280029, 0.7476666569709778, 0.7833333611488342, 0.7689999938011169, 0.7833333611488342, 0.7889999747276306, 0.7703333497047424, 0.7910000085830688, 0.7886666655540466, 0.7943333387374878, 0.765999972820282, 0.7923333048820496, 0.8019999861717224, 0.7923333048820496, 0.7916666865348816, 0.7973333597183228, 0.8086666464805603, 0.809333324432373, 0.8029999732971191, 0.8029999732971191, 0.8130000233650208, 0.7973333597183228, 0.8133333325386047, 0.8086666464805603, 0.8090000152587891, 0.8136666417121887, 0.8043333292007446, 0.8116666674613953, 0.8130000233650208, 0.8133333325386047, 0.8230000138282776, 0.8199999928474426, 0.824999988079071, 0.8159999847412109, 0.8190000057220459, 0.8233333230018616, 0.8243333101272583, 0.8240000009536743]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [0, 2, 0, 0, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [90, 72, 73, 52, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7931428551673889, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.258412269915509, 2.0558629782759454, 1.6208908204562502, 1.2706732579729954, 1.0922009884452997, 1.0052359507792756, 0.9366766088091703, 0.9101489121572862, 0.8595057671584347, 0.8404067069815607, 0.8056513435175201, 0.7827733590964707, 0.7623557216691902, 0.7562245836882716, 0.737963520383098, 0.7237644593052152, 0.7094471164666714, 0.7085004362841449, 0.697590294082356, 0.6947274638000118, 0.678293889138236, 0.6762941250743143, 0.6665329025988691, 0.6556457191520694, 0.6592113764892873, 0.6489827393808416, 0.645841550754597, 0.6389135232990161, 0.6243636154338054, 0.6295673938837381, 0.6227848365432503, 0.6128337231168595, 0.6146556583015815, 0.6013047255702605, 0.5988492620792749, 0.59383728649512, 0.5956836859421912, 0.6003660323392792, 0.5862354762550075, 0.5908718302800686, 0.5815209737858201, 0.5846957181895398, 0.5723041882132023, 0.5762009668532868, 0.5757664957098154, 0.5689832202242885, 0.5620343609886588, 0.5646014498713278, 0.5549344918857303, 0.5527964417078807], "accuracy": [0.19878484308719635, 0.39083343744277954, 0.48989564180374146, 0.5577862858772278, 0.616299033164978, 0.6495839357376099, 0.6664905548095703, 0.677189290523529, 0.6954167485237122, 0.6997754573822021, 0.7098137736320496, 0.7206445932388306, 0.7201162576675415, 0.7231541275978088, 0.7265883088111877, 0.7374191284179688, 0.7363624572753906, 0.739400327205658, 0.739400327205658, 0.7449478507041931, 0.7511557340621948, 0.7520803213119507, 0.7536653280258179, 0.7559106945991516, 0.752212405204773, 0.7576277852058411, 0.7672698497772217, 0.7658169269561768, 0.7734777331352234, 0.7680623531341553, 0.7651565074920654, 0.7703077793121338, 0.769911527633667, 0.7746664881706238, 0.7843085527420044, 0.7761194109916687, 0.7774402499198914, 0.7779685854911804, 0.7840443849563599, 0.7827235460281372, 0.7828556299209595, 0.7854973077774048, 0.7898560166358948, 0.7858935594558716, 0.7898560166358948, 0.7926297783851624, 0.7915731072425842, 0.793422281742096, 0.7917051911354065, 0.7923656105995178], "val_loss": [1.8508903639657157, 1.5079308918544225, 1.0453955786568778, 0.8230866193771362, 0.7182127067020961, 0.6931564978190831, 0.6629753283091954, 0.6201934133257184, 0.6062122242791312, 0.5727616718837193, 0.5652861254555839, 0.54360374382564, 0.5429331575121198, 0.5560014418193272, 0.5244031122752598, 0.5255947453635079, 0.5128100940159389, 0.500123313495091, 0.520092282976423, 0.5042060273034232, 0.49861892632075716, 0.48348101547786165, 0.5070279666355678, 0.47647316115243094, 0.47496908051627024, 0.47615958963121685, 0.47401807989392963, 0.4677687542779105, 0.4656777892793928, 0.4601145471845354, 0.46318760940006803, 0.4672767094203404, 0.45242494344711304, 0.4599207639694214, 0.4479883142880031, 0.4558431761605399, 0.44898591722760883, 0.44482251576014925, 0.4485975333622524, 0.44763623816626413, 0.4492315224238804, 0.44229737349918913, 0.43314792428697857, 0.4438837170600891, 0.4288491351263864, 0.43619916268757414, 0.4282395413943699, 0.430623071534293, 0.4273522581372942, 0.4312875526291983], "val_accuracy": [0.46133333444595337, 0.5703333616256714, 0.6396666765213013, 0.7013333439826965, 0.7163333296775818, 0.7026666402816772, 0.7096666693687439, 0.7379999756813049, 0.7446666955947876, 0.7573333382606506, 0.7543333172798157, 0.7736666798591614, 0.7536666393280029, 0.7476666569709778, 0.7833333611488342, 0.7689999938011169, 0.7833333611488342, 0.7889999747276306, 0.7703333497047424, 0.7910000085830688, 0.7886666655540466, 0.7943333387374878, 0.765999972820282, 0.7923333048820496, 0.8019999861717224, 0.7923333048820496, 0.7916666865348816, 0.7973333597183228, 0.8086666464805603, 0.809333324432373, 0.8029999732971191, 0.8029999732971191, 0.8130000233650208, 0.7973333597183228, 0.8133333325386047, 0.8086666464805603, 0.8090000152587891, 0.8136666417121887, 0.8043333292007446, 0.8116666674613953, 0.8130000233650208, 0.8133333325386047, 0.8230000138282776, 0.8199999928474426, 0.824999988079071, 0.8159999847412109, 0.8190000057220459, 0.8233333230018616, 0.8243333101272583, 0.8240000009536743]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [0, 1, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [3, 41, 73, 59, 38, 45, 53, 52, 44], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 1, 3, 1, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7931428551673889, "mapping_values": [1, 30, 30, 23, 7, 7, 12, 12, 8, 4, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(tf.math.subtract(alpha, tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), grad)))))), tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), grad)))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.258412269915509, 2.0558629782759454, 1.6208908204562502, 1.2706732579729954, 1.0922009884452997, 1.0052359507792756, 0.9366766088091703, 0.9101489121572862, 0.8595057671584347, 0.8404067069815607, 0.8056513435175201, 0.7827733590964707, 0.7623557216691902, 0.7562245836882716, 0.737963520383098, 0.7237644593052152, 0.7094471164666714, 0.7085004362841449, 0.697590294082356, 0.6947274638000118, 0.678293889138236, 0.6762941250743143, 0.6665329025988691, 0.6556457191520694, 0.6592113764892873, 0.6489827393808416, 0.645841550754597, 0.6389135232990161, 0.6243636154338054, 0.6295673938837381, 0.6227848365432503, 0.6128337231168595, 0.6146556583015815, 0.6013047255702605, 0.5988492620792749, 0.59383728649512, 0.5956836859421912, 0.6003660323392792, 0.5862354762550075, 0.5908718302800686, 0.5815209737858201, 0.5846957181895398, 0.5723041882132023, 0.5762009668532868, 0.5757664957098154, 0.5689832202242885, 0.5620343609886588, 0.5646014498713278, 0.5549344918857303, 0.5527964417078807], "accuracy": [0.19878484308719635, 0.39083343744277954, 0.48989564180374146, 0.5577862858772278, 0.616299033164978, 0.6495839357376099, 0.6664905548095703, 0.677189290523529, 0.6954167485237122, 0.6997754573822021, 0.7098137736320496, 0.7206445932388306, 0.7201162576675415, 0.7231541275978088, 0.7265883088111877, 0.7374191284179688, 0.7363624572753906, 0.739400327205658, 0.739400327205658, 0.7449478507041931, 0.7511557340621948, 0.7520803213119507, 0.7536653280258179, 0.7559106945991516, 0.752212405204773, 0.7576277852058411, 0.7672698497772217, 0.7658169269561768, 0.7734777331352234, 0.7680623531341553, 0.7651565074920654, 0.7703077793121338, 0.769911527633667, 0.7746664881706238, 0.7843085527420044, 0.7761194109916687, 0.7774402499198914, 0.7779685854911804, 0.7840443849563599, 0.7827235460281372, 0.7828556299209595, 0.7854973077774048, 0.7898560166358948, 0.7858935594558716, 0.7898560166358948, 0.7926297783851624, 0.7915731072425842, 0.793422281742096, 0.7917051911354065, 0.7923656105995178], "val_loss": [1.8508903639657157, 1.5079308918544225, 1.0453955786568778, 0.8230866193771362, 0.7182127067020961, 0.6931564978190831, 0.6629753283091954, 0.6201934133257184, 0.6062122242791312, 0.5727616718837193, 0.5652861254555839, 0.54360374382564, 0.5429331575121198, 0.5560014418193272, 0.5244031122752598, 0.5255947453635079, 0.5128100940159389, 0.500123313495091, 0.520092282976423, 0.5042060273034232, 0.49861892632075716, 0.48348101547786165, 0.5070279666355678, 0.47647316115243094, 0.47496908051627024, 0.47615958963121685, 0.47401807989392963, 0.4677687542779105, 0.4656777892793928, 0.4601145471845354, 0.46318760940006803, 0.4672767094203404, 0.45242494344711304, 0.4599207639694214, 0.4479883142880031, 0.4558431761605399, 0.44898591722760883, 0.44482251576014925, 0.4485975333622524, 0.44763623816626413, 0.4492315224238804, 0.44229737349918913, 0.43314792428697857, 0.4438837170600891, 0.4288491351263864, 0.43619916268757414, 0.4282395413943699, 0.430623071534293, 0.4273522581372942, 0.4312875526291983], "val_accuracy": [0.46133333444595337, 0.5703333616256714, 0.6396666765213013, 0.7013333439826965, 0.7163333296775818, 0.7026666402816772, 0.7096666693687439, 0.7379999756813049, 0.7446666955947876, 0.7573333382606506, 0.7543333172798157, 0.7736666798591614, 0.7536666393280029, 0.7476666569709778, 0.7833333611488342, 0.7689999938011169, 0.7833333611488342, 0.7889999747276306, 0.7703333497047424, 0.7910000085830688, 0.7886666655540466, 0.7943333387374878, 0.765999972820282, 0.7923333048820496, 0.8019999861717224, 0.7923333048820496, 0.7916666865348816, 0.7973333597183228, 0.8086666464805603, 0.809333324432373, 0.8029999732971191, 0.8029999732971191, 0.8130000233650208, 0.7973333597183228, 0.8133333325386047, 0.8086666464805603, 0.8090000152587891, 0.8136666417121887, 0.8043333292007446, 0.8116666674613953, 0.8130000233650208, 0.8133333325386047, 0.8230000138282776, 0.8199999928474426, 0.824999988079071, 0.8159999847412109, 0.8190000057220459, 0.8233333230018616, 0.8243333101272583, 0.8240000009536743]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 8, 4, 1, 5, 8, 0, 4, 9, 2, 4, 3, 0, 6, 4, 5, 0, 8, 8, 2, 9, 2, 8, 8], [2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7931428551673889, "mapping_values": [1, 32, 32, 22, 10, 3, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))))), tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, grad)))), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.258412269915509, 2.0558629782759454, 1.6208908204562502, 1.2706732579729954, 1.0922009884452997, 1.0052359507792756, 0.9366766088091703, 0.9101489121572862, 0.8595057671584347, 0.8404067069815607, 0.8056513435175201, 0.7827733590964707, 0.7623557216691902, 0.7562245836882716, 0.737963520383098, 0.7237644593052152, 0.7094471164666714, 0.7085004362841449, 0.697590294082356, 0.6947274638000118, 0.678293889138236, 0.6762941250743143, 0.6665329025988691, 0.6556457191520694, 0.6592113764892873, 0.6489827393808416, 0.645841550754597, 0.6389135232990161, 0.6243636154338054, 0.6295673938837381, 0.6227848365432503, 0.6128337231168595, 0.6146556583015815, 0.6013047255702605, 0.5988492620792749, 0.59383728649512, 0.5956836859421912, 0.6003660323392792, 0.5862354762550075, 0.5908718302800686, 0.5815209737858201, 0.5846957181895398, 0.5723041882132023, 0.5762009668532868, 0.5757664957098154, 0.5689832202242885, 0.5620343609886588, 0.5646014498713278, 0.5549344918857303, 0.5527964417078807], "accuracy": [0.19878484308719635, 0.39083343744277954, 0.48989564180374146, 0.5577862858772278, 0.616299033164978, 0.6495839357376099, 0.6664905548095703, 0.677189290523529, 0.6954167485237122, 0.6997754573822021, 0.7098137736320496, 0.7206445932388306, 0.7201162576675415, 0.7231541275978088, 0.7265883088111877, 0.7374191284179688, 0.7363624572753906, 0.739400327205658, 0.739400327205658, 0.7449478507041931, 0.7511557340621948, 0.7520803213119507, 0.7536653280258179, 0.7559106945991516, 0.752212405204773, 0.7576277852058411, 0.7672698497772217, 0.7658169269561768, 0.7734777331352234, 0.7680623531341553, 0.7651565074920654, 0.7703077793121338, 0.769911527633667, 0.7746664881706238, 0.7843085527420044, 0.7761194109916687, 0.7774402499198914, 0.7779685854911804, 0.7840443849563599, 0.7827235460281372, 0.7828556299209595, 0.7854973077774048, 0.7898560166358948, 0.7858935594558716, 0.7898560166358948, 0.7926297783851624, 0.7915731072425842, 0.793422281742096, 0.7917051911354065, 0.7923656105995178], "val_loss": [1.8508903639657157, 1.5079308918544225, 1.0453955786568778, 0.8230866193771362, 0.7182127067020961, 0.6931564978190831, 0.6629753283091954, 0.6201934133257184, 0.6062122242791312, 0.5727616718837193, 0.5652861254555839, 0.54360374382564, 0.5429331575121198, 0.5560014418193272, 0.5244031122752598, 0.5255947453635079, 0.5128100940159389, 0.500123313495091, 0.520092282976423, 0.5042060273034232, 0.49861892632075716, 0.48348101547786165, 0.5070279666355678, 0.47647316115243094, 0.47496908051627024, 0.47615958963121685, 0.47401807989392963, 0.4677687542779105, 0.4656777892793928, 0.4601145471845354, 0.46318760940006803, 0.4672767094203404, 0.45242494344711304, 0.4599207639694214, 0.4479883142880031, 0.4558431761605399, 0.44898591722760883, 0.44482251576014925, 0.4485975333622524, 0.44763623816626413, 0.4492315224238804, 0.44229737349918913, 0.43314792428697857, 0.4438837170600891, 0.4288491351263864, 0.43619916268757414, 0.4282395413943699, 0.430623071534293, 0.4273522581372942, 0.4312875526291983], "val_accuracy": [0.46133333444595337, 0.5703333616256714, 0.6396666765213013, 0.7013333439826965, 0.7163333296775818, 0.7026666402816772, 0.7096666693687439, 0.7379999756813049, 0.7446666955947876, 0.7573333382606506, 0.7543333172798157, 0.7736666798591614, 0.7536666393280029, 0.7476666569709778, 0.7833333611488342, 0.7689999938011169, 0.7833333611488342, 0.7889999747276306, 0.7703333497047424, 0.7910000085830688, 0.7886666655540466, 0.7943333387374878, 0.765999972820282, 0.7923333048820496, 0.8019999861717224, 0.7923333048820496, 0.7916666865348816, 0.7973333597183228, 0.8086666464805603, 0.809333324432373, 0.8029999732971191, 0.8029999732971191, 0.8130000233650208, 0.7973333597183228, 0.8133333325386047, 0.8086666464805603, 0.8090000152587891, 0.8136666417121887, 0.8043333292007446, 0.8116666674613953, 0.8130000233650208, 0.8133333325386047, 0.8230000138282776, 0.8199999928474426, 0.824999988079071, 0.8159999847412109, 0.8190000057220459, 0.8233333230018616, 0.8243333101272583, 0.8240000009536743]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7931428551673889, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.258412269915509, 2.0558629782759454, 1.6208908204562502, 1.2706732579729954, 1.0922009884452997, 1.0052359507792756, 0.9366766088091703, 0.9101489121572862, 0.8595057671584347, 0.8404067069815607, 0.8056513435175201, 0.7827733590964707, 0.7623557216691902, 0.7562245836882716, 0.737963520383098, 0.7237644593052152, 0.7094471164666714, 0.7085004362841449, 0.697590294082356, 0.6947274638000118, 0.678293889138236, 0.6762941250743143, 0.6665329025988691, 0.6556457191520694, 0.6592113764892873, 0.6489827393808416, 0.645841550754597, 0.6389135232990161, 0.6243636154338054, 0.6295673938837381, 0.6227848365432503, 0.6128337231168595, 0.6146556583015815, 0.6013047255702605, 0.5988492620792749, 0.59383728649512, 0.5956836859421912, 0.6003660323392792, 0.5862354762550075, 0.5908718302800686, 0.5815209737858201, 0.5846957181895398, 0.5723041882132023, 0.5762009668532868, 0.5757664957098154, 0.5689832202242885, 0.5620343609886588, 0.5646014498713278, 0.5549344918857303, 0.5527964417078807], "accuracy": [0.19878484308719635, 0.39083343744277954, 0.48989564180374146, 0.5577862858772278, 0.616299033164978, 0.6495839357376099, 0.6664905548095703, 0.677189290523529, 0.6954167485237122, 0.6997754573822021, 0.7098137736320496, 0.7206445932388306, 0.7201162576675415, 0.7231541275978088, 0.7265883088111877, 0.7374191284179688, 0.7363624572753906, 0.739400327205658, 0.739400327205658, 0.7449478507041931, 0.7511557340621948, 0.7520803213119507, 0.7536653280258179, 0.7559106945991516, 0.752212405204773, 0.7576277852058411, 0.7672698497772217, 0.7658169269561768, 0.7734777331352234, 0.7680623531341553, 0.7651565074920654, 0.7703077793121338, 0.769911527633667, 0.7746664881706238, 0.7843085527420044, 0.7761194109916687, 0.7774402499198914, 0.7779685854911804, 0.7840443849563599, 0.7827235460281372, 0.7828556299209595, 0.7854973077774048, 0.7898560166358948, 0.7858935594558716, 0.7898560166358948, 0.7926297783851624, 0.7915731072425842, 0.793422281742096, 0.7917051911354065, 0.7923656105995178], "val_loss": [1.8508903639657157, 1.5079308918544225, 1.0453955786568778, 0.8230866193771362, 0.7182127067020961, 0.6931564978190831, 0.6629753283091954, 0.6201934133257184, 0.6062122242791312, 0.5727616718837193, 0.5652861254555839, 0.54360374382564, 0.5429331575121198, 0.5560014418193272, 0.5244031122752598, 0.5255947453635079, 0.5128100940159389, 0.500123313495091, 0.520092282976423, 0.5042060273034232, 0.49861892632075716, 0.48348101547786165, 0.5070279666355678, 0.47647316115243094, 0.47496908051627024, 0.47615958963121685, 0.47401807989392963, 0.4677687542779105, 0.4656777892793928, 0.4601145471845354, 0.46318760940006803, 0.4672767094203404, 0.45242494344711304, 0.4599207639694214, 0.4479883142880031, 0.4558431761605399, 0.44898591722760883, 0.44482251576014925, 0.4485975333622524, 0.44763623816626413, 0.4492315224238804, 0.44229737349918913, 0.43314792428697857, 0.4438837170600891, 0.4288491351263864, 0.43619916268757414, 0.4282395413943699, 0.430623071534293, 0.4273522581372942, 0.4312875526291983], "val_accuracy": [0.46133333444595337, 0.5703333616256714, 0.6396666765213013, 0.7013333439826965, 0.7163333296775818, 0.7026666402816772, 0.7096666693687439, 0.7379999756813049, 0.7446666955947876, 0.7573333382606506, 0.7543333172798157, 0.7736666798591614, 0.7536666393280029, 0.7476666569709778, 0.7833333611488342, 0.7689999938011169, 0.7833333611488342, 0.7889999747276306, 0.7703333497047424, 0.7910000085830688, 0.7886666655540466, 0.7943333387374878, 0.765999972820282, 0.7923333048820496, 0.8019999861717224, 0.7923333048820496, 0.7916666865348816, 0.7973333597183228, 0.8086666464805603, 0.809333324432373, 0.8029999732971191, 0.8029999732971191, 0.8130000233650208, 0.7973333597183228, 0.8133333325386047, 0.8086666464805603, 0.8090000152587891, 0.8136666417121887, 0.8043333292007446, 0.8116666674613953, 0.8130000233650208, 0.8133333325386047, 0.8230000138282776, 0.8199999928474426, 0.824999988079071, 0.8159999847412109, 0.8190000057220459, 0.8233333230018616, 0.8243333101272583, 0.8240000009536743]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 1, 4, 5, 9, 1, 8, 0, 0, 8, 0, 6, 3, 3, 9, 0, 5, 2, 1, 2, 2, 0, 2, 8, 4, 1, 2, 5, 1, 6, 0, 1, 0, 3, 0, 4, 6, 3, 1, 6, 0, 8, 9, 3, 6, 6, 0], [1, 2, 2, 1, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [54, 7, 41, 44, 70, 79, 53, 52, 44, 33, 73, 78, 72], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.5339999794960022, "mapping_values": [1, 14, 14, 9, 5, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(alpha, tf.math.pow(tf.math.square(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(alpha))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3590497160316883, 2.151139999660975, 2.233194514036399, 2.2924899958254183, 2.1142003875697655, 2.1212200083831485, 1.9708331194945519], "accuracy": [0.2366926372051239, 0.2677321434020996, 0.18333113193511963, 0.1368379294872284, 0.2359001487493515, 0.25782591104507446, 0.33786818385124207], "val_loss": [1.9277404376438685, 1.179955039705549, 1.9741122382027763, 1.8922147069658553, 1.3403255598885673, 1.8224265916006905, 1.2591287067958288], "val_accuracy": [0.16633333265781403, 0.5193333625793457, 0.09833333641290665, 0.18333333730697632, 0.4633333384990692, 0.29766666889190674, 0.41333332657814026]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 6, 0, 5, 1, 1, 8, 0, 0, 8, 2, 2, 3, 3, 0, 0, 5, 8, 2, 2, 2, 0, 0, 8, 4, 1, 2, 5, 1, 6, 0, 1, 0, 3, 0, 4, 6, 3, 1, 6, 0, 8, 9, 3, 6, 6, 0], [2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [54, 41, 41, 10, 70, 79, 53, 52, 44, 33, 73, 78, 72], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 5, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [97, 25, 50, 71, 34]], "fitness": -0.3788571357727051, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.1890100109232353, 2.2908061867644522, 4.559788160887156, 2.309591977572035, 2.304524008057231, 2.3034397998364406, 2.3029255790796106], "accuracy": [0.15982036292552948, 0.15731078386306763, 0.17619864642620087, 0.09826971590518951, 0.09694888442754745, 0.09615638852119446, 0.09311848133802414], "val_loss": [1.9876288686479842, 1.9481759071350098, 1.9839038848876953, 1.9762054170880998, 1.9743569919041224, 1.973719664982387, 1.9735873767307825], "val_accuracy": [0.09833333641290665, 0.10866666585206985, 0.09700000286102295, 0.09700000286102295, 0.10400000214576721, 0.10400000214576721, 0.09700000286102295]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 9, 2, 2, 4, 2, 0, 5, 8, 9, 2, 4, 6, 3, 2, 6, 9, 5, 0, 2, 0, 2, 1, 2, 8, 4, 3, 4, 6, 8, 1, 2, 1, 5, 1, 0, 5, 9, 3, 4, 8, 9, 0, 0, 9, 7, 4, 0, 3, 1, 5, 3, 1, 7], [0, 0, 0, 2, 1, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.33571428060531616, "mapping_values": [1, 14, 14, 10, 4, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.1904828951831474, 2.2565662606107937, 2.611319933081221, 2.254489204021036, 2.1465376211336937, 2.3070105087361896, 2.3040813695264926], "accuracy": [0.15995244681835175, 0.1706511676311493, 0.12032756209373474, 0.14132875204086304, 0.23180557787418365, 0.10038304328918457, 0.09721305221319199], "val_loss": [1.9877208300999232, 3.4267518860953197, 1.9745712280273438, 1.960712500980922, 1.9795782225472587, 1.974304131099156, 1.9734747069222587], "val_accuracy": [0.09833333641290665, 0.32633334398269653, 0.09833333641290665, 0.15133333206176758, 0.10000000149011612, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 8, 8, 2, 8, 2, 9, 0, 4, 4, 2, 9, 3, 8, 6, 9, 5, 8, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 73, 44, 8, 79, 53, 52, 44, 16, 82, 21, 5, 73], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [6, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [4, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [19, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, alpha), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 9, 2, 2, 4, 2, 0, 5, 8, 9, 2, 4, 6, 3, 2, 6, 9, 5, 0, 2, 0, 2, 1, 2, 8, 4, 3, 4, 6, 8, 1, 2, 1, 5, 1, 0, 5, 9, 3, 4, 8, 9, 0, 0, 9, 7, 4, 0, 3, 1, 5, 3, 1, 7], [1, 0, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [94, 41, 73, 44, 8, 57, 9, 53, 44, 40, 82, 21, 5, 73, 66], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [70, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [7, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [19, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0944393053650856, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 2, 8, 8, 2, 1, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [4, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 0, 2, 8, 0, 4, 9, 2, 9, 3, 9, 3, 8, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 18, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 1, 3, 1, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [20, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 23, 7, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.pow(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(alpha))), tf.math.add(alpha, tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad))))), grad)), tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(grad))))))))))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(beta, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [0, 2, 1, 2, 2, 2, 0, 0, 2, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 1, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.788563064344177, 7.8132691008618576, 19.520193561508105, 39.0909267390771, 67.19468144094466, 105.76623151822254], "accuracy": [0.08994849026203156, 0.10368511080741882, 0.09787346422672272, 0.0944393053650856, 0.10157178342342377, 0.09721305221319199], "val_loss": [3.215962682451521, 8.67691775730678, 18.570594787597656, 33.63251059395926, 54.746892656598774, 82.93691580636161], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [5, 3, 1, 0, 3, 2, 1, 8, 0, 4, 6, 2, 9, 3, 2, 2, 4, 5, 0, 2, 8, 2, 0, 3, 8, 0, 1, 9, 0, 4], [0, 0, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [94, 41, 73, 44, 8, 30, 9, 53, 72, 40, 82, 21, 5, 73, 66], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 1, 3, 1, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [57, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 46, 46, 30, 16, 10, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.sqrt(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.pow(alpha, tf.math.square(alpha)), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))))))), tf.math.sqrt(tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08281600475311279, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [5, 5, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 64, 73, 44, 8, 57, 9, 53, 44, 40, 82, 21, 5, 73, 66], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 1, 3, 1, 0, 2, 1, 3, 0, 0], [6, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 15, 5, 3, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.pow(grad, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(grad, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), grad)), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 3, 2, 2, 4, 2, 0, 5, 8, 9, 2, 4, 6, 3, 2, 6, 9, 5, 0, 2, 0, 2, 1, 2, 8, 4, 3, 4, 6, 8, 1, 2, 1, 5, 1, 0, 5, 9, 3, 4, 8, 9, 0, 0, 9, 7, 4, 0, 3, 1, 5, 3, 1, 7], [0, 0, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [94, 41, 73, 44, 8, 57, 9, 53, 44, 40, 82, 21, 5, 73, 66], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 6, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 37, 37, 23, 14, 10, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 6, 4, 2], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), grad)))), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10460969805717468, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 6, 8, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 41, 73, 44, 8, 57, 9, 53, 44, 40, 82, 21, 5, 73, 66], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 1, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 13, 5, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(beta, tf.math.subtract(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.303922067968963, 2.303226098376904, 2.30320111100133, 2.3031762218462744, 2.303394476184283, 2.3034210912366633, 2.3034157747952158, 2.303059377564478, 2.3032968262828746, 2.303213853153334], "accuracy": [0.09206181764602661, 0.09457138925790787, 0.09602430462837219, 0.09668471664190292, 0.09879804402589798, 0.09813763201236725, 0.09840179979801178, 0.09721305221319199, 0.09800554811954498, 0.0952318087220192], "val_loss": [1.9737045424325126, 1.9737609454563685, 1.9739397593906947, 1.973851203918457, 1.973719664982387, 1.9736667360578264, 1.973611899784633, 1.9738215718950545, 1.9737404414585658, 1.9737628528050013], "val_accuracy": [0.09966666996479034, 0.09833333641290665, 0.09700000286102295, 0.10000000149011612, 0.10400000214576721, 0.10233332961797714, 0.10233332961797714, 0.09833333641290665, 0.09966666996479034, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 1, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 2, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 1, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 3, 2, 8, 79, 86, 52, 44], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 19, 19, 13, 6, 2, 4, 4, 2, 2, 0, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha)))))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3030745398335375, 2.301311253462139, 2.3029074546699086, 2.301783662162925, 2.3032042854544885, 2.3023481042456586], "accuracy": [0.08809932321310043, 0.09470347315073013, 0.08506141602993011, 0.09602430462837219, 0.09470347315073013, 0.08968432247638702], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 2, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [3, 2, 2, 1, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 32, 32, 24, 8, 4, 12, 12, 8, 4, 4, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))))))), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(grad))))))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(grad, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3030745398335375, 2.301311253462139, 2.3029074546699086, 2.301783662162925, 2.3032042854544885, 2.3023481042456586], "accuracy": [0.08809932321310043, 0.09470347315073013, 0.08506141602993011, 0.09602430462837219, 0.09470347315073013, 0.08968432247638702], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 3, 1, 0, 5, 1, 1, 8, 0, 9, 6, 2, 3, 3, 2, 9, 4, 5, 0, 6, 8, 1, 0, 2, 8, 0], [2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 73, 59, 38, 45, 53, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [53, 25, 50, 71, 34]], "fitness": -0.03685714304447174, "mapping_values": [1, 16, 16, 11, 5, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.3036180668345785, 2.303159138435512, 2.3068577301988764, 2.307910407680672, 2.311983354591407, 2.314670100581802], "accuracy": [0.08730682730674744, 0.0940430611371994, 0.07753269374370575, 0.08519349992275238, 0.08241976052522659, 0.07700435817241669], "val_loss": [1.9717048236301966, 1.9730478014264787, 1.97482545035226, 1.9768125670296806, 1.9791795866830009, 1.9817027364458357], "val_accuracy": [0.03233333304524422, 0.02866666577756405, 0.028333334252238274, 0.02666666731238365, 0.02800000086426735, 0.03166666626930237]}}]