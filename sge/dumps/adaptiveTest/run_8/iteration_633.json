[{"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 8, 4, 9, 6, 0, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.7871428728103638, "mapping_values": [1, 1, 1, 1, 0, 1, 14, 14, 9, 5, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.negative(alpha), grad)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.366991419030723, 2.2977121739796265, 2.5667671590134167, 2.3048301923386787, 2.299963372116784, 2.3013697639826094, 2.293787696373823, 2.2187709982495, 1.9709143932264683, 2.0127602146601147, 1.6509701946329336, 1.7623203558109974, 1.6123807493249391, 1.2780126750807737, 1.200369721390489, 1.1963356245289924, 1.17433577915303, 0.9808174767876503, 0.9831530920597289, 0.8487088826464435, 0.7978803185801921, 0.7561914717217384, 0.7646387493007328, 0.7130482896066156, 0.7092365667710073, 0.6711082155867307, 0.6683354900418933, 0.6335935051871675, 0.6037036253555402, 0.6378831006453699, 0.6043919142778004, 0.5848660626352865, 0.5707192545742674, 0.5591612251018095, 0.5460982179487418, 0.5708930697958814, 0.5354653702530453], "accuracy": [0.15493330359458923, 0.11768590658903122, 0.16972659528255463, 0.10276053100824356, 0.10910051316022873, 0.15281997621059418, 0.11927089840173721, 0.17210407555103302, 0.32967904210090637, 0.35345396399497986, 0.4497424364089966, 0.4266279339790344, 0.46625280380249023, 0.5694096088409424, 0.5982036590576172, 0.5830141305923462, 0.6219785809516907, 0.6468101739883423, 0.639809787273407, 0.6824725866317749, 0.6973979473114014, 0.7162858247756958, 0.7189275026321411, 0.7257958054542542, 0.7354378700256348, 0.7423061728477478, 0.7429665923118591, 0.7633073329925537, 0.7755910754203796, 0.7689869403839111, 0.7755910754203796, 0.7824593782424927, 0.7931581139564514, 0.7905164361000061, 0.7967243194580078, 0.7829877138137817, 0.7952714562416077], "val_loss": [1.9756165913173132, 1.7898915154593331, 1.9772605895996094, 1.9729443958827428, 1.9523180552891322, 1.9697656631469727, 1.9482455934797014, 1.757523809160505, 1.7624677589961462, 1.371534722191947, 1.540909664971488, 1.6944280011313302, 0.9959055355616978, 0.8780237776892525, 0.9390426022665841, 1.1629467351096017, 0.6859246322086879, 0.8061220475605556, 0.64961690562112, 0.6220452104296003, 0.5426673889160156, 0.5448775632040841, 0.5263088600976127, 0.5441901002611432, 0.5086934396198818, 0.5134200028010777, 0.4686658723013742, 0.46052251543317524, 0.5226281711033413, 0.4611896702221462, 0.44697817734309603, 0.4573278938020979, 0.4297013708523342, 0.42640048265457153, 0.4412417411804199, 0.43544143438339233, 0.4581238968031747], "val_accuracy": [0.10000000149011612, 0.18833333253860474, 0.10233332961797714, 0.11599999666213989, 0.2409999966621399, 0.11366666853427887, 0.1456666737794876, 0.2840000092983246, 0.4869999885559082, 0.5143333077430725, 0.390666663646698, 0.3616666793823242, 0.6039999723434448, 0.6589999794960022, 0.6713333129882812, 0.6600000262260437, 0.6756666898727417, 0.6693333387374878, 0.7200000286102295, 0.7006666660308838, 0.7620000243186951, 0.7490000128746033, 0.7620000243186951, 0.7706666588783264, 0.7856666445732117, 0.7683333158493042, 0.8013333082199097, 0.8116666674613953, 0.7733333110809326, 0.8199999928474426, 0.8066666722297668, 0.8236666917800903, 0.8180000185966492, 0.8233333230018616, 0.8113333582878113, 0.8220000267028809, 0.8133333325386047]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [3, 6, 8, 4, 1, 1, 2, 4, 2, 6, 4, 2, 9, 3, 8, 6, 5, 4, 0, 2, 0, 2, 0, 0, 2, 4, 8, 3, 3, 0, 0, 2, 8, 1, 9, 9], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [5, 93, 56, 44, 79, 82, 53, 52, 79, 92, 42], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 1, 2, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 2, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.7871428728103638, "mapping_values": [1, 16, 16, 8, 8, 3, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(grad, grad))), tf.math.pow(grad, alpha)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(grad, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.366991419030723, 2.2977121739796265, 2.5667671590134167, 2.3048301923386787, 2.299963372116784, 2.3013697639826094, 2.293787696373823, 2.2187709982495, 1.9709143932264683, 2.0127602146601147, 1.6509701946329336, 1.7623203558109974, 1.6123807493249391, 1.2780126750807737, 1.200369721390489, 1.1963356245289924, 1.17433577915303, 0.9808174767876503, 0.9831530920597289, 0.8487088826464435, 0.7978803185801921, 0.7561914717217384, 0.7646387493007328, 0.7130482896066156, 0.7092365667710073, 0.6711082155867307, 0.6683354900418933, 0.6335935051871675, 0.6037036253555402, 0.6378831006453699, 0.6043919142778004, 0.5848660626352865, 0.5707192545742674, 0.5591612251018095, 0.5460982179487418, 0.5708930697958814, 0.5354653702530453], "accuracy": [0.15493330359458923, 0.11768590658903122, 0.16972659528255463, 0.10276053100824356, 0.10910051316022873, 0.15281997621059418, 0.11927089840173721, 0.17210407555103302, 0.32967904210090637, 0.35345396399497986, 0.4497424364089966, 0.4266279339790344, 0.46625280380249023, 0.5694096088409424, 0.5982036590576172, 0.5830141305923462, 0.6219785809516907, 0.6468101739883423, 0.639809787273407, 0.6824725866317749, 0.6973979473114014, 0.7162858247756958, 0.7189275026321411, 0.7257958054542542, 0.7354378700256348, 0.7423061728477478, 0.7429665923118591, 0.7633073329925537, 0.7755910754203796, 0.7689869403839111, 0.7755910754203796, 0.7824593782424927, 0.7931581139564514, 0.7905164361000061, 0.7967243194580078, 0.7829877138137817, 0.7952714562416077], "val_loss": [1.9756165913173132, 1.7898915154593331, 1.9772605895996094, 1.9729443958827428, 1.9523180552891322, 1.9697656631469727, 1.9482455934797014, 1.757523809160505, 1.7624677589961462, 1.371534722191947, 1.540909664971488, 1.6944280011313302, 0.9959055355616978, 0.8780237776892525, 0.9390426022665841, 1.1629467351096017, 0.6859246322086879, 0.8061220475605556, 0.64961690562112, 0.6220452104296003, 0.5426673889160156, 0.5448775632040841, 0.5263088600976127, 0.5441901002611432, 0.5086934396198818, 0.5134200028010777, 0.4686658723013742, 0.46052251543317524, 0.5226281711033413, 0.4611896702221462, 0.44697817734309603, 0.4573278938020979, 0.4297013708523342, 0.42640048265457153, 0.4412417411804199, 0.43544143438339233, 0.4581238968031747], "val_accuracy": [0.10000000149011612, 0.18833333253860474, 0.10233332961797714, 0.11599999666213989, 0.2409999966621399, 0.11366666853427887, 0.1456666737794876, 0.2840000092983246, 0.4869999885559082, 0.5143333077430725, 0.390666663646698, 0.3616666793823242, 0.6039999723434448, 0.6589999794960022, 0.6713333129882812, 0.6600000262260437, 0.6756666898727417, 0.6693333387374878, 0.7200000286102295, 0.7006666660308838, 0.7620000243186951, 0.7490000128746033, 0.7620000243186951, 0.7706666588783264, 0.7856666445732117, 0.7683333158493042, 0.8013333082199097, 0.8116666674613953, 0.7733333110809326, 0.8199999928474426, 0.8066666722297668, 0.8236666917800903, 0.8180000185966492, 0.8233333230018616, 0.8113333582878113, 0.8220000267028809, 0.8133333325386047]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 6, 2, 4, 1, 1, 2, 4, 2, 6, 4, 2, 9, 3, 8, 6, 5, 4, 0, 2, 2, 2, 0, 0, 2, 4, 8, 3, 3, 0, 0, 2, 8, 1, 9, 9], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 3, 8, 4, 3, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 3, 1, 3, 0, 2, 1, 3, 0, 0], [60, 52, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.7871428728103638, "mapping_values": [1, 1, 1, 0, 1, 1, 20, 20, 10, 10, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, alpha))))), tf.math.sqrt(tf.math.pow(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.subtract(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.366991419030723, 2.2977121739796265, 2.5667671590134167, 2.3048301923386787, 2.299963372116784, 2.3013697639826094, 2.293787696373823, 2.2187709982495, 1.9709143932264683, 2.0127602146601147, 1.6509701946329336, 1.7623203558109974, 1.6123807493249391, 1.2780126750807737, 1.200369721390489, 1.1963356245289924, 1.17433577915303, 0.9808174767876503, 0.9831530920597289, 0.8487088826464435, 0.7978803185801921, 0.7561914717217384, 0.7646387493007328, 0.7130482896066156, 0.7092365667710073, 0.6711082155867307, 0.6683354900418933, 0.6335935051871675, 0.6037036253555402, 0.6378831006453699, 0.6043919142778004, 0.5848660626352865, 0.5707192545742674, 0.5591612251018095, 0.5460982179487418, 0.5708930697958814, 0.5354653702530453], "accuracy": [0.15493330359458923, 0.11768590658903122, 0.16972659528255463, 0.10276053100824356, 0.10910051316022873, 0.15281997621059418, 0.11927089840173721, 0.17210407555103302, 0.32967904210090637, 0.35345396399497986, 0.4497424364089966, 0.4266279339790344, 0.46625280380249023, 0.5694096088409424, 0.5982036590576172, 0.5830141305923462, 0.6219785809516907, 0.6468101739883423, 0.639809787273407, 0.6824725866317749, 0.6973979473114014, 0.7162858247756958, 0.7189275026321411, 0.7257958054542542, 0.7354378700256348, 0.7423061728477478, 0.7429665923118591, 0.7633073329925537, 0.7755910754203796, 0.7689869403839111, 0.7755910754203796, 0.7824593782424927, 0.7931581139564514, 0.7905164361000061, 0.7967243194580078, 0.7829877138137817, 0.7952714562416077], "val_loss": [1.9756165913173132, 1.7898915154593331, 1.9772605895996094, 1.9729443958827428, 1.9523180552891322, 1.9697656631469727, 1.9482455934797014, 1.757523809160505, 1.7624677589961462, 1.371534722191947, 1.540909664971488, 1.6944280011313302, 0.9959055355616978, 0.8780237776892525, 0.9390426022665841, 1.1629467351096017, 0.6859246322086879, 0.8061220475605556, 0.64961690562112, 0.6220452104296003, 0.5426673889160156, 0.5448775632040841, 0.5263088600976127, 0.5441901002611432, 0.5086934396198818, 0.5134200028010777, 0.4686658723013742, 0.46052251543317524, 0.5226281711033413, 0.4611896702221462, 0.44697817734309603, 0.4573278938020979, 0.4297013708523342, 0.42640048265457153, 0.4412417411804199, 0.43544143438339233, 0.4581238968031747], "val_accuracy": [0.10000000149011612, 0.18833333253860474, 0.10233332961797714, 0.11599999666213989, 0.2409999966621399, 0.11366666853427887, 0.1456666737794876, 0.2840000092983246, 0.4869999885559082, 0.5143333077430725, 0.390666663646698, 0.3616666793823242, 0.6039999723434448, 0.6589999794960022, 0.6713333129882812, 0.6600000262260437, 0.6756666898727417, 0.6693333387374878, 0.7200000286102295, 0.7006666660308838, 0.7620000243186951, 0.7490000128746033, 0.7620000243186951, 0.7706666588783264, 0.7856666445732117, 0.7683333158493042, 0.8013333082199097, 0.8116666674613953, 0.7733333110809326, 0.8199999928474426, 0.8066666722297668, 0.8236666917800903, 0.8180000185966492, 0.8233333230018616, 0.8113333582878113, 0.8220000267028809, 0.8133333325386047]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 36, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.7871428728103638, "mapping_values": [1, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(grad), tf.math.negative(grad))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.366991419030723, 2.2977121739796265, 2.5667671590134167, 2.3048301923386787, 2.299963372116784, 2.3013697639826094, 2.293787696373823, 2.2187709982495, 1.9709143932264683, 2.0127602146601147, 1.6509701946329336, 1.7623203558109974, 1.6123807493249391, 1.2780126750807737, 1.200369721390489, 1.1963356245289924, 1.17433577915303, 0.9808174767876503, 0.9831530920597289, 0.8487088826464435, 0.7978803185801921, 0.7561914717217384, 0.7646387493007328, 0.7130482896066156, 0.7092365667710073, 0.6711082155867307, 0.6683354900418933, 0.6335935051871675, 0.6037036253555402, 0.6378831006453699, 0.6043919142778004, 0.5848660626352865, 0.5707192545742674, 0.5591612251018095, 0.5460982179487418, 0.5708930697958814, 0.5354653702530453], "accuracy": [0.15493330359458923, 0.11768590658903122, 0.16972659528255463, 0.10276053100824356, 0.10910051316022873, 0.15281997621059418, 0.11927089840173721, 0.17210407555103302, 0.32967904210090637, 0.35345396399497986, 0.4497424364089966, 0.4266279339790344, 0.46625280380249023, 0.5694096088409424, 0.5982036590576172, 0.5830141305923462, 0.6219785809516907, 0.6468101739883423, 0.639809787273407, 0.6824725866317749, 0.6973979473114014, 0.7162858247756958, 0.7189275026321411, 0.7257958054542542, 0.7354378700256348, 0.7423061728477478, 0.7429665923118591, 0.7633073329925537, 0.7755910754203796, 0.7689869403839111, 0.7755910754203796, 0.7824593782424927, 0.7931581139564514, 0.7905164361000061, 0.7967243194580078, 0.7829877138137817, 0.7952714562416077], "val_loss": [1.9756165913173132, 1.7898915154593331, 1.9772605895996094, 1.9729443958827428, 1.9523180552891322, 1.9697656631469727, 1.9482455934797014, 1.757523809160505, 1.7624677589961462, 1.371534722191947, 1.540909664971488, 1.6944280011313302, 0.9959055355616978, 0.8780237776892525, 0.9390426022665841, 1.1629467351096017, 0.6859246322086879, 0.8061220475605556, 0.64961690562112, 0.6220452104296003, 0.5426673889160156, 0.5448775632040841, 0.5263088600976127, 0.5441901002611432, 0.5086934396198818, 0.5134200028010777, 0.4686658723013742, 0.46052251543317524, 0.5226281711033413, 0.4611896702221462, 0.44697817734309603, 0.4573278938020979, 0.4297013708523342, 0.42640048265457153, 0.4412417411804199, 0.43544143438339233, 0.4581238968031747], "val_accuracy": [0.10000000149011612, 0.18833333253860474, 0.10233332961797714, 0.11599999666213989, 0.2409999966621399, 0.11366666853427887, 0.1456666737794876, 0.2840000092983246, 0.4869999885559082, 0.5143333077430725, 0.390666663646698, 0.3616666793823242, 0.6039999723434448, 0.6589999794960022, 0.6713333129882812, 0.6600000262260437, 0.6756666898727417, 0.6693333387374878, 0.7200000286102295, 0.7006666660308838, 0.7620000243186951, 0.7490000128746033, 0.7620000243186951, 0.7706666588783264, 0.7856666445732117, 0.7683333158493042, 0.8013333082199097, 0.8116666674613953, 0.7733333110809326, 0.8199999928474426, 0.8066666722297668, 0.8236666917800903, 0.8180000185966492, 0.8233333230018616, 0.8113333582878113, 0.8220000267028809, 0.8133333325386047]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 2, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 82, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.4568571448326111, "mapping_values": [1, 1, 1, 1, 0, 1, 20, 20, 11, 9, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha)))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.4860175845015555, 2.2418414400773607, 2.1593974461849608, 2.213745401205089, 2.086553247298358, 1.9045195447896308, 2.4424861148836245, 2.307091060929909, 2.3037144524341624, 2.3030536879228483, 2.30306950315839], "accuracy": [0.20155857503414154, 0.19574692845344543, 0.24118345975875854, 0.21820102632045746, 0.26337340474128723, 0.33258485794067383, 0.26376965641975403, 0.09628847241401672, 0.09747721254825592, 0.0944393053650856, 0.09840179979801178], "val_loss": [1.9625623566763741, 1.9617351804460799, 1.6241308620997839, 1.933464731488909, 1.7503268378121513, 1.0039406163351876, 1.9822282109941756, 1.9746875762939453, 1.9739554268973214, 1.9737667356218611, 1.973738670349121], "val_accuracy": [0.10400000214576721, 0.1770000010728836, 0.44866666197776794, 0.2639999985694885, 0.23533333837985992, 0.5653333067893982, 0.09733333438634872, 0.09733333438634872, 0.09700000286102295, 0.09700000286102295, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 71, 35, 44, 70, 79, 53, 52, 44], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [64, 2, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.11828571557998657, "mapping_values": [1, 1, 1, 0, 1, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302663432514159, 2.301648871931087, 2.3008216483922697, 2.2996905167750583, 2.3005944239921603, 2.300259420191843, 2.3012773070148334, 2.3012018832611196, 2.3018102627609225, 2.301851006987671, 2.3022596405922635, 2.30224582377741, 2.302396084260569, 2.302434598261166, 2.3025411521250057, 2.3025737453713124, 2.302539386674949], "accuracy": [0.08915598690509796, 0.08889182657003403, 0.10011887550354004, 0.10011887550354004, 0.10487385839223862, 0.10632677376270294, 0.09972262382507324, 0.10368511080741882, 0.1006472036242485, 0.1014397069811821, 0.10170386731624603, 0.10210011899471283, 0.10474177449941635, 0.10474177449941635, 0.09985470771789551, 0.10474177449941635, 0.10011887550354004], "val_loss": [1.970043318612235, 1.9700196129935128, 1.9704025813511439, 1.9710302352905273, 1.971752711704799, 1.9723306383405412, 1.9727466447012765, 1.973017760685512, 1.973219394683838, 1.9733975955418177, 1.973522458757673, 1.9735897609165736, 1.9736202103751046, 1.9736373765128, 1.973642076764788, 1.9736428941999162, 1.973642349243164], "val_accuracy": [0.054999999701976776, 0.0663333311676979, 0.08733333647251129, 0.0963333323597908, 0.10066666454076767, 0.10333333164453506, 0.09600000083446503, 0.09033333510160446, 0.09666666388511658, 0.0989999994635582, 0.11033333092927933, 0.1106666699051857, 0.10866666585206985, 0.10233332961797714, 0.10133333504199982, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 6, 2, 4, 1, 1, 2, 4, 2, 6, 4, 2, 9, 3, 8, 6, 5, 4, 0, 2, 2, 2, 0, 0, 2, 4, 8, 3, 3, 0, 0, 2, 8, 1, 9, 9], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [61, 93, 56, 44, 40, 82, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 8, 8, 0, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 3, 2, 1, 3, 0, 0], [37, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3028379485528734, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09179764986038208, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [61, 93, 56, 44, 40, 82, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 4, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 65, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 20, 20, 11, 9, 4, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha)))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09179764986038208, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [70, 93, 35, 73, 70, 79, 52, 52, 71, 31], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 3, 3, 8, 8, 2, 9, 0, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 20, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 12, 12, 8, 4, 2, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.negative(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09179764986038208, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [3, 5, 2, 4, 0, 2, 2, 1, 6, 1, 5, 1, 0, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 93, 35, 5, 70, 79, 15, 52, 44, 91], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 9, 8, 8, 4, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 2, 1, 3, 0, 0], [95, 17, 35, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 0, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [2.3028135615222727, 2.3025498828867783, 2.3025539581408165, 2.3025718796853107, 2.3027209975794714, 2.30317030402065, 2.3048362449144153], "accuracy": [0.09787346422672272, 0.10368511080741882, 0.1010434553027153, 0.09998679161071777, 0.10487385839223862, 0.10249637067317963, 0.09998679161071777], "val_loss": [1.9736451421465193, 1.9736365590776717, 1.9736532483782088, 1.973783084324428, 1.9740146909441267, 1.974846294948033, 1.977118628365653], "val_accuracy": [0.10000000149011612, 0.10400000214576721, 0.09966666996479034, 0.09966666996479034, 0.09833333641290665, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [1, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 45, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [7, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06709814071655273, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 6, 2, 4, 6, 1, 2, 4, 2, 6, 4, 2, 9, 3, 2, 4, 5, 4, 0, 2, 2, 2, 0, 0, 2, 4, 8, 3, 3, 0, 0, 2, 8, 1, 9, 9, 6, 6, 8, 6], [0, 0, 2, 2, 1, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 71, 35, 44, 70, 79, 53, 52, 44, 98], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 3, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [84, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 20, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 66, 66, 40, 26, 10, 13, 13, 8, 5, 3, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 86, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), grad), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha))), tf.math.add(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.square(grad), tf.math.pow(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(grad, tf.math.negative(tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha))))))), alpha)), grad)), tf.math.add(alpha, grad))), alpha)), tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad))))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028379485528734, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09179764986038208, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 93, 35, 73, 70, 79, 52, 52, 71, 31], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 8, 3, 3, 3, 4, 3, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 20, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 20, 20, 10, 10, 4, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), tf.math.subtract(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3028379485528734, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09179764986038208, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 6, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 38, 38, 23, 15, 10, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, grad), grad))), tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)))))), alpha), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(alpha, grad))))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08215559273958206, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 17, 17, 10, 7, 3, 3, 1, 1, 0, 0, 3, 2, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [44429962.529060185, 854665715.8272355, 3975694861.119535, 10992538350.924316, 23619035203.085457, 44115699636.52886], "accuracy": [0.0952318087220192, 0.10249637067317963, 0.10791176557540894, 0.10434553027153015, 0.10434553027153015, 0.1010434553027153], "val_loss": [171414368.0, 1370069906.2857144, 4622598729.142858, 10955631177.142857, 21395662555.42857, 36969699035.42857], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 6, 2, 4, 1, 1, 2, 4, 2, 6, 4, 2, 9, 3, 8, 6, 5, 4, 0, 2, 2, 2, 0, 0, 2, 4, 8, 3, 3, 0, 0, 2, 8, 1, 9, 9], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [61, 93, 56, 44, 40, 82, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06538105756044388, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [52, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [19, 25, 50, 71, 34]], "fitness": -0.09942857176065445, "mapping_values": [1, 1, 1, 1, 0, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3045083810120777, 2.30857475297389, 2.3138686042372987, 2.3211953827670664, 2.3396915342388622, 2.3642318266068845, 2.40111660484971, 2.4354009372588745, 2.472035203832189, 2.5474952331009386, 2.603301198428034, 2.6698031906973902, 2.754361179321827, 2.8737791257212586, 2.9723611998441526, 3.096191599825354, 3.224859224035283, 3.3672008286409247, 3.5324820677019493], "accuracy": [0.08677849918603897, 0.08453308790922165, 0.09417514503002167, 0.0948355570435524, 0.09576013684272766, 0.09734513610601425, 0.09457138925790787, 0.09694888442754745, 0.1014397069811821, 0.0956280529499054, 0.09417514503002167, 0.09655263274908066, 0.09391097724437714, 0.09760929644107819, 0.09655263274908066, 0.09998679161071777, 0.10130762308835983, 0.10051512718200684, 0.10342095047235489], "val_loss": [1.9726716450282507, 1.9751757213047572, 1.9778764588492257, 1.9824674470084054, 1.9905658449445451, 2.0021963800702776, 2.0173801694597517, 2.036497047969273, 2.059983117239816, 2.088287421635219, 2.1218835966927663, 2.161238738468715, 2.2067738260541643, 2.258882590702602, 2.317956175122942, 2.384335790361677, 2.4582901000976562, 2.540052890777588, 2.6298327445983887], "val_accuracy": [0.02266666665673256, 0.038333334028720856, 0.06966666877269745, 0.09133332967758179, 0.0963333323597908, 0.0963333323597908, 0.09700000286102295, 0.09799999743700027, 0.0989999994635582, 0.09933333098888397, 0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 8, 3, 0, 2, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.07314285635948181, "mapping_values": [1, 1, 1, 0, 1, 1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3029803789176837, 2.30242627694575, 2.3015836690316474, 2.300298356235208, 2.301305605325685, 2.3004753956185704, 2.301691855799804, 2.300034989014498, 2.300398371616737, 2.301881899497985, 2.3012152250338036, 2.299983773548306, 2.2997612607099627, 2.3015377306431164, 2.300076692426493, 2.300696156862909, 2.299625081440335, 2.3000636650287496, 2.300352745745176, 2.2998048216202918, 2.3006699864323648, 2.2992736972664733, 2.3015457425276837, 2.299833908592469, 2.2998258258215962, 2.299207598226827, 2.300032369370285, 2.299125676110373, 2.2990541390739083, 2.299606161000407, 2.299665931225012, 2.2991981181990058], "accuracy": [0.08757099509239197, 0.0878351628780365, 0.09377889335155487, 0.09853387624025345, 0.09377889335155487, 0.09774138033390045, 0.09377889335155487, 0.09826971590518951, 0.09536388516426086, 0.09338264167308807, 0.09192973375320435, 0.09932637959718704, 0.09589222073554993, 0.09615638852119446, 0.09760929644107819, 0.09272222965955734, 0.10342095047235489, 0.09721305221319199, 0.09800554811954498, 0.09628847241401672, 0.08994849026203156, 0.10170386731624603, 0.09166556596755981, 0.10038304328918457, 0.09549596905708313, 0.09774138033390045, 0.10117553919553757, 0.09800554811954498, 0.10091137140989304, 0.10196803510189056, 0.10210011899471283, 0.09998679161071777], "val_loss": [1.970306464603969, 1.970076220376151, 1.9698272432599748, 1.9696974754333496, 1.9695050375802177, 1.9693924358912878, 1.969278403690883, 1.9691715921674455, 1.9690916197640556, 1.9690045629228865, 1.9689538819449288, 1.9689749308994837, 1.9690004757472448, 1.9690052441188268, 1.969071524483817, 1.9690956388201033, 1.9691168921334403, 1.9691242490495955, 1.9691175052097865, 1.9691032000950404, 1.9690601485116142, 1.9690606934683663, 1.9690164838518416, 1.9690194129943848, 1.9690043585641044, 1.969010284968785, 1.9690252031598772, 1.9690502030508858, 1.9690767696925573, 1.9690962518964494, 1.9691194125584193, 1.9692012241908483], "val_accuracy": [0.0430000014603138, 0.044333335012197495, 0.04699999839067459, 0.04866666719317436, 0.05000000074505806, 0.05299999937415123, 0.05533333495259285, 0.055666666477918625, 0.057999998331069946, 0.059333331882953644, 0.06199999898672104, 0.061000000685453415, 0.06199999898672104, 0.06400000303983688, 0.06333333253860474, 0.06433333456516266, 0.06700000166893005, 0.06933332979679108, 0.0716666653752327, 0.07266666740179062, 0.07466666400432587, 0.07633333653211594, 0.07566666603088379, 0.07766667008399963, 0.07699999958276749, 0.07800000160932541, 0.07833333313465118, 0.07733333110809326, 0.07699999958276749, 0.07533333450555801, 0.07500000298023224, 0.07500000298023224]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [9, 2, 2, 5, 5, 3, 2, 6, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 2, 2, 8, 2, 6, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [1, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [93, 93, 35, 73, 70, 79, 52, 52, 71, 31], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 2, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 3, 2, 1, 3, 0, 0], [95, 17, 35, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), alpha)))), tf.math.add(beta, tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, grad)))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30313506940132, 2.3028842885779857, 2.30233294780244, 2.30114119063279, 2.3024904246437963, 2.3017721816674985], "accuracy": [0.0870426595211029, 0.0866464152932167, 0.09219389408826828, 0.09615638852119446, 0.09179764986038208, 0.09549596905708313], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 6, 2, 4, 1, 1, 2, 4, 2, 6, 4, 2, 9, 3, 8, 6, 5, 4, 0, 2, 2, 2, 0, 0, 2, 4, 8, 3, 3, 0, 0, 2, 8, 1, 9, 9], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [17, 93, 56, 44, 40, 82, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 1, 3, 2, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 82, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.30313506940132, 2.3028842885779857, 2.30233294780244, 2.30114119063279, 2.3024904246437963, 2.3017721816674985], "accuracy": [0.0870426595211029, 0.0866464152932167, 0.09219389408826828, 0.09615638852119446, 0.09179764986038208, 0.09549596905708313], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]