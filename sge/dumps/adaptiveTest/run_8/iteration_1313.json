[{"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [42, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 3, 0, 8, 4, 2, 3, 6, 9, 8, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.8305714130401611, "mapping_values": [1, 3, 3, 1, 2, 1, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, tf.math.multiply(beta, tf.math.divide_no_nan(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), grad))))))))), tf.math.add(beta, alpha))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.125814199447632, 2.111997127532959, 1.9800156354904175, 1.3362895250320435, 1.0067006349563599, 0.8156642317771912, 0.7820228338241577, 0.7152258157730103, 0.6601043343544006, 0.7247966527938843, 0.6034115552902222, 0.6290603876113892, 0.6038809418678284, 0.5799803137779236, 0.5732525587081909, 0.5671494007110596, 0.5412609577178955, 0.5390686392784119, 0.5505223870277405, 0.5218307971954346, 0.5046296715736389, 0.49084529280662537, 0.47547420859336853, 0.5162544250488281, 0.4790668189525604, 0.48740917444229126, 0.469417542219162, 0.4489588141441345, 0.44639360904693604, 0.44322913885116577, 0.4365362823009491, 0.44700291752815247, 0.4426071345806122, 0.4377151429653168, 0.41493943333625793], "accuracy": [0.2845066785812378, 0.3082816004753113, 0.3389248549938202, 0.5211992859840393, 0.6240919232368469, 0.694360077381134, 0.707040011882782, 0.7309470176696777, 0.7537974119186401, 0.720380425453186, 0.7695152759552002, 0.7586844563484192, 0.7689869403839111, 0.7709681391716003, 0.7819310426712036, 0.7844406366348267, 0.7905164361000061, 0.7946110367774963, 0.7955356240272522, 0.7985734939575195, 0.8096684813499451, 0.8142913579940796, 0.8210275769233704, 0.8029322624206543, 0.8162726163864136, 0.8152159452438354, 0.8255184292793274, 0.8285563588142395, 0.8317263126373291, 0.8301413059234619, 0.8362171649932861, 0.8343679904937744, 0.8267071843147278, 0.8334434032440186, 0.8436138033866882], "val_loss": [2.2397994995117188, 2.139543056488037, 1.347532033920288, 1.0735771656036377, 0.8839694261550903, 0.6876227855682373, 0.6737762093544006, 0.6214435696601868, 0.6705381870269775, 0.5742361545562744, 0.6814715266227722, 0.5767931938171387, 0.5571457743644714, 0.5313459634780884, 0.5679700970649719, 0.5307215452194214, 0.5287756323814392, 0.5700913667678833, 0.5079686641693115, 0.5068384408950806, 0.4783959984779358, 0.47149068117141724, 0.465168297290802, 0.46814900636672974, 0.46372783184051514, 0.44759541749954224, 0.4632275700569153, 0.4389091730117798, 0.49943050742149353, 0.4326227903366089, 0.45018795132637024, 0.49071550369262695, 0.47475382685661316, 0.44089168310165405, 0.44516828656196594], "val_accuracy": [0.28600001335144043, 0.382666677236557, 0.5233333110809326, 0.6446666717529297, 0.6573333144187927, 0.7306666374206543, 0.7476666569709778, 0.7603333592414856, 0.7260000109672546, 0.7746666669845581, 0.7106666564941406, 0.7723333239555359, 0.7696666717529297, 0.7953333258628845, 0.7763333320617676, 0.7906666398048401, 0.800000011920929, 0.7940000295639038, 0.8019999861717224, 0.8096666932106018, 0.8146666884422302, 0.8176666498184204, 0.8286666870117188, 0.8246666789054871, 0.8299999833106995, 0.8320000171661377, 0.8223333358764648, 0.8376666903495789, 0.8009999990463257, 0.843666672706604, 0.8386666774749756, 0.812666654586792, 0.8266666531562805, 0.8336666822433472, 0.8323333263397217]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [35, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 0, 8, 4, 2, 3, 6, 9, 8, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [34, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.8291428685188293, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 9, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, tf.math.multiply(beta, tf.math.divide_no_nan(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), grad))))))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.125437021255493, 2.101473569869995, 2.094212055206299, 1.6111929416656494, 1.1309854984283447, 0.9157288670539856, 0.7363356351852417, 0.6719375848770142, 0.6780155301094055, 0.6391436457633972, 0.6066051125526428, 0.603797197341919, 0.6018230319023132, 0.5817433595657349, 0.5514593720436096, 0.552493691444397, 0.5403124094009399, 0.5308604836463928, 0.542231023311615, 0.5116310715675354, 0.4983130395412445, 0.49199923872947693, 0.4939274191856384, 0.49745848774909973, 0.47199925780296326, 0.48633742332458496, 0.46922892332077026, 0.44761380553245544, 0.45984119176864624, 0.45610177516937256, 0.44201236963272095], "accuracy": [0.2843745946884155, 0.31184783577919006, 0.29401662945747375, 0.42649585008621216, 0.6008453369140625, 0.6571126580238342, 0.7170783281326294, 0.741909921169281, 0.7437590956687927, 0.7567031979560852, 0.7695152759552002, 0.7733456492424011, 0.7685906887054443, 0.7755910754203796, 0.787082314491272, 0.7823272943496704, 0.7903843522071838, 0.7938185334205627, 0.7972526550292969, 0.8076872229576111, 0.8062343001365662, 0.8121780753135681, 0.8095363974571228, 0.8132346868515015, 0.819442629814148, 0.8129705190658569, 0.824329674243927, 0.8304054737091064, 0.8300092220306396, 0.8297450542449951, 0.828292191028595], "val_loss": [2.239807367324829, 2.1092913150787354, 1.5315485000610352, 1.345874547958374, 0.9534440040588379, 0.6544666886329651, 0.6234211921691895, 0.6814929246902466, 0.6370668411254883, 0.5908771753311157, 0.5479099154472351, 0.5357015132904053, 0.5627407431602478, 0.5211370587348938, 0.5640628337860107, 0.5379489660263062, 0.4994332790374756, 0.5728688836097717, 0.5023244023323059, 0.498308926820755, 0.4689916968345642, 0.46727490425109863, 0.4776027798652649, 0.4816555678844452, 0.4732988178730011, 0.4435291290283203, 0.4570693373680115, 0.45460987091064453, 0.47980567812919617, 0.46320289373397827, 0.45701929926872253], "val_accuracy": [0.28833332657814026, 0.40166667103767395, 0.4350000023841858, 0.5423333048820496, 0.6039999723434448, 0.7429999709129333, 0.7616666555404663, 0.7250000238418579, 0.7303333282470703, 0.7583333253860474, 0.7923333048820496, 0.7963333129882812, 0.7639999985694885, 0.8009999990463257, 0.7723333239555359, 0.7910000085830688, 0.8096666932106018, 0.7900000214576721, 0.8046666383743286, 0.809333324432373, 0.824999988079071, 0.8209999799728394, 0.8146666884422302, 0.8223333358764648, 0.8209999799728394, 0.8336666822433472, 0.831333339214325, 0.8316666483879089, 0.8149999976158142, 0.8203333616256714, 0.8289999961853027]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 1, 5, 2, 6, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 75, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 8, 1, 6, 4, 4, 2, 1, 0, 8, 4, 8, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 27, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.8291428685188293, "mapping_values": [1, 1, 1, 1, 0, 1, 21, 21, 13, 8, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))))), tf.math.sqrt(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1257691383361816, 2.1060242652893066, 1.8613090515136719, 1.2490363121032715, 0.947783350944519, 0.8562424182891846, 0.7912670969963074, 0.7021380066871643, 0.6972508430480957, 0.6774827241897583, 0.621795654296875, 0.6214206218719482, 0.6111693978309631, 0.5856738686561584, 0.5811230540275574, 0.5585156679153442, 0.5489462018013, 0.5337003469467163, 0.563706636428833, 0.5166861414909363, 0.5032171607017517, 0.4917522370815277, 0.48873308300971985, 0.5022525787353516, 0.48286134004592896, 0.48458096385002136, 0.46583420038223267, 0.4519226849079132, 0.4555172026157379, 0.4540100693702698, 0.4247256815433502, 0.4491058588027954, 0.43698105216026306, 0.45751795172691345, 0.4118441045284271, 0.40741392970085144], "accuracy": [0.2845066785812378, 0.30722492933273315, 0.3641526997089386, 0.5477479696273804, 0.6489235162734985, 0.6807554960250854, 0.6999075412750244, 0.7318716049194336, 0.7416457533836365, 0.7359662055969238, 0.7600052952766418, 0.7607977986335754, 0.767930269241333, 0.7753269076347351, 0.7784969210624695, 0.7862898111343384, 0.7869502305984497, 0.7960638999938965, 0.7877426743507385, 0.8047813773155212, 0.8079513907432556, 0.8171972036361694, 0.8123101592063904, 0.8075551390647888, 0.8131026029586792, 0.8133667707443237, 0.82683926820755, 0.8289526104927063, 0.8277638554573059, 0.8256505131721497, 0.8374059200286865, 0.8318583965301514, 0.8329150676727295, 0.822348415851593, 0.8446704745292664, 0.8453308939933777], "val_loss": [2.240419387817383, 2.1404976844787598, 1.222396969795227, 0.8058317303657532, 0.8986698985099792, 0.7707566618919373, 0.6526573300361633, 0.6878160834312439, 0.6545208096504211, 0.6137629151344299, 0.5986497402191162, 0.567378580570221, 0.5551968812942505, 0.5244315266609192, 0.5258579254150391, 0.5404655933380127, 0.5024514198303223, 0.5822970867156982, 0.5016123652458191, 0.4925461709499359, 0.47386065125465393, 0.498882532119751, 0.47464075684547424, 0.5174471735954285, 0.46219369769096375, 0.44034406542778015, 0.4613651633262634, 0.45401236414909363, 0.5190427303314209, 0.436180979013443, 0.44397908449172974, 0.4823743402957916, 0.49045559763908386, 0.4329966902732849, 0.45611751079559326, 0.4360557496547699], "val_accuracy": [0.2849999964237213, 0.4323333203792572, 0.5286666750907898, 0.7139999866485596, 0.6353333592414856, 0.6980000138282776, 0.7493333220481873, 0.7256666421890259, 0.7279999852180481, 0.746999979019165, 0.7703333497047424, 0.7806666493415833, 0.777999997138977, 0.7993333339691162, 0.7946666479110718, 0.778333306312561, 0.809333324432373, 0.7803333401679993, 0.800000011920929, 0.8133333325386047, 0.8190000057220459, 0.8009999990463257, 0.8220000267028809, 0.8063333630561829, 0.8259999752044678, 0.8349999785423279, 0.8270000219345093, 0.8326666951179504, 0.796999990940094, 0.8416666388511658, 0.8420000076293945, 0.8180000185966492, 0.812666654586792, 0.8413333296775818, 0.8276666402816772, 0.8373333215713501]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 9, 6, 4, 4, 2, 1, 0, 8, 4, 8, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 27, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [7, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.8254285454750061, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1254804134368896, 2.1067280769348145, 2.081235647201538, 1.591764211654663, 1.137535810470581, 0.8296715617179871, 0.7085936665534973, 0.6992060542106628, 0.6695083975791931, 0.6433076858520508, 0.591729462146759, 0.5970944166183472, 0.5843053460121155, 0.5675235390663147, 0.5859448909759521, 0.5482040047645569, 0.5404696464538574, 0.5251300930976868, 0.5290833711624146, 0.5196099877357483, 0.4944346845149994, 0.4817679524421692, 0.4827902615070343, 0.49337729811668396, 0.47928690910339355, 0.46579790115356445, 0.461422324180603, 0.44651174545288086, 0.4474754333496094, 0.4456736743450165, 0.4527483582496643, 0.44107088446617126, 0.4390450417995453], "accuracy": [0.2843745946884155, 0.31197991967201233, 0.29943203926086426, 0.4361378848552704, 0.5845991373062134, 0.683000922203064, 0.7338528633117676, 0.7304186820983887, 0.7469290494918823, 0.7530049085617065, 0.7771760821342468, 0.7777044177055359, 0.7802139520645142, 0.7812706232070923, 0.7751948237419128, 0.7869502305984497, 0.796328067779541, 0.8029322624206543, 0.8033285140991211, 0.8014793395996094, 0.8107251524925232, 0.8189142942428589, 0.8166688680648804, 0.8131026029586792, 0.8175934553146362, 0.8181217908859253, 0.8259146809577942, 0.8321225643157959, 0.8308017253875732, 0.8334434032440186, 0.8253863453865051, 0.8313300609588623, 0.8315942287445068], "val_loss": [2.2395761013031006, 2.115891218185425, 1.512926459312439, 1.1217423677444458, 0.7757766842842102, 0.6462053060531616, 0.6341527700424194, 0.6423273086547852, 0.593176007270813, 0.5745949745178223, 0.6044495701789856, 0.5322989821434021, 0.5743688344955444, 0.5500436425209045, 0.5275659561157227, 0.5042349696159363, 0.5318871140480042, 0.5514571070671082, 0.5103178024291992, 0.49529337882995605, 0.4661886692047119, 0.4681209623813629, 0.457731693983078, 0.48292577266693115, 0.45451119542121887, 0.44371744990348816, 0.4704955220222473, 0.4292220175266266, 0.45812109112739563, 0.49914491176605225, 0.4521617293357849, 0.4494285583496094, 0.47196683287620544], "val_accuracy": [0.289000004529953, 0.40400001406669617, 0.4273333251476288, 0.5789999961853027, 0.6909999847412109, 0.7490000128746033, 0.753333330154419, 0.7473333477973938, 0.7413333058357239, 0.7706666588783264, 0.7710000276565552, 0.7886666655540466, 0.7563333511352539, 0.7913333177566528, 0.7923333048820496, 0.8069999814033508, 0.7956666946411133, 0.7979999780654907, 0.7953333258628845, 0.8113333582878113, 0.8273333311080933, 0.8216666579246521, 0.8246666789054871, 0.8159999847412109, 0.8273333311080933, 0.8309999704360962, 0.8176666498184204, 0.8453333377838135, 0.8286666870117188, 0.8009999990463257, 0.8346666693687439, 0.8349999785423279, 0.8236666917800903]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 9, 2, 4, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [23, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 8, 2, 2, 4, 1, 1, 8, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 1, 0, 1, 0, 3, 3, 3, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [34, 4, 38, 61, 98, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.8234285712242126, "mapping_values": [1, 5, 5, 3, 2, 2, 28, 28, 18, 10, 5, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(grad, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), alpha)), tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1255595684051514, 2.1051034927368164, 2.0975019931793213, 1.701897144317627, 1.0335252285003662, 0.8584975004196167, 0.7456260919570923, 0.6827650666236877, 0.6909122467041016, 0.6344055533409119, 0.6029175519943237, 0.6418616771697998, 0.5921793580055237, 0.5796375274658203, 0.5854980945587158, 0.5418254137039185, 0.5562909841537476, 0.5256665945053101, 0.5457696914672852, 0.5057690143585205, 0.5026532411575317, 0.48936739563941956, 0.4809337556362152, 0.4933681786060333, 0.47902700304985046, 0.47869935631752014, 0.4678187668323517, 0.45037370920181274, 0.44412916898727417, 0.45624732971191406, 0.4245542883872986, 0.4400060474872589, 0.43829211592674255, 0.4552949070930481, 0.4050431549549103, 0.40777847170829773, 0.42408373951911926, 0.4230627417564392, 0.41431114077568054, 0.3957221508026123, 0.39733991026878357, 0.3776070773601532, 0.3868083655834198, 0.3810805678367615], "accuracy": [0.2843745946884155, 0.31343284249305725, 0.2922995686531067, 0.4119667112827301, 0.6106194853782654, 0.6800950765609741, 0.7147008180618286, 0.7413815855979919, 0.7428345084190369, 0.7627789974212646, 0.7730814814567566, 0.759080708026886, 0.7784969210624695, 0.77677983045578, 0.7717606425285339, 0.7947431206703186, 0.7901201844215393, 0.7992339134216309, 0.791969358921051, 0.8082155585289001, 0.8108572363853455, 0.8112534880638123, 0.817989706993103, 0.8112534880638123, 0.8182538747787476, 0.8158763647079468, 0.8253863453865051, 0.8284242749214172, 0.8334434032440186, 0.8260467648506165, 0.8407079577445984, 0.8364813327789307, 0.8315942287445068, 0.822348415851593, 0.8475762605667114, 0.8488970994949341, 0.8391229510307312, 0.8396512866020203, 0.8409721255302429, 0.8533879518508911, 0.8473120927810669, 0.8565579056739807, 0.8524633646011353, 0.8561616539955139], "val_loss": [2.2394232749938965, 2.10864520072937, 1.5690574645996094, 1.0179438591003418, 0.8801369071006775, 0.668140709400177, 0.6258558034896851, 0.6273114681243896, 0.5708218812942505, 0.5866246819496155, 0.7688564658164978, 0.5586411356925964, 0.5610538125038147, 0.6127434968948364, 0.5174880623817444, 0.5122910141944885, 0.5098040103912354, 0.5442368388175964, 0.49163249135017395, 0.5049929618835449, 0.47766947746276855, 0.47510001063346863, 0.461303174495697, 0.46804338693618774, 0.4567006826400757, 0.44207772612571716, 0.4580844044685364, 0.45151495933532715, 0.5030471086502075, 0.43171656131744385, 0.4482493996620178, 0.4715030789375305, 0.4859348237514496, 0.4277420938014984, 0.4470968544483185, 0.44762662053108215, 0.46389254927635193, 0.43358081579208374, 0.42192575335502625, 0.431669682264328, 0.4185341000556946, 0.4385049343109131, 0.459784597158432, 0.4579642713069916], "val_accuracy": [0.28833332657814026, 0.41966667771339417, 0.4350000023841858, 0.5600000023841858, 0.653333306312561, 0.7406666874885559, 0.7680000066757202, 0.7433333396911621, 0.7713333368301392, 0.7693333625793457, 0.7129999995231628, 0.7796666622161865, 0.7739999890327454, 0.7526666522026062, 0.8016666769981384, 0.8053333163261414, 0.8096666932106018, 0.7963333129882812, 0.8063333630561829, 0.8026666641235352, 0.8233333230018616, 0.8143333196640015, 0.8286666870117188, 0.8256666660308838, 0.8273333311080933, 0.8343333601951599, 0.8339999914169312, 0.8356666564941406, 0.8019999861717224, 0.8453333377838135, 0.8330000042915344, 0.8223333358764648, 0.8143333196640015, 0.847000002861023, 0.8289999961853027, 0.8230000138282776, 0.8240000009536743, 0.8383333086967468, 0.8473333120346069, 0.8443333506584167, 0.8386666774749756, 0.843666672706604, 0.8213333487510681, 0.8220000267028809]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 0, 8, 4, 2, 3, 6, 9, 8, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [34, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 9, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, tf.math.multiply(beta, tf.math.divide_no_nan(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), grad))))))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.1258695125579834, 2.106557846069336, 1.7784334421157837, 1.2844603061676025, 0.9572679996490479, 0.8591534495353699, 0.7862875461578369, 0.7215825319290161, 0.7122175097465515, 0.6669588685035706, 0.6404666304588318, 0.6153444647789001, 0.6169822216033936, 0.6043618321418762, 0.5773382186889648, 0.5651766061782837, 0.5505526661872864, 0.5326107740402222, 0.5749823451042175, 0.5079687237739563, 0.5192805528640747, 0.5002817511558533, 0.4910224974155426, 0.519061267375946, 0.49096715450286865, 0.4839325547218323, 0.4638613164424896, 0.4473549425601959, 0.44961369037628174, 0.4585334360599518, 0.4428485035896301, 0.46112266182899475, 0.4364648163318634, 0.4465044140815735, 0.4152921140193939, 0.40386271476745605, 0.4349856376647949, 0.41303303837776184, 0.4091353118419647], "accuracy": [0.2845066785812378, 0.3016774654388428, 0.39545634388923645, 0.5300488471984863, 0.6491876840591431, 0.6787742972373962, 0.703209638595581, 0.7251353859901428, 0.7269845604896545, 0.7452120184898376, 0.7528728246688843, 0.7621186375617981, 0.7619865536689758, 0.7662131786346436, 0.7769119143486023, 0.7844406366348267, 0.7868181467056274, 0.7944789528846741, 0.7829877138137817, 0.8096684813499451, 0.8026680946350098, 0.8142913579940796, 0.8146876096725464, 0.800818920135498, 0.8101968169212341, 0.8149517774581909, 0.82683926820755, 0.8333113193511963, 0.8308017253875732, 0.8265751004219055, 0.8387266993522644, 0.8261788487434387, 0.8293488025665283, 0.8308017253875732, 0.8411042094230652, 0.8486329317092896, 0.8385946154594421, 0.8442742228507996, 0.8448025584220886], "val_loss": [2.241184949874878, 2.1481361389160156, 1.2650654315948486, 1.1001707315444946, 0.8338172435760498, 0.7515270113945007, 0.667750895023346, 0.6411091089248657, 0.5935164093971252, 0.6238389611244202, 0.5933026671409607, 0.5711356401443481, 0.5924524664878845, 0.5430901050567627, 0.5347820520401001, 0.5494990348815918, 0.49740031361579895, 0.5775336623191833, 0.5095369815826416, 0.5072970986366272, 0.48191651701927185, 0.4894624948501587, 0.4757826328277588, 0.49203288555145264, 0.45236828923225403, 0.4423995018005371, 0.4685158431529999, 0.46054911613464355, 0.4789282977581024, 0.4321441948413849, 0.474829763174057, 0.449342280626297, 0.4533170461654663, 0.4298473000526428, 0.43619829416275024, 0.42850062251091003, 0.4552987515926361, 0.4386287331581116, 0.41344717144966125], "val_accuracy": [0.28299999237060547, 0.42933332920074463, 0.5653333067893982, 0.6230000257492065, 0.6460000276565552, 0.7120000123977661, 0.7360000014305115, 0.7583333253860474, 0.7706666588783264, 0.7546666860580444, 0.7663333415985107, 0.7749999761581421, 0.7570000290870667, 0.784333348274231, 0.7979999780654907, 0.7799999713897705, 0.8169999718666077, 0.7926666736602783, 0.8016666769981384, 0.8059999942779541, 0.8233333230018616, 0.8053333163261414, 0.8193333148956299, 0.8163333535194397, 0.8343333601951599, 0.8399999737739563, 0.8193333148956299, 0.8303333520889282, 0.8096666932106018, 0.846666693687439, 0.8246666789054871, 0.8413333296775818, 0.8306666612625122, 0.8489999771118164, 0.8383333086967468, 0.8376666903495789, 0.831333339214325, 0.8410000205039978, 0.8476666808128357]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 57, 51, 41, 8, 79, 86, 52, 44], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 9, 5, 6, 2, 2, 4, 0, 6, 8, 4, 1, 9, 6, 0, 4, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 3, 3, 1, 3, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 22, 51, 61, 35, 8, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [33, 9, 45, 71, 34, 14, 2]], "fitness": -0.7874285578727722, "mapping_values": [1, 5, 5, 3, 2, 2, 30, 30, 21, 9, 5, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, beta))), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)))))), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, alpha)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(sigma, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.2755188941955566, 2.1955668926239014, 2.081511974334717, 1.965338110923767, 1.837180256843567, 1.679405689239502, 1.5537806749343872, 1.4464401006698608, 1.3614768981933594, 1.2832555770874023, 1.228811264038086, 1.1743016242980957, 1.1321077346801758, 1.0907862186431885, 1.0557312965393066, 1.0169214010238647, 0.9919875264167786, 0.9504279494285583, 0.9359992146492004, 0.9096655249595642, 0.892508327960968, 0.8816424012184143, 0.8552358150482178, 0.8395605683326721, 0.8430664539337158, 0.8276821970939636, 0.8075496554374695, 0.794055700302124, 0.7816118001937866, 0.7738316655158997, 0.7648292183876038, 0.75664222240448, 0.7603402137756348, 0.749596357345581, 0.7463849186897278, 0.7325314879417419, 0.7399609684944153, 0.7307159304618835, 0.7207642197608948, 0.709968626499176, 0.703981876373291, 0.6925446391105652, 0.6949893832206726, 0.6838610172271729, 0.691442608833313, 0.6772870421409607, 0.6769903898239136, 0.6714380979537964, 0.6687620878219604, 0.6594448685646057, 0.6640589237213135, 0.6514182686805725, 0.6572257876396179, 0.6440100073814392, 0.6471449732780457, 0.6481353044509888, 0.6424712538719177, 0.6419194340705872, 0.6400063037872314, 0.637431263923645, 0.6379144191741943, 0.6312111616134644, 0.6310056447982788, 0.6349666118621826, 0.6208440065383911, 0.6232417225837708, 0.6056757569313049, 0.6141842603683472, 0.6011070013046265, 0.6169840097427368, 0.6052372455596924, 0.6010740995407104, 0.6133430600166321], "accuracy": [0.1632545292377472, 0.31845200061798096, 0.3909655213356018, 0.4076079726219177, 0.42609959840774536, 0.4764232039451599, 0.5065380930900574, 0.544181764125824, 0.5811649560928345, 0.5927882790565491, 0.6141856908798218, 0.6235635876655579, 0.628582775592804, 0.646149754524231, 0.6539427042007446, 0.6576409935951233, 0.6625280380249023, 0.6749438643455505, 0.6758684515953064, 0.6823405027389526, 0.6877558827400208, 0.6844538450241089, 0.6966054439544678, 0.696209192276001, 0.695813000202179, 0.7000396251678467, 0.7055870890617371, 0.7125874757766724, 0.7157574892044067, 0.7156254053115845, 0.7152291536331177, 0.7219653725624084, 0.7190595865249634, 0.7234182953834534, 0.7277770638465881, 0.7281733155250549, 0.7309470176696777, 0.7321357727050781, 0.735041618347168, 0.7423061728477478, 0.7436270117759705, 0.7424382567405701, 0.7475894689559937, 0.748249888420105, 0.7474573850631714, 0.7460044622421265, 0.7530049085617065, 0.754589855670929, 0.7540615797042847, 0.7593448758125305, 0.7565711140632629, 0.761590301990509, 0.7618544697761536, 0.7664773464202881, 0.7631752490997314, 0.763967752456665, 0.7626469135284424, 0.7692511081695557, 0.7691190242767334, 0.7683265209197998, 0.7695152759552002, 0.7711002230644226, 0.7724210619926453, 0.7643640041351318, 0.7749306559562683, 0.7754589915275574, 0.7781006693840027, 0.7775723338127136, 0.7792893648147583, 0.7761194109916687, 0.778761088848114, 0.7815347909927368, 0.7783648371696472], "val_loss": [2.224940061569214, 2.1158323287963867, 1.98499596118927, 1.8514591455459595, 1.6819971799850464, 1.5182353258132935, 1.3850387334823608, 1.280819058418274, 1.1960712671279907, 1.123810887336731, 1.0682958364486694, 1.0178658962249756, 0.9763890504837036, 0.9389703869819641, 0.9032225608825684, 0.8666526675224304, 0.8355521559715271, 0.8105241060256958, 0.7899913191795349, 0.7735002636909485, 0.7473782300949097, 0.7319835424423218, 0.7155569791793823, 0.7051785588264465, 0.6939359307289124, 0.6810061931610107, 0.6714112162590027, 0.6595214605331421, 0.651620626449585, 0.6426255702972412, 0.6353987455368042, 0.629111111164093, 0.6272788047790527, 0.6235191226005554, 0.6116877198219299, 0.6129732131958008, 0.6073212623596191, 0.5989521741867065, 0.594261884689331, 0.5938860774040222, 0.5841620564460754, 0.5850618481636047, 0.5794042944908142, 0.5745870471000671, 0.5722569227218628, 0.5717323422431946, 0.566760241985321, 0.5668286085128784, 0.5641332864761353, 0.5604575872421265, 0.5549233555793762, 0.5503643155097961, 0.5458592176437378, 0.5556142926216125, 0.5433244705200195, 0.5439552664756775, 0.5445675849914551, 0.5355210900306702, 0.5413599014282227, 0.532658040523529, 0.534105122089386, 0.5367566347122192, 0.530102550983429, 0.5282405018806458, 0.5224055051803589, 0.5190126299858093, 0.5164695978164673, 0.518523097038269, 0.5202582478523254, 0.520414412021637, 0.5114633440971375, 0.5132889151573181, 0.5132662057876587], "val_accuracy": [0.38866665959358215, 0.48633334040641785, 0.5049999952316284, 0.4950000047683716, 0.5273333191871643, 0.5630000233650208, 0.6050000190734863, 0.637666642665863, 0.6596666574478149, 0.6679999828338623, 0.6740000247955322, 0.6796666383743286, 0.6896666884422302, 0.684333324432373, 0.6909999847412109, 0.7056666612625122, 0.7123333215713501, 0.715666651725769, 0.7206666469573975, 0.7236666679382324, 0.7310000061988831, 0.734333336353302, 0.7400000095367432, 0.7379999756813049, 0.7400000095367432, 0.7480000257492065, 0.7450000047683716, 0.7516666650772095, 0.7559999823570251, 0.7583333253860474, 0.7606666684150696, 0.7630000114440918, 0.762666642665863, 0.7666666507720947, 0.7683333158493042, 0.7670000195503235, 0.7720000147819519, 0.7733333110809326, 0.7733333110809326, 0.7756666541099548, 0.7836666703224182, 0.7816666960716248, 0.7823333144187927, 0.7853333353996277, 0.7829999923706055, 0.7839999794960022, 0.7876666784286499, 0.7786666750907898, 0.7879999876022339, 0.7896666526794434, 0.7876666784286499, 0.7923333048820496, 0.7963333129882812, 0.7870000004768372, 0.7996666431427002, 0.7979999780654907, 0.793666660785675, 0.800000011920929, 0.7979999780654907, 0.7990000247955322, 0.7963333129882812, 0.8019999861717224, 0.8003333210945129, 0.800000011920929, 0.8016666769981384, 0.8056666851043701, 0.8043333292007446, 0.8083333373069763, 0.8076666593551636, 0.8023333549499512, 0.8076666593551636, 0.8063333630561829, 0.8063333630561829]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 15, 41, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 4, 8, 2, 2, 8, 0, 9, 8, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 0, 2, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [34, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [68, 9, 45, 71, 34, 14, 2]], "fitness": -0.2297142893075943, "mapping_values": [1, 10, 10, 7, 3, 3, 14, 14, 9, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(beta)))))), tf.math.negative(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.5772335529327393, 2.3072128295898438, 2.3024208545684814, 2.216099262237549, 2.3066189289093018, 2.303694486618042], "accuracy": [0.19561484456062317, 0.11649715900421143, 0.107647605240345, 0.17170783877372742, 0.10130762308835983, 0.09747721254825592], "val_loss": [2.1367688179016113, 2.3028218746185303, 2.2998101711273193, 2.3098716735839844, 2.3036043643951416, 2.302565336227417], "val_accuracy": [0.24666666984558105, 0.10366666316986084, 0.10000000149011612, 0.0989999994635582, 0.09700000286102295, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 9, 2, 7, 9, 3, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [75, 37, 15, 41, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 8, 2, 2, 8, 0, 9, 8, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [34, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [0, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 6, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [1, 2, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.12542857229709625, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 5, 2, 3, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(alpha, beta), sigma)", "other_info": {"loss": [2.763372139607564e+21, 4.715106319982354e+23, 1.3547246420220925e+26, 1.150337194271463e+30, 5.1930764512745676e+32, Infinity, NaN, NaN], "accuracy": [0.10527011007070541, 0.1026284471154213, 0.09893012791872025, 0.09906221181154251, 0.08426892012357712, 0.08598599582910538, 0.09113723784685135, 0.09787346422672272], "val_loss": [4.810455202731152e+21, 8.860779376577427e+24, 4.2479669907335264e+27, 4.525184637061401e+30, 2.035267198543141e+33, Infinity, NaN, NaN], "val_accuracy": [0.11766666918992996, 0.07900000363588333, 0.13566666841506958, 0.10466666519641876, 0.09933333098888397, 0.10833333432674408, 0.06966666877269745, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 9, 2, 7, 9, 3, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 15, 41, 8, 79, 86, 52, 44], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 8, 2, 2, 8, 0, 9, 8, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 2, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [5, 0], [38], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [8, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07489103078842163, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 6, 8, 4, 2, 3, 6, 9, 8, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 1, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [34, 78, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [3, 0], [38], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [6, 1, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 5, 1, 3, 5, 0, 7, 0, 3, 5, 3, 3, 3, 8, 6, 5, 4, 5, 3, 2, 2, 9, 6, 8, 4, 1, 5, 5, 5, 7, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0, 3, 0, 3, 2, 1, 2, 3], [33, 9, 45, 71, 34, 14, 2, 27, 69, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 23, 23, 15, 8, 3, 1, 1, 0, 1, 0, 74, 46, 28, 10], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.pow(beta, tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.sqrt(alpha))), tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(sigma, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(sigma, beta), tf.math.square(beta))), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.square(sigma), beta)))))), tf.math.subtract(beta, tf.math.multiply(tf.math.square(tf.math.negative(tf.math.add(tf.math.negative(tf.math.multiply(tf.math.square(sigma), tf.math.multiply(sigma, tf.math.multiply(tf.math.multiply(tf.math.sqrt(beta), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), sigma)))), tf.math.divide_no_nan(tf.math.square(beta), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.square(sigma), tf.math.multiply(tf.math.add(tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.subtract(beta, tf.math.square(tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(beta, sigma))))))))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 9, 6, 4, 4, 2, 1, 0, 8, 4, 8, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [1, 3, 1, 0, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 20, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [46, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 22, 22, 15, 7, 4, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.pow(alpha, tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07489103078842163, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 5, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 9, 41, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 9, 6, 4, 4, 2, 1, 0, 8, 4, 8, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 27, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [1, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 4, 4, 4, 3, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(alpha), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [82292016.0, 1600062464.0, 7662167552.0, 22086453248.0, 47715368960.0, 86654869504.0], "accuracy": [0.09496764093637466, 0.10302469879388809, 0.10936468094587326, 0.09998679161071777, 0.09826971590518951, 0.10619468986988068], "val_loss": [385397824.0, 3220441088.0, 10691550208.0, 25721073664.0, 49710993408.0, 87267926016.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 5, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 9, 6, 4, 4, 2, 1, 0, 8, 4, 8, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 27, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 11, 6, 5, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(sigma, beta), tf.math.square(beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 0, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [25, 37, 51, 41, 8, 79, 86, 52, 44], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 2, 6, 4, 4, 2, 1, 0, 8, 4, 8, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 27, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [0, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 5, 21, 21, 13, 8, 2, 1, 1, 0, 1, 1, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.pow(beta, tf.math.add(beta, tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))), tf.math.sqrt(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3025171756744385, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 5, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 9, 6, 4, 4, 2, 1, 0, 8, 4, 8, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 4, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [41, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 11, 6, 5, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(sigma, beta), tf.math.square(beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [35, 37, 15, 41, 8, 79, 86, 52, 44], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 8, 2, 2, 8, 0, 9, 8, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 3, 2, 3, 2, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [34, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [5, 0], [38], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [6, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 1, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09034473448991776, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 2, 0, 8, 4, 2, 3, 6, 9, 8, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [34, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [3, 4, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 8, 7, 4, 4, 8, 2, 9, 7, 8, 4, 8, 7, 2, 1, 3, 3, 4, 1, 4, 8], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0, 2, 3, 1, 3], [48, 9, 45, 71, 34, 14, 2, 33, 61]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 61, 36, 25, 9], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(tf.math.subtract(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(sigma, beta), tf.math.square(beta))), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.sqrt(sigma), beta)))))), tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.sqrt(tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(sigma), sigma))), tf.math.pow(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), sigma), beta), tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), beta), sigma))), alpha)), tf.math.sqrt(sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 4, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 51, 41, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 8, 2, 2, 4, 1, 1, 8, 4, 6, 9, 0, 0, 6, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 1, 0, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [34, 22, 82, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 3, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.07114285975694656, "mapping_values": [1, 10, 10, 7, 3, 3, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3031301498413086, 2.3020095825195312, 2.3014230728149414, 2.3023667335510254, 2.300860643386841, 2.301163673400879, 2.3013126850128174, 2.3009207248687744, 2.3019490242004395, 2.3013525009155273, 2.3007171154022217, 2.3001813888549805, 2.301074504852295, 2.300279140472412, 2.299114942550659, 2.301091432571411, 2.3007967472076416, 2.3007609844207764, 2.29990553855896, 2.2997963428497314, 2.2993881702423096, 2.299272060394287, 2.2995402812957764, 2.2993557453155518, 2.2994000911712646, 2.3003158569335938, 2.3000893592834473, 2.2998111248016357, 2.299795627593994, 2.2993245124816895], "accuracy": [0.09087307006120682, 0.09470347315073013, 0.09087307006120682, 0.09417514503002167, 0.09906221181154251, 0.09826971590518951, 0.09087307006120682, 0.0944393053650856, 0.09470347315073013, 0.09272222965955734, 0.09391097724437714, 0.09760929644107819, 0.09325055778026581, 0.09549596905708313, 0.1022322028875351, 0.09893012791872025, 0.0952318087220192, 0.0886276587843895, 0.09787346422672272, 0.1006472036242485, 0.10091137140989304, 0.10408136248588562, 0.10368511080741882, 0.09945846349000931, 0.10091137140989304, 0.10157178342342377, 0.09417514503002167, 0.09959053993225098, 0.09760929644107819, 0.09602430462837219], "val_loss": [2.299966335296631, 2.299619674682617, 2.299307346343994, 2.299011468887329, 2.2988011837005615, 2.2986104488372803, 2.2984681129455566, 2.298330545425415, 2.298275947570801, 2.2982428073883057, 2.2982685565948486, 2.2982702255249023, 2.2983012199401855, 2.29830002784729, 2.298361301422119, 2.298356533050537, 2.2983076572418213, 2.2982594966888428, 2.298231840133667, 2.2981936931610107, 2.298159122467041, 2.2981483936309814, 2.298165798187256, 2.2982120513916016, 2.298232078552246, 2.2983012199401855, 2.2984161376953125, 2.29850172996521, 2.2986037731170654, 2.298706293106079], "val_accuracy": [0.03999999910593033, 0.0430000014603138, 0.04633333161473274, 0.047333333641290665, 0.050333332270383835, 0.0533333346247673, 0.054999999701976776, 0.05766666680574417, 0.05900000035762787, 0.06133333221077919, 0.06433333456516266, 0.06533333659172058, 0.06499999761581421, 0.06533333659172058, 0.06700000166893005, 0.0689999982714653, 0.07100000232458115, 0.07199999690055847, 0.07366666942834854, 0.07333333045244217, 0.07466666400432587, 0.07533333450555801, 0.07666666805744171, 0.07599999755620956, 0.07766667008399963, 0.07633333653211594, 0.07233333587646484, 0.07433333247900009, 0.07366666942834854, 0.07333333045244217]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 9, 2, 7, 9, 3, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 37, 51, 41, 8, 79, 86, 52, 44], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 8, 2, 2, 8, 0, 9, 8, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 2, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [89, 27, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.03857142850756645, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303342580795288, 2.3025717735290527, 2.302398443222046, 2.303715705871582, 2.3024442195892334, 2.3030972480773926], "accuracy": [0.09034473448991776, 0.09311848133802414, 0.09021265059709549, 0.09100515395402908, 0.09496764093637466, 0.0936468094587326], "val_loss": [2.3004064559936523, 2.3004064559936523, 2.3004064559936523, 2.3004064559936523, 2.3004064559936523, 2.3004064559936523], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}]