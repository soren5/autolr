[{"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 2, 2, 1, 4, 3, 1, 5, 8, 2, 2, 1, 8, 8, 2, 9, 4, 2, 3, 0, 3, 2, 2, 7, 7, 2, 1, 9, 2, 7, 2, 2, 4, 2, 7, 4, 7, 7, 3, 8, 4, 1, 8, 4, 5, 5, 5, 4, 2, 4, 8, 9, 3, 4, 1, 3, 0, 5, 7, 9, 3, 5, 6, 5, 9, 6, 8, 0], [3, 1, 1, 1, 3, 3, 2, 3, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [18, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.822857141494751, "mapping_values": [1, 1, 1, 0, 1, 1, 111, 111, 69, 42, 12, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 76, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(grad, tf.math.multiply(tf.math.subtract(tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(beta, alpha)))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, beta)))), tf.math.add(beta, grad))), grad)), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), alpha)))))), tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.pow(tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.sqrt(beta), tf.math.pow(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.sqrt(tf.math.pow(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.add(beta, grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, grad)))))), tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, alpha))), alpha)))))), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.multiply(alpha, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.negative(grad)))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.563450336456299, 2.080623149871826, 1.6974480152130127, 1.2949796915054321, 1.1315786838531494, 0.9698099493980408, 0.8879507780075073, 0.8130753636360168, 0.7956356406211853, 0.7685522437095642, 0.7188132405281067, 0.747670590877533, 0.6421248912811279, 0.6412861943244934, 0.6838152408599854, 0.6321299076080322, 0.5952960848808289, 0.5652698278427124, 0.58714759349823, 0.5828835964202881, 0.5502500534057617, 0.5602136254310608, 0.5219616889953613, 0.5283957719802856, 0.5163974165916443, 0.501383900642395, 0.5068650841712952, 0.48672744631767273, 0.4735671579837799, 0.47143468260765076, 0.45766308903694153, 0.4769495725631714, 0.4551343023777008, 0.44228482246398926], "accuracy": [0.2620525658130646, 0.33047154545783997, 0.42887333035469055, 0.5349359512329102, 0.5843349695205688, 0.6464139223098755, 0.6793025732040405, 0.6880200505256653, 0.6966054439544678, 0.7096816897392273, 0.7281733155250549, 0.7164179086685181, 0.7535332441329956, 0.7543256878852844, 0.739400327205658, 0.7523444890975952, 0.7726852297782898, 0.78113853931427, 0.7728173136711121, 0.77677983045578, 0.7936864495277405, 0.7881389260292053, 0.7988376617431641, 0.7971205711364746, 0.8062343001365662, 0.8115176558494568, 0.805177628993988, 0.817989706993103, 0.8224804997444153, 0.8193105459213257, 0.8278959393501282, 0.8215559124946594, 0.8309338092803955, 0.8296129703521729], "val_loss": [2.2469546794891357, 1.3562079668045044, 1.5129283666610718, 0.9493172764778137, 0.8161030411720276, 0.8726236820220947, 0.6967287063598633, 0.7224275469779968, 0.6055856943130493, 0.5931586027145386, 0.6938449144363403, 0.5643981695175171, 0.5464474558830261, 0.5072790384292603, 0.5263778567314148, 0.5102769136428833, 0.4934341311454773, 0.5578005909919739, 0.5136744976043701, 0.46630504727363586, 0.5156717896461487, 0.44961726665496826, 0.4851785898208618, 0.4634855091571808, 0.5057754516601562, 0.480195552110672, 0.42929771542549133, 0.4553088843822479, 0.423356294631958, 0.43021589517593384, 0.4759845435619354, 0.462063729763031, 0.4187019169330597, 0.4271881878376007], "val_accuracy": [0.4983333349227905, 0.6579999923706055, 0.5040000081062317, 0.6453333497047424, 0.6833333373069763, 0.684333324432373, 0.7390000224113464, 0.7006666660308838, 0.7590000033378601, 0.7573333382606506, 0.765999972820282, 0.7986666560173035, 0.7960000038146973, 0.8130000233650208, 0.7990000247955322, 0.8043333292007446, 0.8199999928474426, 0.7643333077430725, 0.8086666464805603, 0.8270000219345093, 0.7863333225250244, 0.8306666612625122, 0.8243333101272583, 0.8346666693687439, 0.8003333210945129, 0.8140000104904175, 0.8450000286102295, 0.8360000252723694, 0.8553333282470703, 0.8496666550636292, 0.8180000185966492, 0.8366666436195374, 0.8433333039283752, 0.8360000252723694]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 4, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 4, 2, 2, 8, 5, 3, 2, 2, 8, 9, 5, 1, 6, 6, 8, 9, 9, 2, 9, 0, 2, 2, 0, 9], [3, 2, 1, 3, 3, 2, 2, 0, 3, 0, 3, 1, 4, 1, 4], [77, 82, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.7994285821914673, "mapping_values": [1, 5, 5, 2, 3, 1, 26, 26, 18, 8, 4, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(grad))), tf.math.multiply(tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(grad)), grad), beta)), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1480956077575684, 2.1994686126708984, 2.0294649600982666, 1.5973340272903442, 1.1654078960418701, 0.8069050908088684, 0.7061125636100769, 0.6903520226478577, 0.6700363755226135, 0.6409105658531189, 0.5791207551956177, 0.6161366701126099, 0.5525786876678467, 0.561475396156311, 0.5685712099075317, 0.5374297499656677, 0.5163434743881226], "accuracy": [0.270109623670578, 0.23946638405323029, 0.32967904210090637, 0.4431383013725281, 0.5709945559501648, 0.69673752784729, 0.7371549606323242, 0.743891179561615, 0.7481178045272827, 0.7565711140632629, 0.7791573405265808, 0.7642319202423096, 0.7910447716712952, 0.7886672616004944, 0.7858935594558716, 0.7889314293861389, 0.8013472557067871], "val_loss": [2.3018836975097656, 1.3378567695617676, 1.7166578769683838, 1.4923807382583618, 0.7080124616622925, 0.6233873963356018, 0.7381386756896973, 0.5638219118118286, 0.5635384321212769, 0.5330256819725037, 0.533488929271698, 0.4893976151943207, 0.49718227982521057, 0.5055169463157654, 0.4813949465751648, 0.4952118694782257, 0.5340006351470947], "val_accuracy": [0.11133333295583725, 0.5450000166893005, 0.476666659116745, 0.4586666524410248, 0.7476666569709778, 0.7680000066757202, 0.7013333439826965, 0.7870000004768372, 0.7663333415985107, 0.7816666960716248, 0.778333306312561, 0.8206666707992554, 0.8180000185966492, 0.8136666417121887, 0.8186666369438171, 0.812666654586792, 0.7883333563804626]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [1, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 2, 2, 1, 4, 3, 1, 2, 8, 9, 6, 1, 8, 8, 2, 9, 4, 2, 6, 0, 3, 2, 2, 9, 3, 2, 1, 9, 2, 7, 2, 2, 4, 2, 8, 4, 7, 7, 3, 8, 4, 1, 8, 4, 5, 5, 5, 4, 2, 4, 8, 9, 3, 4, 1, 4, 0, 5, 0, 8, 3, 5, 6, 2, 9, 6, 8, 0], [3, 1, 1, 1, 3, 3, 2, 3, 3, 3, 5, 1, 4, 1, 4, 2, 0, 1, 0, 0, 4, 1, 3, 2, 3, 0, 1, 1, 1, 5, 4, 4, 5, 3, 2, 5, 5, 4, 5, 2, 3, 2], [18, 82, 79, 61, 35, 78, 62, 1, 12, 42, 13, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 3, 1, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 33, 43, 71, 34]], "fitness": -0.7731428742408752, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.289433240890503, 2.258507251739502, 2.222320556640625, 2.1707324981689453, 2.095515489578247, 1.9905751943588257, 1.8558576107025146, 1.7041454315185547, 1.5600699186325073, 1.429510235786438, 1.3366526365280151, 1.2545735836029053, 1.1981829404830933, 1.1475101709365845, 1.107348918914795, 1.069536566734314, 1.0310587882995605, 0.9970586895942688, 0.9743891358375549, 0.9588126540184021, 0.9332212209701538, 0.924707293510437, 0.9001054167747498, 0.891875684261322, 0.8719115257263184, 0.8625636696815491, 0.8586974740028381, 0.8421041965484619, 0.8461045622825623, 0.8327211141586304, 0.8181694149971008, 0.81495600938797, 0.8059840798377991, 0.7952223420143127, 0.7875688672065735, 0.7864570021629333, 0.7777177691459656, 0.7651482224464417, 0.7646105885505676, 0.7614147067070007, 0.7488148808479309, 0.7498569488525391, 0.7447015047073364, 0.7356259226799011, 0.7390986680984497, 0.7341949939727783, 0.7300989627838135, 0.7255732417106628, 0.7189570069313049, 0.7144593000411987, 0.7212196588516235], "accuracy": [0.11979923397302628, 0.20882314443588257, 0.2724871337413788, 0.32703739404678345, 0.3793422281742096, 0.41764628887176514, 0.4497424364089966, 0.4810461103916168, 0.49927353858947754, 0.5416721701622009, 0.5517104864120483, 0.5713908076286316, 0.5864483118057251, 0.5914674401283264, 0.6073173880577087, 0.6267336010932922, 0.6380926966667175, 0.6473385095596313, 0.6546030640602112, 0.656980574131012, 0.6695284843444824, 0.6667547225952148, 0.6775855422019958, 0.6828688383102417, 0.6866992712020874, 0.6946242451667786, 0.6922467350959778, 0.6964733600616455, 0.6963412761688232, 0.6988508701324463, 0.7049266695976257, 0.7034738063812256, 0.7125874757766724, 0.7141724824905396, 0.7182670831680298, 0.7164179086685181, 0.7157574892044067, 0.7215691208839417, 0.7202483415603638, 0.7199841737747192, 0.7244749665260315, 0.7223616242408752, 0.7290979027748108, 0.7290979027748108, 0.7323999404907227, 0.7316074371337891, 0.7327961921691895, 0.7310791015625, 0.7391361594200134, 0.7392682433128357, 0.733060359954834], "val_loss": [2.266005754470825, 2.229391574859619, 2.18070387840271, 2.11057448387146, 2.0102031230926514, 1.8713997602462769, 1.7017672061920166, 1.5206161737442017, 1.3547372817993164, 1.2177051305770874, 1.1130069494247437, 1.0319486856460571, 0.9707516431808472, 0.9231252670288086, 0.880708634853363, 0.8493727445602417, 0.8219221830368042, 0.7965418100357056, 0.7769002914428711, 0.7563655376434326, 0.7436888217926025, 0.7274503707885742, 0.7150377035140991, 0.7017443180084229, 0.6922154426574707, 0.6824025511741638, 0.6718467473983765, 0.665920078754425, 0.6582226157188416, 0.6501887440681458, 0.6476797461509705, 0.6374136209487915, 0.6329670548439026, 0.628106951713562, 0.621993362903595, 0.6165384650230408, 0.6124603748321533, 0.60858154296875, 0.6033837199211121, 0.5999188423156738, 0.5965008735656738, 0.5904093384742737, 0.5878412127494812, 0.5846523642539978, 0.5813805460929871, 0.5790575742721558, 0.5760934948921204, 0.571603536605835, 0.5687257647514343, 0.5631361603736877, 0.5670537352561951], "val_accuracy": [0.28999999165534973, 0.3996666669845581, 0.4556666612625122, 0.5070000290870667, 0.5393333435058594, 0.5730000138282776, 0.596666693687439, 0.6129999756813049, 0.6489999890327454, 0.6746666431427002, 0.6840000152587891, 0.6980000138282776, 0.7053333520889282, 0.7073333263397217, 0.7213333249092102, 0.7279999852180481, 0.7333333492279053, 0.7390000224113464, 0.737333357334137, 0.7453333139419556, 0.7483333349227905, 0.7519999742507935, 0.7566666603088379, 0.7580000162124634, 0.7576666474342346, 0.7613333463668823, 0.765333354473114, 0.768666684627533, 0.7723333239555359, 0.7763333320617676, 0.7726666927337646, 0.7806666493415833, 0.777999997138977, 0.7823333144187927, 0.7839999794960022, 0.7816666960716248, 0.7873333096504211, 0.7856666445732117, 0.7873333096504211, 0.7893333435058594, 0.7873333096504211, 0.7906666398048401, 0.7896666526794434, 0.7906666398048401, 0.7926666736602783, 0.800000011920929, 0.7973333597183228, 0.7986666560173035, 0.796999990940094, 0.800000011920929, 0.7976666688919067]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [96, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [8, 4, 2, 2, 2, 4, 9, 4, 5, 5, 9, 2, 1, 6, 9, 3, 9, 4, 2, 3, 0, 4, 0, 7, 1, 3, 8, 6, 6, 0, 8, 5, 3, 3, 4, 7, 8, 7, 9, 1, 7, 8, 1, 5, 2, 0, 0, 5, 2, 3, 8, 9, 3, 0, 9, 3, 5, 5, 8, 0, 4, 6], [3, 1, 3, 1, 3, 3, 2, 2, 3, 3, 3, 1, 4, 1, 4, 0, 5, 5, 1, 4, 2, 0, 1, 5, 2, 4, 1, 4, 4, 1], [18, 60, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.15228570997714996, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(alpha, tf.math.pow(grad, alpha)))), tf.math.add(beta, grad)), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.2710447311401367, 2.3519833087921143, 2.49196195602417, 2.331106424331665, 2.3045668601989746, 2.303576707839966, 2.3032026290893555, 2.3031256198883057], "accuracy": [0.22586184740066528, 0.107647605240345, 0.21463479101657867, 0.11081759631633759, 0.09774138033390045, 0.09840179979801178, 0.09338264167308807, 0.09377889335155487], "val_loss": [2.6365010738372803, 2.2822513580322266, 2.3686349391937256, 2.3057265281677246, 2.30332350730896, 2.302866220474243, 2.302647352218628, 2.3026256561279297], "val_accuracy": [0.09666666388511658, 0.19200000166893005, 0.20399999618530273, 0.0949999988079071, 0.10066666454076767, 0.0989999994635582, 0.0989999994635582, 0.10300000011920929]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [96, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 0, 2, 6, 4, 6, 5, 6, 6, 9, 2, 3, 6, 9, 3, 9, 4, 2, 3, 0, 4, 7], [3, 1, 3, 1, 3, 3, 3, 3, 0, 3, 3, 1, 4, 1, 4, 0, 5, 5, 1, 4, 2, 0, 1, 5, 2, 4, 1, 4, 4, 1], [17, 79, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 5, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 25, 25, 15, 10, 3, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(alpha, tf.math.pow(grad, alpha)))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [95485312.0, 1846501248.0, 8392916480.0, 23631839232.0, 51595563008.0, 93672054784.0], "accuracy": [0.09470347315073013, 0.10038304328918457, 0.09906221181154251, 0.10500594228506088, 0.09919429570436478, 0.09694888442754745], "val_loss": [413419904.0, 3305010944.0, 11151763456.0, 26430748672.0, 51618574336.0, 89192996864.0], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [96, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 5, 4, 2, 0, 5, 9, 6, 2, 1, 4, 8, 1, 6, 9, 8, 9, 4, 2], [3, 1, 1, 1, 3, 3, 2, 3, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [17, 74, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [3, 2, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 2, 7, 7, 2, 4, 6, 1, 2], [3, 0, 3, 1, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 9, 5, 1, 1, 0, 0, 0, 0, 44, 24, 20, 6], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.add(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(sigma, alpha), tf.math.square(beta))), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.math.negative(tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.add(beta, tf.math.add(sigma, tf.math.add(sigma, tf.math.pow(tf.math.divide_no_nan(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, beta))))))))))), tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 5, 0, 2, 3, 2, 9, 5, 2, 1, 2, 2, 1, 6, 6, 8, 6, 4, 2], [3, 2, 1, 1, 3, 2, 2, 0, 3, 0, 3, 1, 4, 1, 4], [18, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [4, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 1, 3, 2, 1, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [64, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 26, 26, 15, 11, 3, 1, 0, 0, 0, 0, 8, 4, 4, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.negative(sigma), tf.math.multiply(alpha, tf.math.multiply(sigma, beta)))", "other_info": {"loss": [2.3024544715881348, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 0, 2, 2, 4, 6, 1, 5, 5, 9, 2, 1, 6, 9, 6, 9, 4, 2, 3, 0, 4, 7, 4, 2, 8, 6, 5, 2, 0, 2, 2, 2, 7, 0, 2, 8, 9, 2, 0, 2, 1, 4, 6, 5], [3, 1, 1, 1, 3, 3, 2, 3, 3, 0, 5, 1, 4, 1, 4, 2, 2, 1, 0, 0, 4, 1, 3, 2, 5, 0], [17, 82, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [8, 5, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 5, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.square(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024544715881348, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 5, 2, 2, 8, 5, 3, 6, 2, 1, 9, 2, 1, 6, 8, 8, 9, 4, 2, 1, 0, 8, 6, 0, 0], [2, 1, 1, 1, 0, 3, 2, 3, 3, 0, 5, 1, 4, 1, 4], [99, 82, 50, 14, 96, 46, 62, 1, 12, 42, 17, 41, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 5, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 38, 38, 25, 13, 4, 1, 1, 0, 1, 0, 8, 4, 4, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.subtract(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.add(beta, tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, grad))))))))))), tf.math.subtract(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))))))), tf.math.add(beta, alpha))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.square(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 0, 8, 6, 4, 6, 1, 9, 6, 9, 2, 1, 6, 9, 3, 9, 4, 2, 3, 0, 4, 7], [3, 1, 1, 1, 3, 3, 2, 3, 0, 0, 5, 1, 4, 1, 4, 2, 2, 1, 0, 0, 4, 1, 3, 2, 5, 0], [18, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [9, 5, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024544715881348, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [96, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 4, 2, 2, 2, 4, 3, 4, 5, 5, 9, 2, 1, 6, 9, 3, 9, 4, 2, 3, 0, 4, 0, 7, 1, 3, 8, 6, 6, 0, 8, 5, 3, 3, 4, 7, 8, 7, 9, 1, 7, 8, 1, 5, 2, 0, 0, 5, 2, 3, 8, 9, 3, 0, 9, 3, 5, 5, 8, 0, 4, 6], [4, 1, 3, 1, 3, 3, 3, 0, 1, 3, 1, 1, 4, 1, 4, 2], [18, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 5, 5], [1, 0, 0, 2, 2, 0, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 27, 27, 17, 10, 4, 1, 1, 0, 1, 0, 11, 6, 5, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), grad), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), beta), tf.math.square(beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 2, 2, 5, 1, 8, 3, 1, 4, 8, 2, 2, 1, 8, 8, 2, 2, 4, 2, 3, 0, 3, 2, 2, 7, 7, 2, 1, 9, 2, 7, 2, 2, 4, 1, 7, 4, 7, 7, 3, 8, 4, 1, 8, 1, 8, 2, 5, 4, 2, 4, 8, 9, 3, 4, 1, 3, 0, 5, 1, 9, 3, 5, 6, 5, 9, 6, 2, 0, 8, 1, 1, 3, 7, 1, 8, 9, 9, 2, 3, 0, 2, 4, 0, 9, 7, 9, 3, 2, 3, 0, 7, 0, 6, 8, 0, 3, 2, 8, 9], [3, 1, 1, 1, 1, 3, 2, 3, 3, 0, 2, 1, 4, 1, 4, 0, 5, 5, 1, 4, 2, 0, 1, 0, 2, 4, 2, 2, 4, 1, 0, 0, 0, 3, 1, 3, 1, 1, 4, 0, 0, 3, 4, 5, 3, 0, 4, 4, 2, 2, 5, 2, 1, 5, 5, 4, 3], [18, 82, 50, 61, 35, 3, 62, 1, 12, 42, 17, 61, 53, 1, 50, 66, 77, 56, 79], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 157, 157, 100, 57, 19, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 127, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, alpha), tf.math.sqrt(alpha))))), tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.sqrt(alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, grad))), tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha)), tf.math.add(beta, grad))), tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), tf.math.square(tf.math.subtract(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(grad, tf.math.square(tf.math.add(beta, beta)))))))))), beta)), tf.math.add(beta, grad)))))))))))))), alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))))))))), tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), alpha))), tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(grad, tf.math.negative(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad)))))), tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.multiply(grad, grad))))), beta), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(beta)))), alpha)))))), grad))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, grad))))))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08175934851169586, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 2, 2, 2, 1, 4, 3, 1, 5, 8, 2, 2, 5, 8, 8, 2, 9, 4, 2, 3, 0, 3, 2, 2, 7, 7, 2, 1, 9, 2, 1, 2, 2, 4, 2, 7, 4, 7, 1, 3, 8, 4, 3, 5, 4, 5, 5, 5, 4, 2, 4, 8, 9, 3, 4, 1, 4, 6, 5, 7, 9, 3, 5, 6, 2, 9, 6, 1, 0], [3, 1, 1, 2, 1, 3, 1, 3, 3, 0, 3, 0, 4, 1, 4, 0, 5, 5, 1, 4, 2, 0, 1, 5, 1, 3, 2, 2, 4, 3, 3, 0, 0, 3, 1, 3, 1, 1, 4, 3, 2, 3], [18, 56, 24, 61, 96, 46, 62, 1, 12, 42, 17, 41, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [8, 5, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 16, 11, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(alpha))))))))))))), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 2, 2, 1, 4, 3, 1, 5, 8, 2, 2, 2, 8, 8, 0, 9, 4, 2, 3, 0, 3, 2, 2, 7, 5, 2, 1, 9, 2, 7, 5, 2, 4, 2, 7, 4, 2, 7, 3, 8, 4, 6, 8, 4, 5, 0, 5, 4, 2, 4, 8, 9, 3, 0, 1, 3, 0, 5, 7, 9, 2, 5, 6, 5, 9, 6, 8, 0], [3, 1, 1, 3, 1, 3, 2, 3, 3, 0, 2, 1, 4, 1, 4, 0, 5, 5, 1, 4, 3, 0, 3, 3, 2, 4, 2, 2, 4, 1, 0, 0, 0, 3, 0, 3, 1, 1, 4, 0, 0, 3], [18, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [8, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 1, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [76, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 100, 100, 63, 37, 11, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.subtract(grad, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, alpha)))), tf.math.add(beta, grad)), tf.math.add(beta, alpha))))))), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), beta), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), alpha)))), tf.math.add(beta, grad)), tf.math.add(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.pow(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(grad)))))))))), tf.math.add(beta, tf.math.square(beta)))), tf.math.add(beta, tf.math.pow(tf.math.add(grad, tf.math.add(beta, beta)), tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), alpha), tf.math.square(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), grad)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(grad)))))))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [96, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 0, 2, 2, 4, 6, 6, 4, 5, 9, 2, 8, 6, 1, 6, 9, 1, 2, 3, 0, 4, 0, 7, 1, 3, 2, 9, 6, 0, 9, 5, 3, 3, 4, 7, 8, 7, 9, 1, 7, 8, 1, 0, 2, 0, 9, 5, 2, 3, 8, 9, 3, 0, 9, 3, 5, 5, 8, 0, 3, 6], [3, 1, 1, 1, 3, 3, 2, 2, 3, 0, 3, 1, 4, 1, 4, 0, 5, 5, 3, 4, 2, 0, 0, 5, 2, 4, 1, 4, 4, 1], [18, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [87], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 0, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.pow(tf.math.negative(alpha), tf.math.add(alpha, tf.math.add(beta, tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3024544715881348, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [2, 4, 0, 2, 6, 4, 6, 1, 5, 5, 9, 6, 1, 6, 9, 6, 4, 4, 3, 3, 0, 9, 6, 4, 2, 8, 6, 5, 2, 0, 2, 2, 2, 7, 0, 2, 8, 9, 2, 0, 2, 1, 4, 6, 5, 7, 2, 5, 5, 1, 8, 7, 4, 7, 4, 9, 3, 6, 8, 3, 7, 7, 3, 2, 7, 1, 2, 7, 5, 7, 1, 2, 1, 4, 6, 0, 0, 2, 2, 0], [2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 0, 1, 0, 1, 3, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0, 5, 2, 1, 2, 3, 2, 2, 3, 1, 1, 4], [17, 82, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [10, 5, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 35, 35, 22, 13, 5, 1, 0, 0, 0, 0, 4, 2, 2, 2], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, alpha))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), grad))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), alpha))), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302325963973999, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 0, 2, 2, 4, 6, 1, 5, 5, 9, 2, 1, 6, 9, 6, 9, 4, 2, 3, 0, 4, 7, 4, 2, 8, 6, 5, 2, 0, 2, 2, 2, 7, 0, 2, 8, 9, 2, 0, 2, 1, 4, 6, 5], [3, 1, 1, 1, 3, 3, 2, 3, 3, 0, 5, 1, 4, 1, 4, 2, 2, 1, 0, 0, 4, 1, 3, 2, 5, 0], [18, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 5, 43, 71, 34]], "fitness": -0.09828571230173111, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.310523509979248, 2.364384889602661, 2.482367515563965, 2.7443385124206543, 3.175856828689575, 3.7347450256347656, 4.431441783905029, 5.306055068969727], "accuracy": [0.08400475233793259, 0.09536388516426086, 0.0936468094587326, 0.10606260597705841, 0.09642054885625839, 0.09734513610601425, 0.09800554811954498, 0.09655263274908066], "val_loss": [2.3099305629730225, 2.3562374114990234, 2.4632484912872314, 2.653489828109741, 2.947857141494751, 3.3597352504730225, 3.893338441848755, 4.54583215713501], "val_accuracy": [0.08433333039283752, 0.0963333323597908, 0.09733333438634872, 0.09600000083446503, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [96, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 9, 0, 2, 6, 4, 4, 1, 9, 6, 9, 2, 1, 6, 9, 3, 9, 4, 2, 3, 0, 4, 7], [3, 1, 1, 1, 3, 3, 2, 3, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [18, 40, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 3, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.06314285844564438, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(alpha, tf.math.pow(alpha, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.3033034801483154, 2.3062942028045654, 2.305076837539673, 2.3079798221588135, 2.3133394718170166, 2.3152480125427246, 2.321678638458252, 2.32330060005188, 2.3295300006866455, 2.343139410018921, 2.362931251525879, 3750951124992.0, 2.8506968021392822, 5.669027328491211, 11.257074356079102, 16.994142532348633], "accuracy": [0.08915598690509796, 0.0870426595211029, 0.08360850811004639, 0.07977809756994247, 0.07687227427959442, 0.07819310575723648, 0.06577730923891068, 0.07607977837324142, 0.07713644206523895, 0.07330603897571564, 0.08228767663240433, 0.09140139818191528, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3004226684570312, 2.3021159172058105, 2.3037428855895996, 2.305626392364502, 2.308270215988159, 2.3110976219177246, 2.3148655891418457, 2.3192341327667236, 2.3257102966308594, 2.337952136993408, 2.371519088745117, NaN, 3.7362864017486572, 8.843771934509277, 14.571279525756836, 20.31709098815918], "val_accuracy": [0.03033333271741867, 0.024666666984558105, 0.01899999938905239, 0.018333332613110542, 0.024000000208616257, 0.032999999821186066, 0.0416666679084301, 0.0573333315551281, 0.09066666662693024, 0.09966666996479034, 0.10300000011920929, 0.10233332961797714, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 0, 2, 2, 4, 6, 1, 5, 5, 9, 2, 1, 6, 9, 6, 9, 4, 2, 3, 0, 4, 7, 4, 2, 8, 6, 5, 2, 0, 2, 2, 2, 7, 0, 2, 8, 9, 2, 0, 2, 1, 4, 6, 5], [3, 1, 1, 1, 3, 3, 2, 3, 3, 0, 5, 1, 4, 1, 4, 2, 2, 1, 0, 0, 4, 1, 3, 2, 5, 0], [17, 82, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [5, 5, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 5, 43, 71, 34]], "fitness": -0.03857142850756645, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.square(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.30275559425354, 2.304063320159912, 2.301492214202881, 2.3024280071258545, 2.3044044971466064, 2.3031749725341797], "accuracy": [0.09113723784685135, 0.09021265059709549, 0.09034473448991776, 0.08849557489156723, 0.0874389111995697, 0.08691058307886124], "val_loss": [2.299161195755005, 2.299161195755005, 2.299161195755005, 2.299161195755005, 2.299161195755005, 2.299161195755005], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 2, 1, 5, 0, 1, 5, 8, 2, 2, 1, 8, 8, 2, 1, 4, 2, 6, 0, 3, 2, 2, 7, 5, 5, 1, 9, 2, 7, 2, 2, 4, 2, 7, 4, 7, 7, 0, 8, 4, 1, 8, 4, 5, 5, 5, 4, 2, 4, 3, 9, 2, 4, 1, 3, 0, 5, 7, 9, 3, 5, 6, 5, 9, 6, 8, 0], [3, 1, 1, 1, 3, 3, 0, 3, 0, 0, 3, 1, 0, 3, 1, 3, 5, 0, 5, 2, 3, 3, 3, 3, 3, 2, 3, 3, 0, 0, 5, 1, 0, 0, 3, 5, 1, 3, 3, 0, 4, 0], [18, 82, 50, 97, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.03857142850756645, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 8, 6, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), alpha)), tf.math.subtract(tf.math.square(alpha), alpha)), tf.math.negative(tf.math.subtract(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30275559425354, 2.304063320159912, 2.301492214202881, 2.3024280071258545, 2.3044044971466064, 2.3031749725341797], "accuracy": [0.09113723784685135, 0.09021265059709549, 0.09034473448991776, 0.08849557489156723, 0.0874389111995697, 0.08691058307886124], "val_loss": [2.299161195755005, 2.299161195755005, 2.299161195755005, 2.299161195755005, 2.299161195755005, 2.299161195755005], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]