[{"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.7842857241630554, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2859918618671426, 2.243664254979718, 2.1859732040749913, 2.0953162605452924, 1.9594405566885518, 1.7771490289708012, 1.5914581978971365, 1.4207658625990565, 1.2967436119329503, 1.211744251236735, 1.1459786590725565, 1.0726966668963984, 1.0472819861199294, 1.0065209603643437, 0.9841110257660913, 0.960168465340158, 0.9151410334586719, 0.90925013637971, 0.8887182405170999, 0.8735831830133426, 0.8583476954226984, 0.84558468065903, 0.8336324427562729, 0.8264608632902569, 0.8069016278270308, 0.8005984125199052, 0.7888091811729444, 0.7907106431326326, 0.7788346598980024, 0.7750337216690657, 0.7699873373493022, 0.7561832113493356, 0.7540917572186623, 0.7424571700477801, 0.7518466617988322, 0.7302262355244911, 0.7271141869879165, 0.7323872410405534, 0.7233331018608354, 0.7137877535763324, 0.7110208973924261, 0.7105764377197459, 0.7006932784773812, 0.6975152507481432, 0.6999722109919825, 0.688420388354066, 0.6858440278275862, 0.6818604615496417, 0.6826028197259794, 0.6851499079870683, 0.6668056482730871, 0.6688556731526626, 0.6657501724276167, 0.6569091750724897, 0.6642343052358455, 0.6580808569080936, 0.6614858295230691, 0.6581299177502219, 0.6500314752643985, 0.648322805657977, 0.6478588438352118, 0.6427744391524733, 0.6436400987988277, 0.6410922559733246, 0.6477203755063183, 0.6350672083161747, 0.6307193183423411, 0.6228564811924335, 0.630332672876248, 0.6257680136104695, 0.6239810799721005, 0.6231215839939599], "accuracy": [0.13538502156734467, 0.23457930982112885, 0.31501781940460205, 0.3769647479057312, 0.42609959840774536, 0.46730947494506836, 0.4963677227497101, 0.537709653377533, 0.5616167187690735, 0.5809007883071899, 0.5978074073791504, 0.6247523427009583, 0.6365077495574951, 0.6483951807022095, 0.6516972780227661, 0.6642451286315918, 0.6763967871665955, 0.6785101294517517, 0.6844538450241089, 0.6876237988471985, 0.6921146512031555, 0.6983225345611572, 0.705058753490448, 0.7038700580596924, 0.7079645991325378, 0.7104741930961609, 0.7170783281326294, 0.7161537408828735, 0.7195879220962524, 0.7172104120254517, 0.7232862114906311, 0.7246070504188538, 0.7277770638465881, 0.7253995537757874, 0.7290979027748108, 0.7323999404907227, 0.7341170310974121, 0.7338528633117676, 0.7378153204917908, 0.7416457533836365, 0.737022876739502, 0.7417778372764587, 0.7412495017051697, 0.7458723783493042, 0.7386078238487244, 0.7519482374191284, 0.7490423917770386, 0.7485140562057495, 0.7541936039924622, 0.7500990629196167, 0.7497028112411499, 0.7589486241340637, 0.7564390301704407, 0.7561748623847961, 0.7576277852058411, 0.7593448758125305, 0.7593448758125305, 0.7585523724555969, 0.7581561207771301, 0.7605336308479309, 0.7680623531341553, 0.7680623531341553, 0.7651565074920654, 0.759080708026886, 0.765949010848999, 0.7732135653495789, 0.7642319202423096, 0.7689869403839111, 0.763967752456665, 0.7663452625274658, 0.7670056819915771, 0.7697794437408447], "val_loss": [1.9329440253121513, 1.8868345533098494, 1.8164072036743164, 1.7047860281808036, 1.5413719926561629, 1.341822794505528, 1.1564203330448695, 1.010976791381836, 0.9110942227499825, 0.8377109595707485, 0.7881289379937308, 0.7463446344648089, 0.7176379816872733, 0.6919392687933785, 0.6715808255331857, 0.6546267100742885, 0.638701149395534, 0.6317861761365619, 0.6177795103618077, 0.6051310300827026, 0.5954700367791312, 0.5894803149359567, 0.5824322359902518, 0.5751257623944964, 0.5681479488100324, 0.5642634970801217, 0.5575846093041557, 0.5546708617891584, 0.5515008824212211, 0.5442840542112078, 0.542520557131086, 0.5378255673817226, 0.533405031476702, 0.5279926913125175, 0.5275028773716518, 0.5211061409541539, 0.5201243673052106, 0.5170400312968663, 0.5139743089675903, 0.5107891048703875, 0.5095911196299961, 0.5091507605143956, 0.5055475234985352, 0.5013216393334525, 0.4982201712472098, 0.49465249265943256, 0.4947683300290789, 0.4922788143157959, 0.49142556531088694, 0.4903796740940639, 0.48644944599696566, 0.4836104086467198, 0.48085926260266987, 0.4809551920209612, 0.479030932698931, 0.48050849778311594, 0.47874232700892855, 0.47578026567186626, 0.4746107203619821, 0.47007509640284945, 0.47080246039799284, 0.468973125730242, 0.46692424161093576, 0.46659103461674284, 0.4667212452207293, 0.4638786997113909, 0.4632027660097395, 0.46064564159938265, 0.4598701170512608, 0.46180711473737446, 0.458852972303118, 0.4566036803381784], "val_accuracy": [0.34566667675971985, 0.4246666729450226, 0.48633334040641785, 0.5456666946411133, 0.5723333358764648, 0.5903333425521851, 0.625, 0.6669999957084656, 0.6859999895095825, 0.699999988079071, 0.6940000057220459, 0.7056666612625122, 0.7116666436195374, 0.7179999947547913, 0.7229999899864197, 0.7293333411216736, 0.7369999885559082, 0.7356666922569275, 0.7433333396911621, 0.749666690826416, 0.7590000033378601, 0.7456666827201843, 0.762666642665863, 0.7606666684150696, 0.7670000195503235, 0.750333309173584, 0.7670000195503235, 0.7649999856948853, 0.7710000276565552, 0.7730000019073486, 0.7673333287239075, 0.778333306312561, 0.7739999890327454, 0.7796666622161865, 0.7816666960716248, 0.7803333401679993, 0.7786666750907898, 0.7820000052452087, 0.7876666784286499, 0.7806666493415833, 0.7896666526794434, 0.7866666913032532, 0.7910000085830688, 0.7876666784286499, 0.7876666784286499, 0.7910000085830688, 0.7940000295639038, 0.7956666946411133, 0.796999990940094, 0.7923333048820496, 0.7903333306312561, 0.7979999780654907, 0.7979999780654907, 0.7976666688919067, 0.7956666946411133, 0.8003333210945129, 0.7973333597183228, 0.8013333082199097, 0.8023333549499512, 0.8006666898727417, 0.7986666560173035, 0.8026666641235352, 0.8029999732971191, 0.8019999861717224, 0.8046666383743286, 0.8009999990463257, 0.8113333582878113, 0.8023333549499512, 0.8059999942779541, 0.8050000071525574, 0.8073333501815796, 0.8026666641235352]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 9, 2, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.48828572034835815, "mapping_values": [1, 6, 6, 5, 1, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3322140542570593, 2.869050343873368, 2.258143598046742, 2.3296907364401, 2.3326011917074956, 2.306686810813544, 2.3037187159100796, 2.3030387861160886, 2.303064055052951], "accuracy": [0.19601109623908997, 0.16880200803279877, 0.1554616242647171, 0.13472460210323334, 0.16800950467586517, 0.09192973375320435, 0.09113723784685135, 0.09536388516426086, 0.09602430462837219], "val_loss": [1.9558147702898299, 1.9789342880249023, 2.0949081012180875, 1.920555864061628, 1.9752076012747628, 1.9737277712140764, 1.97356230872018, 1.973618643624442, 1.9735757963997977], "val_accuracy": [0.1693333387374878, 0.20200000703334808, 0.28033334016799927, 0.3473333418369293, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 5, 2, 9, 4, 5, 4, 2, 4, 9, 5, 3, 8, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [0, 65, 76, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.41514286398887634, "mapping_values": [1, 8, 8, 5, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3019536912338907, 2.301262559419641, 2.300511609325477, 2.298787121854013, 2.2996601782864143, 2.298534261237172, 2.2972460375674855, 2.2959770956972823, 2.2957706156345075, 2.2949578898410596, 2.2950049040261167, 2.292745145178742, 2.292546468876325, 2.29257337150478, 2.292340467729116, 2.2910554162137435, 2.288720554884131, 2.2873383952705, 2.2886127023932454, 2.287356201557829, 2.2855056159453166, 2.286498344648374, 2.2850564644714906, 2.2866261982568235, 2.283517132314315, 2.283676666433092, 2.282442777290037, 2.282377600402187, 2.2805393497311854, 2.2812363687932704, 2.2785238575044167, 2.27894244832039, 2.277494410482207, 2.2763642977257414, 2.2769691366261937, 2.2739445060046752, 2.2750359913928397, 2.274625495755205, 2.272416711593616, 2.2719544459327716, 2.2714922537404973, 2.27172848715711, 2.2703095484781324, 2.269532558578211, 2.2674190300866015, 2.2679979964931327, 2.266094164274561, 2.2656321968337596, 2.2643575859485505, 2.2661148361195473, 2.2624943125060586, 2.26254483589391, 2.263017155412103, 2.2592261900062245, 2.2607771162154764, 2.2587215348383407, 2.2598520784865532, 2.2584225592312794, 2.2580475169496608, 2.2544645339175773, 2.2539749686838597, 2.2543729431420396, 2.2532049909228142, 2.253510762136437, 2.2534949786753433, 2.251598439401151, 2.2493815764050678, 2.2482973889998474, 2.2487874639788483, 2.2486476610050445, 2.246299994478388, 2.2444260446953814, 2.2453773936827295, 2.244231152512441, 2.2430464485144777, 2.2410390111575307, 2.240884361990124, 2.2407618451978175, 2.237727129133449, 2.2373285176117563, 2.2386383918361137, 2.2378418800805964, 2.236035352306847, 2.233842838394675, 2.2345515022093925, 2.2318415397414286, 2.2322823617121705, 2.228585760717174, 2.2295630482351303, 2.227813061753347, 2.226638327531685, 2.228054355683816, 2.225422559176863, 2.226282387739632, 2.222116224171542, 2.22061258467071, 2.222061883472669, 2.217872106482592, 2.2174839304895166, 2.218209792783216], "accuracy": [0.09126931428909302, 0.09259014576673508, 0.09206181764602661, 0.09919429570436478, 0.10091137140989304, 0.09840179979801178, 0.10830801725387573, 0.1088363528251648, 0.10645885765552521, 0.11174217611551285, 0.1072513535618782, 0.11861048638820648, 0.1142517477273941, 0.11293092370033264, 0.10777968913316727, 0.11913882195949554, 0.1212521493434906, 0.1274600476026535, 0.12442214041948318, 0.12693171203136444, 0.13076211512088776, 0.1332716941833496, 0.13340377807617188, 0.13129045069217682, 0.1406683325767517, 0.13881917297840118, 0.14357416331768036, 0.14093250036239624, 0.1434420794248581, 0.14674416184425354, 0.14991414546966553, 0.1476687341928482, 0.15414080023765564, 0.15400871634483337, 0.15559370815753937, 0.16114120185375214, 0.16140536963939667, 0.15757495164871216, 0.17223615944385529, 0.1690661758184433, 0.175670325756073, 0.1706511676311493, 0.17619864642620087, 0.17593449354171753, 0.1846519559621811, 0.18663319945335388, 0.18201030790805817, 0.18835029006004333, 0.19931316375732422, 0.18201030790805817, 0.2005019187927246, 0.19363360106945038, 0.19535067677497864, 0.20842689275741577, 0.2001056671142578, 0.20684190094470978, 0.20737022161483765, 0.21001188457012177, 0.2075023055076599, 0.21199312806129456, 0.21516312658786774, 0.2148989588022232, 0.22137102484703064, 0.21965394914150238, 0.21133272349834442, 0.22084268927574158, 0.22784309089183807, 0.23378682136535645, 0.2277110069990158, 0.22255976498126984, 0.23286223411560059, 0.23193766176700592, 0.2382776439189911, 0.2343151569366455, 0.23774930834770203, 0.24554219841957092, 0.23946638405323029, 0.23761722445487976, 0.24725927412509918, 0.25320300459861755, 0.2405230551958084, 0.2436930388212204, 0.2541275918483734, 0.26363757252693176, 0.2522784173488617, 0.261260062456131, 0.2550521790981293, 0.2681283950805664, 0.25597676634788513, 0.2731475234031677, 0.26284506916999817, 0.26284506916999817, 0.2674679756164551, 0.26376965641975403, 0.2801479399204254, 0.2805441915988922, 0.27143046259880066, 0.2818650007247925, 0.28463876247406006, 0.2775062620639801], "val_loss": [1.969858033316476, 1.96912567956107, 1.9684013639177596, 1.96768399647304, 1.9669572966439384, 1.966243062700544, 1.965524128505162, 1.964815957205636, 1.9640918459211076, 1.963371413094657, 1.962658064705985, 1.961944920676095, 1.961235591343471, 1.960519450051444, 1.9598033768790108, 1.9590861456734794, 1.9583655766078405, 1.95765597479684, 1.9569462367466517, 1.9562315259660994, 1.955524512699672, 1.9548138209751673, 1.9540979521615165, 1.9533894402640206, 1.9526778629847936, 1.951958247593471, 1.9512513024466378, 1.9505311420985632, 1.949819496699742, 1.949105875832694, 1.9483921868460519, 1.9476758411952428, 1.946951253073556, 1.9462282317025321, 1.945514406476702, 1.944777352469308, 1.9440513338361467, 1.9433259282793318, 1.9425952093941825, 1.9418530464172363, 1.9411161286490304, 1.9403887476239885, 1.9396539415631975, 1.93890380859375, 1.9381485666547502, 1.9373986380440849, 1.9366521154131209, 1.9358904021126884, 1.9351306642804826, 1.9343724931989397, 1.9335969516209193, 1.9328257696969169, 1.9320566313607352, 1.9312754358564104, 1.9304940359933036, 1.9297146797180176, 1.9289301463535853, 1.928145408630371, 1.9273531777518136, 1.926551137651716, 1.925743920462472, 1.924938542502267, 1.9241153172084264, 1.9233065332685197, 1.9224961144583566, 1.9216741834368025, 1.9208452360970634, 1.920004027230399, 1.9191622734069824, 1.9183192934308733, 1.9174766540527344, 1.9166147368294852, 1.9157625607081823, 1.9148971693856376, 1.914022445678711, 1.913144315992083, 1.9122486795697893, 1.9113552910940987, 1.9104516165597099, 1.909543786730085, 1.9086361612592424, 1.907715116228376, 1.906799588884626, 1.905857835497175, 1.9049171720232283, 1.9039621353149414, 1.9030085972377233, 1.9020427976335799, 1.9010795184544154, 1.9000942366463798, 1.899106570652553, 1.8981266702924455, 1.8971250397818429, 1.8961293356759208, 1.8951078142438615, 1.8940784590584892, 1.8930437905447823, 1.8919966561453683, 1.890939371926444, 1.8898819514683314], "val_accuracy": [0.0430000014603138, 0.049666665494441986, 0.052666667848825455, 0.058666665107011795, 0.061666667461395264, 0.06566666811704636, 0.07199999690055847, 0.07800000160932541, 0.0833333358168602, 0.09000000357627869, 0.09666666388511658, 0.10733333230018616, 0.1120000034570694, 0.11966666579246521, 0.1276666671037674, 0.13300000131130219, 0.13966666162014008, 0.14733333885669708, 0.15466666221618652, 0.16233333945274353, 0.16899999976158142, 0.17466667294502258, 0.1850000023841858, 0.19099999964237213, 0.19900000095367432, 0.2070000022649765, 0.2133333384990692, 0.21966665983200073, 0.2226666659116745, 0.2293333262205124, 0.23499999940395355, 0.23899999260902405, 0.2436666637659073, 0.24966666102409363, 0.25833332538604736, 0.2639999985694885, 0.27033331990242004, 0.2759999930858612, 0.2826666533946991, 0.289000004529953, 0.29466667771339417, 0.29733332991600037, 0.3016666769981384, 0.3073333203792572, 0.3113333284854889, 0.3153333365917206, 0.3176666796207428, 0.32366666197776794, 0.32866665720939636, 0.3323333263397217, 0.33533334732055664, 0.34066668152809143, 0.3449999988079071, 0.3486666679382324, 0.34933334589004517, 0.3526666760444641, 0.3553333282470703, 0.3580000102519989, 0.36033332347869873, 0.3619999885559082, 0.3646666705608368, 0.3656666576862335, 0.36800000071525574, 0.3686666786670685, 0.37066665291786194, 0.3736666738986969, 0.37566667795181274, 0.3779999911785126, 0.37833333015441895, 0.3799999952316284, 0.3816666603088379, 0.382666677236557, 0.38466668128967285, 0.38600000739097595, 0.3883333206176758, 0.38999998569488525, 0.3919999897480011, 0.39366665482521057, 0.39500001072883606, 0.3959999978542328, 0.3986666798591614, 0.39933332800865173, 0.4009999930858612, 0.4026666581630707, 0.4036666750907898, 0.40400001406669617, 0.406333327293396, 0.40799999237060547, 0.40933331847190857, 0.40966665744781494, 0.4113333225250244, 0.4143333435058594, 0.41499999165534973, 0.4153333306312561, 0.4189999997615814, 0.42233332991600037, 0.42399999499320984, 0.42533332109451294, 0.4266666769981384, 0.4269999861717224]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 1, 1, 3, 1, 8, 0, 8, 5, 5, 0, 3, 8, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.32171428203582764, "mapping_values": [1, 32, 32, 22, 10, 5, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), tf.math.pow(tf.math.square(grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), tf.math.add(alpha, grad))))), tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.math.square(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3288430531798667, 2.247973140802964, 2.3563047366733674, 2.265781427024929, 2.2544439103483382, 2.304172014405998, 2.3009868314347766, 2.2904588340720986, 2.3048698427245413], "accuracy": [0.1974640041589737, 0.2082948088645935, 0.10460969805717468, 0.15863162279129028, 0.1500462293624878, 0.09893012791872025, 0.11121384054422379, 0.11649715900421143, 0.09840179979801178], "val_loss": [1.944119589669364, 2.2311388424464633, 1.9734343801225935, 1.733536856515067, 1.9750464984348841, 1.9733151708330428, 1.9514493261064803, 1.9748563766479492, 1.9738334928240096], "val_accuracy": [0.12099999934434891, 0.11500000208616257, 0.10400000214576721, 0.29899999499320984, 0.10400000214576721, 0.1003333330154419, 0.09733333438634872, 0.10400000214576721, 0.09700000286102295]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 6, 5, 0, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 9, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [79, 25, 50, 71, 34]], "fitness": -0.21142856776714325, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.832230277049496, 2.371667327630191, 2.3028963982011854, 2.2884881116332725, 2.3045342510182074, 2.302007624438851], "accuracy": [0.18438778817653656, 0.15215955674648285, 0.10302469879388809, 0.14119666814804077, 0.1026284471154213, 0.10751552134752274], "val_loss": [1.7941868645804269, 1.975497041429792, 1.9633357184273856, 1.9750847816467285, 1.9736658505031042, 1.9723613602774483], "val_accuracy": [0.22433333098888397, 0.09966666996479034, 0.09833333641290665, 0.09466666728258133, 0.09966666996479034, 0.18333333730697632]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 3, 5, 5, 3, 6, 2, 0, 8, 1, 5, 2, 9, 8, 9, 2, 6, 8, 3, 5, 0, 2, 0, 2, 8, 8], [2, 2, 0, 1, 2, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 35, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.11828571557998657, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 8, 6, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), sigma), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.4066973576818427, 3.93960030071645, 11.602497743121102, 11.644709870768356, 15.884726980343125, 16.222115192934822, 24.60827743889019, 33.808436087267104, 126.45242251122963, 123.28149900485528, 870.1551660636727, 1242.3147769797479, 2332.18273650071, 2370.6209593130347, 2349.8684612491334], "accuracy": [0.045568618923425674, 0.05732399970293045, 0.08506141602993011, 0.08268392831087112, 0.08017434924840927, 0.08083476126194, 0.080042265355587, 0.08955223858356476, 0.11134592443704605, 0.107647605240345, 0.09259014576673508, 0.08572183549404144, 0.07026813179254532, 0.06379606574773788, 0.06617355346679688], "val_loss": [2.465353352682931, 3.42641053880964, 8.340171269008092, 11.868006025041852, 11.584211894444056, 10.42741230555943, 22.40329360961914, 44.30802699497768, 87.01700701032367, 72.98477390834263, 666.3134416852679, 1462.406529017857, 1504.7970493861608, 1540.8317173549108, 1578.0914132254463], "val_accuracy": [0.016333334147930145, 0.07100000232458115, 0.09133332967758179, 0.09566666930913925, 0.09700000286102295, 0.09799999743700027, 0.09200000017881393, 0.09566666930913925, 0.11866666376590729, 0.12099999934434891, 0.08666666597127914, 0.014666666276752949, 0.016333334147930145, 0.01666666753590107, 0.017000000923871994]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 0, 3, 6, 2, 0, 8, 1, 5, 2, 9, 8, 9, 2, 9, 8, 0, 5, 0, 2, 0, 2, 8, 8], [2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 1, 2, 9, 1, 5], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 13, 8, 5, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.square(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(sigma, tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), beta)), beta), tf.math.subtract(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.square(alpha))))", "other_info": {"loss": [2.302846167711392, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [80, 65, 59, 52, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [11211.002841824285, 2.423384236747783, 2.3551950730258415, 2.3218484003593294, 2.308526695018683, 2.304407796650641], "accuracy": [0.10038304328918457, 0.09840179979801178, 0.09774138033390045, 0.09866596013307571, 0.09642054885625839, 0.09694888442754745], "val_loss": [2.1081491879054477, 2.035496779850551, 1.9972938128880091, 1.981250422341483, 1.9755479948861259, 1.9740381240844727], "val_accuracy": [0.10400000214576721, 0.09700000286102295, 0.09700000286102295, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 9, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [36, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 6, 1, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), grad), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.084746502047564, 10.852943803592995, 28.495163707559325, 58.41685355038707, 103.30485011463419, 163.50415822256983], "accuracy": [0.09826971590518951, 0.09985470771789551, 0.10077928751707077, 0.09985470771789551, 0.0956280529499054, 0.09985470771789551], "val_loss": [4.006302016122, 12.260041645595006, 27.41012409755162, 50.93384552001953, 84.57352774483817, 130.31105259486608], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 6, 2, 9, 4, 6, 2, 0, 4, 9, 5, 1, 8, 1, 0, 1, 8, 0, 2, 5, 5, 0, 3, 8, 8], [2, 2, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [60, 49, 59, 42, 60, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 34, 34, 23, 11, 5, 12, 12, 8, 4, 4, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.negative(grad)))), alpha))))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), grad)))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 9, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [4, 5, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [36, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 6, 1, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), grad), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3072580934720284, 2.3522679475099815, 2.476681596803596, 2.64718558063691, 2.8489844412646823, 3.0503336120165097, 3.2582598311349056, 3.462564907904078, 3.6639026265024053], "accuracy": [0.09840179979801178, 0.10011887550354004, 0.09747721254825592, 0.09325055778026581, 0.1018359512090683, 0.09747721254825592, 0.09509972482919693, 0.09919429570436478, 0.09747721254825592], "val_loss": [1.9905609403337752, 2.072892529623849, 2.2137245450701033, 2.3858041082109724, 2.558985846383231, 2.7365386145455495, 2.9192000116620744, 3.095069544655936, 3.2648731640407016], "val_accuracy": [0.09733333438634872, 0.09700000286102295, 0.09700000286102295, 0.09966666996479034, 0.09700000286102295, 0.0976666659116745, 0.09966666996479034, 0.09833333641290665, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 9, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [36, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(grad))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [405766.76104921167, 7757134.4665169725, 35324902.19891692, 98543900.64192313, 212953512.23352265, 385383479.43257165], "accuracy": [0.10289261490106583, 0.09998679161071777, 0.10077928751707077, 0.10011887550354004, 0.09589222073554993, 0.09985470771789551], "val_loss": [1527204.7857142857, 12161569.42857143, 40983974.85714286, 97075280.0, 189516265.14285713, 327388059.4285714], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 1, 5, 2, 9, 4, 5, 2, 0, 1, 9, 5, 1, 8, 1, 3, 2, 8, 0, 8, 5, 2, 4, 2, 8, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [48, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 9, 9, 2, 9], [2, 1, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.3027817029301767, 2.3026042207199677, 2.3026004148716814, 2.3026065271858998, 2.3026012697901312, 2.3026106991173965], "accuracy": [0.09430722147226334, 0.09642054885625839, 0.09536388516426086, 0.09417514503002167, 0.09800554811954498, 0.09998679161071777], "val_loss": [1.9736437797546387, 1.9736473900931222, 1.9736473900931222, 1.9736457552228654, 1.9736483437674386, 1.9736477306910925], "val_accuracy": [0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 2, 5, 5, 9, 1, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 9, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 1, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.square(grad)))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06392814964056015, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 8, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 7, 2, 1, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(grad)))))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.330299237148873, 2.451363380385774, 30.46096476971938, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05005943775177002, 0.01439704094082117, 0.05124818533658981, 0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0417484555925642, 2.258669240134103, 54846.34263392857, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.00566666666418314, 0.00800000037997961, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 9, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [24, 25, 50, 71, 34]], "fitness": -0.09942857176065445, "mapping_values": [1, 7, 7, 6, 1, 2, 12, 12, 8, 4, 4, 3, 1, 1, 0, 0, 4, 4, 0, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), grad), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.306903926813843, 2.3364504634460137, 2.402307498472368, 2.530800714878248, 2.755176803234656, 3.027223814180924, 3.425826675935019, 3.8781936181267067, 4.451254376582875, 5.111477210647347], "accuracy": [0.08981640636920929, 0.09259014576673508, 0.09034473448991776, 0.09747721254825592, 0.09760929644107819, 0.09985470771789551, 0.09760929644107819, 0.1006472036242485, 0.09945846349000931, 0.1002509593963623], "val_loss": [1.977090290614537, 1.9956238610403878, 2.040999071938651, 2.1198356492178783, 2.241433484213693, 2.414110388074602, 2.644099712371826, 2.934994561331613, 3.287527220589774, 3.700692994253976], "val_accuracy": [0.06233333423733711, 0.09666666388511658, 0.09866666793823242, 0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 8, 1, 3, 1, 5, 2, 8, 5, 5, 0, 3, 8, 8], [2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [77, 52, 59, 8, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.08857142925262451, "mapping_values": [1, 32, 32, 22, 10, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.pow(tf.math.square(grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.square(tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.square(grad), tf.math.add(alpha, alpha))))), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(alpha, grad))))), grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.30098289335566, 2.2989751457176064, 2.299982412002185, 2.300705148023999, 2.301420723048845, 2.3016503942389104, 2.301326239444419], "accuracy": [0.09338264167308807, 0.09509972482919693, 0.10077928751707077, 0.09285431355237961, 0.08334434032440186, 0.0820235088467598, 0.08651433140039444], "val_loss": [1.968095302581787, 1.9689405305044991, 1.9708236285618372, 1.971945353916713, 1.9722121783665247, 1.9721878596714564, 1.9723787307739258], "val_accuracy": [0.057999998331069946, 0.0949999988079071, 0.08133333176374435, 0.06300000101327896, 0.05900000035762787, 0.07233333587646484, 0.07133333384990692]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 4, 5, 5, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 39, 59, 42, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 6, 9, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.square(tf.math.square(grad)))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302272611432119, 2.3023636366917613, 2.30237868140481, 2.3013984919255672, 2.303073126012308, 2.3026744148844913], "accuracy": [0.09047681838274002, 0.09021265059709549, 0.08796724677085876, 0.0940430611371994, 0.09179764986038208, 0.08942015469074249], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 0, 5, 8, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [80, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 6, 6, 4, 2, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302272611432119, 2.3023636366917613, 2.30237868140481, 2.3013984919255672, 2.303073126012308, 2.3026744148844913], "accuracy": [0.09047681838274002, 0.09021265059709549, 0.08796724677085876, 0.0940430611371994, 0.09179764986038208, 0.08942015469074249], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [42, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 6, 1, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.square(sigma), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3023736738273732, 2.3027028776729868, 2.302915577213951, 2.3021333264857393, 2.304042101914085, 2.3039589694084475], "accuracy": [0.09034473448991776, 0.08928807079792023, 0.0874389111995697, 0.09285431355237961, 0.09166556596755981, 0.08651433140039444], "val_loss": [1.9707903861999512, 1.9710036686488561, 1.9711713790893555, 1.9713561875479562, 1.971536704472133, 1.9717590468270438], "val_accuracy": [0.03866666555404663, 0.038333334028720856, 0.03766666725277901, 0.035999998450279236, 0.03500000014901161, 0.03200000151991844]}}]