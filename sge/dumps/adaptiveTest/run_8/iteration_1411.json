[{"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 6, 2, 0, 3, 2, 5, 3, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 5, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 69, 20, 87, 76, 68, 45, 51, 66, 54, 91, 82, 43]], "fitness": -0.8305714130401611, "mapping_values": [1, 1, 1, 0, 1, 0, 36, 36, 25, 11, 6, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), beta)))))))))))))))), alpha)))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.1392529010772705, 2.1606523990631104, 2.073535919189453, 1.4287524223327637, 1.2439042329788208, 0.9785672426223755, 0.8495215773582458, 0.8473629355430603, 0.7409241795539856, 0.6963951587677002, 0.7023398280143738, 0.6614328622817993, 0.6437621116638184, 0.603222131729126, 0.6187265515327454, 0.5866576433181763, 0.5615854263305664, 0.5374833941459656, 0.5441192984580994, 0.536171019077301, 0.5071528553962708, 0.5031583309173584, 0.49579983949661255, 0.48073050379753113, 0.47243738174438477, 0.44698286056518555, 0.46082237362861633, 0.4363965094089508, 0.4622415602207184, 0.4298550486564636, 0.41714802384376526, 0.4120093584060669, 0.4268905520439148, 0.4262377917766571], "accuracy": [0.26839256286621094, 0.24659886956214905, 0.3241315484046936, 0.5008585453033447, 0.5703341960906982, 0.6189407110214233, 0.667811393737793, 0.6793025732040405, 0.713908314704895, 0.7360982894897461, 0.7329282760620117, 0.7434949278831482, 0.7515519857406616, 0.7685906887054443, 0.7629110813140869, 0.7759873270988464, 0.7895918488502502, 0.8006868362426758, 0.7923656105995178, 0.7981772422790527, 0.813498854637146, 0.8075551390647888, 0.8132346868515015, 0.8280280232429504, 0.8201030492782593, 0.8378021121025085, 0.8255184292793274, 0.8392550349235535, 0.8284242749214172, 0.8436138033866882, 0.8521991968154907, 0.8486329317092896, 0.8417646288871765, 0.8399154543876648], "val_loss": [2.2913906574249268, 2.76855206489563, 1.5359982252120972, 1.1365796327590942, 1.103746771812439, 0.7393017411231995, 0.81142657995224, 0.6699529886245728, 0.6620772480964661, 0.7495640516281128, 0.6570850610733032, 0.6457918286323547, 0.5640237927436829, 0.5465001463890076, 0.5726253986358643, 0.5561094284057617, 0.5100662112236023, 0.570258378982544, 0.4918988347053528, 0.5073386430740356, 0.4640964865684509, 0.46587759256362915, 0.4636777341365814, 0.46083471179008484, 0.44431155920028687, 0.43892037868499756, 0.4674610197544098, 0.4901891350746155, 0.41642895340919495, 0.4739334285259247, 0.4739990234375, 0.4920690059661865, 0.4447466731071472, 0.4487612247467041], "val_accuracy": [0.109333336353302, 0.10366666316986084, 0.4676666557788849, 0.6439999938011169, 0.5833333134651184, 0.7073333263397217, 0.6963333487510681, 0.734666645526886, 0.7239999771118164, 0.6983333230018616, 0.7390000224113464, 0.7266666889190674, 0.7820000052452087, 0.7923333048820496, 0.7896666526794434, 0.781333327293396, 0.8090000152587891, 0.7683333158493042, 0.8169999718666077, 0.8109999895095825, 0.8353333473205566, 0.828000009059906, 0.8356666564941406, 0.824999988079071, 0.8403333425521851, 0.8399999737739563, 0.8173333406448364, 0.8190000057220459, 0.8489999771118164, 0.8246666789054871, 0.824999988079071, 0.8276666402816772, 0.8316666483879089, 0.8426666855812073]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [44, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.8299999833106995, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [1.9460114240646362, 1.3814544677734375, 1.0255593061447144, 0.8462960720062256, 0.7948229908943176, 0.7551782727241516, 0.7341195940971375, 0.698448657989502, 0.6605352163314819, 0.6174748539924622, 0.644812285900116, 0.6083952784538269, 0.592797577381134, 0.5840933918952942, 0.568758487701416, 0.5733464956283569, 0.5436156988143921, 0.540069580078125, 0.5215142965316772, 0.5310344696044922, 0.4992881417274475, 0.49892354011535645, 0.4887317717075348, 0.4902794659137726, 0.46562811732292175, 0.4679237902164459, 0.4619729220867157, 0.4468466639518738, 0.456778347492218, 0.42211467027664185, 0.42850321531295776, 0.43230462074279785, 0.4335002303123474, 0.4175705015659332], "accuracy": [0.3494914770126343, 0.5198785066604614, 0.614317774772644, 0.6787742972373962, 0.7028133869171143, 0.7086250185966492, 0.7186633348464966, 0.7309470176696777, 0.7477215528488159, 0.7660810947418213, 0.7569673657417297, 0.76542067527771, 0.7823272943496704, 0.7726852297782898, 0.7880068421363831, 0.787082314491272, 0.791969358921051, 0.7918372750282288, 0.8026680946350098, 0.7976489067077637, 0.816008448600769, 0.8131026029586792, 0.8208954930305481, 0.8168009519577026, 0.8309338092803955, 0.8247259259223938, 0.8300092220306396, 0.8330471515655518, 0.828820526599884, 0.8433496356010437, 0.8417646288871765, 0.8412362933158875, 0.8392550349235535, 0.8436138033866882], "val_loss": [1.5738818645477295, 0.8957094550132751, 0.8100775480270386, 0.6674776077270508, 0.6757287383079529, 0.6361886262893677, 0.6794201135635376, 0.6082372069358826, 0.5953976511955261, 0.5797439217567444, 0.6066237092018127, 0.5654782652854919, 0.5451088547706604, 0.5334427356719971, 0.5340082049369812, 0.5505789518356323, 0.5167561173439026, 0.48948168754577637, 0.4779359996318817, 0.4907206892967224, 0.5385090112686157, 0.48196035623550415, 0.4669344425201416, 0.44973763823509216, 0.4446670413017273, 0.45873844623565674, 0.48422420024871826, 0.4901729226112366, 0.4265357553958893, 0.4222842752933502, 0.4111054241657257, 0.4349101185798645, 0.4230109751224518, 0.45200610160827637], "val_accuracy": [0.42133334279060364, 0.6643333435058594, 0.6596666574478149, 0.7386666536331177, 0.7213333249092102, 0.750333309173584, 0.7323333621025085, 0.7540000081062317, 0.7726666927337646, 0.7716666460037231, 0.7559999823570251, 0.7873333096504211, 0.7866666913032532, 0.7919999957084656, 0.8069999814033508, 0.7773333191871643, 0.7933333516120911, 0.8149999976158142, 0.8296666741371155, 0.8196666836738586, 0.7900000214576721, 0.8196666836738586, 0.8379999995231628, 0.8373333215713501, 0.8473333120346069, 0.8326666951179504, 0.8033333420753479, 0.8149999976158142, 0.8510000109672546, 0.846666693687439, 0.8496666550636292, 0.8476666808128357, 0.8510000109672546, 0.8296666741371155]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [44, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.8214285969734192, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [1.946020483970642, 1.3819466829299927, 1.024457573890686, 0.8519559502601624, 0.8180692195892334, 0.7721502780914307, 0.7120987772941589, 0.7074334025382996, 0.6590760946273804, 0.6102254390716553, 0.6459575295448303, 0.6106079816818237, 0.5835358500480652, 0.5847469568252563, 0.5964508652687073, 0.5584450364112854, 0.5375809669494629, 0.5542543530464172, 0.5093191266059875, 0.5323628187179565, 0.5051606297492981, 0.4970772862434387, 0.48348891735076904, 0.49218130111694336, 0.45787811279296875, 0.4611647427082062, 0.46204429864883423, 0.4464515447616577, 0.45830655097961426, 0.42830783128738403], "accuracy": [0.3494914770126343, 0.520142674446106, 0.6174877882003784, 0.677189290523529, 0.6929071545600891, 0.7013604640960693, 0.7308149337768555, 0.7244749665260315, 0.7448157668113708, 0.7683265209197998, 0.7535332441329956, 0.7647602558135986, 0.7860256433486938, 0.7779685854911804, 0.7712323069572449, 0.7927618622779846, 0.7993659973144531, 0.7890635132789612, 0.8088759779930115, 0.7944789528846741, 0.8086118102073669, 0.8138951063156128, 0.8228767514228821, 0.8146876096725464, 0.832650899887085, 0.8335754871368408, 0.8267071843147278, 0.8333113193511963, 0.8284242749214172, 0.8392550349235535], "val_loss": [1.574208378791809, 0.8940439224243164, 0.8304616808891296, 0.6791278719902039, 0.711845874786377, 0.6510000228881836, 0.6369456648826599, 0.6115483641624451, 0.5779930949211121, 0.5824277997016907, 0.6088266372680664, 0.5687722563743591, 0.5768805742263794, 0.5429746508598328, 0.5254290103912354, 0.548022449016571, 0.49382999539375305, 0.4886583685874939, 0.46914204955101013, 0.4957228899002075, 0.5394434928894043, 0.4676911234855652, 0.46157893538475037, 0.4495697319507599, 0.4413951337337494, 0.4568747282028198, 0.49427497386932373, 0.4750020205974579, 0.43144938349723816, 0.4463459551334381], "val_accuracy": [0.4193333387374878, 0.6646666526794434, 0.6579999923706055, 0.7266666889190674, 0.7163333296775818, 0.746666669845581, 0.7570000290870667, 0.7463333606719971, 0.7876666784286499, 0.7713333368301392, 0.7536666393280029, 0.7889999747276306, 0.7803333401679993, 0.7956666946411133, 0.8063333630561829, 0.7786666750907898, 0.8113333582878113, 0.8169999718666077, 0.8343333601951599, 0.8136666417121887, 0.7796666622161865, 0.8259999752044678, 0.8389999866485596, 0.8403333425521851, 0.8513333201408386, 0.8366666436195374, 0.7993333339691162, 0.8223333358764648, 0.8416666388511658, 0.8403333425521851]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [51, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.74657142162323, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.1921675205230713, 2.1559243202209473, 2.1292967796325684, 2.139096975326538, 2.2500383853912354, 1.8626724481582642, 1.243622064590454, 0.9786027073860168, 0.8884023427963257, 0.8106127977371216, 0.7546020746231079, 0.7173054218292236, 0.7138761281967163, 0.6867753267288208, 0.6669968366622925, 0.657008707523346, 0.6206735968589783, 0.6064131855964661, 0.5963926911354065, 0.5951988697052002, 0.588548481464386, 0.570519208908081, 0.5399417281150818, 0.5551488995552063, 0.5274330377578735, 0.5128322839736938, 0.5043712854385376, 0.514845073223114], "accuracy": [0.24039097130298615, 0.22599393129348755, 0.2569013237953186, 0.2467309534549713, 0.19957733154296875, 0.3815876245498657, 0.5811649560928345, 0.6523576974868774, 0.6770572066307068, 0.7013604640960693, 0.7231541275978088, 0.7363624572753906, 0.7390040755271912, 0.7503632307052612, 0.7588165402412415, 0.761590301990509, 0.7633073329925537, 0.7779685854911804, 0.7802139520645142, 0.7745344042778015, 0.7853652238845825, 0.7869502305984497, 0.7994980812072754, 0.7950072884559631, 0.8004226684570312, 0.8038568496704102, 0.8132346868515015, 0.8076872229576111], "val_loss": [2.230103015899658, 2.267094373703003, 2.2957701683044434, 2.221534013748169, 1.959578275680542, 1.45274817943573, 1.1762981414794922, 0.7902168035507202, 0.788258969783783, 0.7461546063423157, 0.6222921013832092, 0.6340556740760803, 0.6113126277923584, 0.5870963335037231, 0.5463024377822876, 0.5697069764137268, 0.5928523540496826, 0.5322011113166809, 0.5316005945205688, 0.5255277752876282, 0.5677407383918762, 0.5025272965431213, 0.4803280532360077, 0.51435786485672, 0.5181649327278137, 0.5231791138648987, 0.4760264456272125, 0.5172958374023438], "val_accuracy": [0.15666666626930237, 0.30433332920074463, 0.11566666513681412, 0.10300000011920929, 0.4309999942779541, 0.6119999885559082, 0.5613333582878113, 0.7006666660308838, 0.7093333601951599, 0.6859999895095825, 0.7699999809265137, 0.75, 0.7850000262260437, 0.7743333578109741, 0.8023333549499512, 0.7820000052452087, 0.7833333611488342, 0.8086666464805603, 0.7983333468437195, 0.8086666464805603, 0.7883333563804626, 0.815666675567627, 0.8303333520889282, 0.8133333325386047, 0.800000011920929, 0.8009999990463257, 0.8220000267028809, 0.8103333115577698]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [4, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 3, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [44, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.631428599357605, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), alpha), beta)", "other_info": {"loss": [2.301673173904419, 2.3004181385040283, 2.2983899116516113, 2.2919633388519287, 2.285496473312378, 2.2806954383850098, 2.274752616882324, 2.2660367488861084, 2.252781391143799, 2.2341413497924805, 2.2046186923980713, 2.1509766578674316, 2.0485405921936035, 1.8548508882522583, 1.6062871217727661, 1.5715546607971191, 1.8076411485671997, 2.4362916946411133, 2.987934112548828, NaN, NaN, NaN], "accuracy": [0.09087307006120682, 0.09615638852119446, 0.10157178342342377, 0.12917712330818176, 0.13776251673698425, 0.14132875204086304, 0.15361246466636658, 0.1666886806488037, 0.17342491447925568, 0.19838859140872955, 0.21754062175750732, 0.25241050124168396, 0.2950733006000519, 0.3555673062801361, 0.4241183400154114, 0.47589486837387085, 0.5028398036956787, 0.4159291982650757, 0.3761722445487976, 0.10434553027153015, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.298591136932373, 2.2956860065460205, 2.2900803089141846, 2.283151626586914, 2.276641845703125, 2.2700908184051514, 2.2620062828063965, 2.250095844268799, 2.2312614917755127, 2.1999669075012207, 2.1463496685028076, 2.0476131439208984, 1.8377254009246826, 1.467289686203003, 1.1196430921554565, 1.5807796716690063, 0.9907061457633972, 1.42189359664917, 72.84602355957031, NaN, NaN, NaN], "val_accuracy": [0.03400000184774399, 0.056333333253860474, 0.0949999988079071, 0.1456666737794876, 0.18033333122730255, 0.21466666460037231, 0.26866665482521057, 0.30300000309944153, 0.33633333444595337, 0.39933332800865173, 0.4560000002384186, 0.4463333189487457, 0.4650000035762787, 0.5613333582878113, 0.5723333358764648, 0.6200000047683716, 0.6363333463668823, 0.5616666674613953, 0.10066666454076767, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 4, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [20, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [84, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.324571430683136, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.254155397415161, 2.2657620906829834, 2.2888548374176025, 2.2868459224700928, 2.2914299964904785, 2.304446220397949, 2.3031418323516846, 2.3032023906707764, 2.3035547733306885], "accuracy": [0.18636904656887054, 0.1578391194343567, 0.1402720957994461, 0.11451591551303864, 0.14581957459449768, 0.09694888442754745, 0.10051512718200684, 0.10170386731624603, 0.09800554811954498], "val_loss": [2.3050410747528076, 2.2659971714019775, 2.304025173187256, 1.9067814350128174, 2.3043317794799805, 2.3029773235321045, 2.3027844429016113, 2.3028483390808105, 2.30281925201416], "val_accuracy": [0.10366666316986084, 0.1706666648387909, 0.09600000083446503, 0.31433331966400146, 0.09600000083446503, 0.10000000149011612, 0.10000000149011612, 0.10066666454076767, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [1, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 3, 2, 8, 3, 5, 3, 9, 2, 4, 1, 9, 6, 1, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [1, 3, 3, 1, 1, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [90, 16, 51, 90, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 9, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [11, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 37, 37, 25, 12, 6, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), beta)), alpha))), tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.0324764251708984, 10.157861709594727, 27.05872917175293, 54.3321647644043, 95.95032501220703, 153.98895263671875], "accuracy": [0.09325055778026581, 0.10659094154834747, 0.09549596905708313, 0.10645885765552521, 0.09800554811954498, 0.09774138033390045], "val_loss": [4.523220062255859, 13.651374816894531, 30.397937774658203, 56.368560791015625, 93.43877410888672, 143.754638671875], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2, 20, 87, 4, 60, 42, 95, 44, 33, 84, 23, 1, 47, 22, 99, 83, 7, 17, 64, 5, 2, 58, 91, 77, 72, 59, 65]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [212478832.0, 3366885632.0, 14996970496.0, 40303394816.0, 86355156992.0, 158705401856.0], "accuracy": [0.09589222073554993, 0.10711926966905594, 0.09615638852119446, 0.1072513535618782, 0.09853387624025345, 0.09774138033390045], "val_loss": [708318400.0, 5663170048.0, 19109466112.0, 45292056576.0, 88455643136.0, 152845058048.0], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [90, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3383822441101074, 2.6954994201660156, 3.7584893703460693, 5.531237602233887, 8.114240646362305, 11.441539764404297, 15.580118179321289], "accuracy": [0.09192973375320435, 0.10276053100824356, 0.09470347315073013, 0.10527011007070541, 0.09866596013307571, 0.09893012791872025, 0.09721305221319199], "val_loss": [2.373831272125244, 2.7869348526000977, 3.762809991836548, 5.3487162590026855, 7.497056007385254, 10.196232795715332, 13.468976974487305], "val_accuracy": [0.09433333575725555, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 5, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [90, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 7, 2, 3, 7, 1, 2, 1, 7, 8, 5, 6, 2, 2, 8, 6, 2, 7, 6, 2, 9, 5, 3, 6, 0, 8, 5, 3, 2, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0, 3, 2, 2, 3, 1, 0, 3, 1, 2, 1], [48, 9, 45, 71, 34, 14, 2, 20, 87, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 21, 21, 13, 8, 3, 1, 0, 0, 0, 0, 76, 45, 31, 10], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(grad, alpha))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(tf.math.add(tf.math.square(beta), beta), tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, beta), sigma))), tf.math.add(sigma, beta)), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.square(tf.math.multiply(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), sigma), beta)))), beta), sigma))), alpha))))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.divide_no_nan(alpha, beta))), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 7, 6, 7, 8, 0, 5, 5, 8, 6, 8, 8, 4, 2, 0, 1, 8], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 50, 32, 18, 6], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(tf.math.add(tf.math.square(beta), beta), tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma)), tf.math.negative(tf.math.square(tf.math.square(tf.math.sqrt(tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(beta)), tf.math.pow(beta, sigma))))))))))), tf.math.add(tf.math.negative(tf.math.subtract(sigma, tf.math.sqrt(beta))), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), sigma), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [91, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [9, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [43, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07198520749807358, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [4, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 1, 9, 2, 4, 3, 8, 7, 5, 9, 5, 8, 3, 7, 5, 5, 4, 5, 0], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 51, 34, 17, 8], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.negative(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(tf.math.add(tf.math.square(beta), beta), tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.subtract(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))))), tf.math.pow(sigma, tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.sqrt(tf.math.multiply(beta, beta))))), tf.math.add(sigma, tf.math.square(tf.math.square(tf.math.pow(tf.math.square(tf.math.negative(sigma)), beta))))))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 3, 2, 0, 3, 8, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 3, 3, 1, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [84, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 2, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [23, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 23, 23, 15, 8, 3, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.negative(tf.math.multiply(tf.math.add(beta, grad), grad)), alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.subtract(grad, tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 5, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [93, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302595615386963, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [5, 1, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 2, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [31, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302504777908325, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [4, 0], [12], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 7, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 4, 0, 6, 4, 5, 1, 0, 9, 1, 4, 0, 1, 5, 3, 8, 3, 0], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [47, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 53, 33, 20, 8], "tree_depth": 39, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.add(tf.math.add(tf.math.square(beta), beta), tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.pow(tf.math.negative(tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.square(tf.math.subtract(tf.math.negative(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.math.negative(beta), beta), tf.math.subtract(sigma, sigma)))))))))), tf.math.square(beta)), tf.math.multiply(tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(sigma), beta))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 2, 1, 7, 2, 5, 2, 4, 1, 9, 1, 4, 4, 6, 5, 3, 3, 5, 0, 3, 7, 9, 9], [0, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0, 0, 3], [43, 9, 45, 71, 34, 14, 2, 20, 87, 11, 60, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 61, 38, 23, 12], "tree_depth": 48, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(tf.math.add(tf.math.square(beta), beta), tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.subtract(tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.square(tf.math.add(tf.math.pow(tf.math.subtract(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.math.pow(tf.math.divide_no_nan(beta, beta), sigma), sigma), tf.math.square(tf.math.multiply(beta, tf.math.multiply(tf.math.square(tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), sigma))))), beta), tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), sigma))))), tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [1, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [30, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 0, 7, 0, 5, 1, 3, 9, 9, 1, 5, 1, 7], [2, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.09342857450246811, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 43, 28, 15, 6], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), tf.math.subtract(alpha, tf.math.add(tf.math.add(tf.math.square(beta), beta), tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.add(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))))), tf.math.square(sigma)), tf.math.subtract(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.square(tf.math.subtract(beta, beta)), tf.math.add(sigma, sigma)))), beta))))", "other_info": {"loss": [2.3017446994781494, 2.301715850830078, 2.3033535480499268, 2.3027503490448, 2.3025624752044678, 2.303255558013916, 2.3027939796447754, 2.3021700382232666, 2.3010196685791016, 2.300994396209717, 2.3010759353637695, 2.3022916316986084, 2.301664113998413, 2.302471876144409, 2.3009397983551025, 2.302076578140259, 2.3010542392730713, 2.3005924224853516, 2.3007895946502686, 2.302924394607544, 2.3022267818450928, 2.300724983215332, 2.2997798919677734, 2.300936460494995, 2.301724672317505, 2.300729751586914, 2.3017966747283936, 2.301710367202759, 2.301816701889038, 2.3016774654388428, 2.3010709285736084, 2.3012893199920654, 2.3012845516204834, 2.3014776706695557, 2.30080509185791, 2.2998039722442627, 2.3017303943634033, 2.30100154876709, 2.3017141819000244, 2.300405979156494, 2.3010780811309814, 2.3019795417785645, 2.3004636764526367, 2.3013267517089844, 2.30074143409729, 2.3002474308013916, 2.301913022994995, 2.3004848957061768, 2.300811290740967, 2.300586223602295, 2.3009893894195557, 2.3007874488830566, 2.3006951808929443, 2.299602508544922, 2.3006765842437744, 2.3000011444091797, 2.3009233474731445, 2.3010950088500977, 2.3014824390411377, 2.300220251083374, 2.3005027770996094, 2.3014049530029297, 2.299995183944702, 2.3000147342681885, 2.3013296127319336, 2.3007752895355225, 2.299652338027954, 2.3005306720733643, 2.3003838062286377, 2.3013389110565186, 2.3011703491210938, 2.301152229309082, 2.302013874053955, 2.301051378250122, 2.3002562522888184, 2.3003318309783936, 2.300391674041748, 2.300518035888672, 2.3005831241607666, 2.29986310005188, 2.3001596927642822, 2.300159454345703, 2.3004310131073, 2.3011417388916016, 2.300551414489746, 2.300736427307129, 2.3004231452941895, 2.3013083934783936, 2.2999136447906494, 2.300076723098755, 2.3006701469421387, 2.3005380630493164, 2.301206111907959, 2.3008759021759033, 2.300478219985962, 2.2998762130737305, 2.3006296157836914, 2.300017833709717, 2.2995786666870117, 2.299994945526123], "accuracy": [0.09034473448991776, 0.09285431355237961, 0.08955223858356476, 0.09351472556591034, 0.09351472556591034, 0.08691058307886124, 0.08889182657003403, 0.08836349099874496, 0.09417514503002167, 0.09734513610601425, 0.09430722147226334, 0.08942015469074249, 0.09232597798109055, 0.0886276587843895, 0.0940430611371994, 0.09245806187391281, 0.09311848133802414, 0.09272222965955734, 0.08994849026203156, 0.08638224750757217, 0.09008057415485382, 0.0952318087220192, 0.0936468094587326, 0.08889182657003403, 0.09377889335155487, 0.08875974267721176, 0.08928807079792023, 0.08757099509239197, 0.09615638852119446, 0.09153348207473755, 0.09430722147226334, 0.0948355570435524, 0.0948355570435524, 0.08545766770839691, 0.09866596013307571, 0.09681680053472519, 0.09325055778026581, 0.09377889335155487, 0.09549596905708313, 0.09285431355237961, 0.09430722147226334, 0.0952318087220192, 0.09655263274908066, 0.0882314071059227, 0.09642054885625839, 0.09509972482919693, 0.08968432247638702, 0.09959053993225098, 0.09192973375320435, 0.09628847241401672, 0.09747721254825592, 0.09351472556591034, 0.09140139818191528, 0.09906221181154251, 0.09391097724437714, 0.10117553919553757, 0.09853387624025345, 0.09457138925790787, 0.09576013684272766, 0.09391097724437714, 0.10077928751707077, 0.09325055778026581, 0.09536388516426086, 0.09628847241401672, 0.09153348207473755, 0.09694888442754745, 0.09615638852119446, 0.09576013684272766, 0.09906221181154251, 0.09470347315073013, 0.08928807079792023, 0.0956280529499054, 0.09377889335155487, 0.09642054885625839, 0.10038304328918457, 0.0940430611371994, 0.0952318087220192, 0.09760929644107819, 0.09932637959718704, 0.09681680053472519, 0.09496764093637466, 0.10117553919553757, 0.10077928751707077, 0.09457138925790787, 0.09747721254825592, 0.09840179979801178, 0.09694888442754745, 0.09668471664190292, 0.10038304328918457, 0.08849557489156723, 0.09642054885625839, 0.09496764093637466, 0.09602430462837219, 0.09536388516426086, 0.10460969805717468, 0.10091137140989304, 0.1022322028875351, 0.0944393053650856, 0.10328886657953262, 0.09840179979801178], "val_loss": [2.2991220951080322, 2.29909086227417, 2.299060106277466, 2.2990305423736572, 2.299002170562744, 2.2989749908447266, 2.29894757270813, 2.298919916152954, 2.2988927364349365, 2.2988667488098145, 2.298841714859009, 2.2988193035125732, 2.298797607421875, 2.298776626586914, 2.2987561225891113, 2.2987372875213623, 2.2987186908721924, 2.298701763153076, 2.2986843585968018, 2.2986667156219482, 2.2986488342285156, 2.298631429672241, 2.298614978790283, 2.298598527908325, 2.298582077026367, 2.29856538772583, 2.2985498905181885, 2.298534393310547, 2.2985191345214844, 2.298504590988159, 2.298490524291992, 2.2984790802001953, 2.2984697818756104, 2.2984607219696045, 2.298452377319336, 2.2984461784362793, 2.2984418869018555, 2.29843807220459, 2.298435688018799, 2.298433303833008, 2.298431396484375, 2.2984297275543213, 2.298429250717163, 2.298431396484375, 2.2984349727630615, 2.29844069480896, 2.298447370529175, 2.2984540462493896, 2.298461675643921, 2.298469305038452, 2.2984776496887207, 2.2984862327575684, 2.298495292663574, 2.298503875732422, 2.2985122203826904, 2.2985217571258545, 2.298532009124756, 2.298542022705078, 2.298552989959717, 2.2985639572143555, 2.2985751628875732, 2.29858660697937, 2.298598051071167, 2.298610210418701, 2.298621654510498, 2.2986342906951904, 2.298647403717041, 2.2986607551574707, 2.2986748218536377, 2.298689603805542, 2.2987043857574463, 2.2987186908721924, 2.298733711242676, 2.298748731613159, 2.298765182495117, 2.2987828254699707, 2.298800230026245, 2.298819065093994, 2.2988388538360596, 2.2988595962524414, 2.298881769180298, 2.2989041805267334, 2.2989277839660645, 2.2989509105682373, 2.2989747524261475, 2.298999786376953, 2.299025297164917, 2.299051523208618, 2.299077033996582, 2.299103021621704, 2.299129009246826, 2.2991549968719482, 2.299182176589966, 2.2992095947265625, 2.2992379665374756, 2.299266815185547, 2.2992966175079346, 2.299325942993164, 2.2993545532226562, 2.2993829250335693], "val_accuracy": [0.03333333507180214, 0.03400000184774399, 0.03500000014901161, 0.03533333167433739, 0.03633333370089531, 0.03733333200216293, 0.03933333232998848, 0.038333334028720856, 0.03999999910593033, 0.04066666588187218, 0.0416666679084301, 0.043666668236255646, 0.04466666653752327, 0.045666664838790894, 0.04633333161473274, 0.046666666865348816, 0.047333333641290665, 0.04766666516661644, 0.04766666516661644, 0.047333333641290665, 0.04833333194255829, 0.04866666719317436, 0.04800000041723251, 0.04866666719317436, 0.049666665494441986, 0.050333332270383835, 0.05166666582226753, 0.05233333259820938, 0.054666668176651, 0.05533333495259285, 0.05666666850447655, 0.05766666680574417, 0.05833333358168602, 0.057999998331069946, 0.05900000035762787, 0.05999999865889549, 0.05966666713356972, 0.05999999865889549, 0.061000000685453415, 0.061666667461395264, 0.06266666948795319, 0.06300000101327896, 0.06400000303983688, 0.06499999761581421, 0.06599999964237213, 0.0663333311676979, 0.0676666647195816, 0.0676666647195816, 0.06833333522081375, 0.06933332979679108, 0.07199999690055847, 0.07266666740179062, 0.0729999989271164, 0.07400000095367432, 0.07466666400432587, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.07500000298023224, 0.07666666805744171, 0.07733333110809326, 0.07900000363588333, 0.0793333351612091, 0.08100000023841858, 0.08133333176374435, 0.08233333379030228, 0.08299999684095383, 0.0833333358168602, 0.0833333358168602, 0.0833333358168602, 0.08399999886751175, 0.08533333241939545, 0.0846666693687439, 0.08666666597127914, 0.08733333647251129, 0.08866667002439499, 0.08966666460037231, 0.09033333510160446, 0.09133332967758179, 0.09166666865348816, 0.09200000017881393, 0.09233333170413971, 0.09266666322946548, 0.09366666525602341, 0.09399999678134918, 0.09399999678134918, 0.09533333033323288, 0.09566666930913925, 0.09666666388511658, 0.09700000286102295, 0.0963333323597908, 0.09733333438634872, 0.09733333438634872, 0.09700000286102295, 0.09666666388511658, 0.0976666659116745, 0.09866666793823242, 0.09933333098888397, 0.10000000149011612, 0.09933333098888397]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 1, 9, 2, 7, 9, 0, 8, 2, 8, 2, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 3, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [94, 37, 51, 41, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 3, 2, 0, 3, 3, 3, 9, 8, 4, 1, 9, 6, 8, 2, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 1, 3, 2, 1, 2, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [98, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0], [2, 3, 2, 0], [1, 0], [12], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [43, 9, 45, 71, 34, 14, 2, 20, 87]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), alpha)", "other_info": {"loss": [2.3017661571502686, 2.301781415939331, 2.3034873008728027, 2.30291748046875, 2.302807569503784, 2.3035528659820557], "accuracy": [0.09060890227556229, 0.09298639744520187, 0.08915598690509796, 0.09245806187391281, 0.0940430611371994, 0.08611807972192764], "val_loss": [2.29915452003479, 2.29915452003479, 2.29915452003479, 2.29915452003479, 2.29915452003479, 2.29915452003479], "val_accuracy": [0.03333333507180214, 0.03333333507180214, 0.03333333507180214, 0.03333333507180214, 0.03333333507180214, 0.03333333507180214]}}]