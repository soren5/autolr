[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.801714301109314, "mapping_values": [1, 16, 16, 10, 6, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.2006051285927244, 2.0108947688247456, 1.4378185394874354, 1.0101357821885384, 0.8503200015796882, 0.7667777583410459, 0.7127710672071061, 0.6671523605402607, 0.6515064350980195, 0.6735314852793644, 0.6163519307795832, 0.6188651165390971, 0.5731725926727368, 0.5491273114316263, 0.5367405543300879, 0.5224409657635661, 0.502033668761996, 0.5213710393856513, 0.514604592682301, 0.47626120218936524, 0.47526265277901597, 0.46184403538357516, 0.46906825580837513, 0.4631723830169612, 0.44396591791938467, 0.4914293302017165, 0.42810032624673094], "accuracy": [0.2623167335987091, 0.3553031384944916, 0.49927353858947754, 0.6361114978790283, 0.6839255094528198, 0.7078325152397156, 0.7284374833106995, 0.7494386434555054, 0.7489103078842163, 0.7567031979560852, 0.7685906887054443, 0.7618544697761536, 0.783119797706604, 0.7938185334205627, 0.7992339134216309, 0.7997622489929199, 0.8104609847068787, 0.8012151718139648, 0.8049134612083435, 0.8193105459213257, 0.8239334225654602, 0.8241975903511047, 0.82683926820755, 0.8280280232429504, 0.8314621448516846, 0.8175934553146362, 0.8429533839225769], "val_loss": [1.8568517139979772, 1.5144734382629395, 1.05854218346732, 0.7560603618621826, 0.5638961110796247, 0.578555737222944, 0.5129757949284145, 0.5908330849238804, 0.4928215060915266, 0.5608484404427665, 0.5633317232131958, 0.49448539529527935, 0.4439936365400042, 0.44049147197178434, 0.4291576998574393, 0.41161796876362394, 0.4435419355119978, 0.4315408042498997, 0.40229177474975586, 0.3967831475394113, 0.3840026003973825, 0.3793167216437204, 0.4077595557485308, 0.3746876972062247, 0.4279212951660156, 0.4062008431979588, 0.3858154501233782], "val_accuracy": [0.3409999907016754, 0.445333331823349, 0.581333339214325, 0.6513333320617676, 0.746666669845581, 0.7353333234786987, 0.7663333415985107, 0.731333315372467, 0.7803333401679993, 0.7426666617393494, 0.7279999852180481, 0.7723333239555359, 0.8073333501815796, 0.8140000104904175, 0.8140000104904175, 0.8116666674613953, 0.7940000295639038, 0.8133333325386047, 0.8236666917800903, 0.8306666612625122, 0.8366666436195374, 0.8373333215713501, 0.8199999928474426, 0.8333333134651184, 0.8159999847412109, 0.8240000009536743, 0.82833331823349]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 5, 8, 9, 0, 3, 3, 2, 5, 6, 1, 8, 3, 6, 2, 3, 5, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [66, 98, 38, 73, 46, 77, 40, 36], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [72, 25, 50, 71, 34]], "fitness": -0.7682856917381287, "mapping_values": [1, 5, 5, 4, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.sqrt(grad))), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.294448063940719, 2.2728369445722683, 2.2492631462665518, 2.2206111846110606, 2.187865546319337, 2.141190639371649, 2.0814315092766744, 2.0078805505859383, 1.914895430815423, 1.8127258342916246, 1.7012928813566006, 1.5995367311326, 1.5000703334021075, 1.4133906152348839, 1.3575162123285973, 1.2880482605624397, 1.2488008944617601, 1.2016686826979779, 1.157465388746215, 1.130327093744511, 1.0993577105069063, 1.0727930552199563, 1.0447832201891067, 1.026713879549933, 1.01172182883065, 1.000557953096447, 0.9741172040253583, 0.9639209104787246, 0.9384504474543026, 0.9338050331610888, 0.924973843490065, 0.9098758430859479, 0.8939946617322465, 0.881651757659693, 0.878613047808578, 0.8640506753060544, 0.8621848688432963, 0.8549860434966112, 0.8531169537713168, 0.8321317814013993, 0.8272569141115858, 0.8213907281216566, 0.8198727384502893, 0.8049760617600172, 0.8203747725726087, 0.8064404899622739, 0.8033587088312187, 0.786906982197218, 0.7877793906308468, 0.7918441647142388, 0.7816967373715573, 0.7763451014086555, 0.7847495317742526, 0.7701890932932632, 0.7672279802579228, 0.758924543904811, 0.7558055443298296, 0.7460061760705144, 0.7463266763940951, 0.7461103050464085, 0.7399564717408295, 0.7380429252484187, 0.7381844001596692, 0.7337516113405199, 0.7278263568720719, 0.7337265832470455, 0.7271567997820956, 0.7169504341369355, 0.7183892723906545, 0.7245426900461444, 0.714788469782028, 0.7105374103130335, 0.7049156305434414, 0.7045477782856472, 0.7041066143853144, 0.7033524473408478, 0.6984975201232385, 0.7003067693516972, 0.6981891849966506, 0.6857171242404938], "accuracy": [0.109232597053051, 0.1736890822649002, 0.22123894095420837, 0.28001585602760315, 0.3143574297428131, 0.36085060238838196, 0.38105931878089905, 0.40681546926498413, 0.4365341365337372, 0.45568618178367615, 0.4753665328025818, 0.49451854825019836, 0.514198899269104, 0.5346717834472656, 0.5478800535202026, 0.5589750409126282, 0.5735041499137878, 0.5857878923416138, 0.5976753234863281, 0.6069211363792419, 0.620261549949646, 0.6259410977363586, 0.6392814517021179, 0.6416589617729187, 0.639809787273407, 0.6404702067375183, 0.6605468392372131, 0.6580372452735901, 0.6659622192382812, 0.6732267737388611, 0.6720380187034607, 0.68101966381073, 0.6812838315963745, 0.6902654767036438, 0.6877558827400208, 0.6896050572395325, 0.6936996579170227, 0.6946242451667786, 0.6936996579170227, 0.6993792057037354, 0.7037379741668701, 0.7005679607391357, 0.6995112895965576, 0.7144366502761841, 0.7012283802032471, 0.709549605846405, 0.7043983340263367, 0.7172104120254517, 0.7160216569900513, 0.713379979133606, 0.7176066637039185, 0.7136441469192505, 0.715889573097229, 0.7206445932388306, 0.7206445932388306, 0.7231541275978088, 0.7251353859901428, 0.7252674698829651, 0.7306828498840332, 0.7296261787414551, 0.7290979027748108, 0.7301545143127441, 0.7321357727050781, 0.7313432693481445, 0.7351737022399902, 0.737947404384613, 0.7333245277404785, 0.735041618347168, 0.7392682433128357, 0.737022876739502, 0.7424382567405701, 0.7366266250610352, 0.7420420050621033, 0.7425703406333923, 0.7425703406333923, 0.7432307600975037, 0.7490423917770386, 0.7429665923118591, 0.7460044622421265, 0.7515519857406616], "val_loss": [1.9500805991036552, 1.929169041769845, 1.9050957815987724, 1.8751675742013114, 1.8367953300476074, 1.7866518156869071, 1.7216753278459822, 1.640054157802037, 1.5425120081220354, 1.4343406813485282, 1.3233495439801897, 1.2171589306422643, 1.1236780370984758, 1.0437075410570418, 0.9792827878679548, 0.9264988899230957, 0.8827737058912005, 0.8458985771451678, 0.8134468623570034, 0.786853449685233, 0.7645071404320853, 0.7444112811769757, 0.7278031621660505, 0.7121335097721645, 0.6965815510068621, 0.6855125256947109, 0.6759337868009295, 0.6643691233226231, 0.6538702590124947, 0.6461748395647321, 0.639446633202689, 0.6324101345879691, 0.6241894960403442, 0.61819098676954, 0.6112066166741508, 0.6067772933415004, 0.6020739248820713, 0.597399081502642, 0.5932831934520176, 0.5890900066920689, 0.583735534123012, 0.5805450337273734, 0.5759861809866769, 0.5717921086720058, 0.5699929509844098, 0.5659272159848895, 0.5634797470910209, 0.5591480221067157, 0.5557104178837368, 0.5536269630704608, 0.5507379599979946, 0.5495619262967791, 0.5459154503686088, 0.5450788906642369, 0.543122376714434, 0.5415304728916713, 0.5372757911682129, 0.5365065165928432, 0.5309428998402187, 0.5295241219656808, 0.5271677459989276, 0.5260556255068097, 0.5231163161141532, 0.5210562944412231, 0.5213560547147479, 0.519015005656651, 0.5178433997290475, 0.5146856478282383, 0.5128826584134784, 0.50990777356284, 0.5104123183659145, 0.50966933795384, 0.5061533961977277, 0.505550571850368, 0.5036799737385341, 0.5031301294054303, 0.5019048622676304, 0.49923830372946604, 0.4994233676365444, 0.49871417454310824], "val_accuracy": [0.22333332896232605, 0.36000001430511475, 0.4086666703224182, 0.44999998807907104, 0.47600001096725464, 0.500333309173584, 0.5350000262260437, 0.5519999861717224, 0.5649999976158142, 0.5826666951179504, 0.5920000076293945, 0.6076666712760925, 0.640333354473114, 0.6573333144187927, 0.6696666479110718, 0.6723333597183228, 0.6883333325386047, 0.6956666707992554, 0.7006666660308838, 0.7023333311080933, 0.7103333473205566, 0.7096666693687439, 0.7149999737739563, 0.718999981880188, 0.7213333249092102, 0.7223333120346069, 0.7213333249092102, 0.7326666712760925, 0.7323333621025085, 0.737333357334137, 0.7390000224113464, 0.7429999709129333, 0.7406666874885559, 0.7436666488647461, 0.7473333477973938, 0.7540000081062317, 0.7546666860580444, 0.7580000162124634, 0.7593333125114441, 0.7573333382606506, 0.7636666893959045, 0.7573333382606506, 0.7620000243186951, 0.7636666893959045, 0.7630000114440918, 0.7639999985694885, 0.7663333415985107, 0.768666684627533, 0.7713333368301392, 0.7720000147819519, 0.7689999938011169, 0.7620000243186951, 0.7733333110809326, 0.7723333239555359, 0.7710000276565552, 0.7663333415985107, 0.777999997138977, 0.7746666669845581, 0.7770000100135803, 0.7766666412353516, 0.7773333191871643, 0.7789999842643738, 0.7816666960716248, 0.7796666622161865, 0.7789999842643738, 0.7846666574478149, 0.781333327293396, 0.7850000262260437, 0.7863333225250244, 0.7893333435058594, 0.7883333563804626, 0.7856666445732117, 0.7896666526794434, 0.7856666445732117, 0.7919999957084656, 0.7856666445732117, 0.7900000214576721, 0.7903333306312561, 0.7893333435058594, 0.7860000133514404]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 9, 9, 6, 9, 6, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 38, 73, 46, 77, 40, 36], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.43228572607040405, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.244704784261804, 2.254457730879133, 2.053516649299247, 15.444096214877396, 4.5825854738928436e+22, NaN, NaN, NaN], "accuracy": [0.270109623670578, 0.18650111556053162, 0.2991678714752197, 0.24105137586593628, 0.10117553919553757, 0.09985470771789551, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.962562084197998, 1.6968731880187988, 1.495940923690796, 36.11993626185826, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.28466665744781494, 0.41999998688697815, 0.03700000047683716, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 9, 6, 6, 8, 3, 8, 2, 4, 6, 1, 8], [2, 3, 0, 0, 1, 2, 2, 2, 0, 0, 0, 3, 2, 2], [26, 28, 68, 73, 46], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.43228572607040405, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.244704784261804, 2.254457730879133, 2.053516649299247, 15.444096214877396, 4.5825854738928436e+22, NaN, NaN, NaN], "accuracy": [0.270109623670578, 0.18650111556053162, 0.2991678714752197, 0.24105137586593628, 0.10117553919553757, 0.09985470771789551, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.962562084197998, 1.6968731880187988, 1.495940923690796, 36.11993626185826, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.28466665744781494, 0.41999998688697815, 0.03700000047683716, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [2, 9, 9, 6, 9, 6, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [79, 98, 38, 73, 46, 77, 40, 36], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [11, 25, 50, 71, 34]], "fitness": -0.1420000046491623, "mapping_values": [1, 3, 3, 3, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [3.214787778286272, 2.366860883992661, 2.2531586774446395, 2.206545745093573, 2.514401183356982, 2.4276242182790453, 2.4118148853529746, 2.4948274291281245], "accuracy": [0.17910447716712952, 0.09985470771789551, 0.15572579205036163, 0.19574692845344543, 0.09694888442754745, 0.10474177449941635, 0.10328886657953262, 0.10038304328918457], "val_loss": [2.0033628599984303, 1.9600578035627092, 1.8983525548662459, 2.173660005841936, 2.0227934973580495, 2.045736789703369, 2.1739564623151506, 2.0168123926435197], "val_accuracy": [0.09666666388511658, 0.17100000381469727, 0.18433333933353424, 0.10233332961797714, 0.10000000149011612, 0.09733333438634872, 0.10233332961797714, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 8, 3, 8, 2, 4, 6, 1, 8], [2, 3, 0, 0, 1, 2, 2, 2, 0, 0, 0, 3, 2, 2], [57, 98, 68, 82, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1013018.9015587941, 2.3061710807861764, 2.304741289889288, 2.303949541939154, 2.3034210989834563, 2.3030733317117082], "accuracy": [0.09681680053472519, 0.0936468094587326, 0.09549596905708313, 0.09655263274908066, 0.09628847241401672, 0.09893012791872025], "val_loss": [1.978053365434919, 1.9763783727373396, 1.9754105976649694, 1.9747271537780762, 1.9742810385567802, 1.974069254738944], "val_accuracy": [0.10400000214576721, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.10400000214576721, 0.09700000286102295]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 6, 6, 1, 0, 3, 9, 2, 5, 6, 1, 8, 3, 6, 2, 3, 5, 8], [2, 1, 0, 0, 2, 1, 2, 1, 0, 0, 0, 3, 2, 2], [64, 98, 38, 73, 46, 77, 40, 36], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 3], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(alpha, tf.math.negative(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1013018.9015587941, 2.3061710807861764, 2.304741289889288, 2.303949541939154, 2.3034210989834563, 2.3030733317117082], "accuracy": [0.09681680053472519, 0.0936468094587326, 0.09549596905708313, 0.09655263274908066, 0.09628847241401672, 0.09893012791872025], "val_loss": [1.978053365434919, 1.9763783727373396, 1.9754105976649694, 1.9747271537780762, 1.9742810385567802, 1.974069254738944], "val_accuracy": [0.10400000214576721, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.10400000214576721, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 5, 6, 4, 0, 3, 9, 2, 5, 6, 1, 8, 3, 6, 2, 3, 5, 8], [2, 1, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 82, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [9, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 13, 57, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 4, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad))))))))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028914518108174, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0], [2, 1, 2, 6, 5, 3, 3, 6, 2, 6, 1, 8, 3, 4, 6, 7, 3, 6, 9, 3, 7, 9], [2, 3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 3, 0, 2, 1, 2, 3], [26, 98, 68, 73, 46, 16, 43, 62, 58], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 8, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 39, 39, 22, 17, 9, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(grad))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), alpha)))), tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07290978729724884, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [2, 1, 5, 6, 0, 8, 8, 2, 2, 6, 1, 5, 9, 9], [2, 3, 0, 0, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [26, 98, 38, 73, 46, 77, 40, 36], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [8, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.square(grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad)))))))), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 1, 2, 2, 2, 0, 0, 0, 3, 2, 2], [82, 28, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [295658935.2929494, 5785437874.736758, 27168593975.994717, 73641554180.22665, 159921873645.8423, 294287815291.68884], "accuracy": [0.09985470771789551, 0.09879804402589798, 0.09840179979801178, 0.10381719470024109, 0.0956280529499054, 0.09774138033390045], "val_loss": [1147233645.7142856, 9173492882.285715, 30955681499.42857, 73370650916.57143, 143294744868.57144, 247603948982.85715], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 5, 6, 1, 0, 3, 9, 2, 5, 6, 1, 8, 3, 6, 2, 3, 5, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 28, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 0, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 4], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad)))))))))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 5, 6, 2, 3, 3, 8, 2, 6, 1, 8], [2, 3, 0, 0, 1, 0, 2, 1, 0, 0, 0, 3, 2, 2], [57, 98, 68, 82, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [8, 3, 2, 9, 2, 9], [0, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3028914518108174, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [4, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [0, 2, 0, 0, 1, 0, 2, 1, 0, 0, 0, 3, 2, 2], [26, 98, 4, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [3, 9, 2, 9, 2, 9], [2, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), alpha))))), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07277770340442657, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 9, 6, 6, 8, 3, 8, 2, 4, 6, 1, 8], [2, 3, 0, 0, 1, 2, 2, 2, 0, 0, 0, 3, 2, 2], [26, 28, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 6, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [37, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [2, 9, 6, 2, 0, 3, 3, 2, 5, 6, 1, 8, 3, 6, 3, 3, 2, 1, 5, 3, 1, 6, 2, 1, 3, 7, 7, 9, 8, 9, 7, 9, 5], [0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 3, 1, 2], [26, 98, 38, 73, 46, 77, 97, 92, 64, 9, 93, 15], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 50, 50, 30, 20, 11, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 9, 6, 3, 3], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.sqrt(tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(grad)), tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 5, 6, 2, 3, 3, 8, 2, 6, 1, 8], [2, 3, 0, 0, 1, 0, 2, 2, 0, 0, 0, 3, 2, 2], [57, 98, 68, 82, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 2, 1, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.sqrt(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, beta), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [9, 9, 9, 6, 9, 6, 8, 2, 5, 6, 1, 8], [2, 2, 1, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [0, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3033076496864937, 2.3029882177905385, 2.3030238056132477, 2.3030444388187417, 2.303040257912302, 2.3029650156413872], "accuracy": [0.09166556596755981, 0.09642054885625839, 0.09457138925790787, 0.09351472556591034, 0.09179764986038208, 0.09232597798109055], "val_loss": [1.9735935756138392, 1.9736968449183874, 1.9737513405936105, 1.9737000465393066, 1.9736661229814803, 1.9737639427185059], "val_accuracy": [0.10400000214576721, 0.10000000149011612, 0.09700000286102295, 0.09833333641290665, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 8, 3, 8, 2, 4, 6, 1, 8], [1, 3, 0, 0, 1, 2, 2, 2, 0, 0, 0, 3, 2, 2], [26, 28, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.0714285746216774, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(beta)", "other_info": {"loss": [2.3029615900787648, 2.301983625157288, 2.3009610695373492, 2.3003809041413867, 2.3007510961117665, 2.2999294977524434, 2.299204677024522, 2.299388782648347, 2.29864951021494, 2.2993219304062733, 2.299069458325746, 2.3005445092944043, 2.298453810727985], "accuracy": [0.09140139818191528, 0.0952318087220192, 0.09576013684272766, 0.09866596013307571, 0.1022322028875351, 0.10394927859306335, 0.09919429570436478, 0.09879804402589798, 0.1010434553027153, 0.10196803510189056, 0.10289261490106583, 0.09655263274908066, 0.10421344637870789], "val_loss": [1.9697918891906738, 1.9692843982151575, 1.9690510886056083, 1.9688923018319267, 1.9688775879996163, 1.9689305169241769, 1.9688702992030553, 1.9688453674316406, 1.9689111028398787, 1.9689838545663017, 1.969128131866455, 1.969182082584926, 1.969507830483573], "val_accuracy": [0.046666666865348816, 0.05233333259820938, 0.059333331882953644, 0.06533333659172058, 0.06966666877269745, 0.07000000029802322, 0.07733333110809326, 0.08100000023841858, 0.07833333313465118, 0.07999999821186066, 0.0793333351612091, 0.0793333351612091, 0.07633333653211594]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 5, 6, 2, 3, 3, 8, 2, 6, 1, 8], [2, 2, 1, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [57, 98, 68, 82, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303412745956574, 2.3032335587275923, 2.3028193257346588, 2.302740086874296, 2.303222456124512, 2.3025921952093062], "accuracy": [0.09008057415485382, 0.09179764986038208, 0.09034473448991776, 0.09021265059709549, 0.0936468094587326, 0.0936468094587326], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]