[{"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [3, 2, 2, 3, 3, 2, 8, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7662857174873352, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2996585335099797, 2.2856870194184324, 2.2551628021657932, 2.2113940847107383, 2.1426114439885566, 2.0305819375214873, 1.8395556582750787, 1.6215989621182192, 1.4387145462824669, 1.3609789916316768, 1.3033013206037785, 1.1825759701441623, 1.0531041772688983, 0.9492225887879027, 0.905782260450437, 0.8802332785922806, 0.8644925890786379, 0.8408296181383764, 0.8007132149863756, 0.791810354749052, 0.7889231105112774, 0.7631831823511996, 0.7668646084728525, 0.7514157551878936, 0.7357361025073982, 0.7204754755418566, 0.7078896422963085, 0.7059673781187747, 0.6902473881543509, 0.6925565612204339, 0.679403549408349, 0.6660577089495867, 0.6618598545578571, 0.6516830377008118, 0.6466030418801978, 0.6322091750465033, 0.6273252038183529, 0.6193827502227746, 0.6178256507720363, 0.6028034078793015, 0.5982435847380536, 0.5973306368717097, 0.5808151079175211, 0.5788369717583476, 0.5791935707599795, 0.5647941768177276, 0.5660970879347411, 0.5517847879986958, 0.5465774647414235, 0.5532443332020255, 0.5392902427818073, 0.5345362590729458, 0.5250544614402011, 0.5250874382787298, 0.5161808028496362, 0.5147104043419556, 0.5103610765861561, 0.49929093323395063, 0.4975943964753625, 0.4936946226605461, 0.48619491964472344, 0.48457278154781547, 0.48619199215995795, 0.4785535290547964, 0.47317059797271366, 0.4738422489759866, 0.45587777802894114, 0.45135577468824206, 0.46066297209494306, 0.4558404315110006], "accuracy": [0.09826971590518951, 0.13300752639770508, 0.22084268927574158, 0.29745081067085266, 0.3549068868160248, 0.39189010858535767, 0.4266279339790344, 0.45568618178367615, 0.4904239773750305, 0.5260863900184631, 0.5523709058761597, 0.589750349521637, 0.6349227428436279, 0.6427156329154968, 0.6527539491653442, 0.6785101294517517, 0.6814159154891968, 0.689869225025177, 0.7043983340263367, 0.698718786239624, 0.6950204968452454, 0.7091533541679382, 0.7108704447746277, 0.7140403985977173, 0.7217012047767639, 0.7248712182044983, 0.724739134311676, 0.7269845604896545, 0.7359662055969238, 0.7342491149902344, 0.7427024245262146, 0.7425703406333923, 0.748249888420105, 0.7473253011703491, 0.7539294958114624, 0.7597411274909973, 0.7580240368843079, 0.7646281719207764, 0.7658169269561768, 0.7714964747428894, 0.7709681391716003, 0.7703077793121338, 0.7751948237419128, 0.778761088848114, 0.7786290049552917, 0.7835160493850708, 0.7847048044204712, 0.7918372750282288, 0.7913089394569397, 0.7898560166358948, 0.7961959838867188, 0.7991018295288086, 0.7981772422790527, 0.7984414100646973, 0.8038568496704102, 0.8037247657775879, 0.8059701323509216, 0.8050455451011658, 0.8108572363853455, 0.8162726163864136, 0.8131026029586792, 0.8169330358505249, 0.8146876096725464, 0.822348415851593, 0.8236692547798157, 0.8226125836372375, 0.8277638554573059, 0.8329150676727295, 0.8267071843147278, 0.829216718673706], "val_loss": [1.9622255734034948, 1.9405224663870675, 1.9069512912205286, 1.857940673828125, 1.775928156716483, 1.6299118995666504, 1.396322454724993, 1.1295043400355749, 0.9211591311863491, 0.81557640007564, 0.7472315004893711, 0.7387195825576782, 0.6688699892589024, 0.6588517938341413, 0.6515871626990182, 0.645053335598537, 0.6268039430890765, 0.6026133128574916, 0.5854298727852958, 0.5773480108806065, 0.5705405984606061, 0.5622597081320626, 0.5558755568095616, 0.5503247806004116, 0.5467157023293632, 0.5398478167397636, 0.5364940166473389, 0.5297657421657017, 0.5199718305042812, 0.5144444533756801, 0.5091865403311593, 0.5012142998831612, 0.49447272505079, 0.48832270077296663, 0.48147223676954, 0.475745575768607, 0.4722945179258074, 0.4684594358716692, 0.46308301176343647, 0.4577993835721697, 0.4542932169778006, 0.4509996175765991, 0.4470975228718349, 0.44358135972704205, 0.44123744113104685, 0.43881326062338694, 0.43536668164389475, 0.4309214098112924, 0.4269858258111136, 0.4237281935555594, 0.41999466078622, 0.4158559611865452, 0.41243302822113037, 0.4099544286727905, 0.4075297372681754, 0.40490282433373587, 0.40252481188092915, 0.4008369190352304, 0.39930260181427, 0.3972517762865339, 0.39487663337162565, 0.3925264648028782, 0.38976263999938965, 0.3869119627135141, 0.38467568159103394, 0.3825444834572928, 0.3804054175104414, 0.3786504864692688, 0.37776397807257517, 0.376763573714665], "val_accuracy": [0.10866666585206985, 0.30033332109451294, 0.3933333456516266, 0.4300000071525574, 0.46133333444595337, 0.4946666657924652, 0.5476666688919067, 0.6103333234786987, 0.656333327293396, 0.6600000262260437, 0.6859999895095825, 0.6963333487510681, 0.7089999914169312, 0.7089999914169312, 0.7276666760444641, 0.7286666631698608, 0.7276666760444641, 0.7406666874885559, 0.7366666793823242, 0.7366666793823242, 0.7383333444595337, 0.7453333139419556, 0.7543333172798157, 0.7586666941642761, 0.7559999823570251, 0.7553333044052124, 0.7570000290870667, 0.7583333253860474, 0.762333333492279, 0.7613333463668823, 0.7696666717529297, 0.7770000100135803, 0.781333327293396, 0.7816666960716248, 0.7806666493415833, 0.7876666784286499, 0.7889999747276306, 0.7910000085830688, 0.7953333258628845, 0.7996666431427002, 0.800000011920929, 0.7983333468437195, 0.7993333339691162, 0.8013333082199097, 0.8029999732971191, 0.8019999861717224, 0.8043333292007446, 0.8050000071525574, 0.8083333373069763, 0.8086666464805603, 0.8130000233650208, 0.8163333535194397, 0.8180000185966492, 0.8220000267028809, 0.8226666450500488, 0.8233333230018616, 0.8273333311080933, 0.8296666741371155, 0.8306666612625122, 0.8326666951179504, 0.8303333520889282, 0.8296666741371155, 0.8323333263397217, 0.8336666822433472, 0.8353333473205566, 0.8339999914169312, 0.8353333473205566, 0.8353333473205566, 0.8339999914169312, 0.8349999785423279]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [3, 2, 2, 3, 3, 2, 8, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 0, 0, 1, 3, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.74314284324646, "mapping_values": [1, 36, 36, 21, 15, 6, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))))))), grad), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.299655169197408, 2.285626811185108, 2.2548982799171284, 2.2106517773609213, 2.140787250125539, 2.0262159185796254, 1.8306455026134572, 1.611823159327927, 1.4353559587011562, 1.3666183397581297, 1.3037388936293328, 1.1781411793379657, 1.0419807456125751, 0.944696425210688, 0.9049737664214403, 0.883928544320419, 0.866460387315638, 0.8394270087938582, 0.8013902117531801, 0.7998980759881538, 0.7997232055651466, 0.7733111678491164, 0.7770484670939588, 0.7603208372668819, 0.7459190149647984, 0.7264350415803438, 0.7181155278367484, 0.7136816859261046], "accuracy": [0.09840179979801178, 0.13353586196899414, 0.22123894095420837, 0.29863953590393066, 0.3563597798347473, 0.39189010858535767, 0.4278166592121124, 0.45647865533828735, 0.48989564180374146, 0.5248976349830627, 0.5547483563423157, 0.5937128663063049, 0.6350548267364502, 0.64231938123703, 0.6544709801673889, 0.67666095495224, 0.6806234121322632, 0.6880200505256653, 0.700700044631958, 0.6927750706672668, 0.6939638257026672, 0.7061154246330261, 0.7099458575248718, 0.7129837274551392, 0.7172104120254517, 0.7223616242408752, 0.7181349992752075, 0.7201162576675415], "val_loss": [1.962207521711077, 1.9403876577104842, 1.9065274511064803, 1.856877395084926, 1.7732075963701521, 1.623168638774327, 1.3832135200500488, 1.1138908522469657, 0.9080815996442523, 0.8136195455278669, 0.744842495237078, 0.7373147181102208, 0.6621369634355817, 0.6625181095940726, 0.6546308313097272, 0.6485820157187325, 0.626414588519505, 0.6006137643541608, 0.5860275711332049, 0.5811466319220406, 0.5728976556232998, 0.5654803684779576, 0.5595629726137433, 0.5541915042059762, 0.548075795173645, 0.5425730432782855, 0.5406090361731393, 0.532240663255964], "val_accuracy": [0.10866666585206985, 0.3006666600704193, 0.3930000066757202, 0.429666668176651, 0.46166667342185974, 0.4976666569709778, 0.5503333210945129, 0.6140000224113464, 0.6573333144187927, 0.6536666750907898, 0.6883333325386047, 0.6959999799728394, 0.7139999866485596, 0.7046666741371155, 0.7269999980926514, 0.7286666631698608, 0.7296666502952576, 0.7369999885559082, 0.7323333621025085, 0.7293333411216736, 0.7366666793823242, 0.746999979019165, 0.7559999823570251, 0.7546666860580444, 0.7516666650772095, 0.7543333172798157, 0.7549999952316284, 0.7559999823570251]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [3, 2, 2, 3, 3, 2, 8, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.6954285502433777, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2996579936907637, 2.2856926905748285, 2.2553750441736, 2.2125406018369125, 2.1469271637744374, 2.044779824385506, 1.877300034692306, 1.67541038431055, 1.4780273718085066, 1.3745453970826864, 1.3243538563860218, 1.3095949733136054, 1.1696951822786756, 1.0639754488735529, 0.9333061481180318, 0.8984822008776989, 0.8888495078632908, 0.8836388695887162, 0.8435333002402468, 0.8201891552376914], "accuracy": [0.09840179979801178, 0.1332716941833496, 0.22123894095420837, 0.29784706234931946, 0.3567560315132141, 0.3932109475135803, 0.42768457531929016, 0.45528993010520935, 0.488971084356308, 0.5262184739112854, 0.5437855124473572, 0.5591071248054504, 0.6059965491294861, 0.6330735683441162, 0.6618676781654358, 0.6666226387023926, 0.6719059348106384, 0.6819442510604858, 0.6977941989898682, 0.7009642124176025], "val_loss": [1.9622250284467424, 1.9405952862330846, 1.9075237001691545, 1.8602903229849679, 1.7842423575265067, 1.657238176890782, 1.462646790913173, 1.2280363695962089, 1.0236398151942663, 0.8726339340209961, 0.7853297506059919, 0.7271818944386074, 0.7128619807107108, 0.6599806376865932, 0.6406306198665074, 0.652299301964896, 0.6612611668450492, 0.649315459387643, 0.6165260076522827, 0.5931674752916608], "val_accuracy": [0.10866666585206985, 0.30000001192092896, 0.3930000066757202, 0.4300000071525574, 0.4620000123977661, 0.4973333477973938, 0.5379999876022339, 0.5816666483879089, 0.6386666893959045, 0.6643333435058594, 0.6706666946411133, 0.6846666932106018, 0.7003333568572998, 0.7146666646003723, 0.7350000143051147, 0.7260000109672546, 0.734000027179718, 0.7316666841506958, 0.734000027179718, 0.734666645526886]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [3, 2, 2, 3, 3, 2, 8, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 0, 1, 3, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [33, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 1, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.62628573179245, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.212192601153659, 1.5254812668721123, 0.9964437945612418, 0.8588024525043436, 0.7998399469578791, 0.7785431139063858, 0.6950075725018938, 0.6579146416054079, 0.6050539518218266, 0.5906092557436629, 0.5620016344486998, 0.561255354072597, 0.5294607497477151, 0.5222675864958823, 0.5094046727415278, 0.5048668318027204, 0.4872357791141827, 0.4713763852420815, 0.4621990619830294, 0.4548884495815282, 0.44659922135079366, 0.43401357261511975, 0.44805756034143784, 0.4219055384802954, 0.4142948678573991, 0.4112197820024877, 0.41472175155632596, 0.4132112894808029], "accuracy": [0.23140932619571686, 0.49253731966018677, 0.632941484451294, 0.6865671873092651, 0.6970016956329346, 0.711530864238739, 0.7386078238487244, 0.7503632307052612, 0.7668735980987549, 0.7757231593132019, 0.7845727205276489, 0.7758552432060242, 0.7987055778503418, 0.7992339134216309, 0.8009510040283203, 0.8061022162437439, 0.8088759779930115, 0.8204993009567261, 0.8241975903511047, 0.824329674243927, 0.8388587832450867, 0.8317263126373291, 0.8219521641731262, 0.842028796672821, 0.8372738361358643, 0.8433496356010437, 0.844010055065155, 0.841500461101532], "val_loss": [1.5716066360473633, 0.7174387659345355, 0.6533286060605731, 0.5788367475782122, 0.6102922643933978, 0.526619723864964, 0.48408474240984234, 0.46190524101257324, 0.44758570194244385, 0.4358893803187779, 0.43914099250520977, 0.4236635310309274, 0.41820532935006277, 0.4150493059839521, 0.4092122571808951, 0.40483405760356356, 0.39557193006787983, 0.39704502480370657, 0.3985283374786377, 0.39933667864118305, 0.3788186141422817, 0.3837429540497916, 0.375532865524292, 0.38683760166168213, 0.3982559016772679, 0.39185616799763273, 0.38970265218189787, 0.3859997051102774], "val_accuracy": [0.49266666173934937, 0.7053333520889282, 0.7269999980926514, 0.7306666374206543, 0.7443333268165588, 0.7649999856948853, 0.7806666493415833, 0.7919999957084656, 0.8029999732971191, 0.8166666626930237, 0.8050000071525574, 0.8180000185966492, 0.8196666836738586, 0.8240000009536743, 0.8230000138282776, 0.828000009059906, 0.8333333134651184, 0.8410000205039978, 0.8433333039283752, 0.8450000286102295, 0.8476666808128357, 0.8413333296775818, 0.8510000109672546, 0.843666672706604, 0.8423333168029785, 0.8473333120346069, 0.8453333377838135, 0.8500000238418579]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 4, 2, 3, 3, 2, 8, 9, 9, 3, 7, 2, 4, 8, 4, 0, 2, 2, 8, 4, 0, 5, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 0, 0, 3, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 45, 57, 74, 34, 28, 65, 70], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [4, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [6, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(grad, alpha), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 2, 2, 3, 1, 2, 8, 2, 9, 3, 7, 3, 4, 6, 2, 0, 2, 2, 8, 4, 3, 3, 5, 5, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 2, 2, 2, 0, 1, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [9, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [6, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 66, 66, 39, 27, 9, 5, 5, 3, 2, 1, 4, 3, 2, 1, 0, 3, 1, 2, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(tf.math.multiply(grad, tf.math.subtract(grad, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, alpha))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))), tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.square(grad)), tf.math.add(alpha, tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad))), grad))))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(grad, alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [3, 2, 1, 3, 3, 2, 8, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 0, 1, 3, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 16, 57, 74, 34, 28, 65, 70], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 0, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [1, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 9, 7, 2, 5, 5, 3, 2, 2, 5, 3, 3, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.subtract(grad, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.negative(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08109892904758453, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [2, 3, 2, 3, 3, 2, 4, 1, 9, 3, 7, 2, 4, 8, 4, 0, 2, 2, 8, 4, 2, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 0, 1, 3, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 16, 57, 74, 34, 28, 65, 70], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [4, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [47, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, alpha), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1], [3, 2, 2, 3, 3, 2, 8, 5, 9, 3, 7, 3, 2, 0, 2, 0, 2, 0, 8, 4, 5, 3, 2, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 0, 1, 3, 2, 0, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 76, 2, 39, 74, 34, 28, 65, 70], [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [5, 5], [0, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 19, 12, 6, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.multiply(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), grad), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3012558528067273, 2.3025860246996666, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10289261490106583, 0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 2, 3, 3, 2, 8, 1, 9, 8, 7, 3, 4, 0, 2, 0, 2, 2, 8, 5, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 1, 2, 3, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [60, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 5, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 14, 10, 4, 4, 3, 3, 0, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(grad, tf.math.subtract(tf.math.add(grad, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), beta)), grad))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [3, 9, 2, 3, 3, 8, 0, 1, 4, 3, 7, 6, 4, 0, 2, 0, 2, 4, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 1, 3, 0, 1, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 3, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1], [5, 1, 0, 8, 7], [4, 3], [52], [0, 1, 1, 1], [2, 5], [1, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 5, 5, 2, 3, 0, 5, 4, 3, 1, 0, 3, 1, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.negative(sigma)), tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08334434032440186, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 2, 3, 3, 3, 8, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 1, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 0, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 58, 30, 8, 57, 74, 34, 28, 65, 70], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [4, 6, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [0, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [31, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [0, 1], [32, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 49, 49, 28, 21, 8, 5, 5, 2, 3, 2, 5, 3, 3, 0, 0, 2, 1, 1, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.add(alpha, alpha)))))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))))))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(grad, tf.math.add(alpha, grad)))))))), tf.math.multiply(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.negative(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [29455.873736512658, 548870.5883800026, 2576901.433958526, 7080811.391890107, 14904194.40681548, 27889822.03619073], "accuracy": [0.09774138033390045, 0.10500594228506088, 0.09813763201236725, 0.09536388516426086, 0.09945846349000931, 0.1022322028875351], "val_loss": [107069.109375, 846296.5357142857, 2845415.5, 6732157.285714285, 13134286.285714285, 22679543.42857143], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [3, 2, 4, 3, 3, 2, 8, 1, 1, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 1, 1, 2, 3, 1, 1, 1, 0, 2, 2, 0, 3, 0, 1, 2, 0, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [1, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), alpha), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(beta, grad)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 2, 2, 3, 3, 8, 0, 1, 4, 3, 7, 3, 4, 5, 2, 0, 2, 2, 8, 0, 0, 3, 0, 2, 5, 2, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 3, 0, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 2, 3], [0, 1, 2, 2, 2, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 2, 1, 0, 2, 0, 3, 2, 0, 0, 3, 0, 2, 0, 2, 2, 1, 2, 3], [63, 18, 88, 2, 57, 67, 34, 28, 49, 16, 66], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 3, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [58, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1], [4, 1, 0, 9, 8, 5], [4, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 88, 88, 54, 34, 11, 3, 3, 1, 2, 0, 6, 5, 4, 1, 1, 2, 1, 1, 0], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(tf.math.subtract(grad, tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.negative(grad))))))), tf.math.sqrt(grad)))))), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), grad)))))), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, beta), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3020673047250777, 2.303436857692601, 2.302216049293092, 2.3033194427618717, 2.3024502627176617, 2.303508373913496], "accuracy": [0.09245806187391281, 0.09008057415485382, 0.09853387624025345, 0.08572183549404144, 0.09338264167308807, 0.09179764986038208], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [3, 2, 2, 3, 3, 2, 8, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(beta, beta)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3020673047250777, 2.303436857692601, 2.302216049293092, 2.3033194427618717, 2.3024502627176617, 2.303508373913496], "accuracy": [0.09245806187391281, 0.09008057415485382, 0.09853387624025345, 0.08572183549404144, 0.09338264167308807, 0.09179764986038208], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [3, 2, 0, 3, 3, 2, 8, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 4, 4, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 2, 0, 3, 2, 2, 1, 0, 2, 2, 0, 3, 0, 1, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3020673047250777, 2.303436857692601, 2.302216049293092, 2.3033194427618717, 2.3024502627176617, 2.303508373913496], "accuracy": [0.09245806187391281, 0.09008057415485382, 0.09853387624025345, 0.08572183549404144, 0.09338264167308807, 0.09179764986038208], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [2, 3, 2, 3, 3, 2, 8, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [79, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0], [5, 8, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 16, 16, 9, 7, 1, 5, 5, 3, 2, 1, 2, 2, 1, 1, 0, 3, 2, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, alpha)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.3020673047250777, 2.303436857692601, 2.302216049293092, 2.3033194427618717, 2.3024502627176617, 2.303508373913496], "accuracy": [0.09245806187391281, 0.09008057415485382, 0.09853387624025345, 0.08572183549404144, 0.09338264167308807, 0.09179764986038208], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 2, 3, 3, 2, 8, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 9, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [7, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, beta), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3020673047250777, 2.303436857692601, 2.302216049293092, 2.3033194427618717, 2.3024502627176617, 2.303508373913496], "accuracy": [0.09245806187391281, 0.09008057415485382, 0.09853387624025345, 0.08572183549404144, 0.09338264167308807, 0.09179764986038208], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [3, 2, 2, 4, 3, 5, 8, 1, 9, 3, 1, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 2, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 2, 1, 3, 2, 1, 2, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 18, 30, 37, 57, 74, 34, 28, 65, 70], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 3, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 40, 40, 24, 16, 5, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(grad, tf.math.add(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(grad, tf.math.add(alpha, grad)), tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(grad))))), tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))))))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.3020673362161066, 2.303436857692601, 2.302216049293092, 2.3033193797798144, 2.3024502627176617, 2.303508373913496], "accuracy": [0.09245806187391281, 0.09008057415485382, 0.09853387624025345, 0.08572183549404144, 0.09338264167308807, 0.09179764986038208], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [2, 3, 2, 2, 3, 2, 4, 1, 9, 0, 7, 3, 4, 0, 2, 2, 2, 2, 8, 4, 0, 3, 0, 2, 9, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 0, 0, 3, 2, 1, 1, 0, 2, 0, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [63, 85, 30, 2, 57, 74, 34, 28, 65, 70], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 8, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 1, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 18, 18, 10, 8, 4, 6, 6, 3, 3, 1, 5, 4, 3, 1, 0, 3, 2, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.negative(alpha))))), tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.negative(sigma)), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.3020673047250777, 2.303436857692601, 2.302216049293092, 2.3033194427618717, 2.3024502627176617, 2.303508373913496], "accuracy": [0.09245806187391281, 0.09008057415485382, 0.09853387624025345, 0.08572183549404144, 0.09338264167308807, 0.09179764986038208], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}]