[{"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [5, 1, 0, 6, 6, 0, 5, 2, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 2, 0, 1, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [9, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8237142562866211, "mapping_values": [1, 57, 57, 36, 21, 5, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.square(tf.math.add(alpha, alpha))), tf.math.sqrt(grad)))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))), tf.math.add(alpha, alpha))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), tf.math.multiply(tf.math.add(alpha, grad), alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.892720444374679, 1.0703808090406843, 0.7737503266998994, 0.6721802260566775, 0.6175150498186892, 0.5817928991108648, 0.5536039325980273, 0.5138188440172097, 0.48430006977369, 0.47725660272514375, 0.4506139102282541, 0.43525835067494323, 0.4152637162559367, 0.4062357394411233, 0.39763793302816786, 0.37785205951597967, 0.36909249119865045, 0.35557407307240624, 0.35135485077373513, 0.342859322309746, 0.3233356488702036, 0.3166597479913276, 0.3114135077270172], "accuracy": [0.3611147701740265, 0.6305639743804932, 0.7034738063812256, 0.7446836829185486, 0.7672698497772217, 0.7803460359573364, 0.789459764957428, 0.8090080618858337, 0.8207634687423706, 0.8238013386726379, 0.8310658931732178, 0.8400475382804871, 0.8518029451370239, 0.852859616279602, 0.8512746095657349, 0.8582749962806702, 0.8603883385658264, 0.8663320541381836, 0.8746532797813416, 0.8737286925315857, 0.8803328275680542, 0.8838990926742554, 0.885219931602478], "val_loss": [0.9284651279449463, 0.6178344999040876, 0.5084436280386788, 0.47944189820970806, 0.44253322056361605, 0.4237833874566214, 0.40134499754224506, 0.3828311392239162, 0.35939908027648926, 0.36310757058007376, 0.35044810601643156, 0.3602477141789028, 0.34011662006378174, 0.33326317582811626, 0.3284492492675781, 0.33250672476632254, 0.3203590512275696, 0.3126745820045471, 0.3193292021751404, 0.3161666052682059, 0.3148297667503357, 0.3159985968044826, 0.30798239367348806], "val_accuracy": [0.6186666488647461, 0.7250000238418579, 0.7663333415985107, 0.7863333225250244, 0.8190000057220459, 0.8113333582878113, 0.8316666483879089, 0.8403333425521851, 0.8500000238418579, 0.8500000238418579, 0.8543333411216736, 0.846666693687439, 0.8606666922569275, 0.8543333411216736, 0.8629999756813049, 0.8569999933242798, 0.8650000095367432, 0.8696666955947876, 0.8646666407585144, 0.8673333525657654, 0.8633333444595337, 0.8676666617393494, 0.8669999837875366]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 1, 0, 6, 6, 1, 5, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 2, 1, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8231428861618042, "mapping_values": [1, 13, 13, 8, 5, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), alpha)), grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8927502968150391, 1.069518695370774, 0.7732240798891874, 0.6727239467039273, 0.6183314787051964, 0.5846922259446636, 0.5511589714045129, 0.5117681937691022, 0.48251560748827976, 0.47363293912149046, 0.44913700625660585, 0.43342817562241454, 0.41535472145973024, 0.4064648029251877, 0.39154399334085366, 0.3695916898569269, 0.3642014923734656, 0.3460473991923596, 0.34503163658097247, 0.33416516238656485, 0.3173990381974838, 0.3179331488416274, 0.3064913702694464, 0.30398595272872775, 0.2811421067124864, 0.2869794403856394, 0.2792872028217938, 0.27955149493795645, 0.2597836435998451, 0.24856456043131048, 0.24734417694418925, 0.25105990834358016, 0.24579365640630685, 0.23376909498651313, 0.22954669833112434], "accuracy": [0.3611147701740265, 0.6287148594856262, 0.7038700580596924, 0.7465327978134155, 0.7625148296356201, 0.7779685854911804, 0.7897239327430725, 0.8080834746360779, 0.8239334225654602, 0.8239334225654602, 0.8339717388153076, 0.8405758738517761, 0.8502179384231567, 0.8544445633888245, 0.8541803956031799, 0.86118084192276, 0.8636903762817383, 0.8714832663536072, 0.8702945709228516, 0.8766345381736755, 0.8770307898521423, 0.8815215826034546, 0.8853520154953003, 0.8840311765670776, 0.8932769894599915, 0.8868049383163452, 0.8961827754974365, 0.8928807377815247, 0.9008057117462158, 0.9039757251739502, 0.9059569239616394, 0.9039757251739502, 0.9062210917472839, 0.9117686152458191, 0.9149385690689087], "val_loss": [0.9284674440111432, 0.6148581164223808, 0.506517767906189, 0.4816930294036865, 0.44236447129930767, 0.4260126267160688, 0.4021547607013157, 0.3837715557643345, 0.35865557193756104, 0.362021735736302, 0.3501305324690683, 0.3584056156022208, 0.340786806174687, 0.3306687729699271, 0.3274479593549456, 0.3288933379309518, 0.3199081676346915, 0.3153761795588902, 0.3108241302626474, 0.30708892004830496, 0.3135652712413243, 0.3151623862130301, 0.3054708072117397, 0.3033980982644217, 0.30655109882354736, 0.31646887745176044, 0.31970059871673584, 0.3080851265362331, 0.29662008796419415, 0.29876004798071726, 0.30089591230664936, 0.3244733384677342, 0.31593992028917584, 0.31701925822666716, 0.30678233930042814], "val_accuracy": [0.6153333187103271, 0.7266666889190674, 0.7699999809265137, 0.7806666493415833, 0.8069999814033508, 0.8149999976158142, 0.8346666693687439, 0.8376666903495789, 0.8523333072662354, 0.8420000076293945, 0.8513333201408386, 0.8443333506584167, 0.8606666922569275, 0.862333357334137, 0.8650000095367432, 0.859666645526886, 0.862666666507721, 0.8686666488647461, 0.8676666617393494, 0.8693333268165588, 0.8673333525657654, 0.8703333139419556, 0.8673333525657654, 0.8683333396911621, 0.8733333349227905, 0.8610000014305115, 0.8640000224113464, 0.874666690826416, 0.8773333430290222, 0.8776666522026062, 0.8756666779518127, 0.871999979019165, 0.8769999742507935, 0.8766666650772095, 0.8723333477973938]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 0, 9, 6, 0, 5, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [80, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8225714564323425, "mapping_values": [1, 10, 10, 7, 3, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8928702163847446, 1.0684105203277983, 0.7717828928534665, 0.671010295389949, 0.6160786188966673, 0.5807066766766352, 0.5506638319122951, 0.5108975529977753, 0.4820936836618175, 0.47059856325470617, 0.4474426978110889, 0.4310873699044948, 0.4123409635646547, 0.4044255821767217, 0.3884308753256407, 0.373435661907225, 0.3676460464207598, 0.34764375729630764, 0.34534819159430913, 0.33163781348567173, 0.3221871061308383, 0.31460458272090125, 0.3006949731269454, 0.3014158140029008, 0.2790875100913128, 0.28788541070206636, 0.27913719037378687, 0.27666843913691375, 0.26470638039467626, 0.2452895436280943, 0.2481374406126496, 0.2502227252492689, 0.2433601568765833, 0.23526580511279754, 0.22230736172241763, 0.21206159285660733, 0.20682566374512773, 0.19860916318926183, 0.19954769582583715, 0.19405956930448792, 0.2030405725360216, 0.18636284014371252, 0.17869656614977938, 0.16984900453299767], "accuracy": [0.3611147701740265, 0.6284506916999817, 0.7036058902740479, 0.7470611333847046, 0.7676661014556885, 0.7798177003860474, 0.7909126877784729, 0.8078193068504333, 0.8186501264572144, 0.8277638554573059, 0.8355567455291748, 0.8391229510307312, 0.8536521196365356, 0.8532558679580688, 0.8576145768165588, 0.8615770936012268, 0.8594637513160706, 0.8729361891746521, 0.8691058158874512, 0.8782195448875427, 0.8774270415306091, 0.882710337638855, 0.8879936337471008, 0.884691596031189, 0.8928807377815247, 0.8883898854255676, 0.8967111110687256, 0.8912957310676575, 0.9000132083892822, 0.9046360850334167, 0.9062210917472839, 0.9001452922821045, 0.9082023501396179, 0.9116365313529968, 0.9166556596755981, 0.9192973375320435, 0.919561505317688, 0.926429808139801, 0.9228635430335999, 0.9222031235694885, 0.9231277108192444, 0.9255052208900452, 0.9336943626403809, 0.9339585304260254], "val_loss": [0.9267031465257917, 0.6136702128819057, 0.5053622041429792, 0.4808022124426706, 0.44373207432883127, 0.42329135111400057, 0.40367691005979267, 0.38166466781071257, 0.3594420041356768, 0.3611132332256862, 0.3490339773041861, 0.3590784158025469, 0.33660206624439787, 0.327531703880855, 0.3260787044252668, 0.33008492844445364, 0.31976071425846647, 0.3104596308299473, 0.3159308688981192, 0.31037685700825285, 0.31494009494781494, 0.31453647783824373, 0.30705978189195904, 0.3059220824922834, 0.305735068661826, 0.3155263917786734, 0.32704484462738037, 0.30688105310712543, 0.29469447476523264, 0.30037749665124075, 0.29714525597436087, 0.316398595060621, 0.314461955002376, 0.3067612477711269, 0.30120016847337994, 0.3160507934434073, 0.30509371416909353, 0.3028398071016584, 0.3001750707626343, 0.32311223234449116, 0.31269456659044537, 0.3175443581172398, 0.3313673904963902, 0.32652588401521954], "val_accuracy": [0.6183333396911621, 0.7289999723434448, 0.7716666460037231, 0.7826666831970215, 0.8143333196640015, 0.8166666626930237, 0.8296666741371155, 0.8396666646003723, 0.8519999980926514, 0.8460000157356262, 0.8536666631698608, 0.8453333377838135, 0.859000027179718, 0.8619999885559082, 0.8646666407585144, 0.8606666922569275, 0.8646666407585144, 0.8673333525657654, 0.8663333058357239, 0.8676666617393494, 0.8646666407585144, 0.8683333396911621, 0.8679999709129333, 0.8663333058357239, 0.8726666569709778, 0.8613333106040955, 0.862333357334137, 0.875, 0.8763333559036255, 0.8740000128746033, 0.8790000081062317, 0.8706666827201843, 0.874666690826416, 0.8766666650772095, 0.8776666522026062, 0.8793333172798157, 0.8823333382606506, 0.8796666860580444, 0.8830000162124634, 0.8830000162124634, 0.8763333559036255, 0.8743333220481873, 0.8776666522026062, 0.8820000290870667]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 0, 6, 6, 0, 2, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 2, 2, 1, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [9, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8217142820358276, "mapping_values": [1, 13, 13, 7, 6, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha)), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8928705265398873, 1.068734269675294, 0.772361577218471, 0.6719238332564631, 0.6139148818723844, 0.5851378900940865, 0.5558296852281238, 0.5109505863465874, 0.4821654371912327, 0.47654702546589917, 0.44983377425252735, 0.43296444599087747, 0.41724451065945223, 0.4058494982096214, 0.3929374002982061, 0.3731228883602458, 0.36783193174826867, 0.3521721665538959, 0.35329951098912804, 0.3368403966581785, 0.3224855347780929, 0.31917050822126614, 0.3060594370076685, 0.3072655893957705, 0.2794593844895885, 0.2835050113110447, 0.2771440954602642, 0.27225095654806175, 0.2573585383384424, 0.2529769323568429, 0.24962219545523473, 0.24675948739547804, 0.24217135284507846, 0.23326847063882586, 0.2247245076046392, 0.21494116651745773, 0.20719158701798415, 0.20369473124114104, 0.19802231091541966, 0.19114372769343366, 0.19861547032076182], "accuracy": [0.3611147701740265, 0.6287148594856262, 0.702681303024292, 0.7479857206344604, 0.7680623531341553, 0.778232753276825, 0.7889314293861389, 0.809140145778656, 0.8236692547798157, 0.8248580098152161, 0.8337075710296631, 0.8387266993522644, 0.8504821062088013, 0.8533879518508911, 0.8532558679580688, 0.8593316674232483, 0.8613129258155823, 0.8650112152099609, 0.8685774803161621, 0.8745211958885193, 0.8776912093162537, 0.8809932470321655, 0.8879936337471008, 0.8812574148178101, 0.8934090733528137, 0.8908994793891907, 0.900409460067749, 0.8944657444953918, 0.9052965044975281, 0.8975036144256592, 0.9037115573883057, 0.9058248400688171, 0.9103156924247742, 0.9076740145683289, 0.9128252267837524, 0.9173160791397095, 0.9198256731033325, 0.9210143685340881, 0.9237881302833557, 0.9265618920326233, 0.9236560463905334], "val_loss": [0.9267195633479527, 0.6144236837114606, 0.506232466016497, 0.4797741685594831, 0.44188969475882395, 0.4289859873907907, 0.39911316122327534, 0.37921764169420513, 0.3600249545914786, 0.36336238043648855, 0.3509353995323181, 0.36351128986903597, 0.33996282305036274, 0.33143809012004305, 0.3265075513294765, 0.3310196229389736, 0.3238856281552996, 0.31771884645734516, 0.31387758255004883, 0.3136846252850124, 0.3129628726414272, 0.3119095819337027, 0.3070140651294163, 0.30380514689854216, 0.30052640608378817, 0.31084294830049786, 0.3072014961923872, 0.3024860620498657, 0.3030455708503723, 0.29463224751608713, 0.2991632989474705, 0.31731778383255005, 0.31916811636516024, 0.30467151744025095, 0.2953426241874695, 0.30508387088775635, 0.3055598395211356, 0.3044143574578421, 0.30385870592934744, 0.3209497332572937, 0.3082332951681955], "val_accuracy": [0.6183333396911621, 0.7293333411216736, 0.7716666460037231, 0.7816666960716248, 0.812666654586792, 0.8063333630561829, 0.8343333601951599, 0.8429999947547913, 0.8500000238418579, 0.8423333168029785, 0.8526666760444641, 0.8429999947547913, 0.8606666922569275, 0.859333336353302, 0.8659999966621399, 0.8600000143051147, 0.859666645526886, 0.8640000224113464, 0.8673333525657654, 0.8686666488647461, 0.8669999837875366, 0.8693333268165588, 0.8703333139419556, 0.8643333315849304, 0.8759999871253967, 0.8683333396911621, 0.8700000047683716, 0.8793333172798157, 0.874666690826416, 0.8766666650772095, 0.8823333382606506, 0.8703333139419556, 0.8730000257492065, 0.878000020980835, 0.8803333044052124, 0.8843333125114441, 0.8769999742507935, 0.8806666731834412, 0.8799999952316284, 0.8776666522026062, 0.878000020980835]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 8, 6, 0, 0, 6, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 89, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [5, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8214285969734192, "mapping_values": [1, 13, 13, 8, 5, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, grad)), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8927493377872477, 1.068887504478251, 0.7716897130563605, 0.6731405286048271, 0.6162365092388501, 0.5818943538843381, 0.5520766408782609, 0.5113498489767915, 0.48216227820016894, 0.4749198795160078, 0.448073213398181, 0.43554133740099366, 0.41998785853842546, 0.4086772853853271, 0.39221723230680877, 0.37086933402494904, 0.36979120834754553, 0.35066755671212074, 0.3512431908009657, 0.3407726284377784, 0.321906105536102, 0.3173581295167104, 0.30941949385803735, 0.29851011391628246, 0.285630818359478, 0.2924907755236096, 0.283386589576697, 0.2802371199868532, 0.2563655830574325, 0.24666193371293976, 0.2550477117689735, 0.2530742511281153, 0.24133614613757615, 0.23137145838119003], "accuracy": [0.3611147701740265, 0.6283186078071594, 0.7038700580596924, 0.7429665923118591, 0.7701756954193115, 0.7800818681716919, 0.7905164361000061, 0.8088759779930115, 0.8239334225654602, 0.8277638554573059, 0.8334434032440186, 0.8362171649932861, 0.847840428352356, 0.8499537706375122, 0.8536521196365356, 0.8619733452796936, 0.8584070801734924, 0.8708229064941406, 0.8672566413879395, 0.8708229064941406, 0.8779553771018982, 0.883238673210144, 0.8865407705307007, 0.8882578015327454, 0.8916919827461243, 0.8878615498542786, 0.8953903317451477, 0.8916919827461243, 0.902390718460083, 0.9084665179252625, 0.9051644206047058, 0.902390718460083, 0.9083344340324402, 0.9066173434257507], "val_loss": [0.9280735765184674, 0.6136931010654995, 0.5060177871159145, 0.4799931049346924, 0.44137249674115864, 0.42453438895089285, 0.4022847754614694, 0.3809308409690857, 0.3592033386230469, 0.3616550053868975, 0.3519376686641148, 0.3619170870099749, 0.33865032877240864, 0.3303328922816685, 0.3278431636946542, 0.3282104219709124, 0.3193431156022208, 0.31258563484464374, 0.3228382468223572, 0.31204674925122944, 0.3179581420762198, 0.3170869265283857, 0.30605932644435335, 0.30556646415165495, 0.30381906032562256, 0.31939167635781424, 0.33301474366869244, 0.30168151003973825, 0.29697071654456003, 0.3063718591417585, 0.3021085858345032, 0.32905217579432894, 0.31050264835357666, 0.3118143677711487], "val_accuracy": [0.6156666874885559, 0.7310000061988831, 0.7699999809265137, 0.7850000262260437, 0.815666675567627, 0.815666675567627, 0.8326666951179504, 0.840666651725769, 0.8519999980926514, 0.847000002861023, 0.8529999852180481, 0.843666672706604, 0.856333315372467, 0.859000027179718, 0.8629999756813049, 0.8610000014305115, 0.862333357334137, 0.8663333058357239, 0.859000027179718, 0.8693333268165588, 0.8693333268165588, 0.8673333525657654, 0.8669999837875366, 0.8690000176429749, 0.875, 0.8573333621025085, 0.8606666922569275, 0.878333330154419, 0.8793333172798157, 0.8713333606719971, 0.878000020980835, 0.8683333396911621, 0.8759999871253967, 0.875333309173584]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 0, 6, 6, 0, 2, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 0, 0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 48, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [9, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8191428780555725, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8928341166753622, 1.0686289773420683, 0.7754781334990004, 0.6726916378216107, 0.615981201115632, 0.5818354655345039, 0.5477661728827456, 0.5116455573030136, 0.4809136121359011, 0.4744886229098386, 0.4496507553722975, 0.4336626811695766, 0.4156140623870795, 0.40683102027504847, 0.39822184700991703, 0.3772251781983036, 0.36431171585146493, 0.34954160021642855, 0.347500620115356, 0.3347686355132248, 0.3230228980321926, 0.31862009361262306, 0.3097373807332645, 0.3043237447093081, 0.282658144172314, 0.288199836665991, 0.2826446374771759, 0.27298785343602855, 0.2634879904274518, 0.24818160606019485, 0.2488859368982946, 0.2493654938677692, 0.2451630011013927, 0.23504187182829978, 0.223469069672141, 0.21303721714044968, 0.20582353333046943, 0.19733569949664587, 0.19848401868513404, 0.19295690111740155, 0.20170546391652386], "accuracy": [0.3611147701740265, 0.628582775592804, 0.7036058902740479, 0.7458723783493042, 0.7666094303131104, 0.7791573405265808, 0.7932901978492737, 0.8070268034934998, 0.8203672170639038, 0.8251221776008606, 0.8321225643157959, 0.8387266993522644, 0.8529917001724243, 0.8499537706375122, 0.8519350290298462, 0.8602562546730042, 0.8632941246032715, 0.8702945709228516, 0.871879518032074, 0.8765024542808533, 0.8767666220664978, 0.8823140859603882, 0.8870691061019897, 0.884691596031189, 0.8924844861030579, 0.8928807377815247, 0.8924844861030579, 0.8969752788543701, 0.8993527889251709, 0.9039757251739502, 0.9074098467826843, 0.9039757251739502, 0.9078060984611511, 0.9085986018180847, 0.9161273241043091, 0.9183727502822876, 0.9214106202125549, 0.9245806336402893, 0.923920214176178, 0.9272223114967346, 0.9216747879981995], "val_loss": [0.9260734830583844, 0.6194432803562709, 0.5062649590628487, 0.48091605731419157, 0.4419526032039097, 0.4206143958227975, 0.4046343309538705, 0.3803598540169852, 0.3597910574504307, 0.36149016448429655, 0.35249407802309307, 0.3596304655075073, 0.3379564881324768, 0.3356252482959202, 0.3302071179662432, 0.3308197259902954, 0.32149491139820646, 0.3130660057067871, 0.31268071276800974, 0.3092648301805769, 0.3114146760531834, 0.3171620454107012, 0.31212665353502544, 0.3048500674111502, 0.3036647524152483, 0.3183351159095764, 0.31237039395741056, 0.3036930731364659, 0.2950035503932408, 0.29389498063496183, 0.29595465319497244, 0.30971875361033846, 0.31849089690617155, 0.3080067890030997, 0.3081846066883632, 0.3019719123840332, 0.30520219462258474, 0.3128345693860735, 0.30816969701222013, 0.3173740931919643, 0.3174717681748526], "val_accuracy": [0.6193333268165588, 0.7236666679382324, 0.7710000276565552, 0.7846666574478149, 0.8159999847412109, 0.8183333277702332, 0.8323333263397217, 0.8386666774749756, 0.8516666889190674, 0.8453333377838135, 0.8503333330154419, 0.843999981880188, 0.8533333539962769, 0.8569999933242798, 0.8619999885559082, 0.8613333106040955, 0.8610000014305115, 0.8686666488647461, 0.8666666746139526, 0.8683333396911621, 0.8730000257492065, 0.8659999966621399, 0.8683333396911621, 0.8690000176429749, 0.8766666650772095, 0.8569999933242798, 0.8690000176429749, 0.8776666522026062, 0.8793333172798157, 0.875, 0.8806666731834412, 0.8713333606719971, 0.8713333606719971, 0.8766666650772095, 0.8693333268165588, 0.8813333511352539, 0.8809999823570251, 0.8796666860580444, 0.8796666860580444, 0.8796666860580444, 0.8703333139419556]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 0, 6, 6, 0, 6, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [30, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [9, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.817714273929596, "mapping_values": [1, 54, 54, 34, 20, 7, 3, 3, 1, 2, 1, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.subtract(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.square(grad)))), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.pow(alpha, tf.math.add(alpha, tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.subtract(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))))), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8928670902388238, 1.0686180989708585, 0.7722795333104631, 0.6712448103253742, 0.6150595191494663, 0.5829324927611547, 0.552926693610102, 0.5149747726231078, 0.48023626733024627, 0.4766234018822797, 0.45040764557986196, 0.4361439055817679, 0.41964120860380694, 0.4086457125152721, 0.3982348314578334, 0.3778438776664573, 0.3652079162927052, 0.3478353863158608, 0.3517893325454287, 0.33884026672090317, 0.3271145570382088, 0.3102838481303928, 0.30500529214627614, 0.30437861040693154, 0.2804828657489553, 0.2901102979232638], "accuracy": [0.3611147701740265, 0.6284506916999817, 0.7030775547027588, 0.746268630027771, 0.7680623531341553, 0.7800818681716919, 0.7903843522071838, 0.8075551390647888, 0.8228767514228821, 0.8257825970649719, 0.8315942287445068, 0.8370096683502197, 0.8516708612442017, 0.8499537706375122, 0.8512746095657349, 0.8615770936012268, 0.8639545440673828, 0.8697662353515625, 0.8669924736022949, 0.8713511824607849, 0.8758420348167419, 0.8864086866378784, 0.8874653577804565, 0.8824461698532104, 0.8930128216743469, 0.8886540532112122], "val_loss": [0.9267738546643939, 0.6149928740092686, 0.5047623940876552, 0.4807061127253941, 0.4421731574194772, 0.42573860713413786, 0.4039909158434187, 0.3791841523987906, 0.3588422196252005, 0.3642750382423401, 0.3524163705962045, 0.36256262234279085, 0.34190389088221956, 0.33193505661828177, 0.3270412087440491, 0.3288438490458897, 0.31708920853478567, 0.31480281693594797, 0.31826198952538626, 0.3092541013445173, 0.30820219005857197, 0.31129355090005056, 0.3078219975743975, 0.3032992311886379, 0.3129711406571524, 0.3226888520377023], "val_accuracy": [0.6183333396911621, 0.7289999723434448, 0.7696666717529297, 0.7806666493415833, 0.8119999766349792, 0.8163333535194397, 0.8336666822433472, 0.8403333425521851, 0.8543333411216736, 0.8443333506584167, 0.8493333458900452, 0.8433333039283752, 0.859333336353302, 0.8613333106040955, 0.862666666507721, 0.862666666507721, 0.8669999837875366, 0.8683333396911621, 0.8633333444595337, 0.8690000176429749, 0.8706666827201843, 0.8683333396911621, 0.8700000047683716, 0.8696666955947876, 0.8686666488647461, 0.8550000190734863]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [5, 1, 0, 6, 6, 0, 5, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [30, 13, 25, 5, 64, 36, 20, 27, 65, 70], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.7991428375244141, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.061079338683019, 1.5722797635744403, 1.1597680027742177, 0.936183513084722, 0.8889950881025117, 0.8247616333559031, 0.7916602636955008, 0.7291946546071871, 0.725398975387934, 0.7186686628215333, 0.6676872988749237, 0.6577272476804822, 0.6694566987335816, 0.6194142452273245, 0.634056323594295, 0.5976009497222426, 0.6012622427001936, 0.6290474991441922, 0.5950705699161091, 0.5758043965170995, 0.567532785273247, 0.5497032603441591, 0.5597907823657221, 0.5550990599792993, 0.5459250844685377, 0.5542925693229551, 0.532190315144929], "accuracy": [0.3319244384765625, 0.471800297498703, 0.5836745500564575, 0.6539427042007446, 0.663848876953125, 0.6861709356307983, 0.6988508701324463, 0.7217012047767639, 0.7231541275978088, 0.7272487282752991, 0.7499669790267944, 0.7427024245262146, 0.7372870445251465, 0.7685906887054443, 0.7567031979560852, 0.7692511081695557, 0.7778365015983582, 0.7532690763473511, 0.7650244235992432, 0.7778365015983582, 0.7817989587783813, 0.793950617313385, 0.7878747582435608, 0.789459764957428, 0.7918372750282288, 0.7891955971717834, 0.802271842956543], "val_loss": [1.265021903174264, 0.9556445734841483, 0.7868341888700213, 0.6425938435963222, 0.6781355483191354, 0.5995669364929199, 0.587538480758667, 0.5690234899520874, 0.5971745252609253, 0.5403237342834473, 0.5153207778930664, 0.5104762145451137, 0.513617992401123, 0.48949057715279715, 0.49694674355643137, 0.5046825579234532, 0.4651492493493216, 0.46874044622693745, 0.48286075251443045, 0.46154013701847624, 0.4557370969227382, 0.4374197636331831, 0.46378285544259207, 0.4299367240497044, 0.46916983808789936, 0.4244697264262608, 0.43586190257753643], "val_accuracy": [0.54666668176651, 0.5720000267028809, 0.6476666927337646, 0.7099999785423279, 0.6783333420753479, 0.7179999947547913, 0.7286666631698608, 0.7366666793823242, 0.6996666789054871, 0.7403333187103271, 0.7699999809265137, 0.7563333511352539, 0.7706666588783264, 0.7856666445732117, 0.7763333320617676, 0.7673333287239075, 0.7929999828338623, 0.7979999780654907, 0.765999972820282, 0.7889999747276306, 0.8040000200271606, 0.8159999847412109, 0.781333327293396, 0.8140000104904175, 0.7789999842643738, 0.812666654586792, 0.809333324432373]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 0, 6, 6, 0, 5, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [30, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [8, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [5, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 0, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 9, 6, 6, 0, 2, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 2, 2, 1, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [9, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [24.706192546941978, 42.68585660051062, 5.539805173801668e+18, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1982565075159073, 0.10077928751707077, 0.09391097724437714, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [22.981990814208984, 2.600144250052316, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 0, 6, 6, 0, 5, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 1, 35, 35, 19, 16, 5, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(alpha))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(grad)))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(beta, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))))))), tf.math.negative(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 0, 6, 6, 0, 5, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 1, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [28, 74, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [1, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 0, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(alpha))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 9, 6, 2, 0, 2, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 2, 1, 9, 9, 9, 8, 2, 1, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 0, 2, 2, 1, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [46, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 1, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [9, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.6966705835065503e+18, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0874389111995697, 0.1010434553027153, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [2, 1, 0, 6, 6, 0, 2, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 5, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 2, 2, 1, 2, 0, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [9, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [1, 0, 1, 1], [5, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 7, 6, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [56783372.840559974, 7.104285804097588e+25, 2.3338866166434884, 2.347844913162969, 2.3697153945341403, 2.4059255756423017], "accuracy": [0.049266938120126724, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.591003318152013e+26, 1.9967653410775321, 2.0066660472324918, 2.0219835553850447, 2.0468921661376953, 2.088986192430769], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 0, 6, 6, 0, 5, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 2, 1, 1, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [9, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [1, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 57, 57, 36, 21, 5, 3, 3, 1, 2, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), alpha)), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.square(tf.math.add(alpha, alpha))), tf.math.sqrt(grad)))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))), tf.math.add(alpha, alpha))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), tf.math.multiply(tf.math.add(alpha, grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [9.62094611790883e+32, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06300356984138489, 0.10091137140989304, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 4, 6, 6, 6, 5, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [2, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 61, 61, 38, 23, 8, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.square(tf.math.add(alpha, grad))), tf.math.sqrt(grad)))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))), tf.math.add(alpha, alpha))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), tf.math.multiply(tf.math.add(alpha, grad), alpha))), tf.math.add(alpha, tf.math.negative(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), tf.math.square(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 0, 6, 6, 0, 5, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 0, 2, 2, 1, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 2, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 1, 0, 6, 6, 0, 5, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 0, 1, 1], [1, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.09028571099042892, "mapping_values": [1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.negative(grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.square(beta), alpha)", "other_info": {"loss": [2.3005635825602955, 2.3007547064007645, 2.3023297948576533, 2.302813981958998, 2.3042778146265364, 2.3227869265776393, 2.6125325845169938], "accuracy": [0.09509972482919693, 0.09536388516426086, 0.09153348207473755, 0.08558975160121918, 0.08717474341392517, 0.09972262382507324, 0.09813763201236725], "val_loss": [1.9705967221941267, 1.972890853881836, 1.9737347194126673, 1.9742958886282784, 1.97762359891619, 2.0448074340820312, 2.7628804615565707], "val_accuracy": [0.10433333367109299, 0.1276666671037674, 0.08033332973718643, 0.09566666930913925, 0.09799999743700027, 0.09799999743700027, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 2, 0, 6, 9, 0, 2, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 2, 2, 1, 2, 2, 1, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [30, 13, 25, 5, 64, 36, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [9, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [28, 97], [0, 1, 1, 1], [5, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.07371428608894348, "mapping_values": [1, 11, 11, 7, 4, 2, 3, 3, 1, 2, 1, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(beta)", "other_info": {"loss": [2.303250167726006, 2.30242611624703, 2.3009838619882155, 2.2992275672235416, 2.3006761490062653, 2.29981078517089, 2.2988273002499557, 2.301003633851089, 2.3003621365904037, 2.298891109104532, 2.299126325707315, 2.2990741877744165, 2.2995096698428945, 2.300112879177079, 2.299117903620607, 2.2986199875958704, 2.299022532850917, 2.299386988006106, 2.299028608509578, 2.299919565135556], "accuracy": [0.08638224750757217, 0.08770307898521423, 0.0948355570435524, 0.09853387624025345, 0.09628847241401672, 0.10091137140989304, 0.10196803510189056, 0.0940430611371994, 0.0936468094587326, 0.1026284471154213, 0.10038304328918457, 0.10355303436517715, 0.10117553919553757, 0.0936468094587326, 0.09998679161071777, 0.10381719470024109, 0.10527011007070541, 0.10355303436517715, 0.09800554811954498, 0.10540219396352768], "val_loss": [1.9702142306736536, 1.9696713175092424, 1.9691638265337263, 1.9688843318394251, 1.9688127381461007, 1.9688141686575753, 1.968853201184954, 1.968863078526088, 1.9687127385820662, 1.9686002050127303, 1.96856723512922, 1.968634877886091, 1.9686995915004186, 1.968702929360526, 1.968728746686663, 1.9688431194850378, 1.9690111705235072, 1.9692437308175224, 1.969534192766462, 1.969785485948835], "val_accuracy": [0.049666665494441986, 0.0573333315551281, 0.06199999898672104, 0.06700000166893005, 0.07133333384990692, 0.07333333045244217, 0.07733333110809326, 0.07766667008399963, 0.08033332973718643, 0.08299999684095383, 0.08399999886751175, 0.08433333039283752, 0.0833333358168602, 0.08633333444595337, 0.08833333104848862, 0.08733333647251129, 0.08433333039283752, 0.0833333358168602, 0.08399999886751175, 0.0793333351612091]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 8, 6, 0, 0, 0, 8, 1, 9, 2, 2, 2, 1, 0, 6, 5, 5, 8, 3, 4, 2, 1, 6, 6, 4, 1, 6, 9, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 1, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [58, 13, 25, 5, 64, 36, 20, 27, 65, 70], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [5, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [5, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [42, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [9, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.06771428883075714, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.30290098269665, 2.3018785071898886, 2.3007131283545554, 2.2994454293407864, 2.301098177099524, 2.3004308484722014, 2.2993924548487072, 2.3013370307901706, 2.300590142849776, 2.2993343687643226, 2.2998158459366747, 2.299810554593577, 2.3004046622961427, 2.301004736540954], "accuracy": [0.08651433140039444, 0.08902391046285629, 0.09668471664190292, 0.09840179979801178, 0.0956280529499054, 0.10130762308835983, 0.09985470771789551, 0.0936468094587326, 0.09391097724437714, 0.10091137140989304, 0.1006472036242485, 0.09919429570436478, 0.09879804402589798, 0.09140139818191528], "val_loss": [1.9699207714625768, 1.969519751412528, 1.9693427767072404, 1.9694596018110002, 1.9696067401341029, 1.9696504729134696, 1.9696570805140905, 1.9695097378322057, 1.9694391659327917, 1.9694717952183314, 1.969640118735177, 1.9698825563703264, 1.9702024459838867, 1.9704084396362305], "val_accuracy": [0.054666668176651, 0.06066666543483734, 0.06599999964237213, 0.06933332979679108, 0.0689999982714653, 0.07633333653211594, 0.0806666687130928, 0.08399999886751175, 0.08733333647251129, 0.08500000089406967, 0.08366666734218597, 0.0806666687130928, 0.07800000160932541, 0.0793333351612091]}}]