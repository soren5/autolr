[{"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 0, 7, 3, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 2, 0, 3, 2, 3, 2, 0, 2, 2, 2, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7688571214675903, "mapping_values": [1, 77, 77, 48, 29, 10, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(alpha), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), grad)), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.pow(grad, grad))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))))))))))))))))), tf.math.negative(grad)))), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3004226420360583, 2.285923729514748, 2.256942157212533, 2.211409263764516, 2.1451411713320643, 2.0309624368519974, 1.8540972834013834, 1.6221136996743228, 1.452027974206191, 1.3643851835714151, 1.333762844854956, 1.1595466288089311, 1.0549665073661316, 0.9453148678498198, 0.9215158201983388, 0.8818527497021498, 0.8699894878905542, 0.8362658838113506, 0.8030485965162929, 0.789756055025298, 0.7732196930865287, 0.758415977078784, 0.7578602727252133, 0.7534734718614738, 0.7383767076613109, 0.7212291509247633, 0.6965519297927552, 0.6936949198240648, 0.6880372496029767, 0.6809471273985931, 0.6721086104973322, 0.6603431035231259, 0.6682959903799673, 0.6484033871934619, 0.6426398180983148, 0.6369390536875631, 0.6298211961453223, 0.6320423899136515, 0.618446516771799, 0.6092046641040677, 0.59963911265556, 0.5937268680994615, 0.5895186651573363, 0.5781249811683647, 0.5755907750369031, 0.563808541823183, 0.5647145057823585, 0.5565598898040399, 0.5468455203898027, 0.5399589123994825, 0.5315982005489406, 0.5312239038725382, 0.5209161917672984, 0.5125131550293085, 0.5153441132453328, 0.50507662156475, 0.5119063289622746, 0.5034132867386281, 0.49349038708148585], "accuracy": [0.09734513610601425, 0.13393211364746094, 0.21833311021327972, 0.29745081067085266, 0.3543785512447357, 0.38660678267478943, 0.4209483563899994, 0.462950736284256, 0.49465063214302063, 0.523048460483551, 0.5406154990196228, 0.5933166146278381, 0.63096022605896, 0.6497160196304321, 0.6440364718437195, 0.6723021864891052, 0.6843217611312866, 0.6926429867744446, 0.7010962963104248, 0.6971337795257568, 0.7003037929534912, 0.7057191729545593, 0.7128516435623169, 0.7165499925613403, 0.7248712182044983, 0.7246070504188538, 0.7306828498840332, 0.7310791015625, 0.7380794882774353, 0.7368907928466797, 0.7395324110984802, 0.7497028112411499, 0.7464007139205933, 0.7477215528488159, 0.7547219395637512, 0.7592127919197083, 0.7630431652069092, 0.7572315335273743, 0.7617223858833313, 0.7695152759552002, 0.7695152759552002, 0.774270236492157, 0.772288978099823, 0.7746664881706238, 0.7757231593132019, 0.7847048044204712, 0.7810064554214478, 0.785101056098938, 0.7901201844215393, 0.7951393723487854, 0.7922335267066956, 0.7988376617431641, 0.8021397590637207, 0.8082155585289001, 0.8042530417442322, 0.8087438941001892, 0.8079513907432556, 0.8062343001365662, 0.8082155585289001], "val_loss": [1.9622816358293806, 1.9408353396824427, 1.9079231534685408, 1.8599248613630022, 1.7802155358450753, 1.636540481022426, 1.4037606375558036, 1.1350106171199255, 0.9288949285234723, 0.8232475178582328, 0.750638587134225, 0.7304216623306274, 0.665504915373666, 0.654167788369315, 0.6573713677270072, 0.6461544718061175, 0.6278669493538993, 0.605933598109654, 0.5811030694416591, 0.5695594208581107, 0.5661711522511074, 0.5598642655781337, 0.5556812626974923, 0.5522151674543109, 0.5444582871028355, 0.5350149699619838, 0.528700453894479, 0.5224560669490269, 0.5174485274723598, 0.5144573450088501, 0.5084495885031564, 0.5025161504745483, 0.49778623240334646, 0.4914989641734532, 0.4844015325818743, 0.47952042307172504, 0.47570269448416574, 0.47065058776310514, 0.4653005599975586, 0.4613451787403652, 0.45785982268197195, 0.4528449433190482, 0.448495762688773, 0.4459755761282785, 0.44337494884218487, 0.43895407233919415, 0.43445359809058054, 0.43102589675358366, 0.42786494323185514, 0.4236047608511789, 0.41993145431791035, 0.41781249216624666, 0.4146360158920288, 0.4105239765984671, 0.4070722460746765, 0.40494427510670256, 0.40259993076324463, 0.3998884984425136, 0.39781300510678974], "val_accuracy": [0.109333336353302, 0.3009999990463257, 0.3876666724681854, 0.4266666769981384, 0.4493333399295807, 0.4933333396911621, 0.5446666479110718, 0.6036666631698608, 0.656000018119812, 0.6596666574478149, 0.6823333501815796, 0.6956666707992554, 0.7103333473205566, 0.7103333473205566, 0.7139999866485596, 0.7336666584014893, 0.7306666374206543, 0.7390000224113464, 0.737333357334137, 0.7350000143051147, 0.7353333234786987, 0.7429999709129333, 0.7513333559036255, 0.7586666941642761, 0.7580000162124634, 0.7556666731834412, 0.7573333382606506, 0.7586666941642761, 0.7603333592414856, 0.762333333492279, 0.768666684627533, 0.7730000019073486, 0.7753333449363708, 0.781333327293396, 0.7816666960716248, 0.7870000004768372, 0.7886666655540466, 0.7853333353996277, 0.7883333563804626, 0.7900000214576721, 0.7919999957084656, 0.7943333387374878, 0.7990000247955322, 0.7986666560173035, 0.8026666641235352, 0.8066666722297668, 0.8053333163261414, 0.8116666674613953, 0.8159999847412109, 0.8153333067893982, 0.8173333406448364, 0.8186666369438171, 0.8216666579246521, 0.8263333439826965, 0.8259999752044678, 0.8246666789054871, 0.8263333439826965, 0.8256666660308838, 0.824999988079071]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [3, 2, 2, 3, 0, 7, 3, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 2, 3, 3, 1], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 4, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7602857351303101, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 5, 3, 3, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3004194711413852, 2.285864173366157, 2.2566825083895226, 2.21068945883319, 2.143366586011021, 2.0266534935576237, 1.8453895928538186, 1.6119853890787703, 1.448985468898829, 1.37052253879466, 1.3348453134168423, 1.1565088887712849, 1.0435805578651272, 0.940842720369826, 0.9217036298678268, 0.884973812821267, 0.871389173411139, 0.8350697551121912, 0.804512843251496, 0.794482450876663, 0.7813106932738958, 0.7664798717095064, 0.7658812457213643, 0.7587368246618121, 0.7428229272231733, 0.7266048197071739, 0.7045328234479947, 0.7015764056699403, 0.6952724030162397, 0.6898244124645444, 0.6795917348524111, 0.667495482617586, 0.6738617056711333, 0.6560139084425994, 0.6498791777682956, 0.6438436809469129, 0.6372019518651447, 0.637582974230152, 0.623321107916781, 0.6151761279807131, 0.604780362534438], "accuracy": [0.09734513610601425, 0.13393211364746094, 0.21872936189174652, 0.2985074520111084, 0.3556993901729584, 0.3870030343532562, 0.4224012792110443, 0.46466779708862305, 0.49451854825019836, 0.5226522088050842, 0.5416721701622009, 0.5987319946289062, 0.6338660717010498, 0.6473385095596313, 0.6436402201652527, 0.6723021864891052, 0.6836613416671753, 0.6914542317390442, 0.698718786239624, 0.6951525807380676, 0.7003037929534912, 0.7036058902740479, 0.7086250185966492, 0.7164179086685181, 0.7238145470619202, 0.7210407853126526, 0.7234182953834534, 0.72672039270401, 0.7339849472045898, 0.7333245277404785, 0.7382115721702576, 0.746268630027771, 0.7428345084190369, 0.7395324110984802, 0.7508915662765503, 0.7553823590278625, 0.7606657147407532, 0.757099449634552, 0.7631752490997314, 0.7662131786346436, 0.7681944370269775], "val_loss": [1.962263720376151, 1.9407041413443429, 1.907515389578683, 1.8589019094194685, 1.77760682787214, 1.6299598217010498, 1.3907383169446672, 1.1194728783198766, 0.9159769330705915, 0.8221239703042167, 0.7466357605797904, 0.7300902264458793, 0.6584014041083199, 0.6580616576331002, 0.6611474752426147, 0.6491164309637887, 0.625495195388794, 0.6035151651927403, 0.58063805103302, 0.5709943090166364, 0.5687812737056187, 0.5624208961214338, 0.5582799911499023, 0.5550805500575474, 0.5459711040769305, 0.537979245185852, 0.5315303461892265, 0.5236388444900513, 0.5202892848423549, 0.5176120485578265, 0.5108589274542672, 0.5057477269853864, 0.5015084402901786, 0.49441793986729216, 0.48663653646196636, 0.4818583215985979, 0.4783871684755598, 0.47305502210344585, 0.46688798495701384, 0.4626181295939854, 0.4595135109765189], "val_accuracy": [0.10966666787862778, 0.30133333802223206, 0.3880000114440918, 0.42766666412353516, 0.44999998807907104, 0.49399998784065247, 0.5463333129882812, 0.6053333282470703, 0.6570000052452087, 0.6499999761581421, 0.6866666674613953, 0.6973333358764648, 0.7136666774749756, 0.7056666612625122, 0.7173333168029785, 0.7323333621025085, 0.7286666631698608, 0.7363333106040955, 0.7386666536331177, 0.7326666712760925, 0.734000027179718, 0.7443333268165588, 0.7526666522026062, 0.7540000081062317, 0.7556666731834412, 0.7536666393280029, 0.7570000290870667, 0.7616666555404663, 0.7576666474342346, 0.7636666893959045, 0.7689999938011169, 0.7713333368301392, 0.7713333368301392, 0.7776666879653931, 0.7833333611488342, 0.7873333096504211, 0.7866666913032532, 0.7839999794960022, 0.7823333144187927, 0.7823333144187927, 0.7866666913032532]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 7, 5, 4, 0, 2, 0, 2, 6, 0, 4, 0, 3, 0, 2, 2, 8, 1, 6, 1, 2, 6, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 1, 1, 0, 8, 0, 7, 4, 2, 6, 0, 8, 9, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 2, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 0, 1, 2, 1, 0, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 4, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.21199999749660492, "mapping_values": [1, 16, 16, 8, 8, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(alpha, grad))), grad)), grad)), tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [4.292710856266498, 2.3081791292265375, 2.1616470028994783, 2.3071964549791577, 2.3039675599721603, 2.303313510481865, 2.3033705474741155], "accuracy": [0.1686699241399765, 0.10659094154834747, 0.22493726015090942, 0.10077928751707077, 0.09509972482919693, 0.09826971590518951, 0.10170386731624603], "val_loss": [1.9844144412449427, 1.9659241267613001, 1.9821240561349052, 1.974466119493757, 1.973808765411377, 1.9736990247453963, 1.973745277949742], "val_accuracy": [0.10066666454076767, 0.15966667234897614, 0.09799999743700027, 0.10066666454076767, 0.09799999743700027, 0.10100000351667404, 0.09866666793823242]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 4, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [1, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 5, 2, 3, 2, 7, 3, 6, 9, 3, 7, 3, 4, 9, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 2, 0, 3, 2, 3, 2, 0, 2, 0, 1, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 65, 70, 22], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [1, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 72, 72, 46, 26, 11, 3, 3, 1, 2, 0, 2, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.multiply(alpha, alpha), tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(grad, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))))))))))), tf.math.add(alpha, grad))))))))), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.sqrt(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), tf.math.negative(grad))))))))), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 2, 7, 2, 2, 9, 3, 7, 5, 4, 0, 2, 0, 2, 6, 0, 4, 0, 3, 0, 2, 2, 8, 1, 6, 1, 2, 6, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 1, 1, 0, 8, 0, 7, 4, 2, 6, 0, 8, 9, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 2, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 0, 1, 2, 1, 0, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70, 71], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [9, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 90, 90, 54, 36, 11, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.negative(grad), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), grad), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))))))), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.multiply(tf.math.multiply(tf.math.subtract(grad, tf.math.subtract(grad, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, alpha))))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), alpha))), tf.math.add(alpha, grad)))), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))), tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3028153738624715, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09708096832036972, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 2, 2, 0, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [7, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 5, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 2, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(alpha, grad)))), grad)), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.556686012250505e+26, 844472.2281376923, 53575860220.605995, 3766782881400736.0, NaN, NaN], "accuracy": [0.09708096832036972, 0.10302469879388809, 0.09985470771789551, 0.09985470771789551, 0.10474177449941635, 0.10011887550354004], "val_loss": [NaN, 33845150.85714286, 2218075806573.7144, 1.4536381605961494e+17, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 0, 6, 2, 1, 9, 3, 2, 3, 4, 6, 2, 0, 2, 6, 8, 1, 5, 1, 0, 2, 2, 3, 1, 6, 2, 6, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 0, 3], [1, 1, 2, 0, 3, 2, 3, 2, 0, 2, 2, 0, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 2, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 28, 2, 57, 74, 34, 28, 94, 70, 48], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 1, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [4, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 78, 78, 46, 32, 11, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.negative(grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad)))))))))), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.sqrt(grad))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))))), alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))), tf.math.add(grad, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(grad, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, alpha))))))), tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))))))), grad))))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [6, 8, 2, 3, 2, 7, 2, 6, 0, 8, 2, 9, 4, 8, 2, 0, 2, 6, 3, 6, 4, 3, 0, 2, 2, 3, 1, 3, 2, 2, 8, 8, 3, 1, 1, 3, 5, 5, 2, 2, 3, 9, 2, 0, 8, 9, 7, 4, 2, 9, 0, 8, 5, 0, 8], [0, 0, 2, 3, 3, 2, 0, 2, 1, 0, 0, 2, 1, 2, 3, 2, 0, 1, 0, 3, 2, 3, 2, 2, 2, 1, 1, 2, 1, 0, 2, 0, 2, 2, 3, 2, 1, 0], [55, 18, 65, 90, 84, 41, 8, 70, 98, 10, 98, 23], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [60, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [3, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 81, 81, 50, 31, 12, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(grad)), grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), grad)))), tf.math.subtract(grad, tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(tf.math.square(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), alpha))))), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.add(grad, alpha)))))))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [3, 2, 2, 3, 0, 7, 3, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 2, 2, 0, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [4, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 2, 2, 0, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [1, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 33, 33, 18, 15, 4, 2, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.subtract(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), grad)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), alpha)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 5, 2, 2, 0, 7, 2, 1, 9, 3, 7, 5, 4, 0, 2, 0, 2, 6, 0, 4, 0, 3, 0, 2, 2, 8, 1, 6, 1, 2, 6, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 1, 1, 0, 8, 0, 7, 4, 2, 6, 0, 8, 9, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [1, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 87, 87, 53, 34, 10, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))), grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.subtract(tf.math.subtract(grad, tf.math.negative(grad)), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), grad)), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))))), tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 2, 2, 0, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [4, 2, 6, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [8, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [7, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 1, 4, 2, 2, 0, 0, 3, 1, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(grad, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 9, 4, 7, 3, 4, 0, 2, 0, 2, 6, 8, 9, 0, 3, 0, 2, 2, 3, 1, 6, 2, 2, 9, 1, 3, 1, 2, 3, 5, 2, 2, 3, 3, 9, 2, 3, 8, 0, 7, 4, 1, 6, 0, 8, 5, 0, 3], [2, 1, 2, 0, 3, 2, 2, 2, 0, 2, 2, 2, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 77, 57, 74, 34, 28, 94, 13], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [0, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [978.3709063475488, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09206181764602661, 0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [95020.26116071429, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 4, 3, 0, 7, 2, 1, 9, 3, 7, 3, 4, 0, 2, 4, 2, 6, 8, 4, 8, 3, 0, 2, 2, 3, 1, 6, 2, 2, 8, 6, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 6, 0, 8, 0, 4, 4, 2, 6, 0, 8, 5, 0, 3], [1, 1, 2, 2, 3, 1, 3, 2, 0, 2, 2, 3, 3, 2, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 0, 2, 1, 2, 1], [28, 18, 30, 2, 5, 74, 34, 28, 94, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0738343670964241, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 4, 7, 4, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 6, 6, 5, 2, 8, 1, 8, 5, 4, 3, 0, 5, 3, 3, 3, 9, 8, 9, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 2, 0, 3, 2, 3, 2, 0, 1, 2, 2, 2, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 2, 2, 2, 2, 3, 1, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 33, 74, 34, 28, 48, 70], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [2, 3], [52], [0, 1, 1, 1], [3, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 83, 83, 53, 30, 10, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.pow(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))))), tf.math.square(tf.math.add(alpha, grad)))))), grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), alpha))), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))))), tf.math.sqrt(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(grad, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), grad))), tf.math.add(alpha, grad)))))))))), grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, grad))))), alpha)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 2, 2, 0, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 1, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [4, 2, 2, 8, 7], [1, 3], [52], [0, 0, 1, 1], [3, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(beta), alpha)", "other_info": {"loss": [2.302808916249122, 2.3034920448388374, 2.303551839091097, 2.30214223961206, 2.3018489897668384, 2.302546760362326], "accuracy": [0.08968432247638702, 0.08836349099874496, 0.08809932321310043, 0.09377889335155487, 0.09457138925790787, 0.09179764986038208], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 6, 8, 4, 0, 3, 0, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 0, 3], [1, 1, 2, 2, 0, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [81, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, beta))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302808916249122, 2.3034920448388374, 2.303551839091097, 2.30214223961206, 2.3018489897668384, 2.302546760362326], "accuracy": [0.08968432247638702, 0.08836349099874496, 0.08809932321310043, 0.09377889335155487, 0.09457138925790787, 0.09179764986038208], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [3, 2, 2, 3, 0, 7, 2, 1, 9, 2, 7, 3, 4, 0, 2, 5, 2, 6, 8, 4, 5, 3, 2, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 8, 4, 2, 6, 0, 8, 5, 0, 3, 3, 0, 6, 7, 1, 4, 8], [2, 1, 2, 3, 3, 1], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.3028089342305, 2.303492107820895, 2.303551875053852, 2.3021420237410575, 2.3018477122387817, 2.302543476635297, 2.3022437593830167, 2.3034788090019744, 2.3030681382742193], "accuracy": [0.08968432247638702, 0.08836349099874496, 0.08809932321310043, 0.09377889335155487, 0.09457138925790787, 0.09166556596755981, 0.08928807079792023, 0.09021265059709549, 0.08928807079792023], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704885482788086, 1.9704878670828683, 1.9704858916146415, 1.9704821450369698, 1.9704747200012207, 1.9704621859959193, 1.9704433168683733], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 7, 5, 4, 0, 2, 0, 2, 6, 0, 4, 0, 3, 0, 2, 2, 8, 1, 6, 1, 2, 6, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 1, 1, 0, 8, 0, 7, 4, 2, 6, 0, 8, 9, 0, 3], [1, 1, 2, 2, 2, 2, 3, 0, 0, 2, 2, 2, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 0, 1, 2, 1, 0, 2, 1, 2, 3], [76, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [3, 3], [52], [1, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 18, 18, 10, 8, 2, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302808916249122, 2.3034920448388374, 2.303551839091097, 2.30214223961206, 2.3018489897668384, 2.302546760362326], "accuracy": [0.08968432247638702, 0.08836349099874496, 0.08809932321310043, 0.09377889335155487, 0.09457138925790787, 0.09179764986038208], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}]