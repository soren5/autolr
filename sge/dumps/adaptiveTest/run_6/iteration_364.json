[{"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [8, 7, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [5, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8328571319580078, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9273349402083413, 1.42299134516209, 0.9069329514369328, 0.7530057174087814, 0.6874102909079065, 0.6175817696252409, 0.5878040302761826, 0.5551895095435714, 0.5410490108125198, 0.4966198074394103, 0.4902027394588613, 0.47961947407704836, 0.4561755069337265, 0.4374186748511063, 0.4282488316876179, 0.4111753192245212, 0.40109040335326573, 0.4028614020862474, 0.3854218971664722, 0.373181474620577, 0.3631470404509241, 0.3461100458350904, 0.3382039349415456, 0.32089551259828614, 0.3194887444186031, 0.31564727540911147, 0.30643779125195986, 0.29480159188998517, 0.2810472413462545, 0.28244554646940057, 0.2744865124417082, 0.2647794940176893, 0.27362730530322016], "accuracy": [0.36705851554870605, 0.48131024837493896, 0.6592260003089905, 0.7078325152397156, 0.7326641082763672, 0.7655527591705322, 0.7788931727409363, 0.7950072884559631, 0.7996301651000977, 0.817461371421814, 0.8185180425643921, 0.8235371708869934, 0.8304054737091064, 0.8387266993522644, 0.8417646288871765, 0.8466516733169556, 0.8533879518508911, 0.8510104417800903, 0.8556333184242249, 0.8663320541381836, 0.8691058158874512, 0.873860776424408, 0.8732003569602966, 0.8767666220664978, 0.8780874609947205, 0.8815215826034546, 0.8848236799240112, 0.8844274282455444, 0.8926165699958801, 0.8934090733528137, 0.8963148593902588, 0.8969752788543701, 0.8956544995307922], "val_loss": [1.595376832144601, 0.6951591457639422, 0.5648050137928554, 0.5143441302435738, 0.47836804389953613, 0.4465878520693098, 0.4164321848324367, 0.3917211038725717, 0.38135892152786255, 0.3792493598801749, 0.366115323134831, 0.37174063069479807, 0.35073065757751465, 0.3463708588055202, 0.3514050245285034, 0.35588163137435913, 0.3305846537862505, 0.3418827312333243, 0.33305483204977854, 0.3396166477884565, 0.32024609191077097, 0.317786489214216, 0.31945239646094187, 0.31658631563186646, 0.31804188660212923, 0.32366589988980976, 0.31566249472754343, 0.30924894980021883, 0.32749625614711214, 0.3191272531236921, 0.3105149439402989, 0.3194473811558315, 0.3187259180205209], "val_accuracy": [0.3346666693687439, 0.684333324432373, 0.7400000095367432, 0.7556666731834412, 0.7826666831970215, 0.8063333630561829, 0.828000009059906, 0.8333333134651184, 0.840666651725769, 0.8389999866485596, 0.8450000286102295, 0.8326666951179504, 0.8486666679382324, 0.8516666889190674, 0.8510000109672546, 0.8513333201408386, 0.859333336353302, 0.8573333621025085, 0.8526666760444641, 0.8533333539962769, 0.8650000095367432, 0.8640000224113464, 0.8659999966621399, 0.8673333525657654, 0.862333357334137, 0.8696666955947876, 0.8703333139419556, 0.874666690826416, 0.8723333477973938, 0.874666690826416, 0.8723333477973938, 0.8666666746139526, 0.874666690826416]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [5, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8325714468955994, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9273387218400266, 1.421206710305842, 0.9037402429207205, 0.756566084764889, 0.6880648717463308, 0.6213640409957589, 0.5895415844776848, 0.5549082191487061, 0.5387732075930051, 0.4978587847926818, 0.4938639164947169, 0.48208246311696135, 0.4611531959674645, 0.442663762602808, 0.4320331237114904, 0.41415096539721086, 0.3984822006297071, 0.4040050234351853, 0.3889947607335854, 0.3672130736755484, 0.35711522131327705, 0.3442564648982635, 0.33980752427139305, 0.321595384298834, 0.31548819765045094, 0.31643201269651244, 0.3089891986099957, 0.2912323186504937, 0.2844891903769181, 0.28490213948454385, 0.27406585533400696, 0.2718074412992082, 0.2711432180770274, 0.2662928560587551, 0.2549888240528963, 0.25184482582067974, 0.24864436495321426, 0.23334283021226646, 0.22475866824408186, 0.22921630861406173, 0.2354033826313408, 0.22762074516654376, 0.21083897190236647, 0.22330947637384782], "accuracy": [0.3671905994415283, 0.4811781942844391, 0.6643772125244141, 0.7057191729545593, 0.735041618347168, 0.7617223858833313, 0.7759873270988464, 0.7942147850990295, 0.7980451583862305, 0.817989706993103, 0.8193105459213257, 0.8222163319587708, 0.8296129703521729, 0.8366134166717529, 0.8393871188163757, 0.8487650156021118, 0.8540483713150024, 0.852859616279602, 0.8532558679580688, 0.8689737319946289, 0.8685774803161621, 0.8741249442100525, 0.8754457831382751, 0.8824461698532104, 0.8835028409957886, 0.8805969953536987, 0.8821820020675659, 0.8894465565681458, 0.8944657444953918, 0.8883898854255676, 0.8956544995307922, 0.8949940800666809, 0.8969752788543701, 0.900409460067749, 0.9021265506744385, 0.9034473896026611, 0.9062210917472839, 0.9119006991386414, 0.9122969508171082, 0.9100515246391296, 0.9120327830314636, 0.9186369180679321, 0.9220710396766663, 0.9132214784622192], "val_loss": [1.5956008774893624, 0.6913569825036185, 0.5663773502622332, 0.5147252934319633, 0.4793537173952375, 0.4470603806631906, 0.41483732632228304, 0.3902778540338789, 0.38155819688524517, 0.38280854906354633, 0.3631934608731951, 0.37074282339641024, 0.3571671077183315, 0.3498040352548872, 0.35117197036743164, 0.3519868680409023, 0.3370691793305533, 0.34282080616269794, 0.3236438717160906, 0.32816157170704435, 0.31988383190972464, 0.31971492937632967, 0.31852201904569355, 0.3150502698762076, 0.31086643253053936, 0.32638111284800936, 0.3111984133720398, 0.3126985856464931, 0.3340833698000227, 0.32192998273032053, 0.31207031863076345, 0.32114300557545256, 0.3141741156578064, 0.31104001828602384, 0.30990264245441984, 0.3328901869910104, 0.3016879303114755, 0.3022455743380955, 0.32297226360866, 0.3319197807993208, 0.3202721561704363, 0.3324916022164481, 0.3251915318625314, 0.3071193184171404], "val_accuracy": [0.33266666531562805, 0.6840000152587891, 0.7433333396911621, 0.7620000243186951, 0.7836666703224182, 0.8043333292007446, 0.8293333053588867, 0.8349999785423279, 0.8429999947547913, 0.8356666564941406, 0.8516666889190674, 0.8339999914169312, 0.8476666808128357, 0.8453333377838135, 0.8529999852180481, 0.8543333411216736, 0.8576666712760925, 0.8546666502952576, 0.8613333106040955, 0.8606666922569275, 0.8669999837875366, 0.8643333315849304, 0.8659999966621399, 0.8663333058357239, 0.8693333268165588, 0.8700000047683716, 0.8726666569709778, 0.8723333477973938, 0.8666666746139526, 0.8730000257492065, 0.8730000257492065, 0.8619999885559082, 0.8773333430290222, 0.8763333559036255, 0.8693333268165588, 0.875, 0.8786666393280029, 0.8730000257492065, 0.8796666860580444, 0.8796666860580444, 0.8756666779518127, 0.8740000128746033, 0.8769999742507935, 0.8763333559036255]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 1, 1, 0, 1, 1, 2, 2, 2, 0, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [5, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8322857022285461, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9273401679395605, 1.4225909953041163, 0.9039506201164015, 0.7525839588708566, 0.6842553845218396, 0.6181120936424347, 0.5883862772212761, 0.5552587257463226, 0.5370556423928933, 0.4967258071162524, 0.4882110494270521, 0.47619299688012984, 0.4521918124282491, 0.43827912850686035, 0.4241378300414503, 0.4116203103476764, 0.40010763229852686, 0.39975414720067826, 0.38097594086173786, 0.3700334218908468, 0.36106981675795846, 0.3440145637262861, 0.34205386542514993, 0.3213696586473223, 0.32004590645253367, 0.3141600290002635, 0.3082957842157596, 0.2946882211040937, 0.2862725631514592, 0.28017003993080464, 0.26826179301135683, 0.26692778571973685, 0.27659696625161084, 0.2610141718707238, 0.25130811375775564, 0.25352575292503515, 0.24705481390281675, 0.23202350996646268, 0.22493272858792765, 0.22203268427236944, 0.22753690044405345, 0.2188394581007211, 0.21036533998570753, 0.21493679614721145, 0.2048843175767199], "accuracy": [0.36705851554870605, 0.48170650005340576, 0.6604147553443909, 0.707568347454071, 0.7343811988830566, 0.7652885913848877, 0.7781006693840027, 0.7938185334205627, 0.8017435073852539, 0.8182538747787476, 0.8189142942428589, 0.8261788487434387, 0.8325188159942627, 0.8381983637809753, 0.8436138033866882, 0.8504821062088013, 0.8536521196365356, 0.8506141901016235, 0.8593316674232483, 0.8642187118530273, 0.8705587387084961, 0.8782195448875427, 0.8758420348167419, 0.8795403242111206, 0.8799365758895874, 0.8809932470321655, 0.8819178342819214, 0.8882578015327454, 0.8903711438179016, 0.894069492816925, 0.8996169567108154, 0.8989565372467041, 0.8968431949615479, 0.901862382888794, 0.9015982151031494, 0.9015982151031494, 0.9046360850334167, 0.9111081957817078, 0.9158631563186646, 0.9161273241043091, 0.9141460657119751, 0.9211464524269104, 0.9183727502822876, 0.9158631563186646, 0.9248448014259338], "val_loss": [1.595322949545724, 0.6946870769773211, 0.5652453047888619, 0.5134904214314052, 0.47583530630384174, 0.44633897713252474, 0.4134340115955898, 0.3894929885864258, 0.38419813769204275, 0.3817145824432373, 0.3599673594747271, 0.362359276839665, 0.35214889901024954, 0.35156937156404766, 0.3486917274338858, 0.3542463779449463, 0.33154715810503277, 0.33810377972466604, 0.32978997911725727, 0.32889909403664724, 0.3183151738984244, 0.33183906759534565, 0.3147632139069693, 0.31845482758113314, 0.30758419207164217, 0.32650065422058105, 0.31201787505831036, 0.3065259712082999, 0.3275974137442453, 0.3185831734112331, 0.31421169212886263, 0.3362676927021572, 0.31465003320149015, 0.3076239398547581, 0.3086382916995457, 0.3200183170182364, 0.2939918637275696, 0.2990189620426723, 0.31169130972453524, 0.31906012126377653, 0.31002172401973177, 0.3337124500955854, 0.3224196263722011, 0.30191123485565186, 0.3117778556687491], "val_accuracy": [0.3346666693687439, 0.684333324432373, 0.7416666746139526, 0.7606666684150696, 0.784333348274231, 0.8056666851043701, 0.8289999961853027, 0.8349999785423279, 0.8373333215713501, 0.8353333473205566, 0.8503333330154419, 0.8366666436195374, 0.8479999899864197, 0.846666693687439, 0.8553333282470703, 0.8506666421890259, 0.8600000143051147, 0.8573333621025085, 0.8533333539962769, 0.8600000143051147, 0.8646666407585144, 0.8576666712760925, 0.8679999709129333, 0.8616666793823242, 0.8703333139419556, 0.8696666955947876, 0.871999979019165, 0.8733333349227905, 0.871999979019165, 0.8759999871253967, 0.8693333268165588, 0.8550000190734863, 0.878000020980835, 0.8796666860580444, 0.871666669845581, 0.8763333559036255, 0.8813333511352539, 0.8733333349227905, 0.8759999871253967, 0.8830000162124634, 0.8756666779518127, 0.8736666440963745, 0.8743333220481873, 0.8756666779518127, 0.8820000290870667]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 4, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [1, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8154285550117493, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 4, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9229347227492337, 1.541507444314323, 0.9614498438442766, 0.7490288442498453, 0.6799648882627581, 0.6112467561730494, 0.5814547142442726, 0.5489662475888881, 0.5243142078801736, 0.49157162116361475, 0.49288850368494214, 0.47531503449577805, 0.4494620530817251, 0.44022198060185225, 0.42682974254844086, 0.4144117217715138, 0.3997787850337053, 0.39860001862592326, 0.38726854907712127, 0.37371967846077225, 0.3571228867374816, 0.34442709031090557, 0.3356775572830266, 0.324842538481391, 0.3225847515628763, 0.31894750229639385, 0.31458514188778575, 0.30021814515624995, 0.2895944165618208, 0.2873635912662673, 0.27052740929243574, 0.2721184328161037, 0.2598026291159843, 0.25915718112859776, 0.25451754635634627], "accuracy": [0.3679831027984619, 0.4419495463371277, 0.6440364718437195, 0.7100779414176941, 0.739400327205658, 0.7658169269561768, 0.7839123010635376, 0.7954035401344299, 0.8026680946350098, 0.8210275769233704, 0.8150838613510132, 0.8239334225654602, 0.8337075710296631, 0.8356888294219971, 0.8441421389579773, 0.8436138033866882, 0.8529917001724243, 0.8577466607093811, 0.8570862412452698, 0.8652753829956055, 0.8687095642089844, 0.8746532797813416, 0.874389111995697, 0.8802007436752319, 0.8812574148178101, 0.8835028409957886, 0.8823140859603882, 0.8870691061019897, 0.8916919827461243, 0.8881257176399231, 0.9005415439605713, 0.8938053250312805, 0.9021265506744385, 0.9001452922821045, 0.9013340473175049], "val_loss": [1.6512105124337333, 0.8065166303089687, 0.5722686392920358, 0.5131921257291522, 0.47198828629084993, 0.4385295254843576, 0.41217044421604704, 0.38837673834392, 0.37600903851645334, 0.3840215972491673, 0.3670548711504255, 0.36154445580073763, 0.355245155947549, 0.35222134419849943, 0.35405207531792776, 0.3675073725836618, 0.33238184452056885, 0.3376032965523856, 0.3272102986063276, 0.32984920910426546, 0.3237358842577253, 0.32133778503962923, 0.3175040738923209, 0.3207374555724008, 0.3229646682739258, 0.324425254549299, 0.3083285689353943, 0.3124248470578875, 0.3248762828963144, 0.30913751465933664, 0.3070199319294521, 0.3118272764342172, 0.3103617855480739, 0.3104000432150705, 0.3140049832207816], "val_accuracy": [0.3486666679382324, 0.6513333320617676, 0.746999979019165, 0.7696666717529297, 0.7906666398048401, 0.8163333535194397, 0.8180000185966492, 0.8410000205039978, 0.843999981880188, 0.8326666951179504, 0.8450000286102295, 0.840666651725769, 0.8463333249092102, 0.8500000238418579, 0.8496666550636292, 0.8453333377838135, 0.8600000143051147, 0.8603333234786987, 0.8569999933242798, 0.8553333282470703, 0.8646666407585144, 0.8676666617393494, 0.8713333606719971, 0.8659999966621399, 0.8629999756813049, 0.8656666874885559, 0.8723333477973938, 0.8696666955947876, 0.8653333187103271, 0.8776666522026062, 0.8736666440963745, 0.8686666488647461, 0.8766666650772095, 0.8769999742507935, 0.8723333477973938]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [5, 4, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [1, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.7797142863273621, "mapping_values": [1, 54, 54, 32, 22, 6, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(tf.math.subtract(tf.math.negative(alpha), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), grad)), tf.math.pow(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), alpha)), tf.math.negative(tf.math.sqrt(alpha)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.994410605525706, 1.4806703346248915, 1.137211776113529, 0.9343016097700245, 0.800643594785216, 0.7741231164361003, 0.7350995285226652, 0.7272983373368752, 0.6834767831157558, 0.6331635059823513, 0.6432570168969182, 0.6250781133709928, 0.6012249650058965, 0.5823836750310913, 0.6072473875551396, 0.5592007301880652, 0.5618732136317122], "accuracy": [0.3362831771373749, 0.5124818682670593, 0.5989961624145508, 0.6577730774879456, 0.6927750706672668, 0.6992471218109131, 0.7260599732398987, 0.7243428826332092, 0.7404569983482361, 0.7582882046699524, 0.7585523724555969, 0.7621186375617981, 0.7753269076347351, 0.7832518815994263, 0.7692511081695557, 0.7950072884559631, 0.787082314491272], "val_loss": [1.6444072723388672, 0.7972064699445452, 0.7795675992965698, 0.6138058049338204, 0.6391249554497855, 0.5575286490576608, 0.601324030331203, 0.538155164037432, 0.4948307275772095, 0.5151811156954084, 0.4850250482559204, 0.4574065889630999, 0.4890270914350237, 0.45413179056985037, 0.4653411422457014, 0.4515369449343, 0.43134500299181255], "val_accuracy": [0.47066667675971985, 0.6486666798591614, 0.6690000295639038, 0.7393333315849304, 0.6963333487510681, 0.746999979019165, 0.7253333330154419, 0.7513333559036255, 0.7683333158493042, 0.768666684627533, 0.781333327293396, 0.8006666898727417, 0.7663333415985107, 0.7950000166893005, 0.7856666445732117, 0.7979999780654907, 0.796999990940094]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 0, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 3, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [80, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 3, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.2871428430080414, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.9738712070199553, 2.3053147147250073, 2.3735797562383154, 2.306556031342117, 2.3029480543528345, 2.2627683170184074, 2.327263501908848, 2.3036284387198265, 2.3023452257766794, 2.311438882166699, 2.3062295039190417], "accuracy": [0.1632545292377472, 0.10276053100824356, 0.17263241112232208, 0.09840179979801178, 0.11028926074504852, 0.1690661758184433, 0.12402588874101639, 0.09721305221319199, 0.10289261490106583, 0.14819706976413727, 0.09998679161071777], "val_loss": [1.9771714210510254, 1.9703816686357771, 1.9787069048200334, 1.9738493646894182, 1.972128459385463, 1.9263913972037179, 1.9749226570129395, 1.9738670076642717, 1.9667299815586634, 1.9788319723946708, 1.974670478275844], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10133333504199982, 0.10133333504199982, 0.14533333480358124, 0.2919999957084656, 0.09799999743700027, 0.09799999743700027, 0.09733333438634872, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 8, 1, 1, 4, 0, 4, 9, 0, 1, 2, 4, 8, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 9, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 1, 1, 0, 1, 1, 2, 2, 2, 0, 2, 3, 0, 2, 2, 1, 2, 2, 1, 2, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 59, 74, 20, 17, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [3, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.20885714888572693, "mapping_values": [1, 49, 49, 30, 19, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.pow(tf.math.negative(alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.negative(tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), grad))))), tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))), grad))), tf.math.pow(grad, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.8277359437381966, 2.3776372712223113, 2.5472303546257558, NaN, NaN, NaN, NaN], "accuracy": [0.16682076454162598, 0.10527011007070541, 0.17302866280078888, 0.109232597053051, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.0062693868364607, 1.7280466215951102, 253.34959193638392, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.19866666197776794, 0.13833333551883698, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 0, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [80, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 3, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.1908571422100067, "mapping_values": [1, 54, 54, 32, 22, 6, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.negative(grad), tf.math.add(alpha, tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(tf.math.subtract(tf.math.negative(alpha), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), grad)), tf.math.pow(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), alpha)), tf.math.negative(tf.math.sqrt(alpha)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.9861461758503367, 2.3067327217418976, 2.302781635224465, 2.7504569653742945, 2.310254026822851, 2.304449921412601, 2.303419245610447, 2.3030239553215983], "accuracy": [0.1644432693719864, 0.09945846349000931, 0.10276053100824356, 0.19402985274791718, 0.10091137140989304, 0.09655263274908066, 0.09338264167308807, 0.0944393053650856], "val_loss": [1.9786126954214913, 1.97387661252703, 1.9662909507751465, 1.9858638899666923, 1.975313459123884, 1.9738484110151018, 1.9736966405596053, 1.9736683028084892], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.12266666442155838, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 0, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [1, 4, 3, 3], [93], [1, 1, 1, 1], [0, 5], [0, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 54, 54, 32, 22, 6, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(tf.math.subtract(tf.math.negative(alpha), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), grad)), tf.math.pow(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), alpha)), tf.math.negative(tf.math.sqrt(alpha)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.301922077547526, 2.3025850799688024, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09576013684272766, 0.1002509593963623, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [5, 4, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [73, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [1, 4, 3, 3], [93], [0, 1, 1, 1], [2, 5], [3, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 2, 4, 3, 2, 1, 0, 3, 1, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, alpha))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07660810649394989, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [1, 3, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [24, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [6, 5, 0, 8, 0, 5, 4], [6, 4, 3, 3], [93], [1, 1, 1, 1], [7, 5], [3, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 9, 9, 5, 4, 2, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1227293242.3277926, 23985712339.400345, 112655606769.52794, 307251557338.2644, 657226971485.2231, 1211653794956.5278], "accuracy": [0.10210011899471283, 0.09681680053472519, 0.09708096832036972, 0.10289261490106583, 0.10579843819141388, 0.10077928751707077], "val_loss": [4605317120.0, 36840686738.28571, 124334871113.14285, 294719539492.5714, 575620401444.5714, 994672640000.0], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 8, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [65, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [5, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 9, 9, 5, 4, 1, 4, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.square(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 4, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 8, 1, 8, 4, 4, 6, 1, 8, 1, 4, 0, 2, 1, 3, 2, 6, 2, 9, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 1, 1, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 0, 2, 2, 1, 2, 1, 1, 2, 0, 2, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 38, 77, 69, 32, 74, 60, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [94, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [1, 4, 3, 3], [93], [0, 1, 1, 1], [8, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 54, 54, 32, 22, 7, 9, 9, 5, 4, 2, 4, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), grad))), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.sqrt(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), alpha)), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.add(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.math.subtract(grad, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), grad)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), alpha), tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [5, 4, 3, 3], [93], [0, 1, 1, 1], [5, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 54, 54, 32, 22, 5, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(tf.math.subtract(tf.math.negative(alpha), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), grad)), tf.math.pow(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), alpha)), tf.math.negative(tf.math.sqrt(alpha)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 4, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [7, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [1, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 9, 9, 5, 4, 1, 5, 3, 3, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.pow(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 4, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 9, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [1, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 54, 54, 32, 22, 6, 9, 9, 5, 4, 2, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(tf.math.subtract(tf.math.negative(alpha), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), grad)), tf.math.pow(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(grad, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, alpha))), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(alpha))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 4, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [5, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [1, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [0, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.09971428662538528, "mapping_values": [1, 56, 56, 33, 23, 6, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(tf.math.subtract(tf.math.negative(alpha), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), grad)), tf.math.pow(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), alpha)), tf.math.negative(tf.math.sqrt(alpha)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3395199854738284, 2.7502263678756167, 3.93800492136155, 5.912986293460683, 8.698904340671211, 12.416613560405626, 16.94366242072806], "accuracy": [0.09430722147226334, 0.09800554811954498, 0.09681680053472519, 0.10276053100824356, 0.10408136248588562, 0.09945846349000931, 0.1018359512090683], "val_loss": [2.0446594102042064, 2.4400340488978793, 3.361987522670201, 4.841485023498535, 6.834204401288714, 9.334357942853655, 12.365774427141462], "val_accuracy": [0.09700000286102295, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [73, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [1, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [0, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.09971428662538528, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, alpha), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3395199854738284, 2.7502263678756167, 3.93800492136155, 5.912986293460683, 8.698904340671211, 12.416613560405626, 16.94366242072806], "accuracy": [0.09430722147226334, 0.09800554811954498, 0.09681680053472519, 0.10276053100824356, 0.10408136248588562, 0.09945846349000931, 0.1018359512090683], "val_loss": [2.0446594102042064, 2.4400340488978793, 3.361987522670201, 4.841485023498535, 6.834204401288714, 9.334357942853655, 12.365774427141462], "val_accuracy": [0.09700000286102295, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 7, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [5, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [70, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [5, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.07571428269147873, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(grad, alpha), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301681636205171, 2.3007175267065487, 2.300825051879681, 2.302432929016202, 2.302344915306626, 2.3026289629378827, 2.3031393795469417, 2.303832474480436, 2.3051557716613496], "accuracy": [0.09021265059709549, 0.1006472036242485, 0.1014397069811821, 0.10038304328918457, 0.10738343745470047, 0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.969301700592041, 1.971418789454869, 1.972985131399972, 1.9734524999346053, 1.9736007962908064, 1.9740003858293806, 1.9744911875043596, 1.9752977234976632, 1.9772181510925293], "val_accuracy": [0.06499999761581421, 0.07533333450555801, 0.11033333092927933, 0.12700000405311584, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [5, 4, 1, 1, 4, 0, 4, 9, 4, 1, 2, 4, 2, 1, 0, 0, 4, 6, 1, 0, 4, 2, 0, 6, 1, 4, 2, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 2, 3, 0, 2, 2, 1, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [10, 18, 17, 69, 32, 74, 20, 27, 65, 70], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [73, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [5, 4, 3, 3], [93], [0, 0, 1, 1], [0, 5], [1, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3025074529137672, 2.3033573283274977, 2.3018949707942222, 2.3026087778182376, 2.302644897020567, 2.303538954883062], "accuracy": [0.08809932321310043, 0.09140139818191528, 0.09259014576673508, 0.0878351628780365, 0.08928807079792023, 0.09047681838274002], "val_loss": [1.9704887526375907, 1.9704886845179967, 1.9704884801592146, 1.9704884120396204, 1.9704888207571847, 1.9704889569963728], "val_accuracy": [0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665]}}]