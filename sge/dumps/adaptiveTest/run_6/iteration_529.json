[{"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 0, 5, 2, 4, 5, 6, 0, 3, 8, 2, 6, 6, 0, 4, 6, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 6, 5, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 63, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [5, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.831428587436676, "mapping_values": [1, 7, 7, 4, 3, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.negative(grad)), tf.math.add(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.089052205466166, 1.2018911391437612, 0.8513437974895421, 0.7606366330590687, 0.698529198019811, 0.6419277100546674, 0.5947378646932211, 0.5648652133751445, 0.5333705835133936, 0.5033712593469291, 0.4868285107952713, 0.4567721324227726, 0.44770427184995487, 0.43622668514776347, 0.430945552122859, 0.39816860233661977, 0.39033249017427374, 0.3756535337380981, 0.3711992698559089, 0.36461285278230626, 0.35907016666007, 0.3459853134875158, 0.3291298575830214, 0.3312631184753095, 0.32876839278837344, 0.30066966195667677, 0.29534309518304186, 0.2837220207693208, 0.27475817331690217, 0.27269068592575013, 0.2559087389235987, 0.25057294028129057, 0.25177649328375157, 0.2564380945542611], "accuracy": [0.2911108136177063, 0.5885615944862366, 0.6894729733467102, 0.7051908373832703, 0.735041618347168, 0.7576277852058411, 0.7656848430633545, 0.7849689722061157, 0.8017435073852539, 0.8169330358505249, 0.8193105459213257, 0.8334434032440186, 0.8343679904937744, 0.8354246616363525, 0.8432175517082214, 0.8487650156021118, 0.8560295701026917, 0.8615770936012268, 0.8621054291725159, 0.8614450097084045, 0.8656716346740723, 0.8712190985679626, 0.8751816153526306, 0.8757099509239197, 0.8720116019248962, 0.8853520154953003, 0.8887861371040344, 0.8942015767097473, 0.8943336606025696, 0.8944657444953918, 0.9015982151031494, 0.9037115573883057, 0.9084665179252625, 0.9050323367118835], "val_loss": [1.0136922086988176, 0.6952690737588065, 0.5406532628195626, 0.5270429509026664, 0.47734997953687397, 0.4526305539267404, 0.4325810841151646, 0.4048224261828831, 0.3913302847317287, 0.37898590735026766, 0.3661224331174578, 0.3582744598388672, 0.3532078266143799, 0.34960696526936125, 0.3359769071851458, 0.33684009313583374, 0.32478077922548565, 0.3291185327938625, 0.32956285987581524, 0.32184235538755146, 0.3140108755656651, 0.31271903003965107, 0.32032396112169537, 0.31153210571834017, 0.30992367437907625, 0.31139480216162546, 0.3082125357219151, 0.30322002513068064, 0.3045092225074768, 0.3012992399079459, 0.30787094150270733, 0.31297481911523, 0.31254961660930086, 0.30136746168136597], "val_accuracy": [0.6303333044052124, 0.7206666469573975, 0.7409999966621399, 0.7546666860580444, 0.781000018119812, 0.7913333177566528, 0.8183333277702332, 0.8320000171661377, 0.8323333263397217, 0.8420000076293945, 0.846666693687439, 0.8500000238418579, 0.8473333120346069, 0.847000002861023, 0.859666645526886, 0.8566666841506958, 0.8633333444595337, 0.859333336353302, 0.8659999966621399, 0.8676666617393494, 0.8650000095367432, 0.8666666746139526, 0.8629999756813049, 0.8709999918937683, 0.8673333525657654, 0.8683333396911621, 0.8693333268165588, 0.871666669845581, 0.8790000081062317, 0.8790000081062317, 0.875, 0.8736666440963745, 0.8736666440963745, 0.8740000128746033]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [2, 3, 2, 5, 9, 4, 5, 6, 0, 4, 2, 2, 6, 9, 0, 4, 8, 2, 0, 3, 2, 2, 3, 5, 2, 9, 1, 0, 3, 5, 2, 1, 9, 4, 6, 2, 0, 5, 5, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 2, 0, 0, 2, 2, 0, 2, 0, 2, 1, 2, 0, 1, 2, 2, 2, 2, 1, 2, 0, 0, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 14, 20, 73, 65, 70, 14, 89, 22], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8168571591377258, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.088162113064237, 1.1975163955493862, 0.855011357371172, 0.7623211121546547, 0.7055204589101444, 0.6440014105588847, 0.5978144365782908, 0.5656455235001969, 0.534717105737436, 0.502332673730505, 0.48881956603879456, 0.4611343516531622, 0.4492079454831254, 0.4328570194200927, 0.4347690985919525, 0.40196609866302624, 0.39219333620166513, 0.3764755761839096, 0.3781566013473923, 0.3759754401124968, 0.3640386686427734, 0.3485287271942902, 0.3371437779821976, 0.3393086380159315, 0.33327102136413544, 0.31063489073681055, 0.2994587535178578, 0.2902414345068938, 0.28674065828984674, 0.27815106725648664, 0.262939392197732, 0.2586396781563082, 0.255009149000582, 0.2601989654128137], "accuracy": [0.2915070652961731, 0.587372899055481, 0.6843217611312866, 0.7103421092033386, 0.7318716049194336, 0.7576277852058411, 0.7622507214546204, 0.7854973077774048, 0.8012151718139648, 0.81548011302948, 0.8171972036361694, 0.8322546482086182, 0.8342359066009521, 0.837141752243042, 0.841500461101532, 0.8481045961380005, 0.8532558679580688, 0.8595958352088928, 0.8605204224586487, 0.8593316674232483, 0.8642187118530273, 0.871879518032074, 0.8702945709228516, 0.871879518032074, 0.873860776424408, 0.8811253309249878, 0.886672854423523, 0.8898428082466125, 0.8918240666389465, 0.8931449055671692, 0.9017302989959717, 0.901862382888794, 0.9041078090667725, 0.9033153057098389], "val_loss": [1.0076700959886824, 0.6945390020098005, 0.5434697014944894, 0.526473879814148, 0.47944622380392893, 0.4554840326309204, 0.43495860270091463, 0.40431500332696096, 0.39193372215543476, 0.3790935788835798, 0.36735535519463675, 0.3606694681303842, 0.3501854283469064, 0.34478867053985596, 0.3385422485215323, 0.3326626079423087, 0.3276220900671823, 0.32971370220184326, 0.3410679016794477, 0.32247068200792584, 0.31429186889103483, 0.3148188420704433, 0.3199423040662493, 0.3107220871107919, 0.30519810744694303, 0.31678632327488493, 0.30424955912998747, 0.30363025835582186, 0.30293238162994385, 0.29894683190754484, 0.30954105513436453, 0.30651516573769705, 0.3197327596800668, 0.2945208123752049], "val_accuracy": [0.6326666474342346, 0.7193333506584167, 0.7419999837875366, 0.7586666941642761, 0.7820000052452087, 0.7873333096504211, 0.809333324432373, 0.8286666870117188, 0.8270000219345093, 0.8399999737739563, 0.8476666808128357, 0.8506666421890259, 0.8479999899864197, 0.8543333411216736, 0.8569999933242798, 0.8619999885559082, 0.862333357334137, 0.8600000143051147, 0.856333315372467, 0.8619999885559082, 0.8663333058357239, 0.8606666922569275, 0.8633333444595337, 0.8726666569709778, 0.8656666874885559, 0.8663333058357239, 0.8686666488647461, 0.8713333606719971, 0.8796666860580444, 0.875333309173584, 0.8740000128746033, 0.8730000257492065, 0.8740000128746033, 0.875]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [2, 3, 2, 5, 2, 2, 5, 6, 2, 4, 2, 2, 6, 9, 0, 4, 1, 2, 8, 3, 6, 4, 0, 2, 9, 9, 1, 9, 3, 0, 2, 1, 9, 4, 6, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 82, 78, 5, 84, 14, 20, 27, 65, 70, 14, 89, 22], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.7977142930030823, "mapping_values": [1, 32, 32, 18, 14, 5, 3, 3, 1, 2, 1, 3, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(grad, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), grad)), grad)))))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.232886983576452, 1.8495613761849454, 1.3079909637635332, 1.1339250803308685, 0.9569528027375014, 0.9143309714756055, 0.8497602560532453, 0.8305882518207393, 0.7800854807595347, 0.7667563910481795, 0.7294782835415972, 0.7278967371407029, 0.7215270503022967, 0.6844150454549899, 0.6777527830179073, 0.6727138176774935, 0.6609461377042081, 0.6520137043283316, 0.6467090873528686, 0.6509515206181787, 0.630655795016923, 0.6159255634351193, 0.6106405519396795, 0.6029144990729177, 0.6068232586796037, 0.6129170403803628, 0.5987339451281213, 0.5903310313625988, 0.5849817266411959, 0.5825300306424237, 0.5788348273924864, 0.5685228643211407, 0.566360178191853, 0.5655895436302923, 0.5516817607128263, 0.559530844360594, 0.5472895257492831, 0.5568213107965059, 0.5574935265835077], "accuracy": [0.2421080470085144, 0.436930388212204, 0.5562012791633606, 0.5913353562355042, 0.6579051613807678, 0.6704530715942383, 0.6923788189888, 0.6973979473114014, 0.7117950320243835, 0.71100252866745, 0.7304186820983887, 0.7288337349891663, 0.7300224304199219, 0.7460044622421265, 0.7461365461349487, 0.7481178045272827, 0.7564390301704407, 0.7553823590278625, 0.7607977986335754, 0.7508915662765503, 0.761590301990509, 0.7692511081695557, 0.7705719470977783, 0.7751948237419128, 0.7734777331352234, 0.7737419009208679, 0.7725531458854675, 0.7812706232070923, 0.7754589915275574, 0.778761088848114, 0.7816668748855591, 0.7815347909927368, 0.7885351777076721, 0.7902522683143616, 0.7930260300636292, 0.7909126877784729, 0.7950072884559631, 0.7902522683143616, 0.7913089394569397], "val_loss": [1.7698734828404017, 1.1605070659092493, 0.8956464018140521, 0.7639898061752319, 0.7022547551563808, 0.6305953434535435, 0.656349675995963, 0.5986641815730503, 0.5670291525976998, 0.558320164680481, 0.5427609000887189, 0.584222708429609, 0.5166306495666504, 0.5144004992076329, 0.5128064155578613, 0.5113769599369594, 0.5050566366740635, 0.5062796899250576, 0.48989185265132357, 0.4953967503138951, 0.4780224391392299, 0.4615053449358259, 0.49974376814705984, 0.4684791224343436, 0.46191809858594624, 0.4621248926435198, 0.45277745383126394, 0.45856738090515137, 0.4447253431592669, 0.4585275139127459, 0.4467266968318394, 0.446084874016898, 0.4488972680909293, 0.44134816101619173, 0.44416931697300505, 0.4368582282747541, 0.44049711738313946, 0.44195094278880526, 0.4367461885724749], "val_accuracy": [0.5353333353996277, 0.6156666874885559, 0.6176666617393494, 0.6553333401679993, 0.6909999847412109, 0.7303333282470703, 0.7116666436195374, 0.7243333458900452, 0.753333330154419, 0.7413333058357239, 0.7593333125114441, 0.7283333539962769, 0.7716666460037231, 0.768666684627533, 0.7663333415985107, 0.778333306312561, 0.7676666378974915, 0.7703333497047424, 0.7713333368301392, 0.7746666669845581, 0.7879999876022339, 0.7963333129882812, 0.7673333287239075, 0.7960000038146973, 0.7979999780654907, 0.7946666479110718, 0.7986666560173035, 0.7990000247955322, 0.8063333630561829, 0.796999990940094, 0.8086666464805603, 0.7983333468437195, 0.8013333082199097, 0.8109999895095825, 0.7976666688919067, 0.8106666803359985, 0.8076666593551636, 0.8013333082199097, 0.8046666383743286]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 2, 5, 2, 4, 5, 6, 0, 4, 2, 2, 6, 9, 0, 4, 1, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 3, 5, 2, 1, 9, 4, 6, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 14, 20, 27, 65, 70, 14, 89, 22], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.7954285740852356, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2327517095794294, 1.8554103787643499, 1.3234476483398818, 1.107907739833141, 1.0127657551995957, 0.9205481023316716, 0.8583073682946268, 0.8166657139470532, 0.7927645539421809, 0.7883073224950192, 0.749978877242845, 0.7575825656315339, 0.7291727204915476, 0.696361542621923, 0.6948957472602689, 0.6807173949269855, 0.6657243555783439, 0.672393490105824, 0.6454621573496552, 0.6298973142919665, 0.6311022499296974, 0.6429253017834669, 0.632215505672279, 0.6311147447905253, 0.6099848224659795, 0.6040832484245552, 0.6020700628841558, 0.5839058370827023, 0.5875476548432705, 0.5840994968878485, 0.5796266108408832, 0.5828330355108753, 0.5736898724129958, 0.5755110057495242, 0.5626408999165555, 0.5615637907105162, 0.5540120869957618], "accuracy": [0.23061682283878326, 0.44010037183761597, 0.5536917448043823, 0.604939877986908, 0.6362435817718506, 0.6693964004516602, 0.6873596906661987, 0.7058512568473816, 0.7080966830253601, 0.7107383608818054, 0.7199841737747192, 0.7132478952407837, 0.7265883088111877, 0.7445515990257263, 0.737022876739502, 0.7495707273483276, 0.7486461400985718, 0.7473253011703491, 0.7559106945991516, 0.7666094303131104, 0.7629110813140869, 0.754589855670929, 0.763439416885376, 0.7594769597053528, 0.7746664881706238, 0.772288978099823, 0.7725531458854675, 0.7827235460281372, 0.7820631265640259, 0.7803460359573364, 0.7814027070999146, 0.7817989587783813, 0.7876105904579163, 0.7833839654922485, 0.7948752045631409, 0.7910447716712952, 0.791441023349762], "val_loss": [1.7716280392238073, 1.1722643375396729, 0.8634278433663505, 0.7503762585776192, 0.6788070372172764, 0.6432948623384748, 0.5947834423610142, 0.5740740810121808, 0.5638302905218942, 0.5588275023869106, 0.5800567695072719, 0.5391908373151507, 0.5202101979936872, 0.5067118235996791, 0.503048232623509, 0.4970757280077253, 0.4847792557307652, 0.5083844491413662, 0.4801954712186541, 0.5065582309450422, 0.47454496792384554, 0.4908971445901053, 0.46915948390960693, 0.45886688573019846, 0.45653787681034635, 0.47128054073878695, 0.46080214636666433, 0.45593913963862825, 0.44645174060549053, 0.4385684473173959, 0.45613198620932444, 0.4327905944415501, 0.438480019569397, 0.44259369373321533, 0.43618771859577726, 0.4289470229830061, 0.4310812013489859], "val_accuracy": [0.5213333368301392, 0.6046666502952576, 0.6653333306312561, 0.6856666803359985, 0.7196666598320007, 0.7213333249092102, 0.7509999871253967, 0.7483333349227905, 0.7506666779518127, 0.7436666488647461, 0.7363333106040955, 0.762666642665863, 0.7670000195503235, 0.7766666412353516, 0.7770000100135803, 0.7789999842643738, 0.7866666913032532, 0.765666663646698, 0.7876666784286499, 0.7613333463668823, 0.7863333225250244, 0.7883333563804626, 0.7916666865348816, 0.7953333258628845, 0.8029999732971191, 0.7853333353996277, 0.8026666641235352, 0.7953333258628845, 0.7960000038146973, 0.8109999895095825, 0.7979999780654907, 0.8190000057220459, 0.8190000057220459, 0.7996666431427002, 0.8080000281333923, 0.8183333277702332, 0.8140000104904175]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [7, 3, 0, 5, 2, 4, 5, 6, 0, 3, 8, 2, 6, 6, 0, 4, 6, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 6, 5, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 63, 20, 27, 65, 70, 14, 89, 22], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [26, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.7620000243186951, "mapping_values": [1, 72, 72, 46, 26, 8, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 73, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))), grad)), tf.math.add(grad, grad))))), tf.math.multiply(grad, alpha)))), grad))))), tf.math.add(alpha, tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.negative(tf.math.sqrt(grad)))))), tf.math.negative(alpha))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.281319516855476, 2.138040078046882, 1.6632401919431061, 1.3300013280484844, 1.006711794542457, 0.8861850962710025, 0.8087679674092884, 0.7827631940128088, 0.7351246087023012, 0.7005431755202212, 0.6922495220756455, 0.6695896739248649, 0.6457618906938515, 0.6323435129412035, 0.5978574182505085, 0.5798465132067752, 0.5707521178089097, 0.5579597947934772, 0.5318219043622479, 0.5186863695751674, 0.5032098767165699, 0.49517654961661706, 0.486002728966926, 0.46565099126076137, 0.46175713769244225, 0.45952824361965783, 0.440927381599584, 0.4301531178493699, 0.42116129996675494, 0.4124008743730849, 0.4085548201792622, 0.40197533345446057, 0.3943538623179868, 0.38173606217482214, 0.37335778378209006, 0.3696914959254597, 0.3569143387296999, 0.36050065150114174, 0.3462538273657916, 0.34449417068973714, 0.3366334718397312, 0.33656347380527146, 0.3248356559241626, 0.321953167477304, 0.319956566706908, 0.3144519705821841, 0.3044145336484613, 0.2995738190288919, 0.290230704836322, 0.2920602195062311, 0.29060153933784444], "accuracy": [0.149649977684021, 0.34447231888771057, 0.45185577869415283, 0.5486725568771362, 0.6431118845939636, 0.6738871932029724, 0.6906617283821106, 0.7063795924186707, 0.7189275026321411, 0.7292299270629883, 0.7366266250610352, 0.7432307600975037, 0.7485140562057495, 0.7618544697761536, 0.7716285586357117, 0.7737419009208679, 0.7802139520645142, 0.7864218950271606, 0.7994980812072754, 0.8041210174560547, 0.8062343001365662, 0.8178576231002808, 0.8140271902084351, 0.8197067975997925, 0.8255184292793274, 0.8290846943855286, 0.8302733898162842, 0.8309338092803955, 0.8363492488861084, 0.844010055065155, 0.8494254350662231, 0.850350022315979, 0.8536521196365356, 0.856689989566803, 0.858671247959137, 0.8632941246032715, 0.8658037185668945, 0.8640866279602051, 0.8688416481018066, 0.8712190985679626, 0.8701624870300293, 0.8745211958885193, 0.8766345381736755, 0.8749174475669861, 0.8757099509239197, 0.882710337638855, 0.8833707571029663, 0.8860124349594116, 0.8912957310676575, 0.884691596031189, 0.8874653577804565], "val_loss": [1.9023956571306502, 1.6209609849112374, 0.9494513443538121, 0.7321021216256278, 0.6627242905752999, 0.6167451994759696, 0.5695714439664569, 0.5517604861940656, 0.5303493227277484, 0.5300764696938651, 0.5058050325938633, 0.49001334394727436, 0.48072493076324463, 0.46379949365343365, 0.45437872409820557, 0.447548508644104, 0.4289798992020743, 0.4211612939834595, 0.41350068364824566, 0.4024521453039987, 0.4005053639411926, 0.3970948202269418, 0.3896588512829372, 0.3862802045685904, 0.38188490697315763, 0.37624690362385343, 0.3727563960211618, 0.37389066389628817, 0.36752432584762573, 0.3663393684795925, 0.3626826064927237, 0.36090373141425, 0.35941061803272795, 0.35623384373528616, 0.35519708905901226, 0.35357196841921124, 0.3514112319265093, 0.34892548833574566, 0.34700569936207365, 0.34651118516921997, 0.34360220602580477, 0.3394780158996582, 0.3367274488721575, 0.3358763711793082, 0.3342870899609157, 0.329934298992157, 0.32399000440325054, 0.3280639052391052, 0.32612909589494976, 0.3320483905928476, 0.3366508994783674], "val_accuracy": [0.40966665744781494, 0.5146666765213013, 0.6610000133514404, 0.6933333277702332, 0.7243333458900452, 0.7319999933242798, 0.7473333477973938, 0.7506666779518127, 0.7526666522026062, 0.7666666507720947, 0.7730000019073486, 0.7793333530426025, 0.781000018119812, 0.7839999794960022, 0.7973333597183228, 0.8066666722297668, 0.812666654586792, 0.8153333067893982, 0.8199999928474426, 0.8243333101272583, 0.8209999799728394, 0.8266666531562805, 0.8366666436195374, 0.8379999995231628, 0.8463333249092102, 0.846666693687439, 0.8483333587646484, 0.8429999947547913, 0.8510000109672546, 0.8513333201408386, 0.8500000238418579, 0.8513333201408386, 0.8516666889190674, 0.8533333539962769, 0.8579999804496765, 0.8553333282470703, 0.8513333201408386, 0.8566666841506958, 0.859333336353302, 0.8579999804496765, 0.8583333492279053, 0.8586666584014893, 0.8569999933242798, 0.8613333106040955, 0.862333357334137, 0.8676666617393494, 0.8656666874885559, 0.8613333106040955, 0.8629999756813049, 0.8603333234786987, 0.8650000095367432]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 0, 5, 2, 4, 5, 6, 0, 3, 8, 2, 6, 6, 0, 4, 6, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 6, 5, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 2, 2, 1, 2, 2, 2, 1, 2, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 63, 20, 27, 65, 70, 14, 89, 22], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [6, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.6454285979270935, "mapping_values": [1, 7, 7, 4, 3, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.073331002577531, 1.1959783835669928, 0.8915050118008246, 0.8069857212499211, 0.7303336951884107, 0.658929493071113, 0.6103536703520133, 0.5765413814657919, 0.5604250665668956, 0.5417770547732039, 0.5318776666763798, 0.5074278378940104, 0.5045364138165548, 0.4896557322976265, 0.4917103630314571, 0.49728581730117416, 0.4866978842049164, 0.4814751898812549, 0.4702485490744345, 0.49845119186947295, 0.5111673242537856, 0.5005175522872407, 0.5414018687192932, 0.5611889182757613], "accuracy": [0.3070928454399109, 0.6013736724853516, 0.6778497099876404, 0.6909258961677551, 0.7187954187393188, 0.7515519857406616, 0.7643640041351318, 0.7757231593132019, 0.7800818681716919, 0.7843085527420044, 0.7960638999938965, 0.8072909712791443, 0.8049134612083435, 0.8131026029586792, 0.8203672170639038, 0.811649739742279, 0.8162726163864136, 0.8245938420295715, 0.8148196935653687, 0.8202351331710815, 0.8094043135643005, 0.8095363974571228, 0.8068947196006775, 0.7903843522071838], "val_loss": [0.992203848702567, 0.7500855241503034, 0.6007359027862549, 0.5658202511923653, 0.49667859077453613, 0.483211806842259, 0.4594144821166992, 0.4382743409701756, 0.431588922228132, 0.4235943385532924, 0.4099694149834769, 0.3974296365465437, 0.40802036012922016, 0.42622238397598267, 0.41348767280578613, 0.4163280044283186, 0.42347356251307894, 0.4117101090294974, 0.4102298191615513, 0.4071347713470459, 0.4165718470300947, 0.4351486393383571, 0.49374410084315706, 0.44216517891202656], "val_accuracy": [0.6209999918937683, 0.6949999928474426, 0.7076666951179504, 0.7443333268165588, 0.7829999923706055, 0.7896666526794434, 0.7990000247955322, 0.809333324432373, 0.8149999976158142, 0.812333345413208, 0.824999988079071, 0.8259999752044678, 0.831333339214325, 0.8330000042915344, 0.8299999833106995, 0.8323333263397217, 0.8410000205039978, 0.8276666402816772, 0.843666672706604, 0.8296666741371155, 0.8376666903495789, 0.82833331823349, 0.8183333277702332, 0.8163333535194397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 2, 5, 2, 4, 5, 6, 0, 4, 2, 2, 6, 9, 0, 4, 1, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 3, 5, 2, 1, 9, 4, 6, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 14, 20, 27, 65, 70, 14, 89, 22], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10057143121957779, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [114.98581678538889, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.22599393129348755, 0.10408136248588562, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [5168378441.142858, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1263333261013031, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [2, 0, 0, 5, 2, 4, 5, 6, 0, 3, 8, 2, 6, 6, 0, 4, 6, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 6, 5, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 14, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [1, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 9, 9, 5, 4, 2, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 2, 5, 2, 4, 5, 6, 0, 4, 2, 2, 6, 9, 0, 4, 1, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 3, 5, 2, 1, 9, 4, 6, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 63, 20, 27, 65, 70, 14, 89, 22], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 2, 3, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 0, 5, 2, 4, 5, 6, 0, 3, 8, 2, 6, 6, 0, 4, 6, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 6, 5, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 14, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [5, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [57, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [4, 0, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 0, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.negative(grad)), tf.math.add(alpha, tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [2, 3, 9, 0, 2, 4, 5, 6, 6, 4, 2, 2, 6, 9, 0, 4, 1, 2, 8, 3, 2, 2, 0, 1, 2, 9, 1, 0, 6, 3, 2, 1, 9, 4, 6, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 1, 0, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 14, 20, 27, 65, 70, 14, 89, 22], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [9, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 9, 9, 5, 4, 2, 3, 2, 2, 0, 1, 1, 1, 0, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3020335601667576, 2.3025898980962096, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09985470771789551, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 0, 5, 2, 4, 5, 6, 0, 3, 8, 2, 6, 6, 0, 4, 6, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 6, 5, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 63, 20, 27, 65, 70, 14, 89, 22], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [6, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 3, 1, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, alpha)", "other_info": {"loss": [3.310369760101151, 3.8634959829481854, 3.5736706573351293, 4.044120030207263, 4.054354764466996, 4.35460297218356, 4.760308932288133, 4.51406372731876, 4.283509339733272, 4.05992687723152, 3.8438741205674214, 3.63454080953763, 3.4303599695692664], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.1002509593963623, 0.09549596905708313, 0.09998679161071777, 0.10011887550354004, 0.10117553919553757, 0.09959053993225098, 0.09655263274908066, 0.09734513610601425, 0.09298639744520187, 0.09628847241401672, 0.09140139818191528], "val_loss": [3.4984361103602817, 3.1279121126447404, 3.3293758119855608, 3.46559933253697, 3.478649275643485, 3.967684745788574, 3.9550512858799527, 3.7419727870396207, 3.548928669520787, 3.3625524384634837, 3.1823907579694475, 3.006126335689, 2.8362748282296315], "val_accuracy": [0.09799999743700027, 0.09866666793823242, 0.09866666793823242, 0.10000000149011612, 0.10000000149011612, 0.10233332961797714, 0.10233332961797714, 0.10266666859388351, 0.10266666859388351, 0.09866666793823242, 0.09799999743700027, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [2, 3, 2, 5, 2, 4, 5, 6, 0, 8, 2, 2, 6, 9, 0, 4, 1, 9, 8, 6, 2, 2, 0, 2, 2, 9, 1, 0, 3, 5, 2, 1, 9, 4, 2, 2, 0, 5, 2, 3, 3, 9, 8, 4, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 0, 0, 2, 2, 1, 0, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 14, 20, 27, 26, 70, 14, 89, 22], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 40, 40, 26, 14, 8, 9, 9, 5, 4, 2, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(grad, tf.math.square(grad))), tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), grad))))), tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 2, 7, 2, 2, 6, 4, 3, 0, 6, 2, 2, 6, 1, 0, 4, 6, 2, 8, 3, 2, 2, 0, 0, 2, 9, 1, 0, 6, 2, 5, 1, 3, 5, 9, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 0, 1, 2, 2, 2, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 63, 20, 27, 65, 70, 14, 89, 22], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [8, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 7, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [53, 97], [0, 1, 1, 1], [3, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 61, 61, 36, 25, 7, 2, 2, 1, 1, 0, 3, 1, 1, 0, 0, 3, 1, 2, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), grad)), tf.math.add(alpha, alpha)))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(grad, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), alpha)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))))), alpha))), tf.math.add(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 0, 5, 2, 4, 5, 6, 0, 3, 8, 2, 6, 6, 0, 4, 6, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 6, 5, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 63, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [1, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [41, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [4, 5], [3, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.negative(grad)), tf.math.add(alpha, tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 0, 5, 2, 4, 5, 6, 0, 3, 8, 2, 6, 6, 0, 4, 6, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 6, 5, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 2, 2, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 63, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 1, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [26, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3037473804930877, 2.3326133202253128, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08875974267721176, 0.07924976944923401, 0.09285431355237961, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.976734229496547, 2.026813098362514, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.029333332553505898, 0.10000000149011612, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 3, 2, 5, 2, 4, 5, 6, 0, 4, 2, 2, 6, 9, 0, 4, 1, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 3, 5, 2, 1, 9, 4, 6, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 1, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 14, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [94, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 0, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(grad, tf.math.square(tf.math.add(alpha, alpha))))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.3112734078006847, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0812310129404068, 0.09457138925790787, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.026174409048898, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 2, 5, 2, 4, 5, 6, 0, 4, 2, 2, 6, 9, 0, 4, 1, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 3, 5, 2, 1, 9, 4, 6, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 1, 0, 1, 2, 2, 2, 1, 2, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 14, 20, 27, 65, 70, 14, 89, 22], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 4, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [4, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [6, 7, 3, 3], [21, 97], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.0705714300274849, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 3, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3013451387538666, 2.3033513774677843, 2.3007980280422564, 2.3009929355298366, 2.299585034771366, 2.3007471364927863, 2.3012504989224465, 2.3002292895754803, 2.3004715817085803, 2.3006998039649194, 2.300186941825545, 2.2998933460513724, 2.2995522227883733, 2.300001117295404, 2.2998059199958854, 2.3011973395465373, 2.300370325895427], "accuracy": [0.09470347315073013, 0.09285431355237961, 0.09655263274908066, 0.09959053993225098, 0.09351472556591034, 0.09417514503002167, 0.09787346422672272, 0.09589222073554993, 0.09298639744520187, 0.09470347315073013, 0.10091137140989304, 0.09840179979801178, 0.09668471664190292, 0.09589222073554993, 0.10474177449941635, 0.09298639744520187, 0.08902391046285629], "val_loss": [1.9698004722595215, 1.9694815363202776, 1.9693856920514787, 1.969411781855992, 1.9695779255458288, 1.9695734296526228, 1.9695168222699846, 1.9694863728114538, 1.9694570813860213, 1.9695140293666296, 1.9695854868207658, 1.969752243586949, 1.9700066021510534, 1.9703563962663924, 1.970696176801409, 1.970890726361956, 1.971180030277797], "val_accuracy": [0.055666666477918625, 0.06266666948795319, 0.06666667014360428, 0.07066666334867477, 0.07100000232458115, 0.0729999989271164, 0.07433333247900009, 0.07533333450555801, 0.07766667008399963, 0.07599999755620956, 0.07766667008399963, 0.07833333313465118, 0.07433333247900009, 0.06933332979679108, 0.06400000303983688, 0.06266666948795319, 0.06400000303983688]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 3, 0, 5, 2, 4, 5, 6, 0, 3, 8, 2, 6, 6, 0, 4, 6, 2, 8, 3, 2, 2, 0, 2, 2, 9, 1, 0, 6, 5, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 2, 2, 0, 0, 2, 2, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 14, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [37, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 0, 1, 1], [0, 5], [3, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(sigma))", "other_info": {"loss": [2.3018055442396395, 2.3048246838019555, 2.3026645582239658, 2.3031841974216856, 2.3013128865239105, 2.3031253016714595], "accuracy": [0.0952318087220192, 0.08981640636920929, 0.09285431355237961, 0.09338264167308807, 0.08994849026203156, 0.09100515395402908], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1], [2, 3, 2, 5, 2, 4, 5, 6, 0, 4, 2, 2, 6, 9, 0, 4, 1, 2, 2, 3, 2, 2, 0, 3, 2, 9, 1, 0, 3, 5, 2, 1, 3, 4, 6, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3, 9], [1, 1, 2, 0, 0, 2, 2, 1, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 42, 78, 5, 84, 14, 20, 27, 43, 70, 14, 89, 22], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 9, 6, 6, 6, 6, 4, 1, 4, 8], [4, 7, 3, 3], [21, 97], [0, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.03857142850756645, "mapping_values": [1, 88, 88, 56, 32, 11, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 74, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(tf.math.negative(grad), tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), grad)))), tf.math.multiply(tf.math.multiply(grad, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad)))), grad), grad)), tf.math.add(alpha, tf.math.sqrt(grad))))), tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.add(alpha, alpha)))))), tf.math.square(tf.math.add(alpha, tf.math.sqrt(grad))))))), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), grad), tf.math.multiply(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.301846923420001, 2.305302577389702, 2.3040427769242875, 2.305887319597318, 2.3053744755337946, 2.309206227742292], "accuracy": [0.0952318087220192, 0.08796724677085876, 0.08770307898521423, 0.08796724677085876, 0.08189142495393753, 0.08057060092687607], "val_loss": [1.9706262860979353, 1.9712061200823103, 1.972156592777797, 1.9732329504830497, 1.97445889881679, 1.9759519440787179], "val_accuracy": [0.046666666865348816, 0.04266666620969772, 0.03533333167433739, 0.029333332553505898, 0.026333333924412727, 0.023333333432674408]}}]