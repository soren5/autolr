[{"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 6, 8, 4, 0, 3, 0, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.769428551197052, "mapping_values": [1, 91, 91, 55, 36, 10, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 77, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))), tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, grad))))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), grad))))))), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, grad)))), tf.math.sqrt(tf.math.square(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3009451013498805, 2.285047929394971, 2.256876913217301, 2.210690672686386, 2.1434673854876753, 2.0315112545505696, 1.8498957424651299, 1.6079254337919702, 1.4596091626326895, 1.375507612616363, 1.2943990060981112, 1.1983705400365643, 1.0375952658289853, 0.935100000201593, 0.9025751540232895, 0.8731345386710448, 0.858164447071278, 0.8261426122291544, 0.8061958259563751, 0.792038505024772, 0.7829301674147765, 0.7668117486868458, 0.7574542573871016, 0.7482800645803684, 0.7321801841959678, 0.715757986920117, 0.7114027646538635, 0.6958869775729393, 0.704190083097048, 0.6922422659600243, 0.674861898826586, 0.661684735269122, 0.666180680023602, 0.6494575819602622, 0.6407450674437041, 0.6414788833950583, 0.6287039517017955, 0.6208642291087422, 0.6235789000051148, 0.6095309667441792, 0.5986344320206295, 0.5903727681078474, 0.590777092448567, 0.5805571203092621, 0.5847972764267881, 0.5677152903025507, 0.5658980297721089, 0.5573710602713204, 0.5504022407147547, 0.5441820759657368, 0.5333090496179749, 0.5284880678793222, 0.5341051217429846, 0.5227305697270546, 0.5180391251859789, 0.5150887628139176, 0.5094131997327259, 0.504825008441397, 0.49452276898885306, 0.4983407989461204, 0.5001356680009659, 0.48882819661185917, 0.4798455898551704, 0.47365487985811877, 0.4734043124494866, 0.46999313534998766, 0.4705014256021177, 0.45879509779346017, 0.45802568110020214, 0.4529251092578662, 0.4480945033293988], "accuracy": [0.09417514503002167, 0.13710209727287292, 0.2156914472579956, 0.3057720363140106, 0.35847312211990356, 0.3877955377101898, 0.4131554663181305, 0.46585655212402344, 0.49108439683914185, 0.523048460483551, 0.5501254796981812, 0.5909391045570374, 0.633469820022583, 0.6553955674171448, 0.6509047746658325, 0.6750759482383728, 0.6790384650230408, 0.6936996579170227, 0.7014925479888916, 0.7066437602043152, 0.7009642124176025, 0.7071720957756042, 0.7136441469192505, 0.7218332886695862, 0.718399167060852, 0.7255316376686096, 0.7230220437049866, 0.7310791015625, 0.7205125093460083, 0.7382115721702576, 0.7423061728477478, 0.746268630027771, 0.7407211661338806, 0.750231146812439, 0.7534011602401733, 0.7495707273483276, 0.763439416885376, 0.7696473598480225, 0.7652885913848877, 0.7652885913848877, 0.7691190242767334, 0.7718927264213562, 0.7733456492424011, 0.7790252566337585, 0.7868181467056274, 0.785101056098938, 0.7852331399917603, 0.7887993454933167, 0.7905164361000061, 0.7968564033508301, 0.7924976944923401, 0.7985734939575195, 0.7961959838867188, 0.8020076751708984, 0.8009510040283203, 0.804649293422699, 0.8038568496704102, 0.8129705190658569, 0.8121780753135681, 0.8107251524925232, 0.8162726163864136, 0.8204993009567261, 0.8158763647079468, 0.8204993009567261, 0.8186501264572144, 0.8236692547798157, 0.8274996876716614, 0.8234050869941711, 0.8285563588142395, 0.8273676037788391, 0.828820526599884], "val_loss": [1.9623688970293318, 1.9408561161586217, 1.9077483585902624, 1.859485285622733, 1.7781998770577567, 1.6319617203303747, 1.3993597371237618, 1.1299403054373605, 0.9208868571690151, 0.8248259169714791, 0.748222998210362, 0.7382926940917969, 0.6684916870934623, 0.6566842453820365, 0.6522090775626046, 0.6461624247687203, 0.6261442388807025, 0.6013637610844204, 0.5812984364373344, 0.5722770861216954, 0.5709382125309536, 0.5643664939062936, 0.5547389132635934, 0.5497159617287772, 0.5453283275876727, 0.5391736371176583, 0.5370224714279175, 0.5311471564429147, 0.5239138262612479, 0.5176598344530378, 0.508332542010716, 0.5010415145329067, 0.4958501543317522, 0.4903750079018729, 0.4847114767347063, 0.48064429419381277, 0.47611492020743235, 0.4697852986199515, 0.46448389121464323, 0.46054581233433317, 0.45732728072575163, 0.454179048538208, 0.45141334193093435, 0.4490689379828317, 0.4465470143726894, 0.4430647236960275, 0.43894869089126587, 0.43480375834873747, 0.4313309873853411, 0.4284988726888384, 0.42536576305116924, 0.42173027992248535, 0.41821385281426565, 0.41504108905792236, 0.41149001462118967, 0.40791729518345426, 0.40508782863616943, 0.4030576263155256, 0.4009708506720407, 0.3984267456190927, 0.39595682280404226, 0.39393352610724314, 0.3923040969031198, 0.3903975912502834, 0.3880816102027893, 0.3862304091453552, 0.38484558037349154, 0.38293968779700144, 0.38073791776384625, 0.37889411619731356, 0.3771855745996748], "val_accuracy": [0.10400000214576721, 0.30666667222976685, 0.40066665410995483, 0.4410000145435333, 0.4676666557788849, 0.500333309173584, 0.5506666898727417, 0.6066666841506958, 0.6579999923706055, 0.6466666460037231, 0.6890000104904175, 0.6936666369438171, 0.7093333601951599, 0.7120000123977661, 0.7196666598320007, 0.7246666550636292, 0.7319999933242798, 0.7386666536331177, 0.7393333315849304, 0.734666645526886, 0.7350000143051147, 0.7419999837875366, 0.7543333172798157, 0.7526666522026062, 0.750333309173584, 0.7549999952316284, 0.7563333511352539, 0.7546666860580444, 0.7573333382606506, 0.7616666555404663, 0.7696666717529297, 0.7706666588783264, 0.7733333110809326, 0.7736666798591614, 0.7749999761581421, 0.7796666622161865, 0.7856666445732117, 0.7876666784286499, 0.7919999957084656, 0.7983333468437195, 0.796999990940094, 0.7986666560173035, 0.7990000247955322, 0.7996666431427002, 0.8006666898727417, 0.8023333549499512, 0.8059999942779541, 0.8069999814033508, 0.8076666593551636, 0.8076666593551636, 0.8113333582878113, 0.8153333067893982, 0.8173333406448364, 0.8169999718666077, 0.8186666369438171, 0.8213333487510681, 0.8199999928474426, 0.8209999799728394, 0.8253333568572998, 0.8296666741371155, 0.8326666951179504, 0.8306666612625122, 0.8270000219345093, 0.8276666402816772, 0.831333339214325, 0.8336666822433472, 0.8309999704360962, 0.8323333263397217, 0.8326666951179504, 0.8326666951179504, 0.8323333263397217]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.769428551197052, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3009418765110756, 2.284989646113764, 2.256619920757043, 2.2099720732316426, 2.1416827430342167, 2.0272223324807817, 1.8413275849975064, 1.5974579900877115, 1.456735537556326, 1.3818395058901838, 1.2944059767633018, 1.1957220701162983, 1.0275854465905088, 0.9303977645588211, 0.9032804335679959, 0.8766978855193519, 0.861403301202736, 0.8286687090270602, 0.8103869462435225, 0.796161453950013, 0.7890524715480394, 0.7752990575199508, 0.7656484289869042, 0.7581275245690186, 0.7392290017198908, 0.7237272547567053, 0.719476419598309, 0.7035912966936051, 0.7097976285279812, 0.700538907761524, 0.6787139110010314, 0.6657747622998068, 0.6696731448488433, 0.6524299193744914, 0.6449986693094183, 0.6468393504344052, 0.6349894768998702, 0.6245073544555542, 0.6302284574338616, 0.617259876941567, 0.6058578658900666, 0.5967580852900923, 0.6003193073205945, 0.586806128502459, 0.5873885126382196, 0.5690439678753183, 0.5679238468365284, 0.556429779682303, 0.5507193541073324, 0.5455000066738308, 0.5355546335423895, 0.5288388856870309, 0.5348392749396392, 0.5234101763207443, 0.5201834860164193, 0.5157090308659616, 0.5076123792670737, 0.5060295340068871, 0.4962200825523943, 0.4986286865894931, 0.5036874376055335, 0.4876575222805491, 0.4822858940726809, 0.4712446206249912, 0.474442052893934, 0.4681735704202127, 0.46778600105063445, 0.458676673787822, 0.45614829181191974, 0.451550005961088, 0.4464640819503647, 0.43586188472887116, 0.4380615859251485, 0.44019237635803576, 0.4372483229537949, 0.4315675903919146, 0.43788140351667443, 0.4184357033287923, 0.4259888930658324, 0.4234625090933621, 0.4135309463093042, 0.4096299220959524, 0.3995544405629716, 0.3986770885377402, 0.40795858138430435, 0.4036247920500305, 0.39492268505475586, 0.38789219354610116, 0.3897830860025265], "accuracy": [0.09417514503002167, 0.1372341811656952, 0.2164839506149292, 0.3066965937614441, 0.35926562547683716, 0.389380544424057, 0.41289129853248596, 0.4679698944091797, 0.49253731966018677, 0.5239730477333069, 0.5525029897689819, 0.5929203629493713, 0.6363756656646729, 0.6538106203079224, 0.6509047746658325, 0.6716417670249939, 0.6778497099876404, 0.6927750706672668, 0.69673752784729, 0.7043983340263367, 0.6975300312042236, 0.7069079279899597, 0.7127195596694946, 0.7190595865249634, 0.713379979133606, 0.7220974564552307, 0.7166820764541626, 0.728701651096344, 0.7214370369911194, 0.7346453666687012, 0.7412495017051697, 0.743891179561615, 0.7390040755271912, 0.7508915662765503, 0.752212405204773, 0.7495707273483276, 0.7601373791694641, 0.7668735980987549, 0.7626469135284424, 0.761590301990509, 0.7703077793121338, 0.7714964747428894, 0.7684586048126221, 0.7725531458854675, 0.785629391670227, 0.7824593782424927, 0.7825914621353149, 0.7910447716712952, 0.7878747582435608, 0.7921014428138733, 0.7923656105995178, 0.7968564033508301, 0.7942147850990295, 0.7997622489929199, 0.8038568496704102, 0.805177628993988, 0.8031964302062988, 0.8128384351730347, 0.8079513907432556, 0.8104609847068787, 0.8123101592063904, 0.8181217908859253, 0.8136309385299683, 0.8208954930305481, 0.8222163319587708, 0.8228767514228821, 0.8240655064582825, 0.8222163319587708, 0.8257825970649719, 0.8256505131721497, 0.8301413059234619, 0.8363492488861084, 0.8337075710296631, 0.8384625315666199, 0.8354246616363525, 0.8408400416374207, 0.8388587832450867, 0.8416325449943542, 0.8404437899589539, 0.8408400416374207, 0.846387505531311, 0.8531237840652466, 0.8492933511734009, 0.8514066934585571, 0.8481045961380005, 0.8486329317092896, 0.8529917001724243, 0.854708731174469, 0.8560295701026917], "val_loss": [1.9623513221740723, 1.940725667136056, 1.907343932560512, 1.858459745134626, 1.775542872292655, 1.625349487577166, 1.3864619050707137, 1.1143147945404053, 0.9082671233585903, 0.8236667258398873, 0.7451998846871513, 0.7385509014129639, 0.6630494594573975, 0.6607258319854736, 0.6565459966659546, 0.6503058331353324, 0.6261264085769653, 0.6012075117656163, 0.5811136109488351, 0.5739662987845284, 0.5744708776473999, 0.566518749509539, 0.5567588295255389, 0.552163941519601, 0.5459745100566319, 0.5421996116638184, 0.5407169205801827, 0.5322870356695992, 0.5265096766608102, 0.5179765054157802, 0.5070474658693586, 0.5004945823124477, 0.4958959477288382, 0.49029615947178434, 0.48605758803231375, 0.48362014974866596, 0.4793503965650286, 0.4734081370489938, 0.46850344112941195, 0.465011613709586, 0.46190650122506277, 0.4583409002849034, 0.4544687441417149, 0.4504092591149466, 0.44671477590288433, 0.4425430638449533, 0.4368869236537388, 0.43098834582737516, 0.4273087126868112, 0.42521490369524273, 0.4222720605986459, 0.4184780716896057, 0.4154320274080549, 0.4131362608500889, 0.410105219909123, 0.406875090939658, 0.4044016088758196, 0.40245125123432707, 0.4002471906798227, 0.3975036144256592, 0.3947645510946001, 0.39274524790900095, 0.39138093164988924, 0.3899058188710894, 0.3878228834697178, 0.38626846245356966, 0.38560902220862253, 0.3845331924302237, 0.3826684185436794, 0.3807288237980434, 0.37868716035570416, 0.37671408482960295, 0.3742034520421709, 0.37218343360083445, 0.3704782468932016, 0.36926000458853586, 0.3688004102025713, 0.36927430970328196, 0.3693937999861581, 0.3684746026992798, 0.36795200620378765, 0.36739308493477957, 0.36696127482822966, 0.3665615575654166, 0.3665132522583008, 0.36640277930668425, 0.36625923429216656, 0.3660423925944737, 0.36592167615890503], "val_accuracy": [0.10433333367109299, 0.3070000112056732, 0.4009999930858612, 0.4413333237171173, 0.46799999475479126, 0.49933332204818726, 0.5533333420753479, 0.609666645526886, 0.6583333611488342, 0.637333333492279, 0.687333345413208, 0.6936666369438171, 0.7103333473205566, 0.7049999833106995, 0.7229999899864197, 0.721666693687439, 0.7283333539962769, 0.737333357334137, 0.7360000014305115, 0.734333336353302, 0.734333336353302, 0.7423333525657654, 0.7546666860580444, 0.753333330154419, 0.7506666779518127, 0.7513333559036255, 0.7519999742507935, 0.7573333382606506, 0.7556666731834412, 0.7620000243186951, 0.7710000276565552, 0.7713333368301392, 0.7710000276565552, 0.7730000019073486, 0.7786666750907898, 0.781333327293396, 0.7839999794960022, 0.7863333225250244, 0.7866666913032532, 0.7916666865348816, 0.7913333177566528, 0.7960000038146973, 0.8019999861717224, 0.8013333082199097, 0.8003333210945129, 0.8003333210945129, 0.8016666769981384, 0.8073333501815796, 0.8109999895095825, 0.8116666674613953, 0.8140000104904175, 0.8176666498184204, 0.8199999928474426, 0.8193333148956299, 0.8216666579246521, 0.8233333230018616, 0.8203333616256714, 0.824999988079071, 0.828000009059906, 0.8293333053588867, 0.8273333311080933, 0.8266666531562805, 0.8289999961853027, 0.8293333053588867, 0.8309999704360962, 0.8370000123977661, 0.8370000123977661, 0.8360000252723694, 0.8360000252723694, 0.8366666436195374, 0.8386666774749756, 0.8396666646003723, 0.8420000076293945, 0.8423333168029785, 0.8433333039283752, 0.8433333039283752, 0.8433333039283752, 0.843666672706604, 0.8446666598320007, 0.8460000157356262, 0.8486666679382324, 0.8479999899864197, 0.8489999771118164, 0.8543333411216736, 0.8513333201408386, 0.8516666889190674, 0.8543333411216736, 0.8539999723434448, 0.8516666889190674]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [4, 2, 2, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7682856917381287, "mapping_values": [1, 15, 15, 9, 6, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.negative(alpha), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), grad)), tf.math.square(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3009451013498805, 2.285047929394971, 2.256876913217301, 2.210690672686386, 2.1434674169787042, 2.0315112545505696, 1.8498957042192754, 1.607926092678766, 1.4596116970464332, 1.375512450252463, 1.2944077665086877, 1.1983594366776993, 1.0375719584368162, 0.9350741365881423, 0.9025360905121126, 0.8731044622586152, 0.8581332304552955, 0.826123694292763, 0.8062088314993443, 0.7922151961409736, 0.7831706225265838, 0.766975688054152, 0.7573020371778562, 0.7482412750175238, 0.7322833771561399, 0.7157864167375052, 0.7113643409931554, 0.6958769773763043, 0.7041038390258363, 0.6921207550699054, 0.6747787716744236, 0.6618456196051232, 0.6662531357478504, 0.6497278458186271, 0.6407274935916588, 0.6416283119167272, 0.6286823566185721, 0.6210001659919211, 0.6234478508681354, 0.6092848735966655, 0.5986327804578782, 0.5898782876834988, 0.5905580721306464, 0.5802528954389907, 0.5846154196639307, 0.567639612636672, 0.5659696788772726, 0.5571830121832533, 0.5508186370311491, 0.5434724694749447, 0.5325366849786554, 0.5275771314158432, 0.5338012136252266, 0.522220786008947, 0.5174290540983271, 0.5148658180485596, 0.5091612051546046, 0.5048234399598525, 0.49421527044112734, 0.49735263250979767, 0.49925090722703286, 0.48844182494451593, 0.4802886706026176, 0.4734543044813368, 0.4735097279401897, 0.4704946975634949, 0.47065962490672053, 0.4585873662575188, 0.4579251635469828, 0.4528781914038665], "accuracy": [0.09417514503002167, 0.13710209727287292, 0.2156914472579956, 0.3057720363140106, 0.35847312211990356, 0.3877955377101898, 0.4131554663181305, 0.46572446823120117, 0.49108439683914185, 0.523048460483551, 0.5501254796981812, 0.5909391045570374, 0.6336019039154053, 0.655527651309967, 0.6507726907730103, 0.6750759482383728, 0.6790384650230408, 0.693831741809845, 0.7010962963104248, 0.7067758440971375, 0.7004358768463135, 0.7077004313468933, 0.7132478952407837, 0.7217012047767639, 0.718399167060852, 0.7252674698829651, 0.7235503792762756, 0.7313432693481445, 0.7205125093460083, 0.7386078238487244, 0.7423061728477478, 0.7457403540611267, 0.7416457533836365, 0.7494386434555054, 0.7539294958114624, 0.7491744756698608, 0.7617223858833313, 0.7705719470977783, 0.7651565074920654, 0.7662131786346436, 0.7695152759552002, 0.7716285586357117, 0.7732135653495789, 0.7796856164932251, 0.787082314491272, 0.7849689722061157, 0.7858935594558716, 0.7889314293861389, 0.7902522683143616, 0.7967243194580078, 0.793950617313385, 0.7973847389221191, 0.7972526550292969, 0.8025360107421875, 0.8009510040283203, 0.8049134612083435, 0.8031964302062988, 0.8127063512802124, 0.8121780753135681, 0.8132346868515015, 0.8170651197433472, 0.8198388814926147, 0.81548011302948, 0.8208954930305481, 0.8191784620285034, 0.8220842480659485, 0.8273676037788391, 0.8235371708869934, 0.8278959393501282, 0.8264430165290833], "val_loss": [1.9623688970293318, 1.9408561161586217, 1.9077483585902624, 1.8594852175031389, 1.7781998770577567, 1.6319616862705775, 1.3993597711835588, 1.1299403735569544, 0.9208917277199882, 0.8248208590916225, 0.7482297590800694, 0.7382785422461373, 0.6684861183166504, 0.6566617318562099, 0.6521868876048497, 0.6461727278573173, 0.6260897261755807, 0.6012667076928275, 0.581283722605024, 0.5723223686218262, 0.5709830352238247, 0.5642666816711426, 0.5545674221856254, 0.5495858022144863, 0.545233964920044, 0.5391056367329189, 0.5368423802512032, 0.5309280157089233, 0.5236012254442487, 0.5172302212033953, 0.5079213891710553, 0.5007871559688023, 0.49566168444497244, 0.49025789328983854, 0.4848849432809012, 0.48096561431884766, 0.4763536623546055, 0.4698818751743862, 0.46444904804229736, 0.46051653793879915, 0.4573052440370832, 0.4540597200393677, 0.4511725391660418, 0.4487745932170323, 0.44631145681653706, 0.4429338574409485, 0.4389563032558986, 0.4349087987627302, 0.4314780405589512, 0.4285678778375898, 0.4253209744180952, 0.42179145983287264, 0.41836421830313547, 0.41508545194353375, 0.41139196498053415, 0.4077714596475874, 0.4048988563673837, 0.40272219691957745, 0.4004701205662319, 0.39786784989493235, 0.3954539809908186, 0.3933010867663792, 0.391509405204228, 0.3895531807626997, 0.3874507120677403, 0.38572485957826885, 0.38428368738719393, 0.3825362154415676, 0.38064625433513094, 0.3788315994398935], "val_accuracy": [0.10400000214576721, 0.30666667222976685, 0.40066665410995483, 0.4410000145435333, 0.4676666557788849, 0.500333309173584, 0.5506666898727417, 0.6066666841506958, 0.6579999923706055, 0.6466666460037231, 0.6893333196640015, 0.6940000057220459, 0.7096666693687439, 0.7113333344459534, 0.7196666598320007, 0.7243333458900452, 0.7319999933242798, 0.7386666536331177, 0.7393333315849304, 0.7350000143051147, 0.7350000143051147, 0.7423333525657654, 0.7543333172798157, 0.7523333430290222, 0.75, 0.7549999952316284, 0.7549999952316284, 0.7540000081062317, 0.7573333382606506, 0.762333333492279, 0.7703333497047424, 0.7696666717529297, 0.7733333110809326, 0.7733333110809326, 0.7749999761581421, 0.7793333530426025, 0.7846666574478149, 0.7863333225250244, 0.7923333048820496, 0.796999990940094, 0.7973333597183228, 0.7986666560173035, 0.8006666898727417, 0.800000011920929, 0.8006666898727417, 0.8029999732971191, 0.8053333163261414, 0.8059999942779541, 0.8073333501815796, 0.8083333373069763, 0.812666654586792, 0.8176666498184204, 0.8176666498184204, 0.8180000185966492, 0.8173333406448364, 0.8206666707992554, 0.8196666836738586, 0.8213333487510681, 0.824999988079071, 0.8303333520889282, 0.8309999704360962, 0.8303333520889282, 0.828000009059906, 0.8270000219345093, 0.8336666822433472, 0.8330000042915344, 0.8330000042915344, 0.8326666951179504, 0.831333339214325, 0.8330000042915344]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [6, 2, 2, 3, 6, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [0, 1, 2, 3, 3, 2, 0, 2], [90, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7651428580284119, "mapping_values": [1, 16, 16, 9, 7, 3, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))), grad)))), tf.math.add(tf.math.square(grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3009418765110756, 2.284989677604793, 2.256619952248072, 2.209972041740614, 2.1416827745252456, 2.027221799463628, 1.8413255134861404, 1.5974526480755487, 1.4567324034431748, 1.381846609022387, 1.2944191998148071, 1.195710269262636, 1.0276223141456466, 0.9304491845749908, 0.9032432515040806, 0.8766188706546774, 0.8612533074328456, 0.828532172452347, 0.8102726826751552, 0.7960295865580138, 0.7891262685224412, 0.7753983392234901, 0.7657604515985522, 0.7581063854050375, 0.7395748731293588, 0.7234418629072661, 0.7190610424103344, 0.7032499389956419, 0.7091934178026991, 0.6998946124756924, 0.6784094544512611, 0.6652787998997698, 0.6695518340133578, 0.6522644790424065, 0.6450119174041642, 0.6466563987835854, 0.6348130684786343, 0.6244220532021266, 0.6302255355544991, 0.6172949232524176, 0.6061401032122954, 0.5969045688179836, 0.6001908247890632, 0.5869043823624362, 0.5875799219921013, 0.5693298557714432, 0.5687274093940321, 0.5569336087853917, 0.5511479382155327, 0.5457254253153662, 0.5362041443566667, 0.5291508249933567, 0.5354648061621191, 0.524347798305653, 0.521086418287015, 0.5162405607612488, 0.5086445231061996, 0.5067128064200673, 0.4966833293595413, 0.49857136518601586, 0.5037599057096925, 0.4884928833255836, 0.48293922665002337, 0.47233053214435705, 0.4749142855401871, 0.4688161256298838, 0.46818201974666096, 0.45898231558118907, 0.4565292942194875, 0.4527002244168237, 0.446861036815632, 0.4364620905589465, 0.43904013168290623, 0.44000257124769815, 0.43777812199192023, 0.4326340513356279, 0.43826032172986434, 0.41906831510834425, 0.4262961592766839, 0.42411485970563517, 0.4141176122605698, 0.41014068961741823, 0.400278070178156, 0.39844451199716596, 0.40959641029963545, 0.40489520097704707, 0.3960970181043295, 0.3889313997562299, 0.39056493268902936, 0.3846245610860392, 0.379026408948761, 0.3755380982862031, 0.36712439524546403, 0.3736578719790082, 0.37280988313376767, 0.3556809328952092, 0.36950402155276446, 0.35966980921798586, 0.35724492914499373, 0.34958895175306787], "accuracy": [0.09417514503002167, 0.1372341811656952, 0.2164839506149292, 0.3066965937614441, 0.35926562547683716, 0.389380544424057, 0.41289129853248596, 0.4679698944091797, 0.49253731966018677, 0.5241051316261292, 0.5523709058761597, 0.5926561951637268, 0.6366398334503174, 0.6539427042007446, 0.6513010263442993, 0.6716417670249939, 0.6787742972373962, 0.691850483417511, 0.6968696117401123, 0.7037379741668701, 0.6975300312042236, 0.7071720957756042, 0.7131158113479614, 0.7189275026321411, 0.7116629481315613, 0.7220974564552307, 0.7169462442398071, 0.7276449799537659, 0.7211728692054749, 0.7347774505615234, 0.7408532500267029, 0.7437590956687927, 0.7382115721702576, 0.7491744756698608, 0.7511557340621948, 0.7499669790267944, 0.7607977986335754, 0.7680623531341553, 0.7619865536689758, 0.7625148296356201, 0.7701756954193115, 0.7705719470977783, 0.7675340175628662, 0.7709681391716003, 0.7858935594558716, 0.7824593782424927, 0.7837802171707153, 0.7918372750282288, 0.7861577272415161, 0.7906485199928284, 0.7922335267066956, 0.7987055778503418, 0.7931581139564514, 0.800290584564209, 0.8021397590637207, 0.805177628993988, 0.8026680946350098, 0.8119139075279236, 0.8079513907432556, 0.8113855719566345, 0.8129705190658569, 0.8191784620285034, 0.8136309385299683, 0.819970965385437, 0.8211596608161926, 0.8231409192085266, 0.8240655064582825, 0.8231409192085266, 0.8265751004219055, 0.8244617581367493, 0.8308017253875732, 0.835160493850708, 0.8352925777435303, 0.8370096683502197, 0.8343679904937744, 0.8404437899589539, 0.8381983637809753, 0.841500461101532, 0.8399154543876648, 0.8392550349235535, 0.8449346423149109, 0.8510104417800903, 0.8492933511734009, 0.8518029451370239, 0.8494254350662231, 0.8467837572097778, 0.8533879518508911, 0.8555012345314026, 0.8541803956031799, 0.8539162874221802, 0.8615770936012268, 0.8607845902442932, 0.8618412613868713, 0.8615770936012268, 0.8581429123878479, 0.8658037185668945, 0.8632941246032715, 0.8648791313171387, 0.86553955078125, 0.8665962219238281], "val_loss": [1.9623513221740723, 1.940725667136056, 1.907343932560512, 1.858459745134626, 1.775542872292655, 1.6253483636038644, 1.3864595890045166, 1.1143078463418143, 0.9082647732325962, 0.8236832789012364, 0.7452147347586495, 0.7385478700910296, 0.6630652802331107, 0.6607156140463692, 0.6565187999180385, 0.6502578769411359, 0.6259522778647286, 0.6010055371693203, 0.5811235904693604, 0.5740078006471906, 0.5744312831333706, 0.5665597234453473, 0.5568785837718419, 0.5523754698889596, 0.5461426462445941, 0.5420469215938023, 0.5403162240982056, 0.5319600105285645, 0.5262080771582467, 0.5176742928368705, 0.5068039383207049, 0.500422579901559, 0.4959985188075474, 0.4905001606260027, 0.48632289682115826, 0.4837514672960554, 0.4793892077037266, 0.4734289986746652, 0.4685921328408377, 0.465212277003697, 0.46220128876822336, 0.45862148489270893, 0.4547968932560512, 0.4508387531552996, 0.4471855844770159, 0.4429507681301662, 0.4371876205716814, 0.4312121442386082, 0.4274745413235256, 0.42532962560653687, 0.4224507808685303, 0.41875316415514263, 0.41568849767957416, 0.4134249005998884, 0.4104632224355425, 0.40734027113233295, 0.40495340313230244, 0.40310328347342356, 0.40084387574877056, 0.3979704720633371, 0.3951313580785479, 0.39311827080590384, 0.3917459675243923, 0.3902321883610317, 0.38803930793489727, 0.386222311428615, 0.38528071131025043, 0.3841853993279593, 0.38226304735456196, 0.38038720403398785, 0.37864770208086285, 0.37705750124795095, 0.3746119311877659, 0.37255658422197613, 0.3709165709359305, 0.3696064182690212, 0.36896272216524395, 0.3693136317389352, 0.3693615368434361, 0.3684142402240208, 0.3684188723564148, 0.3685711111341204, 0.3681844728333609, 0.3675966092518398, 0.36768258469445364, 0.3675757476261684, 0.3668986303465707, 0.36621434347970144, 0.3662317991256714, 0.36500634465898785, 0.36251059600285124, 0.36094512258257183, 0.3603412083217076, 0.3591705390385219, 0.35802119970321655, 0.35849114826747347, 0.35739203861781527, 0.35481094462530954, 0.3538276893751962, 0.354708663054875], "val_accuracy": [0.10433333367109299, 0.3070000112056732, 0.4009999930858612, 0.4413333237171173, 0.46799999475479126, 0.49933332204818726, 0.5533333420753479, 0.609666645526886, 0.6583333611488342, 0.637333333492279, 0.687333345413208, 0.6936666369438171, 0.7106666564941406, 0.7046666741371155, 0.7223333120346069, 0.721666693687439, 0.7283333539962769, 0.7363333106040955, 0.7366666793823242, 0.7350000143051147, 0.7336666584014893, 0.7423333525657654, 0.7553333044052124, 0.7536666393280029, 0.7513333559036255, 0.7519999742507935, 0.7519999742507935, 0.7580000162124634, 0.7546666860580444, 0.7630000114440918, 0.7703333497047424, 0.7699999809265137, 0.7696666717529297, 0.7733333110809326, 0.7793333530426025, 0.781333327293396, 0.7833333611488342, 0.7856666445732117, 0.7883333563804626, 0.7916666865348816, 0.7916666865348816, 0.7960000038146973, 0.8003333210945129, 0.8013333082199097, 0.7993333339691162, 0.8003333210945129, 0.8009999990463257, 0.8059999942779541, 0.8106666803359985, 0.8096666932106018, 0.8136666417121887, 0.8173333406448364, 0.8186666369438171, 0.8176666498184204, 0.8209999799728394, 0.8209999799728394, 0.8216666579246521, 0.8243333101272583, 0.8276666402816772, 0.8289999961853027, 0.828000009059906, 0.8270000219345093, 0.828000009059906, 0.8296666741371155, 0.8330000042915344, 0.8366666436195374, 0.8373333215713501, 0.8379999995231628, 0.8349999785423279, 0.8360000252723694, 0.8356666564941406, 0.8373333215713501, 0.8399999737739563, 0.8416666388511658, 0.8443333506584167, 0.8423333168029785, 0.843666672706604, 0.8446666598320007, 0.843999981880188, 0.8473333120346069, 0.8460000157356262, 0.847000002861023, 0.8483333587646484, 0.8523333072662354, 0.8513333201408386, 0.8513333201408386, 0.8526666760444641, 0.8519999980926514, 0.8526666760444641, 0.8506666421890259, 0.8539999723434448, 0.8533333539962769, 0.8546666502952576, 0.856333315372467, 0.8573333621025085, 0.8583333492279053, 0.8576666712760925, 0.8553333282470703, 0.8573333621025085, 0.8556666374206543]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 2, 3, 4, 0, 2, 0, 2, 6, 8, 4, 0, 8, 0, 2, 2, 3, 1, 6, 2, 2, 8, 6, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 0, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 45, 94, 70, 39], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7557142972946167, "mapping_values": [1, 90, 90, 55, 35, 11, 5, 5, 3, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, alpha)), grad)), tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))))))))))))), tf.math.add(alpha, grad)))), tf.math.square(tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2985921142879433, 2.26798996391896, 2.2083617629092904, 2.086696520426081, 1.8334783606950587, 1.5339654009528936, 1.4101284455472074, 1.2287895597439746, 1.0391604538606913, 0.9399073397825107, 0.8836860259400225, 0.8507318410576138, 0.81474203112229, 0.8207193472759835, 0.8082811726775577, 0.7586557079756564, 0.7520253548469715, 0.744111364803546, 0.728401290120198, 0.7179579899185417, 0.7061954338820445, 0.6857951765110181, 0.6759619806987766, 0.6673010133434171, 0.6530945060621903, 0.6519342737584586, 0.6439261053374037, 0.6349271320789687, 0.6243220873166226, 0.6153039058217472, 0.5919548608466004, 0.5840765437697533, 0.5780083102997914, 0.5681530048094248, 0.5669136623255471, 0.5484516162480881, 0.5468692892593809, 0.5325187179217516, 0.5352029751210307, 0.5307250890151117, 0.506459060759671, 0.5061302926278685, 0.5025606773721858, 0.48886123527908654, 0.4905921832965019, 0.4711529659580923, 0.47866937751153427, 0.47347274900128294, 0.46111108070398604, 0.46243776072206877, 0.44974638909601405, 0.44189800364371884, 0.4497045541459921, 0.4467483851037651, 0.4333392076834932, 0.43461168348875817, 0.4281607879119826, 0.42291277286446155, 0.41934397820988034, 0.41539960279283333, 0.4206126249579706, 0.40176042123572103, 0.39880756063704415, 0.3879151325089789, 0.39641392267989506, 0.386066112374554, 0.38260656394474796, 0.37581951938064706], "accuracy": [0.09840179979801178, 0.18372738361358643, 0.29626205563545227, 0.3749834895133972, 0.4227975308895111, 0.471800297498703, 0.5131422281265259, 0.5773345828056335, 0.6252806782722473, 0.6341302394866943, 0.6733588576316833, 0.684982180595398, 0.694360077381134, 0.6951525807380676, 0.6964733600616455, 0.7129837274551392, 0.7128516435623169, 0.7152291536331177, 0.7231541275978088, 0.7257958054542542, 0.7304186820983887, 0.7368907928466797, 0.7403249144554138, 0.7446836829185486, 0.7530049085617065, 0.7491744756698608, 0.7465327978134155, 0.7569673657417297, 0.7580240368843079, 0.7676661014556885, 0.7683265209197998, 0.7726852297782898, 0.774798572063446, 0.7771760821342468, 0.78113853931427, 0.7877426743507385, 0.7918372750282288, 0.7964601516723633, 0.7946110367774963, 0.7936864495277405, 0.8070268034934998, 0.8031964302062988, 0.8124422430992126, 0.8127063512802124, 0.8119139075279236, 0.8156121969223022, 0.8153480291366577, 0.8166688680648804, 0.8247259259223938, 0.8264430165290833, 0.8273676037788391, 0.8322546482086182, 0.8301413059234619, 0.8330471515655518, 0.8352925777435303, 0.8380662798881531, 0.8358209133148193, 0.8457271456718445, 0.8397833704948425, 0.8392550349235535, 0.8408400416374207, 0.8506141901016235, 0.8490291833877563, 0.8507462739944458, 0.8487650156021118, 0.8529917001724243, 0.858671247959137, 0.8553691506385803], "val_loss": [1.9543862342834473, 1.912304060799735, 1.8371152877807617, 1.664269277027675, 1.2987322807312012, 0.9401708330426898, 0.7994083166122437, 0.744918874331883, 0.6615231207438877, 0.6604795966829572, 0.6491089378084455, 0.607648491859436, 0.5909901516778129, 0.5749378374644688, 0.5673740761620658, 0.5571867227554321, 0.5485048975263324, 0.5400433370045253, 0.5328913416181292, 0.5255513872419085, 0.5115169967923846, 0.5037393569946289, 0.49604856967926025, 0.4904984746660505, 0.48743328026362825, 0.484637941632952, 0.48260535512651714, 0.4741414955684117, 0.46589858191353933, 0.4586669717516218, 0.45262054034641813, 0.4460595761026655, 0.44024338892527987, 0.4357224021639143, 0.4290273444993155, 0.4234780413763864, 0.4224324481827872, 0.41769081354141235, 0.41556512457983835, 0.40947799171720234, 0.40483419384275166, 0.4015871797289167, 0.3984719599996294, 0.3953492300851004, 0.3928173695291792, 0.3901603732790266, 0.3867568373680115, 0.38593231780188425, 0.3843866160937718, 0.38407728501728605, 0.3837819610323225, 0.38251188823154997, 0.38303476572036743, 0.3837607502937317, 0.38294622727802824, 0.38263232367379324, 0.3801856551851545, 0.37711543696267263, 0.3756382720811026, 0.37370576177324566, 0.372239887714386, 0.3695526719093323, 0.36857668842588154, 0.3687714423452105, 0.36790635756083895, 0.3664813552583967, 0.3625900575092861, 0.3598835894039699], "val_accuracy": [0.17666666209697723, 0.3970000147819519, 0.4426666796207428, 0.49799999594688416, 0.5726666450500488, 0.6493333578109741, 0.6570000052452087, 0.6936666369438171, 0.7153333425521851, 0.7203333377838135, 0.7149999737739563, 0.7356666922569275, 0.7196666598320007, 0.7306666374206543, 0.7476666569709778, 0.7509999871253967, 0.7493333220481873, 0.7573333382606506, 0.7633333206176758, 0.7689999938011169, 0.7693333625793457, 0.7680000066757202, 0.7746666669845581, 0.7733333110809326, 0.7753333449363708, 0.7833333611488342, 0.7776666879653931, 0.7803333401679993, 0.7863333225250244, 0.79666668176651, 0.8029999732971191, 0.800000011920929, 0.7993333339691162, 0.8036666512489319, 0.809333324432373, 0.8173333406448364, 0.8130000233650208, 0.8163333535194397, 0.8136666417121887, 0.8163333535194397, 0.8220000267028809, 0.8253333568572998, 0.8233333230018616, 0.824999988079071, 0.8296666741371155, 0.8326666951179504, 0.8316666483879089, 0.8339999914169312, 0.8366666436195374, 0.8370000123977661, 0.8370000123977661, 0.8376666903495789, 0.8389999866485596, 0.8399999737739563, 0.843666672706604, 0.8446666598320007, 0.8446666598320007, 0.8456666469573975, 0.8456666469573975, 0.8503333330154419, 0.8500000238418579, 0.8533333539962769, 0.8553333282470703, 0.8506666421890259, 0.8526666760444641, 0.8513333201408386, 0.8539999723434448, 0.8543333411216736]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [8, 2, 2, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 2, 3, 1], [86, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7548571228981018, "mapping_values": [1, 14, 14, 9, 5, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(alpha, grad))), grad)), tf.math.square(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3009419080021045, 2.284989646113764, 2.256619920757043, 2.2099720102495852, 2.1416826620707816, 2.027221970381187, 1.8413271396041404, 1.5974568248251726, 1.4567339735228892, 1.38185611940756, 1.2944211553919507, 1.1957228012592596, 1.0275991160273472, 0.9304069727245906, 0.903242873509389, 0.8766940370400852, 0.8613593338298255, 0.8286291143567004, 0.8103270379228835, 0.7960253896541316, 0.7891685120055799, 0.775426539187859, 0.7659585643138994, 0.7584247704525948, 0.7395986630270714, 0.723666605373431, 0.7192355433805917, 0.7032031990580823, 0.709602696461653, 0.700165565373513, 0.6790047445002485, 0.6655134882011812, 0.6693134933902981, 0.6521517023465826, 0.6449975041413525, 0.6464215529640479, 0.6349649375235447, 0.6245978298818337, 0.6303130813546232, 0.6175157292455085, 0.6061300965836177, 0.5969155538493081, 0.6007029448659618, 0.5870541388946612, 0.5879966756057085, 0.5696508858134922, 0.5689968266711968, 0.5567942652971895, 0.5510838297316899, 0.5457302464895307, 0.5369549592126078, 0.5293747656428189, 0.5357574374841708, 0.5245169572007654, 0.5211379911055292, 0.5155095903392576, 0.5079371352961601, 0.506407590314555, 0.4969724053286952, 0.49910695773105673, 0.5036733467045745, 0.4887166051793139, 0.4834064087729491, 0.4725403380888391, 0.4750742712954268, 0.46915470739759396, 0.46806250824164314, 0.459010775641774, 0.45652416467729606, 0.45220529254495884, 0.44714711852329375], "accuracy": [0.09417514503002167, 0.1372341811656952, 0.2164839506149292, 0.3066965937614441, 0.35926562547683716, 0.389380544424057, 0.41289129853248596, 0.4679698944091797, 0.49253731966018677, 0.5241051316261292, 0.5525029897689819, 0.5926561951637268, 0.6367719173431396, 0.6542068123817444, 0.6502443552017212, 0.6720380187034607, 0.6779817938804626, 0.6925109028816223, 0.6968696117401123, 0.7041342258453369, 0.6971337795257568, 0.7079645991325378, 0.7132478952407837, 0.7189275026321411, 0.7113987803459167, 0.7211728692054749, 0.7172104120254517, 0.7276449799537659, 0.7211728692054749, 0.7342491149902344, 0.7405890822410583, 0.7442874312400818, 0.7391361594200134, 0.7490423917770386, 0.7515519857406616, 0.7497028112411499, 0.7605336308479309, 0.7670056819915771, 0.7629110813140869, 0.7629110813140869, 0.7692511081695557, 0.7721568942070007, 0.767930269241333, 0.7716285586357117, 0.7860256433486938, 0.7817989587783813, 0.7824593782424927, 0.7913089394569397, 0.7857614755630493, 0.7913089394569397, 0.791441023349762, 0.7985734939575195, 0.793950617313385, 0.8004226684570312, 0.802271842956543, 0.8062343001365662, 0.8037247657775879, 0.8123101592063904, 0.8075551390647888, 0.8120459914207458, 0.813498854637146, 0.8181217908859253, 0.8140271902084351, 0.8210275769233704, 0.8212917447090149, 0.8228767514228821, 0.8245938420295715, 0.8231409192085266, 0.8272355198860168, 0.8245938420295715, 0.8302733898162842], "val_loss": [1.9623513902936662, 1.940725667136056, 1.907343932560512, 1.858459745134626, 1.7755428041730608, 1.6253490788596017, 1.3864619731903076, 1.1143110139029366, 0.9082682132720947, 0.8236845050539289, 0.7452239309038434, 0.7385544436318534, 0.6630360909870693, 0.6606659548623222, 0.656504716191973, 0.6502419369561332, 0.6259247575487409, 0.6010081938334874, 0.5810298579079765, 0.5739474807466779, 0.5743406159537179, 0.5664239270346505, 0.5568281071526664, 0.5522463151386806, 0.5460326841899327, 0.5419722114290509, 0.540204507963998, 0.5321787936346871, 0.5266426801681519, 0.518318670136588, 0.5074637617383685, 0.5008276530674526, 0.49611646788460867, 0.49061810970306396, 0.48626536982400076, 0.4836254460471017, 0.4793715476989746, 0.473348753792899, 0.4683596576963152, 0.4649611711502075, 0.46216297149658203, 0.4586790289197649, 0.45470026561192106, 0.45067260946546284, 0.4469677720751081, 0.44273626804351807, 0.43696720259530203, 0.43103335584912983, 0.42740327971322195, 0.4254735793386187, 0.42254602909088135, 0.41863287346703665, 0.41558767216546194, 0.4134396399770464, 0.41041687556675505, 0.4070860743522644, 0.4046774762017386, 0.40297084195273264, 0.40080649512154715, 0.3977949448994228, 0.3949611612728664, 0.39300960302352905, 0.3915137393133981, 0.3897655350821359, 0.387585665498461, 0.3859357237815857, 0.385147077696664, 0.3839681233678545, 0.3820471593311855, 0.3802253007888794, 0.3784507853644235], "val_accuracy": [0.10433333367109299, 0.3070000112056732, 0.4009999930858612, 0.4413333237171173, 0.46799999475479126, 0.49933332204818726, 0.5533333420753479, 0.609666645526886, 0.6583333611488342, 0.637333333492279, 0.687333345413208, 0.6936666369438171, 0.7106666564941406, 0.7046666741371155, 0.7223333120346069, 0.721666693687439, 0.7276666760444641, 0.737333357334137, 0.7366666793823242, 0.7353333234786987, 0.7336666584014893, 0.7419999837875366, 0.7543333172798157, 0.7526666522026062, 0.7509999871253967, 0.7516666650772095, 0.7513333559036255, 0.7576666474342346, 0.7556666731834412, 0.7620000243186951, 0.7703333497047424, 0.7710000276565552, 0.7706666588783264, 0.7730000019073486, 0.778333306312561, 0.781333327293396, 0.7839999794960022, 0.7856666445732117, 0.7883333563804626, 0.7916666865348816, 0.7916666865348816, 0.7956666946411133, 0.8006666898727417, 0.8006666898727417, 0.7996666431427002, 0.8006666898727417, 0.8013333082199097, 0.8083333373069763, 0.8130000233650208, 0.8113333582878113, 0.8136666417121887, 0.8186666369438171, 0.8186666369438171, 0.8183333277702332, 0.8209999799728394, 0.8216666579246521, 0.8223333358764648, 0.8253333568572998, 0.8276666402816772, 0.8289999961853027, 0.82833331823349, 0.8273333311080933, 0.828000009059906, 0.8289999961853027, 0.8316666483879089, 0.8370000123977661, 0.8363333344459534, 0.8353333473205566, 0.8360000252723694, 0.8353333473205566, 0.8366666436195374]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [6, 2, 5, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1, 2], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.75342857837677, "mapping_values": [1, 14, 14, 9, 5, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))))))), grad)), tf.math.square(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3009419080021045, 2.284989677604793, 2.256619952248072, 2.2099720732316426, 2.141682756543868, 2.0272221323552935, 1.841325338238565, 1.5974475988512262, 1.4567196629759407, 1.3818168555583306, 1.2944189924463825, 1.195734086840963, 1.0276142652276297, 0.9304315485754002, 0.9032886368550361, 0.8765860430757525, 0.861276561219411, 0.8286654896676942, 0.8103652835648057, 0.795997548852819, 0.7889522880595263, 0.7751587236152743, 0.7656464904778985, 0.7581571568319779, 0.7396424476024324, 0.723647517842104, 0.7190991155129098, 0.7028992472150306, 0.7096659516094698, 0.6995763970466888, 0.6787502159610668, 0.6651351490371562, 0.66900266789017, 0.6514442990075296, 0.644013142604649, 0.6450319869517336, 0.6339656775889853, 0.6237832329308179, 0.6298379281791855, 0.6169782538046186, 0.6055251202090793, 0.5965387125167045, 0.5996382781905332, 0.5859283567687319, 0.5873758483162929, 0.5687527589558012, 0.5677103160426223, 0.5564561766435631, 0.5504646132083979, 0.5454338773713057, 0.5360764751360637, 0.5289467348634859, 0.5352535417696834, 0.524384902917383, 0.5211429048711913, 0.5154979452480966, 0.5073605550239272, 0.5059199387198032, 0.49681964110799076, 0.4981222519777265, 0.5035881863262643, 0.4884117441272786, 0.4827748648699296, 0.47185105585686643], "accuracy": [0.09417514503002167, 0.1372341811656952, 0.2164839506149292, 0.3066965937614441, 0.35926562547683716, 0.389380544424057, 0.41289129853248596, 0.4679698944091797, 0.49253731966018677, 0.5241051316261292, 0.5523709058761597, 0.5929203629493713, 0.6363756656646729, 0.6540747880935669, 0.6509047746658325, 0.6725663542747498, 0.6781138777732849, 0.6927750706672668, 0.6966054439544678, 0.703209638595581, 0.6975300312042236, 0.7071720957756042, 0.713379979133606, 0.7213049530982971, 0.7120591998100281, 0.7220974564552307, 0.7174745798110962, 0.7281733155250549, 0.719852089881897, 0.7362303733825684, 0.7405890822410583, 0.743891179561615, 0.7401928305625916, 0.7500990629196167, 0.752212405204773, 0.7514199018478394, 0.7622507214546204, 0.7672698497772217, 0.7627789974212646, 0.7623828053474426, 0.7692511081695557, 0.7693831920623779, 0.7677981853485107, 0.7745344042778015, 0.7858935594558716, 0.7840443849563599, 0.7841764688491821, 0.7895918488502502, 0.7878747582435608, 0.7903843522071838, 0.7923656105995178, 0.7980451583862305, 0.7940827012062073, 0.8004226684570312, 0.8029322624206543, 0.806630551815033, 0.8037247657775879, 0.8132346868515015, 0.8079513907432556, 0.8099326491355896, 0.8124422430992126, 0.8169330358505249, 0.8152159452438354, 0.8207634687423706], "val_loss": [1.9623513221740723, 1.940725667136056, 1.907343932560512, 1.858459540775844, 1.7755428041730608, 1.6253483636038644, 1.3864586693899972, 1.1143162591116769, 0.9082538740975517, 0.8236736059188843, 0.7451973642621722, 0.7385996920721871, 0.6630621467317853, 0.6607357093266079, 0.656509552683149, 0.6501773766108921, 0.6259921618870327, 0.6010932922363281, 0.5810775416237968, 0.5741121768951416, 0.574654391833714, 0.5667210647038051, 0.5568889890398298, 0.5521649462836129, 0.5458162001201085, 0.5417278323854718, 0.5398325579507011, 0.5315266336713519, 0.5259594236101423, 0.5174529211861747, 0.5068329402378627, 0.5003581728254046, 0.4955775397164481, 0.4900325196129935, 0.48563006946018766, 0.4828810521534511, 0.47857444626944406, 0.4725837877818516, 0.4675677163260324, 0.46410722391945974, 0.46122753620147705, 0.45784006799970356, 0.45403451578957693, 0.4500941378729684, 0.44649056025913786, 0.4423766391617911, 0.43655249050685335, 0.43047560112816946, 0.4267106226512364, 0.42468925033296856, 0.4218016692570278, 0.4178948402404785, 0.4148967521531241, 0.41285818815231323, 0.4098821367536272, 0.40670583077839445, 0.4043528267315456, 0.4026320406368801, 0.4005382742200579, 0.39767894574574064, 0.3949315207345145, 0.393027595111302, 0.39169504812785555, 0.3900196211678641], "val_accuracy": [0.10433333367109299, 0.3070000112056732, 0.4009999930858612, 0.4413333237171173, 0.46799999475479126, 0.49933332204818726, 0.5533333420753479, 0.609666645526886, 0.6583333611488342, 0.637333333492279, 0.687333345413208, 0.6936666369438171, 0.7103333473205566, 0.7046666741371155, 0.7226666808128357, 0.722000002861023, 0.7279999852180481, 0.737666666507721, 0.7363333106040955, 0.734000027179718, 0.734333336353302, 0.7426666617393494, 0.7540000081062317, 0.7543333172798157, 0.7506666779518127, 0.7536666393280029, 0.7526666522026062, 0.7580000162124634, 0.7566666603088379, 0.762666642665863, 0.7706666588783264, 0.7726666927337646, 0.7703333497047424, 0.7743333578109741, 0.7776666879653931, 0.7823333144187927, 0.7839999794960022, 0.7863333225250244, 0.7873333096504211, 0.7923333048820496, 0.7940000295639038, 0.7960000038146973, 0.8013333082199097, 0.8023333549499512, 0.7996666431427002, 0.8009999990463257, 0.8033333420753479, 0.8086666464805603, 0.8119999766349792, 0.812666654586792, 0.8149999976158142, 0.8190000057220459, 0.8199999928474426, 0.8190000057220459, 0.8230000138282776, 0.8243333101272583, 0.8226666450500488, 0.8266666531562805, 0.8289999961853027, 0.8276666402816772, 0.828000009059906, 0.8266666531562805, 0.828000009059906, 0.8289999961853027]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [4, 2, 2, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 0, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.2442857176065445, "mapping_values": [1, 10, 10, 5, 5, 1, 5, 5, 3, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.300631607087407, 2.293064683104991, 2.294472811732546, 2.3009995181310794, 2.3026391662201626, 2.3029325238906666, 2.303576022280269], "accuracy": [0.09417514503002167, 0.12719587981700897, 0.14780081808567047, 0.12917712330818176, 0.10447761416435242, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9648513793945312, 1.9639015878949846, 1.9712895665849959, 1.9737205505371094, 1.9740903718130929, 1.9745116233825684, 1.9755384581429618], "val_accuracy": [0.12333333492279053, 0.21699999272823334, 0.17366667091846466, 0.10866666585206985, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [4, 9, 2, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 1, 3, 2, 1], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [51, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 1, 10, 10, 5, 5, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))), tf.math.multiply(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(grad, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [5, 8, 8, 6, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [53, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 8, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [8.254985236441376, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.21199312806129456, 0.10447761416435242, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [5.309915406363351, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.04800000041723251, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0, 5, 9, 6], [1, 1, 2, 1, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [85, 18, 26, 9], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [9, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 2, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(alpha, tf.math.square(tf.math.multiply(grad, alpha))))), grad)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3031138143424803, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [2, 8, 8, 6, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [55, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [2, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 1, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [4, 2, 2, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 2, 2, 3, 2, 1, 2], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, tf.math.negative(tf.math.add(tf.math.add(alpha, grad), grad))), tf.math.square(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3081252959111205, 2.3403831501017156, 2.4210220811987724, 2.60847393705262, 3.459441884854183, 4333.921906496067, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07898560166358948, 0.036586977541446686, 0.010302470065653324, 0.008849557489156723, 0.008321225643157959, 0.03553031384944916, 0.10342095047235489, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9872537340436662, 2.0370726585388184, 2.1391072273254395, 2.4335548537118092, 4.623392513820103, 1370980052406.8572, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.007666666526347399, 0.00566666666418314, 0.004999999888241291, 0.00566666666418314, 0.008666666224598885, 0.09799999743700027, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [4, 9, 3, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 2, 2, 3, 2, 1], [90, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [0, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 2, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(grad, tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.9188889008880907, 1370.025122949901, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09787346422672272, 0.09642054885625839, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [169.852778843471, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09866666793823242, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [7, 8, 8, 9, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [3, 2, 2, 3, 2, 1], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [5, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [1, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09391097724437714, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1], [3, 2, 2, 3, 0, 7, 2, 6, 0, 3, 7, 3, 4, 0, 2, 0, 2, 6, 8, 4, 0, 3, 0, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 2, 3, 2, 2, 0, 8, 0, 7, 4, 3, 6, 0, 8, 5, 0, 3, 9], [1, 1, 2, 0, 2, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0], [26, 18, 62, 2, 57, 74, 34, 28, 94, 70, 36], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [8, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 94, 94, 56, 38, 11, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), grad))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))), tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))), grad))))))))))))), tf.math.sqrt(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, grad))))), alpha)), tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 7, 3, 2, 0, 2, 0, 2, 6, 8, 4, 0, 9, 0, 2, 2, 3, 3, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 2, 0, 8, 5, 0, 3], [2, 1, 2, 3, 3, 1, 3, 2, 1, 0, 3, 0, 2, 3, 0, 1, 1, 1, 2, 1, 0, 1, 0, 1, 2, 3, 2, 0, 0, 1, 1, 2, 0, 3, 1, 2], [26, 18, 30, 18, 77, 90, 51, 45, 32, 31, 96], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 87, 87, 54, 33, 11, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), alpha))))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha)))), tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))))))), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(alpha)))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad))), tf.math.square(tf.math.negative(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.303315006935554, 2.3024850053526484, 2.303790380548193, 2.3013505823560885, 2.3023445544824184, 2.3026164636446924], "accuracy": [0.08809932321310043, 0.09008057415485382, 0.08796724677085876, 0.0940430611371994, 0.0878351628780365, 0.09338264167308807], "val_loss": [1.9704878670828683, 1.970487185886928, 1.9704865728105818, 1.9704858916146415, 1.9704852104187012, 1.9704844611031669], "val_accuracy": [0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [4, 2, 2, 5, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0, 5, 2, 4, 4, 7, 7, 1, 1, 7, 8, 1, 8, 9, 3, 2, 1, 2, 6, 4, 4, 7, 4, 9, 4, 7, 5, 8, 3, 6, 8, 1, 3, 9, 2, 4], [2, 1, 2, 3, 3, 1, 2, 2, 0, 1, 1, 3, 2, 2, 2, 3, 1, 2, 0, 2, 3, 0, 2, 2, 0, 2, 3, 2, 3, 1, 0, 2], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 8, 8, 5, 3, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.square(tf.math.add(alpha, alpha))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.303315281316888, 2.302486359277941, 2.3037928951698254, 2.301353789780354, 2.302349219437462, 2.3026217223630843], "accuracy": [0.08809932321310043, 0.09008057415485382, 0.08809932321310043, 0.0940430611371994, 0.08796724677085876, 0.09338264167308807], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 6, 8, 4, 0, 3, 0, 8, 2, 1, 1, 6, 2, 5, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 0, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 9, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 2, 0, 2, 3, 0, 2, 2, 0, 1, 0, 2, 0, 3, 0, 2, 2, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 94, 69], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.029999999329447746, "mapping_values": [1, 51, 51, 30, 21, 6, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad), grad)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad)))))), tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))))))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.304144275281345, 2.305358815800953, 2.308744956001299, 2.3083146526954903, 2.311586545301293, 2.3138888481506945], "accuracy": [0.08585391938686371, 0.08479725569486618, 0.07938185334205627, 0.07911768555641174, 0.07238145917654037, 0.06960771232843399], "val_loss": [1.9723446028573173, 1.974209989820208, 1.976097924368722, 1.9779796600341797, 1.9799299240112305, 1.9818639074053084], "val_accuracy": [0.03700000047683716, 0.027666667476296425, 0.02133333310484886, 0.015666667371988297, 0.013333333656191826, 0.011666666716337204]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [4, 2, 2, 3, 0, 7, 2, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 0, 1], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.016285713762044907, "mapping_values": [1, 10, 10, 5, 5, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.305705413873784, 2.320865573569406, 2.356991759412214, 2.413835548879039, 2.5278407205380877, 2.7762109139623456], "accuracy": [0.08360850811004639, 0.05613525211811066, 0.025359926745295525, 0.015717871487140656, 0.009245806373655796, 0.006868313532322645], "val_loss": [1.9787864685058594, 2.00264242717198, 2.0441995348249162, 2.112665585109166, 2.2462927954537526, 2.6014509201049805], "val_accuracy": [0.014999999664723873, 0.007000000216066837, 0.004999999888241291, 0.004666666500270367, 0.004666666500270367, 0.005333333276212215]}}]