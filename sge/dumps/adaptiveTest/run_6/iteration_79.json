[{"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 0, 7, 3, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 2, 8, 4, 0, 3, 0, 2, 5, 3, 1, 6, 2, 2, 8, 4, 8, 5, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 2, 0, 3, 2, 3, 2, 0, 2, 2, 2, 3, 0, 3, 2, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 65, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7720000147819519, "mapping_values": [1, 77, 77, 48, 29, 10, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(alpha), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), grad)), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.pow(grad, grad))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))))))))))))))))), tf.math.negative(grad)))), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2995944669013326, 2.2844561862907766, 2.256467581614055, 2.2122638023383017, 2.1431685906391196, 2.029280635926702, 1.8413765473435695, 1.6112989278879495, 1.4307683510251914, 1.3506490361059127, 1.3169094780259492, 1.1775936793814938, 1.0600616736670905, 0.9433198871393371, 0.9063534830397839, 0.8802826619025439, 0.8677751848946756, 0.8363916653652138, 0.8113711358313358, 0.7929042772594271, 0.7790269674311351, 0.7758873968769326, 0.7577353338712809, 0.7436554024263915, 0.7314569062056747, 0.7119481895719741, 0.7101592291237545, 0.6969997208305181, 0.6907428334795678, 0.6809595743536934, 0.6772080899355607, 0.6685209408128865, 0.6484198886027757, 0.644763882693015, 0.646306055348862, 0.6356935984407197, 0.6268949488827644, 0.6305090512629151, 0.6152934457931095, 0.6175173617483146, 0.5995272911849858, 0.5934601384950052, 0.5820261284329116, 0.5752034458297197, 0.5680373168152243, 0.5572914830713445, 0.5584748211852973, 0.5488457672741781, 0.5570172128219488, 0.5445278942104753, 0.5317108656090673, 0.5296130827893166, 0.5332167706493027, 0.5211780835781997, 0.5077189637165752, 0.5173890381291747, 0.5020783600506765, 0.5024187596891976, 0.49656401492931806, 0.4947439325547032, 0.48729845993648885, 0.4909183600039892, 0.48187271345088417, 0.4700147958991235, 0.4710439285030927, 0.4674992742413748, 0.472143953396203, 0.458061500173345], "accuracy": [0.10170386731624603, 0.1356491893529892, 0.2110685557126999, 0.2926958203315735, 0.35081231594085693, 0.39228636026382446, 0.42306166887283325, 0.45964866876602173, 0.505349338054657, 0.5301809310913086, 0.54655921459198, 0.5955620408058167, 0.6351869106292725, 0.6546030640602112, 0.653150200843811, 0.6790384650230408, 0.6889446377754211, 0.6890767216682434, 0.6968696117401123, 0.7013604640960693, 0.6934354901313782, 0.7030775547027588, 0.7086250185966492, 0.7186633348464966, 0.7239466309547424, 0.7260599732398987, 0.7250033020973206, 0.7236824631690979, 0.7281733155250549, 0.7367587089538574, 0.7423061728477478, 0.7424382567405701, 0.7535332441329956, 0.7465327978134155, 0.7498348951339722, 0.7516840696334839, 0.7581561207771301, 0.755118191242218, 0.7594769597053528, 0.7647602558135986, 0.7701756954193115, 0.7724210619926453, 0.7692511081695557, 0.7802139520645142, 0.7837802171707153, 0.7880068421363831, 0.7853652238845825, 0.7911768555641174, 0.785101056098938, 0.7954035401344299, 0.7991018295288086, 0.7971205711364746, 0.7950072884559631, 0.8033285140991211, 0.8095363974571228, 0.8105930685997009, 0.8133667707443237, 0.8133667707443237, 0.8187822103500366, 0.8148196935653687, 0.8149517774581909, 0.8149517774581909, 0.8152159452438354, 0.82683926820755, 0.8165367841720581, 0.8244617581367493, 0.8264430165290833, 0.8265751004219055], "val_loss": [1.9623994827270508, 1.9409976686750139, 1.9075520379202706, 1.8580141748700822, 1.77554532459804, 1.6294825758252824, 1.395444393157959, 1.1264081001281738, 0.9217845371791294, 0.8110275438853672, 0.7494782549994332, 0.7302034752709525, 0.6658928905214582, 0.653890882219587, 0.6548068523406982, 0.6493404252188546, 0.6260424171175275, 0.6064058031354632, 0.5864373275211879, 0.5718930789402553, 0.5713835443769183, 0.5623517887932914, 0.5574790069035122, 0.5528856856482369, 0.541592172213963, 0.5352792910167149, 0.5330348355429513, 0.5296256201607841, 0.5239788123539516, 0.5167028052466256, 0.5099363327026367, 0.5019173962729317, 0.49487883704049246, 0.4913874183382307, 0.4872122492109026, 0.48135386194501606, 0.4766005958829607, 0.47310796805790495, 0.46860967363630024, 0.4646853038242885, 0.4611039161682129, 0.4563859701156616, 0.45194402762821745, 0.4481513329914638, 0.4446502753666469, 0.4406495349747794, 0.4372963990483965, 0.4341206210000174, 0.430112966469356, 0.42595516783850534, 0.42286975043160574, 0.4191491859299796, 0.41449194295065744, 0.41079931599753244, 0.40732905694416593, 0.4041090863091605, 0.4013215558869498, 0.39986070564814974, 0.3992082050868443, 0.39857581683567594, 0.39736586809158325, 0.3961961439677647, 0.39458963700703215, 0.39236511502947125, 0.3907494970730373, 0.3885906083243234, 0.38602363211768015, 0.3837913615362985], "val_accuracy": [0.10499999672174454, 0.30000001192092896, 0.38999998569488525, 0.4230000078678131, 0.44699999690055847, 0.4856666624546051, 0.5490000247955322, 0.609333336353302, 0.656333327293396, 0.6679999828338623, 0.6840000152587891, 0.6956666707992554, 0.7129999995231628, 0.7163333296775818, 0.7253333330154419, 0.722000002861023, 0.7283333539962769, 0.7333333492279053, 0.7360000014305115, 0.7363333106040955, 0.7333333492279053, 0.7446666955947876, 0.7476666569709778, 0.7513333559036255, 0.7490000128746033, 0.7526666522026062, 0.7556666731834412, 0.7599999904632568, 0.765666663646698, 0.768666684627533, 0.7720000147819519, 0.7746666669845581, 0.7760000228881836, 0.7766666412353516, 0.7789999842643738, 0.7833333611488342, 0.7829999923706055, 0.7876666784286499, 0.7929999828338623, 0.7903333306312561, 0.7896666526794434, 0.7919999957084656, 0.7960000038146973, 0.79666668176651, 0.7963333129882812, 0.8003333210945129, 0.8046666383743286, 0.8090000152587891, 0.8113333582878113, 0.8119999766349792, 0.8100000023841858, 0.8116666674613953, 0.812666654586792, 0.8166666626930237, 0.8190000057220459, 0.8240000009536743, 0.8289999961853027, 0.82833331823349, 0.8270000219345093, 0.8259999752044678, 0.8299999833106995, 0.8336666822433472, 0.8360000252723694, 0.8326666951179504, 0.8299999833106995, 0.8303333520889282, 0.8336666822433472, 0.8360000252723694]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 6, 8, 4, 0, 3, 0, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7699999809265137, "mapping_values": [1, 91, 91, 55, 36, 10, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 77, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))), tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, grad))))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), grad))))))), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, grad)))), tf.math.sqrt(tf.math.square(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2995944354103037, 2.2844561547997477, 2.256467581614055, 2.2122638023383017, 2.1431685591480907, 2.0292808271087375, 1.8413770916817478, 1.6113009003127934, 1.4307726715785984, 1.3506564093839066, 1.3169189432687323, 1.1776142517778112, 1.060103977691732, 0.9433419259705201, 0.9063472456825629, 0.8803182238396274, 0.8677881416580413, 0.8364859609209614, 0.8115839082189225, 0.7929335533194869, 0.7789939088104045, 0.7758952580375631, 0.7577958430486222, 0.7437725860240232, 0.7315632062675679, 0.7119435069189726, 0.7102096814442272, 0.6969095446241216, 0.6906064508802399, 0.6807581229830904, 0.6769778191248156, 0.6682410519105128, 0.6483229193642092, 0.6447338690579513, 0.6461750684775193, 0.6355643518029928, 0.6268511352569294, 0.6302590494961424, 0.615086208890694, 0.6175051212247809, 0.5993027478602143, 0.593007146060396, 0.5818673933674993, 0.5751933460427061, 0.5679747191134886, 0.5571433756298251, 0.5579269760084221, 0.5479044742383316, 0.5564272286334231, 0.5438545795479597, 0.5311833211396585, 0.528965438023188, 0.532737804977035, 0.5208226423954148, 0.5074289319789516, 0.5170422975633753, 0.5015648647605498, 0.5014771229445171, 0.496253931755403, 0.4947881766786476, 0.48729742695988915, 0.49094928230481644, 0.48158627337137816, 0.46974624364509276, 0.47060644599850054, 0.46646022177044866, 0.4718247934055996], "accuracy": [0.10170386731624603, 0.1356491893529892, 0.2110685557126999, 0.2926958203315735, 0.35081231594085693, 0.39228636026382446, 0.42306166887283325, 0.459780752658844, 0.505349338054657, 0.5300488471984863, 0.54655921459198, 0.5955620408058167, 0.6351869106292725, 0.6547351479530334, 0.6528860330581665, 0.6790384650230408, 0.6889446377754211, 0.6888125538825989, 0.6966054439544678, 0.7013604640960693, 0.6936996579170227, 0.7029454708099365, 0.7083608508110046, 0.7189275026321411, 0.7235503792762756, 0.7257958054542542, 0.7252674698829651, 0.7230220437049866, 0.7281733155250549, 0.7360982894897461, 0.7425703406333923, 0.7427024245262146, 0.7535332441329956, 0.7471932172775269, 0.7486461400985718, 0.7511557340621948, 0.7582882046699524, 0.7547219395637512, 0.7609298825263977, 0.7647602558135986, 0.7692511081695557, 0.7721568942070007, 0.770439863204956, 0.7810064554214478, 0.7849689722061157, 0.7868181467056274, 0.7874785661697388, 0.7901201844215393, 0.7845727205276489, 0.7959318161010742, 0.7993659973144531, 0.7976489067077637, 0.7959318161010742, 0.8025360107421875, 0.8105930685997009, 0.81112140417099, 0.8124422430992126, 0.8136309385299683, 0.8169330358505249, 0.816008448600769, 0.8162726163864136, 0.8152159452438354, 0.816008448600769, 0.8278959393501282, 0.8170651197433472, 0.8240655064582825, 0.82683926820755], "val_loss": [1.9623994827270508, 1.9409976686750139, 1.9075520379202706, 1.8580141067504883, 1.77554532459804, 1.6294827801840646, 1.3954461642674036, 1.1264102458953857, 0.9217849799564907, 0.8110349518912179, 0.7494857822145734, 0.7302190576280866, 0.6659124067851475, 0.6538887534822736, 0.6548103094100952, 0.6493664128439767, 0.6260434559413365, 0.6064904417310443, 0.5864597388676235, 0.5718227113996234, 0.5713968276977539, 0.5623878921781268, 0.5575599670410156, 0.5530781745910645, 0.5416946070534843, 0.535330091203962, 0.5330174991062709, 0.5295739684786115, 0.5239113739558628, 0.5165304967335292, 0.5097670555114746, 0.5017642463956561, 0.49476659297943115, 0.4912963254111154, 0.48710508005959646, 0.4814772094999041, 0.47686723300388884, 0.4733116626739502, 0.4688726322991507, 0.46494034358433317, 0.46125158241816927, 0.4566337210791452, 0.45219547407967703, 0.44829862458365305, 0.44472949845450266, 0.44065464394433157, 0.4372278281620571, 0.43411623580115183, 0.4303794247763498, 0.42625486850738525, 0.42301073244639803, 0.41925219127110075, 0.4146334784371512, 0.41092406851904734, 0.40741065570286344, 0.4042733311653137, 0.4014950820377895, 0.400134231363024, 0.3995988539287022, 0.39885054315839497, 0.3972482170377459, 0.3959031360489981, 0.39442053011485506, 0.3922028967312404, 0.39052148376192364, 0.38863530329295565, 0.3862957443509783], "val_accuracy": [0.10499999672174454, 0.30000001192092896, 0.38999998569488525, 0.4230000078678131, 0.44699999690055847, 0.4856666624546051, 0.5490000247955322, 0.609333336353302, 0.656333327293396, 0.6679999828338623, 0.6840000152587891, 0.6956666707992554, 0.7129999995231628, 0.7163333296775818, 0.7253333330154419, 0.722000002861023, 0.7286666631698608, 0.7333333492279053, 0.7360000014305115, 0.7363333106040955, 0.7333333492279053, 0.7450000047683716, 0.7483333349227905, 0.7513333559036255, 0.7486666440963745, 0.7523333430290222, 0.7563333511352539, 0.7609999775886536, 0.765333354473114, 0.7676666378974915, 0.7716666460037231, 0.7743333578109741, 0.7760000228881836, 0.7763333320617676, 0.7786666750907898, 0.7839999794960022, 0.7833333611488342, 0.7873333096504211, 0.7906666398048401, 0.7923333048820496, 0.7910000085830688, 0.7919999957084656, 0.7933333516120911, 0.7946666479110718, 0.7963333129882812, 0.8003333210945129, 0.8059999942779541, 0.8090000152587891, 0.8119999766349792, 0.8119999766349792, 0.8096666932106018, 0.8116666674613953, 0.8130000233650208, 0.8166666626930237, 0.8196666836738586, 0.8240000009536743, 0.8276666402816772, 0.82833331823349, 0.8286666870117188, 0.8286666870117188, 0.8330000042915344, 0.8353333473205566, 0.8339999914169312, 0.8333333134651184, 0.8306666612625122, 0.8306666612625122, 0.8353333473205566]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 2, 2, 0, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [4, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.5640000104904175, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 5, 3, 3, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3011057850486645, 2.2990662005788156, 2.2984597214996194, 2.296801489798652, 2.2939171326583985, 2.292395583233262, 2.2898598559355268, 2.2880131474354988, 2.2848881262483345, 2.2839756749797697, 2.2838536266794986, 2.279793510095649, 2.2786955074501263, 2.2772700585992722, 2.2751740323176173, 2.2723146523498445, 2.27095260045091, 2.2707096779303955, 2.2646329664614036, 2.2639298521847286, 2.261240315648307, 2.2606586014605656, 2.256974580060883, 2.2553931792587605, 2.254677243535671, 2.2513572880935517, 2.249070906415513, 2.2470022489555035, 2.242406981385946, 2.2410386392799713, 2.2394157637537053, 2.2352892902816652, 2.234069764007903, 2.2293269316817255, 2.228137152148685, 2.226821864081128, 2.222508700390565, 2.2205654375305297, 2.21622497294447, 2.212577603701288, 2.2092067882007282, 2.20911508783641, 2.204785217777172, 2.200430978794675, 2.2005722393937286, 2.195421638458538, 2.1910280249830816, 2.1888947677713078, 2.1828897363080513, 2.1808657966128053, 2.1769540012630695, 2.170753425185738, 2.16850616093939, 2.165015793558377, 2.1607544135896206, 2.1540269164550323, 2.1490862797500436, 2.147933088415224, 2.140615577128396, 2.139265690308363, 2.130427847826848, 2.1266369904351983, 2.1229898674518615, 2.118242533325661, 2.111069502658564, 2.1063727288591925, 2.09924786932606, 2.0935147876170146, 2.0890773206795714, 2.081587158504683, 2.0752774961809393, 2.0686518159351643, 2.065678634789673, 2.0558698814086247, 2.049294585612283, 2.0393076580686498, 2.039849812470218, 2.0272201005383694, 2.0211552008189355, 2.017134249060775, 2.003961914424269, 2.002501706374147, 1.989560290444812, 1.9825210437924556, 1.9771902143301792, 1.9668708737846599, 1.9600191029417768, 1.9496565849521865, 1.9374313961324312, 1.9332896926226382, 1.9243746962545414, 1.9163556308825695, 1.901328574633318, 1.8962951709313747, 1.8873519031142736, 1.876783755067758, 1.8647130425611522, 1.8591385027358025, 1.8461577872936483, 1.8427890328651784], "accuracy": [0.09721305221319199, 0.09866596013307571, 0.10077928751707077, 0.10289261490106583, 0.11055342853069305, 0.12072381377220154, 0.12336547672748566, 0.13221503794193268, 0.136045441031456, 0.14132875204086304, 0.13657376170158386, 0.15849953889846802, 0.15242372453212738, 0.15559370815753937, 0.16431118547916412, 0.16734910011291504, 0.1768590658903122, 0.17012283205986023, 0.187689870595932, 0.19033153355121613, 0.19733192026615143, 0.19759608805179596, 0.20552106201648712, 0.21344605088233948, 0.21172896027565002, 0.21859727799892426, 0.21384228765964508, 0.2277110069990158, 0.23774930834770203, 0.2467309534549713, 0.24607053399085999, 0.25042927265167236, 0.254920095205307, 0.2616563141345978, 0.26244881749153137, 0.2716946303844452, 0.27618545293807983, 0.2755250334739685, 0.2843745946884155, 0.2925637364387512, 0.29705455899238586, 0.29362040758132935, 0.29705455899238586, 0.3007528781890869, 0.2999603748321533, 0.30682867765426636, 0.3167349100112915, 0.30841368436813354, 0.32333904504776, 0.3237352967262268, 0.3287544548511505, 0.3387927711009979, 0.3331131935119629, 0.32782986760139465, 0.33601900935173035, 0.3475102484226227, 0.34684982895851135, 0.3481706380844116, 0.3629639446735382, 0.35266146063804626, 0.3683793544769287, 0.36785101890563965, 0.3630960285663605, 0.368511438369751, 0.3755118250846863, 0.37128517031669617, 0.38053098320961, 0.37564390897750854, 0.37921014428138733, 0.38502180576324463, 0.39202219247817993, 0.38568219542503357, 0.39307886362075806, 0.3975696861743927, 0.389380544424057, 0.39902257919311523, 0.3963809311389923, 0.4065513014793396, 0.404570072889328, 0.40826839208602905, 0.4193633496761322, 0.40641921758651733, 0.42689210176467896, 0.4150046110153198, 0.41487252712249756, 0.4212125241756439, 0.42108044028282166, 0.4313828945159912, 0.43164706230163574, 0.42966583371162415, 0.4294016659259796, 0.4329679012298584, 0.43970412015914917, 0.4411570429801941, 0.44366663694381714, 0.4418174624443054, 0.450931191444397, 0.44908201694488525, 0.45264825224876404, 0.45225200057029724], "val_loss": [1.9686561993190221, 1.966827324458531, 1.9650107792445592, 1.9631900106157576, 1.9613910402570451, 1.9596048082624162, 1.9578074046543665, 1.956014905657087, 1.954195840018136, 1.9523893765040807, 1.950597149985177, 1.9487970215933663, 1.9469868115016393, 1.9451426097324915, 1.9432903698512487, 1.9414473942347936, 1.9395713124956404, 1.9376870564052038, 1.9357459885733468, 1.9338299206324987, 1.9318346296037947, 1.9298597063337053, 1.927839960370745, 1.925823484148298, 1.9237684522356306, 1.9216630799429757, 1.9195190157209123, 1.9173521314348494, 1.9151167188371931, 1.9128700665065221, 1.9105817249843053, 1.9082394327436174, 1.9058572224208288, 1.9033988543919154, 1.9009133066449846, 1.8983959470476424, 1.8958027022225517, 1.8931616374424525, 1.8904342651367188, 1.887631620679583, 1.8847864695957728, 1.881919997079032, 1.878955500466483, 1.875896998814174, 1.8728032793317522, 1.8696131025041853, 1.8663254465375627, 1.862990243094308, 1.8595570155552454, 1.8560472215924944, 1.8524538448878698, 1.848717553274972, 1.8449343953813826, 1.8410498755318778, 1.8370837484087263, 1.832956382206508, 1.828723703111921, 1.824455738067627, 1.8200466292245048, 1.8156136104038783, 1.811011450631278, 1.8062859262738908, 1.8014490263802665, 1.7965175764901298, 1.7914420536586217, 1.786264283316476, 1.7809375354221888, 1.7754649434770857, 1.7699132646833147, 1.7642427853175573, 1.7583929470607214, 1.7524261474609375, 1.7463507652282715, 1.740074634552002, 1.7336796351841517, 1.7271220343453544, 1.720522744315011, 1.7137060506003243, 1.7067866665976388, 1.6997854709625244, 1.692518608910697, 1.6852828434535436, 1.6777614525386266, 1.6701550143105643, 1.6624365534101213, 1.6545663220541817, 1.646568809236799, 1.6383659158434187, 1.6299763066428048, 1.6216007300785609, 1.6130479063306535, 1.604360478264945, 1.5954935550689697, 1.5865487030574255, 1.577556916645595, 1.5684738159179688, 1.559185470853533, 1.5498898029327393, 1.5404554775782995, 1.5310759544372559], "val_accuracy": [0.0573333315551281, 0.0716666653752327, 0.08533333241939545, 0.09799999743700027, 0.11599999666213989, 0.13300000131130219, 0.1496666669845581, 0.16300000250339508, 0.1809999942779541, 0.20033332705497742, 0.22066666185855865, 0.23766666650772095, 0.25200000405311584, 0.2630000114440918, 0.27900001406669617, 0.289000004529953, 0.3019999861717224, 0.3153333365917206, 0.3283333480358124, 0.33666667342185974, 0.34599998593330383, 0.35600000619888306, 0.3616666793823242, 0.367333322763443, 0.37033334374427795, 0.3786666691303253, 0.38100001215934753, 0.38600000739097595, 0.39100000262260437, 0.39533331990242004, 0.39933332800865173, 0.40400001406669617, 0.40700000524520874, 0.4113333225250244, 0.4143333435058594, 0.41866666078567505, 0.42133334279060364, 0.4259999990463257, 0.43166667222976685, 0.43666666746139526, 0.43933331966400146, 0.4426666796207428, 0.44433334469795227, 0.44733333587646484, 0.4476666748523712, 0.45133334398269653, 0.45399999618530273, 0.4580000042915344, 0.46033334732055664, 0.46299999952316284, 0.4673333466053009, 0.468666672706604, 0.4703333377838135, 0.4729999899864197, 0.4749999940395355, 0.47866666316986084, 0.48133334517478943, 0.4833333194255829, 0.48633334040641785, 0.4893333315849304, 0.4909999966621399, 0.49399998784065247, 0.4959999918937683, 0.49799999594688416, 0.49933332204818726, 0.5023333430290222, 0.5043333172798157, 0.5049999952316284, 0.5053333044052124, 0.5076666474342346, 0.5093333125114441, 0.5146666765213013, 0.5163333415985107, 0.518666684627533, 0.5206666588783264, 0.5233333110809326, 0.5253333449363708, 0.5289999842643738, 0.5296666622161865, 0.5320000052452087, 0.534333348274231, 0.5370000004768372, 0.5386666655540466, 0.5426666736602783, 0.5429999828338623, 0.5440000295639038, 0.5473333597183228, 0.5509999990463257, 0.5523333549499512, 0.5546666383743286, 0.5553333163261414, 0.5559999942779541, 0.5576666593551636, 0.5590000152587891, 0.5586666464805603, 0.5613333582878113, 0.562666654586792, 0.5630000233650208, 0.5666666626930237, 0.5680000185966492]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 7, 5, 4, 0, 2, 0, 2, 6, 0, 4, 0, 3, 0, 2, 2, 8, 1, 6, 1, 2, 6, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 1, 1, 0, 8, 0, 7, 4, 2, 6, 0, 8, 9, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 2, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 0, 1, 2, 1, 0, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.5637142658233643, "mapping_values": [1, 18, 18, 10, 8, 1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301106194337566, 2.299068319326725, 2.2984631222473113, 2.2968062491323087, 2.2939241277606275, 2.292404260680723, 2.2898709896832345, 2.2880270836958245, 2.2849057870156195, 2.283996552303719, 2.2838783499083233, 2.2798231953973738, 2.2787295250986483, 2.277308470915337, 2.2752158949482535, 2.2723620522685133, 2.271005632414117, 2.270768054330574, 2.264700366615887, 2.264002456924525, 2.261322335166513, 2.2607470996596195, 2.2570718097460034, 2.2554974856708565, 2.254788171629376, 2.251478706226845, 2.249202684152553, 2.2471426592337975, 2.242562519639569, 2.2412030452498515, 2.2395925124118894, 2.2354817117729584, 2.2342747809659884, 2.2295518405149957, 2.228374359236417, 2.227072495951896, 2.222785225602315, 2.2208578505961336, 2.2165401121723245, 2.2129174982158344, 2.2095680441193184, 2.2094873390681458, 2.205188063456634, 2.200863139787764, 2.201027412519101, 2.195909261640509, 2.191550201822376, 2.189441065416045, 2.1834825348970583, 2.1814812643967914, 2.1776072505978137, 2.171469899184983, 2.1692558345132107, 2.165825517563977, 2.161593939634189, 2.1549314393847294, 2.1500572903186828, 2.148947404879841, 2.1417078862588923, 2.1403890557340137, 2.131639835431733, 2.1279188852268613, 2.1243437998928743, 2.1196774047332085, 2.112590950682588, 2.10797483605196, 2.1009432241003734, 2.0953112942525944, 2.090964640356751, 2.0835797171377943, 2.07739369445048, 2.070875259044699, 2.0680000140225774, 2.0583375567820537, 2.051880162862219, 2.042055978845564, 2.042659654152502, 2.030210305576579, 2.024260674170405, 2.0203634979324634, 2.0074079914367617, 2.006000052794584, 1.9933178527181048, 1.9864218173608363, 1.9812064375371634, 1.9710671346358588, 1.9643871573850133, 1.9542063371049667, 1.94221699559032, 1.9381959468870273, 1.9294835024537538, 1.9216291353041548, 1.906868644866646, 1.9020045397697642, 1.8932124640979093, 1.882819905572044, 1.8710109451270265, 1.8655656302184667, 1.8527952255652864, 1.8495520912125567], "accuracy": [0.09721305221319199, 0.09866596013307571, 0.10077928751707077, 0.10289261490106583, 0.11055342853069305, 0.120459645986557, 0.12336547672748566, 0.1320829540491104, 0.13617752492427826, 0.14132875204086304, 0.13657376170158386, 0.15849953889846802, 0.15242372453212738, 0.1554616242647171, 0.16431118547916412, 0.1670849323272705, 0.17659489810466766, 0.1698586642742157, 0.18782195448875427, 0.19033153355121613, 0.1974640041589737, 0.1978602558374405, 0.2052568942308426, 0.21357811987400055, 0.21159687638282776, 0.2180689424276352, 0.21357811987400055, 0.22718267142772675, 0.2378813922405243, 0.24646678566932678, 0.2456742823123932, 0.2502971887588501, 0.25478801131248474, 0.2615242302417755, 0.2620525658130646, 0.272090882062912, 0.27618545293807983, 0.27539294958114624, 0.28424251079559326, 0.29137498140335083, 0.29679039120674133, 0.2930920720100403, 0.29679039120674133, 0.30062079429626465, 0.3000924587249756, 0.30603620409965515, 0.316470742225647, 0.30801743268966675, 0.32267865538597107, 0.32333904504776, 0.32822611927986145, 0.33826443552970886, 0.3323206901550293, 0.3275656998157501, 0.33522653579711914, 0.34684982895851135, 0.3465856611728668, 0.3477744162082672, 0.3625676929950714, 0.352529376745224, 0.3673226833343506, 0.3673226833343506, 0.3619072735309601, 0.368511438369751, 0.3751155734062195, 0.37062475085258484, 0.3797384798526764, 0.37485140562057495, 0.37868180871009827, 0.38422930240631104, 0.3910976052284241, 0.3847576379776001, 0.392550528049469, 0.3961167633533478, 0.38885220885276794, 0.39889049530029297, 0.3949280083179474, 0.40668338537216187, 0.40443798899650574, 0.4076079726219177, 0.4189670979976654, 0.40509840846061707, 0.4255712628364563, 0.413419634103775, 0.41447630524635315, 0.41949543356895447, 0.42002376914024353, 0.4299300014972687, 0.43085458874702454, 0.4297979176044464, 0.42887333035469055, 0.4319112300872803, 0.4379870593547821, 0.4403645396232605, 0.4422137141227722, 0.44010037183761597, 0.4493461847305298, 0.44828951358795166, 0.45145952701568604, 0.4523840844631195], "val_loss": [1.9686576298304967, 1.9668305260794503, 1.9650150026593889, 1.9631962776184082, 1.9613991464887346, 1.9596152305603027, 1.95782014301845, 1.9560305050441198, 1.9542150497436523, 1.9524126734052385, 1.9506243978227888, 1.9488286972045898, 1.9470228467668806, 1.9451826640537806, 1.9433356012616838, 1.9414973940168108, 1.9396265574863978, 1.9377479553222656, 1.9358136994498116, 1.9339035579136439, 1.9319161687578474, 1.9299492835998535, 1.9279374395098006, 1.9259286608014787, 1.9238818032400948, 1.921785763331822, 1.9196511677333288, 1.9174940245492118, 1.9152700560433524, 1.9130347115652901, 1.9107584272112166, 1.9084301676068987, 1.9060627392360143, 1.9036194937569755, 1.9011501584734236, 1.8986504418509347, 1.8960745675223214, 1.8934512819562639, 1.8907442092895508, 1.887963022504534, 1.8851406233651298, 1.88229615347726, 1.87935699735369, 1.8763244492667062, 1.8732592718941825, 1.8700992039271764, 1.8668437685285295, 1.863539695739746, 1.860140596117292, 1.8566663605826241, 1.8531122888837541, 1.8494208880833216, 1.84568418775286, 1.8418470110212053, 1.837928022657122, 1.8338538578578405, 1.8296798978533064, 1.825470038822719, 1.821124485560826, 1.816751548222133, 1.8122141020638602, 1.8075623512268066, 1.8028017452784948, 1.7979498590741838, 1.792951992579869, 1.7878567831856864, 1.782618454524449, 1.7772448403494698, 1.7717901638575964, 1.7662243161882674, 1.7604817662920271, 1.7546276365007674, 1.748666627066476, 1.7425123623439245, 1.7362450190952845, 1.7298235212053572, 1.7233611515590124, 1.7166827406202043, 1.7099059649876185, 1.7030560289110457, 1.6959452288491386, 1.6888622556413924, 1.681511572429112, 1.674074649810791, 1.666523013796125, 1.6588263511657715, 1.6510049274989538, 1.6429836068834578, 1.6347893987383162, 1.6266066346849715, 1.6182507106236048, 1.6097643034798759, 1.6011075632912772, 1.5923707825796944, 1.5835761002131872, 1.574687855584281, 1.5656024387904577, 1.5565135819571358, 1.5472856249128069, 1.538108961922782], "val_accuracy": [0.05766666680574417, 0.0716666653752327, 0.08533333241939545, 0.09799999743700027, 0.11599999666213989, 0.13300000131130219, 0.14933332800865173, 0.16333332657814026, 0.1809999942779541, 0.20000000298023224, 0.21966665983200073, 0.23800000548362732, 0.25200000405311584, 0.2630000114440918, 0.2783333361148834, 0.2893333435058594, 0.3016666769981384, 0.3153333365917206, 0.3283333480358124, 0.33633333444595337, 0.3453333377838135, 0.3556666672229767, 0.3619999885559082, 0.367333322763443, 0.37033334374427795, 0.3786666691303253, 0.3816666603088379, 0.3856666684150696, 0.39100000262260437, 0.3956666588783264, 0.3996666669845581, 0.40400001406669617, 0.40566667914390564, 0.41100001335144043, 0.4143333435058594, 0.4180000126361847, 0.421999990940094, 0.4256666600704193, 0.4313333332538605, 0.4359999895095825, 0.4386666715145111, 0.4423333406448364, 0.4440000057220459, 0.44699999690055847, 0.44699999690055847, 0.4506666660308838, 0.45266667008399963, 0.4580000042915344, 0.46000000834465027, 0.46266666054725647, 0.46666666865348816, 0.4690000116825104, 0.4699999988079071, 0.4729999899864197, 0.47466665506362915, 0.47866666316986084, 0.48133334517478943, 0.484333336353302, 0.4866666793823242, 0.4893333315849304, 0.49033331871032715, 0.49399998784065247, 0.49533334374427795, 0.4976666569709778, 0.49900001287460327, 0.5009999871253967, 0.5046666860580444, 0.5040000081062317, 0.5049999952316284, 0.5076666474342346, 0.5090000033378601, 0.512666642665863, 0.5149999856948853, 0.5170000195503235, 0.5196666717529297, 0.5226666927337646, 0.5256666541099548, 0.5276666879653931, 0.5289999842643738, 0.531333327293396, 0.5339999794960022, 0.5356666445732117, 0.5379999876022339, 0.5416666865348816, 0.5426666736602783, 0.5433333516120911, 0.5450000166893005, 0.5486666560173035, 0.5516666769981384, 0.5533333420753479, 0.5546666383743286, 0.5566666722297668, 0.5576666593551636, 0.5583333373069763, 0.5586666464805603, 0.5596666932106018, 0.5613333582878113, 0.5619999766349792, 0.5630000233650208, 0.5659999847412109]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 0, 7, 6, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 6, 8, 4, 0, 2, 2, 2, 2, 9, 1, 6, 2, 2, 8, 1, 1, 1, 4, 3, 5, 6, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 9, 5, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 1, 2, 3, 3, 0, 2, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 2, 1, 2, 2, 2, 0, 2, 3], [26, 10, 30, 2, 57, 95, 34, 4, 94, 70, 0, 56], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 1, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 86, 86, 52, 34, 12, 5, 5, 3, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 71, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.math.negative(grad)))), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, grad)))))), alpha))))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))))), tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [6, 2, 5, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [4, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 4, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [3, 8, 2, 3, 2, 7, 2, 6, 6, 8, 2, 9, 4, 8, 2, 0, 2, 6, 3, 4, 0, 3, 0, 2, 2, 3, 1, 3, 2, 2, 8, 8, 3, 1, 1, 3, 5, 5, 2, 2, 3, 9, 2, 0, 8, 9, 7, 4, 2, 9, 0, 8, 5, 0, 8], [2, 1, 2, 3, 3, 1, 2, 1, 0, 1, 0, 1, 3, 1, 1, 3, 0, 0, 0, 2, 0, 0, 2, 1, 2, 0, 2, 2, 2, 2, 3, 1, 1, 1, 1, 2, 2, 2], [26, 18, 65, 90, 84, 41, 8, 70, 98], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [1, 4, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 51, 51, 29, 22, 8, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, alpha), alpha))))))))), tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [3, 2, 2, 3, 0, 7, 2, 1, 9, 2, 7, 3, 4, 0, 2, 5, 2, 6, 8, 4, 5, 3, 2, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 8, 4, 2, 6, 0, 8, 5, 0, 3, 3, 0, 6, 7, 1, 4, 8], [2, 1, 2, 3, 3, 1], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 1, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 2, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3032410838553274, 2.323882277080207, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09377889335155487, 0.07409853488206863, 0.0948355570435524, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.975837298801967, 2.0290329115731374, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.020666666328907013, 0.10000000149011612, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 4, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [3, 2, 2, 6, 2, 7, 2, 1, 9, 3, 2, 2, 4, 0, 2, 0, 2, 6, 3, 4, 0, 3, 0, 2, 6, 6, 8, 3, 2, 2, 8, 6, 3, 1, 4, 3, 5, 4, 2, 3, 3, 9, 2, 0, 8, 0, 7, 1, 2, 6, 0, 8, 5, 0, 3], [0, 0, 2, 3, 3, 2, 0, 2, 1, 0, 0, 2, 0, 2, 3, 2, 0, 0, 0, 3, 2, 3, 2, 2, 2, 1, 1, 2, 1, 0, 2, 0, 2, 2, 3, 2, 1, 0], [82, 18, 30, 8, 54, 47, 42, 57, 97, 17, 12, 62, 24], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [60, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 89, 89, 52, 37, 13, 5, 5, 2, 3, 1, 2, 2, 2, 0, 1, 3, 2, 1, 0], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.square(tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.negative(grad)))))))))))))))), alpha), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad))), grad)))), grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.sqrt(tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.339931781753935, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.1018359512090683, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [9.214395250592913, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 3, 0, 7, 2, 1, 9, 2, 2, 3, 4, 0, 2, 5, 2, 6, 8, 4, 5, 3, 2, 2, 2, 3, 5, 6, 6, 2, 2, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 8, 4, 2, 6, 0, 8, 2, 0, 3, 3, 0, 6, 7, 1, 4, 8], [1, 1, 2, 2, 0, 2, 2, 2, 1, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 1, 2, 2, 2, 2, 1, 3, 1, 0, 1, 0, 0], [26, 18, 62, 2, 57, 74, 6, 28, 94, 70, 36, 4, 62, 56], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [8, 5], [1, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 2, 3, 3, 1, 2, 0, 2, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), alpha), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(grad, tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), grad))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [6, 2, 5, 3, 0, 7, 5, 2, 9, 3, 8, 4, 1, 0, 5, 0, 2, 9, 7, 8, 2, 2, 6, 5, 8, 0, 2, 9], [2, 1, 2, 3, 3, 1, 2, 0, 2, 3, 3, 1], [8, 57, 30, 13], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 4, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 16, 8, 2, 33, 33, 18, 15, 4, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), grad))))))), grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.subtract(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), grad)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), alpha)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [26, 18, 30, 41, 57, 74, 34, 65, 94, 98], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 4, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [43, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 2, 2, 2, 0, 1, 3, 2, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), beta)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 2, 2, 0, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0], [26, 18, 62, 2, 57, 74, 34, 28, 94, 70, 36], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [8, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [2.301918430697444, 2.30187903708943, 2.3032541845326944, 2.303623568348802, 2.3026820403426442, 2.303114342132123], "accuracy": [0.09615638852119446, 0.09325055778026581, 0.08730682730674744, 0.08757099509239197, 0.0866464152932167, 0.09325055778026581], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [90, 18, 30], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 3, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301918430697444, 2.30187903708943, 2.3032541845326944, 2.303623568348802, 2.3026820403426442, 2.303114342132123], "accuracy": [0.09615638852119446, 0.09325055778026581, 0.08730682730674744, 0.08757099509239197, 0.0866464152932167, 0.09325055778026581], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 2, 2, 0, 2, 2, 2, 1, 9, 9, 2, 3, 5, 0, 2, 0, 2, 6, 3, 4, 0, 3, 0, 2, 2, 3, 1, 3, 2, 2, 8, 6, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 5, 6, 0, 4, 5, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 2, 3, 0, 2, 0, 0, 1, 0, 2, 0, 2, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 0, 2, 3], [86, 18, 30, 63, 67, 22, 82, 44, 57, 18, 43, 52, 6], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 18, 18, 11, 7, 2, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.301918430697444, 2.30187903708943, 2.3032541845326944, 2.303623568348802, 2.3026820403426442, 2.303114342132123], "accuracy": [0.09615638852119446, 0.09325055778026581, 0.08730682730674744, 0.08757099509239197, 0.0866464152932167, 0.09325055778026581], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 6, 8, 4, 0, 3, 0, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 0, 3], [3, 1, 2, 3, 3, 1, 2], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 6, 1, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 4, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, grad))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301918430697444, 2.30187903708943, 2.3032541845326944, 2.303623568348802, 2.3026820403426442, 2.303114342132123], "accuracy": [0.09615638852119446, 0.09325055778026581, 0.08730682730674744, 0.08757099509239197, 0.0866464152932167, 0.09325055778026581], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [3, 2, 2, 3, 2, 7, 2, 1, 9, 3, 2, 3, 4, 4, 0, 0, 2, 6, 3, 8, 0, 8, 0, 2, 2, 3, 1, 3, 2, 0, 8, 6, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 9, 8, 5, 0, 3, 7, 9, 9], [1, 1, 1, 2, 2, 2, 3, 2, 0, 0, 2, 3, 1, 2, 0, 0, 2, 2, 0, 1, 0, 2, 0, 3, 2, 2, 2, 3, 0, 2, 2, 2, 2, 1, 0, 3, 0, 3], [26, 18, 30, 63, 67, 22, 82, 44, 93, 18, 43, 52, 50, 27, 29], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 87, 87, 54, 33, 11, 5, 5, 3, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 68, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.negative(tf.math.sqrt(grad)), tf.math.negative(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, grad))), grad))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))))))), tf.math.sqrt(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))))))), grad))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.square(tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301918430697444, 2.30187903708943, 2.3032541845326944, 2.303623568348802, 2.3026820403426442, 2.303114342132123], "accuracy": [0.09615638852119446, 0.09325055778026581, 0.08730682730674744, 0.08757099509239197, 0.0866464152932167, 0.09325055778026581], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [3, 2, 2, 3, 2, 2, 2, 1, 9, 8, 2, 3, 4, 0, 2, 3, 2, 6, 3, 4, 0, 3, 0, 6, 2, 3, 1, 3, 2, 9, 8, 6, 2, 5, 4, 3, 5, 5, 2, 4, 3, 9, 2, 8, 8, 0, 7, 4, 2, 6, 0, 8, 5, 0, 3], [1, 1, 2, 2, 2, 2, 3, 2, 0, 0, 2, 3, 3, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 2, 2, 2, 2, 3, 0, 2, 2, 2, 2, 0, 0, 3, 0, 3], [26, 18, 30, 63, 67, 22, 82, 44, 93, 18, 90, 52, 6], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 3, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [36, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 76, 76, 46, 30, 12, 5, 5, 3, 2, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(alpha))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, grad), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))))))), tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.square(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))), tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, grad), tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), grad))))))), tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.sqrt(tf.math.negative(grad))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), grad)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.301918430697444, 2.30187903708943, 2.3032541845326944, 2.303623568348802, 2.3026820403426442, 2.303114342132123], "accuracy": [0.09615638852119446, 0.09325055778026581, 0.08730682730674744, 0.08757099509239197, 0.0866464152932167, 0.09325055778026581], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [6, 2, 5, 3, 8, 7, 5, 3, 9, 3, 7, 1, 8, 0, 9, 0, 1, 5, 5, 0, 8, 5, 0, 2, 4, 1, 4, 1, 9], [0, 1, 2, 3, 0, 1, 2, 1, 2, 2, 0, 1, 2, 0], [26, 51, 30, 63, 67, 22, 82, 44, 93, 18, 43, 52, 6], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.016285713762044907, "mapping_values": [1, 23, 23, 16, 7, 4, 5, 5, 3, 2, 1, 5, 3, 3, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.multiply(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(alpha)))), tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3042712681140127, 2.320195016733738, 2.355285269347133, 2.4128913011186865, 2.5085866268930372, 2.728483742978579], "accuracy": [0.09219389408826828, 0.05970149114727974, 0.02390701323747635, 0.012812046334147453, 0.008849557489156723, 0.00845330860465765], "val_loss": [1.9787719590323312, 2.0022239003862654, 2.0422823088509694, 2.105024610246931, 2.221428530556815, 2.558102607727051], "val_accuracy": [0.014999999664723873, 0.007333333138376474, 0.004999999888241291, 0.004000000189989805, 0.004333333112299442, 0.00566666666418314]}}]