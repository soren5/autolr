[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 4, 6, 7, 8, 6, 2, 8, 4, 6, 1, 0, 0, 2, 0, 1, 2, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 0, 2, 1, 2, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 40, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [2, 4, 6, 6, 6, 6, 4, 1, 4, 8], [2, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8371428847312927, "mapping_values": [1, 14, 14, 8, 6, 1, 4, 4, 3, 1, 1, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.9943396868313372, 1.093406509115491, 0.7946315645274076, 0.7032611846467208, 0.6490085477590277, 0.5903076840161868, 0.5540207944226823, 0.5305510265377487, 0.49815483905572805, 0.4810691009997818, 0.46596185046416294, 0.443994866484554, 0.4176330324633876, 0.42000646501279637, 0.39811346517058255, 0.38932676427336954, 0.38057227455755627, 0.358484681449184, 0.349292461197563, 0.34328294652973607, 0.33039368790028323, 0.3214651055150831, 0.31483654907161945, 0.30364439741668603, 0.2907817371296861, 0.29064916730273466, 0.2721050754159968, 0.2650839695683591, 0.2693940619880875, 0.2643650917368574, 0.24874282770696302, 0.24164086806815077], "accuracy": [0.3261128067970276, 0.6164311170578003, 0.6991150379180908, 0.743891179561615, 0.7553823590278625, 0.7783648371696472, 0.7959318161010742, 0.8005547523498535, 0.819970965385437, 0.8208954930305481, 0.8273676037788391, 0.8342359066009521, 0.8487650156021118, 0.8457271456718445, 0.8519350290298462, 0.8521991968154907, 0.8651432991027832, 0.8644828796386719, 0.8726720213890076, 0.874389111995697, 0.8775591254234314, 0.8812574148178101, 0.8805969953536987, 0.8853520154953003, 0.8907673954963684, 0.8907673954963684, 0.895918607711792, 0.89988112449646, 0.8938053250312805, 0.8973715305328369, 0.9027869701385498, 0.9088627696037292], "val_loss": [0.8463819026947021, 0.6019473586763654, 0.5395853689738682, 0.48886447293417795, 0.4465611491884504, 0.4270827685083662, 0.40680237327303204, 0.38686372552599224, 0.382955150944846, 0.36633793796811787, 0.3561865602220808, 0.345310458115169, 0.34853346007210867, 0.34077166659491404, 0.3376142042023795, 0.32061043807438444, 0.32280759300504414, 0.3223471556391035, 0.31770187616348267, 0.31692077432359966, 0.3180211867604937, 0.31594871623175486, 0.31572156293051584, 0.3037401097161429, 0.315025304044996, 0.3040095738002232, 0.30237678970609394, 0.320424028805324, 0.3099537066050938, 0.3023543357849121, 0.3058720145906721, 0.30151101521083284], "val_accuracy": [0.6163333058357239, 0.7223333120346069, 0.7649999856948853, 0.7796666622161865, 0.812666654586792, 0.8193333148956299, 0.8320000171661377, 0.8363333344459534, 0.8446666598320007, 0.8450000286102295, 0.8486666679382324, 0.859666645526886, 0.8496666550636292, 0.8536666631698608, 0.8613333106040955, 0.8643333315849304, 0.8633333444595337, 0.8650000095367432, 0.8676666617393494, 0.8636666536331177, 0.8686666488647461, 0.8666666746139526, 0.8703333139419556, 0.8736666440963745, 0.8723333477973938, 0.8743333220481873, 0.8759999871253967, 0.8723333477973938, 0.8669999837875366, 0.875333309173584, 0.8736666440963745, 0.8693333268165588]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 4, 3, 0, 5, 6, 0, 4, 4, 2, 1, 1, 8, 5, 2, 1, 2, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 2, 2, 2, 2, 0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 40, 44, 9, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 6, 6, 4, 1, 4, 8], [0, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8354285955429077, "mapping_values": [1, 11, 11, 6, 5, 0, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.993478967954202, 1.1040955955373486, 0.798890010114863, 0.7070673129514791, 0.6503727921657338, 0.5876883997570459, 0.5570547591898309, 0.5290081411257648, 0.49913478902207864, 0.476753656414002, 0.4669721284916908, 0.44877837443033686, 0.4221028642545145, 0.41669183180647407, 0.40176491449380264, 0.39069811888595124, 0.3868441754060729, 0.36180187997375857, 0.3487252167636031, 0.34450456027687976, 0.338086700418984, 0.32865000931168936, 0.32004400089101676, 0.31138775180894873, 0.3018194128808533, 0.2975522277102006, 0.27807903931818273, 0.2750067237940258, 0.2609900308913401, 0.2579787166134997, 0.2506023003653198, 0.2364090643168724, 0.2362961815631999, 0.2340286780090191, 0.22876510477147916, 0.22539503936951172, 0.2143678714995686, 0.20069772498703053, 0.20245532995760795, 0.20078788830178715, 0.19681662093568014, 0.18698393045604159], "accuracy": [0.32545238733291626, 0.6159027814865112, 0.702681303024292, 0.7401928305625916, 0.7564390301704407, 0.7804781198501587, 0.7971205711364746, 0.8006868362426758, 0.8175934553146362, 0.8236692547798157, 0.8274996876716614, 0.8293488025665283, 0.8453308939933777, 0.8486329317092896, 0.8499537706375122, 0.8535200357437134, 0.8585391640663147, 0.8663320541381836, 0.8704266548156738, 0.8749174475669861, 0.8745211958885193, 0.8782195448875427, 0.8821820020675659, 0.8837670087814331, 0.8856161832809448, 0.8841632604598999, 0.8975036144256592, 0.8957865834236145, 0.9002773761749268, 0.9010698795318604, 0.9025228023529053, 0.9100515246391296, 0.9052965044975281, 0.9115044474601746, 0.9101836085319519, 0.9126931428909302, 0.9190331697463989, 0.9208822846412659, 0.9198256731033325, 0.9229956269264221, 0.9220710396766663, 0.9256373047828674], "val_loss": [0.8537023748670306, 0.6066484791891915, 0.5409192868641445, 0.48414662906101774, 0.44452004773276194, 0.42648314578192575, 0.4043522817747934, 0.389439446585519, 0.3849747436387198, 0.3678022027015686, 0.3617449232510158, 0.34515662704195293, 0.34772432701928274, 0.3385872500283377, 0.3406319447926113, 0.32409134081431795, 0.32301935127803255, 0.3225803630692618, 0.3148275784083775, 0.3123313103403364, 0.3210217612130301, 0.3201326813016619, 0.3125059264046805, 0.30408420733043123, 0.3139236569404602, 0.3083865301949637, 0.3000137380191258, 0.30466805185590473, 0.3056096519742693, 0.30256623881203787, 0.2991621920040676, 0.29727052790778025, 0.3066018649509975, 0.3065552626337324, 0.30797914947782246, 0.30355056694575716, 0.30164744172777447, 0.31262679610933575, 0.32847347429820467, 0.31216671637126375, 0.3089478782245091, 0.3196337563650949], "val_accuracy": [0.6056666374206543, 0.7293333411216736, 0.7583333253860474, 0.7870000004768372, 0.8090000152587891, 0.8270000219345093, 0.8373333215713501, 0.8349999785423279, 0.8426666855812073, 0.8450000286102295, 0.8476666808128357, 0.862333357334137, 0.8536666631698608, 0.8583333492279053, 0.862333357334137, 0.8679999709129333, 0.8629999756813049, 0.8633333444595337, 0.8706666827201843, 0.8696666955947876, 0.8629999756813049, 0.8703333139419556, 0.8696666955947876, 0.871999979019165, 0.871666669845581, 0.8769999742507935, 0.8733333349227905, 0.8776666522026062, 0.871666669845581, 0.8799999952316284, 0.878333330154419, 0.8803333044052124, 0.878333330154419, 0.8806666731834412, 0.8766666650772095, 0.8763333559036255, 0.8859999775886536, 0.8763333559036255, 0.8740000128746033, 0.8776666522026062, 0.8809999823570251, 0.8806666731834412]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 1, 3, 2, 6, 6, 0, 4, 4, 2, 1, 6, 2, 5, 0, 1, 5, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 2, 2, 0, 0, 2, 1, 0, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 40, 34, 9, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 6, 6, 4, 1, 4, 8], [0, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8325714468955994, "mapping_values": [1, 39, 39, 22, 17, 4, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), alpha)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.9934768357753692, 1.1036740553345994, 0.7993691598640031, 0.7068507072711744, 0.651447699707985, 0.5902959773600644, 0.5564073619353159, 0.5302318280572353, 0.5006367670641032, 0.48380263627024217, 0.46603546873091267, 0.44306820331862445, 0.4227642901404155, 0.41565180151942166, 0.40694473349045074, 0.3896423085821366, 0.39023153318342924, 0.3645980537858826, 0.35747743354749373, 0.34742235310356995, 0.337745807902562], "accuracy": [0.32545238733291626, 0.6166952848434448, 0.7025492191314697, 0.7405890822410583, 0.755118191242218, 0.7817989587783813, 0.7972526550292969, 0.7998943328857422, 0.8185180425643921, 0.8214238286018372, 0.8293488025665283, 0.8341038227081299, 0.8462554216384888, 0.8482366800308228, 0.8486329317092896, 0.852331280708313, 0.857218325138092, 0.8661999702453613, 0.8672566413879395, 0.8745211958885193, 0.8739928603172302], "val_loss": [0.8536815813609532, 0.6067849057061332, 0.5410046747752598, 0.48186876092638287, 0.4474667140415737, 0.42658828837530954, 0.40253637518201557, 0.39034412588391987, 0.3885066338947841, 0.3651039089475359, 0.35683081831250874, 0.34368631669453215, 0.3441246918269566, 0.3412258880478995, 0.3354297195162092, 0.32062123503003803, 0.31858543838773457, 0.32401988336018156, 0.31852986982890535, 0.3122868963650295, 0.32296620096479145], "val_accuracy": [0.6056666374206543, 0.7276666760444641, 0.7590000033378601, 0.7876666784286499, 0.8096666932106018, 0.8236666917800903, 0.8343333601951599, 0.8306666612625122, 0.8420000076293945, 0.8453333377838135, 0.8510000109672546, 0.8573333621025085, 0.8560000061988831, 0.8550000190734863, 0.8633333444595337, 0.8663333058357239, 0.8659999966621399, 0.8656666874885559, 0.8656666874885559, 0.8663333058357239, 0.8646666407585144]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 4, 3, 2, 6, 1, 0, 4, 4, 2, 1, 0, 8, 3, 0, 1, 8, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [69, 40, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 0, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8231428861618042, "mapping_values": [1, 5, 5, 2, 3, 1, 4, 4, 2, 2, 1, 10, 6, 5, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(alpha, alpha), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, grad))), sigma)), sigma)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.9943433173690663, 1.0929490620937834, 0.7948872668002149, 0.703658314515508, 0.6495057054325543, 0.5891301219040739, 0.556324879475368, 0.5266864420857176, 0.4996572699623652, 0.47690408344927593, 0.464274481578573, 0.4448708792435668, 0.4183348136657674, 0.41625331664412896, 0.39905257685041823, 0.38810265416939027, 0.3800046502236976, 0.3550594984469491, 0.34955431838801443, 0.3453667824609389, 0.32583348675253465, 0.3197532720915976, 0.3104305142668874, 0.3030155638874703, 0.29028850957985486, 0.28822602788061435, 0.26758504139827527, 0.2680376054092468, 0.2718720608332437, 0.25859667017333593, 0.2499935063097408], "accuracy": [0.3259807229042053, 0.6166952848434448, 0.6993792057037354, 0.7428345084190369, 0.757099449634552, 0.7795535326004028, 0.7924976944923401, 0.8045172095298767, 0.8204993009567261, 0.8232730031013489, 0.8267071843147278, 0.8334434032440186, 0.8482366800308228, 0.8490291833877563, 0.852859616279602, 0.852331280708313, 0.8652753829956055, 0.8672566413879395, 0.8701624870300293, 0.8747853636741638, 0.8804649114608765, 0.8815215826034546, 0.886672854423523, 0.8829745054244995, 0.8857482671737671, 0.8905032277107239, 0.89988112449646, 0.8985602855682373, 0.8980319499969482, 0.9031832218170166, 0.9029190540313721], "val_loss": [0.8462236608777728, 0.6026332889284406, 0.5371341364724296, 0.4896085432597569, 0.4469655922480992, 0.42758952719824656, 0.4045058914593288, 0.38583679710115704, 0.3783345477921622, 0.36643305846623014, 0.35767221450805664, 0.3442103181566511, 0.34624808175223215, 0.3404868926320757, 0.3387771419116429, 0.3200729063579014, 0.32682885442461285, 0.32205077580043245, 0.3207470008305141, 0.310482919216156, 0.31190729992730276, 0.31635905163628714, 0.3044737662587847, 0.30832102469035555, 0.3120368378502982, 0.30059114524296354, 0.30249470472335815, 0.32760846614837646, 0.3260342904499599, 0.3095764177186148, 0.2985001632145473], "val_accuracy": [0.6173333525657654, 0.722000002861023, 0.7693333625793457, 0.7833333611488342, 0.8096666932106018, 0.8216666579246521, 0.8363333344459534, 0.8366666436195374, 0.8463333249092102, 0.843999981880188, 0.8460000157356262, 0.859333336353302, 0.8556666374206543, 0.8569999933242798, 0.859000027179718, 0.8669999837875366, 0.8616666793823242, 0.8656666874885559, 0.8666666746139526, 0.871666669845581, 0.8709999918937683, 0.8686666488647461, 0.8706666827201843, 0.8709999918937683, 0.8740000128746033, 0.8799999952316284, 0.878000020980835, 0.8686666488647461, 0.8610000014305115, 0.8709999918937683, 0.8773333430290222]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 6, 7, 8, 6, 2, 8, 4, 6, 1, 0, 0, 2, 0, 1, 2, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 4, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 0, 6, 4, 1, 4, 8], [2, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.819428563117981, "mapping_values": [1, 13, 13, 7, 6, 1, 4, 4, 3, 1, 1, 10, 6, 5, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(alpha)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.negative(sigma)))), tf.math.add(sigma, beta))))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.994343398474211, 1.093050782446848, 0.7951630975639249, 0.7041293163703276, 0.6492345813101372, 0.5876968891046555, 0.5541230237337545, 0.5254651224136101, 0.49885507285587066, 0.4820199438396966, 0.461869841533771, 0.44757403942887114, 0.4176438127518519, 0.41211872078550177, 0.3975330089037964, 0.3854739298484801, 0.3801710026698137, 0.3592045023779528, 0.35384441005035777, 0.3474946836312969, 0.33427542074875133], "accuracy": [0.3259807229042053, 0.6166952848434448, 0.7008321285247803, 0.7417778372764587, 0.7559106945991516, 0.7803460359573364, 0.7950072884559631, 0.8034605979919434, 0.8207634687423706, 0.8183859586715698, 0.8302733898162842, 0.8327829837799072, 0.850350022315979, 0.8516708612442017, 0.8527275323867798, 0.854708731174469, 0.8621054291725159, 0.8647470474243164, 0.8683133125305176, 0.8745211958885193, 0.8774270415306091], "val_loss": [0.8462248870304653, 0.6020701272147042, 0.539171542440142, 0.4864826032093593, 0.44822585582733154, 0.42730447224208284, 0.4028106927871704, 0.38801825046539307, 0.38241168430873324, 0.3677141155515398, 0.35671466588974, 0.3425239494868687, 0.34423907314028057, 0.3353455662727356, 0.3352690168789455, 0.3176217419760568, 0.31847528900418964, 0.3257438029561724, 0.3179082529885428, 0.31156986951828003, 0.3161264147077288], "val_accuracy": [0.6173333525657654, 0.722000002861023, 0.7646666765213013, 0.7850000262260437, 0.8076666593551636, 0.8196666836738586, 0.8346666693687439, 0.8339999914169312, 0.8413333296775818, 0.8403333425521851, 0.8493333458900452, 0.8600000143051147, 0.8519999980926514, 0.859666645526886, 0.859333336353302, 0.8683333396911621, 0.8650000095367432, 0.862333357334137, 0.8673333525657654, 0.8683333396911621, 0.8679999709129333]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 3, 3, 2, 6, 6, 0, 4, 4, 2, 1, 1, 2, 5, 0, 1, 5, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 2, 2, 2, 2, 2, 1, 0, 2, 0, 2, 0, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [54, 40, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 0, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.7882857322692871, "mapping_values": [1, 39, 39, 22, 17, 4, 4, 4, 3, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))))), alpha)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.1874457145049004, 1.545694003991951, 1.2455331140962087, 0.9967732934856679, 0.9799313198117185, 0.8428482591924792, 0.8265781996744876, 0.7903539528070171, 0.7512100443643522, 0.7238343858825942, 0.6999866898820983, 0.7235057225332536, 0.6799931827631955, 0.6767373833406273, 0.6577881109665698, 0.644553399270221, 0.6304755685367541, 0.6441211314280713, 0.6235827927056589, 0.6336904459027346, 0.6100651382486724, 0.6111179674463721, 0.577207505262098, 0.5814459171466477, 0.5869331916545943, 0.6120184812295738, 0.5643032914800824, 0.5631169083332263], "accuracy": [0.2723550498485565, 0.49451854825019836, 0.5616167187690735, 0.6387531161308289, 0.6338660717010498, 0.694360077381134, 0.6919825673103333, 0.7058512568473816, 0.7269845604896545, 0.7339849472045898, 0.7423061728477478, 0.7226257920265198, 0.7449478507041931, 0.7401928305625916, 0.7504953145980835, 0.7565711140632629, 0.7637035846710205, 0.7535332441329956, 0.7651565074920654, 0.7600052952766418, 0.7667415142059326, 0.761590301990509, 0.7843085527420044, 0.7827235460281372, 0.7807422876358032, 0.770439863204956, 0.7917051911354065, 0.7924976944923401], "val_loss": [1.5727037702287947, 1.0219749041966029, 0.8095559562955584, 0.6847231047494071, 0.6436702353613717, 0.5834142139979771, 0.5786810432161603, 0.6034706149782453, 0.5413909469332013, 0.556729759488787, 0.5345727205276489, 0.5090891804013934, 0.5073102712631226, 0.4996184621538435, 0.4942075184413365, 0.4784388542175293, 0.4983918326241629, 0.47673663071223665, 0.5050842251096453, 0.5089492797851562, 0.4615965059825352, 0.45550460474831717, 0.44339793069022043, 0.476197498185294, 0.4683697053364345, 0.44525822571345736, 0.4361662609236581, 0.44792267254420687], "val_accuracy": [0.5130000114440918, 0.6079999804496765, 0.6273333430290222, 0.6830000281333923, 0.7303333282470703, 0.75, 0.7516666650772095, 0.7413333058357239, 0.7649999856948853, 0.7616666555404663, 0.7473333477973938, 0.7689999938011169, 0.7696666717529297, 0.7763333320617676, 0.7853333353996277, 0.7906666398048401, 0.7760000228881836, 0.7886666655540466, 0.7676666378974915, 0.7630000114440918, 0.8003333210945129, 0.7990000247955322, 0.8140000104904175, 0.7816666960716248, 0.800000011920929, 0.8119999766349792, 0.8080000281333923, 0.8009999990463257]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 6, 7, 8, 6, 2, 8, 4, 6, 1, 0, 0, 2, 0, 1, 2, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 0, 1, 2, 2, 2, 2, 0, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 4, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 0, 6, 4, 1, 4, 8], [7, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.7757142782211304, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 10, 7, 5, 2, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.negative(sigma)), tf.math.add(sigma, grad))), sigma)), tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.1599300893038618, 1.4017113952935254, 1.114720621325982, 0.9451437783656954, 0.8335596993614764, 0.79770585243114, 0.7603081612145471, 0.7348303529706377, 0.7051810862964186, 0.684790976074913, 0.6595975143042506, 0.6829193598007592, 0.6376938468917738, 0.641342427949108, 0.6190212039411532, 0.6258797307670109, 0.6062796780808317], "accuracy": [0.2852991819381714, 0.528992235660553, 0.6133931875228882, 0.6515651941299438, 0.6905296444892883, 0.7058512568473816, 0.7176066637039185, 0.7226257920265198, 0.7382115721702576, 0.7446836829185486, 0.7593448758125305, 0.7416457533836365, 0.763967752456665, 0.7560427784919739, 0.7680623531341553, 0.7648923397064209, 0.7732135653495789], "val_loss": [1.4387310232434953, 0.859991363116673, 0.6734144687652588, 0.6124898706163678, 0.5775824785232544, 0.5781913825443813, 0.6365583113261631, 0.5395251682826451, 0.5219106503895351, 0.5144491536276681, 0.5020559685570853, 0.4801939214978899, 0.4763955899647304, 0.4680703708103725, 0.4820506913321359, 0.4759457622255598, 0.4816136530467442], "val_accuracy": [0.528333306312561, 0.6729999780654907, 0.7153333425521851, 0.7316666841506958, 0.7476666569709778, 0.7393333315849304, 0.70333331823349, 0.7606666684150696, 0.7766666412353516, 0.7739999890327454, 0.7753333449363708, 0.7983333468437195, 0.7943333387374878, 0.7979999780654907, 0.7873333096504211, 0.7893333435058594, 0.7816666960716248]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [8, 4, 6, 7, 8, 6, 2, 9, 4, 6, 1, 0, 0, 2, 0, 1, 2, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 40, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 3, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 5, 6, 4, 1, 4, 8], [2, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.24685713648796082, "mapping_values": [1, 21, 21, 13, 8, 4, 7, 7, 4, 3, 2, 9, 5, 4, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), alpha))))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(alpha))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, beta))), sigma)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.1973544086967207, 2.1145213869631707, 3.028041287215473, 2.4404168750915103, 2.3971831892396733, 2.3322470721913806, 2.3526692968617184], "accuracy": [0.32624489068984985, 0.3043191134929657, 0.19019944965839386, 0.0952318087220192, 0.10315678268671036, 0.09932637959718704, 0.09985470771789551], "val_loss": [2.1792212894984653, 1.6370868682861328, 2.037966455732073, 2.0179978098188127, 2.003918307168143, 1.9898450034005302, 2.056147030421666], "val_accuracy": [0.32066667079925537, 0.3306666612625122, 0.09866666793823242, 0.10000000149011612, 0.10233332961797714, 0.09733333438634872, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 1, 3, 2, 6, 6, 0, 4, 4, 2, 1, 1, 2, 5, 0, 1, 5, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 1, 2, 0, 1, 0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 40, 44, 9, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [81, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 6, 6, 4, 1, 4, 8], [0, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10028571635484695, "mapping_values": [1, 9, 9, 4, 5, 1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [12.911932501857779, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.16933034360408783, 0.09826971590518951, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [20826.79854910714, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 8, 7, 8, 6, 2, 8, 4, 6, 1, 0, 0, 2, 0, 1, 2, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 4, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [2, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 0, 6, 4, 1, 4, 8], [2, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 0, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.sqrt(alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [676987.2811399207, 18837685.92418439, 92495482.16510369, 232437193.39286676, 457830531.6553173, 523977426.38355666], "accuracy": [0.09311848133802414, 0.09589222073554993, 0.09536388516426086, 0.10091137140989304, 0.09285431355237961, 0.09800554811954498], "val_loss": [2420704.0714285714, 16962914.85714286, 5621989.714285715, 3315851.714285714, 36404932.571428575, 2.7642137663705006], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [2, 4, 3, 2, 6, 6, 0, 4, 4, 5, 1, 2, 8, 4, 0, 1, 9, 2, 9, 6, 3, 6, 1, 2, 8, 3, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 1, 2, 2, 2, 1, 1, 0, 1, 1, 0, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 40, 44, 9, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [43, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 4, 0, 6, 6, 6, 4, 1, 4, 8], [2, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 47, 47, 28, 19, 4, 6, 6, 5, 1, 1, 6, 3, 3, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))))), grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(alpha, alpha))))))))), grad))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.negative(sigma)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 4, 6, 7, 8, 6, 2, 8, 4, 6, 1, 0, 0, 2, 0, 1, 2, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 40, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 0, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 6, 6, 4, 1, 4, 8], [2, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 7, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.negative(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, beta), sigma)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.8747295162042764e+26, 2.4434315521546077, 2.73691623986531, 3.7570378010409335, 5.749448661302862, 8.063478265030982], "accuracy": [0.06670188903808594, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0514136041913713, 2.1885878699166432, 2.7067366327558244, 4.140025275094168, 6.081680161612375, 8.095296859741211], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [5, 4, 6, 2, 8, 4, 2, 8, 1, 6, 1, 0, 0, 2, 0, 1, 2, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [83, 40, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [1, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [6, 4, 6, 6, 6, 6, 4, 1, 4, 8], [2, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 12, 9, 2, 4, 4, 3, 1, 1, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(alpha, alpha), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3036007392108875, 2.3040958712397313, 2.305377620164949, 2.306073610352141, 2.306866569415752, 2.308190498464159, 2.3087631687118457, 2.310967584248972, 2.3125148137263523, 2.314426034622031], "accuracy": [0.09285431355237961, 0.09840179979801178, 0.09774138033390045, 0.09338264167308807, 0.09906221181154251, 0.09734513610601425, 0.09826971590518951, 0.10328886657953262, 0.09787346422672272, 0.10011887550354004], "val_loss": [1.9737035206386022, 1.9741668019975935, 1.9749256542750768, 1.977050713130406, 1.9771642003740584, 1.9796205929347448, 1.9776026862008231, 1.979794706617083, 1.9799703189304896, 1.982715129852295], "val_accuracy": [0.10133333504199982, 0.10233332961797714, 0.10000000149011612, 0.09799999743700027, 0.10266666859388351, 0.09799999743700027, 0.10100000351667404, 0.10066666454076767, 0.10233332961797714, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 4, 6, 7, 8, 6, 2, 8, 4, 6, 1, 0, 0, 2, 0, 1, 2, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 0, 2, 2, 2, 2, 1, 0, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 40, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 6, 6, 4, 1, 4, 8], [0, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [0, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302222326494337, 2.30258725284979, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09985470771789551, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [4, 4, 3, 2, 6, 6, 0, 4, 4, 1, 1, 0, 8, 3, 0, 1, 8, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 1, 1, 0, 2, 0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 4, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 0, 6, 4, 1, 4, 8], [7, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [0, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 13, 11, 3, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, alpha))), tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))), grad), tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302222326494337, 2.30258725284979, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09985470771789551, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [4, 4, 3, 2, 6, 6, 0, 4, 4, 1, 1, 0, 8, 3, 0, 1, 8, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [3, 2, 0, 1, 2, 2, 2, 2, 0, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [38, 40, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [1, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3022890628494244, 2.3023192110692725, 2.302676671153723, 2.3027000027310027, 2.3026724120550592, 2.3030627361141915, 2.303527639747028, 2.304669410828759, 2.3075243288956426, 2.3136294465322598, 2.3286391872188843], "accuracy": [0.10711926966905594, 0.10342095047235489, 0.09826971590518951, 0.10170386731624603, 0.09985470771789551, 0.09932637959718704, 0.09787346422672272, 0.09998679161071777, 0.09919429570436478, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736671447753906, 1.9738562447684151, 1.9737437793186732, 1.9737847191946847, 1.9737673486982072, 1.9740996360778809, 1.974959100995745, 1.9764477866036552, 1.980121340070452, 1.990755353655134, 2.01131044115339], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.10000000149011612, 0.09866666793823242, 0.10000000149011612, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 1, 3, 2, 6, 6, 0, 4, 4, 2, 1, 1, 2, 5, 0, 1, 5, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 2, 2, 0, 2, 2, 1, 0, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [25, 61, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [8, 4, 6, 2, 6, 6, 4, 1, 4, 8], [0, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), grad)))), grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07634394615888596, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 4, 4, 9, 6, 6, 0, 4, 4, 0, 1, 2, 8, 3, 0, 1, 8, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 2, 0, 1, 0, 1, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [25, 61, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 6, 5, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [1, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [8, 4, 6, 2, 6, 6, 4, 1, 4, 8], [0, 3, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 7, 7, 4, 3, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 5, 3, 2, 6, 1, 0, 4, 4, 2, 1, 0, 8, 3, 0, 1, 8, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 0, 1, 0, 1, 2, 1, 0, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [69, 40, 73, 83, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [1, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 6, 6, 4, 1, 4, 8], [4, 4, 3, 3], [12, 97], [1, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 4, 4, 2, 2, 0, 4, 4, 2, 2, 1, 11, 7, 5, 2, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, grad))))), tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3019765019810445, 2.3015896682930723, 2.3036941267385647, 2.302912460515339, 2.3024472212511173, 2.3041865586636168], "accuracy": [0.09642054885625839, 0.09087307006120682, 0.08942015469074249, 0.08374059200286865, 0.09113723784685135, 0.08321225643157959], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 1, 3, 2, 6, 6, 0, 4, 4, 2, 1, 1, 2, 5, 0, 1, 5, 2, 9, 6, 3, 6, 1, 2, 1, 9, 4, 0, 6, 3, 2, 1, 3, 5, 3, 2, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 2, 2, 0, 2, 2, 1, 0, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [24, 98, 44, 9, 84, 93, 20, 27, 65, 70, 14, 89, 22], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [39, 81, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 4, 6, 6, 6, 6, 4, 1, 4, 8], [2, 3, 3, 3], [12, 97], [0, 0, 1, 1], [0, 5], [2, 3, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.03828571364283562, "mapping_values": [1, 18, 18, 9, 9, 2, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), grad))))))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.302004420195179, 2.301898999473029, 2.304821069324651, 2.3053464261280343, 2.3063684567610316, 2.3102074739498755], "accuracy": [0.09655263274908066, 0.08968432247638702, 0.08625016361474991, 0.07991018146276474, 0.08255184441804886, 0.07806102186441422], "val_loss": [1.970602308000837, 1.9710255350385393, 1.9718139512198312, 1.9729225294930595, 1.9742300169808524, 1.975766318184989], "val_accuracy": [0.046666666865348816, 0.04233333468437195, 0.035999998450279236, 0.029333332553505898, 0.02666666731238365, 0.02500000037252903]}}]