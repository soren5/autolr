[{"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 6, 8, 4, 0, 3, 0, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7699999809265137, "mapping_values": [1, 91, 91, 55, 36, 10, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 77, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))), tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, grad))))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), grad))))))), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, grad)))), tf.math.sqrt(tf.math.square(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3024824221120643, 2.2848396406764477, 2.257141010714969, 2.2119735386613777, 2.1427602538689645, 2.0267795516735747, 1.8404068599649785, 1.615390329139895, 1.4482722361294695, 1.3659050361654463, 1.335870891199325, 1.2019606015906121, 1.0550022389060234, 0.9411316313968437, 0.9117630831931702, 0.8805770187046644, 0.8658413848683598, 0.8237385185970024, 0.8184758842487408, 0.7996171986847317, 0.7847214360530618, 0.7725123774184999, 0.7649800806328322, 0.7440120408154277, 0.7359121112681147, 0.7052477091027288, 0.7031614861594152, 0.6987079673864586, 0.6889223783102175, 0.6688490183897274, 0.6649418534887402, 0.6627931516908336, 0.6532138514717132, 0.6473367074303985, 0.6337719684216514, 0.6369503368444572, 0.6262862477808298, 0.6218888049411609, 0.6183502606554526, 0.5999906517731562, 0.598786741979307, 0.5970732124096462, 0.5938129954964115, 0.5754968732056159, 0.5702833664132273, 0.5665086478589312, 0.5596880869480597, 0.5561806506893937, 0.5483438055339884, 0.5402557561662392, 0.537927394703064, 0.5272849390629875, 0.5260055843691989, 0.5274706787169334, 0.5258541785730677, 0.5131232842808906, 0.5108029085804742, 0.5016949565112079, 0.49626439295708147, 0.49544738017966355, 0.4962608426781756, 0.4885963239666336, 0.4829868460021172, 0.47289582563035476, 0.47093431295940447], "accuracy": [0.09245806187391281, 0.13353586196899414, 0.21529521048069, 0.2995641231536865, 0.3543785512447357, 0.39823007583618164, 0.41870296001434326, 0.4559503495693207, 0.4897635579109192, 0.5242372155189514, 0.5436534285545349, 0.583410382270813, 0.628582775592804, 0.6452252268791199, 0.657508909702301, 0.6787742972373962, 0.6787742972373962, 0.6950204968452454, 0.6886804699897766, 0.6909258961677551, 0.6927750706672668, 0.7018887996673584, 0.7103421092033386, 0.7173424959182739, 0.7231541275978088, 0.724210798740387, 0.7251353859901428, 0.7238145470619202, 0.7321357727050781, 0.7390040755271912, 0.7395324110984802, 0.7478536367416382, 0.7464007139205933, 0.752740740776062, 0.7573636174201965, 0.7604015469551086, 0.7586844563484192, 0.7630431652069092, 0.7611940503120422, 0.767930269241333, 0.7676661014556885, 0.7724210619926453, 0.7714964747428894, 0.7783648371696472, 0.7839123010635376, 0.7795535326004028, 0.7847048044204712, 0.789459764957428, 0.791441023349762, 0.7909126877784729, 0.7967243194580078, 0.7964601516723633, 0.8020076751708984, 0.8020076751708984, 0.8010830879211426, 0.7993659973144531, 0.8070268034934998, 0.8120459914207458, 0.8117818236351013, 0.8117818236351013, 0.8145555257797241, 0.8076872229576111, 0.8173292875289917, 0.8177255392074585, 0.8206313848495483], "val_loss": [1.9623938288007463, 1.9410510744367326, 1.90794004712786, 1.8591065406799316, 1.7764902796064104, 1.629910979952131, 1.3949696336473738, 1.1253488404410226, 0.9226424694061279, 0.823682154927935, 0.7504876681736538, 0.7422316414969308, 0.6672211715153286, 0.661937917981829, 0.6633058275495257, 0.6514018433434623, 0.6226450886045184, 0.5986800534384591, 0.5827290671212333, 0.57167158808027, 0.5671495710100446, 0.557571530342102, 0.5511047499520438, 0.5457713093076434, 0.5411970104490008, 0.5343633549554008, 0.5307238953454154, 0.5225085020065308, 0.5143720763070243, 0.5114948579243251, 0.5048707723617554, 0.49658846855163574, 0.49219753061022076, 0.4881429842540196, 0.48234529154641287, 0.4785157101494925, 0.47482742582048687, 0.469279272215707, 0.4637085369655064, 0.45971437862941195, 0.45595095838819233, 0.4521486929484776, 0.44903928892953054, 0.44688723768506733, 0.4437171050480434, 0.4392092398234776, 0.43520213876451763, 0.4311938200678144, 0.4273568221500942, 0.42359418528420584, 0.41976278168814524, 0.4172404834202358, 0.4158165454864502, 0.41339763573237825, 0.4093666076660156, 0.40632419075284687, 0.40421009063720703, 0.4019104072025844, 0.39972834076200214, 0.39802677290780203, 0.39656593969890047, 0.3944297177450998, 0.3918053592954363, 0.38942613771983553, 0.38734763860702515], "val_accuracy": [0.1080000028014183, 0.3083333373069763, 0.3840000033378601, 0.43799999356269836, 0.46566668152809143, 0.49166667461395264, 0.543666660785675, 0.6100000143051147, 0.653333306312561, 0.6493333578109741, 0.6836666464805603, 0.6940000057220459, 0.7129999995231628, 0.7066666483879089, 0.7233333587646484, 0.7210000157356262, 0.7323333621025085, 0.7413333058357239, 0.7403333187103271, 0.7406666874885559, 0.7423333525657654, 0.746666669845581, 0.7526666522026062, 0.753333330154419, 0.7549999952316284, 0.7576666474342346, 0.7546666860580444, 0.7563333511352539, 0.7596666812896729, 0.7636666893959045, 0.768666684627533, 0.7756666541099548, 0.7799999713897705, 0.7796666622161865, 0.7876666784286499, 0.7873333096504211, 0.7900000214576721, 0.7906666398048401, 0.7926666736602783, 0.7910000085830688, 0.7923333048820496, 0.7946666479110718, 0.7950000166893005, 0.7979999780654907, 0.796999990940094, 0.7996666431427002, 0.8033333420753479, 0.8076666593551636, 0.8103333115577698, 0.8153333067893982, 0.8169999718666077, 0.8176666498184204, 0.8159999847412109, 0.8176666498184204, 0.8206666707992554, 0.8220000267028809, 0.8220000267028809, 0.8276666402816772, 0.82833331823349, 0.8333333134651184, 0.831333339214325, 0.8323333263397217, 0.8289999961853027, 0.8266666531562805, 0.8276666402816772]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [3, 2, 2, 3, 2, 7, 2, 1, 9, 3, 2, 3, 4, 0, 2, 0, 2, 6, 3, 4, 0, 3, 0, 2, 2, 3, 1, 3, 2, 2, 8, 6, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 0, 2, 3, 3, 2, 0, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 2, 3, 0, 2, 2, 2, 2, 1, 0, 3, 0, 3], [26, 18, 30, 63, 67, 22, 82, 44, 93, 18, 43, 52, 6], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7671428322792053, "mapping_values": [1, 93, 93, 55, 38, 13, 5, 5, 3, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)), tf.math.negative(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.negative(grad)))))))), tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))))), tf.math.square(tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), grad)), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302482390621036, 2.2848396541860994, 2.2571409477329114, 2.2119734576979426, 2.142759736597325, 2.02677735638672, 1.8404043856361176, 1.6153891352835017, 1.4482758209264792, 1.3658916663185103, 1.3358804108271147, 1.2019667355391674, 1.0550025622401618, 0.9411584035737119, 0.9118649631348962, 0.8806952632271838, 0.8658188353786537, 0.823808873231936, 0.8185057817133993, 0.799680680308155, 0.7850366371844061, 0.7727984585199594, 0.7651703956970811, 0.7441077581517622, 0.7360299431558109, 0.7050821141496925, 0.7039555559903403, 0.6990873979114507, 0.6887740869374717, 0.6691922864515893, 0.6657480701180245, 0.6637893567751616, 0.6539016534560675, 0.6478499913133761, 0.6340186227078073, 0.6371093421816243, 0.6263958607619354, 0.6215458281713155, 0.6183805014510527, 0.6004667723372533, 0.5995417668945077, 0.597582530462038, 0.5939034828026817, 0.5757152824558681, 0.5700834810757414, 0.5660502892506672, 0.5598841729559021, 0.5562333404946997, 0.5486348585492946, 0.540170007795312, 0.5382937784397118, 0.527544148137399, 0.5257778264244612, 0.5269171707760215, 0.5243068956632845, 0.512599030498028, 0.510334879415792, 0.5008880659148615, 0.49570559833374445, 0.49648835850807466, 0.4968236554977428, 0.4878365555183999, 0.4824072206812355, 0.47323150564146993, 0.47156391584988144, 0.47911523227615443], "accuracy": [0.09245806187391281, 0.13353586196899414, 0.21529521048069, 0.2995641231536865, 0.3543785512447357, 0.39823007583618164, 0.41870296001434326, 0.4559503495693207, 0.48989564180374146, 0.5239730477333069, 0.5436534285545349, 0.583410382270813, 0.6288469433784485, 0.6450931429862976, 0.657508909702301, 0.6778497099876404, 0.6790384650230408, 0.6940959095954895, 0.6882842183113098, 0.6903975605964661, 0.6936996579170227, 0.7021529674530029, 0.7113987803459167, 0.7172104120254517, 0.7232862114906311, 0.724739134311676, 0.7248712182044983, 0.7228899598121643, 0.7321357727050781, 0.7400607466697693, 0.7378153204917908, 0.7473253011703491, 0.7461365461349487, 0.7532690763473511, 0.7567031979560852, 0.761590301990509, 0.7585523724555969, 0.7638356685638428, 0.761590301990509, 0.7693831920623779, 0.7675340175628662, 0.7701756954193115, 0.7725531458854675, 0.778761088848114, 0.7835160493850708, 0.7788931727409363, 0.7835160493850708, 0.7893276810646057, 0.7915731072425842, 0.791441023349762, 0.7965922355651855, 0.7972526550292969, 0.8024039268493652, 0.8024039268493652, 0.8021397590637207, 0.7997622489929199, 0.8061022162437439, 0.8100647330284119, 0.8100647330284119, 0.809140145778656, 0.8141592741012573, 0.8082155585289001, 0.8195747137069702, 0.8177255392074585, 0.8197067975997925, 0.8216879963874817], "val_loss": [1.9623938288007463, 1.9410510744367326, 1.9079399790082658, 1.8591062682015556, 1.7764890534537179, 1.6299074717930384, 1.3949693952287947, 1.125352110181536, 0.9226299694606236, 0.8236627238137382, 0.7504908016749791, 0.7422154801232475, 0.6672421864100865, 0.661986129624503, 0.6633452517645699, 0.651449373790196, 0.6226718596049717, 0.5986847877502441, 0.5827949217387608, 0.5718120166233608, 0.5673467602048602, 0.5576025077274868, 0.5511122601372855, 0.5458662509918213, 0.5414391585758754, 0.5349576302937099, 0.5316372258322579, 0.5233145271028791, 0.5149418796811785, 0.5121651717594692, 0.505513208253043, 0.49698824541909353, 0.4926731586456299, 0.48831685951777865, 0.4823061398097447, 0.47852477005549837, 0.47486042976379395, 0.4695537771497454, 0.4640962226050241, 0.4603883538927351, 0.45667472907475065, 0.4524822746004377, 0.4491904633385794, 0.44684473105839323, 0.4434156247547695, 0.43900286299841745, 0.43536692006247385, 0.4313405326434544, 0.4273263897214617, 0.4237804753439767, 0.4200597490583147, 0.4173481549535479, 0.41573706695011686, 0.41298383474349976, 0.4088162013462612, 0.40615592684064594, 0.4039309450558254, 0.40132172618593487, 0.3995756081172398, 0.3980422190257481, 0.3959217497280666, 0.39343756437301636, 0.3912524325507028, 0.3890102335384914, 0.3865680353982108, 0.3840553079332624], "val_accuracy": [0.1080000028014183, 0.3083333373069763, 0.3840000033378601, 0.43799999356269836, 0.46566668152809143, 0.49166667461395264, 0.543666660785675, 0.6100000143051147, 0.653333306312561, 0.6493333578109741, 0.6836666464805603, 0.6940000057220459, 0.7129999995231628, 0.7070000171661377, 0.7233333587646484, 0.7200000286102295, 0.7329999804496765, 0.7423333525657654, 0.7396666407585144, 0.7393333315849304, 0.7423333525657654, 0.746999979019165, 0.7523333430290222, 0.7519999742507935, 0.7556666731834412, 0.7580000162124634, 0.7546666860580444, 0.7570000290870667, 0.7596666812896729, 0.762333333492279, 0.7693333625793457, 0.7746666669845581, 0.778333306312561, 0.7846666574478149, 0.7870000004768372, 0.7873333096504211, 0.7879999876022339, 0.7889999747276306, 0.7916666865348816, 0.7903333306312561, 0.7913333177566528, 0.7940000295639038, 0.796999990940094, 0.7973333597183228, 0.7993333339691162, 0.7993333339691162, 0.8003333210945129, 0.8063333630561829, 0.8106666803359985, 0.8143333196640015, 0.8169999718666077, 0.8203333616256714, 0.8169999718666077, 0.8196666836738586, 0.8206666707992554, 0.8193333148956299, 0.8199999928474426, 0.8263333439826965, 0.828000009059906, 0.8323333263397217, 0.8326666951179504, 0.8309999704360962, 0.8293333053588867, 0.8259999752044678, 0.8263333439826965, 0.8296666741371155]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [6, 2, 5, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1, 2], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [2, 4, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7611428499221802, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3024791972732594, 2.2847807999725402, 2.2568873956990423, 2.2112675300127544, 2.1409873505782424, 2.022437999450362, 1.831629126331101, 1.6057196564882847, 1.4460452240471668, 1.3724786714240937, 1.336705644463567, 1.1991435494389533, 1.0431039404749414, 0.9381450132497975, 0.9134571470793574, 0.884122157408624, 0.8671000208900023, 0.822502110998282, 0.8231317296618279, 0.8056381955170093, 0.7956605436322932, 0.7835832565861481, 0.7722052359514863, 0.7492189638414056, 0.7421175779415836, 0.7104175218249734, 0.7116456460077308, 0.7064014446891262, 0.6971970749742178, 0.678584735060664, 0.6738752602759354, 0.6685520263474615, 0.6601409855268068, 0.6530781880172646, 0.6413362208311474, 0.6430485645273909, 0.6316266073416631, 0.6266341905127175, 0.622131556733063, 0.6063666795270318, 0.6023393041185967, 0.5999997878087242, 0.5996082106979375, 0.579534242394389, 0.5745816494275109, 0.5677933059883722, 0.5621259149669294, 0.5555469818859052, 0.5482196300462127, 0.5406425802809388, 0.5402982697006954, 0.5298674019918843, 0.5286489752037745, 0.5280460442187936, 0.5255230494761716, 0.5136349415026478, 0.5103847371462771, 0.5009135243922901, 0.49758155433934176, 0.49798046123901174, 0.4968747642605202, 0.48670237457369614, 0.4783659454515314, 0.46738115562392485, 0.4705466217864632, 0.4756187379139762, 0.45712712838539216, 0.4536322371960631, 0.46023741806140744, 0.44535124355051514, 0.4508442397264678, 0.4544103154259398, 0.43930349031443827, 0.43467766427959137], "accuracy": [0.09245806187391281, 0.13353586196899414, 0.21555937826633453, 0.30101704597473145, 0.3547748029232025, 0.39902257919311523, 0.4193633496761322, 0.4571390748023987, 0.49108439683914185, 0.5239730477333069, 0.5449742674827576, 0.587769091129303, 0.6312243938446045, 0.6425835490226746, 0.6573768258094788, 0.6767930388450623, 0.678642213344574, 0.6942279934883118, 0.685510516166687, 0.6884163022041321, 0.6900013089179993, 0.7013604640960693, 0.7083608508110046, 0.7136441469192505, 0.7182670831680298, 0.722757875919342, 0.7176066637039185, 0.7209087014198303, 0.7294940948486328, 0.7351737022399902, 0.7342491149902344, 0.7441553473472595, 0.7436270117759705, 0.7512878179550171, 0.7515519857406616, 0.7567031979560852, 0.7543256878852844, 0.7606657147407532, 0.7622507214546204, 0.7644960880279541, 0.7675340175628662, 0.7684586048126221, 0.7696473598480225, 0.7771760821342468, 0.7778365015983582, 0.7808743715286255, 0.7836481332778931, 0.789988100528717, 0.7891955971717834, 0.7913089394569397, 0.7921014428138733, 0.7964601516723633, 0.8009510040283203, 0.800818920135498, 0.8005547523498535, 0.7996301651000977, 0.8078193068504333, 0.81112140417099, 0.8053097128868103, 0.8107251524925232, 0.8131026029586792, 0.8127063512802124, 0.8187822103500366, 0.8216879963874817, 0.8198388814926147, 0.8189142942428589, 0.8252542614936829, 0.8252542614936829, 0.8281601071357727, 0.8329150676727295, 0.8301413059234619, 0.8300092220306396, 0.8363492488861084, 0.8408400416374207], "val_loss": [1.962376253945487, 1.9409209660121374, 1.907538754599435, 1.8580938066755022, 1.773850440979004, 1.6233516420636858, 1.3818812710898263, 1.1095033713749476, 0.9108385699135917, 0.8220417329243251, 0.7499888283865792, 0.7410436357770648, 0.6620454958506993, 0.6657693726675851, 0.6681480067116874, 0.6549419505255563, 0.6207889999662127, 0.5974172524043492, 0.5840146200997489, 0.5756844452449253, 0.5703164679663522, 0.5602593421936035, 0.5532229116984776, 0.5476581028529576, 0.5431937660489764, 0.5385391541889736, 0.5349063873291016, 0.5248026507241386, 0.5174293007169452, 0.5143413032804217, 0.5060115712029594, 0.4977719613483974, 0.4943094934735979, 0.4905737979071481, 0.48429099151066374, 0.47965824604034424, 0.47557406766074045, 0.4704094444002424, 0.465683000428336, 0.46247286455971853, 0.4595837082181658, 0.45627449240003315, 0.4525214263371059, 0.4494423525674002, 0.4462684392929077, 0.4414582678249904, 0.4364165152822222, 0.4309104255267552, 0.4263001935822623, 0.42263045481273104, 0.41893028361456736, 0.4158747281347002, 0.41384669712611605, 0.41106253010886057, 0.4075179270335606, 0.4053098474230085, 0.4032244256564549, 0.4010593295097351, 0.3992387482098171, 0.3968904273850577, 0.39411403451647076, 0.3915786828313555, 0.389493533543178, 0.38713676588875906, 0.3847142628261021, 0.38241225481033325, 0.38022508791514803, 0.3781853829111372, 0.37675757919039043, 0.3761985642569406, 0.3758413280759539, 0.3743840200560434, 0.3724184717450823, 0.3710233654294695], "val_accuracy": [0.1080000028014183, 0.3089999854564667, 0.38600000739097595, 0.43799999356269836, 0.4663333296775818, 0.492333322763443, 0.5456666946411133, 0.6150000095367432, 0.6549999713897705, 0.640666663646698, 0.6859999895095825, 0.6953333616256714, 0.718999981880188, 0.7016666531562805, 0.7213333249092102, 0.7210000157356262, 0.7329999804496765, 0.7400000095367432, 0.737666666507721, 0.7379999756813049, 0.7403333187103271, 0.7463333606719971, 0.7493333220481873, 0.753000020980835, 0.7540000081062317, 0.7546666860580444, 0.7526666522026062, 0.7586666941642761, 0.7616666555404663, 0.765999972820282, 0.7730000019073486, 0.7770000100135803, 0.7743333578109741, 0.7760000228881836, 0.7816666960716248, 0.7836666703224182, 0.7860000133514404, 0.7879999876022339, 0.7886666655540466, 0.7879999876022339, 0.7903333306312561, 0.7923333048820496, 0.7953333258628845, 0.7986666560173035, 0.7976666688919067, 0.79666668176651, 0.8019999861717224, 0.8069999814033508, 0.8103333115577698, 0.809333324432373, 0.8136666417121887, 0.8186666369438171, 0.8180000185966492, 0.8176666498184204, 0.8183333277702332, 0.8220000267028809, 0.8213333487510681, 0.8226666450500488, 0.8266666531562805, 0.8273333311080933, 0.828000009059906, 0.8299999833106995, 0.8303333520889282, 0.8323333263397217, 0.8343333601951599, 0.8386666774749756, 0.8403333425521851, 0.8420000076293945, 0.8456666469573975, 0.8433333039283752, 0.8416666388511658, 0.8403333425521851, 0.8396666646003723, 0.840666651725769]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [90, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7608571648597717, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3024791972732594, 2.2847808134821914, 2.2568874136804196, 2.211267592994812, 2.140987319087214, 2.022438028705528, 1.8316296571123916, 1.605724183969242, 1.4460394485295016, 1.3724416895092848, 1.3366862472652081, 1.1991642611043454, 1.04310929215485, 0.9381304944999119, 0.9134888913668914, 0.8842339187943152, 0.867196818817372, 0.8226016299867234, 0.8230831561197521, 0.8055765288239221, 0.7955909549300351, 0.7833910126806392, 0.7719628744200315, 0.749046995576504, 0.7422730227849424, 0.7104082733900509, 0.7117977547308615, 0.7065822154681097, 0.6973382551215659, 0.6787981481883409, 0.6741785399351043, 0.6688696038312034, 0.6604413591387281, 0.653413006988861, 0.641632619243902, 0.6434365108170294, 0.6320037067511204, 0.6265999358784584, 0.6220433737355894, 0.6060886258509621, 0.6022031782734995, 0.6002279882024166, 0.6002911689054413, 0.5800852618354769, 0.5752136387986876, 0.568014215681421, 0.5621726885447806, 0.555740094369098, 0.5483064919792823, 0.5403693980544613, 0.5403428792544108, 0.5298505354362189, 0.5286034997884765, 0.5280505771004623, 0.5255607256343289, 0.5135718416134758, 0.5100141290298243, 0.5007664009785026, 0.49807153656939, 0.4980577784223233, 0.49637672719607784, 0.48694896865687776, 0.47869116665822264, 0.4673560166623472, 0.47023928324859127, 0.4757464820596095, 0.4570405390268587, 0.4538037221130363, 0.46106485301131, 0.4451420720400449, 0.45093909692865053, 0.45479512008394407, 0.43992415980624483, 0.4351642298589781], "accuracy": [0.09245806187391281, 0.13353586196899414, 0.21555937826633453, 0.30101704597473145, 0.3547748029232025, 0.39902257919311523, 0.4193633496761322, 0.4571390748023987, 0.49108439683914185, 0.5239730477333069, 0.5449742674827576, 0.5879011750221252, 0.6310923099517822, 0.6427156329154968, 0.6571126580238342, 0.6763967871665955, 0.6794346570968628, 0.693831741809845, 0.6852463483810425, 0.6885483860969543, 0.6889446377754211, 0.7017567157745361, 0.7080966830253601, 0.7140403985977173, 0.7195879220962524, 0.7217012047767639, 0.7186633348464966, 0.7206445932388306, 0.7294940948486328, 0.735569953918457, 0.7346453666687012, 0.7450799345970154, 0.7424382567405701, 0.7506273984909058, 0.7528728246688843, 0.7565711140632629, 0.7547219395637512, 0.7609298825263977, 0.7619865536689758, 0.76542067527771, 0.7672698497772217, 0.7681944370269775, 0.7685906887054443, 0.7771760821342468, 0.7786290049552917, 0.7791573405265808, 0.7821952104568481, 0.7898560166358948, 0.7893276810646057, 0.7907806038856506, 0.7910447716712952, 0.7972526550292969, 0.8029322624206543, 0.8010830879211426, 0.7994980812072754, 0.800818920135498, 0.8084797263145447, 0.8103289008140564, 0.8050455451011658, 0.8101968169212341, 0.8132346868515015, 0.8098005652427673, 0.8182538747787476, 0.8215559124946594, 0.8185180425643921, 0.8182538747787476, 0.8276317715644836, 0.8267071843147278, 0.8269713521003723, 0.8335754871368408, 0.8301413059234619, 0.8290846943855286, 0.8366134166717529, 0.8401796221733093], "val_loss": [1.962376322065081, 1.9409209660121374, 1.907538822719029, 1.8580938066755022, 1.77385037285941, 1.62335171018328, 1.3818839277539934, 1.1095092637198312, 0.9108210972377232, 0.8220071792602539, 0.7499699762889317, 0.7410270997456142, 0.6620164598737445, 0.6657560552869525, 0.6682100466319493, 0.6550592013767788, 0.6208980083465576, 0.5974683080400739, 0.5839998381478446, 0.5756249257496425, 0.570213965007237, 0.5601146561758858, 0.5530478954315186, 0.5476171289171491, 0.5432813678468976, 0.5388731275285993, 0.5351755108152118, 0.5249641452516828, 0.5177181448255267, 0.5145594562802996, 0.5062352589198521, 0.49816547121320454, 0.49477802004132954, 0.49112607751573834, 0.48489424160548616, 0.48023463998522076, 0.47600885799952913, 0.47060275077819824, 0.46572000639779226, 0.4623992783682687, 0.4595193692616054, 0.45620972769601004, 0.4522773197719029, 0.44915218012673513, 0.4458940880639212, 0.440931464944567, 0.4357079863548279, 0.43031453234808786, 0.42586622067860197, 0.4222980226789202, 0.41875085660389494, 0.41588495458875385, 0.4139901910509382, 0.41123368058885845, 0.4076809883117676, 0.4054206780024937, 0.40326492275510517, 0.4010354110172817, 0.39913885082517353, 0.3966975041798183, 0.39375231095722746, 0.39134070702961515, 0.3895473905972072, 0.38739088603428434, 0.38501869780676706, 0.38299763202667236, 0.38102671929768156, 0.37903335264750887, 0.3772910407611302, 0.3764733076095581, 0.37615025894982473, 0.37473301376615253, 0.3725369317190988, 0.37110703332083567], "val_accuracy": [0.1080000028014183, 0.3089999854564667, 0.38600000739097595, 0.43799999356269836, 0.4663333296775818, 0.492333322763443, 0.5456666946411133, 0.6146666407585144, 0.6546666622161865, 0.640333354473114, 0.6859999895095825, 0.6953333616256714, 0.718999981880188, 0.7016666531562805, 0.7210000157356262, 0.7210000157356262, 0.7333333492279053, 0.7396666407585144, 0.737666666507721, 0.7386666536331177, 0.7396666407585144, 0.7459999918937683, 0.7506666779518127, 0.753000020980835, 0.7540000081062317, 0.7549999952316284, 0.753333330154419, 0.7590000033378601, 0.7609999775886536, 0.765333354473114, 0.7710000276565552, 0.7766666412353516, 0.7743333578109741, 0.7760000228881836, 0.7823333144187927, 0.7833333611488342, 0.7856666445732117, 0.7883333563804626, 0.7886666655540466, 0.7893333435058594, 0.7923333048820496, 0.7926666736602783, 0.79666668176651, 0.7990000247955322, 0.796999990940094, 0.7960000038146973, 0.8026666641235352, 0.8073333501815796, 0.8103333115577698, 0.8096666932106018, 0.812666654586792, 0.8176666498184204, 0.8176666498184204, 0.8173333406448364, 0.8193333148956299, 0.8220000267028809, 0.8216666579246521, 0.8226666450500488, 0.8276666402816772, 0.828000009059906, 0.8323333263397217, 0.8289999961853027, 0.8303333520889282, 0.831333339214325, 0.8353333473205566, 0.8389999866485596, 0.8383333086967468, 0.8399999737739563, 0.8450000286102295, 0.843999981880188, 0.8399999737739563, 0.8396666646003723, 0.8403333425521851, 0.8420000076293945]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.5640000104904175, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(grad, beta)), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3040336076499384, 2.2994852206175116, 2.2986745678469993, 2.29586917811444, 2.2932665049203114, 2.291098819133581, 2.289271025720006, 2.286777518381611, 2.2867483853065673, 2.28346269881138, 2.2823496086879915, 2.280841293997532, 2.278808685987223, 2.2761697557860234, 2.2737746114004023, 2.2711309379889526, 2.2708222467067016, 2.2664215960570013, 2.2661686249696316, 2.265892309015768, 2.2622344150613753, 2.2604910128813502, 2.2573806795194056, 2.255402227765014, 2.252583979741536, 2.2505810023960167, 2.246863128423785, 2.247316207206796, 2.243960679655991, 2.2423255684794277, 2.2375010371822266, 2.236353920309409, 2.2336782833777558, 2.2307870865749915, 2.2281396431835367, 2.2258130765279303, 2.223263185289731, 2.221115101944139, 2.217528424353065, 2.2141151628505598, 2.2101503389701396, 2.207118244691374, 2.2049398078674085, 2.2015355962882537, 2.1979352180212404, 2.195650372066203, 2.1916673054327944, 2.185735721566721, 2.183539677258291, 2.178416940026264, 2.17561974120477, 2.1737807623352183, 2.1672661147963463, 2.1636450590789438, 2.1608221045637555, 2.154946449142736, 2.1508685488506254, 2.145690321213754, 2.1421576517447978, 2.13992973102035, 2.1318293339572234, 2.128078280029327, 2.1207592322952036, 2.116184163040032, 2.109412574308297, 2.1047387122793, 2.096527088650497, 2.094224497374763, 2.0880747282305068, 2.0821399627628105, 2.0754850010877557, 2.066066192676835, 2.0628782897939644, 2.0520921772213785, 2.0477587633192136, 2.0418057137508088, 2.0343743731962642, 2.0266591201069772, 2.021487144195109, 2.014898587306099, 2.0019011287767308, 1.995992465939394, 1.9902557971974753, 1.9823467196600706, 1.975294397003568, 1.9642480727688134, 1.9586672929173778, 1.950290818145766, 1.9373119271048749, 1.929684963964468, 1.9176132306919091, 1.9126869540220206, 1.9110195613445906, 1.897668338880059, 1.8827474796540544, 1.8731595581044862, 1.8688182107461615, 1.8604323583870452, 1.846097183438529, 1.8367328220716856], "accuracy": [0.08955223858356476, 0.09509972482919693, 0.10302469879388809, 0.10434553027153015, 0.10777968913316727, 0.11689341068267822, 0.12640337646007538, 0.12429005652666092, 0.12402588874101639, 0.14238542318344116, 0.14330999553203583, 0.14291374385356903, 0.1500462293624878, 0.1592920422554016, 0.16180160641670227, 0.17434948682785034, 0.175670325756073, 0.1818782240152359, 0.18372738361358643, 0.18835029006004333, 0.19178444147109985, 0.1982565075159073, 0.20697398483753204, 0.21384228765964508, 0.21674811840057373, 0.22559767961502075, 0.23484347760677338, 0.2285034954547882, 0.2362964004278183, 0.23893804848194122, 0.24805177748203278, 0.2550521790981293, 0.2596750855445862, 0.25742965936660767, 0.2728833854198456, 0.27077004313468933, 0.26984545588493347, 0.2739400267601013, 0.2829216718673706, 0.287280410528183, 0.2883370816707611, 0.301281213760376, 0.29362040758132935, 0.30207371711730957, 0.30762118101119995, 0.31145158410072327, 0.30762118101119995, 0.32320696115493774, 0.3292827904224396, 0.32518821954727173, 0.33245277404785156, 0.33007529377937317, 0.33641526103019714, 0.3407739996910095, 0.3401135802268982, 0.349359393119812, 0.3391890227794647, 0.3494914770126343, 0.3571522831916809, 0.3473781645298004, 0.361378937959671, 0.3597939610481262, 0.36322811245918274, 0.36745476722717285, 0.3689076602458954, 0.3749834895133972, 0.3875313699245453, 0.3855501115322113, 0.38422930240631104, 0.392550528049469, 0.39189010858535767, 0.3955884277820587, 0.3943996727466583, 0.4011359214782715, 0.39928674697875977, 0.3979659080505371, 0.39387133717536926, 0.3971734344959259, 0.4039096534252167, 0.4093250632286072, 0.4167217016220093, 0.41104212403297424, 0.4171179533004761, 0.42187294363975525, 0.421740859746933, 0.42108044028282166, 0.43085458874702454, 0.4267600178718567, 0.4290054142475128, 0.4345529079437256, 0.43891164660453796, 0.43587371706962585, 0.43111875653266907, 0.4349491596221924, 0.44604411721229553, 0.445779949426651, 0.4465724527835846, 0.4415532946586609, 0.45779949426651, 0.4620261490345001], "val_loss": [1.9686574935913086, 1.9668129512241908, 1.9649974959237235, 1.963172095162528, 1.9613471031188965, 1.9595460210527693, 1.9577415330069405, 1.9559226036071777, 1.9541163444519043, 1.9522817475455148, 1.950486387525286, 1.9486958639962333, 1.9468681471688407, 1.9450215612139021, 1.9431703431265694, 1.9413149016244071, 1.9394494465419225, 1.9375660078866142, 1.9356438773018974, 1.9337244715009416, 1.9317455291748047, 1.9297544615609306, 1.9277467727661133, 1.9256976672581263, 1.9236115046909876, 1.921499252319336, 1.9193189484732491, 1.9171491350446428, 1.9149321147373743, 1.9126839637756348, 1.9103471211024694, 1.9080025127955846, 1.9056101526532854, 1.9031611170087541, 1.900679656437465, 1.8981259209769112, 1.895552635192871, 1.8929101399012975, 1.8902229581560408, 1.8874548503330775, 1.8845951897757394, 1.8816672733851842, 1.8786805016653878, 1.875619888305664, 1.872511863708496, 1.869309425354004, 1.866039412362235, 1.8626647676740373, 1.8592136246817452, 1.8556420462472099, 1.852015495300293, 1.848313535962786, 1.8444648470197404, 1.8405587332589286, 1.8365825244358607, 1.8325021607535226, 1.8283277239118303, 1.824016775403704, 1.8196355274745397, 1.815183435167585, 1.8105404717581612, 1.8058508464268275, 1.8009899684361048, 1.7960083825247628, 1.790922028677804, 1.7856830869402205, 1.7802723475864954, 1.7748546600341797, 1.7692954199654716, 1.7635799135480608, 1.757713862827846, 1.7516770362854004, 1.745572226388114, 1.7392432349068778, 1.7328292982918876, 1.7262889317103796, 1.7195957728794642, 1.7127724375043596, 1.70585298538208, 1.6988302980150496, 1.6915055343082972, 1.6841650009155273, 1.6766627516065324, 1.6690662247794015, 1.6613106727600098, 1.6534007276807512, 1.6453799520220076, 1.6371939863477434, 1.6288291726793562, 1.6203606128692627, 1.611771821975708, 1.603074278150286, 1.594393219266619, 1.5855005809238978, 1.5763777664729528, 1.5671921798161097, 1.5579336711338587, 1.5486316340310233, 1.5392131805419922, 1.5296738488333566], "val_accuracy": [0.05766666680574417, 0.07233333587646484, 0.08533333241939545, 0.0976666659116745, 0.11533333361148834, 0.1326666623353958, 0.14766666293144226, 0.16300000250339508, 0.18000000715255737, 0.19900000095367432, 0.22033333778381348, 0.2396666705608368, 0.2529999911785126, 0.2653333246707916, 0.28033334016799927, 0.29100000858306885, 0.3033333420753479, 0.3173333406448364, 0.33000001311302185, 0.3373333215713501, 0.35066667199134827, 0.3596666753292084, 0.36500000953674316, 0.36800000071525574, 0.37433332204818726, 0.38100001215934753, 0.38333332538604736, 0.3893333375453949, 0.39100000262260437, 0.3956666588783264, 0.4009999930858612, 0.4059999883174896, 0.4086666703224182, 0.414000004529953, 0.4176666736602783, 0.4193333387374878, 0.4243333339691162, 0.42933332920074463, 0.43299999833106995, 0.43666666746139526, 0.4410000145435333, 0.44433334469795227, 0.4440000057220459, 0.4463333189487457, 0.4493333399295807, 0.45266667008399963, 0.45399999618530273, 0.4586666524410248, 0.46166667342185974, 0.4646666646003723, 0.4690000116825104, 0.4703333377838135, 0.4713333249092102, 0.4753333330154419, 0.476666659116745, 0.47966668009757996, 0.48500001430511475, 0.4873333275318146, 0.48899999260902405, 0.49033331871032715, 0.49266666173934937, 0.49266666173934937, 0.49566665291786194, 0.4976666569709778, 0.5, 0.5026666522026062, 0.5040000081062317, 0.5056666731834412, 0.5063333511352539, 0.5076666474342346, 0.512333333492279, 0.5166666507720947, 0.518666684627533, 0.5196666717529297, 0.5230000019073486, 0.5266666412353516, 0.527999997138977, 0.5293333530426025, 0.531000018119812, 0.534333348274231, 0.5356666445732117, 0.5383333563804626, 0.5403333306312561, 0.5426666736602783, 0.5446666479110718, 0.5460000038146973, 0.5486666560173035, 0.5509999990463257, 0.5526666641235352, 0.5543333292007446, 0.5543333292007446, 0.5566666722297668, 0.5580000281333923, 0.5590000152587891, 0.5596666932106018, 0.5609999895095825, 0.5613333582878113, 0.5630000233650208, 0.5669999718666077, 0.5676666498184204]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [6, 2, 2, 3, 6, 9, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 2, 2, 0, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0], [26, 18, 62, 2, 57, 74, 34, 28, 94, 70, 36], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [4, 3], [52], [0, 0, 1, 1], [8, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10028571635484695, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.square(beta))", "other_info": {"loss": [2.3046084587143523, 2.300962068810675, 2.3006222298148127, 2.3001706453441013, 2.3009694183759244, 2.301687852565749, 2.3024420340488523, 2.3024473097409084, 2.3025670057872913], "accuracy": [0.08770307898521423, 0.09351472556591034, 0.1018359512090683, 0.0956280529499054, 0.09945846349000931, 0.09034473448991776, 0.07885351777076721, 0.08070268481969833, 0.07951393723487854], "val_loss": [1.9698904582432337, 1.969097682407924, 1.9694568089076452, 1.9712975365774972, 1.9727040018354143, 1.973238400050572, 1.9735420772007533, 1.9735860143389021, 1.9735610825674874], "val_accuracy": [0.054999999701976776, 0.07566666603088379, 0.09666666388511658, 0.11033333092927933, 0.1080000028014183, 0.09333333373069763, 0.07633333653211594, 0.07333333045244217, 0.08166666328907013]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 0, 3, 7, 3, 4, 0, 2, 0, 2, 6, 8, 4, 0, 3, 0, 2, 2, 3, 1, 8, 2, 2, 1, 1, 3, 1, 4, 3, 5, 5, 1, 3, 3, 9, 2, 0, 8, 0, 0, 4, 2, 6, 0, 8, 5, 0, 3], [1, 0, 2, 2, 3, 2, 0, 2, 0, 0, 2, 3, 2, 0, 3, 0, 2, 2, 0, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 12, 30, 2, 57, 98, 34, 45, 7, 11, 39, 83], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 2, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [1, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 83, 83, 49, 34, 12, 10, 10, 5, 5, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 92, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.subtract(tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.negative(grad))))))), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad))))))), tf.math.negative(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, grad)))))))))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad)), grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(grad, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [4, 2, 2, 3, 0, 7, 5, 3, 9, 3, 7, 5, 1, 0, 5, 0, 5, 4, 9, 3, 6, 1, 3, 1, 0, 0, 2, 2, 7, 4, 3, 7, 6, 7, 3, 5, 1, 1, 3, 8, 9], [1, 1, 2, 2, 2, 1, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 93, 74, 34, 28, 94, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 28, 19, 9, 3, 5, 5, 3, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.negative(alpha), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad)))))), grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.pow(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))))))))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [6, 2, 6, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [0, 1, 2, 3, 3, 2, 0, 2], [26, 18, 30], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [9, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 4, 5, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303009938192311, 2.302586560047156, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09245806187391281, 0.10038304328918457, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 9, 2, 7, 3, 4, 0, 2, 5, 2, 6, 8, 4, 5, 3, 2, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 8, 4, 2, 6, 0, 8, 5, 0, 3, 3, 0, 6, 7, 1, 4, 8], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3, 0, 1, 0, 1, 1], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70, 6, 8], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [1, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 103, 103, 62, 41, 12, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))))), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.negative(grad))), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), grad)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.negative(grad)))))))))))))))))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, alpha), grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, alpha))))), alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 2, 2, 3, 0, 7, 5, 3, 2, 3, 7, 1, 1, 0, 5, 0], [1, 1, 0, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 11, 10, 2, 6, 6, 4, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.square(tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [4, 2, 2, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [0, 1, 2, 3, 0, 2, 0, 2], [39, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 1, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 7, 6, 2, 5, 5, 2, 3, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.negative(grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309708557392171, 2.3404554303264606, 2.420762784476955, 2.6181241924957024, 3.4793442307430533, 2297.6710505547885, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.03751155734062195, 0.016642451286315918, 0.008981640450656414, 0.008057059720158577, 0.02945449762046337, 0.10236428678035736, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9872941289629256, 2.037058080945696, 2.1400892393929616, 2.4428444589887346, 4.709766660417829, 38095415588.57143, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.007666666526347399, 0.004666666500270367, 0.004333333112299442, 0.004666666500270367, 0.00800000037997961, 0.09799999743700027, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [4, 2, 2, 4, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [90, 18, 30], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [0, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [4, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 0, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.negative(grad)), tf.math.add(alpha, grad))))), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 8, 3, 0, 4, 2, 1, 9, 3, 6, 4, 4, 0, 2, 0, 2, 6, 8, 4, 0, 3, 0, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 1, 3, 1, 2, 0, 0, 1, 0, 2, 1, 3, 2, 2, 1, 2, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 41, 57, 74, 34, 65, 94, 98], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [43, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 87, 87, 54, 33, 7, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 79, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(alpha, tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)))))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.negative(alpha), tf.math.sqrt(grad)))))))), grad)))), tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.add(tf.math.add(alpha, tf.math.pow(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))))))))))), tf.math.negative(grad)))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), beta)), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [8, 2, 2, 3, 2, 7, 5, 3, 3, 3, 7, 1, 1, 0, 5, 0, 9, 2, 7, 7, 9, 9], [2, 1, 2, 2, 0, 1, 1, 0, 2, 2, 3, 2], [86, 18, 30, 21, 36], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 1, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 34, 34, 22, 12, 5, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.square(tf.math.multiply(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), grad)))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.math.square(tf.math.negative(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [6, 2, 2, 3, 6, 7, 5, 3, 0, 3, 7, 1, 1, 0, 5, 0, 5, 5, 7, 7, 3, 1, 5], [0, 1, 2, 3, 3, 2, 0, 2, 2, 1, 3, 3, 3, 1, 0, 1], [28, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [0, 1], [5, 26, 61, 4, 67]], "fitness": -0.09971428662538528, "mapping_values": [1, 39, 39, 23, 16, 3, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.negative(grad)))))))))))), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad))))))), grad)), tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.square(alpha))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3424019070664226, 2.7386237944846203, 3.9098781280986166, 5.989882083286179, 8.741412684776055, 12.276926818225897, 16.71186005462981], "accuracy": [0.09232597798109055, 0.10302469879388809, 0.10210011899471283, 0.09998679161071777, 0.09576013684272766, 0.1022322028875351, 0.10487385839223862], "val_loss": [2.0446594102042064, 2.4400340488978793, 3.361987522670201, 4.841485023498535, 6.834204401288714, 9.334357942853655, 12.365774427141462], "val_accuracy": [0.09700000286102295, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 2, 3, 1, 7, 5, 3, 2, 3, 7, 1, 1, 0, 5, 0], [0, 1, 2, 3, 2, 2, 0, 2, 3, 2, 2, 0, 0], [90, 96, 30, 94], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [76, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.09457142651081085, "mapping_values": [1, 26, 26, 13, 13, 4, 5, 5, 2, 3, 1, 2, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(grad, tf.math.add(alpha, grad)))), grad)))), tf.math.add(tf.math.square(grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3576406770659.6035, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12561088800430298, 0.10632677376270294, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10466666519641876, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [4, 2, 2, 3, 0, 7, 5, 3, 9, 3, 7, 1, 6, 0, 5, 0, 2, 5, 5, 5, 6, 9, 6, 2, 2, 4, 3, 8, 7, 0, 1, 1, 1, 8, 0, 6, 0, 1, 1, 0, 2, 1, 7, 0, 3, 2, 2, 5, 2, 6, 6], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 1, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [54, 6, 30, 2, 57, 74, 69, 28, 94, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 15, 15, 9, 6, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.304855419455455, 2.3023335376923915, 2.303497666837737, 2.3027445802977056, 2.3021194606708453, 2.301861676368668, 2.3020605150388294, 2.3016211271380485], "accuracy": [0.08757099509239197, 0.08836349099874496, 0.09166556596755981, 0.08915598690509796, 0.0870426595211029, 0.08836349099874496, 0.09576013684272766, 0.08809932321310043], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704884120396204, 1.9704879352024622, 1.9704865046909876, 1.9704836436680384, 1.9704784665788924, 1.9704702922276087], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [3, 2, 2, 3, 0, 4, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [3, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(beta), alpha)", "other_info": {"loss": [2.304855419455455, 2.3023335376923915, 2.303498053673535, 2.302746280624315, 2.3021246382368554, 2.301874977864326], "accuracy": [0.08757099509239197, 0.08836349099874496, 0.09166556596755981, 0.08915598690509796, 0.0870426595211029, 0.08836349099874496], "val_loss": [1.9704886163984026, 1.9704886845179967, 1.9704890932355608, 1.9704908643450056, 1.9704947471618652, 1.970503875187465], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.046666666865348816]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [6, 2, 2, 3, 6, 5, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0, 6, 1, 4, 2, 3, 3, 6, 3, 6, 2, 8, 3, 4, 5, 4, 2, 7, 1, 5, 4, 2, 3, 3, 4, 7, 5, 5, 1, 4, 8, 0, 4, 8, 4, 1, 7, 2, 6, 6, 8, 7, 0, 2, 5, 3, 8, 3, 9], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 1, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 0, 2, 1, 2, 3, 1, 3, 0, 0, 3, 2, 0, 0, 0, 2], [90, 18, 95, 34, 73, 4, 84, 38, 3, 23, 38, 58, 3, 16, 63], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 81, 81, 47, 34, 9, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, tf.math.multiply(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.square(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.multiply(tf.math.multiply(tf.math.pow(alpha, tf.math.add(grad, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), grad)))))))))))), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, alpha)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.304855419455455, 2.3023335376923915, 2.303497684819115, 2.30274501660591, 2.302120598725135, 2.3018648296598556], "accuracy": [0.08757099509239197, 0.08836349099874496, 0.09166556596755981, 0.08915598690509796, 0.0870426595211029, 0.08836349099874496], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}]