[{"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], [1, 3, 6, 8, 2, 8, 5, 0, 8, 1, 2, 2, 2, 2, 0, 0, 4, 8, 8, 0, 8, 2, 0, 6, 1, 3, 1, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 2, 0, 1, 2, 0, 1, 1, 2, 2, 2, 2, 3, 0, 1, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [86, 79, 13, 69, 32, 4, 94, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8431428670883179, "mapping_values": [1, 67, 67, 44, 23, 9, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.negative(tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.sqrt(grad))))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.pow(tf.math.multiply(alpha, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))))), alpha)))), tf.math.add(alpha, alpha)))))), tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8258774641120377, 1.2140551455552158, 0.8186350419316325, 0.6751298299633737, 0.6213137185600345, 0.5733279436334658, 0.5362647666812747, 0.5143747637064355, 0.48816190533838916, 0.470325136094943, 0.45033486373845566, 0.4366977131204551, 0.4180395956076273, 0.3974687880166628, 0.40992304445761635, 0.3814381384153597, 0.3670324914215452, 0.3597367292917353, 0.34665104483868453, 0.33440889555701586, 0.33427366186063745, 0.3224499360240603, 0.3176927168875354, 0.3156558124931843, 0.29143102463714166, 0.2847041619483742, 0.2809920922647992, 0.2784018233357451, 0.25604455147625954, 0.25234317678376084, 0.24332979945002167, 0.248138306804888, 0.23747111049389338, 0.2359066996509373, 0.23025725680752643, 0.2277856791425674, 0.22384757664201754], "accuracy": [0.37366265058517456, 0.561880886554718, 0.698718786239624, 0.7445515990257263, 0.7627789974212646, 0.7869502305984497, 0.8031964302062988, 0.8070268034934998, 0.8219521641731262, 0.8325188159942627, 0.8329150676727295, 0.8338396549224854, 0.8454629778862, 0.8529917001724243, 0.850350022315979, 0.8615770936012268, 0.8647470474243164, 0.8679170608520508, 0.8701624870300293, 0.8772949576377869, 0.8739928603172302, 0.8794082403182983, 0.8798044919967651, 0.8868049383163452, 0.8894465565681458, 0.8938053250312805, 0.8920882344245911, 0.8931449055671692, 0.9002773761749268, 0.9052965044975281, 0.9055606722831726, 0.9054285883903503, 0.9103156924247742, 0.9137498140335083, 0.9103156924247742, 0.9111081957817078, 0.9134856462478638], "val_loss": [1.1602066925593786, 0.6132232972553798, 0.4958885056631906, 0.4634526627404349, 0.43264807973589214, 0.4123064194406782, 0.4120346392904009, 0.3844962205205645, 0.38754317590168547, 0.3719443849154881, 0.358572040285383, 0.3425992556980678, 0.33445721013205393, 0.35031603063855854, 0.3393439309937613, 0.32417666060583933, 0.31913812671388897, 0.33012410572596956, 0.3108270338603428, 0.3129153166498457, 0.3105390667915344, 0.3199893321309771, 0.32085657119750977, 0.30744705881391254, 0.3214991092681885, 0.3112767849649702, 0.3204070159367153, 0.3012115699904306, 0.30670332057135447, 0.3094118407794407, 0.3059483936854771, 0.30605156081063406, 0.30946149144853863, 0.3145111884389605, 0.32163591044289724, 0.32667443581989836, 0.31984316451208933], "val_accuracy": [0.5236666798591614, 0.7483333349227905, 0.7786666750907898, 0.8019999861717224, 0.8086666464805603, 0.8289999961853027, 0.8209999799728394, 0.8389999866485596, 0.8383333086967468, 0.8389999866485596, 0.8476666808128357, 0.856333315372467, 0.8556666374206543, 0.8460000157356262, 0.8576666712760925, 0.8646666407585144, 0.8696666955947876, 0.8583333492279053, 0.8659999966621399, 0.8683333396911621, 0.8736666440963745, 0.8726666569709778, 0.8676666617393494, 0.875, 0.8646666407585144, 0.8693333268165588, 0.8706666827201843, 0.878333330154419, 0.878000020980835, 0.8733333349227905, 0.8740000128746033, 0.8790000081062317, 0.878000020980835, 0.8769999742507935, 0.8696666955947876, 0.871666669845581, 0.8730000257492065]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 3, 6, 8, 2, 8, 5, 9, 8, 1, 2, 2, 2, 2, 0, 0, 4, 8, 8, 0, 8, 2, 0, 6, 1, 3, 1, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 2, 2, 1, 2, 0, 1, 1, 2, 2, 2, 2, 3, 0, 1, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [2, 79, 17, 69, 32, 74, 20, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8371428847312927, "mapping_values": [1, 13, 13, 9, 4, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.square(grad))), tf.math.add(alpha, grad)))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(alpha))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8257581629316648, 1.2088250549493638, 0.814238229621088, 0.6730923383951722, 0.6210339253825157, 0.5724222277212515, 0.5404146083861515, 0.5104729770480397, 0.48651376087526055, 0.46774668006093323, 0.44456096638494463, 0.43568305248251177, 0.4183581711719726, 0.3981885382205173, 0.41022739920869966, 0.3866481103200828, 0.36361720316036267, 0.3530587234383388, 0.3440557069797967, 0.3296860843491419, 0.3304381322835525, 0.31623608188039637, 0.3146624423769156, 0.305053400613093, 0.2856076552946302, 0.2847102840169388, 0.28341447392616603, 0.28254932470215216, 0.2644820880691499, 0.25908155661367105, 0.252217820530019, 0.24619782903899512, 0.23627906160316195, 0.2308626889773112, 0.23643386133705005, 0.23993531000171717, 0.2284596796914996, 0.2057232864367381], "accuracy": [0.37339848279953003, 0.5630695819854736, 0.7012283802032471, 0.7448157668113708, 0.7592127919197083, 0.7889314293861389, 0.7998943328857422, 0.8095363974571228, 0.8215559124946594, 0.8321225643157959, 0.8364813327789307, 0.835160493850708, 0.8422929644584656, 0.8514066934585571, 0.846387505531311, 0.857218325138092, 0.8669924736022949, 0.8730682730674744, 0.8696341514587402, 0.8741249442100525, 0.8749174475669861, 0.8837670087814331, 0.8829745054244995, 0.8850878477096558, 0.8893144726753235, 0.8906353116035461, 0.8918240666389465, 0.893541157245636, 0.8986923694610596, 0.9014661312103271, 0.9043719172477722, 0.904768168926239, 0.9101836085319519, 0.9144102334976196, 0.9093911051750183, 0.9084665179252625, 0.9115044474601746, 0.9199577569961548], "val_loss": [1.1599017892565047, 0.6115854637963432, 0.49584223542894634, 0.46224125794001986, 0.43298756224768503, 0.4078356112752642, 0.404491126537323, 0.38085154976163593, 0.3843402692249843, 0.3677710550171988, 0.3612980672291347, 0.34768604380743845, 0.33703880650656565, 0.3542973739760263, 0.3442766155515398, 0.3270714282989502, 0.3190037522997175, 0.3313906363078526, 0.3107756887163435, 0.302522497517722, 0.31224617787769865, 0.3137383886745998, 0.32206382921763826, 0.30879827056612286, 0.3156938467706953, 0.32057305744716097, 0.3174830845424107, 0.30941927433013916, 0.30515036412647795, 0.302574132169996, 0.30851096766335623, 0.3021878855569022, 0.3051166278975351, 0.32053543840135845, 0.32205844776971, 0.3229034457887922, 0.30806625740868704, 0.3011352930750166], "val_accuracy": [0.5233333110809326, 0.7459999918937683, 0.7796666622161865, 0.8003333210945129, 0.8083333373069763, 0.8296666741371155, 0.8299999833106995, 0.843999981880188, 0.8403333425521851, 0.8420000076293945, 0.843999981880188, 0.8503333330154419, 0.8539999723434448, 0.8426666855812073, 0.8523333072662354, 0.8640000224113464, 0.8679999709129333, 0.8560000061988831, 0.8696666955947876, 0.8706666827201843, 0.871666669845581, 0.871999979019165, 0.8703333139419556, 0.878000020980835, 0.8640000224113464, 0.8676666617393494, 0.8636666536331177, 0.8693333268165588, 0.8790000081062317, 0.874666690826416, 0.8740000128746033, 0.8786666393280029, 0.8806666731834412, 0.874666690826416, 0.871666669845581, 0.8683333396911621, 0.8786666393280029, 0.8796666860580444]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 1, 5, 5, 2, 9, 4, 5, 2, 0, 2, 2, 6, 2, 2, 0, 0, 4, 8, 4, 9, 6, 6, 6, 2, 8, 1, 6, 2, 9, 8, 4, 8, 4, 4, 3, 0, 0, 2, 3, 3, 9, 8, 9, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 2], [1, 0, 2, 2, 2, 0, 0, 1, 1, 2, 2, 2, 0, 0, 2, 2, 2, 0, 1, 1, 2, 0, 0, 3, 2, 2, 1, 2, 0, 2, 2, 2, 2, 1, 2, 3], [86, 79, 13, 69, 32, 4, 94, 27, 65, 70, 91, 26, 38], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [1, 5, 0, 8, 0, 5, 4], [3, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8354285955429077, "mapping_values": [1, 68, 68, 46, 22, 12, 3, 3, 1, 2, 1, 3, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.square(tf.math.square(tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, alpha))), alpha))), tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, grad)), grad)), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.math.multiply(tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.sqrt(tf.math.negative(grad))))))))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, sigma), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8258049384777053, 1.2115872558223542, 0.8166335520806046, 0.6728545429448032, 0.6184640192966641, 0.573960692095892, 0.5365676721561665, 0.5151489674060918, 0.4880712616949065, 0.4688808316953619, 0.45396737630545836, 0.44023747641601585, 0.4201303940635898, 0.39909365098899335, 0.409743517160951, 0.3824739080016419, 0.3624904000086791, 0.3579957022359579, 0.3402997161836326, 0.3307664603715276, 0.32908215157942544, 0.31757957006584087, 0.31584354729275144, 0.30014953456534654, 0.28965766304960466, 0.2868085359506729, 0.2866821559964075, 0.27821090810365995, 0.26412518104982885], "accuracy": [0.37366265058517456, 0.5625412464141846, 0.6997754573822021, 0.7461365461349487, 0.7651565074920654, 0.7886672616004944, 0.8001585006713867, 0.8063663840293884, 0.8220842480659485, 0.8334434032440186, 0.8337075710296631, 0.8343679904937744, 0.843481719493866, 0.8524633646011353, 0.8444063067436218, 0.8578787446022034, 0.8669924736022949, 0.871879518032074, 0.8732003569602966, 0.8771628737449646, 0.8766345381736755, 0.8823140859603882, 0.8829745054244995, 0.887201189994812, 0.8903711438179016, 0.889578640460968, 0.8910315632820129, 0.8926165699958801, 0.8977677822113037], "val_loss": [1.1599544797624861, 0.6108898094722203, 0.4937980685915266, 0.4624985456466675, 0.433502869946616, 0.41007204566683086, 0.41031427894319805, 0.38508955921445576, 0.3848303897040231, 0.3747263806206839, 0.3610966375895909, 0.346369879586356, 0.34274327754974365, 0.35557524647031513, 0.3372764842850821, 0.3255727205957685, 0.31898692675999235, 0.3286572183881487, 0.31072730677468435, 0.31269402163369314, 0.3112269129071917, 0.32034007140568327, 0.3105426686150687, 0.3089901549475534, 0.32875633239746094, 0.3163709044456482, 0.311805043901716, 0.3052533950124468, 0.30579313210078646], "val_accuracy": [0.5230000019073486, 0.7486666440963745, 0.7799999713897705, 0.8033333420753479, 0.8130000233650208, 0.8289999961853027, 0.8180000185966492, 0.8396666646003723, 0.8403333425521851, 0.840666651725769, 0.8456666469573975, 0.8539999723434448, 0.8543333411216736, 0.8433333039283752, 0.856333315372467, 0.8640000224113464, 0.8669999837875366, 0.8619999885559082, 0.8686666488647461, 0.8700000047683716, 0.875, 0.8686666488647461, 0.874666690826416, 0.8799999952316284, 0.8606666922569275, 0.8673333525657654, 0.8709999918937683, 0.8740000128746033, 0.8796666860580444]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 3, 6, 5, 2, 3, 5, 2, 8, 1, 2, 2, 5, 0, 2, 0, 4, 8, 8, 0, 8, 2, 0, 6, 2, 3, 1, 6, 2, 9, 8, 4, 8, 4, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 2, 2, 2, 2, 0, 1, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [87, 90, 54, 33, 32, 74, 89, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8351428508758545, "mapping_values": [1, 22, 22, 12, 10, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.square(alpha), tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, grad)))), tf.math.add(alpha, grad)))), grad)), tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8257537861037894, 1.2102226638727813, 0.8166920173091029, 0.6734420407119129, 0.6199794441969356, 0.5708178116298701, 0.5380910650661294, 0.5113286859701653, 0.4861269475462383, 0.46855421827815985, 0.4529741675098574, 0.43646587916983115, 0.422010206295247, 0.39445178578196266, 0.41072509137158536, 0.3896522175453248, 0.36790977387915763, 0.35595892823414793, 0.3467622708257132, 0.33216455988974664, 0.32845364685197787, 0.32177869799807557, 0.3173177491333727, 0.3078070266088396, 0.2903688840893801, 0.2823414758503193, 0.29363693676966685, 0.28037062493990506, 0.26042538897047396, 0.2554435886254699, 0.2482151128100744, 0.2506948893434887, 0.2411575994046294, 0.2337489366893519, 0.23266178857239403, 0.24342469902732006, 0.22708429855527879], "accuracy": [0.37339848279953003, 0.5630695819854736, 0.700171709060669, 0.7460044622421265, 0.7626469135284424, 0.7901201844215393, 0.8030643463134766, 0.8050455451011658, 0.8197067975997925, 0.8345000743865967, 0.8315942287445068, 0.8333113193511963, 0.8432175517082214, 0.8553691506385803, 0.8465195894241333, 0.856689989566803, 0.8656716346740723, 0.8688416481018066, 0.8706908226013184, 0.8771628737449646, 0.8765024542808533, 0.8803328275680542, 0.8838990926742554, 0.8869370222091675, 0.8882578015327454, 0.8951261639595032, 0.885219931602478, 0.8927486538887024, 0.8980319499969482, 0.9052965044975281, 0.90423983335495, 0.9046360850334167, 0.9071456789970398, 0.9128252267837524, 0.9103156924247742, 0.908730685710907, 0.9105798602104187], "val_loss": [1.1599016189575195, 0.6111960581370762, 0.49657399313790457, 0.45926484039851595, 0.43055611848831177, 0.40507112230573383, 0.40832425015313284, 0.38210164649145945, 0.38441852160862516, 0.37419125863483976, 0.36899514709200176, 0.34723964759281706, 0.335843699319022, 0.36079088279179167, 0.34223209960120066, 0.32608953544071745, 0.32235628366470337, 0.3302732876368931, 0.3101748824119568, 0.3108323131288801, 0.3105665956224714, 0.31729974917003084, 0.31784301144736155, 0.30897633518491474, 0.32345413310187204, 0.3214291589600699, 0.31529444456100464, 0.30027436358588083, 0.30016922099249704, 0.3024309618132455, 0.3088945320674351, 0.29980088983263287, 0.3073827794619969, 0.3174999696867807, 0.3244981510298593, 0.3161264147077288, 0.321064225264958], "val_accuracy": [0.5233333110809326, 0.7473333477973938, 0.7766666412353516, 0.8066666722297668, 0.815666675567627, 0.8333333134651184, 0.8213333487510681, 0.8399999737739563, 0.8389999866485596, 0.8389999866485596, 0.8389999866485596, 0.8510000109672546, 0.8553333282470703, 0.843666672706604, 0.8533333539962769, 0.8659999966621399, 0.8659999966621399, 0.8600000143051147, 0.8679999709129333, 0.8706666827201843, 0.8669999837875366, 0.8696666955947876, 0.8706666827201843, 0.8743333220481873, 0.8600000143051147, 0.862333357334137, 0.8693333268165588, 0.8730000257492065, 0.8773333430290222, 0.8759999871253967, 0.8740000128746033, 0.8796666860580444, 0.878000020980835, 0.8763333559036255, 0.8683333396911621, 0.8696666955947876, 0.8726666569709778]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [3, 4, 3, 5, 2, 2, 2, 9, 3, 1, 2, 2, 1, 2, 2, 0, 2, 4, 8, 4, 8, 2, 0, 6, 2, 6, 1, 6, 2, 9, 8, 4, 8, 4, 4, 3, 0, 5, 2, 3, 9, 9, 9, 0, 8, 0, 7, 4, 2, 6, 0, 2, 5, 8, 3, 3, 9, 2, 9], [0, 1, 0, 1, 2, 0, 1, 1, 2, 2, 2, 2, 3, 0, 1, 2, 2, 0, 1, 1, 0, 0, 0, 0, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [2, 79, 32, 69, 32, 42, 72, 27, 65, 7, 63, 22, 58, 49], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8234285712242126, "mapping_values": [1, 68, 68, 42, 26, 13, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.multiply(tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(grad, grad)), tf.math.add(alpha, grad))))), tf.math.subtract(tf.math.add(alpha, grad), grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))), grad)), tf.math.pow(tf.math.sqrt(grad), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)))), tf.math.pow(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), grad))), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8257685122220997, 1.2089896347024862, 0.8132876634141158, 0.6723323554694141, 0.6190536946526702, 0.5729688916853816, 0.5382934697410292, 0.5139626367311625, 0.48608388249364903, 0.465658283905976, 0.45123712040051933, 0.4387065294813628, 0.4191303837686687, 0.3987271074038833, 0.40683041160069816, 0.3825627824358259, 0.36531735818305144, 0.3548026414020517, 0.35003159350376434, 0.3279493098025309, 0.3251647557785262, 0.32624632420871774, 0.31583775505334977, 0.3106212067826077, 0.28829417782074834, 0.27773040260668397, 0.28005675620973514], "accuracy": [0.37339848279953003, 0.563730001449585, 0.7005679607391357, 0.7456082701683044, 0.7621186375617981, 0.7885351777076721, 0.7979130744934082, 0.8064984679222107, 0.8219521641731262, 0.8338396549224854, 0.8337075710296631, 0.8338396549224854, 0.8437458872795105, 0.8535200357437134, 0.845859169960022, 0.8582749962806702, 0.8688416481018066, 0.8698983192443848, 0.8679170608520508, 0.8780874609947205, 0.8772949576377869, 0.8771628737449646, 0.8857482671737671, 0.885219931602478, 0.8928807377815247, 0.8952582478523254, 0.889578640460968], "val_loss": [1.1600044114249093, 0.6110927718026298, 0.49594620295933317, 0.46053826808929443, 0.43354317971638273, 0.40758040121623446, 0.41655674151011873, 0.3826718330383301, 0.38164243527821134, 0.36983693497521536, 0.360832827431815, 0.34269200904028757, 0.3350585869380406, 0.34991610050201416, 0.33019361325672697, 0.32665019375937326, 0.32202857732772827, 0.3315229756491525, 0.3115019031933376, 0.30700124161584036, 0.31475939069475445, 0.31366863421031405, 0.3255785277911595, 0.3080329043524606, 0.3171283858163016, 0.3158863527434213, 0.31837317773274015], "val_accuracy": [0.5233333110809326, 0.7459999918937683, 0.7766666412353516, 0.8040000200271606, 0.8063333630561829, 0.8299999833106995, 0.8140000104904175, 0.8423333168029785, 0.8383333086967468, 0.8416666388511658, 0.8453333377838135, 0.8550000190734863, 0.8566666841506958, 0.8460000157356262, 0.8576666712760925, 0.8676666617393494, 0.8663333058357239, 0.8573333621025085, 0.8679999709129333, 0.8683333396911621, 0.8643333315849304, 0.8743333220481873, 0.8690000176429749, 0.8736666440963745, 0.8629999756813049, 0.8700000047683716, 0.8653333187103271]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 4, 6, 8, 2, 6, 5, 0, 8, 1, 2, 2, 9, 2, 0, 0, 4, 8, 8, 0, 8, 2, 0, 6, 1, 3, 1, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 3, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 2, 0, 1, 2, 0, 1, 1, 2, 2, 1, 2, 3, 2, 1, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [86, 79, 13, 69, 32, 4, 94, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8214285969734192, "mapping_values": [1, 30, 30, 20, 10, 4, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.sqrt(alpha)), alpha)))), tf.math.add(alpha, grad)))))))))))))), tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8257511373776107, 1.2096763227310603, 0.8131077340832948, 0.6729904465262192, 0.6194015478004539, 0.5728031775466739, 0.5413998329581177, 0.5134698309761075, 0.48910196657115285, 0.4705022148224089, 0.456106979207529, 0.4360080486070746, 0.4219341248238422, 0.3979098857425349, 0.4093293056370261, 0.3906973799292784, 0.36502307397562517, 0.35551835612897403, 0.343868665821312, 0.33079911022689507, 0.32628561546695134, 0.32119735884093303, 0.32039845332635186, 0.31349947937585737, 0.29118476281580497, 0.28882847140808743, 0.28112893935286565, 0.2779641699883853, 0.25885673056441116, 0.2570847539956213, 0.2522123145460374, 0.24753724317886983, 0.23259022806330348, 0.2331585207745667, 0.22889490185073968, 0.2332765462277761, 0.22028233661210422, 0.21037782107708303, 0.2064780727975546, 0.20642225931443717, 0.19661035307520305, 0.18835760880738453, 0.18336096992503384], "accuracy": [0.37339848279953003, 0.5635979175567627, 0.7020208835601807, 0.7448157668113708, 0.763439416885376, 0.7890635132789612, 0.800290584564209, 0.807158887386322, 0.8185180425643921, 0.8321225643157959, 0.8310658931732178, 0.8335754871368408, 0.8445383906364441, 0.8556333184242249, 0.8426892161369324, 0.852859616279602, 0.8693699836730957, 0.8701624870300293, 0.8710870146751404, 0.8766345381736755, 0.8772949576377869, 0.8808611631393433, 0.8816536664962769, 0.8837670087814331, 0.8924844861030579, 0.8899748921394348, 0.8910315632820129, 0.8911636471748352, 0.8985602855682373, 0.9041078090667725, 0.9026548862457275, 0.906749427318573, 0.9103156924247742, 0.9162594079971313, 0.9121648669242859, 0.9128252267837524, 0.915070652961731, 0.9169198274612427, 0.9191652536392212, 0.9211464524269104, 0.9277506470680237, 0.9280148148536682, 0.9330339431762695], "val_loss": [1.159928492137364, 0.6110527174813407, 0.49577295780181885, 0.460411582674299, 0.4329197747366769, 0.404120853969029, 0.40799379348754883, 0.38201326983315603, 0.3894168564251491, 0.37476113012858797, 0.36615159681865145, 0.345133900642395, 0.3408313138144357, 0.35939273663929533, 0.3424909455435617, 0.32646808453968595, 0.3251936435699463, 0.33308959007263184, 0.31413203477859497, 0.30576337235314505, 0.31088924407958984, 0.3133223908288138, 0.32517675842557636, 0.30615051303591045, 0.32956469910485403, 0.31805960621152607, 0.31423345633915495, 0.3007001280784607, 0.3044527087892805, 0.2979950819696699, 0.30992195435932707, 0.30166942732674734, 0.30256534474236624, 0.3131476811000279, 0.31553695031574797, 0.3224620648792812, 0.32858613559177946, 0.30508744716644287, 0.3041279060500009, 0.31828990152903963, 0.31246925251824514, 0.3264805163655962, 0.32094693183898926], "val_accuracy": [0.5233333110809326, 0.7459999918937683, 0.7786666750907898, 0.8053333163261414, 0.8106666803359985, 0.8326666951179504, 0.8213333487510681, 0.8399999737739563, 0.8383333086967468, 0.8420000076293945, 0.8460000157356262, 0.8546666502952576, 0.8546666502952576, 0.846666693687439, 0.8556666374206543, 0.8659999966621399, 0.8693333268165588, 0.859333336353302, 0.8683333396911621, 0.874666690826416, 0.8726666569709778, 0.8740000128746033, 0.8686666488647461, 0.8756666779518127, 0.8610000014305115, 0.8673333525657654, 0.8683333396911621, 0.8730000257492065, 0.8796666860580444, 0.8786666393280029, 0.8733333349227905, 0.8776666522026062, 0.8813333511352539, 0.8786666393280029, 0.8706666827201843, 0.878333330154419, 0.8686666488647461, 0.8840000033378601, 0.8816666603088379, 0.8826666474342346, 0.8813333511352539, 0.8786666393280029, 0.8816666603088379]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [8, 4, 9, 6, 2, 5, 4, 9, 9, 1, 2, 5, 5, 2, 2, 0, 2, 4, 8, 4, 8, 4, 0, 6, 5, 3, 1, 6, 2, 9, 2, 4, 8, 4, 9, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 0, 0, 2, 0, 1, 1, 2, 2, 2, 2, 0, 0, 1, 2, 2, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [74, 20, 76, 32, 32, 74, 89, 27, 64, 70, 39], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [3, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8202857375144958, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8259260606425645, 1.2066640085185822, 0.8105971744630189, 0.6711833884986542, 0.6146080804900912, 0.5704917147993773, 0.5378639923583058, 0.5108180668265545, 0.4871902985186105, 0.4672726289101123, 0.44949077359280015, 0.43345305434213005, 0.4182766301953766, 0.4001527375564631, 0.409169546869122, 0.38421214897524586, 0.3631008977446621, 0.3584018045011182, 0.3424017573187081, 0.33253399268227674, 0.3219047719658232, 0.31055104813996465, 0.3215213997835465, 0.30999855489904665, 0.2829538532582571, 0.2817700709790885], "accuracy": [0.3735305666923523, 0.563730001449585, 0.7009642124176025, 0.7474573850631714, 0.765949010848999, 0.789459764957428, 0.8009510040283203, 0.8095363974571228, 0.8182538747787476, 0.8322546482086182, 0.8381983637809753, 0.8362171649932861, 0.8450667262077332, 0.8570862412452698, 0.8487650156021118, 0.8577466607093811, 0.86553955078125, 0.8669924736022949, 0.8730682730674744, 0.8757099509239197, 0.8780874609947205, 0.8882578015327454, 0.8835028409957886, 0.8820499181747437, 0.8927486538887024, 0.89552241563797], "val_loss": [1.1610713686261858, 0.6116146189825875, 0.4932541676930019, 0.4606841972896031, 0.4312123571123396, 0.40643231357846943, 0.4115398951939174, 0.3845361726624625, 0.38342325176511494, 0.3704843010221209, 0.3574033124106271, 0.349003221307482, 0.34272170066833496, 0.3511805960110256, 0.3488175868988037, 0.327562187399183, 0.32181971413748606, 0.32354311432157246, 0.3144051262310573, 0.3072806511606489, 0.30618856634412495, 0.32818647793361116, 0.3248356580734253, 0.30524037565503803, 0.32220412152154104, 0.3118309463773455], "val_accuracy": [0.5226666927337646, 0.7443333268165588, 0.781333327293396, 0.8006666898727417, 0.8116666674613953, 0.8323333263397217, 0.8186666369438171, 0.8456666469573975, 0.8426666855812073, 0.843666672706604, 0.8510000109672546, 0.8519999980926514, 0.8529999852180481, 0.8450000286102295, 0.846666693687439, 0.8640000224113464, 0.8659999966621399, 0.8616666793823242, 0.8643333315849304, 0.8673333525657654, 0.875, 0.8673333525657654, 0.8659999966621399, 0.8740000128746033, 0.8613333106040955, 0.8673333525657654]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 6, 8, 2, 8, 5, 0, 8, 1, 2, 2, 2, 2, 9, 4, 4, 8, 8, 0, 1, 2, 0, 6, 1, 3, 1, 6, 2, 0, 8, 8, 8, 2, 4, 3, 9, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 2, 1, 1, 2, 0, 1, 1, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 1, 1, 0, 0, 2, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [86, 79, 13, 69, 32, 4, 94, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.819428563117981, "mapping_values": [1, 40, 40, 25, 15, 4, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha)))))), tf.math.negative(tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.sqrt(alpha)), alpha))), tf.math.add(alpha, grad))), tf.math.negative(tf.math.add(alpha, grad)))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, grad)), grad)), tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8259200372747568, 1.2091638918849439, 0.816629334762663, 0.6739458065888885, 0.6189915137583192, 0.5710312225610479, 0.5384278727434315, 0.5142545997269826, 0.48866132774436166, 0.46771816938245586, 0.4575758961882684, 0.43707882190471814, 0.4178421200266478, 0.3973747134964464, 0.40749805693723395, 0.381964969321674, 0.36218584873389414, 0.35873583968068945, 0.3409418073375668, 0.3266404369771441, 0.3295244778333134, 0.3231098710223117, 0.31236982884471287, 0.30046746581930606, 0.2816670250347844, 0.27467832363883127, 0.28044896762463334, 0.2747316414520111, 0.2631129204258549, 0.2536150195662057, 0.25164956426371704, 0.2534356311174227, 0.2407034280147881, 0.23090632354122, 0.2271347998836651, 0.2334572983699751, 0.21849561316060698], "accuracy": [0.37366265058517456, 0.5638620853424072, 0.6989829540252686, 0.7470611333847046, 0.7637035846710205, 0.7891955971717834, 0.7973847389221191, 0.804649293422699, 0.8195747137069702, 0.833179235458374, 0.828820526599884, 0.835160493850708, 0.8436138033866882, 0.8561616539955139, 0.8481045961380005, 0.8588033318519592, 0.8685774803161621, 0.8692378997802734, 0.8741249442100525, 0.8771628737449646, 0.8766345381736755, 0.8782195448875427, 0.8878615498542786, 0.8899748921394348, 0.8947299122810364, 0.89552241563797, 0.8916919827461243, 0.8951261639595032, 0.8965790271759033, 0.9029190540313721, 0.9052965044975281, 0.9022586345672607, 0.9074098467826843, 0.9120327830314636, 0.913617730140686, 0.9095231890678406, 0.9183727502822876], "val_loss": [1.1584057126726424, 0.6149699858256749, 0.4953093188149588, 0.46083194868905203, 0.43152120283671785, 0.4070910130228315, 0.4110121301242283, 0.3867755276816232, 0.3811485597065517, 0.37765462909426006, 0.356908312865666, 0.3433998908315386, 0.3416828087397984, 0.35147547721862793, 0.3308296799659729, 0.3257240653038025, 0.32079282828739714, 0.32471524817602976, 0.306864721434457, 0.30930679185049875, 0.30944663286209106, 0.31545851060322355, 0.305313093321664, 0.3033465998513358, 0.3165319391659328, 0.31452931676592144, 0.31511018105915617, 0.3128553884369986, 0.29683869225638254, 0.3009694218635559, 0.3103920561926706, 0.29134076833724976, 0.30295168501990183, 0.30852000202451435, 0.3183204361370632, 0.30647410665239605, 0.32204404047557283], "val_accuracy": [0.5243333578109741, 0.7459999918937683, 0.7763333320617676, 0.8073333501815796, 0.8130000233650208, 0.82833331823349, 0.8199999928474426, 0.8413333296775818, 0.8403333425521851, 0.8366666436195374, 0.8473333120346069, 0.8519999980926514, 0.856333315372467, 0.8453333377838135, 0.8566666841506958, 0.8619999885559082, 0.8640000224113464, 0.8613333106040955, 0.8703333139419556, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.8733333349227905, 0.8793333172798157, 0.8659999966621399, 0.8659999966621399, 0.8613333106040955, 0.8683333396911621, 0.8799999952316284, 0.8736666440963745, 0.8736666440963745, 0.8813333511352539, 0.8809999823570251, 0.8776666522026062, 0.8703333139419556, 0.8786666393280029, 0.8709999918937683]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [6, 3, 6, 8, 2, 3, 5, 3, 8, 1, 2, 2, 5, 2, 2, 0, 4, 8, 8, 0, 8, 2, 0, 6, 2, 3, 1, 6, 2, 9, 8, 4, 8, 4, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 2, 2, 2, 0, 0, 1, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [87, 90, 54, 33, 32, 74, 89, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.817714273929596, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8257573763644928, 1.208358370089465, 0.813673487295013, 0.6718326587844534, 0.6202864813814074, 0.5726819639082488, 0.5413544730440406, 0.5148661448624565, 0.4847173474058893, 0.4678589208621107, 0.4428711121407608, 0.43923461968242816, 0.4219254230220068, 0.3972687746956994, 0.41198187533496883, 0.3900316669373795, 0.36933193857391766, 0.3586862073944796, 0.3453267454439702, 0.3315092105796828, 0.3336978394869312, 0.31967196047203716, 0.3161603677833337, 0.3141606394420478, 0.29042909706604086, 0.27848004223711187, 0.28542486954642293, 0.27982924554436484, 0.2580916361801849], "accuracy": [0.37339848279953003, 0.5641262531280518, 0.7004358768463135, 0.7465327978134155, 0.7601373791694641, 0.789459764957428, 0.8012151718139648, 0.8038568496704102, 0.8203672170639038, 0.8339717388153076, 0.8399154543876648, 0.8333113193511963, 0.8428213000297546, 0.8568220734596252, 0.8455950617790222, 0.8556333184242249, 0.8648791313171387, 0.871879518032074, 0.8714832663536072, 0.8766345381736755, 0.8758420348167419, 0.8802007436752319, 0.884691596031189, 0.8800686597824097, 0.8902390599250793, 0.8977677822113037, 0.889578640460968, 0.8927486538887024, 0.8989565372467041], "val_loss": [1.1598991666521346, 0.6112303563526699, 0.49541306495666504, 0.46192402499062674, 0.4319074494498117, 0.40946894884109497, 0.40682618958609446, 0.3833252787590027, 0.383583664894104, 0.3649470465523856, 0.3602711132594517, 0.3489391377993992, 0.3364646519933428, 0.3638338787215097, 0.3439600723130362, 0.32874657426561626, 0.32401437418801443, 0.33104567868368967, 0.3124311736651829, 0.31202541078839985, 0.31311036007744925, 0.3201540197644915, 0.3153244938169207, 0.30418392590114046, 0.31441103560583933, 0.31002862964357647, 0.31783359391348703, 0.30658953530447824, 0.3067762425967625], "val_accuracy": [0.5233333110809326, 0.7476666569709778, 0.7796666622161865, 0.8029999732971191, 0.8119999766349792, 0.8323333263397217, 0.8270000219345093, 0.8386666774749756, 0.8410000205039978, 0.8420000076293945, 0.846666693687439, 0.8529999852180481, 0.8560000061988831, 0.8393333554267883, 0.8516666889190674, 0.8640000224113464, 0.8659999966621399, 0.8569999933242798, 0.8690000176429749, 0.8706666827201843, 0.8740000128746033, 0.8703333139419556, 0.8686666488647461, 0.8756666779518127, 0.8659999966621399, 0.8686666488647461, 0.8653333187103271, 0.8723333477973938, 0.875333309173584]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [1, 3, 6, 8, 2, 8, 5, 0, 8, 1, 2, 2, 2, 2, 0, 0, 4, 8, 8, 0, 8, 2, 0, 6, 1, 3, 1, 6, 2, 0, 8, 8, 8, 2, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 2, 0, 1, 2, 0, 1, 1, 2, 2, 2, 2, 3, 0, 1, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [86, 79, 13, 69, 32, 4, 94, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.8162857294082642, "mapping_values": [1, 48, 48, 30, 18, 5, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.pow(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.add(alpha, alpha)))))))), grad), tf.math.add(alpha, grad))))))), tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8259606750145911, 1.2108780418829816, 0.813718709727131, 0.6717683064025927, 0.6184608564085854, 0.5729796328737972, 0.536551988403543, 0.5110133204320324, 0.4870758020662125, 0.46962678955609316, 0.44262145361439303, 0.43298220828523915, 0.4204636942031849, 0.39655586229638495, 0.4095808340652571, 0.3826242446615995, 0.3632829937330563, 0.3537347429558554, 0.34525864421652136, 0.3329946960101999, 0.3318114578802635, 0.3194731989509599, 0.31859514157391966, 0.3087272178093834, 0.29261688931963586, 0.2904375082588215], "accuracy": [0.37339848279953003, 0.5625412464141846, 0.6980583667755127, 0.7454761862754822, 0.7604015469551086, 0.7893276810646057, 0.8026680946350098, 0.8088759779930115, 0.8216879963874817, 0.8315942287445068, 0.8393871188163757, 0.8366134166717529, 0.8429533839225769, 0.8569541573524475, 0.8459912538528442, 0.859199583530426, 0.8668603897094727, 0.8698983192443848, 0.8717474341392517, 0.8747853636741638, 0.8766345381736755, 0.8799365758895874, 0.8804649114608765, 0.8819178342819214, 0.8887861371040344, 0.8908994793891907], "val_loss": [1.1612163271222795, 0.6125366687774658, 0.49581938130514963, 0.46280711037772043, 0.4342221702848162, 0.4058264493942261, 0.40949188811438425, 0.38290718623570036, 0.381742000579834, 0.3647189906665257, 0.35747173854282926, 0.34683118547712055, 0.33722035373960224, 0.35538785798209055, 0.340818669114794, 0.3255034599985395, 0.3198545915739877, 0.33218812942504883, 0.31137789147240774, 0.3090915254184178, 0.30969986745289396, 0.31875174386160715, 0.3137450729097639, 0.314939592565809, 0.33232857499803814, 0.31814069407326834], "val_accuracy": [0.5230000019073486, 0.7459999918937683, 0.778333306312561, 0.8046666383743286, 0.8083333373069763, 0.8326666951179504, 0.8193333148956299, 0.843999981880188, 0.8416666388511658, 0.8426666855812073, 0.8496666550636292, 0.8503333330154419, 0.8573333621025085, 0.8433333039283752, 0.8543333411216736, 0.8663333058357239, 0.8676666617393494, 0.8600000143051147, 0.8693333268165588, 0.8686666488647461, 0.874666690826416, 0.8686666488647461, 0.871666669845581, 0.8700000047683716, 0.8650000095367432, 0.8663333058357239]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1], [1, 3, 6, 8, 2, 5, 5, 0, 8, 1, 2, 2, 2, 2, 0, 4, 4, 8, 8, 0, 8, 2, 2, 6, 0, 3, 1, 6, 2, 0, 0, 8, 8, 2, 0, 3, 0, 5, 2, 3, 3, 9, 3, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 2, 0, 1, 2, 0, 1, 1, 2, 2, 1, 2, 3, 0, 1, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [86, 79, 13, 69, 24, 4, 94, 27, 65, 70], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.7885714173316956, "mapping_values": [1, 16, 16, 10, 6, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9869511845624837, 1.5460984351344946, 1.1991214548607765, 0.9778787984572161, 0.8926918451827924, 0.83236971716792, 0.7809433066188353, 0.7226854501509349, 0.7101371940951132, 0.7007885217713863, 0.6781307661443606, 0.6694282852679101, 0.641957052883581, 0.6186568010138357, 0.6150102946563341, 0.5985145214416127, 0.5982237073644876, 0.5768924537918682, 0.5616003739174095, 0.5563793182924139, 0.5610388548555879, 0.5538846731359114, 0.5290419271341514, 0.5291905336612409, 0.5097987341362771, 0.5153744817252456], "accuracy": [0.33601900935173035, 0.4496103525161743, 0.5717870593070984, 0.6370360851287842, 0.6650376319885254, 0.6802271604537964, 0.7061154246330261, 0.7236824631690979, 0.7259278893470764, 0.7305507659912109, 0.7378153204917908, 0.7474573850631714, 0.7479857206344604, 0.7676661014556885, 0.76106196641922, 0.7684586048126221, 0.7687227725982666, 0.7766477465629578, 0.7857614755630493, 0.7869502305984497, 0.7853652238845825, 0.7902522683143616, 0.7979130744934082, 0.7960638999938965, 0.8067626357078552, 0.8020076751708984], "val_loss": [1.350888422557286, 1.1459152698516846, 0.705794198172433, 0.6860590321677071, 0.65872175352914, 0.5750728845596313, 0.5976593494415283, 0.569568565913609, 0.5555475779942104, 0.5438361849103656, 0.5299115691866193, 0.515560337475368, 0.47851669788360596, 0.48807903698512484, 0.472611665725708, 0.46815664427621023, 0.4534905808312552, 0.4487244486808777, 0.4540879896708897, 0.44339325598308016, 0.43340338127953665, 0.4315126878874643, 0.4346219301223755, 0.45908699716840473, 0.41413488558360506, 0.43135154247283936], "val_accuracy": [0.49433332681655884, 0.5356666445732117, 0.6863333582878113, 0.7073333263397217, 0.7110000252723694, 0.7326666712760925, 0.7236666679382324, 0.734000027179718, 0.7363333106040955, 0.7593333125114441, 0.7486666440963745, 0.7689999938011169, 0.7929999828338623, 0.7746666669845581, 0.7883333563804626, 0.7960000038146973, 0.7946666479110718, 0.7933333516120911, 0.7910000085830688, 0.8090000152587891, 0.8186666369438171, 0.8146666884422302, 0.8040000200271606, 0.7990000247955322, 0.8166666626930237, 0.8059999942779541]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 3, 6, 4, 2, 3, 5, 3, 8, 0, 2, 2, 4, 2, 2, 0, 4, 8, 8, 0, 8, 2, 0, 6, 2, 3, 1, 6, 2, 9, 8, 4, 8, 4, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 2, 2, 2, 0, 0, 1, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [87, 90, 54, 33, 32, 74, 89, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [61, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.33314284682273865, "mapping_values": [1, 22, 22, 12, 10, 3, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.square(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(grad, grad)))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), alpha))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.647029859231463, 2.38156369727254, 2.3028699607267167, 2.287362602046452, 108.75464353912841, 2.338316358264726, 2.3060710636411503, 2.3037477390499417, 2.3032175279044678], "accuracy": [0.20578522980213165, 0.1278562992811203, 0.0948355570435524, 0.13842293620109558, 0.17897239327430725, 0.09642054885625839, 0.09536388516426086, 0.09787346422672272, 0.09615638852119446], "val_loss": [2.0688755171639577, 1.9739840371268136, 1.9724515506199427, 1.7770004953656877, 2.1055252892630443, 1.9789064271109444, 1.9747052192687988, 1.9741315160478865, 1.9738401685442244], "val_accuracy": [0.3186666667461395, 0.10066666454076767, 0.10066666454076767, 0.33000001311302185, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [2, 1, 5, 5, 2, 6, 4, 5, 2, 0, 2, 2, 4, 2, 2, 0, 0, 4, 8, 4, 9, 6, 6, 6, 2, 8, 1, 6, 2, 9, 8, 4, 8, 4, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 2, 0, 1, 2, 0, 1, 1, 2, 2, 2, 2, 3, 0, 1, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [4, 79, 13, 69, 32, 4, 94, 27, 65, 70], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [2, 5, 0, 8, 0, 5, 4], [3, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.22285714745521545, "mapping_values": [1, 6, 6, 3, 3, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.7545895160795473, 2.4274660043271776, 2.2819973056374003, 2.263635758600372, 2.655432658755406, NaN, NaN], "accuracy": [0.1768590658903122, 0.15493330359458923, 0.15176330506801605, 0.1434420794248581, 0.11200633645057678, 0.1014397069811821, 0.10011887550354004], "val_loss": [2.0102183478219167, 2.063473497118269, 1.9032765116010393, 1.920726912362235, 1.988879680633545, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.1653333306312561, 0.1509999930858612, 0.12566666305065155, 0.0989999994635582, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 3, 6, 5, 2, 3, 5, 3, 8, 1, 2, 2, 5, 2, 2, 0, 4, 8, 2, 2, 8, 2, 0, 6, 2, 3, 4, 6, 2, 9, 8, 1, 8, 4, 4, 3, 0, 5, 4, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 2, 0, 1, 2, 0, 1, 1, 2, 2, 2, 2, 3, 0, 2, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [86, 56, 13, 69, 11, 4, 94, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 73, 73, 46, 27, 10, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 73, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.square(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(tf.math.add(tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), alpha), tf.math.add(alpha, alpha)))), tf.math.sqrt(grad))), tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.multiply(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(grad)))), grad)))), tf.math.negative(tf.math.add(alpha, grad))), alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [1, 3, 6, 5, 2, 8, 5, 8, 1, 4, 2, 2, 6, 2, 0, 0, 4, 8, 8, 0, 8, 2, 0, 0, 1, 3, 1, 6, 2, 5, 8, 4, 8, 4, 1, 3, 4, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3, 7, 1, 7, 6, 8, 7, 7, 5, 7], [0, 2, 2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3, 0], [2, 79, 41, 69, 32, 74, 20, 27, 65, 70, 15, 90, 43, 12, 51], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 3, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [3, 4, 3, 3], [93], [0, 1, 1, 1], [6, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 101, 101, 64, 37, 15, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.sqrt(grad))))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), grad)), grad), tf.math.square(tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.subtract(tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(alpha)))))), tf.math.negative(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad)))), tf.math.sqrt(tf.math.add(alpha, tf.math.square(alpha)))))), tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))))))), tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(grad))))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(grad, tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 3, 6, 5, 2, 2, 5, 3, 8, 1, 2, 2, 5, 2, 2, 0, 4, 8, 8, 0, 8, 2, 0, 6, 2, 3, 1, 6, 2, 9, 8, 4, 8, 4, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 2, 2, 1, 0, 0, 1, 0, 1, 2, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [87, 10, 54, 33, 32, 74, 89, 27, 65, 70], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [1, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 9, 7, 2, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(alpha, tf.math.square(tf.math.add(tf.math.add(tf.math.square(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(grad))))), alpha))), tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 3, 6, 5, 2, 3, 5, 3, 8, 1, 2, 2, 5, 2, 2, 0, 4, 8, 8, 0, 8, 2, 0, 6, 2, 3, 1, 6, 2, 9, 8, 4, 8, 4, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [1, 1, 0, 2, 2, 0, 0, 1, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [87, 90, 54, 33, 32, 74, 89, 27, 65, 70], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [6, 5, 0, 8, 0, 5, 4], [3, 4, 3, 3], [93], [0, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 9, 9, 5, 4, 2, 3, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 9, 6, 5, 9, 4, 9, 4, 8, 0, 6, 6, 5, 2, 2, 4, 5, 8, 8, 0, 3, 2, 0, 6, 2, 2, 1, 8, 2, 9, 8, 4, 8, 4, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 2, 2, 3, 0, 1, 2, 2, 0, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [87, 90, 54, 33, 32, 74, 89, 27, 65, 70], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [45, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [9, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 0, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.03857142850756645, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.303705753919203, 2.302918046834903, 2.3040894056906427, 2.3035895483699442, 2.3024224484239224, 2.302394958393307], "accuracy": [0.0886276587843895, 0.09034473448991776, 0.08558975160121918, 0.08902391046285629, 0.0866464152932167, 0.09008057415485382], "val_loss": [1.9705563272748674, 1.9706268991742815, 1.9707202911376953, 1.9708011490958077, 1.9708764212472099, 1.970940113067627], "val_accuracy": [0.046666666865348816, 0.04600000008940697, 0.04500000178813934, 0.044333335012197495, 0.043666668236255646, 0.043666668236255646]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 4, 3, 5, 2, 2, 2, 9, 3, 1, 2, 2, 5, 2, 2, 0, 2, 4, 8, 4, 8, 2, 0, 6, 2, 3, 1, 6, 2, 9, 8, 4, 8, 4, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [0, 2, 0, 0, 2, 0, 1, 2, 0, 2, 2, 2, 3, 0, 1, 2, 2, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [2, 79, 32, 69, 32, 74, 72, 27, 65, 70], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [5, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [0, 0, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.03857142850756645, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.303692867790215, 2.302855225444517, 2.303966550936615, 2.3034072652894113, 2.3021999611562944, 2.3021381702468444], "accuracy": [0.0886276587843895, 0.09087307006120682, 0.08558975160121918, 0.09021265059709549, 0.08677849918603897, 0.09100515395402908], "val_loss": [1.9705276489257812, 1.9705609594072615, 1.9706024442400252, 1.9706402506147112, 1.9706824847630091, 1.9707186562674386], "val_accuracy": [0.046666666865348816, 0.046666666865348816, 0.04633333161473274, 0.04633333161473274, 0.045666664838790894, 0.04533333331346512]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 4, 3, 5, 2, 2, 2, 9, 3, 1, 2, 2, 5, 2, 2, 0, 2, 4, 8, 4, 8, 2, 0, 6, 2, 3, 1, 6, 2, 9, 8, 4, 8, 4, 4, 3, 0, 5, 2, 3, 3, 9, 8, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 8, 3], [2, 2, 0, 0, 2, 0, 1, 1, 2, 2, 2, 2, 0, 0, 1, 2, 2, 2, 1, 1, 0, 0, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [86, 20, 76, 32, 32, 74, 89, 27, 64, 70, 39], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 6, 8, 8, 1, 2, 6, 1, 4, 1, 1, 6, 3, 4, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 3, 3, 0, 3, 0, 3, 1, 0, 1, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [44, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [5, 5, 0, 8, 0, 5, 4], [4, 4, 3, 3], [93], [1, 1, 1, 1], [0, 5], [2, 1, 1, 3, 2, 0], [5, 26, 61, 4, 67]], "fitness": -0.014285714365541935, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [Infinity, Infinity, 2.583293864692695, 3.020824174933886, 4.052472089118237, 5.617222102909293], "accuracy": [0.06313564628362656, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, 2.137516294206892, 2.372651849474226, 3.014149938310896, 4.218489374433245, 5.684100151062012], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]