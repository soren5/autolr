[{"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 1, 1, 8, 8, 2, 6, 3, 3, 8, 0, 6, 3, 1, 4, 5, 0, 0, 4, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 2, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [96, 64, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.7968571186065674, "mapping_values": [1, 1, 1, 0, 1, 0, 40, 40, 23, 17, 4, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, beta), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(beta, tf.math.add(beta, beta)), tf.math.multiply(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.add(beta, tf.math.negative(grad))))))), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, tf.math.subtract(tf.math.pow(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, grad)))))))))))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.784283070374694, 2.3100721046924906, 2.30219938984605, 2.2713601764293, 1.9450588990763085, 2.0774645686007887, 1.566130956071731, 1.1115571743209742, 0.8889448223270209, 0.8195003172299803, 0.7861047317213024, 0.705394348928469, 0.6700493738226462, 0.6422071389754561, 0.6562321968460284, 0.6006660344672792, 0.6050183725568046, 0.5550938280755188, 0.5481378090041519, 0.5663329536542286, 0.5119494937705704, 0.5201368871271775, 0.5179847713474742, 0.4525114680167911, 0.46088589048262807, 0.48135990076029794, 0.45027152196669135, 0.42748012097992555, 0.4413745680922578, 0.4365170725647485, 0.4074284595119608, 0.40935664288497886, 0.3868109145538918], "accuracy": [0.19772817194461823, 0.09470347315073013, 0.10791176557540894, 0.15678246319293976, 0.3303394615650177, 0.32518821954727173, 0.5099722743034363, 0.635979413986206, 0.6892088055610657, 0.7017567157745361, 0.7238145470619202, 0.7345132827758789, 0.7456082701683044, 0.7593448758125305, 0.7549861073493958, 0.7781006693840027, 0.7738739848136902, 0.7906485199928284, 0.7938185334205627, 0.7922335267066956, 0.8062343001365662, 0.8034605979919434, 0.8104609847068787, 0.8280280232429504, 0.8245938420295715, 0.8079513907432556, 0.8259146809577942, 0.8343679904937744, 0.829216718673706, 0.8350284099578857, 0.8471800088882446, 0.8444063067436218, 0.8540483713150024], "val_loss": [1.9827030045645577, 1.9739151000976562, 1.9676016398838587, 1.8983712196350098, 1.8712406839643205, 1.3496852602277483, 0.823758602142334, 0.7498315572738647, 0.7078243664332798, 0.635508486202785, 0.5908380917140416, 0.572326796395438, 0.5508266857692173, 0.4977901152202061, 0.4939753838947841, 0.5472363233566284, 0.5160447869982038, 0.42676288740975515, 0.47230020591190885, 0.44431488854544504, 0.40908844981874737, 0.4215846487454006, 0.3992843542780195, 0.40127200739724295, 0.42604979446956087, 0.409787050315312, 0.38619920185634066, 0.37605714797973633, 0.4448608415467398, 0.38207079683031353, 0.3774549109595163, 0.36573851108551025, 0.48578342369624544], "val_accuracy": [0.10133333504199982, 0.10333333164453506, 0.19466666877269745, 0.21766667068004608, 0.2383333295583725, 0.4950000047683716, 0.6859999895095825, 0.7026666402816772, 0.7183333039283752, 0.7293333411216736, 0.7403333187103271, 0.7493333220481873, 0.7409999966621399, 0.781333327293396, 0.7900000214576721, 0.7706666588783264, 0.7480000257492065, 0.8233333230018616, 0.7926666736602783, 0.812666654586792, 0.8233333230018616, 0.8193333148956299, 0.8266666531562805, 0.8333333134651184, 0.8080000281333923, 0.8263333439826965, 0.8416666388511658, 0.847000002861023, 0.8230000138282776, 0.8289999961853027, 0.8346666693687439, 0.8456666469573975, 0.781000018119812]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [2, 1, 4, 0, 8, 0, 2, 3, 5, 6, 8, 9, 6, 3, 1, 4, 2, 0, 3, 4, 6, 2, 4, 3, 1, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 2, 3, 2, 3, 0, 0, 4, 2, 3, 2, 4, 3, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [49, 98, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.7648571133613586, "mapping_values": [1, 1, 1, 0, 1, 0, 41, 41, 24, 17, 4, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, beta), grad))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.7842433181468444, 2.3100945415466594, 2.302202508654561, 2.2638655909300325, 1.8439319365217606, 1.6370904652386797, 1.162278712370518, 0.9174981741794364, 0.785006892884239, 0.7782921241322025, 0.7748918470185683, 0.7109535444508674, 0.7273812076482066, 0.61531806490472, 0.664295976361295, 0.6239835022620364, 0.5857895150979465], "accuracy": [0.1978602558374405, 0.0944393053650856, 0.11015717685222626, 0.16299036145210266, 0.36520934104919434, 0.46347907185554504, 0.6222427487373352, 0.678642213344574, 0.7170783281326294, 0.7239466309547424, 0.7217012047767639, 0.7420420050621033, 0.7364945411682129, 0.7666094303131104, 0.7485140562057495, 0.7666094303131104, 0.7766477465629578], "val_loss": [1.982701029096331, 1.973963737487793, 1.9669725554330009, 1.8434151921953474, 1.7039439678192139, 0.8177720819200788, 0.8066068376813617, 0.6938962255205426, 0.6820110252925328, 0.6633149896349225, 0.6161056246076312, 0.507405195917402, 0.4977753332683018, 0.51268127986363, 0.4912185328347342, 0.49947055748530794, 0.47189550740378244], "val_accuracy": [0.10133333504199982, 0.10333333164453506, 0.2029999941587448, 0.18799999356269836, 0.2956666648387909, 0.6793333292007446, 0.6589999794960022, 0.7083333134651184, 0.6826666593551636, 0.7046666741371155, 0.7390000224113464, 0.7956666946411133, 0.7743333578109741, 0.7663333415985107, 0.7893333435058594, 0.7856666445732117, 0.7786666750907898]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 0, 0, 8, 8, 2, 3, 3, 3, 8, 0, 6, 3, 5, 4, 5, 0, 0, 4, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 2, 3, 2, 2, 0, 0, 4, 2, 3, 0, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [68, 64, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.5502856969833374, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 17, 10, 3, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, grad)))))), tf.math.add(beta, beta))), tf.math.multiply(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.pow(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.7848839374061556, 2.3099840381409686, 2.302121568995224, 2.2646948504898257, 2.2145506244813604, 2.047304462085956, 2.0057881503545407, 2.2504221883511044, 2.19463598377055, 2.151036957897105, 2.3111860190620668, 2.2082881042277416], "accuracy": [0.19733192026615143, 0.09206181764602661, 0.10989301651716232, 0.16523577272891998, 0.20538897812366486, 0.3139611780643463, 0.3171311616897583, 0.2678642272949219, 0.22533351182937622, 0.24078720808029175, 0.10381719470024109, 0.21991810202598572], "val_loss": [1.9827682631356376, 1.9738588333129883, 1.9666917664664132, 1.7403206144060408, 1.7643193517412459, 1.3353429521833147, 1.5058911187308175, 1.7684149060930525, 1.8867756979806083, 1.9974275997706823, 1.9689430509294783, 1.9742122377668108], "val_accuracy": [0.10133333504199982, 0.10433333367109299, 0.19699999690055847, 0.21799999475479126, 0.30799999833106995, 0.4416666626930237, 0.562333345413208, 0.30666667222976685, 0.2669999897480011, 0.09733333438634872, 0.1483333259820938, 0.09733333438634872]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 0, 0, 8, 8, 2, 3, 3, 8, 8, 0, 6, 3, 1, 4, 5, 0, 0, 4, 6, 2, 4, 2, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [1, 2, 0, 3, 3, 2, 3, 0, 0, 4, 2, 3, 0, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [68, 79, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0], [0, 1], [8], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.5374285578727722, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 15, 9, 3, 2, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.negative(tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, grad))))))))))), tf.math.divide_no_nan(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.7843184996085824, 2.310070068640023, 2.3020101119152163, 2.264709358028905, 2.203671862404848, 2.110130682030626, 2.2235942674177576, 2.2060728430858205, 2.2509725381669554, 2.1995270366855126, 2.312418680495873], "accuracy": [0.1978602558374405, 0.09470347315073013, 0.11266675591468811, 0.1628582775592804, 0.20221899449825287, 0.28278958797454834, 0.1896711140871048, 0.20314356684684753, 0.17302866280078888, 0.23616431653499603, 0.09509972482919693], "val_loss": [1.9826580456324987, 1.9739653042384557, 1.9671985762459892, 1.9761697905404227, 1.8632439885820662, 1.4820985112871443, 1.9639040402003698, 1.976297174181257, 1.8998325892857142, 1.9917911802019392, 1.9757993561880929], "val_accuracy": [0.10133333504199982, 0.10300000011920929, 0.20100000500679016, 0.17733334004878998, 0.32466667890548706, 0.4906666576862335, 0.10866666585206985, 0.10133333504199982, 0.2903333306312561, 0.09866666793823242, 0.09799999743700027]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [2, 1, 4, 0, 8, 0, 2, 3, 5, 3, 8, 9, 6, 3, 1, 4, 3, 0, 0, 4, 6, 2, 4, 3, 1, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 2, 3, 2, 3, 0, 0, 4, 2, 3, 2, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [4, 43, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.4788571298122406, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.7842814888952274, 2.3100589823492954, 2.3022446336369584, 2.263037063127275, 2.179244552101394, 2.2502269089387283, 1.8910704168267554, 1.9293311325597757, 2.282659592456538, 2.133704929335431, 2.3102131469012597, 2.305362112691232], "accuracy": [0.19772817194461823, 0.09298639744520187, 0.1072513535618782, 0.17131158709526062, 0.21397437155246735, 0.30405494570732117, 0.3863426148891449, 0.3763043284416199, 0.13221503794193268, 0.2661471366882324, 0.09642054885625839, 0.09655263274908066], "val_loss": [1.9827256883893694, 1.9739110810416085, 1.9667410850524902, 1.7661378043038505, 1.8572060040065221, 1.4540812628609794, 1.2904599394117082, 2.008026054927281, 1.731297220502581, 1.9842267036437988, 1.9744017464773995, 1.9747603961399622], "val_accuracy": [0.10133333504199982, 0.10366666316986084, 0.10633333027362823, 0.21833333373069763, 0.3023333251476288, 0.500333309173584, 0.5023333430290222, 0.09733333438634872, 0.3556666672229767, 0.09733333438634872, 0.09799999743700027, 0.09733333438634872]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [5, 1, 2, 0, 8, 0, 2, 2, 5, 3, 8, 9, 6, 3, 1, 4, 2, 0, 0, 4, 6, 2, 1, 1, 6, 4, 8, 5, 2, 3, 1, 9, 8, 2, 6, 7, 2, 7, 6, 1, 1, 4, 7, 2, 2, 6, 2, 9, 2, 2, 1, 4, 0, 7, 7, 0, 6, 8, 2], [3, 3, 0, 2, 3, 1, 2, 3, 2, 4, 2, 3, 0, 4, 4, 4, 3, 2, 4, 3, 3, 2, 2, 3, 2, 3, 5, 3, 3, 4, 0, 1, 3, 0, 1, 0, 2, 3, 0, 2, 2], [68, 43, 20, 34, 56, 37, 37, 43, 20, 16, 98, 20, 50, 80], [1, 0], [1], [8], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.45428571105003357, "mapping_values": [1, 1, 1, 0, 1, 0, 41, 41, 25, 16, 3, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.sqrt(grad)), tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, grad))), beta))), tf.math.add(beta, grad)))))), tf.math.subtract(tf.math.add(beta, beta), grad))))), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))), grad)))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.7842444201439065, 2.3100736063736904, 2.3024990844562807, 2.257671689502221, 2.1373366406722516, 2.1548509876159017, 1.9828757535291779, 2.078486311012145, 2.3092174513968873, 2.3021161271879906, 2.860883324106277], "accuracy": [0.1978602558374405, 0.09496764093637466, 0.10659094154834747, 0.16232994198799133, 0.2355038970708847, 0.2530709207057953, 0.3261128067970276, 0.2859595715999603, 0.13472460210323334, 0.10130762308835983, 0.21529521048069], "val_loss": [1.98269864491054, 1.9739009993416923, 1.9686386925833566, 1.6936587265559606, 1.9720211029052734, 1.3832275526864188, 1.8065208026341029, 1.5715450559343611, 1.9742744309561593, 1.9472053391592843, 1.863757814679827], "val_accuracy": [0.10133333504199982, 0.10366666316986084, 0.10599999874830246, 0.3333333432674408, 0.14100000262260437, 0.46533334255218506, 0.31299999356269836, 0.4023333191871643, 0.10333333164453506, 0.2706666588783264, 0.23066666722297668]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [5, 1, 0, 0, 8, 0, 9, 3, 5, 3, 4, 9, 6, 3, 1, 4, 8, 5, 0, 9, 6, 2, 1, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 5, 1, 1, 4, 7, 2, 8, 5, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 2, 2], [3, 2, 0, 2, 3, 2, 3, 0, 0, 4, 2, 3, 2, 4, 4, 4, 3, 2, 4, 0, 3, 2, 2, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 0, 2, 2, 0, 1, 2], [68, 43, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 1, 1], [0, 0], [8, 4], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.3625714182853699, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 0, 4, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.negative(tf.math.negative(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.pow(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.7837260529948042, 2.3098826154883447, 2.3026195418297766, 2.27550107143842, 2.182533380110124, 2.3117285128109617, 2.213761228312748, 2.2394928411958146, 2.303957917860014, 2.190253124575904], "accuracy": [0.19719983637332916, 0.09166556596755981, 0.1080438494682312, 0.15321621298789978, 0.22414475679397583, 0.12957337498664856, 0.19310526549816132, 0.21463479101657867, 0.10698718577623367, 0.2226918488740921], "val_loss": [1.9825810023716517, 1.9738960266113281, 1.9688841274806432, 1.8257223537990026, 1.7848528453281947, 1.9730159895760673, 2.005481311253139, 1.9775609288896834, 1.9692739759172713, 1.9846035412379675], "val_accuracy": [0.10133333504199982, 0.10400000214576721, 0.17166666686534882, 0.30433332920074463, 0.3816666603088379, 0.10866666585206985, 0.09799999743700027, 0.09733333438634872, 0.12600000202655792, 0.10233332961797714]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 0, 0, 8, 8, 2, 3, 3, 3, 8, 0, 6, 3, 1, 4, 5, 0, 0, 4, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 2, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [68, 64, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.35257142782211304, "mapping_values": [1, 1, 1, 0, 1, 0, 40, 40, 24, 16, 4, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))), tf.math.negative(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.pow(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), tf.math.multiply(grad, tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2487272526279116, 3.9228834501898064, 2.3025449046904716, 2.3640346940576817, 2.266966771266999, 2.3039425873658788, 2.3032450618335774, 2.3032178359812026, 2.303062619565894], "accuracy": [0.22454100847244263, 0.1262712925672531, 0.09813763201236725, 0.16166952252388, 0.13749834895133972, 0.10117553919553757, 0.0956280529499054, 0.09734513610601425, 0.09708096832036972], "val_loss": [2.948303427015032, 1.9753851209368025, 1.9620928083147322, 1.7506210463387626, 1.9744007928030831, 1.973773615700858, 1.9736289296831404, 1.973646640777588, 1.9736814498901367], "val_accuracy": [0.2809999883174896, 0.10066666454076767, 0.10066666454076767, 0.3006666600704193, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10133333504199982, 0.10100000351667404]}}, {"genotype": [[0], [1], [1], [0, 1, 7, 6, 1, 7], [2], [93], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [8, 1, 4, 0, 3, 0, 9, 3, 5, 3, 4, 9, 6, 3, 1, 4, 8, 5, 0, 9, 6, 2, 1, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 5, 1, 1, 4, 7, 2, 8, 5, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 2, 2], [1, 2, 0, 2, 3, 2, 3, 0, 0, 4, 2, 3, 0, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [68, 43, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 1, 1], [0, 0], [8, 4], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.2945714294910431, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 4, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.subtract(tf.math.add(beta, alpha), tf.math.pow(tf.math.negative(beta), tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.pow(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [3.039724830623159, 2.394142010554882, 3.2384286850765633, 2.4807404722000364, 9.687563458485499e+30, NaN, NaN], "accuracy": [0.17170783877372742, 0.14819706976413727, 0.16919825971126556, 0.09655263274908066, 0.107647605240345, 0.09826971590518951, 0.10011887550354004], "val_loss": [2.0122809410095215, 1.6810647760118758, 2.140448978969029, 2.0985962322780063, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.36933332681655884, 0.09799999743700027, 0.10400000214576721, 0.1080000028014183, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [3], [93], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [5, 1, 4, 0, 8, 0, 2, 2, 5, 3, 8, 9, 6, 3, 1, 4, 3, 0, 0, 4, 6, 2, 1, 1, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 5, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 2, 3, 2, 3, 0, 0, 4, 2, 3, 2, 4, 4, 4, 3, 2, 4, 0, 3, 2, 2, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 0, 2, 2, 0, 1, 2], [4, 43, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [0], [2, 1], []], "fitness": -0.27714285254478455, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.24872731104377, 3.9234302932276717, 2.302901967673049, 2.339713929146981, 2.3200226943285993, 2.3036029788528563], "accuracy": [0.22454100847244263, 0.12600713968276978, 0.09668471664190292, 0.19482234120368958, 0.09866596013307571, 0.1014397069811821], "val_loss": [2.9481662341526578, 1.9753969737461634, 1.9643541063581194, 2.017323766435896, 1.9743501118251257, 1.9736969811575753], "val_accuracy": [0.2809999883174896, 0.10066666454076767, 0.10066666454076767, 0.10233332961797714, 0.09733333438634872, 0.10233332961797714]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [5, 1, 4, 0, 8, 3, 2, 3, 5, 3, 8, 9, 6, 3, 1, 4, 3, 0, 0, 4, 6, 2, 4, 3, 1, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 2, 2, 3, 3, 0, 2, 4, 1, 3, 0, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [49, 43, 20, 30, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [8], [1, 1], []], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 12, 6, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.pow(tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))), tf.math.add(beta, beta))), tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0], [0, 1], [0, 1, 7, 6, 1, 7], [2], [93], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [5, 1, 4, 0, 3, 0, 9, 3, 5, 3, 4, 9, 6, 3, 1, 4, 8, 5, 0, 9, 6, 2, 1, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 5, 1, 1, 4, 7, 2, 8, 5, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 2, 2], [1, 3, 0, 2, 3, 2, 3, 0, 0, 4, 2, 3, 0, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [4, 43, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0754193663597107, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [5, 1, 4, 0, 8, 0, 6, 2, 5, 3, 8, 9, 6, 3, 1, 4, 3, 0, 0, 4, 0, 2, 1, 1, 6, 9, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 1, 1, 1, 4, 7, 6, 5, 2, 2, 9, 2, 3, 1, 1, 0, 7, 7, 2, 2, 8, 2], [3, 2, 0, 2, 3, 2, 3, 0, 0, 3, 2, 3, 2, 4, 3, 4, 3, 2, 4, 0, 3, 2, 3, 1, 2, 3, 5, 4, 3, 4, 3, 3, 3, 0, 2, 0, 2, 2, 0, 1, 2], [49, 43, 20, 1, 56, 65, 64, 43, 50, 51, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [4], [1, 1], []], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 40, 40, 26, 14, 5, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad))), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, beta)))), grad))), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, beta)), tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(beta, tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(beta, grad), beta)))))), grad))))), beta), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [2, 1, 2, 0, 8, 0, 2, 3, 5, 3, 8, 9, 6, 6, 3, 2, 3, 0, 0, 4, 6, 2, 4, 3, 1, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [1, 3, 0, 2, 3, 2, 3, 0, 0, 3, 2, 3, 1, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [4, 43, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [0], [0, 1], [50]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 29, 29, 18, 11, 4, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta))), tf.math.multiply(grad, tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [183843333.31591833, 3499150715.181614, 16056080850.622639, 44751843537.91256, 94873317480.41527, 177654361899.3824], "accuracy": [0.09919429570436478, 0.0948355570435524, 0.10210011899471283, 0.10249637067317963, 0.09826971590518951, 0.09787346422672272], "val_loss": [667978788.5714285, 5340771035.428572, 18021671497.142857, 42714135405.71429, 83421382948.57143, 144146357101.7143], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [5, 1, 4, 0, 3, 0, 9, 3, 5, 3, 4, 9, 6, 3, 1, 4, 8, 5, 0, 9, 6, 2, 1, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 5, 1, 1, 4, 7, 2, 8, 5, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 2, 2], [3, 2, 0, 2, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [68, 43, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0], [1], [8], [1], [52], [1, 1, 1], [0], [1, 1], []], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07634394615888596, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 7, 6, 1, 7, 3, 3, 6, 4, 8, 6, 7, 7, 0, 2, 7, 1, 1, 2, 0, 3, 1, 4, 2, 9, 1, 7, 1, 9, 4, 0, 2, 2, 8, 6, 6, 0, 0, 0, 9, 3, 1, 2, 8], [2, 0, 3, 3, 3, 2, 1, 0, 1, 0, 0, 2, 2, 1, 1, 2, 3, 0, 1, 3, 0, 1, 2, 0, 2, 2, 0, 1, 2, 2], [93, 86, 21, 79, 1, 92, 98, 14, 2, 65, 88], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [2, 2, 0, 0, 8, 8, 2, 3, 3, 3, 8, 0, 6, 3, 1, 4, 5, 0, 0, 4, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [1, 3, 0, 2, 3, 2, 3, 0, 0, 4, 2, 3, 0, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [68, 64, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.10000000149011612, "mapping_values": [1, 75, 75, 45, 30, 11, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 74, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.pow(alpha, tf.math.add(alpha, tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))))))), grad)), tf.math.add(alpha, tf.math.pow(tf.math.negative(alpha), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)))), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), alpha))), tf.math.negative(tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), alpha)))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [2, 1, 4, 0, 8, 0, 2, 3, 5, 3, 8, 9, 6, 3, 1, 4, 3, 0, 0, 4, 6, 2, 4, 3, 1, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 2, 3, 2, 3, 0, 0, 4, 2, 3, 2, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [4, 43, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 0, 1, 1], [0, 7], [1, 1], []], "fitness": -0.09971428662538528, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(alpha, alpha))", "other_info": {"loss": [2.967776106868548, 2.307554672044959, 2.3035006087611394, 2.3029559942489097, 2.2989570949339297, 2.2653774010302166, 2.3033538941363334, 2.3032398520837356, 2.3032982593136313, 2.303501266482767], "accuracy": [0.15731078386306763, 0.10249637067317963, 0.10038304328918457, 0.10593052208423615, 0.12521463632583618, 0.13168670237064362, 0.09972262382507324, 0.09668471664190292, 0.09694888442754745, 0.09721305221319199], "val_loss": [1.9809040342058455, 1.9737859453473772, 1.9736969811575753, 1.972961357661656, 1.8758893694196428, 1.9744085584368025, 1.9737388747079032, 1.9738163948059082, 1.9739582879202706, 1.97357143674578], "val_accuracy": [0.10233332961797714, 0.10100000351667404, 0.09733333438634872, 0.10100000351667404, 0.2953333258628845, 0.10133333504199982, 0.10066666454076767, 0.10133333504199982, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [1], [93], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [5, 1, 4, 0, 8, 0, 2, 2, 5, 3, 8, 9, 6, 3, 1, 4, 3, 0, 0, 4, 6, 2, 1, 1, 6, 4, 2, 5, 2, 6, 1, 9, 3, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 5, 2, 2, 2, 2, 2, 1, 1, 8, 7, 7, 0, 2, 8, 2, 1, 9, 2, 0, 9], [3, 2, 0, 2, 3, 2, 3, 3, 0, 4, 2, 3, 2, 4, 4, 4, 3, 2, 4, 0, 3, 2, 2, 0, 3, 1, 5, 0, 3, 1, 0, 1, 3, 1, 2, 0, 2, 2, 0, 1, 2, 4, 0], [68, 43, 20, 34, 56, 37, 37, 43, 50, 34, 82, 20, 50, 80], [1, 0], [1], [8], [1], [52], [1, 1, 1], [0], [1, 1], []], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 107, 107, 64, 43, 13, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 91, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.sqrt(grad)), tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.add(beta, beta))), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))))), tf.math.pow(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, beta))), grad))))), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, beta), grad))))), tf.math.add(beta, tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(alpha, tf.math.add(beta, grad))))), tf.math.add(beta, alpha))), beta), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))), beta)))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.negative(grad)))))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3041904577568397, 2.3039397538975797, 2.3031583839419527, 2.3028011717548806, 2.301421292690065, 2.3034385472492787], "accuracy": [0.09192973375320435, 0.08598599582910538, 0.08836349099874496, 0.08730682730674744, 0.08770307898521423, 0.0886276587843895], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 7, 6, 1, 7], [2, 1, 0, 2], [93], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [5, 1, 4, 0, 3, 0, 4, 3, 5, 2, 4, 9, 6, 3, 1, 4, 8, 5, 0, 9, 6, 2, 1, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 5, 1, 1, 4, 7, 2, 8, 5, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 2, 2], [1, 2, 0, 2, 3, 2, 3, 0, 0, 4, 2, 3, 0, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [68, 43, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 1, 1], [0, 0], [8, 4], [1], [52], [0, 1, 1], [0], [1, 1], []], "fitness": -0.03914285823702812, "mapping_values": [1, 8, 8, 4, 4, 1, 2, 2, 1, 1, 0, 4, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.pow(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3041904577568397, 2.3039397538975797, 2.3031583839419527, 2.3028011717548806, 2.301421292690065, 2.3034385472492787], "accuracy": [0.09192973375320435, 0.08598599582910538, 0.08836349099874496, 0.08730682730674744, 0.08770307898521423, 0.0886276587843895], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [0], [1], [0, 1, 7, 6, 1, 7], [2], [93], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 4, 0, 8, 0, 2, 2, 5, 3, 8, 9, 6, 3, 1, 4, 3, 0, 0, 4, 6, 2, 1, 1, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 5, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 2, 2, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 4, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 5, 4, 3, 4, 0, 1, 3, 0, 2, 1, 2, 0, 0], [68, 64, 20, 1, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0], [1], [8], [1], [52], [0, 1, 1], [1], [1, 1], []], "fitness": -0.03914285823702812, "mapping_values": [1, 1, 1, 0, 1, 0, 41, 41, 25, 16, 4, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.negative(tf.math.add(beta, grad)), tf.math.pow(tf.math.negative(tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, beta))))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, grad))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, alpha), grad), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, alpha)", "other_info": {"loss": [2.3041904577568397, 2.3039397538975797, 2.3031583839419527, 2.3028011717548806, 2.301421292690065, 2.3034385472492787], "accuracy": [0.09192973375320435, 0.08598599582910538, 0.08836349099874496, 0.08730682730674744, 0.08770307898521423, 0.0886276587843895], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}]