[{"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [3, 2, 2, 3, 0, 7, 2, 1, 9, 3, 7, 3, 4, 0, 2, 0, 2, 6, 8, 4, 0, 3, 0, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 4, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 5, 0, 3], [1, 1, 2, 2, 3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 2, 0, 3, 2, 2, 1, 3, 0, 2, 2, 2, 2, 1, 2, 3], [26, 18, 30, 2, 57, 74, 34, 28, 94, 70], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7691428661346436, "mapping_values": [1, 91, 91, 55, 36, 10, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 77, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))), tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, grad))))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), grad))))))), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, grad)))), tf.math.sqrt(tf.math.square(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3003438621259495, 2.2848479263755106, 2.256360672310973, 2.2105626002152867, 2.1431026317975337, 2.0287170585718735, 1.8365746395478648, 1.6013093936429157, 1.4430829464657084, 1.3648087168728686, 1.3200198559162089, 1.1814399797052613, 1.034101695763106, 0.9443902395515079, 0.9075815014992848, 0.8857389178573337, 0.8613648962004624, 0.8313619776676517, 0.8182184036460456, 0.7905441320504589, 0.7881327202653589, 0.7855416968624275, 0.7633130980788158, 0.7520899530320576, 0.727511108031819, 0.7223573077261928, 0.7203435842166755, 0.6923832543663707, 0.678588644427835, 0.6827878542879176, 0.6670427148478488, 0.661399971295688, 0.6558333195243072, 0.6507271297572232, 0.6492173629445706, 0.649776556614352, 0.6344578907616055, 0.626504237444614, 0.6118259229176332, 0.612904049346885, 0.5978587622088904, 0.5989792506141496, 0.5928954756601595, 0.5818766245689564, 0.5765337764689352, 0.5695371088917387, 0.5737353121568309, 0.5630901621994389, 0.5511343067647475, 0.5449185335105515, 0.5458451342022163, 0.5395013716368549, 0.532515236151579, 0.5303761098859112, 0.5328426466736386, 0.52958124475299, 0.5182350656580317, 0.5008773357443695, 0.5049357835438115, 0.5015795429101505, 0.49128546241315096, 0.4975141606562646, 0.48412225811614684, 0.4867541324020046, 0.4839128055561173, 0.48067283792156257, 0.46503082364541726, 0.46450182839612036, 0.46146844964946315, 0.4575168219665731, 0.4591979666621284, 0.45232695236796194], "accuracy": [0.0948355570435524, 0.1356491893529892, 0.21674811840057373, 0.3035266101360321, 0.36005812883377075, 0.3913617730140686, 0.42808082699775696, 0.46123364567756653, 0.49266940355300903, 0.5226522088050842, 0.5474838018417358, 0.5946374535560608, 0.637828528881073, 0.6452252268791199, 0.6551313996315002, 0.6707172393798828, 0.6795667409896851, 0.6936996579170227, 0.6948884129524231, 0.6977941989898682, 0.6992471218109131, 0.703209638595581, 0.7106062769889832, 0.7201162576675415, 0.724739134311676, 0.720380425453186, 0.7256637215614319, 0.7345132827758789, 0.741909921169281, 0.7383436560630798, 0.741909921169281, 0.7446836829185486, 0.7452120184898376, 0.7580240368843079, 0.7458723783493042, 0.7523444890975952, 0.76106196641922, 0.7621186375617981, 0.7651565074920654, 0.7648923397064209, 0.7691190242767334, 0.772288978099823, 0.7734777331352234, 0.7769119143486023, 0.7783648371696472, 0.785629391670227, 0.78113853931427, 0.7852331399917603, 0.7889314293861389, 0.791969358921051, 0.7915731072425842, 0.7909126877784729, 0.7946110367774963, 0.7960638999938965, 0.7997622489929199, 0.7988376617431641, 0.8017435073852539, 0.8078193068504333, 0.8076872229576111, 0.8072909712791443, 0.8131026029586792, 0.8108572363853455, 0.8169330358505249, 0.8165367841720581, 0.8169330358505249, 0.817989706993103, 0.8219521641731262, 0.829216718673706, 0.8286884427070618, 0.8257825970649719, 0.8278959393501282, 0.8300092220306396], "val_loss": [1.962235382625035, 1.9406399045671736, 1.907353401184082, 1.8582919665745325, 1.7754721641540527, 1.6276827199118478, 1.3915230887276786, 1.1206321716308594, 0.9192024299076625, 0.8159586191177368, 0.7459245238985334, 0.7374743904386248, 0.6609609978539603, 0.6555568490709577, 0.6506548609052386, 0.6473675625664848, 0.630133833203997, 0.6089965105056763, 0.5882910830633981, 0.5755805628640311, 0.5721127135413033, 0.564147915158953, 0.556340149470738, 0.5507464238575527, 0.5453679391316005, 0.5375892264502389, 0.5320091247558594, 0.52630044732775, 0.5196938855307442, 0.5140331302370343, 0.5060825347900391, 0.497894355228969, 0.4927149500165667, 0.4881161791937692, 0.48306923253195627, 0.4784901312419346, 0.47441416127341135, 0.4699376480919974, 0.46564228194100515, 0.461865884917123, 0.45830392837524414, 0.45418531554085867, 0.4504973718098232, 0.44754345076424734, 0.44343189682279316, 0.4391054255621774, 0.4352767212050302, 0.43122394595827374, 0.4269900066511972, 0.423676107610975, 0.42177471092769075, 0.419359701020377, 0.41619962453842163, 0.41372716426849365, 0.4120194571358817, 0.40880867413112093, 0.4067561456135341, 0.40663616146360126, 0.4053425022533962, 0.40253560883658274, 0.40081814357212614, 0.3994565265519278, 0.3965764045715332, 0.39445070709500996, 0.3923242177282061, 0.3892448459352766, 0.386812550680978, 0.3851888264928545, 0.38362930502210346, 0.38169666699000765, 0.37987944909504484, 0.37843876225607737], "val_accuracy": [0.10700000077486038, 0.3076666593551636, 0.4009999930858612, 0.43833333253860474, 0.4673333466053009, 0.5036666393280029, 0.5536666512489319, 0.6076666712760925, 0.6573333144187927, 0.6600000262260437, 0.684333324432373, 0.6919999718666077, 0.7146666646003723, 0.7106666564941406, 0.7239999771118164, 0.7203333377838135, 0.7276666760444641, 0.7406666874885559, 0.7353333234786987, 0.7333333492279053, 0.7353333234786987, 0.7426666617393494, 0.7563333511352539, 0.7559999823570251, 0.7519999742507935, 0.7566666603088379, 0.7573333382606506, 0.7613333463668823, 0.765333354473114, 0.7693333625793457, 0.7703333497047424, 0.7756666541099548, 0.7753333449363708, 0.7716666460037231, 0.7776666879653931, 0.7839999794960022, 0.7876666784286499, 0.7903333306312561, 0.7889999747276306, 0.7923333048820496, 0.7926666736602783, 0.7963333129882812, 0.7990000247955322, 0.7986666560173035, 0.8016666769981384, 0.8040000200271606, 0.8046666383743286, 0.8073333501815796, 0.8100000023841858, 0.8100000023841858, 0.8166666626930237, 0.8140000104904175, 0.8159999847412109, 0.8193333148956299, 0.8193333148956299, 0.8213333487510681, 0.8266666531562805, 0.8263333439826965, 0.8270000219345093, 0.8306666612625122, 0.8299999833106995, 0.828000009059906, 0.8289999961853027, 0.8293333053588867, 0.8333333134651184, 0.8383333086967468, 0.8386666774749756, 0.8343333601951599, 0.8343333601951599, 0.8316666483879089, 0.8349999785423279, 0.8373333215713501]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [4, 2, 2, 3, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [0, 1, 2, 3, 3, 2], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7674285769462585, "mapping_values": [1, 12, 12, 7, 5, 2, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.30034080825194, 2.2847884105669274, 2.256099311352217, 2.2098207268748284, 2.1412537728066394, 2.0242883397792513, 1.8276025433314238, 1.59074605950401, 1.4399503178490056, 1.3715579211042699, 1.3211458097312272, 1.178641042342795, 1.0221637398134433, 0.9403129454065922, 0.9051976426717486, 0.8874188806512777, 0.8629586088769172, 0.8329929198177657, 0.8222639953864957, 0.7956848854181584, 0.7951009492549158, 0.7938613687146058, 0.7691808491177673, 0.7612240129001483, 0.7350322548518989, 0.7294558463646452, 0.7280690324163204, 0.7007209871265914, 0.6875905002648285, 0.6908551694033341, 0.6749568023481358, 0.6707132023953176, 0.665938965963445, 0.6595577453467919, 0.6578933290754405, 0.6523901034717814, 0.63862010074912, 0.6312679269719732, 0.6206058405173406, 0.6189442563050648, 0.6049279339514105, 0.6063797835030843, 0.5979820192135745, 0.5860657703685974, 0.5782027396748268, 0.5727421952008792, 0.5759734129704158, 0.567639349505508, 0.5496061767144305, 0.5441068517942911, 0.546179117224771, 0.5407090656131628, 0.5336140493171373, 0.5320777713173904, 0.5333500659429575, 0.5284382117233886, 0.5162197107636398, 0.49976457038402494, 0.5026523630341299, 0.49866670243350536, 0.4880808249574532, 0.4938173384525363, 0.4836602374240156, 0.48949409673526034, 0.4840568432584651, 0.4805155303877862, 0.4654812741163085, 0.46498413562475494, 0.46272464222707105, 0.4560175012202232, 0.46045798630510354, 0.452568134540706, 0.4495233598126711, 0.4432421639185729, 0.4482512102938284, 0.4372721163430754, 0.4441940361884103, 0.4250192574703021, 0.4255505186526405, 0.42402063293416725, 0.4163072339579288, 0.4153617681285189, 0.4168646513565483, 0.40561561043771693, 0.4014883756149462, 0.40598640851592815, 0.40666163053888577, 0.40409913978729706, 0.3903743059187045, 0.38602949370088957, 0.3908429655967655, 0.39198943362055266, 0.3830197857883014], "accuracy": [0.0948355570435524, 0.13578127324581146, 0.2176727056503296, 0.3047153651714325, 0.36164310574531555, 0.39149385690689087, 0.4283449947834015, 0.4605732262134552, 0.4934619069099426, 0.5234447121620178, 0.550521731376648, 0.5970149040222168, 0.6408664584159851, 0.6412627100944519, 0.656980574131012, 0.6705851554870605, 0.6781138777732849, 0.6902654767036438, 0.6902654767036438, 0.6963412761688232, 0.6952846646308899, 0.7012283802032471, 0.7066437602043152, 0.7135120630264282, 0.7231541275978088, 0.7197200059890747, 0.7234182953834534, 0.7283053994178772, 0.7358341217041016, 0.7358341217041016, 0.7411174178123474, 0.7405890822410583, 0.7433628439903259, 0.750759482383728, 0.743891179561615, 0.7557786107063293, 0.7567031979560852, 0.7574957013130188, 0.7638356685638428, 0.7631752490997314, 0.7660810947418213, 0.7691190242767334, 0.7692511081695557, 0.77677983045578, 0.7795535326004028, 0.7860256433486938, 0.7788931727409363, 0.7839123010635376, 0.7898560166358948, 0.7909126877784729, 0.791969358921051, 0.7955356240272522, 0.7923656105995178, 0.7931581139564514, 0.7985734939575195, 0.8006868362426758, 0.8020076751708984, 0.811649739742279, 0.8112534880638123, 0.8098005652427673, 0.8146876096725464, 0.809140145778656, 0.816008448600769, 0.8156121969223022, 0.8152159452438354, 0.8177255392074585, 0.8177255392074585, 0.8206313848495483, 0.8285563588142395, 0.8257825970649719, 0.8247259259223938, 0.8297450542449951, 0.8278959393501282, 0.8348963260650635, 0.8335754871368408, 0.839519202709198, 0.8360850811004639, 0.8424250483512878, 0.8438779711723328, 0.8387266993522644, 0.8405758738517761, 0.8436138033866882, 0.8473120927810669, 0.8498216867446899, 0.8500858545303345, 0.8469158411026001, 0.847840428352356, 0.8469158411026001, 0.8551049828529358, 0.8574824929237366, 0.8527275323867798, 0.8555012345314026, 0.860652506351471], "val_loss": [1.9622176034109933, 1.9405079569135393, 1.9069317408970423, 1.8572143827165877, 1.7727204050336565, 1.6208813871656145, 1.3782891886574882, 1.1048855100359236, 0.9069012914385114, 0.8137692894254412, 0.7452949115208217, 0.7355293205806187, 0.6558107478278024, 0.657753450529916, 0.6529220342636108, 0.6499996696199689, 0.6292757817677089, 0.609954799924578, 0.5895052126475743, 0.577955824988229, 0.5745570319039481, 0.5649369444165911, 0.5572455099650792, 0.5531535489218575, 0.5459423576082502, 0.5407374926975795, 0.5358947685786656, 0.5286269187927246, 0.5224753618240356, 0.5145917109080723, 0.50588515826634, 0.5000577994755336, 0.49527413504464285, 0.4900915452412197, 0.4845789841243199, 0.4788888692855835, 0.47496349470955984, 0.47244928564344135, 0.4700273275375366, 0.46750971249171663, 0.4648957593100412, 0.4612905297960554, 0.45623535769326345, 0.4518300805773054, 0.4475685017449515, 0.44261561972754343, 0.43765324354171753, 0.4331803747585842, 0.4288499525615147, 0.42498689889907837, 0.42280346155166626, 0.421149092061179, 0.41862870114190237, 0.4157199604170663, 0.41407565559659687, 0.4112349237714495, 0.40840883765901836, 0.4082579697881426, 0.40783495562417166, 0.4047957147870745, 0.4023808240890503, 0.40146163531712126, 0.39874965803963797, 0.395821818283626, 0.39412308590752737, 0.39200959886823383, 0.389809318951198, 0.38838074037006926, 0.3866285766874041, 0.3839019366673061, 0.38172236510685514, 0.38073030539921354, 0.37887875522886005, 0.375707140990666, 0.3740203721182687, 0.3743371708052499, 0.37262790543692453, 0.3705367956842695, 0.3705860120909555, 0.371106173310961, 0.3708764910697937, 0.37146094015666414, 0.3727226938520159, 0.37326118775776457, 0.37267593826566425, 0.37177230630602154, 0.3711528607777187, 0.3695323978151594, 0.3676850710596357, 0.36703585726874216, 0.3668368714196341, 0.3652412550789969, 0.3635382992880685], "val_accuracy": [0.10700000077486038, 0.30799999833106995, 0.40066665410995483, 0.4386666715145111, 0.46799999475479126, 0.5036666393280029, 0.5526666641235352, 0.6106666922569275, 0.6606666445732117, 0.6510000228881836, 0.6863333582878113, 0.6936666369438171, 0.7179999947547913, 0.7076666951179504, 0.7229999899864197, 0.7200000286102295, 0.734000027179718, 0.7356666922569275, 0.7333333492279053, 0.7326666712760925, 0.734666645526886, 0.7450000047683716, 0.7546666860580444, 0.7523333430290222, 0.7516666650772095, 0.7519999742507935, 0.7563333511352539, 0.7580000162124634, 0.7633333206176758, 0.7710000276565552, 0.7706666588783264, 0.7723333239555359, 0.7723333239555359, 0.7736666798591614, 0.7753333449363708, 0.7863333225250244, 0.7853333353996277, 0.784333348274231, 0.7860000133514404, 0.7896666526794434, 0.7906666398048401, 0.7910000085830688, 0.7953333258628845, 0.7960000038146973, 0.800000011920929, 0.8026666641235352, 0.8033333420753479, 0.809333324432373, 0.8116666674613953, 0.8133333325386047, 0.812333345413208, 0.812333345413208, 0.8143333196640015, 0.8193333148956299, 0.8199999928474426, 0.8226666450500488, 0.8270000219345093, 0.8296666741371155, 0.8286666870117188, 0.8289999961853027, 0.828000009059906, 0.8253333568572998, 0.8303333520889282, 0.8330000042915344, 0.8343333601951599, 0.8376666903495789, 0.8349999785423279, 0.8336666822433472, 0.8306666612625122, 0.8353333473205566, 0.8383333086967468, 0.8339999914169312, 0.8346666693687439, 0.8363333344459534, 0.8399999737739563, 0.8386666774749756, 0.8393333554267883, 0.8420000076293945, 0.8420000076293945, 0.8423333168029785, 0.8420000076293945, 0.8426666855812073, 0.8446666598320007, 0.8433333039283752, 0.8423333168029785, 0.8476666808128357, 0.8486666679382324, 0.8489999771118164, 0.8489999771118164, 0.8489999771118164, 0.847000002861023, 0.8476666808128357, 0.8479999899864197]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [5, 8, 8, 5, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [3, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7611428499221802, "mapping_values": [1, 5, 5, 5, 0, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.300340826233317, 2.2847884105669274, 2.256099311352217, 2.2098206953837995, 2.141253673861827, 2.024287802243135, 1.8276019067087854, 1.590746021305392, 1.4399480503532218, 1.3715518395725321, 1.3211295657768194, 1.1786608152921094, 1.0221690483034058, 0.9403200805966628, 0.9051325398665441, 0.8874320513017111, 0.8629245693263848, 0.8327386525832683, 0.8220047821080317, 0.7953582389432489, 0.7953482390851424, 0.794119764840236, 0.7693166573207297, 0.761097466342595, 0.7350345844165005, 0.7293771854670072, 0.7281828776657338, 0.7006803224698003, 0.6875758591486778, 0.6906430813472946, 0.6746360307765785, 0.6708048137896065, 0.6660188323770295, 0.6598403161353974, 0.6580533476049685, 0.6524556242416658, 0.6387579279285396, 0.6312953389835647, 0.6211428712734126, 0.6198267695170352, 0.6052956968061739, 0.6068896759518417, 0.5982439624808169, 0.5858653445269658, 0.5780904661898978, 0.5723299604869239, 0.5760807124473447, 0.5678943631324974, 0.5494559228207693, 0.5452981687980857, 0.546550257720684, 0.5408196729156304, 0.534003736064765, 0.5325461309843563, 0.5328611232238974, 0.5280436067738002, 0.5161394640092821, 0.4989352106473323, 0.5026055275606615, 0.49883797191247775, 0.4881984179384594, 0.49386785958877977, 0.48346032335096584, 0.4895136434372784, 0.4834622329197162, 0.4797526287199594, 0.46464591827123014, 0.46410070682293103, 0.4617356396252059, 0.45531822852234344, 0.459937764015558, 0.4531082980007055, 0.44894407105609613, 0.4423285356846153, 0.447114996300114, 0.434945214048211, 0.4428489885042372, 0.4237042020584661, 0.4231772509351493, 0.4235210846428071, 0.4148220728692629, 0.4141700848840593, 0.4175286257956652, 0.40348110895241257, 0.4011165351639996], "accuracy": [0.0948355570435524, 0.13578127324581146, 0.2176727056503296, 0.3047153651714325, 0.36164310574531555, 0.39149385690689087, 0.4283449947834015, 0.4605732262134552, 0.49332982301712036, 0.5234447121620178, 0.550521731376648, 0.5968828201293945, 0.6408664584159851, 0.6416589617729187, 0.6567164063453674, 0.6707172393798828, 0.678642213344574, 0.6909258961677551, 0.6901333928108215, 0.69673752784729, 0.6942279934883118, 0.7016246318817139, 0.7062475085258484, 0.7143045663833618, 0.7231541275978088, 0.7199841737747192, 0.7239466309547424, 0.7284374833106995, 0.7364945411682129, 0.7358341217041016, 0.741909921169281, 0.7400607466697693, 0.7428345084190369, 0.7518161535263062, 0.743891179561615, 0.7560427784919739, 0.7557786107063293, 0.7580240368843079, 0.76542067527771, 0.7631752490997314, 0.7646281719207764, 0.7683265209197998, 0.7700436115264893, 0.7759873270988464, 0.778761088848114, 0.7868181467056274, 0.7810064554214478, 0.7836481332778931, 0.7890635132789612, 0.793422281742096, 0.7918372750282288, 0.7948752045631409, 0.7928939461708069, 0.7932901978492737, 0.7998943328857422, 0.8001585006713867, 0.8017435073852539, 0.8133667707443237, 0.8105930685997009, 0.8086118102073669, 0.8121780753135681, 0.8096684813499451, 0.8149517774581909, 0.816008448600769, 0.8140271902084351, 0.8175934553146362, 0.8187822103500366, 0.8206313848495483, 0.8286884427070618, 0.8278959393501282, 0.8271034359931946, 0.8302733898162842, 0.828292191028595, 0.8348963260650635, 0.8325188159942627, 0.8399154543876648, 0.8359529972076416, 0.8433496356010437, 0.844010055065155, 0.8380662798881531, 0.8426892161369324, 0.8441421389579773, 0.8455950617790222, 0.8507462739944458, 0.8525954484939575], "val_loss": [1.9622176034109933, 1.9405079569135393, 1.9069316727774483, 1.8572143145969935, 1.7727200644356864, 1.6208805356706892, 1.3782885415213448, 1.104881865637643, 0.9068987028939384, 0.8137756586074829, 0.7453091825757708, 0.7355377163205828, 0.6557996954236712, 0.6577424321855817, 0.6528901032039097, 0.6499165977750506, 0.6291579348700387, 0.6097531148365566, 0.5893030677522931, 0.5778910773141044, 0.5746899332318988, 0.564994352204459, 0.5572500739778791, 0.5531837259020124, 0.5460821219852993, 0.5408101422446114, 0.5358471529824393, 0.5283855540411813, 0.5222141402108329, 0.5140959875924247, 0.5054382596697126, 0.4998338222503662, 0.4951187031609671, 0.48999020031520296, 0.4845508337020874, 0.47883611066000803, 0.47498273849487305, 0.4725820677621024, 0.4702067886080061, 0.46754556042807444, 0.46473744937351774, 0.4608912297657558, 0.45534428528376986, 0.4505549158368792, 0.44621266637529644, 0.44140725476401194, 0.43655833176204134, 0.4322383063180106, 0.42812178816114155, 0.42442443541118074, 0.4224897878510611, 0.4209821139063154, 0.4184098073414394, 0.41552283082689556, 0.4140343836375645, 0.4114442212241037, 0.4086323891367231, 0.40852234193256926, 0.40848935501916067, 0.4055051122392927, 0.402600816317967, 0.4014475430761065, 0.398865921156747, 0.3956453629902431, 0.3937356046267918, 0.39154696464538574, 0.3890845094408308, 0.38742796012333464, 0.3859902450016567, 0.3835451773234776, 0.380980270249503, 0.3800331268991743, 0.37875281061444965, 0.3760539633887155, 0.3743906872613089, 0.3749184267861502, 0.37336777789252146, 0.37106858832495554, 0.37068614789417814, 0.3706268583025251, 0.36997687816619873, 0.3703063726425171, 0.37113956042698454, 0.3710265415055411, 0.3698854616710118], "val_accuracy": [0.10700000077486038, 0.30799999833106995, 0.40066665410995483, 0.4386666715145111, 0.46799999475479126, 0.5036666393280029, 0.5526666641235352, 0.6110000014305115, 0.6606666445732117, 0.6510000228881836, 0.6863333582878113, 0.6936666369438171, 0.7179999947547913, 0.7080000042915344, 0.7229999899864197, 0.7193333506584167, 0.7333333492279053, 0.7356666922569275, 0.7326666712760925, 0.7323333621025085, 0.734333336353302, 0.7450000047683716, 0.7546666860580444, 0.7526666522026062, 0.7506666779518127, 0.7523333430290222, 0.7570000290870667, 0.7583333253860474, 0.7633333206176758, 0.7713333368301392, 0.7706666588783264, 0.7699999809265137, 0.7713333368301392, 0.7733333110809326, 0.7756666541099548, 0.7860000133514404, 0.7853333353996277, 0.7826666831970215, 0.7870000004768372, 0.7879999876022339, 0.7919999957084656, 0.7926666736602783, 0.7956666946411133, 0.7973333597183228, 0.7983333468437195, 0.8033333420753479, 0.8033333420753479, 0.8059999942779541, 0.8090000152587891, 0.8113333582878113, 0.8130000233650208, 0.812333345413208, 0.8146666884422302, 0.8186666369438171, 0.8203333616256714, 0.8223333358764648, 0.8259999752044678, 0.8289999961853027, 0.8293333053588867, 0.8306666612625122, 0.8289999961853027, 0.8253333568572998, 0.8289999961853027, 0.8343333601951599, 0.8333333134651184, 0.8349999785423279, 0.8376666903495789, 0.8360000252723694, 0.8316666483879089, 0.8326666951179504, 0.8379999995231628, 0.8353333473205566, 0.8339999914169312, 0.8366666436195374, 0.8366666436195374, 0.8389999866485596, 0.8393333554267883, 0.8433333039283752, 0.8453333377838135, 0.8463333249092102, 0.8443333506584167, 0.8426666855812073, 0.8429999947547913, 0.8450000286102295, 0.843666672706604]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [4, 2, 2, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.7514285445213318, "mapping_values": [1, 13, 13, 7, 6, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(alpha, grad))), grad)), tf.math.square(grad))), alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.300340826233317, 2.2847884105669274, 2.2560992933708395, 2.2098204973997015, 2.141252936152986, 2.02428577344935, 1.827594707245525, 1.5907374604534652, 1.4399383719476648, 1.371542363433853, 1.3211320390192398, 1.1786813134483263, 1.0222573004945426, 0.9404764024415556, 0.9050204765055048, 0.8874810920368175, 0.8630631103680638, 0.8329693206690872, 0.8219813006019643, 0.7951972806505665, 0.7951455752390755, 0.7939397907527903, 0.7692229304535987, 0.7609642659196009, 0.7351287906873086, 0.7294528764221001, 0.7275828132933598, 0.7006776298372548, 0.6868142566865446, 0.6902506932716611, 0.674783380795873, 0.6709750405455057, 0.6657774145451079, 0.6596447345666, 0.6573095024694872, 0.6518948743246046, 0.6382832737205807, 0.6308530447048801, 0.6198006845925069, 0.6180637720994442, 0.6038991037439818, 0.6058441490356113, 0.597336134638501, 0.5854707247765939, 0.577773372872851, 0.572550781776782, 0.5754023283590116, 0.5670911659890193, 0.5495643391191621, 0.5437329740194266, 0.5462046516861158, 0.5410942858504014, 0.5332283374380206, 0.5319151244048885, 0.5334610715833212, 0.5281194972166878, 0.5155401694980893, 0.4998930276007055, 0.5030973781928126, 0.49843728454153, 0.4883791611982201, 0.4937389100767823, 0.4837443298313202, 0.4893981158662513, 0.4839667133478173, 0.47977250730199367, 0.46438973037133113, 0.46363310449946243, 0.46183750891509134, 0.45478036241162295, 0.45994963042566944, 0.4531281582510246, 0.4505635783924576, 0.44345987795319114, 0.4476794159415533, 0.43640927378574873], "accuracy": [0.0948355570435524, 0.13578127324581146, 0.2176727056503296, 0.3047153651714325, 0.36164310574531555, 0.39149385690689087, 0.4283449947834015, 0.4605732262134552, 0.49332982301712036, 0.5237088799476624, 0.550521731376648, 0.5970149040222168, 0.6407343745231628, 0.6413947939872742, 0.6571126580238342, 0.6708492636680603, 0.6785101294517517, 0.6909258961677551, 0.6889446377754211, 0.69673752784729, 0.693831741809845, 0.700700044631958, 0.7063795924186707, 0.7143045663833618, 0.722757875919342, 0.7195879220962524, 0.7224937081336975, 0.7296261787414551, 0.7368907928466797, 0.7360982894897461, 0.7407211661338806, 0.7404569983482361, 0.7452120184898376, 0.7508915662765503, 0.7433628439903259, 0.7552502751350403, 0.7567031979560852, 0.7576277852058411, 0.7640998363494873, 0.7635715007781982, 0.7663452625274658, 0.7683265209197998, 0.7677981853485107, 0.7771760821342468, 0.7784969210624695, 0.7845727205276489, 0.7800818681716919, 0.7825914621353149, 0.7893276810646057, 0.7922335267066956, 0.791969358921051, 0.7969884872436523, 0.7926297783851624, 0.7931581139564514, 0.7988376617431641, 0.8014793395996094, 0.8035926818847656, 0.8121780753135681, 0.8120459914207458, 0.8098005652427673, 0.8141592741012573, 0.8098005652427673, 0.8171972036361694, 0.8145555257797241, 0.8136309385299683, 0.8178576231002808, 0.8186501264572144, 0.8203672170639038, 0.829216718673706, 0.828292191028595, 0.8251221776008606, 0.8309338092803955, 0.828292191028595, 0.8350284099578857, 0.8333113193511963, 0.8392550349235535], "val_loss": [1.9622176034109933, 1.9405079569135393, 1.9069316727774483, 1.8572139739990234, 1.7727182933262415, 1.6208757332393102, 1.378279141017369, 1.1048645292009627, 0.9068946497780936, 0.8137691531862531, 0.7452860389436994, 0.7355496372495379, 0.6558783054351807, 0.6577458551951817, 0.6528531994138446, 0.6499614374978202, 0.6291331052780151, 0.6095266512462071, 0.5891204902103969, 0.5779299225125994, 0.5744916200637817, 0.5646532092775617, 0.5571662187576294, 0.5529981170381818, 0.5456704752785819, 0.5401721511568341, 0.5351665360586983, 0.5278138262884957, 0.5215334381375994, 0.5141056094850812, 0.5058060373578753, 0.49986919334956575, 0.4950547899518694, 0.4900595120021275, 0.48462062222617014, 0.4789598839623587, 0.4750080960137503, 0.4723240988595145, 0.4695817232131958, 0.466963597706386, 0.4644633190972464, 0.4608548709324428, 0.4558419670377459, 0.4516668660300119, 0.4474241052355085, 0.4423712491989136, 0.4373951809746878, 0.43299185378210886, 0.4285306930541992, 0.424723071711404, 0.4227705938475473, 0.42101106473377775, 0.4181925058364868, 0.4153933014188494, 0.41394686698913574, 0.41095531838280813, 0.40814870595932007, 0.40811445883342196, 0.40772633041654316, 0.404459399836404, 0.40207888398851666, 0.4013708233833313, 0.3985693710190909, 0.3953036665916443, 0.39351556982312885, 0.3910005858966282, 0.388401278427669, 0.38701016562325613, 0.38555541208812166, 0.38277362074170795, 0.38029966184071134, 0.3796618665967669, 0.3782286388533456, 0.3749126195907593, 0.37307832070759367, 0.37385704687663485], "val_accuracy": [0.10700000077486038, 0.30799999833106995, 0.40066665410995483, 0.4386666715145111, 0.46799999475479126, 0.5036666393280029, 0.5526666641235352, 0.6110000014305115, 0.6606666445732117, 0.6510000228881836, 0.6859999895095825, 0.6936666369438171, 0.7179999947547913, 0.7083333134651184, 0.7229999899864197, 0.7206666469573975, 0.7329999804496765, 0.7356666922569275, 0.734666645526886, 0.7319999933242798, 0.734666645526886, 0.7459999918937683, 0.7543333172798157, 0.753333330154419, 0.7509999871253967, 0.7516666650772095, 0.7570000290870667, 0.7596666812896729, 0.7633333206176758, 0.7710000276565552, 0.7676666378974915, 0.7716666460037231, 0.7726666927337646, 0.7743333578109741, 0.7760000228881836, 0.7863333225250244, 0.7853333353996277, 0.7816666960716248, 0.7866666913032532, 0.7893333435058594, 0.7913333177566528, 0.7940000295639038, 0.7950000166893005, 0.796999990940094, 0.7993333339691162, 0.8029999732971191, 0.8046666383743286, 0.8080000281333923, 0.8119999766349792, 0.8106666803359985, 0.812333345413208, 0.812333345413208, 0.8146666884422302, 0.8180000185966492, 0.8193333148956299, 0.8226666450500488, 0.8276666402816772, 0.8293333053588867, 0.831333339214325, 0.8333333134651184, 0.8289999961853027, 0.8256666660308838, 0.8289999961853027, 0.8323333263397217, 0.8339999914169312, 0.8356666564941406, 0.8370000123977661, 0.8349999785423279, 0.8320000171661377, 0.8360000252723694, 0.840666651725769, 0.8363333344459534, 0.8336666822433472, 0.8373333215713501, 0.8393333554267883, 0.8366666436195374]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0], [4, 2, 2, 1, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 2, 3, 1], [26, 18, 30], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [3, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), grad), grad), tf.math.add(alpha, tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [4, 2, 5, 3, 0, 7, 5, 3, 9, 3, 4, 1, 1, 0, 5, 6, 8, 6, 9, 3, 9, 6, 9, 5, 2, 0, 8, 1, 8, 9], [2, 1, 2, 3, 3, 2, 2, 2, 1, 1, 2], [26, 18, 30, 34, 50, 31, 97], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 1, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 41, 41, 30, 11, 5, 33, 33, 18, 15, 4, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.square(alpha)))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))), tf.math.subtract(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), grad)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), alpha)))))), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [4, 2, 2, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0, 3, 3, 7, 5, 0, 7, 9, 7, 2, 4, 2, 9, 6, 4, 5, 3, 7, 2, 5, 8, 5, 0, 1, 2], [2, 1, 2, 0, 3, 2, 2, 0, 2, 2, 2, 1, 2, 0, 1, 2, 3, 1, 1, 0, 2, 1, 2], [26, 18, 30, 31, 89, 90, 39], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 0, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [2, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 63, 63, 40, 23, 7, 1, 1, 0, 1, 0, 5, 3, 3, 0, 0, 3, 1, 2, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad)))))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha))), grad))))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(tf.math.square(tf.math.add(alpha, alpha)), grad), grad))), tf.math.sqrt(tf.math.add(alpha, tf.math.square(alpha)))))))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))))))), tf.math.add(alpha, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], [3, 2, 2, 3, 0, 7, 2, 3, 9, 3, 7, 1, 1, 0, 5, 0, 2, 4, 8, 4, 0, 2, 0, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 7, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 2, 6, 0, 8, 8], [1, 1, 2, 2, 3, 2, 3, 1, 0, 2, 1, 3, 3, 0, 3, 1, 2, 0, 2, 1, 0, 2, 0, 3, 2, 2, 1, 3, 1, 2, 2, 2, 2, 1], [26, 18, 30, 34, 50, 31, 97], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 2, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 0, 5, 5, 3, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [5, 8, 8, 0, 9, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [26, 18, 30], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 8, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 5, 0, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [3, 2, 2, 3, 0, 7, 2, 3, 9, 3, 7, 1, 1, 0, 3, 0, 2, 4, 2, 2, 0, 2, 0, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 5, 3, 5, 5, 2, 3, 3, 9, 5, 0, 8, 0, 7, 4, 2, 6, 0, 8, 8], [1, 1, 2, 2, 3, 2, 3, 1, 0, 2, 1, 3, 3, 0, 3, 2, 2, 0, 1, 1, 0, 2, 1, 3, 2, 2, 1, 3, 1, 2, 2, 2, 2, 1], [26, 54, 64, 34, 50, 11, 97], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [0, 1], [5, 26, 61, 4, 67]], "fitness": -0.09971428662538528, "mapping_values": [1, 18, 18, 10, 8, 1, 5, 5, 3, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.344661080621536, 2.758472085077812, 3.9185667535522124, 5.88699570465491, 8.766254632133833, 12.316481851520571, 16.895142810566078], "accuracy": [0.09113723784685135, 0.09615638852119446, 0.09774138033390045, 0.09959053993225098, 0.09787346422672272, 0.09787346422672272, 0.09919429570436478], "val_loss": [2.0446594102042064, 2.4400340488978793, 3.361987522670201, 4.841485023498535, 6.834204401288714, 9.334357942853655, 12.365774427141462], "val_accuracy": [0.09700000286102295, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 2, 5, 3, 0, 6, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [26, 18, 30], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [0, 5], [1, 1], [5, 26, 61, 4, 67]], "fitness": -0.06485714018344879, "mapping_values": [1, 10, 10, 6, 4, 0, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [153.769857674164, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1942940205335617, 0.09549596905708313, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [60.10905892508371, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [4, 2, 9, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 9, 0, 6, 3, 4, 9, 1, 4, 4, 3, 4, 7, 8, 0, 1, 0, 8, 4, 2, 2, 7, 0, 7, 0, 0, 4, 4, 5, 1, 3, 9, 7, 0, 9], [1, 1, 2, 2, 3, 2, 3, 1, 0, 2, 2, 3, 3, 0, 3, 1, 2, 0, 2, 1, 0, 2, 0, 3, 2, 0, 1, 3, 1, 2, 2, 2, 2, 1], [26, 18, 30, 34, 50, 31, 7, 1, 65], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 51, 51, 33, 18, 7, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.square(alpha), tf.math.add(alpha, tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(grad, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, alpha)), grad), tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302723752855546, 2.3026403358914456, 2.30306656284103, 2.3013254984920017, 2.3025693650321877, 2.303700381014341], "accuracy": [0.08968432247638702, 0.08942015469074249, 0.09351472556591034, 0.0878351628780365, 0.08994849026203156, 0.08453308790922165], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0], [3, 2, 2, 3, 0, 7, 2, 3, 9, 3, 7, 1, 1, 0, 5, 0, 2, 4, 5, 8, 5, 2, 0, 2, 2, 3, 2, 6, 2, 2, 8, 1, 3, 1, 7, 3, 5, 5, 2, 3, 3, 9, 2, 0, 8, 0, 7, 4, 9, 6, 0, 8, 8], [1, 1, 2, 0, 1, 2, 3, 1, 0, 2, 1, 3, 3, 0, 3, 1, 2, 0, 2, 1, 0, 0, 0, 3, 2, 2, 1, 3, 1, 2, 2, 2, 2, 1], [26, 18, 18, 81, 20, 5, 14, 13, 14], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 70, 70, 42, 28, 9, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.pow(tf.math.square(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.negative(grad), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), alpha)), grad))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))))))))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.square(grad))))), tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(alpha, tf.math.multiply(grad, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.302723752855546, 2.3026403358914456, 2.30306656284103, 2.3013254984920017, 2.3025693650321877, 2.303700381014341], "accuracy": [0.08968432247638702, 0.08942015469074249, 0.09351472556591034, 0.0878351628780365, 0.08994849026203156, 0.08453308790922165], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [4, 2, 2, 0, 0, 4, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 0, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 12, 12, 7, 5, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.negative(tf.math.add(alpha, grad))), tf.math.pow(alpha, tf.math.add(alpha, grad)))), grad), tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302723752855546, 2.3026403358914456, 2.30306656284103, 2.3013254984920017, 2.3025693650321877, 2.303700381014341], "accuracy": [0.08968432247638702, 0.08942015469074249, 0.09351472556591034, 0.0878351628780365, 0.08994849026203156, 0.08453308790922165], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [8, 2, 2, 3, 0, 7, 5, 3, 3, 3, 7, 1, 1, 0, 5, 0, 8, 6, 7, 1, 2, 4, 0, 0, 5, 9, 9, 3, 0, 2, 0, 7, 1], [2, 1, 2, 3, 3, 2, 0, 0, 3, 1, 0, 1, 0, 1, 0, 2, 0, 1], [26, 18, 30, 34, 50, 31, 97, 45], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 51, 51, 33, 18, 8, 6, 6, 4, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 68, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(grad, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), alpha))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))))))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(alpha, tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302723752855546, 2.3026403358914456, 2.30306656284103, 2.3013254984920017, 2.3025693650321877, 2.303700381014341], "accuracy": [0.08968432247638702, 0.08942015469074249, 0.09351472556591034, 0.0878351628780365, 0.08994849026203156, 0.08453308790922165], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [6, 2, 2, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 2, 1], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 17, 17, 10, 7, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(tf.math.square(tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))), tf.math.multiply(grad, grad))), tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.3027237843465747, 2.3026403358914456, 2.303066594332059, 2.3013251251658553, 2.3025677591786646, 2.303696701413589, 2.3024864720473155, 2.3037810769646065], "accuracy": [0.08968432247638702, 0.08942015469074249, 0.09351472556591034, 0.0878351628780365, 0.08994849026203156, 0.08453308790922165, 0.09311848133802414, 0.08981640636920929], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704884120396204, 1.9704876627240862, 1.9704856872558594, 1.970482349395752, 1.9704758780343192, 1.9704655919756209], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665, 0.047333333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 8, 2, 3, 1, 7, 2, 3, 9, 3, 5, 0, 1, 0, 8, 0, 2, 4, 8, 4, 0, 2, 0, 2, 2, 3, 1, 6, 2, 2, 8, 1, 3, 1, 7, 3, 3, 5, 2, 3, 3, 9, 2, 0, 8, 0, 8, 4, 2, 6, 2, 5, 8], [2, 1, 2, 3, 3, 2, 3, 3, 1, 1, 2, 3, 0, 2, 1, 2, 0, 0, 0, 1, 3, 2, 1, 2, 2, 3, 1, 2, 1, 0, 1, 0, 2, 2], [26, 18, 30, 75, 99, 5, 21], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 8, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [0, 3, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 9, 0, 8, 7], [1, 3], [52], [1, 1, 1, 1], [0, 5], [3, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 78, 78, 48, 30, 7, 6, 6, 3, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad), grad)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.subtract(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))))), tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), alpha), tf.math.multiply(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(alpha, grad)))))))))), tf.math.add(alpha, alpha))))))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302723752855546, 2.3026403358914456, 2.30306656284103, 2.3013254984920017, 2.3025693650321877, 2.303700381014341], "accuracy": [0.08968432247638702, 0.08942015469074249, 0.09351472556591034, 0.0878351628780365, 0.08994849026203156, 0.08453308790922165], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [4, 9, 2, 3, 0, 7, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 3, 1], [26, 18, 30], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 1, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 8, 8, 5, 3, 1, 6, 6, 4, 2, 1, 5, 3, 3, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302723752855546, 2.3026403358914456, 2.30306656284103, 2.3013254984920017, 2.3025693650321877, 2.303700381014341], "accuracy": [0.08968432247638702, 0.08942015469074249, 0.09351472556591034, 0.0878351628780365, 0.08994849026203156, 0.08453308790922165], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [4, 2, 2, 3, 0, 7, 5, 3, 9, 1, 7, 1, 1, 0, 5, 0, 1, 9, 1, 0, 0, 6, 1, 8, 5, 3, 4, 5, 0, 1, 0, 0, 3], [2, 1, 2, 2, 1, 2, 3, 1, 0, 2, 1, 0, 3, 0, 3, 1, 2, 1, 2, 1, 0, 2, 0, 3, 2, 2, 1, 3, 1, 2, 2, 2, 2, 1], [26, 18, 30, 49, 15], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [15, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [0, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [5, 6, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03914285823702812, "mapping_values": [1, 43, 43, 28, 15, 5, 6, 6, 4, 2, 1, 2, 2, 1, 1, 0, 3, 2, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, grad))), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.302723752855546, 2.3026403358914456, 2.30306656284103, 2.3013254984920017, 2.3025693650321877, 2.303700381014341], "accuracy": [0.08968432247638702, 0.08942015469074249, 0.09351472556591034, 0.0878351628780365, 0.08994849026203156, 0.08453308790922165], "val_loss": [1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026, 1.9704886163984026], "val_accuracy": [0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459, 0.04699999839067459]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [4, 4, 2, 3, 0, 2, 5, 3, 9, 3, 7, 1, 1, 0, 5, 0], [2, 1, 2, 3, 2, 2], [26, 18, 30], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 9, 8, 1, 1, 2, 6, 5, 4, 1, 1, 6, 8, 1, 4, 5, 2, 0, 0, 6, 2, 4, 3, 6, 4, 8, 5, 2, 3, 1, 9, 2, 2, 6, 7, 1, 7, 6, 1, 1, 4, 7, 2, 8, 2, 2, 9, 2, 2, 1, 1, 0, 7, 7, 0, 2, 8, 2], [3, 2, 0, 3, 2, 2, 3, 0, 0, 4, 1, 3, 0, 4, 4, 3, 3, 2, 4, 0, 3, 2, 1, 1, 2, 3, 2, 1, 3, 4, 0, 3, 3, 3, 2, 1, 2, 0, 0, 0, 4], [50, 64, 7, 90, 56, 65, 64, 43, 50, 16, 82, 20, 50], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [5, 2, 0, 8, 7], [1, 3], [52], [0, 0, 1, 1], [0, 5], [2, 1], [5, 26, 61, 4, 67]], "fitness": -0.03857142850756645, "mapping_values": [1, 13, 13, 7, 6, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.square(grad))), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.302788818328136, 2.3028525193574296, 2.303462747790007, 2.301843805020874, 2.3032889642956045, 2.3046541965365206], "accuracy": [0.08994849026203156, 0.08849557489156723, 0.09338264167308807, 0.0878351628780365, 0.0882314071059227, 0.08228767663240433], "val_loss": [1.9705934524536133, 1.9706781251089913, 1.9707896368844169, 1.9708820751735143, 1.9709621838160925, 1.9710733549935477], "val_accuracy": [0.04633333161473274, 0.04500000178813934, 0.04399999976158142, 0.0430000014603138, 0.04233333468437195, 0.04100000113248825]}}]