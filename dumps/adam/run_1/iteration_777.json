[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.854285717010498, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22161602973938, 1.8627312183380127, 1.3907238245010376, 1.0924373865127563, 0.928631603717804, 0.8302021026611328, 0.7643530964851379, 0.7184835076332092, 0.6873983144760132, 0.6543006896972656, 0.6299881935119629, 0.6086681485176086, 0.586571991443634, 0.5711135864257812, 0.5601201057434082, 0.5375826358795166, 0.5265122056007385, 0.5137187838554382, 0.5003702640533447, 0.4912494719028473, 0.4820840358734131, 0.4737962782382965, 0.4676680862903595, 0.4557797610759735, 0.44431284070014954, 0.44112852215766907, 0.4315081536769867, 0.4286730885505676, 0.42028582096099854, 0.40852996706962585, 0.399998277425766, 0.3971896171569824, 0.3948918879032135, 0.3877060115337372, 0.38481977581977844, 0.37843453884124756, 0.36564409732818604, 0.3636963963508606, 0.3584868013858795, 0.3494485020637512, 0.34784072637557983, 0.33830857276916504, 0.3418540358543396, 0.33577826619148254, 0.3343976140022278, 0.32236042618751526, 0.32021233439445496, 0.3153504431247711, 0.31605011224746704, 0.30930641293525696, 0.3033815622329712], "accuracy": [0.2739400267601013, 0.48685774207115173, 0.5699379444122314, 0.618280291557312, 0.6672830581665039, 0.7054550051689148, 0.726192057132721, 0.737947404384613, 0.7466648817062378, 0.757099449634552, 0.7693831920623779, 0.7783648371696472, 0.7873464822769165, 0.7898560166358948, 0.7952714562416077, 0.7971205711364746, 0.8104609847068787, 0.8146876096725464, 0.8204993009567261, 0.8216879963874817, 0.8248580098152161, 0.8305375576019287, 0.8308017253875732, 0.8335754871368408, 0.8411042094230652, 0.8401796221733093, 0.845859169960022, 0.8453308939933777, 0.8459912538528442, 0.8588033318519592, 0.8589354157447815, 0.8593316674232483, 0.8615770936012268, 0.8664641380310059, 0.8679170608520508, 0.8668603897094727, 0.8705587387084961, 0.8747853636741638, 0.8751816153526306, 0.8795403242111206, 0.8787478804588318, 0.8815215826034546, 0.8823140859603882, 0.8808611631393433, 0.8869370222091675, 0.8877294659614563, 0.8849557638168335, 0.887597382068634, 0.8853520154953003, 0.8865407705307007, 0.8947299122810364], "val_loss": [2.0362889766693115, 1.511792778968811, 1.0489072799682617, 0.8390725255012512, 0.7487975358963013, 0.6914363503456116, 0.6452896595001221, 0.6111704707145691, 0.5856735706329346, 0.5594574213027954, 0.5429430603981018, 0.5276119709014893, 0.5175856351852417, 0.5014588832855225, 0.4947047531604767, 0.47748640179634094, 0.4727610647678375, 0.4622175395488739, 0.45103922486305237, 0.45061519742012024, 0.441243052482605, 0.43502864241600037, 0.42828723788261414, 0.42051854729652405, 0.419700026512146, 0.4113229215145111, 0.4134317934513092, 0.40284237265586853, 0.39827051758766174, 0.3953714072704315, 0.3909749388694763, 0.3895731568336487, 0.3880661725997925, 0.3857858180999756, 0.37969890236854553, 0.37334561347961426, 0.371980220079422, 0.3698943555355072, 0.36880356073379517, 0.36305952072143555, 0.36394524574279785, 0.3580819368362427, 0.35706469416618347, 0.35887977480888367, 0.35285529494285583, 0.3557741641998291, 0.35145148634910583, 0.3506595492362976, 0.348442941904068, 0.34648463129997253, 0.3468784987926483], "val_accuracy": [0.5216666460037231, 0.6603333353996277, 0.6766666769981384, 0.715666651725769, 0.7323333621025085, 0.7493333220481873, 0.7590000033378601, 0.7786666750907898, 0.7833333611488342, 0.7943333387374878, 0.7996666431427002, 0.8096666932106018, 0.8113333582878113, 0.8240000009536743, 0.8209999799728394, 0.8339999914169312, 0.8309999704360962, 0.8366666436195374, 0.8420000076293945, 0.8453333377838135, 0.8450000286102295, 0.8479999899864197, 0.8476666808128357, 0.8533333539962769, 0.8483333587646484, 0.8579999804496765, 0.8566666841506958, 0.862666666507721, 0.859666645526886, 0.8603333234786987, 0.8656666874885559, 0.8666666746139526, 0.8683333396911621, 0.8616666793823242, 0.8683333396911621, 0.8696666955947876, 0.8683333396911621, 0.8723333477973938, 0.871666669845581, 0.8713333606719971, 0.8736666440963745, 0.8736666440963745, 0.8759999871253967, 0.8730000257492065, 0.8773333430290222, 0.8790000081062317, 0.875333309173584, 0.8733333349227905, 0.875333309173584, 0.8769999742507935, 0.8763333559036255]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [67, 16], [1, 1], [0], [0], [55], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 1, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 22, 96, 99, 61, 1]], "fitness": -0.1428571492433548, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 1, 0, 1, 1, 10, 5, 5, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma), grad)", "other_info": {"loss": [6470950715392.0, 7704474550272.0, 7590521077760.0, 7638145826816.0, 7762183454720.0, 7700689190912.0, 7809110376448.0], "accuracy": [0.1080438494682312, 0.11134592443704605, 0.10817593336105347, 0.11689341068267822, 0.10672302544116974, 0.11213842034339905, 0.11266675591468811], "val_loss": [6402121138176.0, 6400126746624.0, 6400126222336.0, 6400126222336.0, 6400125698048.0, 6400125698048.0, 6400123076608.0], "val_accuracy": [0.1446666717529297, 0.14499999582767487, 0.14499999582767487, 0.14499999582767487, 0.14499999582767487, 0.14499999582767487, 0.14499999582767487]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 2, 3, 4, 8, 0], [2, 1, 0, 2, 1, 3, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 2], [0, 2, 0, 3, 0], [16, 16, 4], [0, 1], [0], [0], [9], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 6, 4, 8, 3, 7, 9], [0, 0, 0, 3, 0, 0, 3, 0, 2, 0, 2, 7, 0, 4], [16, 99, 96, 99, 61, 1, 24, 58, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 10, 7, 1, 11, 6, 5, 3, 2, 1, 1, 1, 31, 17, 14, 9], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, alpha)), tf.math.pow(tf.math.sqrt(tf.math.negative(grad)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, tf.math.pow(tf.math.sqrt(grad), tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 9, 8, 6, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 4, 2, 0], [16, 99, 96, 4, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 8, 5, 3, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.303499698638916, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025853633880615, 2.3025851249694824], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2], [0, 2, 0, 3], [16, 2], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 5, 6, 8, 2, 4, 1, 4, 2, 8, 7, 8], [0, 0, 0, 3, 3, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 23, 13, 10, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.add(alpha, beta)))), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]