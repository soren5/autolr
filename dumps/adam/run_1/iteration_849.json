[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8514285683631897, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22234845161438, 1.8672915697097778, 1.3837653398513794, 1.09137761592865, 0.9272529482841492, 0.8257363438606262, 0.7662836313247681, 0.722967803478241, 0.6857873797416687, 0.6577910780906677, 0.6252860426902771, 0.6135087013244629, 0.587445855140686, 0.5774039626121521, 0.5491672158241272, 0.5371511578559875, 0.5280038714408875, 0.5153593420982361, 0.5003186464309692, 0.49690645933151245, 0.48459184169769287, 0.4695685803890228, 0.4660502076148987, 0.45495349168777466, 0.4432821571826935, 0.4462445080280304, 0.4259597063064575, 0.4230014383792877, 0.41816335916519165, 0.4108457565307617, 0.4070174992084503, 0.39331960678100586, 0.38770419359207153, 0.37999534606933594, 0.3748408555984497, 0.369882196187973, 0.3725893795490265, 0.36122584342956543, 0.35554438829421997, 0.35370171070098877, 0.34829622507095337, 0.34503546357154846, 0.3330414891242981, 0.3354424238204956, 0.3301750123500824, 0.3258814811706543, 0.31562304496765137, 0.31481319665908813, 0.3122895658016205, 0.2967137098312378, 0.29844245314598083, 0.29259321093559265, 0.29508399963378906, 0.28667354583740234, 0.28269463777542114, 0.27971625328063965, 0.27921262383461, 0.27451810240745544, 0.26938092708587646, 0.2665786147117615, 0.2528844475746155, 0.254116028547287, 0.25139814615249634, 0.2437306046485901, 0.24883726239204407, 0.2406489998102188, 0.2368953824043274, 0.23629681766033173, 0.23550406098365784, 0.23235701024532318, 0.2249118685722351, 0.227571040391922], "accuracy": [0.2801479399204254, 0.4822348356246948, 0.572579562664032, 0.6222427487373352, 0.670320987701416, 0.7054550051689148, 0.7265883088111877, 0.7395324110984802, 0.7531369924545288, 0.7604015469551086, 0.7688548564910889, 0.7753269076347351, 0.7878747582435608, 0.7889314293861389, 0.7988376617431641, 0.8034605979919434, 0.8064984679222107, 0.813498854637146, 0.8210275769233704, 0.8222163319587708, 0.8269713521003723, 0.8289526104927063, 0.8345000743865967, 0.8322546482086182, 0.8430854678153992, 0.841500461101532, 0.8490291833877563, 0.8521991968154907, 0.8499537706375122, 0.8527275323867798, 0.8527275323867798, 0.8638224601745605, 0.8619733452796936, 0.8658037185668945, 0.8636903762817383, 0.8660678863525391, 0.8673887252807617, 0.8681812286376953, 0.872407853603363, 0.8710870146751404, 0.873860776424408, 0.878879964351654, 0.8771628737449646, 0.8815215826034546, 0.8828424215316772, 0.8821820020675659, 0.8862766027450562, 0.8860124349594116, 0.8905032277107239, 0.8922203183174133, 0.8916919827461243, 0.8936732411384583, 0.8934090733528137, 0.8963148593902588, 0.895918607711792, 0.8989565372467041, 0.9012019634246826, 0.8985602855682373, 0.9030511379241943, 0.9045040011405945, 0.9074098467826843, 0.9085986018180847, 0.9080702662467957, 0.9111081957817078, 0.910711944103241, 0.9116365313529968, 0.913089394569397, 0.9121648669242859, 0.9177123308181763, 0.9154669046401978, 0.9162594079971313, 0.9169198274612427], "val_loss": [2.038113832473755, 1.5108633041381836, 1.0431208610534668, 0.8393616676330566, 0.7475684285163879, 0.6954385042190552, 0.6460684537887573, 0.6156734824180603, 0.5940551161766052, 0.560062050819397, 0.5476594567298889, 0.5305266380310059, 0.5151286721229553, 0.5021331906318665, 0.48871493339538574, 0.4829166531562805, 0.4732019007205963, 0.4634934961795807, 0.4551399052143097, 0.4573723077774048, 0.4419217109680176, 0.43458524346351624, 0.4305420219898224, 0.4285828471183777, 0.4201835095882416, 0.41751718521118164, 0.4175967574119568, 0.41450682282447815, 0.406472384929657, 0.40366649627685547, 0.39685824513435364, 0.39598095417022705, 0.3903292715549469, 0.3920735716819763, 0.38760286569595337, 0.38288775086402893, 0.3808309733867645, 0.3783007860183716, 0.38091301918029785, 0.37831294536590576, 0.3715618848800659, 0.36910322308540344, 0.3689269721508026, 0.3669376075267792, 0.36270231008529663, 0.3654395341873169, 0.36316072940826416, 0.35771459341049194, 0.3597266376018524, 0.36104652285575867, 0.35578253865242004, 0.35316547751426697, 0.35756102204322815, 0.3547775447368622, 0.3520742952823639, 0.3501962423324585, 0.35447895526885986, 0.34976762533187866, 0.35157331824302673, 0.34760770201683044, 0.34784573316574097, 0.3475494384765625, 0.3445473313331604, 0.34066063165664673, 0.33953845500946045, 0.3456626236438751, 0.34344762563705444, 0.3402725160121918, 0.34430062770843506, 0.34092947840690613, 0.34208670258522034, 0.33909058570861816], "val_accuracy": [0.534333348274231, 0.6556666493415833, 0.6756666898727417, 0.6926666498184204, 0.7196666598320007, 0.737666666507721, 0.7546666860580444, 0.7693333625793457, 0.7673333287239075, 0.7929999828338623, 0.7946666479110718, 0.8013333082199097, 0.8076666593551636, 0.8173333406448364, 0.8240000009536743, 0.8270000219345093, 0.8330000042915344, 0.8330000042915344, 0.8346666693687439, 0.8339999914169312, 0.8386666774749756, 0.8446666598320007, 0.843999981880188, 0.8479999899864197, 0.8483333587646484, 0.8473333120346069, 0.846666693687439, 0.8513333201408386, 0.8556666374206543, 0.8546666502952576, 0.8543333411216736, 0.8566666841506958, 0.8619999885559082, 0.8606666922569275, 0.8619999885559082, 0.8613333106040955, 0.8616666793823242, 0.8629999756813049, 0.8646666407585144, 0.8650000095367432, 0.8693333268165588, 0.8663333058357239, 0.8650000095367432, 0.8696666955947876, 0.871666669845581, 0.8663333058357239, 0.8696666955947876, 0.871999979019165, 0.871999979019165, 0.8709999918937683, 0.871999979019165, 0.8740000128746033, 0.8766666650772095, 0.8703333139419556, 0.8773333430290222, 0.8740000128746033, 0.8736666440963745, 0.8790000081062317, 0.8773333430290222, 0.8756666779518127, 0.8799999952316284, 0.8773333430290222, 0.8766666650772095, 0.8809999823570251, 0.8796666860580444, 0.8773333430290222, 0.8843333125114441, 0.8823333382606506, 0.8790000081062317, 0.8826666474342346, 0.8806666731834412, 0.8813333511352539]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 0], [39, 37], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 6, 3, 5], [0, 2, 0, 3, 1], [16, 16], [0, 0, 1], [0, 8], [0], [99], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 11, 6, 5, 2, 3, 2, 1, 1, 1, 0, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3039042949676514, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09694888442754745, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 9, 3, 4, 5], [0, 2, 0, 3], [16, 16, 13], [0, 1], [0], [0], [54], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 2, 0], [0, 0, 0, 3, 0, 0, 2, 1, 4, 0], [16, 99, 96, 99, 62, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 11, 7, 4, 3, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(beta, tf.math.square(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), beta), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 0, 5, 1], [0, 1, 0, 2, 0], [92, 39, 80], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4, 2, 2, 1, 2, 7, 4, 6, 9, 4, 4, 7, 6, 2, 2, 8, 6, 0, 3, 4, 6, 5, 7, 6, 7, 0, 3, 0, 6, 6, 1, 3, 3, 4, 1, 1, 8, 2, 2, 4, 1, 0, 2, 9, 2, 1, 9, 1, 4, 9, 2, 6, 4, 5, 1, 1, 8, 7, 0, 5, 2, 3, 8, 9, 2, 1, 6, 3, 4, 0, 2, 9, 2, 0, 4, 9], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0, 7, 0, 4, 4, 7, 1, 1, 5, 4, 0, 2, 0, 1, 6, 3, 3, 6, 1, 6, 1, 2, 3, 6, 7, 7, 5, 5, 2, 2, 3, 7, 0, 4, 7, 3, 5, 0, 0, 4, 3, 2, 3, 7, 2, 3, 3, 0, 2], [16, 99, 51, 99, 61, 1, 16, 46, 92, 92, 68, 95, 72, 68, 66, 80, 29, 14, 86]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 8, 5, 3, 10, 6, 4, 1, 2, 1, 1, 1, 145, 87, 58, 19], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.subtract(grad, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(grad, tf.math.pow(sigma, tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(sigma, alpha), beta)))), tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.sqrt(grad), tf.math.divide_no_nan(grad, tf.math.negative(grad))), tf.math.multiply(tf.math.pow(alpha, tf.math.divide_no_nan(alpha, grad)), tf.math.square(grad))), tf.math.add(tf.math.divide_no_nan(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), beta), tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(grad, tf.math.multiply(sigma, tf.math.pow(sigma, tf.math.subtract(grad, tf.math.subtract(alpha, tf.math.sqrt(tf.math.add(grad, tf.math.add(tf.math.pow(alpha, beta), tf.math.subtract(tf.math.negative(tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.add(tf.math.subtract(grad, grad), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.subtract(tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)), grad)), beta), tf.math.divide_no_nan(tf.math.pow(tf.math.square(beta), sigma), tf.math.subtract(tf.math.subtract(grad, tf.math.sqrt(tf.math.add(tf.math.negative(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.square(tf.math.add(grad, tf.math.multiply(tf.math.sqrt(sigma), grad))))))))))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(sigma, tf.math.pow(tf.math.negative(tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), beta)), tf.math.add(tf.math.negative(sigma), grad))), tf.math.pow(beta, sigma)), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), sigma)))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [50, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 2, 3, 0, 3, 5], [0, 2, 0, 3, 2], [16, 16], [0, 1], [0], [0], [99], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 4, 1, 4, 1, 4, 2, 8], [3, 0, 0, 3, 0, 0, 3, 1, 2, 0], [90, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 11, 6, 5, 2, 2, 1, 1, 1, 3, 1, 2, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3034849166870117, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}]