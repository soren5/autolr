[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8642857074737549, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221419334411621, 1.8597954511642456, 1.3843994140625, 1.0855833292007446, 0.9369658827781677, 0.8411825895309448, 0.7801524996757507, 0.7254288792610168, 0.6968014240264893, 0.6648040413856506, 0.6413844227790833, 0.6178863048553467, 0.5941566824913025, 0.5742475986480713, 0.5733323693275452, 0.546108067035675, 0.531352162361145, 0.5229335427284241, 0.513841450214386, 0.5087946057319641, 0.49539437890052795, 0.4807308316230774, 0.4786304831504822, 0.4663449227809906, 0.4663977026939392, 0.45195919275283813, 0.43854427337646484, 0.42866259813308716, 0.4229031205177307, 0.4171279966831207, 0.421364963054657, 0.4042279124259949, 0.4059908390045166, 0.3979707360267639, 0.3955172598361969, 0.38438135385513306, 0.3772275447845459, 0.38004881143569946, 0.37357327342033386, 0.3628922998905182, 0.3549789786338806, 0.3595165014266968, 0.35831743478775024, 0.34656137228012085, 0.3428645133972168, 0.33625057339668274, 0.33137986063957214, 0.32730185985565186, 0.3317280113697052, 0.31626856327056885, 0.31283873319625854, 0.3100844621658325, 0.3023940622806549, 0.3031955063343048, 0.2998632490634918, 0.2900698184967041, 0.287828654050827, 0.2828262448310852, 0.2836296856403351, 0.2785222828388214, 0.2716386020183563, 0.2746867835521698, 0.2639029622077942, 0.2624315321445465, 0.256049245595932, 0.2546425759792328, 0.25451281666755676, 0.24822063744068146, 0.25118231773376465, 0.23549038171768188, 0.23774518072605133, 0.23346160352230072, 0.23034246265888214, 0.22306497395038605, 0.22489286959171295, 0.22287018597126007, 0.2238723635673523], "accuracy": [0.28278958797454834, 0.49214106798171997, 0.5748249888420105, 0.6277902722358704, 0.6686038970947266, 0.6968696117401123, 0.7211728692054749, 0.7392682433128357, 0.7515519857406616, 0.7611940503120422, 0.7684586048126221, 0.7728173136711121, 0.7839123010635376, 0.7977809906005859, 0.7910447716712952, 0.8001585006713867, 0.8057059645652771, 0.811649739742279, 0.8150838613510132, 0.8164047002792358, 0.8264430165290833, 0.8334434032440186, 0.8333113193511963, 0.834632158279419, 0.8342359066009521, 0.8403117060661316, 0.8461233377456665, 0.8506141901016235, 0.8531237840652466, 0.8516708612442017, 0.8492933511734009, 0.8578787446022034, 0.8594637513160706, 0.8581429123878479, 0.8581429123878479, 0.8654074668884277, 0.8644828796386719, 0.8651432991027832, 0.8660678863525391, 0.8687095642089844, 0.8739928603172302, 0.8722757697105408, 0.8714832663536072, 0.8754457831382751, 0.8745211958885193, 0.8817857503890991, 0.8798044919967651, 0.8828424215316772, 0.8787478804588318, 0.8873332738876343, 0.8891823887825012, 0.8906353116035461, 0.8922203183174133, 0.8947299122810364, 0.8928807377815247, 0.8992207050323486, 0.8969752788543701, 0.9017302989959717, 0.89988112449646, 0.9034473896026611, 0.9019944667816162, 0.9026548862457275, 0.9041078090667725, 0.9075419306755066, 0.9060890078544617, 0.9080702662467957, 0.9076740145683289, 0.9111081957817078, 0.9101836085319519, 0.9152027368545532, 0.9199577569961548, 0.9166556596755981, 0.9158631563186646, 0.9189010858535767, 0.9186369180679321, 0.9207502603530884, 0.9211464524269104], "val_loss": [2.0397486686706543, 1.509777307510376, 1.042465329170227, 0.8360914587974548, 0.751583993434906, 0.6955772042274475, 0.6510869264602661, 0.6220382452011108, 0.5885128378868103, 0.5718159079551697, 0.5543546676635742, 0.5338344573974609, 0.5209576487541199, 0.512302815914154, 0.4993036389350891, 0.48859164118766785, 0.47987988591194153, 0.46941816806793213, 0.463066041469574, 0.454350084066391, 0.454047292470932, 0.4425411820411682, 0.4365910589694977, 0.4366690218448639, 0.4304214417934418, 0.4213225543498993, 0.4108114540576935, 0.41215023398399353, 0.4099563658237457, 0.4031934440135956, 0.39698565006256104, 0.3936064541339874, 0.39182597398757935, 0.3889003098011017, 0.3893094062805176, 0.3849765956401825, 0.3800477683544159, 0.3773290514945984, 0.3757634162902832, 0.37432166934013367, 0.36779630184173584, 0.3712442219257355, 0.3700845241546631, 0.3663187623023987, 0.37383797764778137, 0.36500975489616394, 0.36203327775001526, 0.3581094443798065, 0.35993075370788574, 0.3591678738594055, 0.3530323803424835, 0.35379451513290405, 0.3531428575515747, 0.3513466715812683, 0.34814807772636414, 0.35104072093963623, 0.3473324775695801, 0.346846342086792, 0.3470543920993805, 0.345013827085495, 0.3477035462856293, 0.34703966975212097, 0.348716676235199, 0.34587612748146057, 0.3435947299003601, 0.3433050215244293, 0.34942805767059326, 0.3475193679332733, 0.3440059423446655, 0.3476836681365967, 0.3427557647228241, 0.33776208758354187, 0.3474670946598053, 0.35028740763664246, 0.34967273473739624, 0.34134235978126526, 0.3396649658679962], "val_accuracy": [0.5643333196640015, 0.6626666784286499, 0.6919999718666077, 0.7193333506584167, 0.7366666793823242, 0.7526666522026062, 0.7630000114440918, 0.7693333625793457, 0.781000018119812, 0.7893333435058594, 0.7960000038146973, 0.8003333210945129, 0.8059999942779541, 0.8153333067893982, 0.8136666417121887, 0.8173333406448364, 0.8209999799728394, 0.8296666741371155, 0.8306666612625122, 0.8356666564941406, 0.8346666693687439, 0.8410000205039978, 0.8410000205039978, 0.8413333296775818, 0.8410000205039978, 0.8529999852180481, 0.8516666889190674, 0.8510000109672546, 0.8500000238418579, 0.8583333492279053, 0.8576666712760925, 0.8573333621025085, 0.8606666922569275, 0.8583333492279053, 0.8573333621025085, 0.859666645526886, 0.8629999756813049, 0.8663333058357239, 0.8666666746139526, 0.8646666407585144, 0.8700000047683716, 0.8669999837875366, 0.8706666827201843, 0.871999979019165, 0.8676666617393494, 0.8723333477973938, 0.871666669845581, 0.8709999918937683, 0.8736666440963745, 0.8766666650772095, 0.8763333559036255, 0.8773333430290222, 0.8706666827201843, 0.875333309173584, 0.878333330154419, 0.8776666522026062, 0.8793333172798157, 0.8769999742507935, 0.8759999871253967, 0.8786666393280029, 0.8799999952316284, 0.8796666860580444, 0.8763333559036255, 0.8759999871253967, 0.8809999823570251, 0.8776666522026062, 0.8799999952316284, 0.878333330154419, 0.8803333044052124, 0.8820000290870667, 0.8823333382606506, 0.8836666941642761, 0.8820000290870667, 0.8816666603088379, 0.8813333511352539, 0.8823333382606506, 0.8799999952316284]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [2, 2, 3, 0, 3, 0], [0, 1, 0, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [1, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [6, 6, 3, 6, 8, 1, 9, 1, 2, 8, 4], [1, 0, 0, 3, 0, 0, 1, 1, 2, 0], [16, 0, 52, 99, 61, 1]], "fitness": -0.7311428785324097, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 2, 1, 1, 1, 14, 8, 6, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.864843726158142, 1.1321935653686523, 0.9661065340042114, 1.0480777025222778, 1.1703516244888306, 1.6607511043548584, 1.749653935432434, 1.9715771675109863, 4.160869121551514, 8.861128807067871, 38.16421890258789, 129.63497924804688, 121.1109390258789], "accuracy": [0.36864352226257324, 0.6149781942367554, 0.6543388962745667, 0.6357152462005615, 0.6112799048423767, 0.54220050573349, 0.5040285587310791, 0.6044115424156189, 0.54220050573349, 0.40364548563957214, 0.19455818831920624, 0.11094967275857925, 0.09998679161071777], "val_loss": [0.9396812915802002, 0.9073888063430786, 0.8163487911224365, 0.8448444604873657, 0.8315291404724121, 1.6973423957824707, 0.949856698513031, 1.6864027976989746, 3.555558919906616, 7.021876811981201, 47.644683837890625, 88.3773193359375, 180.4562225341797], "val_accuracy": [0.6790000200271606, 0.6880000233650208, 0.6819999814033508, 0.6903333067893982, 0.7089999914169312, 0.4846666753292084, 0.6823333501815796, 0.7226666808128357, 0.4779999852180481, 0.4583333432674408, 0.21066667139530182, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 8], [0, 1, 0, 2], [39, 99], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 3, 5, 3, 5], [0, 2, 0, 1], [16, 16], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 4, 4, 2, 8], [0, 6, 4, 1, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 3, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2, 6], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 2, 5, 3, 2, 1, 10, 5, 5, 1, 25, 13, 12, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.pow(grad, tf.math.add(alpha, tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(beta, tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), beta))))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 0], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 4, 3, 0, 0, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 5, 6, 8, 1, 4, 1, 4, 0, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 53, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 8, 5, 3, 2, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 2, 4, 3, 4, 5, 7], [0, 1, 0, 2, 1, 0, 0, 0, 0], [39, 39, 59, 97, 47, 92], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 4, 3, 8], [0, 2, 0, 0], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 5, 3, 6, 8, 1, 4, 1, 4, 4, 8, 0], [0, 0, 0, 3, 4, 0, 3, 1, 4, 1], [16, 99, 81, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 11, 9, 6, 2, 1, 1, 1, 2, 1, 1, 1, 21, 12, 9, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.multiply(tf.math.pow(tf.math.square(alpha), tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.pow(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.negative(alpha)))))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}]