[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8722857236862183, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2233190536499023, 1.862446904182434, 1.379624843597412, 1.0923622846603394, 0.9190784096717834, 0.831186056137085, 0.7717211246490479, 0.710746169090271, 0.6661291122436523, 0.648539125919342, 0.6202702522277832, 0.5998305678367615, 0.5800559520721436, 0.5692379474639893, 0.5439703464508057, 0.5306346416473389, 0.5132831931114197, 0.5041556358337402, 0.4954078495502472, 0.48609769344329834, 0.47211146354675293, 0.46606120467185974, 0.4545843303203583, 0.44309157133102417, 0.4348627030849457, 0.43203383684158325, 0.4190392792224884, 0.41496920585632324, 0.40378591418266296, 0.40982452034950256, 0.39889395236968994, 0.3876517713069916, 0.3870127201080322, 0.37351274490356445, 0.37148186564445496, 0.3700883686542511, 0.35799849033355713, 0.3607054650783539, 0.35471105575561523, 0.34749510884284973, 0.3448851704597473, 0.34477320313453674, 0.33305251598358154, 0.32465660572052, 0.3187386393547058, 0.32118526101112366, 0.3194552958011627, 0.3107183873653412, 0.3010109066963196, 0.307197630405426, 0.29498711228370667, 0.2875177562236786, 0.28669896721839905, 0.2817244827747345, 0.27623188495635986, 0.2796744704246521, 0.2752930819988251, 0.2686104476451874, 0.2614973187446594, 0.25776323676109314, 0.2559538781642914, 0.2499905228614807], "accuracy": [0.2705058753490448, 0.49927353858947754, 0.568749189376831, 0.6197332143783569, 0.669792652130127, 0.7045304179191589, 0.7185312509536743, 0.7464007139205933, 0.7576277852058411, 0.7642319202423096, 0.7777044177055359, 0.7821952104568481, 0.7913089394569397, 0.7923656105995178, 0.8063663840293884, 0.8099326491355896, 0.8170651197433472, 0.8181217908859253, 0.8252542614936829, 0.821820080280304, 0.8309338092803955, 0.8358209133148193, 0.8409721255302429, 0.842028796672821, 0.8428213000297546, 0.8477083444595337, 0.8543124794960022, 0.8548408150672913, 0.8565579056739807, 0.8568220734596252, 0.8618412613868713, 0.8627657890319824, 0.8656716346740723, 0.8681812286376953, 0.8730682730674744, 0.8721436858177185, 0.8746532797813416, 0.873860776424408, 0.8772949576377869, 0.8771628737449646, 0.873860776424408, 0.878879964351654, 0.878879964351654, 0.8829745054244995, 0.8858803510665894, 0.8869370222091675, 0.8908994793891907, 0.889050304889679, 0.8912957310676575, 0.889050304889679, 0.895918607711792, 0.8975036144256592, 0.9000132083892822, 0.9037115573883057, 0.9026548862457275, 0.9015982151031494, 0.901862382888794, 0.9058248400688171, 0.9049002528190613, 0.9099194407463074, 0.9085986018180847, 0.9120327830314636], "val_loss": [2.040243148803711, 1.5165650844573975, 1.045781135559082, 0.8340643048286438, 0.7415506839752197, 0.6883050799369812, 0.6463425159454346, 0.607022762298584, 0.5860865712165833, 0.5646552443504333, 0.5452216267585754, 0.5292307734489441, 0.5196359753608704, 0.5099305510520935, 0.5010362267494202, 0.48451435565948486, 0.47818899154663086, 0.46959158778190613, 0.46644607186317444, 0.45475873351097107, 0.44810739159584045, 0.439965158700943, 0.43704360723495483, 0.4332600235939026, 0.4253336191177368, 0.41932982206344604, 0.4164583683013916, 0.4082027077674866, 0.40756481885910034, 0.4058398902416229, 0.3986016511917114, 0.3990528881549835, 0.39179569482803345, 0.38967394828796387, 0.3921187222003937, 0.38308247923851013, 0.38221508264541626, 0.37838688492774963, 0.37913110852241516, 0.3764616847038269, 0.3690432906150818, 0.3664901554584503, 0.3650329113006592, 0.3677624464035034, 0.35941120982170105, 0.3647415339946747, 0.3570159375667572, 0.3581992983818054, 0.3572436571121216, 0.35375261306762695, 0.35767418146133423, 0.3523189425468445, 0.34758129715919495, 0.34543880820274353, 0.3460155129432678, 0.34778791666030884, 0.3430112302303314, 0.34534335136413574, 0.3424069285392761, 0.3487655520439148, 0.34070613980293274, 0.3414263427257538], "val_accuracy": [0.5296666622161865, 0.6556666493415833, 0.675000011920929, 0.7039999961853027, 0.7276666760444641, 0.7429999709129333, 0.7636666893959045, 0.7706666588783264, 0.7773333191871643, 0.7860000133514404, 0.796999990940094, 0.8056666851043701, 0.8136666417121887, 0.8146666884422302, 0.8176666498184204, 0.8246666789054871, 0.8293333053588867, 0.8286666870117188, 0.8323333263397217, 0.8353333473205566, 0.840666651725769, 0.8376666903495789, 0.8389999866485596, 0.8420000076293945, 0.8450000286102295, 0.8483333587646484, 0.8433333039283752, 0.8476666808128357, 0.8493333458900452, 0.8483333587646484, 0.8519999980926514, 0.8536666631698608, 0.8553333282470703, 0.8550000190734863, 0.8529999852180481, 0.8560000061988831, 0.8566666841506958, 0.8606666922569275, 0.8600000143051147, 0.8586666584014893, 0.8629999756813049, 0.8633333444595337, 0.8629999756813049, 0.8669999837875366, 0.8690000176429749, 0.8679999709129333, 0.8653333187103271, 0.8700000047683716, 0.8686666488647461, 0.8673333525657654, 0.8679999709129333, 0.8713333606719971, 0.8706666827201843, 0.8740000128746033, 0.8726666569709778, 0.8693333268165588, 0.8773333430290222, 0.8743333220481873, 0.8763333559036255, 0.874666690826416, 0.8763333559036255, 0.875333309173584]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 5, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 2, 3, 1, 3, 5, 6, 1, 7], [0, 2, 0, 3, 3, 1, 4, 5], [16, 16], [0, 1], [0], [0], [2], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 0, 9], [4, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.math.add(grad, alpha), grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), grad)))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}, "mapping_values": [1, 6, 4, 2, 0, 17, 9, 8, 2, 2, 1, 1, 1, 21, 12, 9, 5], "tree_depth": 20}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3, 2, 6, 1, 7, 1, 2, 8, 9, 2, 8, 4, 1, 3, 0, 5, 1, 1, 3, 2, 6, 4, 1, 0, 1, 2, 2, 3], [0, 0, 0, 2, 1, 3, 1, 1, 3, 0, 1, 0, 0, 0, 3, 0, 1, 2, 0, 1, 2, 2, 1, 0], [39, 39, 54, 70, 1, 84, 31, 36, 60, 95, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 9, 0, 3, 5], [1, 3, 0, 3], [16, 16], [0, 1], [0], [3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 5, 2, 2], [0, 0, 0, 3, 1, 0, 3, 1, 2, 3], [16, 99, 96, 99, 44, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 56, 32, 24, 11, 5, 4, 1, 1, 2, 1, 1, 0, 17, 9, 8, 4], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.sqrt(alpha))), alpha), tf.math.pow(tf.math.subtract(grad, tf.math.multiply(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.subtract(tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.negative(tf.math.subtract(alpha, tf.math.add(grad, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(alpha, grad), grad))), alpha), tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(alpha, tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 8, 3], [0, 1, 0, 0], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [0, 2, 3, 4, 3, 1, 7, 9], [0, 2, 0, 3, 4, 2], [16, 52, 29], [0, 1, 0, 0, 0, 1], [2, 1, 8, 9], [0, 0], [99, 42, 63], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 8, 3, 6, 8, 1, 2, 2, 4, 2, 8], [0, 0, 0, 3, 0, 0, 2, 1, 4, 0], [16, 99, 96, 4, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 14, 8, 6, 3, 6, 4, 2, 3, 1, 0, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, grad))), tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30348801612854, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2, 2], [39, 29], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 8, 8, 1, 4, 1, 4, 8, 8, 6], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [2, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 8, 4, 4, 2, 2, 1, 1, 1, 21, 12, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(tf.math.pow(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma)), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}]