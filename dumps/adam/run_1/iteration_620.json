[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8648571372032166, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223381519317627, 1.8709620237350464, 1.3968069553375244, 1.09785795211792, 0.9456009864807129, 0.8443295359611511, 0.7617764472961426, 0.7190629839897156, 0.6919849514961243, 0.6557618975639343, 0.6394848823547363, 0.6091869473457336, 0.5900813937187195, 0.5708467364311218, 0.5582304000854492, 0.5462480783462524, 0.5309075117111206, 0.5209518074989319, 0.5078997015953064, 0.49695834517478943, 0.4788134694099426, 0.4742755591869354, 0.46567413210868835, 0.4631759822368622, 0.44790908694267273, 0.4344038963317871, 0.43523675203323364, 0.4237467646598816, 0.4184289872646332, 0.40521982312202454, 0.40683528780937195, 0.39838603138923645, 0.39823266863822937, 0.3935481011867523, 0.38171523809432983, 0.37710922956466675, 0.367975115776062, 0.35602375864982605, 0.35793444514274597, 0.3528079092502594, 0.34170159697532654, 0.34526267647743225, 0.3389221429824829, 0.33109501004219055, 0.3280066251754761, 0.3221414387226105, 0.32173752784729004, 0.31549370288848877, 0.3085694909095764, 0.30405813455581665, 0.3023945689201355, 0.29858919978141785, 0.29318565130233765, 0.28835299611091614, 0.28458741307258606, 0.2809695303440094, 0.2760930061340332, 0.27667513489723206, 0.26886725425720215, 0.2709381580352783, 0.2569791078567505, 0.25987985730171204, 0.2554028332233429, 0.24788939952850342], "accuracy": [0.27539294958114624, 0.4896314740180969, 0.5639941692352295, 0.6129969358444214, 0.6662263870239258, 0.6976621150970459, 0.7250033020973206, 0.7397965788841248, 0.7493065595626831, 0.7601373791694641, 0.7683265209197998, 0.7798177003860474, 0.7917051911354065, 0.7930260300636292, 0.8012151718139648, 0.805177628993988, 0.813498854637146, 0.8201030492782593, 0.8165367841720581, 0.8203672170639038, 0.829216718673706, 0.8345000743865967, 0.8350284099578857, 0.8335754871368408, 0.8376700282096863, 0.847840428352356, 0.8453308939933777, 0.8518029451370239, 0.8507462739944458, 0.8588033318519592, 0.8515387773513794, 0.8582749962806702, 0.8580108284950256, 0.8594637513160706, 0.8621054291725159, 0.8664641380310059, 0.8696341514587402, 0.8747853636741638, 0.8725399374961853, 0.8726720213890076, 0.8817857503890991, 0.8753136992454529, 0.8771628737449646, 0.883238673210144, 0.8841632604598999, 0.8857482671737671, 0.8849557638168335, 0.8885219693183899, 0.8942015767097473, 0.8936732411384583, 0.8938053250312805, 0.8889182209968567, 0.8944657444953918, 0.8971073627471924, 0.8982961177825928, 0.8996169567108154, 0.901862382888794, 0.900409460067749, 0.9010698795318604, 0.9021265506744385, 0.9097873568534851, 0.9054285883903503, 0.9060890078544617, 0.913089394569397], "val_loss": [2.045764684677124, 1.523728370666504, 1.0580034255981445, 0.8617751598358154, 0.7706742286682129, 0.7095808982849121, 0.6570168733596802, 0.625458836555481, 0.6060282588005066, 0.5776047110557556, 0.566739022731781, 0.5441057085990906, 0.5331294536590576, 0.5183032155036926, 0.508583128452301, 0.4966293275356293, 0.4863651394844055, 0.47753870487213135, 0.47235116362571716, 0.4635978043079376, 0.45477986335754395, 0.44907304644584656, 0.4419423043727875, 0.43993285298347473, 0.4341707229614258, 0.4277881681919098, 0.4275529086589813, 0.4176638722419739, 0.41378235816955566, 0.40793734788894653, 0.4035158157348633, 0.40282168984413147, 0.4065925180912018, 0.40204882621765137, 0.39268216490745544, 0.38920214772224426, 0.39065414667129517, 0.38445350527763367, 0.389552503824234, 0.3826003968715668, 0.3772284686565399, 0.37510648369789124, 0.37154680490493774, 0.37049397826194763, 0.3661068379878998, 0.36910757422447205, 0.3667067885398865, 0.3630915582180023, 0.3609236180782318, 0.3591638505458832, 0.36542654037475586, 0.35736677050590515, 0.3579683303833008, 0.3558303713798523, 0.3557426631450653, 0.36636221408843994, 0.35065194964408875, 0.3491058051586151, 0.35321465134620667, 0.34963664412498474, 0.3468317985534668, 0.34857413172721863, 0.3487934172153473, 0.3510236144065857], "val_accuracy": [0.5353333353996277, 0.6446666717529297, 0.6763333082199097, 0.6976666450500488, 0.721666693687439, 0.7446666955947876, 0.7606666684150696, 0.7703333497047424, 0.7723333239555359, 0.7863333225250244, 0.7900000214576721, 0.8036666512489319, 0.8009999990463257, 0.809333324432373, 0.8173333406448364, 0.8216666579246521, 0.82833331823349, 0.8336666822433472, 0.8343333601951599, 0.8336666822433472, 0.8376666903495789, 0.8433333039283752, 0.8443333506584167, 0.8463333249092102, 0.8513333201408386, 0.8463333249092102, 0.8506666421890259, 0.8560000061988831, 0.8546666502952576, 0.859333336353302, 0.8600000143051147, 0.8636666536331177, 0.856333315372467, 0.8539999723434448, 0.8646666407585144, 0.8676666617393494, 0.8683333396911621, 0.8633333444595337, 0.8700000047683716, 0.8683333396911621, 0.8713333606719971, 0.8700000047683716, 0.8726666569709778, 0.871666669845581, 0.8736666440963745, 0.8756666779518127, 0.871666669845581, 0.8736666440963745, 0.8773333430290222, 0.875, 0.8773333430290222, 0.8759999871253967, 0.8776666522026062, 0.875333309173584, 0.8826666474342346, 0.8756666779518127, 0.878333330154419, 0.8799999952316284, 0.8840000033378601, 0.8796666860580444, 0.8836666941642761, 0.8799999952316284, 0.8823333382606506, 0.8806666731834412]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 3, 6, 6, 1, 8, 1, 4, 2, 8, 6, 1, 5, 1, 9, 5, 7, 1], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 4, 4, 3], [16, 47, 67, 99, 17, 1, 2]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), sigma)), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.square(tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(grad, tf.math.subtract(grad, sigma)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}, "mapping_values": [1, 9, 5, 4, 2, 7, 4, 3, 1, 1, 1, 0, 1, 33, 19, 14, 7], "tree_depth": 20}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 2, 1, 0, 3, 6, 9, 5], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 2, 2, 3], [16, 16], [0, 1], [8], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 0, 3, 8, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 8, 4, 2, 8, 4, 4, 1, 2, 1, 1, 1, 8, 5, 3, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [7.562752723693848, 59.160621643066406, 204.18231201171875, 502.98114013671875, 1018.57177734375, 1787.183349609375], "accuracy": [0.10315678268671036, 0.09985470771789551, 0.09919429570436478, 0.10130762308835983, 0.10249637067317963, 0.1010434553027153], "val_loss": [20.539663314819336, 95.83078002929688, 265.0390319824219, 576.80908203125, 1079.505615234375, 1821.948974609375], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [5], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 1, 8, 5, 1, 3], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0, 1, 6, 6, 5], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 10, 6, 4, 1, 2, 1, 1, 1, 31, 17, 14, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.sqrt(beta), tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))))), alpha), tf.math.subtract(tf.math.multiply(grad, grad), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [87, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [1], [0, 0], [99, 56], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 3, 0, 1, 5, 6, 1], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7, 1, 3, 0], [16, 99, 96, 99, 61, 91, 20]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 9, 5, 4, 2, 3, 1, 2, 2, 31, 17, 14, 7], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(sigma), alpha)), tf.math.subtract(tf.math.square(beta), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(grad, tf.math.subtract(alpha, sigma))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}]