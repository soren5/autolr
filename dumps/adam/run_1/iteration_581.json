[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8700000047683716, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223207473754883, 1.874555230140686, 1.4023561477661133, 1.1018882989883423, 0.9487174153327942, 0.8540745973587036, 0.7915565371513367, 0.7373017072677612, 0.7067566514015198, 0.667879581451416, 0.643744707107544, 0.6251325607299805, 0.6089351177215576, 0.5952621102333069, 0.5741258263587952, 0.5607143640518188, 0.549471378326416, 0.5369402170181274, 0.5194963216781616, 0.5156213045120239, 0.503559947013855, 0.49353837966918945, 0.4852653443813324, 0.4769558012485504, 0.4648672044277191, 0.45781663060188293, 0.44790351390838623, 0.43862384557724, 0.43493086099624634, 0.4295111298561096, 0.425613135099411, 0.4140220582485199, 0.41052496433258057, 0.39968231320381165, 0.39586588740348816, 0.3877320885658264, 0.37997952103614807, 0.38000068068504333, 0.3727244734764099, 0.36187639832496643], "accuracy": [0.2786950170993805, 0.47232863306999207, 0.5551446080207825, 0.6180161237716675, 0.6586976647377014, 0.691850483417511, 0.715889573097229, 0.7283053994178772, 0.7423061728477478, 0.7617223858833313, 0.765949010848999, 0.7711002230644226, 0.7773081660270691, 0.7862898111343384, 0.7951393723487854, 0.7936864495277405, 0.8001585006713867, 0.8087438941001892, 0.8115176558494568, 0.8178576231002808, 0.8214238286018372, 0.821820080280304, 0.8248580098152161, 0.83119797706604, 0.8345000743865967, 0.8334434032440186, 0.8385946154594421, 0.8461233377456665, 0.8437458872795105, 0.8470479249954224, 0.846387505531311, 0.854708731174469, 0.8540483713150024, 0.8562937378883362, 0.8607845902442932, 0.8599920868873596, 0.8669924736022949, 0.8648791313171387, 0.8702945709228516, 0.8712190985679626], "val_loss": [2.04030442237854, 1.5098930597305298, 1.0354598760604858, 0.8234921097755432, 0.7316847443580627, 0.6769525408744812, 0.6296769976615906, 0.5915051102638245, 0.5672924518585205, 0.545870304107666, 0.5229787826538086, 0.5113610029220581, 0.503204882144928, 0.4820235073566437, 0.47325098514556885, 0.4619866907596588, 0.4491101801395416, 0.44560930132865906, 0.43302223086357117, 0.4263823926448822, 0.41738465428352356, 0.4148464500904083, 0.4086439907550812, 0.40055331587791443, 0.39770272374153137, 0.38910332322120667, 0.3847004473209381, 0.3823245167732239, 0.3766932487487793, 0.373701810836792, 0.3731343448162079, 0.36467450857162476, 0.36056259274482727, 0.3564940094947815, 0.35482096672058105, 0.35469141602516174, 0.351772665977478, 0.35614436864852905, 0.3470302224159241, 0.3387332856655121], "val_accuracy": [0.5213333368301392, 0.6523333191871643, 0.6893333196640015, 0.7106666564941406, 0.7383333444595337, 0.7613333463668823, 0.7713333368301392, 0.7883333563804626, 0.7953333258628845, 0.8003333210945129, 0.812666654586792, 0.8146666884422302, 0.8113333582878113, 0.8296666741371155, 0.82833331823349, 0.8296666741371155, 0.8349999785423279, 0.8410000205039978, 0.8446666598320007, 0.847000002861023, 0.847000002861023, 0.8519999980926514, 0.8513333201408386, 0.8583333492279053, 0.8560000061988831, 0.8603333234786987, 0.8633333444595337, 0.8653333187103271, 0.8653333187103271, 0.8706666827201843, 0.8659999966621399, 0.8736666440963745, 0.8703333139419556, 0.8730000257492065, 0.8766666650772095, 0.8726666569709778, 0.871666669845581, 0.871999979019165, 0.8736666440963745, 0.8759999871253967]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 2, 1, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 8, 9, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 5, 1, 2, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 5, 4, 1, 2, 2, 1, 1, 1, 5, 2, 3, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3031013011932373, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 4, 3, 3], [0, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 0, 4], [0, 2, 0, 3, 1], [16, 43], [0, 0, 1, 1], [0, 3], [0, 6], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [8, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 1, 4], [16, 99, 64, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 12, 7, 5, 2, 4, 2, 2, 1, 2, 1, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.negative(tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), grad)), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303706169128418, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3, 9], [0, 1, 0, 2], [33, 39, 35], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 8], [0, 2, 0, 0], [29, 44, 73], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [0, 6, 2, 7, 2, 0, 3, 2, 9, 7, 0, 8, 9, 4, 7, 7, 9, 8, 6, 6, 7, 7, 7, 6, 4, 5, 2, 9, 6, 9, 1, 2, 5, 8, 5, 8, 2, 8, 3, 3, 6, 4, 6, 5, 1, 2, 6, 3, 5, 1, 2, 3, 5, 3, 4, 6, 1, 1, 5, 1, 7, 6, 9, 6, 1, 3, 3, 8, 4, 8, 2, 8, 8, 0, 9, 7, 7, 7, 4, 0], [0, 1, 4, 7, 0, 2, 0, 5, 6, 0, 7, 0, 1, 5, 2, 1, 6, 1, 4, 7, 3, 2, 7, 5, 4, 3, 1, 7, 5, 0, 2, 0, 5, 5, 3, 0, 0, 7, 6, 7, 2, 1, 3, 0, 5, 3], [99, 31, 98, 22, 7, 5, 42, 47, 89, 60, 15, 10, 11, 81, 39, 26, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 0, 2, 4, 1, 4, 2, 2], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 3, 11, 7, 4, 3, 126, 80, 46, 17, 22, 11, 11, 6], "tree_depth": 51, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.sqrt(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.pow(alpha, grad))), grad)), tf.math.add(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.math.add(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.subtract(grad, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.square(alpha)), grad), beta))), alpha), tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.pow(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.subtract(tf.math.add(grad, tf.math.divide_no_nan(sigma, tf.math.multiply(beta, tf.math.square(tf.math.subtract(tf.math.add(tf.math.multiply(grad, tf.math.square(tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(grad, grad), tf.math.subtract(sigma, alpha)), grad))), tf.math.subtract(grad, tf.math.square(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.math.pow(tf.math.sqrt(grad), tf.math.add(grad, sigma))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), tf.math.add(grad, grad))))))), grad))))), tf.math.add(beta, alpha)), sigma)), tf.math.add(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)), sigma))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3], [1, 1, 0, 0, 0], [39, 39, 90], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 8, 3, 5, 3, 3, 7, 3, 4, 3, 2, 6, 8, 6], [0, 2, 0, 3, 1, 5, 3, 2, 4, 4, 1, 4, 0], [16, 16, 86], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 3, 4, 6, 0, 1, 4, 1, 4, 2, 8, 7], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 29, 16, 13, 3, 2, 1, 1, 1, 23, 12, 11, 6], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(alpha, alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.multiply(tf.math.pow(alpha, tf.math.multiply(grad, grad)), tf.math.add(beta, grad)), grad)))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(alpha, grad)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.add(alpha, beta))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}]