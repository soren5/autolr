[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8674286007881165, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2252769470214844, 1.869177222251892, 1.3905589580535889, 1.0964795351028442, 0.9449875354766846, 0.8542160987854004, 0.7810652852058411, 0.7404448390007019, 0.698199450969696, 0.6697124242782593, 0.647858202457428, 0.6181690096855164, 0.6025650501251221, 0.5757381319999695, 0.5566607117652893, 0.5553849935531616, 0.5320928692817688, 0.52508544921875, 0.5171141028404236, 0.5016401410102844, 0.4897032380104065, 0.4858350157737732, 0.4681147038936615, 0.4583144783973694, 0.4525306820869446, 0.4454646706581116, 0.42909350991249084, 0.43243253231048584, 0.4308241307735443, 0.4124230742454529, 0.40847665071487427, 0.40252068638801575, 0.3949160575866699, 0.3893921971321106, 0.39532262086868286, 0.3895101547241211, 0.37789979577064514, 0.3706969916820526, 0.3677317500114441, 0.35635045170783997, 0.3584471642971039, 0.3560571074485779, 0.3435347080230713, 0.34200236201286316, 0.3400922417640686, 0.3334474265575409, 0.3361729681491852, 0.32929450273513794, 0.31890252232551575, 0.31973785161972046, 0.3131505250930786, 0.3093174397945404, 0.300497442483902, 0.29490333795547485, 0.2924928367137909], "accuracy": [0.26984545588493347, 0.4791969358921051, 0.5721833109855652, 0.6147140264511108, 0.6672830581665039, 0.6909258961677551, 0.7207766771316528, 0.7273808121681213, 0.7500990629196167, 0.759609043598175, 0.7643640041351318, 0.778761088848114, 0.7807422876358032, 0.7950072884559631, 0.8018755912780762, 0.8024039268493652, 0.8076872229576111, 0.81112140417099, 0.8133667707443237, 0.8204993009567261, 0.8286884427070618, 0.8280280232429504, 0.8355567455291748, 0.8409721255302429, 0.8391229510307312, 0.8429533839225769, 0.8508783578872681, 0.8455950617790222, 0.8518029451370239, 0.854708731174469, 0.8568220734596252, 0.857218325138092, 0.8595958352088928, 0.8654074668884277, 0.8558974862098694, 0.8607845902442932, 0.8650112152099609, 0.8688416481018066, 0.8709549307823181, 0.8776912093162537, 0.8721436858177185, 0.8737286925315857, 0.8813894987106323, 0.8774270415306091, 0.8778232932090759, 0.8820499181747437, 0.8809932470321655, 0.8786157965660095, 0.8891823887825012, 0.8879936337471008, 0.8908994793891907, 0.8922203183174133, 0.8927486538887024, 0.895918607711792, 0.8967111110687256], "val_loss": [2.0408480167388916, 1.513984203338623, 1.0505855083465576, 0.8514803647994995, 0.7642492055892944, 0.7064142227172852, 0.6663586497306824, 0.6340501308441162, 0.6022161245346069, 0.5786369442939758, 0.5608893632888794, 0.5422520637512207, 0.5322962999343872, 0.5123037695884705, 0.5024169683456421, 0.4940266013145447, 0.4878953993320465, 0.47446370124816895, 0.4654538035392761, 0.46117764711380005, 0.45314502716064453, 0.4466824531555176, 0.44115129113197327, 0.4332897663116455, 0.43196532130241394, 0.42378494143486023, 0.4177357852458954, 0.4177347719669342, 0.41023027896881104, 0.41131871938705444, 0.4041465222835541, 0.4008201062679291, 0.3989706337451935, 0.40011996030807495, 0.39401790499687195, 0.389672189950943, 0.3889665901660919, 0.3857417702674866, 0.3824726939201355, 0.3776717185974121, 0.37483450770378113, 0.3732815682888031, 0.37812715768814087, 0.37260702252388, 0.3696669042110443, 0.3699454665184021, 0.36462506651878357, 0.3656386733055115, 0.3714970648288727, 0.36095041036605835, 0.35865873098373413, 0.3648969829082489, 0.36195313930511475, 0.35860735177993774, 0.3535313308238983], "val_accuracy": [0.5306666493415833, 0.6660000085830688, 0.6713333129882812, 0.7046666741371155, 0.734000027179718, 0.7523333430290222, 0.762333333492279, 0.7596666812896729, 0.7799999713897705, 0.7896666526794434, 0.7963333129882812, 0.8029999732971191, 0.8086666464805603, 0.8166666626930237, 0.8230000138282776, 0.8220000267028809, 0.8259999752044678, 0.8266666531562805, 0.8330000042915344, 0.8379999995231628, 0.8363333344459534, 0.8403333425521851, 0.8410000205039978, 0.8489999771118164, 0.8456666469573975, 0.8496666550636292, 0.8500000238418579, 0.8553333282470703, 0.8526666760444641, 0.8513333201408386, 0.8583333492279053, 0.8613333106040955, 0.8579999804496765, 0.859333336353302, 0.859666645526886, 0.8603333234786987, 0.862333357334137, 0.8640000224113464, 0.8650000095367432, 0.8673333525657654, 0.8690000176429749, 0.8686666488647461, 0.8646666407585144, 0.8709999918937683, 0.8679999709129333, 0.8696666955947876, 0.8736666440963745, 0.8683333396911621, 0.8679999709129333, 0.8799999952316284, 0.8743333220481873, 0.8700000047683716, 0.8740000128746033, 0.8766666650772095, 0.8793333172798157]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [89, 87], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 7], [0, 2, 0, 3, 1], [16, 16], [1, 1], [0], [0], [34], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 2, 4, 2, 6, 0, 7, 0, 1, 7, 0], [0, 4, 0, 3, 0, 0, 4, 1, 2, 0, 0, 2, 6, 4], [77, 99, 96, 99, 22, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 12, 7, 5, 2, 1, 0, 1, 1, 31, 17, 14, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.add(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), grad)), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.negative(beta))), tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(grad))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [5, 4, 3, 0, 3], [0, 1, 2, 2], [49, 39], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 8, 5, 0, 3, 5], [0, 2, 0, 3], [94, 16], [1, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 3, 1, 4, 1, 4, 2, 5], [0, 0, 0, 1, 3, 4, 3, 1, 2, 0], [41, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 4, 3, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.pow(tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303487777709961, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 1, 0, 6, 7, 6, 6, 1, 7, 6, 5, 7, 1, 4, 6], [0, 1, 0, 2, 1, 2, 2, 1, 0, 2, 1, 2, 0, 0, 2], [39, 39, 0, 68, 60], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 4, 3, 0, 3, 2, 0], [0, 2, 0, 3, 2], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 3, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 3, 2, 0], [16, 99, 96, 99, 24, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 17, 15, 5, 12, 7, 5, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(grad, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), alpha), grad)))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), grad), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), sigma)))), sigma), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 5, 5], [3, 2, 2, 3], [16, 16], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 3, 8, 5, 0, 8], [0, 0], [99, 85], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 8, 9], [0, 0, 0, 2, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1, 9]], "fitness": -0.0925714299082756, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.square(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.square(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(beta, tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.math.add(tf.math.sqrt(alpha), beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.310216188430786, 2.310555934906006, 2.3106517791748047, 2.310518264770508, 2.309542655944824, 2.309662103652954], "accuracy": [0.0936468094587326, 0.09140139818191528, 0.09430722147226334, 0.08994849026203156, 0.09879804402589798, 0.09021265059709549], "val_loss": [2.308936595916748, 2.308936595916748, 2.308936595916748, 2.308936595916748, 2.308936595916748, 2.308936595916748], "val_accuracy": [0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654]}, "mapping_values": [1, 7, 4, 3, 2, 8, 5, 3, 0, 9, 7, 2, 2, 23, 13, 10, 7], "tree_depth": 20}]