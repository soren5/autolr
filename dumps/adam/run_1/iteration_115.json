[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8645714521408081, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.220529556274414, 1.8637992143630981, 1.3833425045013428, 1.0848544836044312, 0.9433711767196655, 0.8362825512886047, 0.7606104016304016, 0.7274051904678345, 0.6846262812614441, 0.6649460792541504, 0.636883556842804, 0.6154411435127258, 0.5923123359680176, 0.5786367058753967, 0.5579009056091309, 0.5454450249671936, 0.5274273753166199, 0.5208994150161743, 0.5114368796348572, 0.5098960995674133, 0.4924704432487488, 0.4904344081878662, 0.4698200523853302, 0.45797672867774963, 0.452681303024292, 0.4378463327884674, 0.4360436797142029, 0.4323865473270416, 0.4280639588832855, 0.417257696390152, 0.4106384813785553, 0.40510979294776917, 0.39380165934562683, 0.3958421051502228, 0.37935885787010193, 0.37851354479789734, 0.3736152648925781, 0.36778807640075684, 0.3618672788143158, 0.3524133265018463, 0.3501425087451935, 0.34320899844169617, 0.34645935893058777, 0.34176114201545715, 0.3436983823776245, 0.3331736922264099, 0.32198578119277954, 0.3214963674545288, 0.3115259110927582, 0.31077444553375244, 0.30935385823249817, 0.30774176120758057, 0.29993587732315063], "accuracy": [0.27182671427726746, 0.4846123456954956, 0.563730001449585, 0.6135252714157104, 0.6635847091674805, 0.7016246318817139, 0.72672039270401, 0.7391361594200134, 0.7494386434555054, 0.7638356685638428, 0.7725531458854675, 0.7770439982414246, 0.7891955971717834, 0.787082314491272, 0.7991018295288086, 0.8029322624206543, 0.8078193068504333, 0.8117818236351013, 0.8168009519577026, 0.8137630224227905, 0.8238013386726379, 0.824329674243927, 0.8356888294219971, 0.8343679904937744, 0.8428213000297546, 0.8445383906364441, 0.8432175517082214, 0.8486329317092896, 0.8457271456718445, 0.8520671129226685, 0.8548408150672913, 0.8561616539955139, 0.8615770936012268, 0.8565579056739807, 0.8632941246032715, 0.8673887252807617, 0.8716153502464294, 0.8709549307823181, 0.8732003569602966, 0.8735966086387634, 0.8722757697105408, 0.8762382864952087, 0.8774270415306091, 0.8732003569602966, 0.8758420348167419, 0.8795403242111206, 0.8841632604598999, 0.8819178342819214, 0.8899748921394348, 0.8877294659614563, 0.8882578015327454, 0.8899748921394348, 0.8918240666389465], "val_loss": [2.0389468669891357, 1.5127612352371216, 1.04609215259552, 0.851157546043396, 0.7591679692268372, 0.6961527466773987, 0.6499103307723999, 0.6254285573959351, 0.5932680368423462, 0.5727826952934265, 0.5621927380561829, 0.5408213138580322, 0.5295116901397705, 0.5159507393836975, 0.5078739523887634, 0.49959856271743774, 0.4969308376312256, 0.49025601148605347, 0.47510775923728943, 0.46481794118881226, 0.46154850721359253, 0.45491883158683777, 0.4489750862121582, 0.4426666796207428, 0.4351825416088104, 0.43393248319625854, 0.4343138039112091, 0.4310544729232788, 0.42177408933639526, 0.4173070788383484, 0.4144420921802521, 0.4127269387245178, 0.4077146351337433, 0.4094233810901642, 0.4020538628101349, 0.39655864238739014, 0.39820319414138794, 0.40121474862098694, 0.39463111758232117, 0.39503949880599976, 0.3878907859325409, 0.3885749578475952, 0.39158666133880615, 0.3914819657802582, 0.3802909851074219, 0.3839995265007019, 0.3842751085758209, 0.3803173005580902, 0.37737900018692017, 0.38199862837791443, 0.3765469193458557, 0.38215696811676025, 0.37840351462364197], "val_accuracy": [0.5410000085830688, 0.653333306312561, 0.6736666560173035, 0.7036666870117188, 0.7263333201408386, 0.75, 0.7620000243186951, 0.762666642665863, 0.7816666960716248, 0.7870000004768372, 0.7870000004768372, 0.79666668176651, 0.8059999942779541, 0.8106666803359985, 0.8109999895095825, 0.8163333535194397, 0.8073333501815796, 0.8193333148956299, 0.8206666707992554, 0.8320000171661377, 0.8339999914169312, 0.8370000123977661, 0.8370000123977661, 0.8289999961853027, 0.8399999737739563, 0.8410000205039978, 0.8353333473205566, 0.8433333039283752, 0.8413333296775818, 0.8446666598320007, 0.8489999771118164, 0.8489999771118164, 0.8513333201408386, 0.8473333120346069, 0.8506666421890259, 0.8513333201408386, 0.8519999980926514, 0.847000002861023, 0.846666693687439, 0.8539999723434448, 0.8519999980926514, 0.8529999852180481, 0.8560000061988831, 0.8566666841506958, 0.8550000190734863, 0.8553333282470703, 0.8529999852180481, 0.8579999804496765, 0.8529999852180481, 0.8573333621025085, 0.856333315372467, 0.8573333621025085, 0.8576666712760925]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 6, 1, 0, 3], [0, 1, 0, 2], [99, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 2, 3, 5, 7, 6, 3, 6], [0, 2, 0, 0, 0, 3, 3, 4, 4], [16, 16, 74, 21], [0, 0, 0], [0, 5, 9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 2, 9, 7, 7], [0, 0, 0, 3, 0, 0, 3, 3, 2, 0, 2, 0, 0], [16, 26, 96, 99, 35, 1, 45, 78, 90]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), grad), grad), grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), sigma))))), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(sigma, beta)), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}, "mapping_values": [1, 6, 3, 3, 2, 19, 10, 9, 4, 3, 3, 0, 1, 29, 16, 13, 9], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 1, 6, 1, 1, 9, 8], [2, 1, 0, 2, 2, 1, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 5], [0, 2, 0, 3, 2], [16, 16], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 7, 5, 3, 6, 4, 5, 7, 2, 7, 5, 6, 5, 7, 1], [0, 1, 3, 2, 4, 1, 7, 4, 2, 3, 6, 1], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 9, 1, 4, 1, 4, 5, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [69, 99, 96, 61, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 11, 7, 2, 11, 6, 5, 2, 28, 16, 12, 1, 17, 9, 8, 6], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.subtract(grad, tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(alpha, sigma), tf.math.square(beta)), tf.math.add(tf.math.add(tf.math.add(grad, alpha), tf.math.square(tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(grad, beta)))), tf.math.subtract(sigma, grad))))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [3, 5, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 3, 0, 3, 5, 0, 7, 8, 3, 3, 3, 7, 8, 3, 3, 8, 5, 3, 8, 5], [0, 2, 0, 3, 2, 0, 0, 0, 4, 5, 1, 3], [16, 57, 38, 5, 91], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [6, 3, 1, 6, 8, 1, 4, 1, 4, 2, 6, 5, 7, 1, 2, 2, 2, 2, 5, 6, 2, 3, 2, 6, 9, 1, 1, 2, 0, 8, 8, 7, 2, 2, 5, 9, 4, 7, 4, 5, 5, 1, 8, 7, 1, 0, 5, 5, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 0, 6, 1, 4, 0, 4, 3, 1, 6, 7, 4, 6, 0, 5, 6, 1, 5, 6, 3, 4, 1, 2], [16, 99, 96, 99, 61, 1, 72, 50, 35, 75, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 33, 21, 12, 5, 2, 1, 1, 1, 81, 49, 32, 11], "tree_depth": 39, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.sqrt(tf.math.multiply(grad, tf.math.multiply(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.sqrt(tf.math.square(grad)), grad)))), alpha))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)))), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, beta)), tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), grad), alpha)), tf.math.add(tf.math.divide_no_nan(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.subtract(tf.math.add(tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)), tf.math.sqrt(tf.math.add(tf.math.add(sigma, tf.math.add(alpha, grad)), tf.math.square(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.math.add(grad, grad), grad))), tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad)), tf.math.square(grad)), tf.math.square(alpha)), grad)))), tf.math.subtract(grad, tf.math.sqrt(tf.math.add(tf.math.subtract(sigma, grad), alpha)))), tf.math.negative(tf.math.square(tf.math.square(tf.math.square(beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09430722147226334, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 45], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 1, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], [6, 0, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8, 6, 9, 4, 3, 7], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0, 4, 6], [16, 99, 96, 99, 19, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 1, 29, 17, 12, 6], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.math.add(tf.math.sqrt(sigma), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), sigma)))), alpha))), tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]