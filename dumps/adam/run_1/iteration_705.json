[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8528571724891663, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2206709384918213, 1.857093095779419, 1.3829495906829834, 1.0880866050720215, 0.9265550374984741, 0.8327277898788452, 0.7655738592147827, 0.7221018075942993, 0.6857551336288452, 0.6586023569107056, 0.6373941898345947, 0.616492748260498, 0.5915339589118958, 0.5740497708320618, 0.5595523118972778, 0.5386737585067749, 0.5298047661781311, 0.5233854651451111, 0.5069624781608582, 0.4946771264076233, 0.4823496341705322, 0.47317516803741455, 0.47091084718704224, 0.46153387427330017, 0.45304036140441895, 0.4434494972229004, 0.4457952082157135, 0.43173229694366455, 0.42457470297813416, 0.4163796901702881, 0.40853071212768555, 0.4068865478038788, 0.3981655240058899, 0.3988809585571289, 0.3903752267360687, 0.38153961300849915, 0.37338748574256897, 0.37332043051719666, 0.36390453577041626, 0.36530306935310364, 0.3549875319004059, 0.35722750425338745, 0.352824330329895, 0.3388381004333496, 0.33817043900489807, 0.33124685287475586, 0.3305738568305969, 0.32350781559944153, 0.3255850374698639, 0.3156132102012634, 0.31131741404533386, 0.3074442744255066, 0.30016034841537476, 0.29447081685066223, 0.2985014021396637, 0.29540184140205383, 0.28933560848236084, 0.2885493040084839, 0.28106552362442017, 0.27806204557418823, 0.27138248085975647, 0.2719103991985321, 0.2628187835216522, 0.26358410716056824, 0.25475335121154785, 0.2522965669631958, 0.2480936199426651, 0.2505872845649719, 0.2424764335155487, 0.2348981648683548], "accuracy": [0.2744683623313904, 0.4974243938922882, 0.565711259841919, 0.6168273687362671, 0.6692643165588379, 0.7043983340263367, 0.7232862114906311, 0.7416457533836365, 0.7500990629196167, 0.76542067527771, 0.7685906887054443, 0.7770439982414246, 0.7853652238845825, 0.7897239327430725, 0.7960638999938965, 0.8105930685997009, 0.8063663840293884, 0.806630551815033, 0.8186501264572144, 0.8234050869941711, 0.8264430165290833, 0.8286884427070618, 0.8281601071357727, 0.8360850811004639, 0.8372738361358643, 0.8411042094230652, 0.8422929644584656, 0.844010055065155, 0.8499537706375122, 0.8510104417800903, 0.8520671129226685, 0.8558974862098694, 0.8540483713150024, 0.8576145768165588, 0.8613129258155823, 0.8615770936012268, 0.8679170608520508, 0.8654074668884277, 0.8713511824607849, 0.8693699836730957, 0.8721436858177185, 0.8716153502464294, 0.8746532797813416, 0.8779553771018982, 0.8804649114608765, 0.8802007436752319, 0.8802007436752319, 0.8860124349594116, 0.8836349248886108, 0.8860124349594116, 0.8844274282455444, 0.8893144726753235, 0.8932769894599915, 0.8948619961738586, 0.8889182209968567, 0.894069492816925, 0.893541157245636, 0.8973715305328369, 0.8982961177825928, 0.8992207050323486, 0.8996169567108154, 0.8997490406036377, 0.9064852595329285, 0.9046360850334167, 0.9084665179252625, 0.9080702662467957, 0.9119006991386414, 0.9096552729606628, 0.9080702662467957, 0.91559898853302], "val_loss": [2.0349204540252686, 1.5026620626449585, 1.036257028579712, 0.8311272263526917, 0.7378989458084106, 0.679631769657135, 0.6338163018226624, 0.600525438785553, 0.5730051398277283, 0.5588024258613586, 0.5317253470420837, 0.5189501047134399, 0.502348005771637, 0.4863865077495575, 0.4808846116065979, 0.47226688265800476, 0.4587021470069885, 0.45280054211616516, 0.44436320662498474, 0.43666619062423706, 0.4291040897369385, 0.42763087153434753, 0.42028573155403137, 0.4140375256538391, 0.41239309310913086, 0.4102206230163574, 0.40387219190597534, 0.4012404680252075, 0.39611396193504333, 0.3921007513999939, 0.38724878430366516, 0.38843509554862976, 0.3851410448551178, 0.37954625487327576, 0.37755781412124634, 0.37359219789505005, 0.3679729104042053, 0.36942341923713684, 0.36799976229667664, 0.3634064197540283, 0.3612658381462097, 0.36542201042175293, 0.35724982619285583, 0.35489147901535034, 0.3536277711391449, 0.35302403569221497, 0.3482288122177124, 0.34993717074394226, 0.3523094952106476, 0.3468969762325287, 0.3442975580692291, 0.34442731738090515, 0.3440999388694763, 0.34779655933380127, 0.34214985370635986, 0.33977699279785156, 0.34789538383483887, 0.3357504606246948, 0.3379111588001251, 0.33534687757492065, 0.33346131443977356, 0.3366858959197998, 0.3331434428691864, 0.33343058824539185, 0.3302237391471863, 0.33568695187568665, 0.3341727554798126, 0.33241140842437744, 0.33188560605049133, 0.3352276086807251], "val_accuracy": [0.5659999847412109, 0.6573333144187927, 0.687333345413208, 0.706333339214325, 0.737666666507721, 0.7563333511352539, 0.7713333368301392, 0.7776666879653931, 0.7923333048820496, 0.796999990940094, 0.8053333163261414, 0.8130000233650208, 0.8230000138282776, 0.8246666789054871, 0.8246666789054871, 0.8259999752044678, 0.8286666870117188, 0.8349999785423279, 0.8333333134651184, 0.8370000123977661, 0.8456666469573975, 0.846666693687439, 0.8433333039283752, 0.8496666550636292, 0.8460000157356262, 0.8496666550636292, 0.8496666550636292, 0.8523333072662354, 0.8550000190734863, 0.8560000061988831, 0.8566666841506958, 0.8606666922569275, 0.8583333492279053, 0.8606666922569275, 0.8606666922569275, 0.862666666507721, 0.8643333315849304, 0.862666666507721, 0.8659999966621399, 0.8666666746139526, 0.8673333525657654, 0.862666666507721, 0.8713333606719971, 0.8686666488647461, 0.8756666779518127, 0.8713333606719971, 0.8730000257492065, 0.8756666779518127, 0.875333309173584, 0.8763333559036255, 0.8759999871253967, 0.875, 0.8763333559036255, 0.8776666522026062, 0.8793333172798157, 0.875333309173584, 0.874666690826416, 0.8813333511352539, 0.8806666731834412, 0.8816666603088379, 0.8820000290870667, 0.8803333044052124, 0.8833333253860474, 0.8816666603088379, 0.8843333125114441, 0.8813333511352539, 0.8776666522026062, 0.8830000162124634, 0.8840000033378601, 0.8840000033378601]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 3, 7, 6, 5, 4, 3, 2, 7, 6, 3, 4, 3, 5, 3, 8, 6, 8, 1, 4, 8, 6, 4, 3, 5, 4, 5, 0, 9, 4, 9, 9, 6, 1, 7, 0, 8], [0, 1, 0, 2, 3, 0, 2, 1, 1, 3, 1, 1, 1, 0, 0, 1, 1, 3, 1, 3, 2, 1, 1, 0], [56, 48, 35, 70, 31, 50, 55, 43, 83], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 4, 3, 0, 3, 5, 7, 1, 6], [0, 3, 0, 3, 0, 2, 2], [81, 16, 43], [0, 1], [8], [0], [99], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 5, 4, 2, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 61]], "fitness": -0.10000000149011612, "mapping_values": [1, 65, 41, 24, 9, 16, 9, 7, 3, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(grad, tf.math.divide_no_nan(tf.math.square(tf.math.pow(grad, tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.math.multiply(grad, tf.math.square(tf.math.multiply(tf.math.sqrt(alpha), tf.math.divide_no_nan(alpha, tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.math.square(tf.math.pow(alpha, tf.math.square(tf.math.negative(alpha)))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), alpha)))))))))), alpha), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.subtract(alpha, grad))), grad)))), alpha)), tf.math.add(tf.math.negative(tf.math.sqrt(alpha)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(grad, tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303062915802002, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [8, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [2], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 0, 7, 6, 8, 8, 0], [4, 0, 0, 3, 0, 4, 3, 1, 4, 0, 0, 5], [16, 43, 98, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 0, 30, 18, 12, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(grad, tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.sqrt(tf.math.square(tf.math.negative(sigma)))), alpha), tf.math.add(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 3, 1, 8, 8, 1, 8, 1, 6, 7, 1, 1, 5, 8, 2, 8], [2, 1, 0, 2, 2, 1, 2, 0, 1, 0, 3, 3, 2], [39, 39, 58], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [6, 9, 3, 6, 8, 6, 4, 1, 4, 4, 8], [0, 0, 0, 3, 0, 0, 3, 1, 1, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 20, 13, 3, 10, 6, 4, 1, 2, 1, 1, 1, 3, 2, 1, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.sqrt(grad), tf.math.sqrt(tf.math.subtract(grad, tf.math.sqrt(alpha))))), tf.math.subtract(grad, tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.square(tf.math.sqrt(tf.math.add(grad, tf.math.sqrt(grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3037335872650146, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [5, 0, 3, 0, 3, 5], [0, 2, 2, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 2, 1, 4, 0, 4, 6, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09399999678134918, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 1, 0, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha), tf.math.divide_no_nan(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3097035884857178, 2.309217929840088, 2.3102524280548096, 2.31052565574646, 2.3098948001861572, 2.3096230030059814], "accuracy": [0.0956280529499054, 0.09470347315073013, 0.09298639744520187, 0.08994849026203156, 0.0936468094587326, 0.09919429570436478], "val_loss": [2.3090341091156006, 2.3090341091156006, 2.3090341091156006, 2.3090341091156006, 2.3090341091156006, 2.3090341091156006], "val_accuracy": [0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231]}}]