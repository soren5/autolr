[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87971431016922, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2264158725738525, 1.883138656616211, 1.4228179454803467, 1.1245834827423096, 0.9636178016662598, 0.8570544123649597, 0.7892341613769531, 0.7428163290023804, 0.7103912234306335, 0.6776049137115479, 0.6464032530784607, 0.6186978220939636, 0.6058709025382996, 0.583882212638855, 0.5697414875030518, 0.5519570708274841, 0.5444625020027161, 0.5314995646476746, 0.5091581344604492, 0.5085999369621277, 0.4993470013141632, 0.47943422198295593, 0.4748769998550415, 0.4657655656337738, 0.4618813097476959, 0.45459797978401184, 0.450758159160614, 0.43135109543800354, 0.4276069402694702, 0.41853609681129456, 0.41742268204689026, 0.40973231196403503, 0.4136907458305359, 0.40421152114868164, 0.39682677388191223, 0.38752782344818115, 0.3869898021221161, 0.3718068301677704, 0.36564821004867554, 0.37274402379989624, 0.3558189570903778, 0.35788071155548096, 0.3505411446094513, 0.3386285901069641, 0.3320959806442261, 0.33276042342185974, 0.3289143145084381, 0.321180522441864, 0.3082222044467926, 0.3142070770263672, 0.31262820959091187, 0.30145516991615295], "accuracy": [0.275260865688324, 0.4839519262313843, 0.5514463186264038, 0.6107515692710876, 0.6618676781654358, 0.6889446377754211, 0.7149649858474731, 0.7290979027748108, 0.7412495017051697, 0.7477215528488159, 0.7637035846710205, 0.7744023203849792, 0.7738739848136902, 0.7891955971717834, 0.7895918488502502, 0.7991018295288086, 0.8012151718139648, 0.8090080618858337, 0.8178576231002808, 0.821820080280304, 0.8157442808151245, 0.8284242749214172, 0.829216718673706, 0.8278959393501282, 0.8342359066009521, 0.8378021121025085, 0.8330471515655518, 0.8466516733169556, 0.8494254350662231, 0.8492933511734009, 0.8477083444595337, 0.8498216867446899, 0.8525954484939575, 0.857218325138092, 0.8574824929237366, 0.8607845902442932, 0.8610487580299377, 0.8679170608520508, 0.8714832663536072, 0.8638224601745605, 0.873860776424408, 0.8709549307823181, 0.8710870146751404, 0.8790120482444763, 0.8811253309249878, 0.8771628737449646, 0.8787478804588318, 0.8828424215316772, 0.8891823887825012, 0.8885219693183899, 0.889050304889679, 0.8914278149604797], "val_loss": [2.042558193206787, 1.5261443853378296, 1.0402663946151733, 0.8248271346092224, 0.736682116985321, 0.6856681108474731, 0.630856454372406, 0.598153829574585, 0.5744801759719849, 0.5526587963104248, 0.5285207629203796, 0.5181156992912292, 0.5017104148864746, 0.49153435230255127, 0.48076191544532776, 0.4649498164653778, 0.45893189311027527, 0.44923800230026245, 0.4420507550239563, 0.43643489480018616, 0.4289519190788269, 0.4197063744068146, 0.41264986991882324, 0.4259133040904999, 0.4058433771133423, 0.4043295085430145, 0.3929573595523834, 0.39203089475631714, 0.3935169577598572, 0.3845237195491791, 0.38564860820770264, 0.38002195954322815, 0.37472012639045715, 0.37609320878982544, 0.37455037236213684, 0.36657071113586426, 0.3637740910053253, 0.36373937129974365, 0.3667456805706024, 0.36090803146362305, 0.3588749170303345, 0.35685160756111145, 0.3568505048751831, 0.35314202308654785, 0.35260334610939026, 0.35083016753196716, 0.3491746783256531, 0.3468281924724579, 0.3464011251926422, 0.34657803177833557, 0.34585586190223694, 0.3444811999797821], "val_accuracy": [0.5366666913032532, 0.6583333611488342, 0.6933333277702332, 0.7196666598320007, 0.7456666827201843, 0.7536666393280029, 0.7736666798591614, 0.7760000228881836, 0.7900000214576721, 0.7976666688919067, 0.8050000071525574, 0.8133333325386047, 0.8163333535194397, 0.8220000267028809, 0.8289999961853027, 0.831333339214325, 0.8303333520889282, 0.840666651725769, 0.8376666903495789, 0.8410000205039978, 0.8389999866485596, 0.8460000157356262, 0.8479999899864197, 0.8456666469573975, 0.8476666808128357, 0.8479999899864197, 0.8529999852180481, 0.8533333539962769, 0.8529999852180481, 0.859000027179718, 0.8566666841506958, 0.8583333492279053, 0.8616666793823242, 0.8586666584014893, 0.862666666507721, 0.8663333058357239, 0.8640000224113464, 0.8616666793823242, 0.8643333315849304, 0.8666666746139526, 0.8636666536331177, 0.8666666746139526, 0.8676666617393494, 0.8666666746139526, 0.8690000176429749, 0.871666669845581, 0.8733333349227905, 0.8683333396911621, 0.871666669845581, 0.871666669845581, 0.8730000257492065, 0.8700000047683716]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8597142696380615, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2264926433563232, 1.8728421926498413, 1.4098899364471436, 1.0994094610214233, 0.9512456655502319, 0.8459360003471375, 0.7899242639541626, 0.7373612523078918, 0.7031540274620056, 0.6660374402999878, 0.6432141661643982, 0.6255316734313965, 0.6004874110221863, 0.5815727114677429, 0.5779389142990112, 0.5572174191474915, 0.5459914207458496, 0.5253511667251587, 0.5207906365394592, 0.5003872513771057, 0.5022939443588257, 0.4908161759376526, 0.4737323820590973, 0.4648362100124359, 0.4660034477710724, 0.4557360112667084, 0.44527509808540344, 0.43717339634895325, 0.42722341418266296, 0.42433956265449524, 0.4254853427410126, 0.4148949980735779, 0.41015464067459106, 0.4000888466835022, 0.3903455138206482, 0.3913538157939911, 0.38677340745925903, 0.3756045699119568, 0.3700438141822815, 0.3580094873905182, 0.3639693856239319, 0.35935622453689575, 0.3527642488479614, 0.34115728735923767, 0.33918291330337524, 0.33581608533859253, 0.3315069377422333, 0.3368988037109375, 0.32533544301986694, 0.3159399926662445, 0.309945672750473, 0.3131927251815796, 0.3010627329349518, 0.3062840402126312, 0.2985081672668457, 0.28746479749679565, 0.29254990816116333, 0.28667157888412476, 0.2801353931427002, 0.2700018584728241, 0.26983287930488586, 0.2601568400859833, 0.2661729156970978, 0.2665835916996002, 0.25813737511634827], "accuracy": [0.27658170461654663, 0.47985735535621643, 0.5589750409126282, 0.6198652982711792, 0.6645092964172363, 0.6936996579170227, 0.7161537408828735, 0.7388719916343689, 0.7454761862754822, 0.7602694630622864, 0.7662131786346436, 0.7732135653495789, 0.7876105904579163, 0.7907806038856506, 0.7877426743507385, 0.802800178527832, 0.8020076751708984, 0.817989706993103, 0.8120459914207458, 0.8245938420295715, 0.8186501264572144, 0.8231409192085266, 0.8309338092803955, 0.8379341959953308, 0.8330471515655518, 0.8397833704948425, 0.8454629778862, 0.8488970994949341, 0.8532558679580688, 0.8502179384231567, 0.8473120927810669, 0.8541803956031799, 0.8499537706375122, 0.8573504090309143, 0.8580108284950256, 0.860652506351471, 0.86553955078125, 0.8681812286376953, 0.8643507957458496, 0.8712190985679626, 0.8705587387084961, 0.8721436858177185, 0.8730682730674744, 0.8772949576377869, 0.8782195448875427, 0.8794082403182983, 0.8812574148178101, 0.8796724081039429, 0.8833707571029663, 0.885219931602478, 0.8897107243537903, 0.8850878477096558, 0.8906353116035461, 0.8898428082466125, 0.8939374089241028, 0.8961827754974365, 0.8939374089241028, 0.8961827754974365, 0.8988244533538818, 0.9051644206047058, 0.9021265506744385, 0.9093911051750183, 0.9013340473175049, 0.9010698795318604, 0.9051644206047058], "val_loss": [2.0432262420654297, 1.5263657569885254, 1.0597999095916748, 0.8427281379699707, 0.7532553672790527, 0.6963663101196289, 0.6567894816398621, 0.6179401874542236, 0.5970739722251892, 0.5691139698028564, 0.5535101890563965, 0.5403748154640198, 0.5250372886657715, 0.5179993510246277, 0.4992642104625702, 0.48982730507850647, 0.48086652159690857, 0.47250786423683167, 0.4653013050556183, 0.453285813331604, 0.4545278251171112, 0.441256582736969, 0.4444243311882019, 0.42915454506874084, 0.4310029149055481, 0.42209577560424805, 0.4169270396232605, 0.41048485040664673, 0.40766358375549316, 0.40840768814086914, 0.398311048746109, 0.3940505385398865, 0.3914200961589813, 0.4058111608028412, 0.386878103017807, 0.3877069354057312, 0.378916472196579, 0.37476855516433716, 0.3721987307071686, 0.3696841895580292, 0.37316471338272095, 0.36371663212776184, 0.36072683334350586, 0.36302974820137024, 0.36551204323768616, 0.3633122146129608, 0.35348042845726013, 0.3564053177833557, 0.35294660925865173, 0.3490094542503357, 0.35049906373023987, 0.3531838059425354, 0.3530675172805786, 0.341816246509552, 0.3438425362110138, 0.3474785089492798, 0.340492308139801, 0.33503836393356323, 0.33575960993766785, 0.33463677763938904, 0.3362361192703247, 0.3338346481323242, 0.3314002752304077, 0.32943329215049744, 0.3315359652042389], "val_accuracy": [0.5566666722297668, 0.6579999923706055, 0.6790000200271606, 0.7053333520889282, 0.7283333539962769, 0.7490000128746033, 0.7599999904632568, 0.7773333191871643, 0.7826666831970215, 0.7940000295639038, 0.7926666736602783, 0.7979999780654907, 0.8059999942779541, 0.8149999976158142, 0.8206666707992554, 0.8213333487510681, 0.8273333311080933, 0.8289999961853027, 0.831333339214325, 0.8356666564941406, 0.8339999914169312, 0.8420000076293945, 0.8353333473205566, 0.8433333039283752, 0.846666693687439, 0.8483333587646484, 0.8456666469573975, 0.8553333282470703, 0.8486666679382324, 0.8463333249092102, 0.8569999933242798, 0.8569999933242798, 0.8560000061988831, 0.8453333377838135, 0.8543333411216736, 0.8603333234786987, 0.862666666507721, 0.8600000143051147, 0.8603333234786987, 0.8629999756813049, 0.8643333315849304, 0.8690000176429749, 0.8686666488647461, 0.8690000176429749, 0.8666666746139526, 0.8669999837875366, 0.8726666569709778, 0.8686666488647461, 0.8709999918937683, 0.8723333477973938, 0.8709999918937683, 0.8736666440963745, 0.8736666440963745, 0.8756666779518127, 0.874666690826416, 0.8763333559036255, 0.8756666779518127, 0.8776666522026062, 0.8786666393280029, 0.8816666603088379, 0.8773333430290222, 0.8786666393280029, 0.8793333172798157, 0.8806666731834412, 0.8799999952316284]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2], [0, 1, 0, 2], [4, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 2, 0, 3, 5, 9], [0, 2, 0, 1], [16, 16, 21], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 2, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 40, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 7, 3, 3, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, alpha)))", "other_info": {"loss": [2.305980920791626, 2.3025856018066406, 2.3025877475738525, 2.302590847015381, 2.302604913711548, 2.302670478820801], "accuracy": [0.0874389111995697, 0.09734513610601425, 0.09602430462837219, 0.09642054885625839, 0.0952318087220192, 0.09998679161071777], "val_loss": [2.3025848865509033, 2.3025848865509033, 2.302581787109375, 2.302579402923584, 2.302588701248169, 2.3026068210601807], "val_accuracy": [0.10433333367109299, 0.1003333330154419, 0.10300000011920929, 0.1003333330154419, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 8, 3, 1, 8, 7], [0, 1, 1, 2, 3, 0], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 2, 3, 0, 3, 5], [0, 2, 0, 3, 4], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 1, 6, 6, 8, 1, 4, 1, 4, 4, 8], [0, 3, 0, 3, 0, 0, 3, 1, 2, 0], [20, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 2, 11, 6, 5, 2, 1, 0, 1, 1, 16, 8, 8, 4], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(grad, grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(sigma), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 4, 5, 1, 3], [0, 1, 0, 2, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 6, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 4, 1, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 2, 23]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 2, 7, 4, 3, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.square(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad)))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303360939025879, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 1, 0, 3], [0, 1, 0, 2], [67, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 0], [3, 2, 2, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 8, 1, 4, 2, 2], [0, 0, 0, 3, 0, 0, 3, 3, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.09285714477300644, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 0, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.math.multiply(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), sigma)", "other_info": {"loss": [2.3101003170013428, 2.3103415966033936, 2.3080058097839355, 2.3094053268432617, 2.309591770172119, 2.3101158142089844], "accuracy": [0.08796724677085876, 0.09417514503002167, 0.09642054885625839, 0.09047681838274002, 0.08994849026203156, 0.09325055778026581], "val_loss": [2.308682918548584, 2.3086817264556885, 2.308680772781372, 2.308680534362793, 2.308680295944214, 2.3086800575256348], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}]