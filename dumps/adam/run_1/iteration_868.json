[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8637142777442932, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2217044830322266, 1.857738971710205, 1.377976894378662, 1.0832654237747192, 0.9290741682052612, 0.8250719904899597, 0.7709653377532959, 0.7197072505950928, 0.690812885761261, 0.6450169086456299, 0.6198536157608032, 0.5972809791564941, 0.584487795829773, 0.5646989941596985, 0.5465144515037537, 0.5332213044166565, 0.5236024856567383, 0.507834792137146, 0.49146538972854614, 0.4779992997646332, 0.47871333360671997, 0.46162673830986023, 0.4582979381084442, 0.4491885006427765, 0.44339531660079956, 0.42604607343673706, 0.4259248971939087, 0.42251741886138916, 0.4069058895111084, 0.3987441062927246, 0.38586142659187317, 0.3860359787940979, 0.3849542737007141, 0.37391626834869385, 0.3760374188423157, 0.3650323450565338, 0.3642072379589081, 0.36130037903785706, 0.3616600036621094, 0.35139840841293335, 0.34507638216018677, 0.34060540795326233, 0.3275279104709625, 0.32398465275764465, 0.32198596000671387, 0.3167651295661926, 0.31627383828163147, 0.314933180809021, 0.30500295758247375, 0.3057638704776764, 0.29954612255096436, 0.29356876015663147, 0.29078587889671326, 0.2879931926727295, 0.27958786487579346, 0.28161925077438354, 0.2780461311340332, 0.26915088295936584, 0.2713196873664856, 0.26619961857795715, 0.260796457529068, 0.2570493221282959, 0.2546655237674713, 0.25332117080688477], "accuracy": [0.2658829689025879, 0.4835556745529175, 0.5704662799835205, 0.6147140264511108, 0.6630563735961914, 0.703209638595581, 0.724210798740387, 0.7383436560630798, 0.7500990629196167, 0.7640998363494873, 0.7761194109916687, 0.7804781198501587, 0.7889314293861389, 0.7985734939575195, 0.7977809906005859, 0.8021397590637207, 0.8112534880638123, 0.8193105459213257, 0.8214238286018372, 0.828820526599884, 0.824329674243927, 0.8294808864593506, 0.8325188159942627, 0.8383304476737976, 0.8387266993522644, 0.8486329317092896, 0.8494254350662231, 0.8475762605667114, 0.8533879518508911, 0.856689989566803, 0.8614450097084045, 0.8619733452796936, 0.8638224601745605, 0.8603883385658264, 0.8647470474243164, 0.8709549307823181, 0.8634262084960938, 0.8689737319946289, 0.8722757697105408, 0.872407853603363, 0.8778232932090759, 0.8821820020675659, 0.8802007436752319, 0.885219931602478, 0.8849557638168335, 0.8853520154953003, 0.8836349248886108, 0.8869370222091675, 0.8877294659614563, 0.891559898853302, 0.8916919827461243, 0.8938053250312805, 0.8953903317451477, 0.8949940800666809, 0.8972394466400146, 0.8977677822113037, 0.8989565372467041, 0.9043719172477722, 0.9037115573883057, 0.9059569239616394, 0.9035794734954834, 0.9059569239616394, 0.9059569239616394, 0.9095231890678406], "val_loss": [2.038982629776001, 1.5088086128234863, 1.0368494987487793, 0.8239513635635376, 0.7331910729408264, 0.6783425211906433, 0.6320032477378845, 0.601399838924408, 0.578694760799408, 0.5496512651443481, 0.5338488221168518, 0.5161516666412354, 0.5060843825340271, 0.492424875497818, 0.4826098680496216, 0.47191324830055237, 0.46441683173179626, 0.4510209858417511, 0.4427942633628845, 0.4420301914215088, 0.4321809411048889, 0.43052059412002563, 0.4222795367240906, 0.42222175002098083, 0.41110649704933167, 0.40661612153053284, 0.405228853225708, 0.4010677933692932, 0.39731091260910034, 0.38908442854881287, 0.3897264897823334, 0.3853827714920044, 0.3826209008693695, 0.3812660872936249, 0.3763098418712616, 0.37732169032096863, 0.380836546421051, 0.3709890842437744, 0.37488484382629395, 0.37409207224845886, 0.3630773425102234, 0.36366918683052063, 0.3615258038043976, 0.358053058385849, 0.3568900525569916, 0.36192792654037476, 0.3522912561893463, 0.3494891822338104, 0.3523688018321991, 0.34914958477020264, 0.3471984565258026, 0.3472358286380768, 0.34401875734329224, 0.3402444124221802, 0.34350141882896423, 0.3372194766998291, 0.34158065915107727, 0.3365940749645233, 0.3351164162158966, 0.338348925113678, 0.3379534184932709, 0.33247530460357666, 0.3321577310562134, 0.33448928594589233], "val_accuracy": [0.5476666688919067, 0.6650000214576721, 0.6890000104904175, 0.70333331823349, 0.7356666922569275, 0.749666690826416, 0.7716666460037231, 0.7860000133514404, 0.7829999923706055, 0.8016666769981384, 0.8036666512489319, 0.8133333325386047, 0.8236666917800903, 0.8233333230018616, 0.8299999833106995, 0.8303333520889282, 0.8360000252723694, 0.8379999995231628, 0.8433333039283752, 0.8399999737739563, 0.8489999771118164, 0.8513333201408386, 0.8523333072662354, 0.8523333072662354, 0.8560000061988831, 0.8586666584014893, 0.859666645526886, 0.859666645526886, 0.8579999804496765, 0.862666666507721, 0.862333357334137, 0.8666666746139526, 0.8669999837875366, 0.8656666874885559, 0.8669999837875366, 0.8676666617393494, 0.8679999709129333, 0.8713333606719971, 0.8619999885559082, 0.8646666407585144, 0.8726666569709778, 0.8700000047683716, 0.871999979019165, 0.8743333220481873, 0.8736666440963745, 0.8726666569709778, 0.8756666779518127, 0.878333330154419, 0.878000020980835, 0.8776666522026062, 0.8790000081062317, 0.8793333172798157, 0.8796666860580444, 0.878000020980835, 0.8776666522026062, 0.8843333125114441, 0.8809999823570251, 0.8820000290870667, 0.8849999904632568, 0.8823333382606506, 0.8796666860580444, 0.8833333253860474, 0.8846666812896729, 0.8840000033378601]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 9, 3], [2, 0, 0, 2], [93, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 3, 7, 2, 2, 0, 2, 4, 0], [0, 2, 0, 3, 3, 3, 1, 0, 5, 0], [16, 16, 66, 86], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [6, 3, 3, 6, 1, 1, 4, 1, 4, 2, 8, 5, 9, 9], [0, 0, 0, 4, 0, 4, 3, 1, 2, 0], [16, 45, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 2, 23, 13, 10, 4, 2, 1, 1, 1, 23, 14, 9, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), grad)), tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))), sigma), tf.math.sqrt(tf.math.square(alpha))), beta)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [2, 8, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 2, 3, 0, 3, 5, 8, 8, 9], [0, 2, 0, 3], [16, 53, 44], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 6, 1, 4, 2, 8], [0, 0, 2, 3, 0, 0, 3, 3, 2, 0], [16, 99, 96, 99, 61, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 9, 3, 3, 2, 1, 1, 1, 10, 5, 5, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(beta, sigma), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.303919792175293, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [85, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 81], [1, 1], [1], [0], [65], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [6, 3, 3, 8, 8, 1, 4, 1, 2, 6, 8, 6, 1, 8, 0, 4, 0, 8, 2, 7, 1, 2, 3, 5, 8, 8, 2, 5, 2, 5, 1, 1, 4, 7, 4, 4, 5, 1, 6, 3, 9, 5, 3], [4, 0, 0, 3, 0, 0, 3, 1, 2, 4, 5, 7, 2, 0, 0, 0, 2, 5, 6, 1, 0, 7, 4, 2, 3, 4, 5, 2], [16, 99, 18, 99, 61, 1, 41, 48, 56]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 1, 0, 1, 1, 71, 43, 28, 9], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta))))), tf.math.subtract(grad, tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.negative(tf.math.sqrt(tf.math.add(grad, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.multiply(tf.math.square(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.square(tf.math.add(tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), beta), tf.math.add(grad, grad))), tf.math.pow(tf.math.pow(tf.math.square(tf.math.subtract(tf.math.divide_no_nan(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad)), grad), beta))), sigma))))), tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(grad, grad))))))), beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 0, 0, 3, 5], [1, 2, 0, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 8, 5, 2, 8], [0, 0, 3, 4, 0, 0, 3, 4, 2, 0], [16, 99, 96, 73, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 6, 4, 2, 0, 2, 1, 1, 1, 15, 8, 7, 4], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(alpha)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma))), tf.math.subtract(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)))", "other_info": {"loss": [3.9662024974823, 8.64642333984375, 10.093109130859375, 9.231356620788574, 7.902250289916992, 6.587771415710449], "accuracy": [0.09496764093637466, 0.09615638852119446, 0.10328886657953262, 0.10302469879388809, 0.09800554811954498, 0.10077928751707077], "val_loss": [5.245347499847412, 6.490386486053467, 5.639627456665039, 4.5575079917907715, 3.8120169639587402, 3.387294292449951], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}]