[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87028568983078, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.225290060043335, 1.87587571144104, 1.406939148902893, 1.1034153699874878, 0.9364996552467346, 0.8502227067947388, 0.7870576977729797, 0.7375462055206299, 0.6952239274978638, 0.6707677245140076, 0.6472273468971252, 0.6362292170524597, 0.6056740880012512, 0.5910203456878662, 0.5703982710838318, 0.5594262480735779, 0.5389491319656372, 0.5383169651031494, 0.5234876871109009, 0.5182483792304993, 0.5045607089996338, 0.49271783232688904, 0.48245716094970703, 0.47712844610214233, 0.4654799699783325, 0.4568401873111725, 0.4421028792858124, 0.4378829896450043, 0.4297875761985779, 0.4283367693424225, 0.4136851727962494, 0.4101272225379944, 0.40888863801956177, 0.39788806438446045, 0.39247435331344604, 0.38223880529403687, 0.3798972964286804, 0.3816218078136444, 0.36781516671180725, 0.35992199182510376, 0.3521583676338196, 0.34970781207084656, 0.35160112380981445, 0.346280574798584, 0.33691030740737915, 0.3301299512386322, 0.3344143331050873, 0.3258132338523865, 0.31187909841537476, 0.311753511428833, 0.31051746010780334], "accuracy": [0.28080835938453674, 0.49332982301712036, 0.5671641826629639, 0.6172236204147339, 0.666358470916748, 0.6985867023468018, 0.717870831489563, 0.7325320243835449, 0.748778223991394, 0.7600052952766418, 0.7642319202423096, 0.7721568942070007, 0.7817989587783813, 0.7862898111343384, 0.7952714562416077, 0.8021397590637207, 0.8053097128868103, 0.8078193068504333, 0.8136309385299683, 0.8133667707443237, 0.8190463781356812, 0.8230088353157043, 0.8308017253875732, 0.8304054737091064, 0.834632158279419, 0.8383304476737976, 0.8407079577445984, 0.8421608805656433, 0.8474441766738892, 0.847840428352356, 0.8532558679580688, 0.8564258217811584, 0.8552370667457581, 0.8564258217811584, 0.8614450097084045, 0.8638224601745605, 0.8663320541381836, 0.8628978729248047, 0.870030403137207, 0.8745211958885193, 0.8728041052818298, 0.8745211958885193, 0.8729361891746521, 0.8741249442100525, 0.8761062026023865, 0.880729079246521, 0.8798044919967651, 0.8809932470321655, 0.886672854423523, 0.8901069760322571, 0.8905032277107239], "val_loss": [2.0410406589508057, 1.5159962177276611, 1.0343514680862427, 0.818366527557373, 0.7298635244369507, 0.6792207956314087, 0.6413783431053162, 0.6035386323928833, 0.5772879719734192, 0.5541664361953735, 0.5407692193984985, 0.5259008407592773, 0.5070452690124512, 0.4972658157348633, 0.48341649770736694, 0.47361060976982117, 0.46466130018234253, 0.45349934697151184, 0.4506053030490875, 0.4412882626056671, 0.4393457770347595, 0.42829975485801697, 0.4321250915527344, 0.41928210854530334, 0.41407886147499084, 0.40695059299468994, 0.4023847281932831, 0.40181228518486023, 0.3914965093135834, 0.38717448711395264, 0.3866230547428131, 0.38421010971069336, 0.37486281991004944, 0.37446627020835876, 0.3743094801902771, 0.3678441047668457, 0.38001909852027893, 0.36418765783309937, 0.36285334825515747, 0.3592497706413269, 0.36321061849594116, 0.35346969962120056, 0.3517414927482605, 0.3520362079143524, 0.34956493973731995, 0.3548556864261627, 0.3506647050380707, 0.34547480940818787, 0.3445698320865631, 0.3420434892177582, 0.3442150056362152], "val_accuracy": [0.5653333067893982, 0.6723333597183228, 0.6913333535194397, 0.7183333039283752, 0.7419999837875366, 0.7599999904632568, 0.7636666893959045, 0.7816666960716248, 0.7860000133514404, 0.7993333339691162, 0.793666660785675, 0.8116666674613953, 0.8173333406448364, 0.815666675567627, 0.8286666870117188, 0.8333333134651184, 0.8356666564941406, 0.843999981880188, 0.8399999737739563, 0.8373333215713501, 0.843999981880188, 0.8500000238418579, 0.843999981880188, 0.8483333587646484, 0.8529999852180481, 0.8560000061988831, 0.8606666922569275, 0.8556666374206543, 0.8640000224113464, 0.8653333187103271, 0.8643333315849304, 0.8643333315849304, 0.8659999966621399, 0.8676666617393494, 0.8666666746139526, 0.8703333139419556, 0.8579999804496765, 0.8686666488647461, 0.871666669845581, 0.8706666827201843, 0.8683333396911621, 0.8723333477973938, 0.874666690826416, 0.8730000257492065, 0.874666690826416, 0.8763333559036255, 0.8693333268165588, 0.8759999871253967, 0.871999979019165, 0.875333309173584, 0.8740000128746033]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8688571453094482, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2238314151763916, 1.8713362216949463, 1.3920361995697021, 1.0857958793640137, 0.9243450164794922, 0.82453852891922, 0.765039324760437, 0.7191289663314819, 0.6823170781135559, 0.6499817371368408, 0.6206528544425964, 0.606444776058197, 0.5883805155754089, 0.5667416453361511, 0.5415335297584534, 0.5286901593208313, 0.5208317041397095, 0.5096542835235596, 0.4964110851287842, 0.47998371720314026, 0.47392839193344116, 0.46391555666923523, 0.45124101638793945, 0.44598257541656494, 0.4408044219017029, 0.4286133944988251, 0.4324933588504791, 0.41923484206199646, 0.41071584820747375, 0.40395107865333557, 0.3952445685863495, 0.39639919996261597, 0.39305222034454346, 0.3719245493412018, 0.3739381730556488, 0.3682386875152588, 0.3617435693740845, 0.3564670979976654, 0.34746482968330383, 0.346213698387146, 0.338918536901474, 0.3395744562149048, 0.33486220240592957, 0.32608938217163086, 0.3242258131504059, 0.3224232792854309, 0.3138463497161865], "accuracy": [0.2818650007247925, 0.49227315187454224, 0.5665037631988525, 0.6247523427009583, 0.6666226387023926, 0.702681303024292, 0.7257958054542542, 0.7374191284179688, 0.7494386434555054, 0.76542067527771, 0.7758552432060242, 0.7763835787773132, 0.7849689722061157, 0.7947431206703186, 0.8033285140991211, 0.8098005652427673, 0.8127063512802124, 0.8182538747787476, 0.8276317715644836, 0.830669641494751, 0.8309338092803955, 0.8354246616363525, 0.833179235458374, 0.839519202709198, 0.8421608805656433, 0.8479725122451782, 0.8471800088882446, 0.8511425256729126, 0.8576145768165588, 0.8589354157447815, 0.8613129258155823, 0.8602562546730042, 0.8614450097084045, 0.8683133125305176, 0.8654074668884277, 0.867520809173584, 0.8725399374961853, 0.876370370388031, 0.8770307898521423, 0.8746532797813416, 0.8755778670310974, 0.8786157965660095, 0.8805969953536987, 0.8815215826034546, 0.8815215826034546, 0.883238673210144, 0.8865407705307007], "val_loss": [2.040785551071167, 1.5195525884628296, 1.04659104347229, 0.8344300985336304, 0.7457050681114197, 0.691724956035614, 0.6507527828216553, 0.6158015727996826, 0.5902169346809387, 0.5739642977714539, 0.5559547543525696, 0.5380759835243225, 0.5220423936843872, 0.5126135945320129, 0.4969947040081024, 0.48954930901527405, 0.4808807671070099, 0.4742918610572815, 0.4677196741104126, 0.4569011926651001, 0.4491319954395294, 0.44505491852760315, 0.4380239248275757, 0.4349914491176605, 0.43246161937713623, 0.4266353249549866, 0.41707971692085266, 0.4149838984012604, 0.4139787554740906, 0.4109509587287903, 0.4104362428188324, 0.40174156427383423, 0.4058334231376648, 0.4015354514122009, 0.38832345604896545, 0.3936709761619568, 0.3896366059780121, 0.38303902745246887, 0.3812447786331177, 0.3825209140777588, 0.37733790278434753, 0.3727213442325592, 0.3766428232192993, 0.37673139572143555, 0.36925044655799866, 0.3682781457901001, 0.3707147538661957], "val_accuracy": [0.543666660785675, 0.6603333353996277, 0.6840000152587891, 0.7126666903495789, 0.7416666746139526, 0.7559999823570251, 0.7670000195503235, 0.7786666750907898, 0.7883333563804626, 0.784333348274231, 0.7943333387374878, 0.8003333210945129, 0.8026666641235352, 0.8096666932106018, 0.8169999718666077, 0.8176666498184204, 0.8293333053588867, 0.828000009059906, 0.8309999704360962, 0.8366666436195374, 0.8379999995231628, 0.8356666564941406, 0.8393333554267883, 0.8403333425521851, 0.8399999737739563, 0.843666672706604, 0.8493333458900452, 0.8479999899864197, 0.8486666679382324, 0.8533333539962769, 0.8510000109672546, 0.8529999852180481, 0.8506666421890259, 0.8533333539962769, 0.862333357334137, 0.8566666841506958, 0.859666645526886, 0.859666645526886, 0.8646666407585144, 0.8583333492279053, 0.862666666507721, 0.8673333525657654, 0.8666666746139526, 0.8633333444595337, 0.8673333525657654, 0.8666666746139526, 0.8666666746139526]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 6, 3, 6, 1, 1], [0, 1, 0, 2, 1, 1, 0, 0], [39, 39, 8, 35], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 2, 5, 1, 2, 3], [0, 2, 0, 3, 0, 4, 0], [16, 16, 58, 41], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 3, 2, 8, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 0, 61, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 8, 8, 4, 16, 9, 7, 4, 2, 1, 1, 1, 21, 12, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(tf.math.subtract(alpha, alpha), tf.math.subtract(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(grad, tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.math.sqrt(alpha)))))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 2, 3, 0, 3, 7, 3], [1, 1, 0, 2, 1, 0, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [95, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 0, 6, 8, 1, 4, 1, 4, 2, 8, 9, 0], [0, 0, 4, 1, 0, 0, 3, 1, 2, 0], [89, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 7, 7, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 13, 8, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(grad, tf.math.pow(alpha, tf.math.add(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 88], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 3, 3, 6, 5, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), grad), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [455064864.0, 4010234880.0, 8105407488.0, 11103299584.0, 12713293824.0, 13453045760.0], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.10130762308835983, 0.09945846349000931, 0.09919429570436478, 0.10289261490106583], "val_loss": [1549274752.0, 4955944448.0, 7579566592.0, 9092100096.0, 9873511424.0, 10258603008.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 3, 3, 2, 3], [0, 1, 0, 2, 1], [39, 24], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 2, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 8, 4, 2, 8], [0, 0, 3, 3, 0, 0, 3, 1, 2, 0], [16, 60, 18, 23, 61, 1]], "fitness": -0.09142857044935226, "mapping_values": [1, 10, 5, 5, 2, 6, 3, 3, 1, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma))), tf.math.sqrt(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma)), alpha)", "other_info": {"loss": [2.310366630554199, 2.309861898422241, 2.309704542160034, 2.3099358081817627, 2.3105151653289795, 2.3104615211486816], "accuracy": [0.08955223858356476, 0.09377889335155487, 0.09219389408826828, 0.09166556596755981, 0.09140139818191528, 0.08796724677085876], "val_loss": [2.3093926906585693, 2.3093926906585693, 2.3093926906585693, 2.3093926906585693, 2.3093926906585693, 2.3093926906585693], "val_accuracy": [0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179]}}]