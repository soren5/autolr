[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8608571290969849, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221190929412842, 1.863677978515625, 1.3788998126983643, 1.076183795928955, 0.9249528050422668, 0.8272802233695984, 0.7575086951255798, 0.7154089212417603, 0.6736792922019958, 0.6471521258354187, 0.6203811764717102, 0.6184597015380859, 0.5899479985237122, 0.565260648727417, 0.5572731494903564, 0.5422142744064331, 0.5311276316642761, 0.5139597058296204, 0.5073128938674927, 0.49962469935417175, 0.48620226979255676, 0.4791872799396515, 0.4686391055583954, 0.46117469668388367, 0.4603246748447418, 0.4466419816017151, 0.44012218713760376, 0.4274410009384155, 0.4226580560207367, 0.41513192653656006, 0.40555617213249207, 0.4042620360851288, 0.3921128213405609, 0.3888576626777649, 0.37747251987457275, 0.3818662762641907, 0.3741587996482849, 0.3743859827518463, 0.3595035970211029, 0.3587157130241394, 0.3506287634372711, 0.3441675901412964, 0.3428555428981781, 0.3349602520465851, 0.32966357469558716, 0.32587841153144836, 0.32616662979125977, 0.31669098138809204, 0.31191831827163696, 0.31337064504623413, 0.29798680543899536, 0.30069077014923096, 0.3022426664829254, 0.2902565598487854, 0.28371885418891907, 0.2813588082790375, 0.27798300981521606], "accuracy": [0.27658170461654663, 0.47932901978492737, 0.5749570727348328, 0.6276581883430481, 0.6699247360229492, 0.700171709060669, 0.7321357727050781, 0.7452120184898376, 0.7514199018478394, 0.7638356685638428, 0.7740060687065125, 0.778761088848114, 0.7903843522071838, 0.798309326171875, 0.7969884872436523, 0.802800178527832, 0.8088759779930115, 0.8145555257797241, 0.8175934553146362, 0.828292191028595, 0.8286884427070618, 0.8310658931732178, 0.8376700282096863, 0.8407079577445984, 0.8407079577445984, 0.8426892161369324, 0.8438779711723328, 0.8494254350662231, 0.8515387773513794, 0.8557654023170471, 0.8574824929237366, 0.8613129258155823, 0.8625016212463379, 0.860652506351471, 0.8661999702453613, 0.8663320541381836, 0.8689737319946289, 0.8679170608520508, 0.872407853603363, 0.8746532797813416, 0.8778232932090759, 0.8787478804588318, 0.8749174475669861, 0.8786157965660095, 0.8849557638168335, 0.883238673210144, 0.8803328275680542, 0.8856161832809448, 0.8874653577804565, 0.8883898854255676, 0.8942015767097473, 0.8899748921394348, 0.8930128216743469, 0.8972394466400146, 0.8971073627471924, 0.8956544995307922, 0.8992207050323486], "val_loss": [2.037583112716675, 1.512909173965454, 1.0497819185256958, 0.8506563901901245, 0.7578746676445007, 0.7008147835731506, 0.6570850610733032, 0.6216962337493896, 0.5950771570205688, 0.5721070766448975, 0.5541403889656067, 0.5419428944587708, 0.5326468348503113, 0.5162876844406128, 0.5025646090507507, 0.4962117373943329, 0.4817965030670166, 0.4731675684452057, 0.4673536419868469, 0.4558313488960266, 0.44817015528678894, 0.44071125984191895, 0.4346329867839813, 0.4334805905818939, 0.4239340126514435, 0.4178514778614044, 0.4183562397956848, 0.4107145071029663, 0.4018411338329315, 0.3938760459423065, 0.39448368549346924, 0.3874059319496155, 0.38686251640319824, 0.3830184042453766, 0.3802453875541687, 0.37356820702552795, 0.37141644954681396, 0.36756041646003723, 0.3700210750102997, 0.37517228722572327, 0.36214321851730347, 0.3656698763370514, 0.3559201657772064, 0.3530406951904297, 0.3585033714771271, 0.35172024369239807, 0.3543400168418884, 0.3449423015117645, 0.3478321135044098, 0.34247028827667236, 0.34443962574005127, 0.34065312147140503, 0.34121862053871155, 0.34354162216186523, 0.3360821306705475, 0.3351079821586609, 0.3324950933456421], "val_accuracy": [0.5233333110809326, 0.6516666412353516, 0.6776666641235352, 0.6976666450500488, 0.7210000157356262, 0.7443333268165588, 0.7509999871253967, 0.7593333125114441, 0.7723333239555359, 0.7796666622161865, 0.7896666526794434, 0.793666660785675, 0.7926666736602783, 0.8056666851043701, 0.812666654586792, 0.8136666417121887, 0.8186666369438171, 0.8263333439826965, 0.8270000219345093, 0.8316666483879089, 0.8349999785423279, 0.8330000042915344, 0.840666651725769, 0.8376666903495789, 0.8453333377838135, 0.8503333330154419, 0.8446666598320007, 0.847000002861023, 0.8523333072662354, 0.8533333539962769, 0.8516666889190674, 0.8569999933242798, 0.8546666502952576, 0.859333336353302, 0.859333336353302, 0.8636666536331177, 0.8629999756813049, 0.8629999756813049, 0.8610000014305115, 0.8583333492279053, 0.8673333525657654, 0.8663333058357239, 0.8663333058357239, 0.8723333477973938, 0.8713333606719971, 0.871999979019165, 0.8693333268165588, 0.8756666779518127, 0.8703333139419556, 0.8756666779518127, 0.8736666440963745, 0.8790000081062317, 0.8736666440963745, 0.8763333559036255, 0.8776666522026062, 0.8766666650772095, 0.8790000081062317]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 0, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [6, 2, 2, 2, 5, 0, 4], [0, 4, 6, 1, 0, 6], [99, 68], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 9, 6, 8, 2, 4, 1, 4, 2, 8, 5], [0, 0, 4, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 6, 4, 2, 1, 13, 7, 6, 2, 20, 12, 8, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)), tf.math.square(tf.math.negative(alpha))), tf.math.pow(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(grad, tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.sqrt(tf.math.square(alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [3, 8, 3, 6, 3, 2, 5, 9, 7, 2, 6, 2, 3, 6, 0, 5], [0, 0, 0, 2, 0, 0, 0, 3, 1, 1, 3], [39, 39, 93, 60, 48, 21, 89], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [5], [0], [4], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [9, 3, 3, 2, 8, 1, 2, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 8, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 16, 11, 7, 10, 6, 4, 2, 2, 1, 1, 1, 1, 1, 0, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(alpha))), alpha))), tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3034770488739014, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 4, 5, 6, 0], [1, 2, 0, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 82, 99, 78, 68]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 13, 8, 5, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), beta), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.negative(grad), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, grad), tf.math.add(tf.math.sqrt(beta), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.3039352893829346, 2.3025853633880615, 2.3025851249694824, 2.3025853633880615, 2.3025856018066406, 2.3025853633880615], "accuracy": [0.09681680053472519, 0.09166556596755981, 0.09496764093637466, 0.08994849026203156, 0.0878351628780365, 0.09509972482919693], "val_loss": [2.3025853633880615, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033], "val_accuracy": [0.10433333367109299, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 6, 3], [0, 1, 0, 2, 2], [20, 91], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 79, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 10, 6, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303421974182129, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]