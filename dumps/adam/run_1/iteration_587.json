[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8554285764694214, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222825288772583, 1.8758690357208252, 1.4036102294921875, 1.1160123348236084, 0.9654839038848877, 0.8569291234016418, 0.7930346727371216, 0.7403005957603455, 0.703397274017334, 0.6767875552177429, 0.6413512825965881, 0.6120386123657227, 0.5892707705497742, 0.5808349847793579, 0.5598599314689636, 0.5471131205558777, 0.531777560710907, 0.5171952247619629, 0.5030431747436523, 0.500228226184845, 0.48481395840644836, 0.472272127866745, 0.467411607503891, 0.4580899477005005, 0.4539254605770111, 0.44614216685295105, 0.434885710477829, 0.41951459646224976, 0.4161492586135864, 0.4061926603317261, 0.40437033772468567, 0.40286701917648315, 0.39206695556640625, 0.3811480700969696, 0.3710676431655884, 0.36972352862358093, 0.3695444166660309, 0.36522814631462097, 0.3631261885166168, 0.34755679965019226, 0.34916481375694275, 0.3364946246147156, 0.3335321545600891, 0.3329141139984131, 0.3217122256755829, 0.3189064860343933, 0.31433936953544617, 0.30796483159065247, 0.30726516246795654, 0.308310866355896, 0.30147984623908997], "accuracy": [0.2748646140098572, 0.4748381972312927, 0.563730001449585, 0.6103553175926208, 0.6556597352027893, 0.69673752784729, 0.7144366502761841, 0.7347774505615234, 0.7432307600975037, 0.7580240368843079, 0.7643640041351318, 0.7839123010635376, 0.7921014428138733, 0.7878747582435608, 0.7952714562416077, 0.8033285140991211, 0.8103289008140564, 0.8125742673873901, 0.8197067975997925, 0.8241975903511047, 0.8304054737091064, 0.8280280232429504, 0.8321225643157959, 0.8341038227081299, 0.8392550349235535, 0.8418967127799988, 0.8424250483512878, 0.852331280708313, 0.8549728989601135, 0.8562937378883362, 0.8556333184242249, 0.856689989566803, 0.8651432991027832, 0.8667283058166504, 0.870030403137207, 0.8684453964233398, 0.8646149635314941, 0.8762382864952087, 0.8716153502464294, 0.8775591254234314, 0.8761062026023865, 0.8794082403182983, 0.8825782537460327, 0.8798044919967651, 0.8864086866378784, 0.8862766027450562, 0.8916919827461243, 0.889578640460968, 0.8906353116035461, 0.8889182209968567, 0.8923524022102356], "val_loss": [2.0391829013824463, 1.517444372177124, 1.0438590049743652, 0.8382721543312073, 0.7518996596336365, 0.6932844519615173, 0.6445550918579102, 0.6064903140068054, 0.5806269645690918, 0.5555710196495056, 0.5411379933357239, 0.5188969969749451, 0.5079243779182434, 0.4964717924594879, 0.4845294654369354, 0.4754621982574463, 0.46566787362098694, 0.4577845335006714, 0.44988489151000977, 0.4422696828842163, 0.4350324273109436, 0.4303700029850006, 0.42513957619667053, 0.4237237870693207, 0.4170277416706085, 0.4118648171424866, 0.40778565406799316, 0.40865322947502136, 0.404221773147583, 0.3986252546310425, 0.3913941979408264, 0.39660775661468506, 0.3918426036834717, 0.38418635725975037, 0.3837314546108246, 0.3821887969970703, 0.3813523054122925, 0.377638578414917, 0.38351893424987793, 0.37213754653930664, 0.3750252425670624, 0.37141886353492737, 0.36955562233924866, 0.3700816333293915, 0.36628490686416626, 0.36408641934394836, 0.3611116409301758, 0.36096659302711487, 0.36238476634025574, 0.3562189042568207, 0.356477826833725], "val_accuracy": [0.5130000114440918, 0.6503333449363708, 0.687333345413208, 0.7080000042915344, 0.7379999756813049, 0.7523333430290222, 0.7616666555404663, 0.7763333320617676, 0.7833333611488342, 0.7956666946411133, 0.7913333177566528, 0.8033333420753479, 0.8173333406448364, 0.8183333277702332, 0.8223333358764648, 0.8223333358764648, 0.8270000219345093, 0.8366666436195374, 0.8349999785423279, 0.8376666903495789, 0.8433333039283752, 0.8423333168029785, 0.8473333120346069, 0.846666693687439, 0.8510000109672546, 0.8493333458900452, 0.8539999723434448, 0.8493333458900452, 0.8543333411216736, 0.8566666841506958, 0.8606666922569275, 0.859000027179718, 0.8586666584014893, 0.859333336353302, 0.862666666507721, 0.862666666507721, 0.8579999804496765, 0.8629999756813049, 0.8659999966621399, 0.8653333187103271, 0.8666666746139526, 0.8636666536331177, 0.8693333268165588, 0.8683333396911621, 0.8713333606719971, 0.8723333477973938, 0.8703333139419556, 0.8676666617393494, 0.871999979019165, 0.8696666955947876, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 1, 5, 3, 9], [0, 1, 0, 2, 1], [39, 39, 3], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 0, 0], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 3, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 4, 0], [16, 99, 96, 70, 61, 5]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 9, 5, 3, 12, 8, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(grad, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)))), alpha), tf.math.add(tf.math.sqrt(grad), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 2, 0, 5, 7, 6, 0, 9, 4, 2, 8, 1], [0, 1, 0, 2, 1, 3, 3, 0, 2], [39, 39, 86, 79], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [0, 2, 4, 0, 3, 5, 6, 8, 8], [0, 2, 0, 3, 4], [48, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.square(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.sqrt(grad), alpha), grad)), grad))))), tf.math.subtract(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}, "mapping_values": [1, 25, 16, 9, 4, 14, 9, 5, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 25}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [82, 92], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [6, 3, 3, 6, 2, 4, 4, 1, 4, 3, 2, 3, 6, 4, 3, 1, 7, 2, 7, 6, 5, 2, 9, 6, 2, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7, 7, 5, 3, 1, 4, 2, 5, 5, 3, 5, 5], [16, 99, 96, 5, 61, 1, 4, 72]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 48, 26, 22, 8], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma), tf.math.add(tf.math.multiply(alpha, beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(grad, tf.math.subtract(grad, tf.math.add(grad, sigma))), tf.math.add(tf.math.add(tf.math.divide_no_nan(alpha, tf.math.square(tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), grad))), beta), grad)), tf.math.divide_no_nan(grad, sigma)))), grad), tf.math.add(grad, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [0, 1, 0, 2], [59, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 0, 5, 4, 5, 6, 0, 8, 2, 3, 1, 8, 6, 1, 8, 6], [0, 2, 0, 3, 4, 0, 1, 0, 4, 0, 3], [43, 16, 2, 51, 42], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 30, 19, 11, 5, 2, 1, 1, 1, 20, 10, 10, 5], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.square(tf.math.pow(tf.math.square(beta), tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.sqrt(tf.math.divide_no_nan(grad, grad)), tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), alpha)), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299]}}]