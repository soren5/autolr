[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8697142601013184, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222923517227173, 1.8611204624176025, 1.3838744163513184, 1.0870834589004517, 0.9332512021064758, 0.8380202651023865, 0.7657923698425293, 0.7200427651405334, 0.6705515384674072, 0.6454973816871643, 0.6231664419174194, 0.6061557531356812, 0.5782820582389832, 0.5657635927200317, 0.5466938614845276, 0.541508138179779, 0.5236268043518066, 0.5095276832580566, 0.4977823495864868, 0.49527397751808167, 0.4760619103908539, 0.4698290526866913, 0.4687671661376953, 0.4535698890686035, 0.4501274526119232, 0.4375110864639282, 0.4320272207260132, 0.4239473342895508, 0.4078555703163147, 0.4046565890312195, 0.402993768453598, 0.39896535873413086, 0.3923790454864502, 0.38539645075798035, 0.37422260642051697, 0.37888649106025696, 0.36889758706092834, 0.3654157817363739, 0.36259669065475464, 0.3541257679462433, 0.345086008310318, 0.34929415583610535, 0.34827640652656555, 0.33686211705207825, 0.3354574739933014, 0.3284996449947357, 0.32126855850219727, 0.3209432065486908, 0.32005059719085693, 0.31051936745643616, 0.30372512340545654, 0.2963937222957611, 0.2934269309043884, 0.2921399772167206, 0.29196518659591675, 0.28376278281211853, 0.27814221382141113, 0.28025680780410767, 0.27556684613227844, 0.27136823534965515, 0.26541653275489807, 0.2650904655456543, 0.2547675371170044, 0.2550995647907257, 0.25281625986099243, 0.2553548514842987, 0.24481330811977386, 0.24478581547737122, 0.24238261580467224, 0.23891229927539825, 0.2235558182001114, 0.23680682480335236, 0.22647228837013245], "accuracy": [0.2716946303844452, 0.49266940355300903, 0.5638620853424072, 0.6213181614875793, 0.6692643165588379, 0.709021270275116, 0.7279091477394104, 0.7413815855979919, 0.7573636174201965, 0.7638356685638428, 0.7750627398490906, 0.785629391670227, 0.7901201844215393, 0.7913089394569397, 0.8053097128868103, 0.8050455451011658, 0.8123101592063904, 0.8173292875289917, 0.8220842480659485, 0.8215559124946594, 0.8267071843147278, 0.8321225643157959, 0.8366134166717529, 0.839519202709198, 0.8374059200286865, 0.8475762605667114, 0.8465195894241333, 0.8496896028518677, 0.8556333184242249, 0.8524633646011353, 0.8588033318519592, 0.8584070801734924, 0.859199583530426, 0.8642187118530273, 0.8683133125305176, 0.8640866279602051, 0.8693699836730957, 0.8692378997802734, 0.8714832663536072, 0.8705587387084961, 0.8767666220664978, 0.8751816153526306, 0.8786157965660095, 0.8796724081039429, 0.8829745054244995, 0.884691596031189, 0.8853520154953003, 0.8820499181747437, 0.8862766027450562, 0.8894465565681458, 0.8920882344245911, 0.8932769894599915, 0.8961827754974365, 0.89988112449646, 0.8976356983184814, 0.8972394466400146, 0.9013340473175049, 0.8977677822113037, 0.9029190540313721, 0.900409460067749, 0.9049002528190613, 0.9058248400688171, 0.9055606722831726, 0.9075419306755066, 0.9097873568534851, 0.9088627696037292, 0.9093911051750183, 0.9100515246391296, 0.9137498140335083, 0.9142781496047974, 0.9191652536392212, 0.9124290347099304, 0.9140139818191528], "val_loss": [2.039398670196533, 1.5121160745620728, 1.0459238290786743, 0.8479204773902893, 0.7583581805229187, 0.7094066739082336, 0.6600675582885742, 0.6270418167114258, 0.601986825466156, 0.5784321427345276, 0.5594853758811951, 0.5452472567558289, 0.5309016704559326, 0.516670823097229, 0.5062810182571411, 0.5023834705352783, 0.4888395071029663, 0.4857185184955597, 0.4733540415763855, 0.47202274203300476, 0.46147334575653076, 0.4561583697795868, 0.455524742603302, 0.45279401540756226, 0.43963420391082764, 0.43962717056274414, 0.43738630414009094, 0.4258880615234375, 0.42272356152534485, 0.4212755858898163, 0.4233325719833374, 0.41326647996902466, 0.41017839312553406, 0.40833625197410583, 0.40596523880958557, 0.4000058174133301, 0.4013361930847168, 0.39645063877105713, 0.39479467272758484, 0.39646613597869873, 0.3897799849510193, 0.38903966546058655, 0.3909814953804016, 0.3889097571372986, 0.3796372413635254, 0.3804548680782318, 0.381434828042984, 0.38231709599494934, 0.379076212644577, 0.3741823732852936, 0.3745092451572418, 0.36831149458885193, 0.36992374062538147, 0.37760472297668457, 0.3679829239845276, 0.36867639422416687, 0.36879366636276245, 0.3642398715019226, 0.3623727560043335, 0.36713239550590515, 0.3638722002506256, 0.3662383556365967, 0.36281177401542664, 0.3590165972709656, 0.3563113510608673, 0.3600479066371918, 0.36368507146835327, 0.3535151481628418, 0.359514445066452, 0.35501497983932495, 0.3574596345424652, 0.3586840331554413, 0.35464441776275635], "val_accuracy": [0.5413333177566528, 0.6623333096504211, 0.6806666851043701, 0.7076666951179504, 0.7289999723434448, 0.7483333349227905, 0.7590000033378601, 0.7680000066757202, 0.7799999713897705, 0.7923333048820496, 0.8006666898727417, 0.809333324432373, 0.8119999766349792, 0.8109999895095825, 0.812666654586792, 0.8186666369438171, 0.8253333568572998, 0.8236666917800903, 0.8296666741371155, 0.8306666612625122, 0.8306666612625122, 0.8339999914169312, 0.8353333473205566, 0.8363333344459534, 0.8396666646003723, 0.8426666855812073, 0.843999981880188, 0.8460000157356262, 0.8450000286102295, 0.8493333458900452, 0.8460000157356262, 0.8496666550636292, 0.8523333072662354, 0.8529999852180481, 0.8526666760444641, 0.8550000190734863, 0.8553333282470703, 0.8526666760444641, 0.8513333201408386, 0.8606666922569275, 0.8606666922569275, 0.8576666712760925, 0.8556666374206543, 0.8586666584014893, 0.8613333106040955, 0.862333357334137, 0.8610000014305115, 0.8569999933242798, 0.8603333234786987, 0.8616666793823242, 0.8640000224113464, 0.8656666874885559, 0.8646666407585144, 0.8650000095367432, 0.8690000176429749, 0.8650000095367432, 0.8696666955947876, 0.8656666874885559, 0.8683333396911621, 0.8706666827201843, 0.8706666827201843, 0.8679999709129333, 0.8653333187103271, 0.8696666955947876, 0.8743333220481873, 0.8730000257492065, 0.8726666569709778, 0.8766666650772095, 0.8733333349227905, 0.8733333349227905, 0.8763333559036255, 0.8736666440963745, 0.8726666569709778]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 5, 0, 3, 5], [0, 2, 0, 3], [16, 70], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 7, 4, 4, 8, 3, 7, 8, 8, 4, 4, 9, 5, 9, 2], [0, 0, 6, 0, 0, 5, 2], [43, 88, 51, 78, 11, 56], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [4, 3, 3, 6, 2, 1, 4, 1, 4, 2, 8, 5, 6], [4, 0, 0, 3, 1, 0, 4, 1, 2, 0, 4, 6], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 22, 15, 7, 6, 25, 13, 12, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(tf.math.sqrt(tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.sqrt(grad)), tf.math.pow(tf.math.pow(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), grad)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)), tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.sqrt(tf.math.square(alpha)))), beta), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 0, 3], [0, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 1, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 1, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 2, 1, 2, 3], [16, 99, 96, 99, 61, 6]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 10, 6, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3037238121032715, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10130762308835983, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 2], [39, 69], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 3], [0, 3, 0, 3, 2], [16, 36], [0, 1, 1], [2], [0, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 2], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 27, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 2, 3, 1, 2, 1, 16, 8, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.multiply(grad, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 0, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 3, 0, 3, 5], [0, 2, 0, 3], [67, 16], [0, 1], [0], [0], [94], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8], [3, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(beta, tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}, "mapping_values": [1, 5, 3, 2, 1, 6, 4, 2, 1, 2, 1, 1, 1, 20, 10, 10, 4], "tree_depth": 17}]