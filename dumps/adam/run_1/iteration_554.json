[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8705714344978333, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2240054607391357, 1.8685656785964966, 1.3954429626464844, 1.0917903184890747, 0.9366280436515808, 0.8230300545692444, 0.7624375820159912, 0.7234866619110107, 0.6829476356506348, 0.653763473033905, 0.6268720626831055, 0.6097931265830994, 0.5846710205078125, 0.5668558478355408, 0.5502431988716125, 0.5396422147750854, 0.5302543640136719, 0.5068072080612183, 0.491805762052536, 0.48960962891578674, 0.4735028147697449, 0.4694320261478424, 0.4551052153110504, 0.4525417387485504, 0.4487035870552063, 0.4395228922367096, 0.4263154864311218, 0.4223330020904541, 0.4143141210079193, 0.4078317880630493, 0.40397536754608154, 0.39521610736846924, 0.3909760117530823, 0.389585018157959, 0.3899853825569153, 0.3760216534137726, 0.3698529601097107, 0.3628220856189728, 0.3537020683288574, 0.3497336804866791, 0.3465805649757385, 0.34207797050476074, 0.3350299596786499, 0.3325023055076599, 0.3326720893383026, 0.32320353388786316, 0.3204939067363739, 0.30833953619003296, 0.3084070086479187, 0.29920703172683716, 0.3029942810535431, 0.2931089997291565, 0.29808714985847473, 0.2950044870376587, 0.29062801599502563, 0.28276491165161133, 0.2727300822734833, 0.27534860372543335, 0.2716551125049591, 0.2633090913295746, 0.2602297067642212, 0.2570546269416809, 0.24755612015724182, 0.2511877715587616, 0.24766163527965546, 0.2402195930480957, 0.23830056190490723, 0.2408844530582428, 0.2348986715078354, 0.23069173097610474, 0.2330760657787323], "accuracy": [0.2677321434020996, 0.48870691657066345, 0.5670320987701416, 0.6239598393440247, 0.6656980514526367, 0.7061154246330261, 0.7240787148475647, 0.7416457533836365, 0.7534011602401733, 0.759609043598175, 0.7746664881706238, 0.7796856164932251, 0.7898560166358948, 0.7981772422790527, 0.8042530417442322, 0.8026680946350098, 0.8105930685997009, 0.8157442808151245, 0.8273676037788391, 0.8241975903511047, 0.8310658931732178, 0.8310658931732178, 0.8416325449943542, 0.8368775844573975, 0.843481719493866, 0.8455950617790222, 0.8508783578872681, 0.8537842035293579, 0.8555012345314026, 0.8595958352088928, 0.860652506351471, 0.8605204224586487, 0.8595958352088928, 0.86118084192276, 0.8603883385658264, 0.8663320541381836, 0.868049144744873, 0.8714832663536072, 0.8766345381736755, 0.8742570281028748, 0.8800686597824097, 0.8776912093162537, 0.8802007436752319, 0.8854840993881226, 0.8823140859603882, 0.8836349248886108, 0.8857482671737671, 0.8914278149604797, 0.8901069760322571, 0.8931449055671692, 0.8939374089241028, 0.8924844861030579, 0.8923524022102356, 0.8948619961738586, 0.8939374089241028, 0.9010698795318604, 0.90423983335495, 0.8957865834236145, 0.9010698795318604, 0.9060890078544617, 0.9052965044975281, 0.9064852595329285, 0.906749427318573, 0.9076740145683289, 0.9097873568534851, 0.9091269373893738, 0.9119006991386414, 0.9116365313529968, 0.913089394569397, 0.9210143685340881, 0.9152027368545532], "val_loss": [2.0422840118408203, 1.5297905206680298, 1.068402886390686, 0.8609443306922913, 0.760211169719696, 0.6973733901977539, 0.648809015750885, 0.6131716966629028, 0.5798126459121704, 0.5611448287963867, 0.5404175519943237, 0.5207406282424927, 0.5059541463851929, 0.490987628698349, 0.484444797039032, 0.4725838303565979, 0.4621838331222534, 0.4526923894882202, 0.44361913204193115, 0.4341377317905426, 0.4305258095264435, 0.42456233501434326, 0.41655591130256653, 0.41101059317588806, 0.41106700897216797, 0.4027688503265381, 0.40026819705963135, 0.39714038372039795, 0.3929654061794281, 0.3894484043121338, 0.3815397024154663, 0.3828059136867523, 0.3842402398586273, 0.37262240052223206, 0.3767277002334595, 0.37466081976890564, 0.366472452878952, 0.36439022421836853, 0.3579109311103821, 0.36211052536964417, 0.3571866452693939, 0.3546292185783386, 0.35898324847221375, 0.34557467699050903, 0.3482566177845001, 0.3486453890800476, 0.3421401083469391, 0.3422401249408722, 0.33850595355033875, 0.33931052684783936, 0.34054699540138245, 0.341773122549057, 0.3329479694366455, 0.3444617986679077, 0.33269816637039185, 0.33550533652305603, 0.33259692788124084, 0.3366936445236206, 0.32689401507377625, 0.3283245265483856, 0.32434237003326416, 0.3223995268344879, 0.3214586675167084, 0.3241971433162689, 0.3248482048511505, 0.32520592212677, 0.3189530074596405, 0.32451340556144714, 0.3187207877635956, 0.3210589289665222, 0.320302814245224], "val_accuracy": [0.5196666717529297, 0.6556666493415833, 0.668666660785675, 0.6930000185966492, 0.7266666889190674, 0.7436666488647461, 0.7606666684150696, 0.7699999809265137, 0.7820000052452087, 0.7923333048820496, 0.8003333210945129, 0.8109999895095825, 0.8180000185966492, 0.8176666498184204, 0.8226666450500488, 0.8243333101272583, 0.8256666660308838, 0.8296666741371155, 0.8360000252723694, 0.8379999995231628, 0.8399999737739563, 0.840666651725769, 0.8476666808128357, 0.8460000157356262, 0.843999981880188, 0.8479999899864197, 0.8529999852180481, 0.8496666550636292, 0.8529999852180481, 0.8543333411216736, 0.8529999852180481, 0.8586666584014893, 0.8569999933242798, 0.8600000143051147, 0.8573333621025085, 0.8633333444595337, 0.8610000014305115, 0.8610000014305115, 0.8650000095367432, 0.8643333315849304, 0.8656666874885559, 0.8646666407585144, 0.8656666874885559, 0.8686666488647461, 0.8673333525657654, 0.8686666488647461, 0.8656666874885559, 0.8693333268165588, 0.8700000047683716, 0.8706666827201843, 0.8686666488647461, 0.8690000176429749, 0.8690000176429749, 0.8686666488647461, 0.8723333477973938, 0.8696666955947876, 0.8693333268165588, 0.8726666569709778, 0.8763333559036255, 0.8730000257492065, 0.875333309173584, 0.8769999742507935, 0.878000020980835, 0.8786666393280029, 0.8776666522026062, 0.8793333172798157, 0.8776666522026062, 0.871666669845581, 0.878333330154419, 0.8766666650772095, 0.8740000128746033]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [1, 1], [4], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [44, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 20, 10, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3], [0, 1, 2, 2], [57, 14], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 0, 2, 2, 0], [0, 0, 4, 0], [99, 84, 41], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8, 7], [0, 0, 0, 4, 2, 0, 3, 1, 2, 0, 4], [16, 20, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 9, 5, 4, 3, 23, 12, 11, 5], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(grad), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(beta, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.math.add(alpha, beta))))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [4, 2, 3, 0, 3, 1], [0, 0, 0, 2, 0, 3], [8, 39, 8, 69], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 9, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 4, 7, 5, 2, 2, 2, 1, 1, 1, 21, 12, 9, 6], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), sigma), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 0, 0, 3, 5, 2, 3, 0, 5, 7, 6, 8, 5], [0, 2, 3, 3, 1, 1, 2], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 8, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 14, 99, 61, 1]], "fitness": -0.05657142773270607, "mapping_values": [1, 9, 5, 4, 2, 21, 14, 7, 1, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta)))), tf.math.add(grad, tf.math.multiply(tf.math.negative(tf.math.square(tf.math.add(grad, tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.math.square(alpha))))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), sigma))), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), alpha)", "other_info": {"loss": [2.8290076130067965e+26, 3.2064942205661186e+26, 3.2416835984960084e+26, 3.2087177910967635e+26, 3.252466827211736e+26, 3.231030603793441e+26], "accuracy": [0.06934354454278946, 0.06736230105161667, 0.07185312360525131, 0.07013604789972305, 0.0664377212524414, 0.0676264688372612], "val_loss": [2.7471033314497632e+26, 2.747100748905593e+26, 2.747098535296304e+26, 2.747098535296304e+26, 2.747098535296304e+26, 2.747098535296304e+26], "val_accuracy": [0.059333331882953644, 0.059333331882953644, 0.059333331882953644, 0.059333331882953644, 0.059333331882953644, 0.059333331882953644]}}]