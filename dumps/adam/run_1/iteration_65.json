[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8600000143051147, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.225478172302246, 1.8660492897033691, 1.3916741609573364, 1.097281575202942, 0.9287990927696228, 0.8325012922286987, 0.7805429100990295, 0.7263820171356201, 0.6810762286186218, 0.6523354053497314, 0.628956139087677, 0.610974907875061, 0.5898351669311523, 0.5691647529602051, 0.549057126045227, 0.5359197854995728, 0.5165186524391174, 0.5139455795288086, 0.5019310712814331, 0.48985159397125244, 0.46913811564445496, 0.47154876589775085, 0.45556846261024475, 0.45627373456954956, 0.44879063963890076, 0.4344477355480194, 0.4220552146434784, 0.42053157091140747, 0.40729960799217224, 0.4030202329158783, 0.3949616551399231, 0.3864384889602661, 0.38811108469963074, 0.38011571764945984, 0.37014487385749817, 0.3658140003681183, 0.3665429651737213, 0.3585875630378723, 0.3515978753566742, 0.3449651896953583, 0.3441784679889679, 0.3313674032688141, 0.33008450269699097, 0.32794442772865295, 0.3280337452888489, 0.3181530237197876, 0.3108181953430176, 0.3139972984790802, 0.31015998125076294, 0.2978983223438263, 0.2972981333732605, 0.2881632447242737, 0.2883850336074829, 0.28024789690971375, 0.2815452814102173, 0.2767952084541321, 0.27274462580680847, 0.26900479197502136, 0.26904526352882385, 0.260823518037796, 0.26278287172317505, 0.25769880414009094, 0.24522779881954193, 0.24239878356456757, 0.24209728837013245, 0.2333168089389801, 0.22812175750732422, 0.23673176765441895, 0.22908669710159302], "accuracy": [0.2623167335987091, 0.4970281422138214, 0.5653150081634521, 0.6194690465927124, 0.6680755615234375, 0.6977941989898682, 0.7230220437049866, 0.7428345084190369, 0.759609043598175, 0.7675340175628662, 0.7730814814567566, 0.7849689722061157, 0.7852331399917603, 0.7977809906005859, 0.8041210174560547, 0.8084797263145447, 0.8169330358505249, 0.8157442808151245, 0.8212917447090149, 0.8227446675300598, 0.8318583965301514, 0.8313300609588623, 0.8416325449943542, 0.8393871188163757, 0.8385946154594421, 0.8450667262077332, 0.8488970994949341, 0.8519350290298462, 0.8543124794960022, 0.8582749962806702, 0.8598600029945374, 0.8628978729248047, 0.8668603897094727, 0.8661999702453613, 0.8720116019248962, 0.8676528930664062, 0.8681812286376953, 0.8685774803161621, 0.873860776424408, 0.8737286925315857, 0.8795403242111206, 0.8792761564254761, 0.876370370388031, 0.8829745054244995, 0.8835028409957886, 0.8848236799240112, 0.887597382068634, 0.8849557638168335, 0.8908994793891907, 0.8919561505317688, 0.8931449055671692, 0.8973715305328369, 0.8975036144256592, 0.897899866104126, 0.895918607711792, 0.8994848728179932, 0.8977677822113037, 0.9014661312103271, 0.9014661312103271, 0.9058248400688171, 0.902390718460083, 0.9082023501396179, 0.9126931428909302, 0.9108440279960632, 0.9125610589981079, 0.9137498140335083, 0.9126931428909302, 0.9129573106765747, 0.9138818979263306], "val_loss": [2.042551040649414, 1.5149385929107666, 1.0424273014068604, 0.8310586214065552, 0.7450823783874512, 0.6929304003715515, 0.6499242186546326, 0.6170439720153809, 0.5888307094573975, 0.5652881860733032, 0.5464364290237427, 0.5346410870552063, 0.5180549025535583, 0.5109106302261353, 0.4949180483818054, 0.48987504839897156, 0.47840791940689087, 0.4715662896633148, 0.46454039216041565, 0.4567587971687317, 0.4511029124259949, 0.4447283446788788, 0.44378140568733215, 0.4325304329395294, 0.43066859245300293, 0.42417287826538086, 0.4263156056404114, 0.42060625553131104, 0.4176104664802551, 0.4112500846385956, 0.40955260396003723, 0.4060458838939667, 0.4050264358520508, 0.40138915181159973, 0.40415140986442566, 0.3970631957054138, 0.39993950724601746, 0.39641621708869934, 0.3907107710838318, 0.39101269841194153, 0.38668158650398254, 0.3881683051586151, 0.38510385155677795, 0.388854444026947, 0.387070894241333, 0.3864765763282776, 0.3822920024394989, 0.3846249282360077, 0.3885306715965271, 0.38377827405929565, 0.37832459807395935, 0.3774203956127167, 0.37640082836151123, 0.3769226372241974, 0.37288907170295715, 0.3688676655292511, 0.37304139137268066, 0.3691069483757019, 0.36731448769569397, 0.36926335096359253, 0.3719515800476074, 0.36690405011177063, 0.37169766426086426, 0.3666214644908905, 0.3683653473854065, 0.3702702522277832, 0.36981746554374695, 0.3662078380584717, 0.3672808110713959], "val_accuracy": [0.5393333435058594, 0.656000018119812, 0.687333345413208, 0.7200000286102295, 0.7336666584014893, 0.7519999742507935, 0.7590000033378601, 0.765333354473114, 0.7770000100135803, 0.7870000004768372, 0.7986666560173035, 0.8033333420753479, 0.8083333373069763, 0.8103333115577698, 0.8206666707992554, 0.8256666660308838, 0.82833331823349, 0.8276666402816772, 0.8360000252723694, 0.8353333473205566, 0.8413333296775818, 0.8476666808128357, 0.8433333039283752, 0.8489999771118164, 0.8523333072662354, 0.8523333072662354, 0.8510000109672546, 0.8516666889190674, 0.8510000109672546, 0.859000027179718, 0.8603333234786987, 0.856333315372467, 0.8553333282470703, 0.8616666793823242, 0.8610000014305115, 0.8643333315849304, 0.8613333106040955, 0.8613333106040955, 0.8616666793823242, 0.8669999837875366, 0.8669999837875366, 0.8653333187103271, 0.8676666617393494, 0.8636666536331177, 0.8636666536331177, 0.8663333058357239, 0.8693333268165588, 0.8683333396911621, 0.8640000224113464, 0.8669999837875366, 0.8676666617393494, 0.8713333606719971, 0.8703333139419556, 0.8673333525657654, 0.8686666488647461, 0.871999979019165, 0.8666666746139526, 0.8713333606719971, 0.875, 0.8730000257492065, 0.874666690826416, 0.8743333220481873, 0.8703333139419556, 0.8766666650772095, 0.871999979019165, 0.8723333477973938, 0.8756666779518127, 0.8763333559036255, 0.8730000257492065]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 8], [0, 1, 0, 2], [37, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 5], [0, 2, 1, 3, 3], [16, 16], [0, 1], [0], [0], [45], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 3, 0, 4, 1, 4, 6, 2, 2, 3, 2], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0, 7, 1, 3, 5], [75, 99, 96, 70, 61, 99]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 11, 6, 5, 1, 2, 1, 1, 1, 28, 14, 14, 6], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(alpha, tf.math.square(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.math.add(grad, alpha), sigma), grad)))", "other_info": {"loss": [4.175189248049152e+16, 4.56895631651242e+17, 6.136369584254484e+17, 6.91847144654504e+17, 7.211169001001452e+17, 7.424048883229e+17], "accuracy": [0.1216483935713768, 0.1002509593963623, 0.10038304328918457, 0.10011887550354004, 0.09985470771789551, 0.10051512718200684], "val_loss": [2.8593502536964506e+17, 5.77830331474772e+17, 6.56215821088981e+17, 6.958258649185649e+17, 7.205821938516623e+17, 7.381157621824225e+17], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 4, 3, 6, 8, 5, 2, 3, 7, 7, 3, 6, 2, 8, 0], [0, 1, 0, 2, 0, 1, 0, 2, 2, 2, 0, 0, 2], [39, 39, 75, 73, 58, 9], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 3, 1, 3, 5, 3], [0, 2, 0, 3, 5, 4], [16, 7], [0, 0, 1, 0, 1], [0, 7, 0], [0, 1], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9, 1, 0, 6, 2, 6], [0, 0, 0, 3, 0, 0, 3, 4, 2, 4, 3, 1, 4], [76, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 18, 13, 6, 13, 7, 6, 2, 5, 3, 2, 1, 30, 17, 13, 6], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.square(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), grad), tf.math.negative(grad)), grad)), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(beta), tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), grad))), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), grad))), tf.math.add(tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.subtract(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(grad, sigma), alpha), grad))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 9, 2, 3], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 24, 13, 11, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(tf.math.multiply(sigma, alpha), beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 2, 3, 5, 0, 2, 6, 0, 3, 5, 7, 4, 4, 9, 5, 7, 0, 1], [0, 1, 0, 1, 1, 0, 3, 1, 2, 1, 0, 0], [39, 39, 82, 21, 92, 78], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 8, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 4, 8, 9, 4, 1, 4, 8, 8], [0, 0, 2, 3, 0, 0, 3, 4, 2, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(alpha), tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.multiply(alpha, tf.math.square(tf.math.add(tf.math.pow(tf.math.pow(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(grad, alpha))), tf.math.negative(grad))))))))), alpha), tf.math.subtract(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(beta))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.303441047668457, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}, "mapping_values": [1, 32, 20, 12, 6, 3, 2, 1, 1, 2, 1, 1, 1, 10, 6, 4, 3], "tree_depth": 31}]