[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8554285764694214, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2256340980529785, 1.872940182685852, 1.4119162559509277, 1.11851966381073, 0.9347013235092163, 0.8423888087272644, 0.7853723764419556, 0.732539713382721, 0.6919496655464172, 0.662169337272644, 0.6428810954093933, 0.6189000606536865, 0.6014456152915955, 0.5851656794548035, 0.5654488801956177, 0.5479176044464111, 0.5346418619155884, 0.524608314037323, 0.5073357224464417, 0.493668794631958, 0.4873594045639038, 0.47768428921699524, 0.4722599387168884, 0.4638826251029968, 0.4449998438358307, 0.44447723031044006, 0.4311365783214569, 0.4255499243736267, 0.4252128005027771, 0.4165514409542084, 0.41595718264579773, 0.4081228971481323, 0.40072518587112427, 0.3948183059692383, 0.383221834897995, 0.38050562143325806, 0.37851983308792114, 0.3693423569202423, 0.3673871159553528, 0.356646329164505, 0.34547802805900574, 0.350516676902771, 0.3482080399990082, 0.34372517466545105, 0.33257219195365906, 0.3303024470806122, 0.32153621315956116, 0.3197045922279358, 0.3140859305858612, 0.3121161460876465], "accuracy": [0.26522254943847656, 0.4897635579109192, 0.5591071248054504, 0.6086382269859314, 0.6699247360229492, 0.6951525807380676, 0.7211728692054749, 0.7368907928466797, 0.7440232634544373, 0.7578919529914856, 0.7713643908500671, 0.7795535326004028, 0.7821952104568481, 0.7873464822769165, 0.8000264167785645, 0.8064984679222107, 0.81112140417099, 0.8153480291366577, 0.8190463781356812, 0.8308017253875732, 0.8276317715644836, 0.828820526599884, 0.8327829837799072, 0.83119797706604, 0.8417646288871765, 0.8432175517082214, 0.8490291833877563, 0.852859616279602, 0.8519350290298462, 0.8544445633888245, 0.8548408150672913, 0.8564258217811584, 0.8564258217811584, 0.8568220734596252, 0.8656716346740723, 0.8625016212463379, 0.8639545440673828, 0.8677849769592285, 0.8717474341392517, 0.8751816153526306, 0.8778232932090759, 0.878351628780365, 0.8771628737449646, 0.8784837126731873, 0.8831065893173218, 0.8881257176399231, 0.8864086866378784, 0.8869370222091675, 0.8893144726753235, 0.889050304889679], "val_loss": [2.039849042892456, 1.5139994621276855, 1.0343080759048462, 0.8321824669837952, 0.7491297721862793, 0.7131995558738708, 0.6605586409568787, 0.6217098236083984, 0.5942752957344055, 0.574842631816864, 0.5632110834121704, 0.537276029586792, 0.5329781770706177, 0.5203538537025452, 0.500367283821106, 0.4871031939983368, 0.48116177320480347, 0.47122716903686523, 0.4615960419178009, 0.45544755458831787, 0.4502086043357849, 0.4460579454898834, 0.4380483031272888, 0.43025434017181396, 0.42758870124816895, 0.41952258348464966, 0.4170716106891632, 0.4144740700721741, 0.41688692569732666, 0.4071308970451355, 0.4039131700992584, 0.40110164880752563, 0.403341144323349, 0.3943972885608673, 0.3898029923439026, 0.3881349563598633, 0.38982343673706055, 0.380215048789978, 0.3792974054813385, 0.38094955682754517, 0.38089609146118164, 0.37587812542915344, 0.3730410039424896, 0.3699458837509155, 0.37414368987083435, 0.3683166205883026, 0.36686161160469055, 0.3618623912334442, 0.36523038148880005, 0.36492887139320374], "val_accuracy": [0.5329999923706055, 0.653333306312561, 0.684333324432373, 0.7059999704360962, 0.7233333587646484, 0.737666666507721, 0.7523333430290222, 0.765666663646698, 0.7833333611488342, 0.7846666574478149, 0.7976666688919067, 0.8016666769981384, 0.8056666851043701, 0.8119999766349792, 0.8169999718666077, 0.8206666707992554, 0.8289999961853027, 0.8289999961853027, 0.8346666693687439, 0.8349999785423279, 0.8379999995231628, 0.8379999995231628, 0.8429999947547913, 0.8423333168029785, 0.8423333168029785, 0.8486666679382324, 0.846666693687439, 0.847000002861023, 0.8473333120346069, 0.8519999980926514, 0.8543333411216736, 0.8526666760444641, 0.8506666421890259, 0.8543333411216736, 0.8556666374206543, 0.8603333234786987, 0.8610000014305115, 0.8579999804496765, 0.8613333106040955, 0.8579999804496765, 0.8603333234786987, 0.859000027179718, 0.8613333106040955, 0.8656666874885559, 0.8666666746139526, 0.8659999966621399, 0.8659999966621399, 0.8633333444595337, 0.8650000095367432, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 0, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 2, 1, 4, 2, 3], [0, 4, 0, 3, 0, 0, 3, 1, 2, 1], [16, 90, 96, 99, 61, 1]], "fitness": -0.45342856645584106, "mapping_values": [1, 9, 5, 4, 1, 5, 3, 2, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [2.3087358474731445, 2.3080039024353027, 2.3077216148376465, 2.3048479557037354, 2.3022377490997314, 2.3024818897247314, 2.3011245727539062, 2.298628807067871, 2.298682451248169, 2.295365571975708, 2.294914960861206, 2.292386770248413, 2.2907888889312744, 2.2894186973571777, 2.2873754501342773, 2.2858705520629883, 2.2864577770233154, 2.2839529514312744, 2.2825560569763184, 2.2812745571136475, 2.2798192501068115, 2.2793381214141846, 2.275076389312744, 2.2753055095672607, 2.2741401195526123, 2.2726898193359375, 2.2694203853607178, 2.2677574157714844, 2.267395496368408, 2.264833450317383, 2.2651259899139404, 2.26261830329895, 2.2592484951019287, 2.2583274841308594, 2.2557902336120605, 2.2534494400024414, 2.25434947013855, 2.252768039703369, 2.249645709991455, 2.2471964359283447, 2.24568772315979, 2.243049144744873, 2.2417750358581543, 2.239119291305542, 2.238776206970215, 2.235460042953491, 2.2344284057617188, 2.232409715652466, 2.2308356761932373, 2.226750373840332, 2.222194194793701, 2.222041130065918, 2.2193408012390137, 2.21736216545105, 2.2125635147094727, 2.212857961654663, 2.210049629211426, 2.2060554027557373], "accuracy": [0.0936468094587326, 0.0940430611371994, 0.09721305221319199, 0.10196803510189056, 0.10606260597705841, 0.09893012791872025, 0.10751552134752274, 0.10989301651716232, 0.10870426893234253, 0.11808215826749802, 0.11240258812904358, 0.1258750557899475, 0.1282525360584259, 0.12798838317394257, 0.14119666814804077, 0.14093250036239624, 0.14119666814804077, 0.14634791016578674, 0.14898955821990967, 0.15189538896083832, 0.15612204372882843, 0.15968827903270721, 0.1710474193096161, 0.1686699241399765, 0.17012283205986023, 0.17078325152397156, 0.18531237542629242, 0.18623696267604828, 0.18795403838157654, 0.19799233973026276, 0.19442610442638397, 0.20380398631095886, 0.21357811987400055, 0.21991810202598572, 0.22942808270454407, 0.23140932619571686, 0.22255976498126984, 0.22440892457962036, 0.23352265357971191, 0.23854179680347443, 0.24342887103557587, 0.2467309534549713, 0.25003302097320557, 0.251750111579895, 0.2595430016517639, 0.26258090138435364, 0.26099589467048645, 0.2677321434020996, 0.27565711736679077, 0.2810725271701813, 0.29243165254592896, 0.2814687490463257, 0.2917712330818176, 0.29599788784980774, 0.30524370074272156, 0.29903578758239746, 0.2969224750995636, 0.3085457682609558], "val_loss": [2.307467460632324, 2.3059616088867188, 2.3043479919433594, 2.3027219772338867, 2.3010919094085693, 2.299450635910034, 2.297813892364502, 2.2961556911468506, 2.2945196628570557, 2.292905330657959, 2.2913010120391846, 2.2896909713745117, 2.288099765777588, 2.2865116596221924, 2.2849113941192627, 2.283320903778076, 2.2817482948303223, 2.2801899909973145, 2.2786247730255127, 2.277043581008911, 2.2754476070404053, 2.2738711833953857, 2.2722525596618652, 2.270634412765503, 2.2689969539642334, 2.2673609256744385, 2.2657241821289062, 2.2640388011932373, 2.2623584270477295, 2.260633707046509, 2.258899688720703, 2.2571511268615723, 2.255354642868042, 2.253538131713867, 2.2516820430755615, 2.2497849464416504, 2.247847080230713, 2.2459161281585693, 2.2439279556274414, 2.241909980773926, 2.2398297786712646, 2.237691640853882, 2.235543727874756, 2.233335018157959, 2.2311108112335205, 2.228809356689453, 2.2264750003814697, 2.2240803241729736, 2.221652030944824, 2.219127655029297, 2.216538667678833, 2.2139127254486084, 2.2112178802490234, 2.208468198776245, 2.2056143283843994, 2.2027437686920166, 2.1997647285461426, 2.1967103481292725], "val_accuracy": [0.09533333033323288, 0.09833333641290665, 0.10000000149011612, 0.10066666454076767, 0.10166666656732559, 0.10499999672174454, 0.109333336353302, 0.11400000005960464, 0.11866666376590729, 0.12200000137090683, 0.12700000405311584, 0.13333334028720856, 0.13733333349227905, 0.14533333480358124, 0.15066666901111603, 0.15800000727176666, 0.16433332860469818, 0.17366667091846466, 0.18266665935516357, 0.19300000369548798, 0.2006666660308838, 0.2133333384990692, 0.22366666793823242, 0.23499999940395355, 0.24533332884311676, 0.2553333342075348, 0.2639999985694885, 0.2763333320617676, 0.2866666615009308, 0.29600000381469727, 0.3100000023841858, 0.320333331823349, 0.3319999873638153, 0.3423333466053009, 0.35466668009757996, 0.3616666793823242, 0.37166666984558105, 0.38066667318344116, 0.38966667652130127, 0.3946666717529297, 0.39899998903274536, 0.40433332324028015, 0.4086666703224182, 0.4163333475589752, 0.42100000381469727, 0.42366665601730347, 0.4246666729450226, 0.429666668176651, 0.4300000071525574, 0.43299999833106995, 0.43533334136009216, 0.43833333253860474, 0.4423333406448364, 0.4423333406448364, 0.4410000145435333, 0.4416666626930237, 0.4416666626930237, 0.4413333237171173]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 2, 2], [64, 59], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 5, 5], [0, 2, 0, 3], [16, 16], [0, 1], [5], [0], [99], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [5, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4, 3, 3, 1, 1, 1, 6, 3, 5, 8, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7, 5, 4, 2, 6, 7, 0, 7], [16, 99, 96, 15, 61, 1, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 0, 6, 3, 3, 2, 2, 1, 1, 1, 40, 22, 18, 7], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.multiply(sigma, alpha), beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(grad, grad), tf.math.multiply(beta, tf.math.square(tf.math.sqrt(grad)))), grad), tf.math.pow(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0], [0, 2, 3, 0, 3, 5, 0, 6, 6, 9], [0, 2, 0, 3, 0], [16, 16, 82, 92], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [6, 3, 3, 6, 8, 8, 1, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 2, 15, 10, 5, 4, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [623207104.0, 712380416.0, 713951552.0, 712112320.0, 716874496.0, 705458944.0], "accuracy": [0.1010434553027153, 0.09985470771789551, 0.10408136248588562, 0.1002509593963623, 0.09760929644107819, 0.09655263274908066], "val_loss": [538043328.0, 538149184.0, 538212480.0, 538258432.0, 538294208.0, 538323648.0], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 2, 8, 0, 3], [2, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 2, 3, 0, 3, 2, 9], [0, 2, 0, 3], [16, 16, 19], [0, 1], [0], [4], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [77, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 11, 7, 4, 3, 2, 1, 1, 0, 16, 8, 8, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [1778928.5, 21.975648880004883, 34.41375732421875, 45.019927978515625, 53.17885208129883, 60.04746627807617, 63.212554931640625, 64.53675079345703, 64.7177734375], "accuracy": [0.09972262382507324, 0.09826971590518951, 0.09972262382507324, 0.10249637067317963, 0.10527011007070541, 0.09747721254825592, 0.10210011899471283, 0.107647605240345, 0.09734513610601425], "val_loss": [4.422707557678223, 4.334308624267578, 8.851905822753906, 8.670858383178711, 4.32243013381958, 7.054464340209961, 8.842884063720703, 6.415644645690918, 11.650799751281738], "val_accuracy": [0.10066666454076767, 0.0989999994635582, 0.0989999994635582, 0.10233332961797714, 0.09733333438634872, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.0989999994635582]}}]