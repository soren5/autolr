[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8568571209907532, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223723888397217, 1.8630520105361938, 1.3966747522354126, 1.0963159799575806, 0.9697138071060181, 0.8743785619735718, 0.7927377820014954, 0.7423154711723328, 0.7132572531700134, 0.674091100692749, 0.6550991535186768, 0.6225780844688416, 0.6095944046974182, 0.5929419994354248, 0.5711905360221863, 0.5654823184013367, 0.5419638752937317, 0.5305069088935852, 0.533665120601654, 0.5177987813949585, 0.501293957233429, 0.49703285098075867, 0.48503661155700684, 0.47805342078208923, 0.46113288402557373, 0.45297110080718994, 0.4479001462459564, 0.44300946593284607, 0.4366260766983032, 0.4337669909000397, 0.41997817158699036, 0.41858670115470886, 0.4097647964954376, 0.4058298170566559, 0.39534032344818115, 0.3994680345058441, 0.380658358335495, 0.3793211877346039, 0.37481489777565, 0.3668855130672455, 0.36130547523498535, 0.3597092032432556, 0.347369521856308, 0.35254210233688354, 0.3358224332332611, 0.34031087160110474, 0.33377277851104736, 0.32835620641708374, 0.3200974464416504, 0.3249518871307373, 0.31430768966674805, 0.30591022968292236, 0.3061576783657074, 0.3040213882923126, 0.2987424433231354, 0.2999429702758789, 0.28893041610717773, 0.28415510058403015, 0.28660157322883606, 0.2757534682750702, 0.27112728357315063], "accuracy": [0.2728833854198456, 0.4861973226070404, 0.5621450543403625, 0.6151102781295776, 0.6514331102371216, 0.6888125538825989, 0.7116629481315613, 0.7280412316322327, 0.739928662776947, 0.7573636174201965, 0.7647602558135986, 0.7670056819915771, 0.7777044177055359, 0.7784969210624695, 0.7930260300636292, 0.7906485199928284, 0.8063663840293884, 0.8103289008140564, 0.8041210174560547, 0.8138951063156128, 0.8247259259223938, 0.8162726163864136, 0.8267071843147278, 0.8305375576019287, 0.8314621448516846, 0.834632158279419, 0.8403117060661316, 0.8370096683502197, 0.8473120927810669, 0.8459912538528442, 0.8467837572097778, 0.8469158411026001, 0.8481045961380005, 0.8560295701026917, 0.860652506351471, 0.8556333184242249, 0.863029956817627, 0.8658037185668945, 0.8654074668884277, 0.8691058158874512, 0.8705587387084961, 0.8732003569602966, 0.8751816153526306, 0.8728041052818298, 0.8795403242111206, 0.8772949576377869, 0.8751816153526306, 0.8809932470321655, 0.8835028409957886, 0.8828424215316772, 0.8862766027450562, 0.8897107243537903, 0.8857482671737671, 0.8923524022102356, 0.8910315632820129, 0.8893144726753235, 0.8963148593902588, 0.8953903317451477, 0.8931449055671692, 0.900409460067749, 0.8997490406036377], "val_loss": [2.0373873710632324, 1.5121899843215942, 1.0426403284072876, 0.8371972441673279, 0.7482108473777771, 0.6922574639320374, 0.6460206508636475, 0.6090641021728516, 0.5823928117752075, 0.5627689361572266, 0.5418398976325989, 0.5284458994865417, 0.5146840214729309, 0.5005781054496765, 0.49035584926605225, 0.47945746779441833, 0.47150224447250366, 0.4641050696372986, 0.45748379826545715, 0.4519187808036804, 0.4388923645019531, 0.436786413192749, 0.4355560839176178, 0.4252357482910156, 0.41640251874923706, 0.4129056930541992, 0.4080057740211487, 0.4042743444442749, 0.4018053114414215, 0.39601537585258484, 0.3949480652809143, 0.3887914717197418, 0.3892442584037781, 0.3859001100063324, 0.38335657119750977, 0.38421595096588135, 0.37745723128318787, 0.37087392807006836, 0.3699267506599426, 0.3727115988731384, 0.3706563413143158, 0.3650144934654236, 0.3641320466995239, 0.36442655324935913, 0.3586547076702118, 0.3588392436504364, 0.3601396381855011, 0.35977259278297424, 0.356292724609375, 0.3571426272392273, 0.3561120629310608, 0.35798269510269165, 0.3515949845314026, 0.3505152463912964, 0.34758928418159485, 0.34741467237472534, 0.3521885275840759, 0.35178515315055847, 0.3492688536643982, 0.35483425855636597, 0.3514494299888611], "val_accuracy": [0.47733333706855774, 0.6489999890327454, 0.6743333339691162, 0.7013333439826965, 0.7289999723434448, 0.734333336353302, 0.7540000081062317, 0.7756666541099548, 0.7806666493415833, 0.7860000133514404, 0.7996666431427002, 0.8076666593551636, 0.8090000152587891, 0.8136666417121887, 0.8176666498184204, 0.8273333311080933, 0.8286666870117188, 0.8326666951179504, 0.8386666774749756, 0.8403333425521851, 0.8433333039283752, 0.8379999995231628, 0.8413333296775818, 0.856333315372467, 0.8539999723434448, 0.8506666421890259, 0.8529999852180481, 0.859333336353302, 0.8539999723434448, 0.8543333411216736, 0.8536666631698608, 0.862333357334137, 0.8663333058357239, 0.8576666712760925, 0.8619999885559082, 0.8666666746139526, 0.862666666507721, 0.8663333058357239, 0.8643333315849304, 0.8669999837875366, 0.8643333315849304, 0.8669999837875366, 0.8683333396911621, 0.8693333268165588, 0.8666666746139526, 0.8690000176429749, 0.8726666569709778, 0.8733333349227905, 0.8709999918937683, 0.8743333220481873, 0.8733333349227905, 0.8743333220481873, 0.8743333220481873, 0.878000020980835, 0.8736666440963745, 0.8793333172798157, 0.8766666650772095, 0.8726666569709778, 0.878333330154419, 0.8766666650772095, 0.8769999742507935]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 5, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 2], [16, 99, 96, 99, 61, 28]], "fitness": -0.10285714268684387, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma), alpha)", "other_info": {"loss": [915595722752.0, 934030671872.0, 930933571584.0, 1179126595584.0, 1148801646592.0, 1231944810496.0, 10627798007808.0], "accuracy": [0.09774138033390045, 0.10328886657953262, 0.10302469879388809, 0.10170386731624603, 0.1010434553027153, 0.09457138925790787, 0.10051512718200684], "val_loss": [748134465536.0, 769053425664.0, 833441431552.0, 1092710301696.0, 1940055392256.0, 4683077779456.0, 13082427392000.0], "val_accuracy": [0.10433333367109299, 0.10466666519641876, 0.10466666519641876, 0.10366666316986084, 0.10300000011920929, 0.10333333164453506, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [39, 39, 52], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [6, 3, 6, 6, 8, 1, 4, 1, 4, 2, 8, 3, 7, 3, 5, 3, 1, 9, 0, 1, 3, 7, 7, 2, 7, 7, 2, 2, 1, 0, 2, 8, 8, 2, 2, 6, 4, 7, 7, 7, 5, 5, 8, 1, 6, 9, 5, 9, 7], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 0, 4, 7, 1, 6, 7, 0, 7, 3, 7, 3, 2, 6, 7, 2, 1, 0, 6, 2, 2, 2, 1, 1], [16, 99, 64, 99, 61, 1, 22, 17, 17, 43, 52, 98]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 2, 1, 1, 1, 2, 1, 1, 1, 82, 49, 33, 12], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(sigma, tf.math.subtract(tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(sigma, alpha), tf.math.multiply(tf.math.square(tf.math.multiply(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.subtract(grad, tf.math.multiply(grad, tf.math.add(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(tf.math.add(tf.math.add(tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.sqrt(grad)), sigma)), tf.math.add(grad, sigma))), beta), grad), tf.math.add(grad, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.math.add(tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), grad), beta)), tf.math.square(tf.math.sqrt(beta))))))))))), tf.math.subtract(beta, tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 32], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 2], [16, 59], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 4, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 17]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 7, 4, 3, 2, 2, 1, 1, 1, 16, 8, 8, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(grad), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.subtract(sigma, grad)), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 5, 5], [0, 2, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 9, 8], [0, 1, 2, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 7, 4, 3, 1, 2, 1, 1, 1, 18, 10, 8, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(alpha, beta), grad), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), alpha), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}]