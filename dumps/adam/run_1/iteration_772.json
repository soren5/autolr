[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8551428318023682, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2226717472076416, 1.8716561794281006, 1.4006824493408203, 1.0940253734588623, 0.9407487511634827, 0.8380973935127258, 0.7705795764923096, 0.7238312363624573, 0.6896024942398071, 0.6555942296981812, 0.6351500749588013, 0.6015276908874512, 0.5911573767662048, 0.5785626173019409, 0.555383563041687, 0.5443915724754333, 0.5267392992973328, 0.5126525163650513, 0.5052641034126282, 0.4891328513622284, 0.4789069592952728, 0.469624400138855, 0.4668433666229248, 0.46035757660865784, 0.4449746608734131, 0.4268830120563507, 0.4396391212940216, 0.42694076895713806, 0.4209914803504944, 0.40554574131965637, 0.4068566858768463, 0.39626193046569824, 0.3923361003398895, 0.38482847809791565, 0.38168612122535706, 0.3687216639518738, 0.3669393062591553, 0.36543020606040955, 0.3560808300971985, 0.3589629530906677, 0.3489256799221039, 0.34491297602653503, 0.33865591883659363, 0.3329605758190155, 0.32321298122406006, 0.3118201196193695, 0.31690388917922974, 0.31252166628837585, 0.3034648001194, 0.3043364882469177, 0.3011017143726349, 0.29629355669021606, 0.292279452085495, 0.29386192560195923, 0.28414902091026306, 0.2814740836620331, 0.2754012942314148, 0.2738533914089203, 0.2666628360748291, 0.26188406348228455, 0.26139092445373535, 0.25670626759529114, 0.24639402329921722, 0.24775618314743042, 0.24538587033748627, 0.24151936173439026, 0.2394978404045105, 0.22990919649600983, 0.22505958378314972, 0.2242307811975479, 0.21681316196918488, 0.2176417112350464, 0.21573907136917114, 0.2149820476770401, 0.2111368179321289, 0.2115108221769333, 0.20744900405406952], "accuracy": [0.27777042984962463, 0.4880464971065521, 0.5633337497711182, 0.6210539937019348, 0.6664905548095703, 0.6996433734893799, 0.724210798740387, 0.735041618347168, 0.7479857206344604, 0.7594769597053528, 0.7648923397064209, 0.778232753276825, 0.7819310426712036, 0.7924976944923401, 0.8005547523498535, 0.802271842956543, 0.8016114234924316, 0.8117818236351013, 0.8156121969223022, 0.8216879963874817, 0.8296129703521729, 0.8313300609588623, 0.8302733898162842, 0.8339717388153076, 0.843481719493866, 0.8442742228507996, 0.8411042094230652, 0.8499537706375122, 0.8496896028518677, 0.8544445633888245, 0.852859616279602, 0.8549728989601135, 0.8562937378883362, 0.8614450097084045, 0.8656716346740723, 0.8656716346740723, 0.8692378997802734, 0.8704266548156738, 0.8725399374961853, 0.8692378997802734, 0.8776912093162537, 0.8762382864952087, 0.8779553771018982, 0.8787478804588318, 0.8820499181747437, 0.8883898854255676, 0.8811253309249878, 0.8860124349594116, 0.8903711438179016, 0.8885219693183899, 0.8920882344245911, 0.8903711438179016, 0.8916919827461243, 0.8936732411384583, 0.8975036144256592, 0.8956544995307922, 0.8986923694610596, 0.9045040011405945, 0.9031832218170166, 0.9055606722831726, 0.9021265506744385, 0.9068815112113953, 0.9115044474601746, 0.909259021282196, 0.909259021282196, 0.9124290347099304, 0.9101836085319519, 0.9161273241043091, 0.9144102334976196, 0.9159952402114868, 0.9223352074623108, 0.920089840888977, 0.9245806336402893, 0.9216747879981995, 0.9241843819618225, 0.9243164658546448, 0.9225993752479553], "val_loss": [2.0363903045654297, 1.506051778793335, 1.026303768157959, 0.8089211583137512, 0.7203336358070374, 0.6659186482429504, 0.6229018568992615, 0.5887921452522278, 0.5586889386177063, 0.5379867553710938, 0.5151901841163635, 0.5085669159889221, 0.4882800579071045, 0.4717485010623932, 0.46098628640174866, 0.45738524198532104, 0.44435545802116394, 0.4327736794948578, 0.4304257035255432, 0.4168267548084259, 0.4146451950073242, 0.41580453515052795, 0.40262991189956665, 0.401487797498703, 0.3892269730567932, 0.3864867687225342, 0.39277884364128113, 0.3791872560977936, 0.3782479763031006, 0.37545958161354065, 0.3671553432941437, 0.3656773567199707, 0.3657705783843994, 0.3704122006893158, 0.35797929763793945, 0.3535415828227997, 0.35229337215423584, 0.35783183574676514, 0.35777971148490906, 0.3474535346031189, 0.3464459776878357, 0.34551236033439636, 0.3446402847766876, 0.33952078223228455, 0.339581698179245, 0.3400632441043854, 0.33996129035949707, 0.338981568813324, 0.3325347900390625, 0.33775994181632996, 0.3322175145149231, 0.3309590518474579, 0.33027297258377075, 0.3283692002296448, 0.32683706283569336, 0.326984703540802, 0.32594621181488037, 0.32538968324661255, 0.32920631766319275, 0.3240503668785095, 0.3232268989086151, 0.32425960898399353, 0.3233393430709839, 0.3218890428543091, 0.3201207220554352, 0.3207988739013672, 0.32243260741233826, 0.32108914852142334, 0.31952351331710815, 0.32347890734672546, 0.32580041885375977, 0.3182635009288788, 0.31800222396850586, 0.31826403737068176, 0.3206658959388733, 0.31825748085975647, 0.3223670721054077], "val_accuracy": [0.5429999828338623, 0.6639999747276306, 0.6883333325386047, 0.7133333086967468, 0.7429999709129333, 0.7599999904632568, 0.7706666588783264, 0.7866666913032532, 0.7956666946411133, 0.8019999861717224, 0.8153333067893982, 0.8100000023841858, 0.8316666483879089, 0.8370000123977661, 0.8413333296775818, 0.8386666774749756, 0.8420000076293945, 0.846666693687439, 0.847000002861023, 0.8550000190734863, 0.8536666631698608, 0.8489999771118164, 0.8566666841506958, 0.8603333234786987, 0.8629999756813049, 0.8616666793823242, 0.8569999933242798, 0.8646666407585144, 0.8650000095367432, 0.8669999837875366, 0.8679999709129333, 0.8713333606719971, 0.8706666827201843, 0.8666666746139526, 0.8700000047683716, 0.871999979019165, 0.875333309173584, 0.8700000047683716, 0.8709999918937683, 0.8786666393280029, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.878333330154419, 0.8806666731834412, 0.8786666393280029, 0.8776666522026062, 0.8756666779518127, 0.8816666603088379, 0.8773333430290222, 0.8786666393280029, 0.8836666941642761, 0.8796666860580444, 0.8820000290870667, 0.8833333253860474, 0.8813333511352539, 0.8846666812896729, 0.8833333253860474, 0.8820000290870667, 0.8843333125114441, 0.8863333463668823, 0.8840000033378601, 0.8826666474342346, 0.8870000243186951, 0.8870000243186951, 0.8866666555404663, 0.8880000114440918, 0.8859999775886536, 0.887666642665863, 0.8866666555404663, 0.8880000114440918, 0.8916666507720947, 0.8889999985694885, 0.8899999856948853, 0.890333354473114, 0.8893333077430725, 0.887333333492279]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 9], [0, 1, 0, 2], [39, 96], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 0], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [68], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [6, 3, 8, 6, 8, 1, 4, 2, 6, 2, 8, 3, 2, 5, 5, 3, 3, 0, 1, 7, 3, 3, 1, 2, 7], [0, 0, 0, 3, 4, 0, 1, 1, 2, 0, 6, 2, 1, 2, 5, 1, 7, 1, 2, 7], [16, 99, 96, 99, 61, 0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 5, 2, 2, 11, 7, 4, 2, 2, 1, 1, 1, 45, 25, 20, 5], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(sigma, tf.math.add(grad, tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(alpha, alpha), beta))), tf.math.square(tf.math.square(tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.add(grad, beta), tf.math.multiply(tf.math.multiply(alpha, tf.math.subtract(tf.math.add(beta, grad), alpha)), grad))), tf.math.add(alpha, beta)))))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 1, 1, 6], [0, 1, 0, 2, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [2, 2, 3, 0, 3, 5, 0], [0, 2, 0, 3, 4], [24, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 2, 4, 0, 4, 8, 8], [2, 0, 0, 3, 0, 0, 3, 3, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 2, 12, 7, 5, 2, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), sigma)", "other_info": {"loss": [10431628312576.0, 13406.2919921875, 292519.84375, 1472744.125, 1163763.25, 761847.0], "accuracy": [0.09206181764602661, 0.09906221181154251, 0.1006472036242485, 0.09615638852119446, 0.09800554811954498, 0.10196803510189056], "val_loss": [538.0095825195312, 72340.1796875, 896775.25, 1877636.75, 389513.03125, 1367590.25], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [9, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 8, 0, 3, 3], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 3, 3, 1, 2, 0], [84, 99, 96, 99, 61, 14]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 6, 4, 2, 1, 2, 1, 1, 0, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 1, 1, 4, 1, 4, 2, 8], [0, 1, 0, 3, 0, 4, 3, 1, 3, 4, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 1, 0, 1, 1, 22, 11, 11, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(alpha, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), alpha)), tf.math.add(tf.math.sqrt(sigma), grad)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}]