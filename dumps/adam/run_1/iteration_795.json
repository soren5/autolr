[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8511428833007812, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2248408794403076, 1.8758143186569214, 1.4065040349960327, 1.1047941446304321, 0.9540625214576721, 0.8503373265266418, 0.7839127779006958, 0.7315965294837952, 0.6983505487442017, 0.6697620153427124, 0.6431378722190857, 0.6219435930252075, 0.5935130715370178, 0.5702996253967285, 0.5589290261268616, 0.5512501001358032, 0.5330387353897095, 0.5294364094734192, 0.5090301632881165, 0.5073925852775574, 0.4963247776031494, 0.4859357476234436, 0.4766435921192169, 0.46440696716308594, 0.4613516926765442, 0.45151180028915405, 0.4390058219432831, 0.43713563680648804, 0.4317062199115753, 0.4284912645816803, 0.41646403074264526, 0.41072580218315125, 0.40185365080833435, 0.39617353677749634, 0.38680118322372437, 0.3868071436882019, 0.3800950348377228, 0.3709656596183777, 0.36743053793907166, 0.3635469079017639, 0.35969746112823486, 0.35249972343444824, 0.35223817825317383, 0.34074559807777405, 0.3445073366165161, 0.33542224764823914, 0.32921886444091797, 0.3219752609729767, 0.32247114181518555, 0.3174957036972046, 0.30624592304229736, 0.3046744763851166, 0.3066861629486084, 0.30411940813064575, 0.2972649335861206, 0.29318317770957947, 0.2872912883758545, 0.28431934118270874, 0.27654996514320374, 0.2821692228317261, 0.27276742458343506, 0.27100351452827454, 0.2684361934661865, 0.2561432421207428, 0.2576918601989746, 0.2527843415737152, 0.24548222124576569, 0.24334989488124847, 0.23748354613780975, 0.2375287413597107, 0.24483609199523926, 0.23610910773277283, 0.23097921907901764, 0.2338366061449051, 0.22332800924777985, 0.22286957502365112, 0.22036795318126678, 0.2070346474647522, 0.21265389025211334, 0.21148337423801422, 0.20166590809822083], "accuracy": [0.26878878474235535, 0.4966318905353546, 0.5679566860198975, 0.6185444593429565, 0.6584334969520569, 0.6902654767036438, 0.7193237543106079, 0.733588695526123, 0.7493065595626831, 0.7515519857406616, 0.7614582180976868, 0.7746664881706238, 0.7885351777076721, 0.7930260300636292, 0.7998943328857422, 0.8018755912780762, 0.8070268034934998, 0.8072909712791443, 0.8208954930305481, 0.8169330358505249, 0.8236692547798157, 0.8305375576019287, 0.8294808864593506, 0.8358209133148193, 0.8379341959953308, 0.8416325449943542, 0.8396512866020203, 0.8428213000297546, 0.8495575189590454, 0.8507462739944458, 0.8521991968154907, 0.8574824929237366, 0.8595958352088928, 0.859199583530426, 0.8618412613868713, 0.8636903762817383, 0.8654074668884277, 0.8692378997802734, 0.8659358024597168, 0.8725399374961853, 0.8761062026023865, 0.8741249442100525, 0.8737286925315857, 0.8791441321372986, 0.8741249442100525, 0.8812574148178101, 0.8845595121383667, 0.8838990926742554, 0.889050304889679, 0.889578640460968, 0.8905032277107239, 0.8893144726753235, 0.8903711438179016, 0.8928807377815247, 0.8932769894599915, 0.8967111110687256, 0.8944657444953918, 0.9001452922821045, 0.901862382888794, 0.8985602855682373, 0.9022586345672607, 0.9034473896026611, 0.9014661312103271, 0.9046360850334167, 0.9088627696037292, 0.9084665179252625, 0.9084665179252625, 0.9115044474601746, 0.9134856462478638, 0.9140139818191528, 0.9141460657119751, 0.9122969508171082, 0.9157310724258423, 0.913617730140686, 0.9216747879981995, 0.9207502603530884, 0.9210143685340881, 0.9265618920326233, 0.9260335564613342, 0.9260335564613342, 0.9268260598182678], "val_loss": [2.0428130626678467, 1.5214483737945557, 1.0568909645080566, 0.850624680519104, 0.7568832039833069, 0.7046522498130798, 0.6615487337112427, 0.6156240105628967, 0.5900053977966309, 0.5669707655906677, 0.5525204539299011, 0.5292624831199646, 0.5122150778770447, 0.5013185739517212, 0.4956569969654083, 0.48144885897636414, 0.47558435797691345, 0.4611758887767792, 0.4615577757358551, 0.44222697615623474, 0.4392579197883606, 0.43835994601249695, 0.42593827843666077, 0.4219626486301422, 0.4212499260902405, 0.4089527726173401, 0.41059693694114685, 0.402192085981369, 0.3988267779350281, 0.39077261090278625, 0.39261889457702637, 0.39148062467575073, 0.384360134601593, 0.3778284788131714, 0.37681636214256287, 0.37278270721435547, 0.37663114070892334, 0.36798954010009766, 0.368342787027359, 0.36210963129997253, 0.35797110199928284, 0.3655681908130646, 0.3573969304561615, 0.3586525022983551, 0.3616648018360138, 0.3531438112258911, 0.3507024347782135, 0.34932276606559753, 0.3474390506744385, 0.34298139810562134, 0.3422430455684662, 0.34242716431617737, 0.3410913348197937, 0.34697240591049194, 0.3398157060146332, 0.33617788553237915, 0.34189364314079285, 0.3341681659221649, 0.338662326335907, 0.3373871147632599, 0.335188090801239, 0.3307031989097595, 0.33504804968833923, 0.3317413330078125, 0.33818718791007996, 0.33027157187461853, 0.32742732763290405, 0.33106139302253723, 0.3304798901081085, 0.3271394968032837, 0.32548052072525024, 0.3259720802307129, 0.32492414116859436, 0.3249046504497528, 0.3224511444568634, 0.3252413272857666, 0.32513827085494995, 0.3248979151248932, 0.32493212819099426, 0.3231574296951294, 0.326820969581604], "val_accuracy": [0.546999990940094, 0.6480000019073486, 0.6736666560173035, 0.7080000042915344, 0.7393333315849304, 0.7513333559036255, 0.7676666378974915, 0.7839999794960022, 0.7976666688919067, 0.7973333597183228, 0.7993333339691162, 0.8180000185966492, 0.8240000009536743, 0.8259999752044678, 0.8276666402816772, 0.8289999961853027, 0.8356666564941406, 0.840666651725769, 0.8403333425521851, 0.847000002861023, 0.8473333120346069, 0.8479999899864197, 0.8519999980926514, 0.8550000190734863, 0.8516666889190674, 0.8536666631698608, 0.8543333411216736, 0.8536666631698608, 0.8610000014305115, 0.8636666536331177, 0.8600000143051147, 0.859333336353302, 0.8613333106040955, 0.8656666874885559, 0.8659999966621399, 0.8663333058357239, 0.8659999966621399, 0.8690000176429749, 0.8656666874885559, 0.8690000176429749, 0.8703333139419556, 0.8706666827201843, 0.8713333606719971, 0.8736666440963745, 0.8643333315849304, 0.8730000257492065, 0.875, 0.8713333606719971, 0.8766666650772095, 0.8726666569709778, 0.8766666650772095, 0.875333309173584, 0.874666690826416, 0.878000020980835, 0.8773333430290222, 0.8773333430290222, 0.8730000257492065, 0.8803333044052124, 0.8759999871253967, 0.8790000081062317, 0.8776666522026062, 0.8820000290870667, 0.8769999742507935, 0.8796666860580444, 0.8793333172798157, 0.8826666474342346, 0.8833333253860474, 0.8816666603088379, 0.8806666731834412, 0.8823333382606506, 0.8836666941642761, 0.8823333382606506, 0.8823333382606506, 0.8820000290870667, 0.8849999904632568, 0.8856666684150696, 0.8853333592414856, 0.8843333125114441, 0.8846666812896729, 0.8830000162124634, 0.8849999904632568]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 1, 6, 3, 5], [0, 2, 3, 3, 5], [16, 95], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8], [0, 0, 1, 3, 0, 0, 3, 1, 2, 0], [16, 99, 16, 99, 67, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(grad, tf.math.square(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.math.subtract(sigma, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 2, 3, 0, 3, 5], [0, 2, 0, 3, 5], [16, 16], [0, 1], [5], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 2, 6, 8, 1, 2, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 57, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 11, 6, 5, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [26, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [6, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [30], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 2, 0, 1, 4, 2, 8, 7, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 8, 4, 4, 2, 2, 1, 1, 1, 22, 13, 9, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma)))), alpha), beta)", "other_info": {"loss": [2.3094122409820557, 2.306584358215332, 2.3025853633880615, 2.3025853633880615, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09879804402589798, 0.0936468094587326, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3087193965911865, 2.3025848865509033, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025848865509033], "val_accuracy": [0.08766666799783707, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [62, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 8, 2, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1, 0, 1, 0, 1], [2, 6, 0], [0, 1, 6], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 4, 6, 9, 6, 9, 0, 4, 7, 1, 8, 8, 2, 7, 8, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 1, 5, 2, 2, 1], [16, 99, 96, 99, 61, 1, 44, 7]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 6, 3, 3, 1, 39, 24, 15, 8], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.pow(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), sigma)), tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.sqrt(beta)), tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), alpha))), grad))), tf.math.add(tf.math.sqrt(beta), beta)), tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}]