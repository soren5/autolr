[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8671428561210632, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2245020866394043, 1.8733651638031006, 1.401687741279602, 1.0977399349212646, 0.9413362145423889, 0.8531835675239563, 0.7852619290351868, 0.7431439757347107, 0.7008600831031799, 0.6697850227355957, 0.6446971893310547, 0.6204274892807007, 0.6057752966880798, 0.5883318781852722, 0.5748783349990845, 0.5644394755363464, 0.5545700192451477, 0.5293057560920715, 0.5163893699645996, 0.5087717175483704, 0.4981391429901123, 0.49601078033447266, 0.48553186655044556, 0.47784391045570374, 0.465711385011673, 0.4620704650878906, 0.4424320459365845, 0.44019266963005066, 0.4346211850643158, 0.4322384297847748, 0.4153733551502228, 0.41058796644210815, 0.402711421251297, 0.3962436318397522, 0.3876902163028717, 0.38444483280181885, 0.38366925716400146, 0.3767309784889221, 0.373080849647522, 0.36502742767333984, 0.35990867018699646, 0.3611466586589813, 0.3479495048522949, 0.3420357406139374, 0.3391468822956085, 0.3367595076560974, 0.32184362411499023, 0.32610058784484863, 0.323279470205307, 0.31438493728637695, 0.32136279344558716, 0.3096333146095276, 0.30170106887817383, 0.3004758059978485, 0.28944799304008484, 0.29292038083076477, 0.28083786368370056, 0.2830454111099243, 0.2778726816177368, 0.2847800850868225, 0.2680564820766449, 0.2643163204193115, 0.2659863531589508, 0.25083255767822266, 0.2572539746761322, 0.2493494302034378, 0.2552976906299591, 0.24574953317642212, 0.2432001680135727, 0.24413196742534637, 0.23473180830478668, 0.22646281123161316, 0.22735810279846191, 0.2257080376148224, 0.22916923463344574, 0.21447306871414185, 0.2138843685388565, 0.215056911110878], "accuracy": [0.26878878474235535, 0.4858010709285736, 0.5647866725921631, 0.6160348653793335, 0.669792652130127, 0.6940959095954895, 0.7168141603469849, 0.7388719916343689, 0.7473253011703491, 0.7574957013130188, 0.765949010848999, 0.7799497842788696, 0.7819310426712036, 0.7823272943496704, 0.7960638999938965, 0.804649293422699, 0.8000264167785645, 0.8070268034934998, 0.8162726163864136, 0.819442629814148, 0.8183859586715698, 0.8247259259223938, 0.8286884427070618, 0.8294808864593506, 0.8342359066009521, 0.8350284099578857, 0.8424250483512878, 0.844010055065155, 0.8461233377456665, 0.8486329317092896, 0.8545766472816467, 0.8549728989601135, 0.854708731174469, 0.8580108284950256, 0.8590674996376038, 0.863558292388916, 0.8614450097084045, 0.8643507957458496, 0.870030403137207, 0.8664641380310059, 0.8726720213890076, 0.8716153502464294, 0.8770307898521423, 0.8771628737449646, 0.8795403242111206, 0.8786157965660095, 0.884691596031189, 0.8816536664962769, 0.884691596031189, 0.8864086866378784, 0.8897107243537903, 0.8902390599250793, 0.8924844861030579, 0.8882578015327454, 0.8947299122810364, 0.8932769894599915, 0.9035794734954834, 0.8976356983184814, 0.8988244533538818, 0.89552241563797, 0.9045040011405945, 0.9063531756401062, 0.9033153057098389, 0.9088627696037292, 0.906749427318573, 0.9097873568534851, 0.9076740145683289, 0.9115044474601746, 0.9083344340324402, 0.913617730140686, 0.913617730140686, 0.9169198274612427, 0.9161273241043091, 0.9162594079971313, 0.9177123308181763, 0.9224672913551331, 0.9220710396766663, 0.9245806336402893], "val_loss": [2.042393922805786, 1.524133324623108, 1.062182903289795, 0.859724223613739, 0.7680842280387878, 0.7110623121261597, 0.6678312420845032, 0.634986937046051, 0.6065750122070312, 0.5874756574630737, 0.5679028034210205, 0.5565857887268066, 0.545682430267334, 0.5264608860015869, 0.5179815292358398, 0.5103254914283752, 0.4999558627605438, 0.4898042678833008, 0.48464590311050415, 0.4751248359680176, 0.4781104028224945, 0.4736209809780121, 0.466468870639801, 0.45469263195991516, 0.4477790594100952, 0.4402220845222473, 0.44291913509368896, 0.43233776092529297, 0.4310346245765686, 0.4251028299331665, 0.42091673612594604, 0.42180418968200684, 0.417754590511322, 0.4128410220146179, 0.4084062874317169, 0.40649494528770447, 0.40283337235450745, 0.4021309018135071, 0.40184277296066284, 0.3931175470352173, 0.3942313492298126, 0.3924771249294281, 0.389706015586853, 0.3902190029621124, 0.3862152397632599, 0.38631632924079895, 0.37974244356155396, 0.3818732500076294, 0.37735363841056824, 0.37522178888320923, 0.3787001669406891, 0.37449169158935547, 0.3749089241027832, 0.37148433923721313, 0.3667881190776825, 0.3713510036468506, 0.3701231777667999, 0.36531922221183777, 0.36625024676322937, 0.3653622567653656, 0.3717215061187744, 0.36490583419799805, 0.35863858461380005, 0.3679359555244446, 0.3578623831272125, 0.3601718842983246, 0.36224475502967834, 0.3614158630371094, 0.3613565266132355, 0.3522629737854004, 0.3571121394634247, 0.3646974563598633, 0.3529324531555176, 0.36197590827941895, 0.35615652799606323, 0.3613424599170685, 0.35573697090148926, 0.35287588834762573], "val_accuracy": [0.5323333144187927, 0.6346666812896729, 0.6653333306312561, 0.7013333439826965, 0.7243333458900452, 0.7453333139419556, 0.7599999904632568, 0.7710000276565552, 0.7829999923706055, 0.7853333353996277, 0.7916666865348816, 0.7946666479110718, 0.7960000038146973, 0.8116666674613953, 0.815666675567627, 0.8149999976158142, 0.8213333487510681, 0.8266666531562805, 0.8276666402816772, 0.8273333311080933, 0.8270000219345093, 0.82833331823349, 0.8370000123977661, 0.8353333473205566, 0.8410000205039978, 0.8396666646003723, 0.8426666855812073, 0.8456666469573975, 0.8483333587646484, 0.8479999899864197, 0.8476666808128357, 0.8516666889190674, 0.8523333072662354, 0.8536666631698608, 0.8506666421890259, 0.8523333072662354, 0.8536666631698608, 0.8579999804496765, 0.8573333621025085, 0.859666645526886, 0.8610000014305115, 0.859666645526886, 0.859666645526886, 0.8613333106040955, 0.8640000224113464, 0.8600000143051147, 0.8646666407585144, 0.8613333106040955, 0.8646666407585144, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8659999966621399, 0.8676666617393494, 0.8679999709129333, 0.8673333525657654, 0.8676666617393494, 0.8683333396911621, 0.8693333268165588, 0.8690000176429749, 0.8690000176429749, 0.8709999918937683, 0.8706666827201843, 0.8706666827201843, 0.871999979019165, 0.8726666569709778, 0.8683333396911621, 0.8679999709129333, 0.8740000128746033, 0.8736666440963745, 0.875, 0.8676666617393494, 0.8776666522026062, 0.871999979019165, 0.8713333606719971, 0.8733333349227905, 0.875333309173584, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 3, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [6, 4, 3, 6, 8, 1, 4, 1, 4, 2, 8, 2, 1], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 0, 2], [57, 15, 96, 99, 61, 1, 16]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 8, 4, 4, 2, 2, 1, 1, 1, 25, 13, 12, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.add(tf.math.subtract(alpha, beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3, 6, 0], [2, 2, 0, 2, 1], [39, 39], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 0, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 2, 2, 0], [16, 99, 96, 99, 82, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 1, 2, 1, 1, 1, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303415536880493, 2.3025856018066406, 2.3025858402252197, 2.3025856018066406, 2.3025858402252197, 2.3025856018066406], "accuracy": [0.09351472556591034, 0.08915598690509796, 0.09655263274908066, 0.09391097724437714, 0.09866596013307571, 0.09549596905708313], "val_loss": [2.3025853633880615, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025848865509033, 2.3025851249694824], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 2, 3, 0, 3, 2, 9, 9], [0, 1, 0, 2], [39, 39, 57, 77], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 3, 7, 2, 6, 0, 9, 1, 1, 3, 8, 0], [0, 3, 3, 5, 2, 1, 0], [99, 27, 85], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 9, 3, 2, 8, 1, 4, 1, 4, 2, 8, 7], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 22, 99, 15, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 8, 3, 4, 10, 6, 4, 2, 19, 12, 7, 3, 21, 12, 9, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.math.subtract(grad, beta))), tf.math.multiply(tf.math.sqrt(alpha), tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.add(alpha, beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 5, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [6, 6, 3, 6, 8, 1, 6, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 60]], "fitness": -0.09314285963773727, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 1, 0, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), alpha)))), tf.math.sqrt(beta)), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.30959153175354, 2.30922794342041, 2.309394598007202, 2.310269594192505, 2.309908628463745, 2.3106725215911865], "accuracy": [0.08928807079792023, 0.09906221181154251, 0.09377889335155487, 0.09087307006120682, 0.09721305221319199, 0.09206181764602661], "val_loss": [2.3089191913604736, 2.3089191913604736, 2.3089191913604736, 2.3089191913604736, 2.3089191913604736, 2.3089191913604736], "val_accuracy": [0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179]}}]