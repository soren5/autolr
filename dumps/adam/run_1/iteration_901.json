[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8579999804496765, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222853422164917, 1.8633387088775635, 1.3838531970977783, 1.0941914319992065, 0.9357651472091675, 0.8347955346107483, 0.7663392424583435, 0.7217548489570618, 0.6868444681167603, 0.6561728119850159, 0.6316709518432617, 0.6094432473182678, 0.5947648286819458, 0.5695056915283203, 0.555199146270752, 0.546176016330719, 0.5306293964385986, 0.5169228911399841, 0.5039268732070923, 0.49978071451187134, 0.4852732717990875, 0.47930923104286194, 0.4658966362476349, 0.4589303433895111, 0.4496949017047882, 0.4440373182296753, 0.4363152086734772, 0.4252376854419708, 0.4271588623523712, 0.4152021110057831, 0.40933653712272644, 0.3949304521083832, 0.3954324722290039, 0.39079809188842773, 0.3820473551750183, 0.37906602025032043, 0.37064868211746216, 0.3671775758266449, 0.36231690645217896, 0.3517518937587738, 0.34692272543907166, 0.3449806272983551, 0.3397321403026581, 0.3373221158981323], "accuracy": [0.26984545588493347, 0.4934619069099426, 0.5728437304496765, 0.6173557043075562, 0.6729626059532166, 0.7055870890617371, 0.728701651096344, 0.7453441023826599, 0.7560427784919739, 0.7648923397064209, 0.7741381525993347, 0.7886672616004944, 0.7889314293861389, 0.7967243194580078, 0.8000264167785645, 0.8058380484580994, 0.8083476424217224, 0.8193105459213257, 0.8232730031013489, 0.8235371708869934, 0.8274996876716614, 0.8273676037788391, 0.8387266993522644, 0.8422929644584656, 0.8430854678153992, 0.8465195894241333, 0.8477083444595337, 0.8510104417800903, 0.8481045961380005, 0.8544445633888245, 0.8573504090309143, 0.8613129258155823, 0.8615770936012268, 0.8664641380310059, 0.8663320541381836, 0.8687095642089844, 0.8697662353515625, 0.873860776424408, 0.8726720213890076, 0.8786157965660095, 0.8749174475669861, 0.8770307898521423, 0.8795403242111206, 0.8808611631393433], "val_loss": [2.035557508468628, 1.498637080192566, 1.0254876613616943, 0.8253768086433411, 0.7368409037590027, 0.6801573038101196, 0.6375772953033447, 0.6015356183052063, 0.5768247246742249, 0.5590270161628723, 0.5390413403511047, 0.5243232250213623, 0.5087156295776367, 0.4956686496734619, 0.4847134053707123, 0.47922712564468384, 0.4692811667919159, 0.45964866876602173, 0.45287421345710754, 0.4473450183868408, 0.44180330634117126, 0.43430399894714355, 0.42727941274642944, 0.42360857129096985, 0.42308950424194336, 0.4133729636669159, 0.41096794605255127, 0.4063982367515564, 0.40570202469825745, 0.40021440386772156, 0.3946495056152344, 0.39145055413246155, 0.3965306282043457, 0.3853921592235565, 0.38492968678474426, 0.38341039419174194, 0.37477898597717285, 0.37937793135643005, 0.3721294701099396, 0.37253230810165405, 0.3653613328933716, 0.37239161133766174, 0.37205931544303894, 0.361073762178421], "val_accuracy": [0.5503333210945129, 0.6579999923706055, 0.6909999847412109, 0.70333331823349, 0.7329999804496765, 0.75, 0.7616666555404663, 0.7789999842643738, 0.7836666703224182, 0.7973333597183228, 0.8059999942779541, 0.812333345413208, 0.8166666626930237, 0.8246666789054871, 0.831333339214325, 0.82833331823349, 0.8363333344459534, 0.8423333168029785, 0.8433333039283752, 0.8423333168029785, 0.8433333039283752, 0.8473333120346069, 0.8506666421890259, 0.8523333072662354, 0.8476666808128357, 0.8539999723434448, 0.8560000061988831, 0.8539999723434448, 0.8500000238418579, 0.8586666584014893, 0.8569999933242798, 0.8600000143051147, 0.8600000143051147, 0.8646666407585144, 0.862666666507721, 0.8616666793823242, 0.8673333525657654, 0.8619999885559082, 0.8723333477973938, 0.8666666746139526, 0.8679999709129333, 0.8666666746139526, 0.8566666841506958, 0.8723333477973938]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 1, 3, 0, 1, 0, 0, 7, 3, 6, 6, 3, 8, 5, 9, 7, 6, 0, 6, 6, 9, 9], [0, 0, 2, 2, 1, 1, 0, 2, 0, 2, 2, 1], [9, 3, 46, 7, 34, 85, 24], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [35, 99, 42, 79, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 36, 24, 12, 7, 10, 6, 4, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.negative(tf.math.negative(tf.math.add(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.square(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, alpha)), tf.math.divide_no_nan(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), tf.math.divide_no_nan(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), grad))))), tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 9, 8, 1, 4, 2, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [70, 50, 96, 99, 20, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 1, 0, 1, 1, 2, 1, 1, 1, 14, 8, 6, 6], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 1, 1, 9], [0, 1, 0, 2, 0], [39, 39, 47, 12], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [5], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 8, 5, 8, 8, 4, 1, 4, 2, 8], [0, 0, 0, 3, 1, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 9, 5, 4, 10, 6, 4, 2, 2, 1, 1, 1, 8, 5, 3, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.subtract(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), grad), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.square(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.3031413555145264, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [61, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5, 5], [0, 2, 0, 3, 2], [23, 16], [0, 0], [0, 9], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 5, 8, 1, 4, 1, 8, 5, 3, 2, 1, 4, 5, 0, 8, 1, 1, 6, 1, 4, 0, 3, 4, 3, 8, 4, 3, 1, 1, 3, 5, 4, 8, 4, 4, 2, 7, 6, 2, 9, 2, 8, 3, 2, 8, 7, 6, 5, 0, 7], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 4, 2, 1, 0, 4, 3, 4, 0, 2, 7, 6, 0, 7, 3, 7, 0, 4, 4, 2, 6, 1, 2, 7, 1, 1, 4], [16, 40, 96, 99, 61, 1, 81, 78, 77, 62, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 12, 7, 5, 2, 2, 2, 0, 1, 88, 52, 36, 11], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.square(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.square(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(sigma)))), tf.math.square(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.subtract(tf.math.pow(sigma, alpha), tf.math.square(tf.math.negative(beta))), tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(tf.math.subtract(tf.math.pow(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(beta, alpha)), tf.math.pow(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.sqrt(tf.math.pow(sigma, grad))))), tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.math.subtract(grad, tf.math.multiply(tf.math.square(tf.math.pow(tf.math.sqrt(tf.math.pow(grad, tf.math.pow(tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad)))), tf.math.sqrt(tf.math.multiply(tf.math.add(grad, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(grad), alpha)))), beta)))), tf.math.negative(tf.math.add(grad, alpha))))))), alpha)))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}]