[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8717142939567566, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2243778705596924, 1.8705624341964722, 1.412825584411621, 1.1194615364074707, 0.9506986141204834, 0.8676772713661194, 0.7959240674972534, 0.7354508638381958, 0.703374981880188, 0.6672127842903137, 0.6536329984664917, 0.6295765042304993, 0.614234983921051, 0.6004630923271179, 0.5746386051177979, 0.5641289353370667, 0.5492287874221802, 0.5314121842384338, 0.5204542875289917, 0.5096049904823303, 0.5078065395355225, 0.495470255613327, 0.4827759563922882, 0.47769078612327576, 0.45509612560272217, 0.4548228085041046, 0.45171239972114563, 0.4444262981414795, 0.43632960319519043, 0.4267517030239105, 0.415228933095932, 0.41448238492012024, 0.4031580090522766, 0.3946250379085541, 0.3932632803916931, 0.3846578598022461, 0.37496012449264526, 0.3741897642612457, 0.3795231580734253, 0.3616482615470886, 0.3622957766056061, 0.35397860407829285, 0.3462710678577423, 0.34371471405029297, 0.338881254196167, 0.33199581503868103, 0.33921533823013306, 0.3304119408130646, 0.32229557633399963, 0.3203873634338379, 0.3115571439266205, 0.3112249970436096, 0.310978502035141, 0.30635032057762146, 0.29939550161361694, 0.2840518057346344, 0.28347381949424744, 0.27659136056900024, 0.27840134501457214, 0.27243974804878235, 0.2678332030773163, 0.2692973017692566, 0.26525312662124634, 0.2580486238002777, 0.2547362446784973, 0.25643372535705566, 0.248887836933136, 0.2496742606163025, 0.24431563913822174, 0.231519415974617, 0.23843713104724884, 0.22776034474372864, 0.22823941707611084, 0.22074079513549805, 0.22071675956249237], "accuracy": [0.27301543951034546, 0.48144233226776123, 0.553031325340271, 0.6107515692710876, 0.6576409935951233, 0.6852463483810425, 0.7112666964530945, 0.7316074371337891, 0.741909921169281, 0.7580240368843079, 0.7597411274909973, 0.7725531458854675, 0.7754589915275574, 0.7821952104568481, 0.7938185334205627, 0.7977809906005859, 0.7991018295288086, 0.8043851256370544, 0.8148196935653687, 0.817461371421814, 0.813498854637146, 0.8220842480659485, 0.8272355198860168, 0.8309338092803955, 0.8374059200286865, 0.8389908671379089, 0.835160493850708, 0.8421608805656433, 0.8418967127799988, 0.8454629778862, 0.8499537706375122, 0.8540483713150024, 0.8601241707801819, 0.8585391640663147, 0.8570862412452698, 0.8609166741371155, 0.8660678863525391, 0.8656716346740723, 0.8671245574951172, 0.8693699836730957, 0.8659358024597168, 0.8720116019248962, 0.8742570281028748, 0.8749174475669861, 0.8798044919967651, 0.8803328275680542, 0.8780874609947205, 0.8811253309249878, 0.8816536664962769, 0.8850878477096558, 0.8914278149604797, 0.887597382068634, 0.8862766027450562, 0.887201189994812, 0.889578640460968, 0.8981640338897705, 0.8977677822113037, 0.9010698795318604, 0.8963148593902588, 0.8996169567108154, 0.9039757251739502, 0.9019944667816162, 0.9031832218170166, 0.9019944667816162, 0.9075419306755066, 0.9074098467826843, 0.9100515246391296, 0.9089948534965515, 0.9113723635673523, 0.9163914918899536, 0.9158631563186646, 0.9145423173904419, 0.9153348207473755, 0.9177123308181763, 0.9206181764602661], "val_loss": [2.038179636001587, 1.5167503356933594, 1.052154302597046, 0.8417453765869141, 0.7503772974014282, 0.6876944899559021, 0.6447457671165466, 0.602135419845581, 0.5776658654212952, 0.5522526502609253, 0.5377697944641113, 0.5210884809494019, 0.5046404004096985, 0.49836984276771545, 0.4834029972553253, 0.47359490394592285, 0.46205592155456543, 0.4535282254219055, 0.44570720195770264, 0.4392622113227844, 0.44504404067993164, 0.42723003029823303, 0.42266732454299927, 0.41624715924263, 0.4078636169433594, 0.4049641191959381, 0.40586715936660767, 0.39500606060028076, 0.39703524112701416, 0.3935244679450989, 0.38899412751197815, 0.38303080201148987, 0.37964579463005066, 0.3770979940891266, 0.3713904917240143, 0.36889615654945374, 0.3678942024707794, 0.3653157651424408, 0.3622256815433502, 0.36053434014320374, 0.35864266753196716, 0.35636770725250244, 0.3572433292865753, 0.3536246418952942, 0.3527851998806, 0.35082876682281494, 0.35055655241012573, 0.35695719718933105, 0.34465575218200684, 0.34636589884757996, 0.3448038697242737, 0.3400150537490845, 0.3441217541694641, 0.34340915083885193, 0.3386017084121704, 0.33688730001449585, 0.33268600702285767, 0.3383023738861084, 0.3408143222332001, 0.3323453664779663, 0.33278322219848633, 0.32943376898765564, 0.33516842126846313, 0.33431464433670044, 0.32707080245018005, 0.3305526077747345, 0.3307698667049408, 0.3263370394706726, 0.3312758505344391, 0.329038143157959, 0.32704827189445496, 0.3287768065929413, 0.33370980620384216, 0.32264864444732666, 0.32897746562957764], "val_accuracy": [0.5306666493415833, 0.6576666831970215, 0.6779999732971191, 0.7086666822433472, 0.7336666584014893, 0.7540000081062317, 0.7586666941642761, 0.7799999713897705, 0.7866666913032532, 0.7973333597183228, 0.8003333210945129, 0.8133333325386047, 0.8246666789054871, 0.8146666884422302, 0.8286666870117188, 0.8289999961853027, 0.8370000123977661, 0.8399999737739563, 0.8423333168029785, 0.8426666855812073, 0.8389999866485596, 0.8479999899864197, 0.8536666631698608, 0.8556666374206543, 0.8579999804496765, 0.8566666841506958, 0.8523333072662354, 0.8633333444595337, 0.859333336353302, 0.8586666584014893, 0.862666666507721, 0.8636666536331177, 0.8659999966621399, 0.8669999837875366, 0.8683333396911621, 0.8700000047683716, 0.8686666488647461, 0.8690000176429749, 0.8736666440963745, 0.8726666569709778, 0.8733333349227905, 0.8766666650772095, 0.8736666440963745, 0.8756666779518127, 0.8776666522026062, 0.8790000081062317, 0.871666669845581, 0.8700000047683716, 0.8793333172798157, 0.878333330154419, 0.8820000290870667, 0.8816666603088379, 0.8776666522026062, 0.8763333559036255, 0.8776666522026062, 0.8823333382606506, 0.8823333382606506, 0.8816666603088379, 0.8803333044052124, 0.8826666474342346, 0.8836666941642761, 0.8849999904632568, 0.8826666474342346, 0.8836666941642761, 0.887666642665863, 0.8843333125114441, 0.8849999904632568, 0.8843333125114441, 0.8853333592414856, 0.8896666765213013, 0.8889999985694885, 0.8843333125114441, 0.8870000243186951, 0.8849999904632568, 0.8893333077430725]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 1, 3, 1, 3, 8], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [84], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 2, 8, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 1], [74, 99, 96, 99, 61, 58]], "fitness": -0.15714286267757416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 2, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), grad)", "other_info": {"loss": [1.1807299656684646e+21, 1.3831450953455617e+21, 1.3611012418069783e+21, 1.3553543672074768e+21, 1.364176637402519e+21, 1.3651219711118017e+21], "accuracy": [0.10857218503952026, 0.10791176557540894, 0.11438383162021637, 0.10738343745470047, 0.10460969805717468, 0.11240258812904358], "val_loss": [6.835856248398718e+20, 6.835856248398718e+20, 6.835856248398718e+20, 6.835856248398718e+20, 6.835856248398718e+20, 6.835856248398718e+20], "val_accuracy": [0.15666666626930237, 0.15666666626930237, 0.15666666626930237, 0.15666666626930237, 0.15666666626930237, 0.15666666626930237]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 4, 8, 1, 4, 1, 4, 9, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 99, 97, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 18, 10, 8, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, grad))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), sigma), alpha), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 6, 0, 3, 5], [0, 2, 0, 3], [1, 16], [1, 1], [5], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 3], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 49, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 1, 0, 1, 1, 16, 8, 8, 5], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, alpha)))", "other_info": {"loss": [2.3962275981903076, 2.6959168910980225, 2.977097988128662, 3.2385053634643555, 3.4428458213806152, 3.6239356994628906], "accuracy": [0.09998679161071777, 0.1022322028875351, 0.10408136248588562, 0.10328886657953262, 0.09932637959718704, 0.10210011899471283], "val_loss": [2.4272351264953613, 2.5799968242645264, 2.7240498065948486, 2.8571829795837402, 2.9803457260131836, 3.094754457473755], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 7, 5], [0, 1, 0, 2, 0, 1], [39, 39, 86], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 58], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 6, 4, 3, 4, 0, 8, 9], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 3, 10, 6, 4, 2, 1, 0, 1, 1, 20, 12, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.multiply(tf.math.pow(tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma))), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]