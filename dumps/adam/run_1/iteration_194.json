[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.850857138633728, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2257349491119385, 1.8653701543807983, 1.4030849933624268, 1.0918866395950317, 0.9410400390625, 0.8375077247619629, 0.7769901752471924, 0.7298300862312317, 0.6918216347694397, 0.6702088117599487, 0.6357806324958801, 0.6259041428565979, 0.6001371145248413, 0.5782345533370972, 0.5640110969543457, 0.5427951216697693, 0.5415363907814026, 0.5311798453330994, 0.5146342515945435, 0.49591177701950073, 0.4835895895957947, 0.4750014543533325, 0.47318658232688904, 0.4593827724456787, 0.45378145575523376, 0.44498002529144287, 0.4343527853488922, 0.4343661367893219, 0.42797964811325073, 0.41443154215812683, 0.41302767395973206, 0.4087935984134674, 0.3988337814807892, 0.3851979374885559, 0.3837166726589203, 0.3839273750782013, 0.37543243169784546, 0.3643985986709595, 0.3639657497406006, 0.35670697689056396, 0.3538680076599121, 0.33922332525253296, 0.3420512080192566, 0.33630943298339844, 0.3362607955932617, 0.32638680934906006, 0.320485919713974, 0.31398388743400574, 0.31131505966186523, 0.306577205657959, 0.31809186935424805, 0.3098140358924866, 0.2983373999595642, 0.2935872972011566, 0.29519927501678467, 0.2845737934112549, 0.2853540778160095, 0.2730855345726013, 0.2779812812805176, 0.27453744411468506, 0.2617148756980896, 0.26520106196403503, 0.2599940001964569, 0.25645777583122253, 0.2536582350730896, 0.24849465489387512], "accuracy": [0.2583542466163635, 0.5031039714813232, 0.5663716793060303, 0.6221106648445129, 0.667811393737793, 0.7029454708099365, 0.7253995537757874, 0.7378153204917908, 0.7485140562057495, 0.759080708026886, 0.7707040309906006, 0.7774402499198914, 0.7807422876358032, 0.7935543656349182, 0.7932901978492737, 0.8012151718139648, 0.8053097128868103, 0.8105930685997009, 0.8107251524925232, 0.8198388814926147, 0.8260467648506165, 0.8259146809577942, 0.8310658931732178, 0.8322546482086182, 0.8370096683502197, 0.8399154543876648, 0.8457271456718445, 0.8453308939933777, 0.8479725122451782, 0.8507462739944458, 0.8536521196365356, 0.8508783578872681, 0.8577466607093811, 0.8651432991027832, 0.8614450097084045, 0.8625016212463379, 0.8667283058166504, 0.8705587387084961, 0.8677849769592285, 0.8706908226013184, 0.8716153502464294, 0.8767666220664978, 0.8778232932090759, 0.8780874609947205, 0.882710337638855, 0.8853520154953003, 0.8865407705307007, 0.8901069760322571, 0.8854840993881226, 0.8922203183174133, 0.8812574148178101, 0.8860124349594116, 0.894069492816925, 0.8952582478523254, 0.8956544995307922, 0.8986923694610596, 0.894069492816925, 0.9009377956390381, 0.8973715305328369, 0.9029190540313721, 0.9070135951042175, 0.9026548862457275, 0.9066173434257507, 0.9056927561759949, 0.9093911051750183, 0.9137498140335083], "val_loss": [2.042018175125122, 1.5209120512008667, 1.0523115396499634, 0.8450811505317688, 0.7578367590904236, 0.7030708193778992, 0.6702864766120911, 0.6281071901321411, 0.6047518849372864, 0.5834345817565918, 0.5653557777404785, 0.5458849668502808, 0.5350763201713562, 0.5174823999404907, 0.5066089034080505, 0.49849697947502136, 0.48951542377471924, 0.47763827443122864, 0.47552430629730225, 0.46243351697921753, 0.45917513966560364, 0.4518733024597168, 0.4465258717536926, 0.44184166193008423, 0.43706727027893066, 0.43108317255973816, 0.42305970191955566, 0.4221823215484619, 0.42205488681793213, 0.4203788638114929, 0.409586638212204, 0.4060589075088501, 0.402133584022522, 0.40313297510147095, 0.3947325348854065, 0.39201265573501587, 0.3913497030735016, 0.39060959219932556, 0.3853878676891327, 0.3850404918193817, 0.3836415112018585, 0.3829003870487213, 0.3787538707256317, 0.3765147030353546, 0.3752027451992035, 0.37403643131256104, 0.3669948875904083, 0.37486279010772705, 0.3711036741733551, 0.36991405487060547, 0.3666157126426697, 0.3663887083530426, 0.3679856061935425, 0.3619174063205719, 0.35795390605926514, 0.36034175753593445, 0.36193615198135376, 0.3611671030521393, 0.3578414022922516, 0.3619963824748993, 0.3560025691986084, 0.3491237461566925, 0.35319238901138306, 0.35530582070350647, 0.3532428741455078, 0.3490487039089203], "val_accuracy": [0.5423333048820496, 0.6539999842643738, 0.6756666898727417, 0.7023333311080933, 0.7260000109672546, 0.7440000176429749, 0.7483333349227905, 0.7676666378974915, 0.7706666588783264, 0.7793333530426025, 0.7873333096504211, 0.7953333258628845, 0.7990000247955322, 0.8076666593551636, 0.812666654586792, 0.8149999976158142, 0.8270000219345093, 0.8253333568572998, 0.8286666870117188, 0.8326666951179504, 0.8360000252723694, 0.8349999785423279, 0.8410000205039978, 0.8393333554267883, 0.8410000205039978, 0.8456666469573975, 0.8456666469573975, 0.8446666598320007, 0.8476666808128357, 0.8479999899864197, 0.8543333411216736, 0.8506666421890259, 0.8539999723434448, 0.8550000190734863, 0.8573333621025085, 0.8569999933242798, 0.859000027179718, 0.859333336353302, 0.8663333058357239, 0.862666666507721, 0.8640000224113464, 0.8619999885559082, 0.8646666407585144, 0.8676666617393494, 0.8673333525657654, 0.8650000095367432, 0.8713333606719971, 0.8676666617393494, 0.8693333268165588, 0.8696666955947876, 0.8730000257492065, 0.871666669845581, 0.8730000257492065, 0.8763333559036255, 0.8763333559036255, 0.8759999871253967, 0.8769999742507935, 0.874666690826416, 0.8776666522026062, 0.8706666827201843, 0.8799999952316284, 0.8759999871253967, 0.8776666522026062, 0.8766666650772095, 0.8799999952316284, 0.8759999871253967]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 3, 0, 3, 5, 8], [0, 1, 0, 2], [39, 19], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 0, 2, 2, 1, 4, 7, 9, 7, 4, 4, 0, 5, 3, 6, 6], [3, 2, 0, 3, 4, 4, 1, 1, 3, 4, 4, 4, 1], [16, 16], [0, 1], [0], [0], [67], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [6, 3, 3, 8, 8, 1, 4, 1, 4, 2, 8, 7, 2, 2, 3, 7, 7, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2, 5, 7, 4], [16, 99, 96, 99, 61, 1, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 7, 4, 2, 31, 18, 13, 2, 2, 1, 1, 1, 32, 18, 14, 7], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(alpha), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.subtract(tf.math.pow(tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(grad, tf.math.pow(alpha, tf.math.negative(tf.math.square(tf.math.multiply(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, grad), grad), grad))))), grad)), alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)))), tf.math.sqrt(tf.math.add(alpha, beta))), tf.math.add(tf.math.add(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(grad, grad)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 6], [0, 2, 0, 2], [39, 87], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 3, 5, 5, 0], [0, 2, 0, 3], [16, 16], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 8, 7, 1, 3, 0], [0, 6, 4, 0, 5], [99, 65], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8, 6, 7, 5, 4, 9, 2, 7, 5, 8, 9, 8, 4, 9], [0, 1, 0, 3, 0, 0, 3, 1, 2, 3, 1, 3, 3], [16, 99, 96, 56, 61, 1, 74]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.divide_no_nan(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.subtract(tf.math.multiply(grad, grad), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(alpha, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.divide_no_nan(sigma, alpha)))), beta)), tf.math.add(sigma, tf.math.square(alpha))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.square(sigma), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.pow(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 12, 7, 5, 2, 38, 25, 13, 7], "tree_depth": 24}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 3, 0, 3, 3], [0, 2, 0, 3], [10, 16], [0, 1], [0], [3], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 1, 1, 0, 1, 2, 1, 1, 0, 21, 11, 10, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.negative(tf.math.multiply(grad, grad))))), lambda shape,  alpha, beta, grad: tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 2, 3, 0, 3, 0, 2, 9], [0, 2, 1, 3], [16, 65], [1, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9, 9, 7, 1, 6, 1, 2, 3, 1, 7, 7, 2, 8, 2, 4, 4, 7, 7, 7, 1, 4, 0, 6, 2, 0, 5, 7, 9, 1, 8, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 1, 7, 4, 1, 0, 6, 1, 7, 6, 3, 3, 4, 0, 2, 7, 1, 6, 4, 6], [16, 99, 96, 99, 61, 1, 70, 85, 79, 15, 99]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 8, 4, 2, 1, 0, 1, 0, 71, 42, 29, 11], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(alpha, tf.math.negative(tf.math.add(grad, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.sqrt(sigma), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.multiply(alpha, beta), tf.math.subtract(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.pow(alpha, tf.math.pow(grad, grad)), alpha)), tf.math.add(tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.pow(grad, sigma), tf.math.negative(tf.math.divide_no_nan(sigma, tf.math.add(tf.math.negative(grad), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), beta))))), grad), alpha), tf.math.subtract(tf.math.sqrt(grad), grad)), tf.math.negative(grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]