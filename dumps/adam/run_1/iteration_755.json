[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5, 8, 4, 2, 8], [0, 2, 1, 3, 1, 5, 2], [16, 16], [0, 1], [0], [0], [99], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 6, 1, 4, 1, 4, 2, 8], [1, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.871999979019165, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(beta), tf.math.sqrt(alpha))), tf.math.pow(grad, tf.math.add(tf.math.sqrt(alpha), grad))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.100952386856079, 1.2002826929092407, 0.8176730275154114, 0.6936516165733337, 0.6088148355484009, 0.5551373958587646, 0.5213660001754761, 0.5024309158325195, 0.47486910223960876, 0.4580113887786865, 0.44408899545669556, 0.4183637499809265, 0.39164209365844727, 0.3865562975406647, 0.3827725350856781, 0.3695644736289978, 0.3578457832336426, 0.3515976369380951, 0.3395279347896576, 0.33049479126930237, 0.3227430284023285, 0.31611430644989014, 0.30460914969444275, 0.2872048318386078, 0.29588693380355835, 0.28783828020095825, 0.2788165211677551, 0.2716149687767029, 0.2687785029411316, 0.24848777055740356, 0.24594824016094208, 0.24016381800174713, 0.2339559942483902, 0.23225517570972443, 0.237391397356987, 0.21713046729564667, 0.2127743363380432, 0.22012875974178314], "accuracy": [0.30022454261779785, 0.5872408151626587, 0.6881521344184875, 0.735569953918457, 0.7638356685638428, 0.780610203742981, 0.7997622489929199, 0.8100647330284119, 0.8211596608161926, 0.8276317715644836, 0.834632158279419, 0.8444063067436218, 0.8544445633888245, 0.8558974862098694, 0.8603883385658264, 0.8634262084960938, 0.8684453964233398, 0.8685774803161621, 0.8735966086387634, 0.8779553771018982, 0.878351628780365, 0.876370370388031, 0.8838990926742554, 0.8918240666389465, 0.8883898854255676, 0.8882578015327454, 0.8920882344245911, 0.8975036144256592, 0.8973715305328369, 0.9054285883903503, 0.902390718460083, 0.909259021282196, 0.9109761118888855, 0.9111081957817078, 0.9075419306755066, 0.9167877435684204, 0.9181085824966431, 0.9149385690689087], "val_loss": [1.1096502542495728, 0.774746835231781, 0.6811647415161133, 0.6056462526321411, 0.5635250806808472, 0.5354907512664795, 0.5080780982971191, 0.4979742169380188, 0.46550244092941284, 0.46289029717445374, 0.45392924547195435, 0.4324391186237335, 0.4205535352230072, 0.4159925878047943, 0.40821903944015503, 0.40530553460121155, 0.39514264464378357, 0.39039063453674316, 0.3907138705253601, 0.38921040296554565, 0.38903164863586426, 0.38454654812812805, 0.38170093297958374, 0.3842397928237915, 0.37530970573425293, 0.38983309268951416, 0.3739680051803589, 0.3692241311073303, 0.36250123381614685, 0.3745078444480896, 0.3669705390930176, 0.3661624491214752, 0.36990466713905334, 0.3688015937805176, 0.37324705719947815, 0.3708904981613159, 0.38750866055488586, 0.3759786784648895], "val_accuracy": [0.6343333125114441, 0.6996666789054871, 0.7433333396911621, 0.7643333077430725, 0.7753333449363708, 0.7886666655540466, 0.7960000038146973, 0.8063333630561829, 0.8259999752044678, 0.8306666612625122, 0.8349999785423279, 0.8420000076293945, 0.8510000109672546, 0.8556666374206543, 0.8539999723434448, 0.8583333492279053, 0.862666666507721, 0.8610000014305115, 0.8603333234786987, 0.8629999756813049, 0.8619999885559082, 0.8640000224113464, 0.8683333396911621, 0.8669999837875366, 0.8703333139419556, 0.8663333058357239, 0.8700000047683716, 0.8730000257492065, 0.8740000128746033, 0.8736666440963745, 0.8763333559036255, 0.8776666522026062, 0.878000020980835, 0.8773333430290222, 0.8763333559036255, 0.8743333220481873, 0.871666669845581, 0.875]}, "mapping_values": [1, 9, 5, 4, 2, 17, 10, 7, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 15}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8677142858505249, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2216978073120117, 1.8643321990966797, 1.3859057426452637, 1.105176329612732, 0.9330797791481018, 0.8556320071220398, 0.7803040146827698, 0.7386340498924255, 0.6928530335426331, 0.66541987657547, 0.6447661519050598, 0.6057994365692139, 0.5936105251312256, 0.5716598629951477, 0.5623143911361694, 0.5519416928291321, 0.5362180471420288, 0.5185234546661377, 0.5097710490226746, 0.49470254778862, 0.49209707975387573, 0.4734613597393036, 0.47162267565727234, 0.4692646861076355, 0.45160338282585144, 0.4539967179298401, 0.43926623463630676, 0.4377172589302063, 0.4214979112148285, 0.4165654480457306, 0.41050246357917786, 0.4052352011203766, 0.39165425300598145, 0.39089444279670715, 0.389325350522995, 0.3815862834453583, 0.3764733672142029, 0.3709293305873871, 0.36028289794921875, 0.35928747057914734, 0.35226649045944214, 0.3414832651615143, 0.342166930437088, 0.33265042304992676, 0.3290764093399048, 0.32713583111763, 0.32603850960731506, 0.3201797902584076, 0.3109881281852722, 0.31144726276397705, 0.30659905076026917, 0.3001292943954468, 0.29451724886894226, 0.2905907928943634, 0.29552873969078064, 0.283903568983078, 0.28645533323287964, 0.28108319640159607, 0.27957311272621155, 0.2704352140426636, 0.270892471075058, 0.257924348115921], "accuracy": [0.2759212851524353, 0.48685774207115173, 0.5672962665557861, 0.6148461103439331, 0.6719059348106384, 0.6931713223457336, 0.7199841737747192, 0.7341170310974121, 0.7436270117759705, 0.7584202885627747, 0.7671377658843994, 0.7815347909927368, 0.7816668748855591, 0.7910447716712952, 0.7964601516723633, 0.8004226684570312, 0.8086118102073669, 0.8141592741012573, 0.8181217908859253, 0.8226125836372375, 0.824329674243927, 0.8342359066009521, 0.8314621448516846, 0.8318583965301514, 0.8486329317092896, 0.8413683772087097, 0.8432175517082214, 0.8457271456718445, 0.850350022315979, 0.8535200357437134, 0.8590674996376038, 0.8574824929237366, 0.8614450097084045, 0.8676528930664062, 0.8632941246032715, 0.868049144744873, 0.8644828796386719, 0.8701624870300293, 0.8712190985679626, 0.8705587387084961, 0.874389111995697, 0.8776912093162537, 0.8803328275680542, 0.8825782537460327, 0.8840311765670776, 0.8837670087814331, 0.8858803510665894, 0.887597382068634, 0.8922203183174133, 0.8923524022102356, 0.8906353116035461, 0.8963148593902588, 0.8972394466400146, 0.8968431949615479, 0.8945978283882141, 0.8993527889251709, 0.8985602855682373, 0.9012019634246826, 0.9002773761749268, 0.9052965044975281, 0.9039757251739502, 0.9095231890678406], "val_loss": [2.041245460510254, 1.5231881141662598, 1.065736174583435, 0.8610031008720398, 0.767315685749054, 0.7134988903999329, 0.6618503928184509, 0.6246729493141174, 0.5999942421913147, 0.5739471912384033, 0.5559086799621582, 0.5393391251564026, 0.5205866098403931, 0.5083165168762207, 0.5019306540489197, 0.490130215883255, 0.47759589552879333, 0.46821892261505127, 0.4634450674057007, 0.4572913944721222, 0.4456426203250885, 0.4380706250667572, 0.4374026954174042, 0.4266485869884491, 0.42475375533103943, 0.4152945876121521, 0.4158255159854889, 0.41067641973495483, 0.4101269245147705, 0.40094417333602905, 0.39588847756385803, 0.39021939039230347, 0.3921055495738983, 0.3836974799633026, 0.38655945658683777, 0.38078629970550537, 0.3777221739292145, 0.3753693699836731, 0.37428542971611023, 0.3702947497367859, 0.36860689520835876, 0.36600902676582336, 0.36363911628723145, 0.36178046464920044, 0.3581726551055908, 0.3591114580631256, 0.35823947191238403, 0.3570747375488281, 0.3549755811691284, 0.3510749638080597, 0.35322803258895874, 0.35082975029945374, 0.35006681084632874, 0.3475171625614166, 0.35200440883636475, 0.3506374657154083, 0.34484952688217163, 0.3395260274410248, 0.34119904041290283, 0.34287670254707336, 0.3429171144962311, 0.3407961130142212], "val_accuracy": [0.5376666784286499, 0.6383333206176758, 0.6679999828338623, 0.6893333196640015, 0.7136666774749756, 0.734000027179718, 0.7486666440963745, 0.7649999856948853, 0.7663333415985107, 0.778333306312561, 0.7946666479110718, 0.7953333258628845, 0.8066666722297668, 0.8113333582878113, 0.8173333406448364, 0.8223333358764648, 0.8266666531562805, 0.824999988079071, 0.8309999704360962, 0.8330000042915344, 0.8429999947547913, 0.840666651725769, 0.8420000076293945, 0.8456666469573975, 0.8473333120346069, 0.8519999980926514, 0.8503333330154419, 0.8500000238418579, 0.8510000109672546, 0.8560000061988831, 0.8536666631698608, 0.8583333492279053, 0.8573333621025085, 0.8633333444595337, 0.8569999933242798, 0.8610000014305115, 0.8629999756813049, 0.8650000095367432, 0.8650000095367432, 0.8650000095367432, 0.8693333268165588, 0.8666666746139526, 0.8703333139419556, 0.8696666955947876, 0.8723333477973938, 0.8700000047683716, 0.8693333268165588, 0.8709999918937683, 0.874666690826416, 0.8706666827201843, 0.8723333477973938, 0.8776666522026062, 0.8756666779518127, 0.8763333559036255, 0.8733333349227905, 0.875, 0.8806666731834412, 0.8806666731834412, 0.8793333172798157, 0.8793333172798157, 0.8756666779518127, 0.878000020980835]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 1, 2, 3, 5], [0, 2, 0, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 0, 0], [16, 39, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09496764093637466, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 3, 4, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [5, 8, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 3], [16, 99, 1, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 1, 12, 7, 5, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 9, 0, 8], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 3, 3, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [1], [3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 4, 1, 2, 1, 0, 1, 1, 1, 0, 1, 0, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}]