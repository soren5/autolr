[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8588571548461914, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2208828926086426, 1.8686379194259644, 1.39894437789917, 1.0996160507202148, 0.9327036738395691, 0.8340003490447998, 0.7665841579437256, 0.7262362837791443, 0.6826133131980896, 0.652191698551178, 0.6307660341262817, 0.6179684996604919, 0.5969783663749695, 0.5708906054496765, 0.5567924976348877, 0.5462595820426941, 0.5317275524139404, 0.5191076397895813, 0.5105446577072144, 0.49484705924987793, 0.48328396677970886, 0.4754571318626404, 0.4597371518611908, 0.45750173926353455, 0.4532068371772766, 0.44270119071006775, 0.4316839277744293, 0.4273286461830139, 0.42087867856025696, 0.41994425654411316, 0.41531500220298767, 0.4111044704914093, 0.4057004153728485, 0.39159026741981506, 0.38480687141418457, 0.3750368058681488, 0.3758421540260315, 0.377508282661438, 0.3664667308330536, 0.36324232816696167, 0.35520949959754944, 0.34899643063545227, 0.340528279542923, 0.34093159437179565, 0.3376186490058899, 0.3302195966243744, 0.3259861469268799, 0.3248031735420227, 0.30774036049842834, 0.30640363693237305, 0.31349977850914, 0.30407342314720154, 0.2989269196987152, 0.29614055156707764, 0.2917012870311737, 0.2935912013053894, 0.28583812713623047, 0.2758670151233673, 0.2845883071422577, 0.2813691794872284, 0.2752388119697571, 0.26471349596977234, 0.2705670893192291, 0.26149094104766846, 0.2597176730632782], "accuracy": [0.2805441915988922, 0.47972527146339417, 0.5675604343414307, 0.6196011304855347, 0.6701889038085938, 0.7024171352386475, 0.722229540348053, 0.7359662055969238, 0.750231146812439, 0.7611940503120422, 0.7697794437408447, 0.7734777331352234, 0.7783648371696472, 0.7902522683143616, 0.7981772422790527, 0.7984414100646973, 0.8038568496704102, 0.8105930685997009, 0.8120459914207458, 0.8236692547798157, 0.8290846943855286, 0.8310658931732178, 0.8379341959953308, 0.8416325449943542, 0.8380662798881531, 0.8428213000297546, 0.8475762605667114, 0.8469158411026001, 0.8516708612442017, 0.848368763923645, 0.8500858545303345, 0.8537842035293579, 0.8577466607093811, 0.8634262084960938, 0.8625016212463379, 0.8677849769592285, 0.8654074668884277, 0.8668603897094727, 0.8706908226013184, 0.8683133125305176, 0.8741249442100525, 0.8739928603172302, 0.8774270415306091, 0.8829745054244995, 0.8828424215316772, 0.880729079246521, 0.880729079246521, 0.8842953443527222, 0.8901069760322571, 0.8914278149604797, 0.8902390599250793, 0.8928807377815247, 0.894069492816925, 0.8920882344245911, 0.8908994793891907, 0.8926165699958801, 0.8967111110687256, 0.8981640338897705, 0.894069492816925, 0.9013340473175049, 0.8988244533538818, 0.9038436412811279, 0.902390718460083, 0.9055606722831726, 0.904768168926239], "val_loss": [2.041517496109009, 1.521327018737793, 1.056040644645691, 0.849458634853363, 0.7591527700424194, 0.7020820379257202, 0.6563862562179565, 0.6226962804794312, 0.5943903923034668, 0.5752275586128235, 0.5596097707748413, 0.5460463762283325, 0.5267866849899292, 0.5172896385192871, 0.5043339729309082, 0.5004016757011414, 0.48295971751213074, 0.4798755347728729, 0.4680972397327423, 0.4620544910430908, 0.4587649405002594, 0.45338159799575806, 0.4413934648036957, 0.4391132891178131, 0.4328998327255249, 0.42616528272628784, 0.4212246835231781, 0.4186306893825531, 0.4223272204399109, 0.4105461537837982, 0.4139820635318756, 0.4052320122718811, 0.4072158932685852, 0.3947561979293823, 0.3941965401172638, 0.39832958579063416, 0.39264142513275146, 0.38509082794189453, 0.3874334990978241, 0.3859506845474243, 0.3796153664588928, 0.37607327103614807, 0.37437742948532104, 0.3686141073703766, 0.3706771731376648, 0.36855095624923706, 0.36175069212913513, 0.36463719606399536, 0.36176276206970215, 0.3603076636791229, 0.3580387234687805, 0.35723546147346497, 0.35612231492996216, 0.3601403832435608, 0.3585681915283203, 0.3516331911087036, 0.3484204113483429, 0.353145033121109, 0.34911292791366577, 0.3454253077507019, 0.34818243980407715, 0.3490280210971832, 0.3467925488948822, 0.34393948316574097, 0.34963899850845337], "val_accuracy": [0.5070000290870667, 0.6503333449363708, 0.6803333163261414, 0.6940000057220459, 0.7273333072662354, 0.7519999742507935, 0.7570000290870667, 0.7673333287239075, 0.7766666412353516, 0.7866666913032532, 0.7889999747276306, 0.7923333048820496, 0.8040000200271606, 0.8143333196640015, 0.8130000233650208, 0.8100000023841858, 0.824999988079071, 0.8213333487510681, 0.8243333101272583, 0.8330000042915344, 0.828000009059906, 0.8303333520889282, 0.8353333473205566, 0.8399999737739563, 0.8403333425521851, 0.8453333377838135, 0.843666672706604, 0.8456666469573975, 0.846666693687439, 0.8516666889190674, 0.8523333072662354, 0.8513333201408386, 0.8546666502952576, 0.8576666712760925, 0.8576666712760925, 0.8526666760444641, 0.8583333492279053, 0.8603333234786987, 0.859666645526886, 0.8610000014305115, 0.8673333525657654, 0.8650000095367432, 0.8663333058357239, 0.8683333396911621, 0.8669999837875366, 0.8676666617393494, 0.871666669845581, 0.8686666488647461, 0.871999979019165, 0.8696666955947876, 0.8733333349227905, 0.8709999918937683, 0.8736666440963745, 0.8683333396911621, 0.8693333268165588, 0.8730000257492065, 0.875, 0.8713333606719971, 0.8723333477973938, 0.8813333511352539, 0.8740000128746033, 0.8769999742507935, 0.8743333220481873, 0.874666690826416, 0.875]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 1], [16, 16, 80], [0, 1], [0], [0], [66], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 0, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10485713928937912, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad))))), alpha)", "other_info": {"loss": [1.5007479009554504e+33, 1.7263770189106726e+33, 1.7246134185822057e+33, 1.746207889884995e+33, 1.7638647834078272e+33, 1.6996023875134937e+33], "accuracy": [0.09959053993225098, 0.10500594228506088, 0.1080438494682312, 0.10289261490106583, 0.1002509593963623, 0.10249637067317963], "val_loss": [1.0222945208907324e+33, 1.0222945208907324e+33, 1.0222945208907324e+33, 1.0222945208907324e+33, 1.0222945208907324e+33, 1.0222945208907324e+33], "val_accuracy": [0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 3, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 59, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 0, 16, 8, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2, 4, 8, 4, 6, 2, 6, 1], [0, 1, 0, 2, 0, 2, 2, 2, 1, 1], [39, 39, 20], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 9, 0, 3, 5], [3, 3, 0, 3], [16, 16], [0, 1, 0, 1], [2, 5], [0, 0], [99, 78], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 99, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 12, 10, 3, 4, 3, 1, 1, 4, 2, 2, 2, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.pow(tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.subtract(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [39, 39, 32], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 2, 3, 0, 3, 5], [0, 2, 3, 3], [24, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 0, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 0, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 8, 4, 4, 1, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, grad)), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}]