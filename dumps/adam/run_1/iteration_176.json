[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8594285845756531, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2240748405456543, 1.8688777685165405, 1.407036304473877, 1.0988264083862305, 0.9492501020431519, 0.8485455513000488, 0.7832194566726685, 0.7367163896560669, 0.6955100893974304, 0.6633684635162354, 0.6386971473693848, 0.6191351413726807, 0.6015971302986145, 0.5752495527267456, 0.558686375617981, 0.5435135960578918, 0.5302615761756897, 0.5103569626808167, 0.5027483105659485, 0.5007776021957397, 0.4825495779514313, 0.47147080302238464, 0.47015202045440674, 0.4544661343097687, 0.445784330368042, 0.43957409262657166, 0.4353659152984619, 0.4261474311351776, 0.4123557507991791, 0.4049709737300873, 0.404433935880661, 0.40289661288261414, 0.38705646991729736, 0.38082456588745117, 0.38081780076026917, 0.3679129183292389, 0.36826202273368835, 0.35479068756103516, 0.35727396607398987, 0.3491117060184479, 0.3499510586261749, 0.3466596007347107, 0.33980095386505127, 0.3274419903755188, 0.325160413980484, 0.31763485074043274, 0.31298524141311646, 0.30445706844329834, 0.3039422035217285, 0.3048518896102905, 0.2989136576652527], "accuracy": [0.2657508850097656, 0.4843481779098511, 0.5569937825202942, 0.6168273687362671, 0.659490168094635, 0.6959450244903564, 0.7193237543106079, 0.7292299270629883, 0.748249888420105, 0.7631752490997314, 0.7681944370269775, 0.7783648371696472, 0.7836481332778931, 0.7967243194580078, 0.7979130744934082, 0.8035926818847656, 0.8098005652427673, 0.8182538747787476, 0.824329674243927, 0.8226125836372375, 0.829216718673706, 0.8333113193511963, 0.8334434032440186, 0.8366134166717529, 0.844010055065155, 0.8471800088882446, 0.8465195894241333, 0.8490291833877563, 0.8558974862098694, 0.8597279191017151, 0.8588033318519592, 0.8560295701026917, 0.8614450097084045, 0.8615770936012268, 0.8639545440673828, 0.8687095642089844, 0.8681812286376953, 0.8757099509239197, 0.8759741187095642, 0.8742570281028748, 0.8754457831382751, 0.8775591254234314, 0.8812574148178101, 0.8854840993881226, 0.8845595121383667, 0.8860124349594116, 0.8902390599250793, 0.8922203183174133, 0.8957865834236145, 0.8885219693183899, 0.8914278149604797], "val_loss": [2.0375497341156006, 1.5097746849060059, 1.034043788909912, 0.82491534948349, 0.7321013808250427, 0.6858041286468506, 0.6501047611236572, 0.6101443767547607, 0.5900740027427673, 0.5673273205757141, 0.5582258105278015, 0.5358048677444458, 0.5255957841873169, 0.510593831539154, 0.4983048141002655, 0.4910142421722412, 0.48018014430999756, 0.47240501642227173, 0.4670156240463257, 0.45798617601394653, 0.4491463303565979, 0.44319701194763184, 0.43747663497924805, 0.43861648440361023, 0.4289991557598114, 0.42660367488861084, 0.42465466260910034, 0.4219697117805481, 0.4166335463523865, 0.4113067090511322, 0.4050539433956146, 0.4011945128440857, 0.40287426114082336, 0.3923892676830292, 0.393370658159256, 0.39490681886672974, 0.38623201847076416, 0.38415440917015076, 0.38235560059547424, 0.3812512755393982, 0.3845476508140564, 0.37463709712028503, 0.37407541275024414, 0.37204626202583313, 0.37238308787345886, 0.36884450912475586, 0.3696396052837372, 0.36799710988998413, 0.36998212337493896, 0.36636611819267273, 0.36517333984375], "val_accuracy": [0.5603333115577698, 0.6606666445732117, 0.6919999718666077, 0.7106666564941406, 0.7390000224113464, 0.7450000047683716, 0.7606666684150696, 0.7703333497047424, 0.7793333530426025, 0.7846666574478149, 0.7916666865348816, 0.8016666769981384, 0.8113333582878113, 0.8116666674613953, 0.8159999847412109, 0.8263333439826965, 0.8299999833106995, 0.8309999704360962, 0.8296666741371155, 0.8346666693687439, 0.8389999866485596, 0.8423333168029785, 0.8416666388511658, 0.8423333168029785, 0.8446666598320007, 0.8473333120346069, 0.847000002861023, 0.8456666469573975, 0.8533333539962769, 0.8553333282470703, 0.8573333621025085, 0.8546666502952576, 0.8500000238418579, 0.8583333492279053, 0.856333315372467, 0.859000027179718, 0.8629999756813049, 0.8629999756813049, 0.8636666536331177, 0.8603333234786987, 0.8576666712760925, 0.8650000095367432, 0.8659999966621399, 0.8676666617393494, 0.8700000047683716, 0.8709999918937683, 0.8690000176429749, 0.8673333525657654, 0.8679999709129333, 0.8666666746139526, 0.8679999709129333]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 3, 1, 1, 0, 9], [0, 2, 3, 3, 0, 0], [16, 69, 39, 48], [0, 1], [0], [0], [99], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 9, 1, 4, 5, 6, 2, 8], [0, 0, 0, 1, 0, 0, 3, 1, 4, 0], [20, 99, 96, 99, 61, 68]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 17, 11, 6, 4, 2, 1, 1, 1, 16, 9, 7, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.multiply(grad, grad)), tf.math.subtract(tf.math.subtract(tf.math.negative(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.308877468109131, 2.3095967769622803, 2.3100850582122803, 2.3121798038482666, 2.309866428375244, 2.3138749599456787, 2.318396806716919, 2.3254759311676025, 2.3353936672210693, 2.3524625301361084], "accuracy": [0.09576013684272766, 0.09893012791872025, 0.09338264167308807, 0.08942015469074249, 0.1014397069811821, 0.09800554811954498, 0.09959053993225098, 0.10130762308835983, 0.10091137140989304, 0.10381719470024109], "val_loss": [2.308487892150879, 2.3085498809814453, 2.308593988418579, 2.308593511581421, 2.308589458465576, 2.308767318725586, 2.3097481727600098, 2.3125786781311035, 2.3183488845825195, 2.327976942062378], "val_accuracy": [0.09366666525602341, 0.09600000083446503, 0.09833333641290665, 0.10166666656732559, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 2], [78, 39, 88], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [4, 2, 5, 3, 1, 2, 4, 3, 8, 9, 6, 2], [0, 5, 1, 7, 4, 0, 6, 2, 6], [99, 38, 92], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [4, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 1, 1, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 3, 6, 3, 3, 2, 21, 12, 9, 3, 1, 0, 1, 1], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(grad), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.pow(grad, tf.math.multiply(grad, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(grad, beta), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3033676147460938, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 4, 0, 3, 5], [0, 1, 0, 2], [68, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 9, 0, 3, 5], [0, 2, 0, 3], [16, 77], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4, 0, 9], [1, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 9, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 5, 4, 1, 2, 2, 1, 1, 1, 24, 14, 10, 4], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.math.pow(alpha, beta))))))), tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 9, 3, 0, 3], [2, 1, 1, 2], [38, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [2], [4, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 8, 8, 2, 4, 1, 4, 2, 8], [0, 0, 0, 2, 0, 4, 3, 3, 2, 0], [4, 99, 79, 99, 25, 1]], "fitness": -0.0908571407198906, "mapping_values": [1, 2, 2, 0, 1, 6, 3, 3, 2, 3, 1, 2, 0, 11, 6, 5, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(grad, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), beta), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3103842735290527, 2.30944561958313, 2.30973482131958, 2.3098888397216797, 2.307727098464966, 2.3089406490325928], "accuracy": [0.09166556596755981, 0.09681680053472519, 0.09087307006120682, 0.09008057415485382, 0.09311848133802414, 0.08638224750757217], "val_loss": [2.308049440383911, 2.30798077583313, 2.307837963104248, 2.307610273361206, 2.3073034286499023, 2.3069417476654053], "val_accuracy": [0.09200000017881393, 0.09166666865348816, 0.08966666460037231, 0.08866667002439499, 0.08733333647251129, 0.0820000022649765]}}]