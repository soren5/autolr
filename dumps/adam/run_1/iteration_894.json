[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8628571629524231, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2233264446258545, 1.8617552518844604, 1.3819079399108887, 1.0764713287353516, 0.9287290573120117, 0.82976233959198, 0.7561804056167603, 0.7106071710586548, 0.671516478061676, 0.6368922591209412, 0.6221944093704224, 0.5957725048065186, 0.5723114013671875, 0.5603141784667969, 0.5466820001602173, 0.5383660793304443, 0.5203172564506531, 0.5052157044410706, 0.49615374207496643, 0.4856054186820984, 0.4714897871017456, 0.46569937467575073, 0.45515844225883484, 0.4467557668685913, 0.4334959089756012, 0.43969303369522095, 0.4280903935432434, 0.420865923166275, 0.420326828956604, 0.4049227833747864, 0.3957647681236267, 0.3969554901123047, 0.3812989294528961, 0.3853483498096466, 0.38579943776130676, 0.36897650361061096, 0.3649527132511139, 0.3623248338699341, 0.3529582917690277, 0.3561212718486786, 0.34552982449531555, 0.34018778800964355, 0.3388003408908844, 0.33138301968574524, 0.32565489411354065, 0.3324738144874573, 0.3211534917354584, 0.3143540024757385, 0.31654542684555054, 0.3067660629749298, 0.3051918148994446, 0.2989742159843445, 0.30088359117507935, 0.2917577028274536, 0.2887496054172516, 0.28411734104156494, 0.2832273542881012, 0.2771044671535492, 0.27072545886039734, 0.2678819000720978, 0.2646298408508301, 0.2588983178138733, 0.2531059980392456, 0.2555328905582428, 0.2476748824119568, 0.2463710457086563, 0.2485170066356659, 0.23416896164417267, 0.23780982196331024, 0.23507332801818848, 0.22918619215488434, 0.225505992770195, 0.21446502208709717, 0.2217879444360733, 0.21509942412376404, 0.2136855572462082, 0.20909713208675385], "accuracy": [0.2723550498485565, 0.48791441321372986, 0.5739004015922546, 0.6283186078071594, 0.6741513609886169, 0.7057191729545593, 0.7292299270629883, 0.7452120184898376, 0.7584202885627747, 0.7660810947418213, 0.7775723338127136, 0.783119797706604, 0.7969884872436523, 0.7987055778503418, 0.8055738806724548, 0.8072909712791443, 0.8150838613510132, 0.8132346868515015, 0.8182538747787476, 0.8310658931732178, 0.8297450542449951, 0.832650899887085, 0.8392550349235535, 0.8417646288871765, 0.8451988101005554, 0.8405758738517761, 0.8514066934585571, 0.8511425256729126, 0.8525954484939575, 0.8581429123878479, 0.8573504090309143, 0.860652506351471, 0.8643507957458496, 0.863029956817627, 0.8646149635314941, 0.8671245574951172, 0.8734645247459412, 0.8734645247459412, 0.8746532797813416, 0.8728041052818298, 0.8775591254234314, 0.8779553771018982, 0.8808611631393433, 0.8794082403182983, 0.8856161832809448, 0.8824461698532104, 0.8894465565681458, 0.8885219693183899, 0.8857482671737671, 0.8953903317451477, 0.8926165699958801, 0.8930128216743469, 0.8906353116035461, 0.8971073627471924, 0.8943336606025696, 0.8975036144256592, 0.8965790271759033, 0.8969752788543701, 0.9051644206047058, 0.9052965044975281, 0.9039757251739502, 0.9068815112113953, 0.9074098467826843, 0.9089948534965515, 0.9095231890678406, 0.9096552729606628, 0.9128252267837524, 0.9169198274612427, 0.91559898853302, 0.9183727502822876, 0.9163914918899536, 0.921938955783844, 0.923920214176178, 0.9167877435684204, 0.9253731369972229, 0.921938955783844, 0.926429808139801], "val_loss": [2.0382585525512695, 1.511532187461853, 1.0313208103179932, 0.8138930797576904, 0.7227622866630554, 0.6690263152122498, 0.6238288283348083, 0.5943464040756226, 0.5730246901512146, 0.5487161874771118, 0.5336710214614868, 0.5163683891296387, 0.5016974210739136, 0.49139702320098877, 0.4913569390773773, 0.4786863625049591, 0.4656079411506653, 0.4575764238834381, 0.45026203989982605, 0.4443413019180298, 0.43397223949432373, 0.4321977496147156, 0.42590463161468506, 0.4202960133552551, 0.41219401359558105, 0.4110461473464966, 0.40541136264801025, 0.39816659688949585, 0.39784371852874756, 0.3959679901599884, 0.3909461200237274, 0.3881167769432068, 0.3829535245895386, 0.38349220156669617, 0.37817245721817017, 0.3780771791934967, 0.3712533414363861, 0.3685029149055481, 0.36744946241378784, 0.36620524525642395, 0.3686923384666443, 0.358357310295105, 0.3582491874694824, 0.36689260601997375, 0.36049893498420715, 0.354291707277298, 0.3517722487449646, 0.3524124324321747, 0.35196033120155334, 0.3512442708015442, 0.3435547649860382, 0.3485575318336487, 0.338144987821579, 0.3474942743778229, 0.3435547649860382, 0.34119823575019836, 0.33555933833122253, 0.33392128348350525, 0.33811530470848083, 0.3304164409637451, 0.3338857889175415, 0.33010920882225037, 0.33155587315559387, 0.3305874168872833, 0.33005353808403015, 0.3279220759868622, 0.3267311155796051, 0.3288669288158417, 0.3290538191795349, 0.3268876373767853, 0.3287944197654724, 0.3239832818508148, 0.32784298062324524, 0.3236328661441803, 0.3269442915916443, 0.31816792488098145, 0.32526925206184387], "val_accuracy": [0.5350000262260437, 0.6576666831970215, 0.6943333148956299, 0.7256666421890259, 0.7486666440963745, 0.7680000066757202, 0.7720000147819519, 0.7796666622161865, 0.7923333048820496, 0.7903333306312561, 0.8040000200271606, 0.812666654586792, 0.8149999976158142, 0.8213333487510681, 0.8163333535194397, 0.8190000057220459, 0.8273333311080933, 0.8353333473205566, 0.8320000171661377, 0.8403333425521851, 0.846666693687439, 0.8483333587646484, 0.8506666421890259, 0.8546666502952576, 0.8526666760444641, 0.856333315372467, 0.8546666502952576, 0.8566666841506958, 0.8613333106040955, 0.8600000143051147, 0.862333357334137, 0.8633333444595337, 0.8653333187103271, 0.8663333058357239, 0.8676666617393494, 0.8673333525657654, 0.8703333139419556, 0.8703333139419556, 0.8703333139419556, 0.8713333606719971, 0.874666690826416, 0.8773333430290222, 0.878000020980835, 0.8759999871253967, 0.8769999742507935, 0.8786666393280029, 0.8799999952316284, 0.878333330154419, 0.878333330154419, 0.8796666860580444, 0.8849999904632568, 0.878333330154419, 0.8853333592414856, 0.8820000290870667, 0.8863333463668823, 0.8836666941642761, 0.8856666684150696, 0.8870000243186951, 0.8863333463668823, 0.8863333463668823, 0.887333333492279, 0.887333333492279, 0.8883333206176758, 0.8856666684150696, 0.8886666893959045, 0.890666663646698, 0.8893333077430725, 0.887333333492279, 0.8926666378974915, 0.8920000195503235, 0.8883333206176758, 0.8946666717529297, 0.8923333287239075, 0.8926666378974915, 0.8923333287239075, 0.893666684627533, 0.8946666717529297]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [4, 5, 3, 1, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 0], [0, 2, 0, 3], [16, 68], [1, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 10, 6, 4, 2, 1, 0, 1, 1, 10, 5, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.square(tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [96.202880859375, 10874.931640625, 182649.765625, 1276761.25, 5623948.0, 18605684.0], "accuracy": [0.09721305221319199, 0.10051512718200684, 0.10117553919553757, 0.1010434553027153, 0.09576013684272766, 0.09760929644107819], "val_loss": [789.6856689453125, 38681.78125, 410955.3125, 2233553.5, 8355199.5, 24628170.0], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [77], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 4, 8], [0, 0, 2, 4, 0, 0, 3, 1, 1, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(beta, grad))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.pow(tf.math.sqrt(alpha), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 8, 2, 0, 7, 3], [0, 1, 0, 2, 2, 0, 1], [39, 39, 47], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 9, 5, 7, 1, 9], [0, 2, 0, 2], [16, 16, 45, 84], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 4, 6, 8, 1, 4, 1, 1, 9, 8], [0, 0, 0, 3, 0, 4, 3, 3, 2, 0], [16, 99, 96, 99, 72, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 10, 7, 3, 13, 9, 4, 4, 2, 1, 1, 1, 18, 10, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(grad, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(grad, sigma)))), sigma), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3034658432006836, 2.302579402923584, 2.302579879760742, 2.3025801181793213, 2.3025808334350586, 2.302581310272217, 2.3025805950164795, 2.3025825023651123, 2.302583932876587, 2.3025832176208496, 2.3025827407836914], "accuracy": [0.10513802617788315, 0.10513802617788315, 0.10408136248588562, 0.09998679161071777, 0.10302469879388809, 0.10870426893234253, 0.10540219396352768, 0.10408136248588562, 0.1006472036242485, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025856018066406, 2.302586317062378, 2.302586317062378, 2.302586317062378, 2.302584648132324, 2.3025853633880615, 2.3025851249694824, 2.302586078643799, 2.302586317062378, 2.3025875091552734], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09666666388511658, 0.10366666316986084, 0.1003333330154419, 0.1003333330154419, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 4, 2, 0, 7, 9, 1, 3, 0, 2, 0, 1, 3, 7, 5, 1, 7, 4, 3, 1, 3, 8, 2, 4, 0, 9, 5, 1, 6, 7, 0, 4, 7, 9, 8, 8, 1, 4, 4, 2, 5, 2, 7, 3, 3, 2, 8, 6, 0, 8, 8, 4, 8, 7, 4, 6, 6, 6, 9], [0, 3, 4, 7, 1, 0, 4, 7, 5, 1, 4, 3, 5, 1, 4, 7, 7, 2, 7, 5, 2, 2, 7, 7, 7, 1, 7, 4, 7, 2, 5, 0, 2, 2, 2], [99, 61, 84, 18, 26, 75, 28], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 4, 1, 4, 0], [16, 99, 96, 80, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 10, 6, 4, 2, 94, 59, 35, 7, 16, 8, 8, 4], "tree_depth": 57, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.add(tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(sigma, tf.math.square(tf.math.subtract(tf.math.add(grad, tf.math.pow(tf.math.multiply(grad, tf.math.subtract(tf.math.multiply(tf.math.sqrt(alpha), tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), grad)), tf.math.pow(tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.subtract(grad, tf.math.divide_no_nan(grad, tf.math.add(tf.math.negative(alpha), tf.math.pow(tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), sigma)))))))), grad)), alpha))), grad), tf.math.sqrt(tf.math.subtract(tf.math.pow(grad, tf.math.pow(grad, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(grad, tf.math.add(tf.math.sqrt(grad), tf.math.divide_no_nan(beta, tf.math.negative(beta)))), grad)), tf.math.sqrt(grad))), tf.math.sqrt(tf.math.pow(grad, alpha))))), tf.math.sqrt(tf.math.add(grad, tf.math.pow(grad, grad))))))), beta)), tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), beta)))))), tf.math.divide_no_nan(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), beta)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), grad), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}]