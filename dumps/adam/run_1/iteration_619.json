[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8571428656578064, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.219071865081787, 1.854064702987671, 1.370241641998291, 1.0761723518371582, 0.9282646179199219, 0.8208155632019043, 0.7649296522140503, 0.7164674401283264, 0.6778368353843689, 0.6553380489349365, 0.6293879151344299, 0.6022763252258301, 0.5905774831771851, 0.5654133558273315, 0.5523885488510132, 0.5429171323776245, 0.5225815773010254, 0.5181664824485779, 0.5045966506004333, 0.48421117663383484, 0.47156471014022827, 0.4745386838912964, 0.4609495997428894, 0.4532163143157959, 0.4473390579223633, 0.4447341859340668, 0.43015173077583313, 0.42709633708000183, 0.4178205132484436, 0.4107612371444702, 0.40510740876197815, 0.3918760120868683, 0.39222005009651184, 0.3864639103412628, 0.3714877963066101, 0.3743976652622223, 0.3659695088863373, 0.35765326023101807, 0.3561401963233948, 0.3474327027797699, 0.34352418780326843, 0.3398193418979645, 0.3403344452381134, 0.33154022693634033, 0.32705628871917725, 0.32385993003845215, 0.3158794343471527, 0.31144410371780396, 0.31039848923683167, 0.31060460209846497, 0.29834917187690735, 0.301520973443985, 0.29757848381996155, 0.29570984840393066, 0.2773810625076294, 0.2771998941898346, 0.27458009123802185, 0.2721197307109833, 0.2727181613445282, 0.2713678777217865, 0.2732893228530884, 0.2600298523902893, 0.25472530722618103, 0.25229042768478394, 0.24505238234996796, 0.24649056792259216, 0.24107356369495392, 0.24324607849121094], "accuracy": [0.2942807972431183, 0.49993395805358887, 0.5764099955558777, 0.627129852771759, 0.6705851554870605, 0.7084929347038269, 0.7263241410255432, 0.744419515132904, 0.7537974119186401, 0.7676661014556885, 0.7689869403839111, 0.7788931727409363, 0.7837802171707153, 0.796328067779541, 0.8006868362426758, 0.8084797263145447, 0.8119139075279236, 0.8095363974571228, 0.8168009519577026, 0.8257825970649719, 0.8274996876716614, 0.8355567455291748, 0.8300092220306396, 0.8376700282096863, 0.8399154543876648, 0.8381983637809753, 0.848368763923645, 0.8454629778862, 0.8453308939933777, 0.852859616279602, 0.8565579056739807, 0.8634262084960938, 0.8585391640663147, 0.8619733452796936, 0.8683133125305176, 0.868049144744873, 0.8701624870300293, 0.870030403137207, 0.874389111995697, 0.8749174475669861, 0.8754457831382751, 0.8787478804588318, 0.878879964351654, 0.883238673210144, 0.8838990926742554, 0.8794082403182983, 0.8865407705307007, 0.8924844861030579, 0.8887861371040344, 0.8881257176399231, 0.8920882344245911, 0.8914278149604797, 0.8951261639595032, 0.893541157245636, 0.9034473896026611, 0.9015982151031494, 0.9013340473175049, 0.9043719172477722, 0.9017302989959717, 0.9030511379241943, 0.9013340473175049, 0.9082023501396179, 0.9064852595329285, 0.9084665179252625, 0.9093911051750183, 0.9126931428909302, 0.9162594079971313, 0.9158631563186646], "val_loss": [2.0303919315338135, 1.4933655261993408, 1.027545690536499, 0.8332517147064209, 0.7509814500808716, 0.698273777961731, 0.656102180480957, 0.6257557272911072, 0.6028328537940979, 0.581955075263977, 0.5606436729431152, 0.5494545698165894, 0.5319023132324219, 0.5192517042160034, 0.5098078846931458, 0.5005155205726624, 0.49192121624946594, 0.4821397662162781, 0.47273629903793335, 0.4700440764427185, 0.46262723207473755, 0.45748019218444824, 0.45300301909446716, 0.44526252150535583, 0.4419335126876831, 0.4423082768917084, 0.44920629262924194, 0.4329652488231659, 0.4245813488960266, 0.4224778711795807, 0.4215933084487915, 0.41896915435791016, 0.4182736873626709, 0.41231968998908997, 0.40874722599983215, 0.40889298915863037, 0.40666529536247253, 0.402064710855484, 0.3991854786872864, 0.3991800546646118, 0.39576196670532227, 0.3951184153556824, 0.3945823609828949, 0.39268770813941956, 0.386109858751297, 0.38955098390579224, 0.3957327604293823, 0.3871873915195465, 0.3854253888130188, 0.3834756314754486, 0.3831636905670166, 0.38423916697502136, 0.38613009452819824, 0.38409125804901123, 0.37779346108436584, 0.38088956475257874, 0.37878403067588806, 0.37717708945274353, 0.3760446012020111, 0.3753645122051239, 0.37378033995628357, 0.3765048086643219, 0.3746553957462311, 0.37653180956840515, 0.3822440505027771, 0.3733498156070709, 0.37240177392959595, 0.36900418996810913], "val_accuracy": [0.5563333630561829, 0.6703333258628845, 0.6896666884422302, 0.7139999866485596, 0.7350000143051147, 0.7523333430290222, 0.7649999856948853, 0.7753333449363708, 0.7713333368301392, 0.793666660785675, 0.7986666560173035, 0.79666668176651, 0.8066666722297668, 0.8080000281333923, 0.8176666498184204, 0.8140000104904175, 0.8226666450500488, 0.8256666660308838, 0.8346666693687439, 0.8326666951179504, 0.8353333473205566, 0.8366666436195374, 0.843999981880188, 0.8460000157356262, 0.8486666679382324, 0.8443333506584167, 0.8373333215713501, 0.8456666469573975, 0.8523333072662354, 0.8536666631698608, 0.8526666760444641, 0.8516666889190674, 0.8583333492279053, 0.8576666712760925, 0.8529999852180481, 0.8603333234786987, 0.8576666712760925, 0.859333336353302, 0.8613333106040955, 0.8629999756813049, 0.8640000224113464, 0.8613333106040955, 0.8633333444595337, 0.8669999837875366, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8603333234786987, 0.8676666617393494, 0.8706666827201843, 0.8706666827201843, 0.8663333058357239, 0.8686666488647461, 0.8673333525657654, 0.8713333606719971, 0.871999979019165, 0.8726666569709778, 0.8740000128746033, 0.871666669845581, 0.8730000257492065, 0.8723333477973938, 0.8733333349227905, 0.874666690826416, 0.8709999918937683, 0.8686666488647461, 0.8736666440963745, 0.8730000257492065, 0.8740000128746033]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 4, 3, 0, 6, 1, 8, 7, 9, 7, 5, 6, 6], [0, 2, 0, 3, 1, 2, 2, 2, 0, 5, 1], [79, 16, 78, 12], [0, 0, 0, 0, 1, 1], [4, 7, 9, 5], [4, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 6, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [48, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 29, 18, 11, 4, 6, 4, 2, 1, 21, 11, 10, 5], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(grad, alpha), beta)), tf.math.sqrt(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), grad))))))))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 2, 3, 0, 3, 7, 9], [1, 1, 0, 2], [18, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 34], [0, 0, 1, 1], [0, 1], [4, 7], [99], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 4, 4, 2, 3], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), tf.math.multiply(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(grad, grad)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.375230073928833, 2.361280918121338, 2.3036046028137207, 2.3030686378479004, 2.302924871444702, 2.3028016090393066, 2.3030660152435303, 2.303142786026001], "accuracy": [0.22982433438301086, 0.09800554811954498, 0.09602430462837219, 0.10091137140989304, 0.09906221181154251, 0.09681680053472519, 0.09100515395402908, 0.09509972482919693], "val_loss": [2.6133527755737305, 2.303317070007324, 2.3026959896087646, 2.3026633262634277, 2.3026695251464844, 2.302558660507202, 2.302704334259033, 2.302492618560791], "val_accuracy": [0.09866666793823242, 0.09366666525602341, 0.10333333164453506, 0.09366666525602341, 0.10133333504199982, 0.10133333504199982, 0.09600000083446503, 0.10233332961797714]}, "mapping_values": [1, 11, 7, 4, 2, 10, 6, 4, 2, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 9, 5], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 5, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 6, 3, 3, 1, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [5.018645286560059, 24.07103729248047, 54.181365966796875, 92.58441925048828, 130.8931884765625, 169.18557739257812], "accuracy": [0.1002509593963623, 0.10011887550354004, 0.10698718577623367, 0.10091137140989304, 0.10289261490106583, 0.09668471664190292], "val_loss": [10.674947738647461, 32.073665618896484, 59.07595443725586, 88.3515853881836, 118.2314682006836, 147.9464569091797], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 3, 0, 3, 3, 8, 9], [0, 1, 0, 2], [39, 39, 42], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 2, 3, 0, 3, 1, 9], [1, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 8, 6, 8, 1, 0, 0, 4, 2, 6], [0, 4, 0, 3, 2, 4, 3, 1, 2, 0], [16, 87, 96, 99, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 8, 4, 3, 11, 7, 4, 2, 2, 1, 1, 1, 13, 8, 5, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.negative(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]