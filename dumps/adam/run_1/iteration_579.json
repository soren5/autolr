[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87371426820755, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2231881618499756, 1.8716233968734741, 1.3948094844818115, 1.0941123962402344, 0.9402675628662109, 0.8365468382835388, 0.7813618183135986, 0.7326860427856445, 0.6966428756713867, 0.6590085029602051, 0.6463255286216736, 0.6244983077049255, 0.5997865200042725, 0.5858984589576721, 0.5717169642448425, 0.5577542781829834, 0.5410304069519043, 0.5233672261238098, 0.5169127583503723, 0.5091821551322937, 0.4880124032497406, 0.4880163073539734, 0.47092491388320923, 0.45522111654281616, 0.4567280411720276, 0.44036057591438293, 0.4450986087322235, 0.43305426836013794, 0.4320383667945862, 0.4229552149772644, 0.41512531042099, 0.4066947400569916, 0.39586374163627625, 0.3924676477909088, 0.3864057958126068, 0.3813326060771942, 0.37899890542030334, 0.37221646308898926, 0.37081414461135864, 0.3571752905845642, 0.3558998107910156, 0.3464772403240204, 0.3467112183570862, 0.34463298320770264, 0.33353742957115173, 0.3282446563243866, 0.32358646392822266, 0.3224846422672272, 0.3180653750896454, 0.31374484300613403, 0.30827492475509644, 0.2980063855648041, 0.2937602698802948, 0.29932719469070435, 0.29023030400276184, 0.2877684533596039, 0.28387200832366943, 0.2831796109676361, 0.2772120237350464, 0.2701058089733124, 0.2694300413131714, 0.2610650658607483, 0.26213064789772034, 0.25785383582115173, 0.25595125555992126, 0.2535863518714905, 0.2432258278131485], "accuracy": [0.27341169118881226, 0.48791441321372986, 0.5635979175567627, 0.6225069165229797, 0.6655659675598145, 0.7066437602043152, 0.715889573097229, 0.7372870445251465, 0.7469290494918823, 0.7626469135284424, 0.7614582180976868, 0.7759873270988464, 0.7802139520645142, 0.7848368883132935, 0.7956677079200745, 0.8016114234924316, 0.8095363974571228, 0.8084797263145447, 0.8136309385299683, 0.8177255392074585, 0.8260467648506165, 0.8267071843147278, 0.8337075710296631, 0.8397833704948425, 0.8401796221733093, 0.8426892161369324, 0.8467837572097778, 0.8486329317092896, 0.8430854678153992, 0.8459912538528442, 0.850350022315979, 0.8537842035293579, 0.8642187118530273, 0.8609166741371155, 0.863558292388916, 0.8644828796386719, 0.8672566413879395, 0.8688416481018066, 0.8685774803161621, 0.869502067565918, 0.8749174475669861, 0.8737286925315857, 0.8778232932090759, 0.8730682730674744, 0.8798044919967651, 0.8840311765670776, 0.8849557638168335, 0.8809932470321655, 0.8919561505317688, 0.8874653577804565, 0.8898428082466125, 0.893541157245636, 0.8944657444953918, 0.8951261639595032, 0.8952582478523254, 0.893541157245636, 0.8965790271759033, 0.8967111110687256, 0.9010698795318604, 0.8997490406036377, 0.9039757251739502, 0.9060890078544617, 0.9060890078544617, 0.9103156924247742, 0.9097873568534851, 0.9050323367118835, 0.9137498140335083], "val_loss": [2.038641929626465, 1.5137171745300293, 1.034222960472107, 0.8179982900619507, 0.7283814549446106, 0.6725463271141052, 0.6289420127868652, 0.590650200843811, 0.5646299719810486, 0.5457413196563721, 0.5267046093940735, 0.5111882090568542, 0.4893053472042084, 0.4854404032230377, 0.46923938393592834, 0.45985132455825806, 0.4528020918369293, 0.4381853938102722, 0.43529000878334045, 0.4237184226512909, 0.41658732295036316, 0.41024166345596313, 0.40551936626434326, 0.40147075057029724, 0.39281055331230164, 0.38770267367362976, 0.3853391110897064, 0.38559219241142273, 0.3763456642627716, 0.37322998046875, 0.37166377902030945, 0.368068128824234, 0.3634625971317291, 0.3566373288631439, 0.3554760813713074, 0.35463187098503113, 0.3571864366531372, 0.35703685879707336, 0.3535536825656891, 0.3464703857898712, 0.34304940700531006, 0.35108843445777893, 0.34499219059944153, 0.3408368229866028, 0.3366251289844513, 0.33618423342704773, 0.3360905051231384, 0.3316819369792938, 0.33506545424461365, 0.3329719603061676, 0.33082523941993713, 0.3236862123012543, 0.32563820481300354, 0.3271101415157318, 0.3237873911857605, 0.3336998224258423, 0.3227892518043518, 0.32348698377609253, 0.3228369951248169, 0.32175275683403015, 0.31868207454681396, 0.3162529766559601, 0.3222286105155945, 0.3198377788066864, 0.3177086114883423, 0.3191449046134949, 0.3174056112766266], "val_accuracy": [0.5353333353996277, 0.6676666736602783, 0.7039999961853027, 0.7239999771118164, 0.7490000128746033, 0.7580000162124634, 0.7713333368301392, 0.7829999923706055, 0.7979999780654907, 0.8006666898727417, 0.8056666851043701, 0.812666654586792, 0.8223333358764648, 0.8263333439826965, 0.8253333568572998, 0.8306666612625122, 0.8373333215713501, 0.8426666855812073, 0.8423333168029785, 0.8503333330154419, 0.8473333120346069, 0.8523333072662354, 0.8513333201408386, 0.8493333458900452, 0.8573333621025085, 0.856333315372467, 0.8583333492279053, 0.859333336353302, 0.8629999756813049, 0.8646666407585144, 0.8650000095367432, 0.8679999709129333, 0.8696666955947876, 0.8673333525657654, 0.8709999918937683, 0.8766666650772095, 0.871666669845581, 0.8690000176429749, 0.8693333268165588, 0.8730000257492065, 0.8803333044052124, 0.875, 0.875, 0.8756666779518127, 0.8790000081062317, 0.8806666731834412, 0.878333330154419, 0.8843333125114441, 0.8796666860580444, 0.8836666941642761, 0.8816666603088379, 0.8846666812896729, 0.8846666812896729, 0.8823333382606506, 0.8823333382606506, 0.8856666684150696, 0.8849999904632568, 0.887666642665863, 0.8853333592414856, 0.8843333125114441, 0.8896666765213013, 0.890666663646698, 0.8866666555404663, 0.8856666684150696, 0.890333354473114, 0.8896666765213013, 0.8899999856948853]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 9, 0, 3], [0, 1, 0, 2], [39, 99], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [3, 16], [0, 1], [0], [0], [48], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 0, 8], [0, 0, 0, 3, 2, 0, 3, 1, 2, 0], [16, 99, 96, 18, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 4, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(beta, tf.math.pow(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), sigma))), alpha)), tf.math.negative(tf.math.sqrt(beta))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 3, 8, 1, 4, 1, 4, 9, 8], [0, 0, 0, 3, 4, 0, 0, 1, 2, 0], [81, 53, 96, 99, 61, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 0, 7, 4, 3, 2, 2, 1, 1, 1, 12, 6, 6, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), grad), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 3, 2, 3], [1, 1, 0, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [2, 2, 0, 3], [16, 16], [0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 4, 8, 4, 3], [0, 5, 1, 5], [99], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 1, 3, 6, 8, 1, 3, 9, 4, 2, 8], [2, 0, 0, 3, 0, 0, 3, 1, 0, 4], [16, 99, 96, 99, 85, 9]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 10, 6, 4, 1, 9, 5, 4, 1, 16, 9, 7, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(beta), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.multiply(alpha, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(beta, tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 8, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [3, 2, 3, 0, 3, 5], [3, 3, 0, 3], [82, 98], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 7, 0, 6, 5, 9, 9, 6, 7, 7, 9, 7, 6, 6, 8, 1, 3, 3, 1, 9], [0, 0, 5, 6, 1, 6, 3, 4, 5, 0, 0], [99, 17, 13, 93, 52, 51, 45, 60], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 6, 1, 4, 6, 8, 6], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0, 0], [16, 99, 96, 99, 81, 1, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 8, 4, 4, 1, 32, 21, 11, 8, 23, 12, 11, 7], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(grad, grad), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.divide_no_nan(grad, alpha), grad))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.multiply(grad, tf.math.multiply(tf.math.subtract(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), grad), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.divide_no_nan(alpha, beta))))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]