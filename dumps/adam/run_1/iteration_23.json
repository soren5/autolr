[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8740000128746033, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.220431327819824, 1.8569740056991577, 1.3755658864974976, 1.0874396562576294, 0.9262239336967468, 0.8379094004631042, 0.7675543427467346, 0.7217980623245239, 0.6871329545974731, 0.654635488986969, 0.6388610601425171, 0.6150592565536499, 0.5940167903900146, 0.5808444023132324, 0.56529301404953, 0.5501704216003418, 0.5388270020484924, 0.5208674073219299, 0.5151153206825256, 0.49882566928863525, 0.488606721162796, 0.48571860790252686, 0.4818565249443054, 0.4635099470615387, 0.45399028062820435, 0.447063684463501, 0.42773061990737915, 0.4359186291694641, 0.4229935109615326, 0.4215356111526489, 0.4066852331161499, 0.40534907579421997, 0.4016064405441284, 0.3922232687473297, 0.39207661151885986, 0.38746607303619385, 0.37294304370880127, 0.3714742660522461, 0.3697217106819153, 0.3609004616737366, 0.35770687460899353, 0.3554362654685974, 0.34485262632369995], "accuracy": [0.2779025137424469, 0.49689605832099915, 0.5691454410552979, 0.6178840398788452, 0.667811393737793, 0.6940959095954895, 0.7205125093460083, 0.7360982894897461, 0.7448157668113708, 0.76106196641922, 0.7633073329925537, 0.7720248103141785, 0.7791573405265808, 0.7895918488502502, 0.7980451583862305, 0.7991018295288086, 0.8054417967796326, 0.8095363974571228, 0.8148196935653687, 0.8203672170639038, 0.8252542614936829, 0.8261788487434387, 0.82683926820755, 0.8372738361358643, 0.8359529972076416, 0.841500461101532, 0.8479725122451782, 0.8457271456718445, 0.8479725122451782, 0.8469158411026001, 0.8595958352088928, 0.8555012345314026, 0.8533879518508911, 0.8585391640663147, 0.8614450097084045, 0.8661999702453613, 0.8669924736022949, 0.8651432991027832, 0.8691058158874512, 0.8722757697105408, 0.8722757697105408, 0.8710870146751404, 0.8775591254234314], "val_loss": [2.0389509201049805, 1.5124274492263794, 1.0496517419815063, 0.8497922420501709, 0.7626957893371582, 0.7097421884536743, 0.6660829186439514, 0.6305967569351196, 0.6106986999511719, 0.58641517162323, 0.5680446028709412, 0.5499541759490967, 0.5397006273269653, 0.5237101316452026, 0.5184644460678101, 0.5011928677558899, 0.4974513649940491, 0.4835914671421051, 0.4776989221572876, 0.4746166169643402, 0.4587276875972748, 0.4570014774799347, 0.453452467918396, 0.4375725984573364, 0.4370024800300598, 0.4279727637767792, 0.42560073733329773, 0.42118921875953674, 0.4194360375404358, 0.4133787155151367, 0.4061407148838043, 0.4093184471130371, 0.40150943398475647, 0.3984459638595581, 0.39168456196784973, 0.3900165259838104, 0.39059528708457947, 0.38579386472702026, 0.3800792098045349, 0.38237810134887695, 0.3783215880393982, 0.37695303559303284, 0.3709409236907959], "val_accuracy": [0.5609999895095825, 0.6486666798591614, 0.6710000038146973, 0.6990000009536743, 0.7229999899864197, 0.737666666507721, 0.7513333559036255, 0.7649999856948853, 0.7733333110809326, 0.7883333563804626, 0.7873333096504211, 0.7940000295639038, 0.8046666383743286, 0.812666654586792, 0.8119999766349792, 0.8166666626930237, 0.815666675567627, 0.8273333311080933, 0.8276666402816772, 0.8326666951179504, 0.8336666822433472, 0.8343333601951599, 0.843666672706604, 0.8453333377838135, 0.8433333039283752, 0.847000002861023, 0.8450000286102295, 0.846666693687439, 0.8486666679382324, 0.8513333201408386, 0.8546666502952576, 0.8516666889190674, 0.8576666712760925, 0.8560000061988831, 0.8606666922569275, 0.8586666584014893, 0.859000027179718, 0.8673333525657654, 0.8603333234786987, 0.8613333106040955, 0.8619999885559082, 0.8629999756813049, 0.8656666874885559]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8682857155799866, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222593069076538, 1.8575329780578613, 1.3849506378173828, 1.082362413406372, 0.9284403324127197, 0.8269144296646118, 0.7730569243431091, 0.7217221260070801, 0.6838902235031128, 0.6563165783882141, 0.6389555931091309, 0.6129875183105469, 0.5903230905532837, 0.57746422290802, 0.5648443698883057, 0.5420465469360352, 0.5355017781257629, 0.5261114239692688, 0.5033188462257385, 0.5053439736366272, 0.49038857221603394, 0.48017266392707825, 0.4741548001766205, 0.45850980281829834, 0.4496552646160126, 0.44640764594078064, 0.4322689175605774, 0.4291786551475525, 0.42171287536621094, 0.41850051283836365, 0.4089087247848511, 0.399600625038147, 0.39452940225601196, 0.3984229266643524, 0.3807902932167053, 0.3850899040699005, 0.3784225285053253, 0.3662378191947937, 0.36277899146080017, 0.3620557188987732, 0.35089150071144104, 0.34325411915779114, 0.3468932509422302, 0.33539193868637085, 0.3367381989955902, 0.3357030153274536, 0.3185673654079437, 0.32402387261390686, 0.31126904487609863, 0.319842129945755, 0.3062840402126312, 0.30921831727027893, 0.296031653881073, 0.2952021360397339, 0.2889789938926697, 0.2848548889160156, 0.2782791256904602, 0.2798144817352295, 0.27931690216064453], "accuracy": [0.2665433883666992, 0.49148064851760864, 0.5671641826629639, 0.6214502453804016, 0.6693964004516602, 0.709549605846405, 0.7255316376686096, 0.7434949278831482, 0.7543256878852844, 0.7647602558135986, 0.7755910754203796, 0.7812706232070923, 0.7878747582435608, 0.796328067779541, 0.8039889335632324, 0.8099326491355896, 0.8123101592063904, 0.8095363974571228, 0.8236692547798157, 0.8215559124946594, 0.8280280232429504, 0.8290846943855286, 0.8354246616363525, 0.8430854678153992, 0.8428213000297546, 0.8433496356010437, 0.8482366800308228, 0.8500858545303345, 0.8498216867446899, 0.856689989566803, 0.8516708612442017, 0.8562937378883362, 0.8638224601745605, 0.8593316674232483, 0.8664641380310059, 0.8623695969581604, 0.8671245574951172, 0.8701624870300293, 0.8710870146751404, 0.8728041052818298, 0.8802007436752319, 0.8770307898521423, 0.8747853636741638, 0.8795403242111206, 0.8836349248886108, 0.8800686597824097, 0.8873332738876343, 0.8862766027450562, 0.8893144726753235, 0.8837670087814331, 0.8923524022102356, 0.8919561505317688, 0.8973715305328369, 0.8944657444953918, 0.89988112449646, 0.9009377956390381, 0.9009377956390381, 0.8985602855682373, 0.902390718460083], "val_loss": [2.0360045433044434, 1.510894536972046, 1.047986626625061, 0.8411627411842346, 0.7499809861183167, 0.6945741176605225, 0.6442444324493408, 0.6085088849067688, 0.5830321907997131, 0.5587713122367859, 0.5381612181663513, 0.5246533155441284, 0.5089267492294312, 0.49414652585983276, 0.4827314019203186, 0.47372546792030334, 0.4625263214111328, 0.45298653841018677, 0.44414323568344116, 0.439852774143219, 0.4282800555229187, 0.42264458537101746, 0.4121406376361847, 0.4083521366119385, 0.40412425994873047, 0.3988783359527588, 0.39151546359062195, 0.39530396461486816, 0.3870680034160614, 0.3807118237018585, 0.3793274462223053, 0.37373587489128113, 0.3749884366989136, 0.3661169111728668, 0.36928096413612366, 0.3614639341831207, 0.35734421014785767, 0.3563593327999115, 0.3536435067653656, 0.3555660545825958, 0.3493656516075134, 0.3438417613506317, 0.34535595774650574, 0.34528547525405884, 0.3462553024291992, 0.34093528985977173, 0.3349579870700836, 0.33479464054107666, 0.3348715305328369, 0.3320325016975403, 0.3321128785610199, 0.3295806646347046, 0.32855042815208435, 0.3249851167201996, 0.3227604329586029, 0.32998189330101013, 0.3213750422000885, 0.32158708572387695, 0.32221561670303345], "val_accuracy": [0.5356666445732117, 0.6516666412353516, 0.6806666851043701, 0.7086666822433472, 0.7350000143051147, 0.7513333559036255, 0.7696666717529297, 0.7730000019073486, 0.7870000004768372, 0.7986666560173035, 0.8026666641235352, 0.8100000023841858, 0.8116666674613953, 0.8193333148956299, 0.8223333358764648, 0.8259999752044678, 0.828000009059906, 0.8339999914169312, 0.8363333344459534, 0.8423333168029785, 0.843999981880188, 0.8460000157356262, 0.8510000109672546, 0.8493333458900452, 0.8529999852180481, 0.8576666712760925, 0.8610000014305115, 0.8529999852180481, 0.8610000014305115, 0.8600000143051147, 0.8646666407585144, 0.8619999885559082, 0.862333357334137, 0.8683333396911621, 0.8683333396911621, 0.8686666488647461, 0.8743333220481873, 0.8683333396911621, 0.8686666488647461, 0.8730000257492065, 0.8736666440963745, 0.875, 0.878333330154419, 0.8736666440963745, 0.8759999871253967, 0.8796666860580444, 0.8776666522026062, 0.8806666731834412, 0.878000020980835, 0.8793333172798157, 0.8816666603088379, 0.8820000290870667, 0.8830000162124634, 0.8853333592414856, 0.8836666941642761, 0.8853333592414856, 0.8843333125114441, 0.8809999823570251, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], [4, 2, 3, 0, 3, 4, 3, 2, 5, 6, 8, 3, 2, 8], [0, 1, 2, 2, 0, 2, 2, 3, 1, 0, 3], [39, 39, 83], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 2, 0, 9, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 5, 6, 8, 1, 4, 1, 4, 2, 5], [0, 4, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 24]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad)), tf.math.pow(tf.math.multiply(tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.multiply(grad, tf.math.add(grad, alpha))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}, "mapping_values": [1, 25, 14, 11, 3, 7, 4, 3, 2, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 6, 3], [0, 1, 0, 2], [47, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 6, 3, 0, 3, 5, 0], [0, 2, 0, 3, 4], [16, 16], [0, 1], [0], [0], [38], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 2, 2, 0], [16, 99, 96, 99, 22, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 12, 7, 5, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), sigma)))), beta), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 8, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 9, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 9, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 13, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [41328.45703125, 6040414.5, 104584632.0, 730815104.0, 3235202304.0, 10518108160.0], "accuracy": [0.10077928751707077, 0.10157178342342377, 0.10342095047235489, 0.09945846349000931, 0.09866596013307571, 0.10157178342342377], "val_loss": [406357.15625, 21798136.0, 233765760.0, 1274041856.0, 4771568128.0, 14073630720.0], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 3, 2, 1, 1, 8, 6, 2, 2, 2, 1, 1, 1, 11, 6, 5, 5], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 5, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [5, 1, 4, 0, 3, 5, 1, 2, 4, 5, 4, 0, 1, 7, 9, 1], [0, 2, 0, 0, 4, 1, 2, 2, 1, 3], [16, 16, 2, 73], [0, 1], [0], [1], [99], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 2, 8, 1, 6, 9, 4, 2, 8, 0], [0, 0, 0, 3, 0, 0, 3, 0, 2, 0], [63, 99, 96, 61, 61, 45, 72]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 3, 2, 1, 26, 16, 10, 4, 2, 1, 1, 0, 20, 12, 8, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.pow(tf.math.square(tf.math.pow(tf.math.negative(alpha), tf.math.subtract(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(beta, alpha)))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.sqrt(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), sigma), tf.math.sqrt(tf.math.negative(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}]