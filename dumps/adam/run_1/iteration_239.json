[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87971431016922, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2264158725738525, 1.883138656616211, 1.4228179454803467, 1.1245834827423096, 0.9636178016662598, 0.8570544123649597, 0.7892341613769531, 0.7428163290023804, 0.7103912234306335, 0.6776049137115479, 0.6464032530784607, 0.6186978220939636, 0.6058709025382996, 0.583882212638855, 0.5697414875030518, 0.5519570708274841, 0.5444625020027161, 0.5314995646476746, 0.5091581344604492, 0.5085999369621277, 0.4993470013141632, 0.47943422198295593, 0.4748769998550415, 0.4657655656337738, 0.4618813097476959, 0.45459797978401184, 0.450758159160614, 0.43135109543800354, 0.4276069402694702, 0.41853609681129456, 0.41742268204689026, 0.40973231196403503, 0.4136907458305359, 0.40421152114868164, 0.39682677388191223, 0.38752782344818115, 0.3869898021221161, 0.3718068301677704, 0.36564821004867554, 0.37274402379989624, 0.3558189570903778, 0.35788071155548096, 0.3505411446094513, 0.3386285901069641, 0.3320959806442261, 0.33276042342185974, 0.3289143145084381, 0.321180522441864, 0.3082222044467926, 0.3142070770263672, 0.31262820959091187, 0.30145516991615295], "accuracy": [0.275260865688324, 0.4839519262313843, 0.5514463186264038, 0.6107515692710876, 0.6618676781654358, 0.6889446377754211, 0.7149649858474731, 0.7290979027748108, 0.7412495017051697, 0.7477215528488159, 0.7637035846710205, 0.7744023203849792, 0.7738739848136902, 0.7891955971717834, 0.7895918488502502, 0.7991018295288086, 0.8012151718139648, 0.8090080618858337, 0.8178576231002808, 0.821820080280304, 0.8157442808151245, 0.8284242749214172, 0.829216718673706, 0.8278959393501282, 0.8342359066009521, 0.8378021121025085, 0.8330471515655518, 0.8466516733169556, 0.8494254350662231, 0.8492933511734009, 0.8477083444595337, 0.8498216867446899, 0.8525954484939575, 0.857218325138092, 0.8574824929237366, 0.8607845902442932, 0.8610487580299377, 0.8679170608520508, 0.8714832663536072, 0.8638224601745605, 0.873860776424408, 0.8709549307823181, 0.8710870146751404, 0.8790120482444763, 0.8811253309249878, 0.8771628737449646, 0.8787478804588318, 0.8828424215316772, 0.8891823887825012, 0.8885219693183899, 0.889050304889679, 0.8914278149604797], "val_loss": [2.042558193206787, 1.5261443853378296, 1.0402663946151733, 0.8248271346092224, 0.736682116985321, 0.6856681108474731, 0.630856454372406, 0.598153829574585, 0.5744801759719849, 0.5526587963104248, 0.5285207629203796, 0.5181156992912292, 0.5017104148864746, 0.49153435230255127, 0.48076191544532776, 0.4649498164653778, 0.45893189311027527, 0.44923800230026245, 0.4420507550239563, 0.43643489480018616, 0.4289519190788269, 0.4197063744068146, 0.41264986991882324, 0.4259133040904999, 0.4058433771133423, 0.4043295085430145, 0.3929573595523834, 0.39203089475631714, 0.3935169577598572, 0.3845237195491791, 0.38564860820770264, 0.38002195954322815, 0.37472012639045715, 0.37609320878982544, 0.37455037236213684, 0.36657071113586426, 0.3637740910053253, 0.36373937129974365, 0.3667456805706024, 0.36090803146362305, 0.3588749170303345, 0.35685160756111145, 0.3568505048751831, 0.35314202308654785, 0.35260334610939026, 0.35083016753196716, 0.3491746783256531, 0.3468281924724579, 0.3464011251926422, 0.34657803177833557, 0.34585586190223694, 0.3444811999797821], "val_accuracy": [0.5366666913032532, 0.6583333611488342, 0.6933333277702332, 0.7196666598320007, 0.7456666827201843, 0.7536666393280029, 0.7736666798591614, 0.7760000228881836, 0.7900000214576721, 0.7976666688919067, 0.8050000071525574, 0.8133333325386047, 0.8163333535194397, 0.8220000267028809, 0.8289999961853027, 0.831333339214325, 0.8303333520889282, 0.840666651725769, 0.8376666903495789, 0.8410000205039978, 0.8389999866485596, 0.8460000157356262, 0.8479999899864197, 0.8456666469573975, 0.8476666808128357, 0.8479999899864197, 0.8529999852180481, 0.8533333539962769, 0.8529999852180481, 0.859000027179718, 0.8566666841506958, 0.8583333492279053, 0.8616666793823242, 0.8586666584014893, 0.862666666507721, 0.8663333058357239, 0.8640000224113464, 0.8616666793823242, 0.8643333315849304, 0.8666666746139526, 0.8636666536331177, 0.8666666746139526, 0.8676666617393494, 0.8666666746139526, 0.8690000176429749, 0.871666669845581, 0.8733333349227905, 0.8683333396911621, 0.871666669845581, 0.871666669845581, 0.8730000257492065, 0.8700000047683716]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8674286007881165, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224142551422119, 1.8646489381790161, 1.3938685655593872, 1.093049168586731, 0.9299538731575012, 0.8355500102043152, 0.7707101106643677, 0.7231999039649963, 0.6916130781173706, 0.6570782661437988, 0.6347236633300781, 0.6045324802398682, 0.587893545627594, 0.5734102725982666, 0.5551390051841736, 0.5385986566543579, 0.5255321264266968, 0.5105446577072144, 0.500185489654541, 0.49700266122817993, 0.4813525974750519, 0.4681493639945984, 0.45938146114349365, 0.45273423194885254, 0.4454924464225769, 0.4350166320800781, 0.43762466311454773, 0.42852601408958435, 0.41512492299079895, 0.4133552014827728, 0.4050344228744507, 0.4080492854118347, 0.39125680923461914, 0.3886834979057312, 0.38618671894073486, 0.375266432762146, 0.3650543987751007, 0.36342930793762207, 0.3605555295944214, 0.3590993583202362, 0.3521365821361542, 0.3431869447231293, 0.33803606033325195, 0.337761789560318, 0.33101195096969604, 0.3312353193759918, 0.33057788014411926, 0.323822945356369, 0.3158845007419586, 0.30938464403152466, 0.30168941617012024, 0.300889790058136, 0.2981948256492615, 0.29343804717063904, 0.2919932007789612, 0.2894144058227539, 0.2844434082508087, 0.2719734311103821, 0.2749435305595398], "accuracy": [0.26495838165283203, 0.4934619069099426, 0.5588429570198059, 0.6230352520942688, 0.6750759482383728, 0.7017567157745361, 0.7211728692054749, 0.7345132827758789, 0.7528728246688843, 0.7606657147407532, 0.7738739848136902, 0.7791573405265808, 0.7864218950271606, 0.7951393723487854, 0.7985734939575195, 0.806630551815033, 0.8148196935653687, 0.819970965385437, 0.8165367841720581, 0.8234050869941711, 0.8296129703521729, 0.8341038227081299, 0.8363492488861084, 0.8396512866020203, 0.8438779711723328, 0.848368763923645, 0.8459912538528442, 0.8500858545303345, 0.8557654023170471, 0.8524633646011353, 0.8576145768165588, 0.8573504090309143, 0.8621054291725159, 0.856689989566803, 0.8640866279602051, 0.869502067565918, 0.8693699836730957, 0.867520809173584, 0.8761062026023865, 0.8766345381736755, 0.8720116019248962, 0.8768987059593201, 0.8841632604598999, 0.8779553771018982, 0.8845595121383667, 0.8799365758895874, 0.8833707571029663, 0.8879936337471008, 0.8857482671737671, 0.8914278149604797, 0.897899866104126, 0.8944657444953918, 0.8969752788543701, 0.8967111110687256, 0.8953903317451477, 0.8953903317451477, 0.8992207050323486, 0.9034473896026611, 0.9021265506744385], "val_loss": [2.0415308475494385, 1.5219640731811523, 1.0622869729995728, 0.8579366207122803, 0.7721553444862366, 0.7095083594322205, 0.6632564067840576, 0.6277416944503784, 0.5965819358825684, 0.5792286396026611, 0.5537582039833069, 0.5345730781555176, 0.5254095196723938, 0.5051658749580383, 0.49763575196266174, 0.4847473204135895, 0.4743907153606415, 0.46722468733787537, 0.4582975208759308, 0.4502437710762024, 0.44252660870552063, 0.4367300271987915, 0.4289085566997528, 0.42397940158843994, 0.42108798027038574, 0.4144131541252136, 0.41366758942604065, 0.40824422240257263, 0.40203893184661865, 0.40372413396835327, 0.39605167508125305, 0.39178967475891113, 0.40770915150642395, 0.3881063163280487, 0.3905644118785858, 0.3827534317970276, 0.39202070236206055, 0.38010308146476746, 0.3753494322299957, 0.37638989090919495, 0.37080541253089905, 0.3728943169116974, 0.37132760882377625, 0.36398497223854065, 0.3697875142097473, 0.3666398823261261, 0.37174728512763977, 0.36636051535606384, 0.36076819896698, 0.36177244782447815, 0.36032864451408386, 0.3570212423801422, 0.35790228843688965, 0.3548631966114044, 0.35470038652420044, 0.35391461849212646, 0.3615868389606476, 0.3562118709087372, 0.3510093688964844], "val_accuracy": [0.5216666460037231, 0.6480000019073486, 0.6683333516120911, 0.6956666707992554, 0.7226666808128357, 0.7423333525657654, 0.7516666650772095, 0.7603333592414856, 0.7806666493415833, 0.7850000262260437, 0.7926666736602783, 0.8076666593551636, 0.8073333501815796, 0.8186666369438171, 0.8213333487510681, 0.8230000138282776, 0.8360000252723694, 0.8316666483879089, 0.8330000042915344, 0.8423333168029785, 0.846666693687439, 0.8476666808128357, 0.8489999771118164, 0.8519999980926514, 0.8519999980926514, 0.8546666502952576, 0.8539999723434448, 0.856333315372467, 0.8613333106040955, 0.8583333492279053, 0.8583333492279053, 0.8636666536331177, 0.8576666712760925, 0.8643333315849304, 0.8579999804496765, 0.8640000224113464, 0.8669999837875366, 0.8696666955947876, 0.8709999918937683, 0.8679999709129333, 0.871999979019165, 0.8696666955947876, 0.8696666955947876, 0.875333309173584, 0.8726666569709778, 0.8703333139419556, 0.8663333058357239, 0.874666690826416, 0.8786666393280029, 0.8773333430290222, 0.8759999871253967, 0.878000020980835, 0.875, 0.8816666603088379, 0.8793333172798157, 0.8799999952316284, 0.8736666440963745, 0.8793333172798157, 0.8809999823570251]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [42, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [97, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 5, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.14228571951389313, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 11, 6, 5, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.square(sigma)), grad))", "other_info": {"loss": [10162879332352.0, 11827480100864.0, 11892801142784.0, 11798017212416.0, 11974850117632.0, 11745150107648.0], "accuracy": [0.10593052208423615, 0.1072513535618782, 0.10342095047235489, 0.10368511080741882, 0.10302469879388809, 0.10777968913316727], "val_loss": [7132894199808.0, 7133280600064.0, 7133266444288.0, 7133243375616.0, 7133231316992.0, 7132580675584.0], "val_accuracy": [0.15133333206176758, 0.15133333206176758, 0.1509999930858612, 0.1509999930858612, 0.1509999930858612, 0.15133333206176758]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 0, 5], [0, 3, 1, 0], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 0], [0, 0, 0, 3, 0, 1, 3, 1, 4, 0], [16, 99, 96, 99, 0, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 8, 5, 3, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.negative(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(alpha, tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10533333569765091, 0.10533333569765091, 0.10533333569765091, 0.10533333569765091, 0.10533333569765091, 0.10533333569765091]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 2, 3, 0, 3, 8, 8], [0, 1, 0, 2], [38, 39], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 4, 3, 5], [2, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 1, 1, 4, 2, 8, 3, 2, 3], [0, 3, 0, 3, 0, 0, 3, 1, 2, 0, 3, 1, 6], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 7, 4, 2, 1, 0, 1, 0, 2, 1, 1, 1, 27, 14, 13, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(grad))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma)), tf.math.sqrt(tf.math.multiply(alpha, beta)))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.multiply(alpha, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [2, 9, 3, 9, 3, 4], [3, 3, 0, 2], [16, 16], [0, 1, 1], [2], [0, 1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 2, 4, 1, 4, 2, 9, 0], [1, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.0974285677075386, "mapping_values": [1, 9, 5, 4, 1, 5, 4, 1, 2, 3, 1, 2, 1, 21, 12, 9, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.negative(alpha)), beta)", "other_info": {"loss": [2.3082034587860107, 2.307011127471924, 2.3052074909210205, 2.3050458431243896, 2.3031833171844482, 2.3027515411376953, 2.3040566444396973, 2.303921937942505, 2.304202079772949], "accuracy": [0.09708096832036972, 0.09932637959718704, 0.09668471664190292, 0.09826971590518951, 0.09972262382507324, 0.10434553027153015, 0.09417514503002167, 0.09826971590518951, 0.09681680053472519], "val_loss": [2.3051085472106934, 2.3035194873809814, 2.302607536315918, 2.3020966053009033, 2.3018078804016113, 2.3015806674957275, 2.301501512527466, 2.30142879486084, 2.3013017177581787], "val_accuracy": [0.09399999678134918, 0.09433333575725555, 0.09833333641290665, 0.10000000149011612, 0.09833333641290665, 0.0976666659116745, 0.09799999743700027, 0.09966666996479034, 0.10000000149011612]}}]