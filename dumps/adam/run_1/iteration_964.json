[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8619999885559082, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2214674949645996, 1.8612313270568848, 1.3777745962142944, 1.0910227298736572, 0.9473555088043213, 0.8351375460624695, 0.7795439958572388, 0.7191373705863953, 0.6869302988052368, 0.6594687104225159, 0.6340177059173584, 0.6128942966461182, 0.6000717878341675, 0.574134886264801, 0.5567976832389832, 0.551048755645752, 0.536932110786438, 0.5201165676116943, 0.4994092881679535, 0.4946386218070984, 0.48053988814353943, 0.4769185483455658, 0.46525341272354126, 0.45742738246917725, 0.44702082872390747, 0.4424206614494324, 0.4391426742076874, 0.41868147253990173, 0.4276224672794342, 0.40879255533218384, 0.40962499380111694, 0.39966994524002075, 0.3917526304721832, 0.39082881808280945, 0.38159796595573425, 0.3906378746032715, 0.3781853914260864, 0.3678363263607025, 0.3631494343280792, 0.3583694398403168, 0.351413756608963, 0.3565412759780884, 0.3397215008735657, 0.3382032513618469, 0.33792415261268616, 0.3323797881603241, 0.32573631405830383, 0.32846564054489136, 0.3160432279109955, 0.30889180302619934, 0.30857053399086, 0.30058956146240234, 0.3022362291812897, 0.29529738426208496, 0.2969348132610321, 0.28423771262168884, 0.2883515954017639, 0.27749261260032654, 0.27674102783203125, 0.28166463971138, 0.26585811376571655, 0.2610599100589752, 0.26535704731941223, 0.2662808895111084, 0.2482738494873047, 0.24184641242027283, 0.24976713955402374, 0.24462875723838806, 0.24232900142669678, 0.24385711550712585, 0.23159094154834747, 0.23043787479400635, 0.22678092122077942, 0.22692936658859253, 0.22042910754680634, 0.22059160470962524], "accuracy": [0.27222296595573425, 0.4876502454280853, 0.5694096088409424, 0.6126006841659546, 0.6679434776306152, 0.7008321285247803, 0.7195879220962524, 0.7412495017051697, 0.7494386434555054, 0.754589855670929, 0.7716285586357117, 0.7751948237419128, 0.7808743715286255, 0.7918372750282288, 0.7973847389221191, 0.8013472557067871, 0.8059701323509216, 0.811649739742279, 0.8231409192085266, 0.8230088353157043, 0.8304054737091064, 0.8304054737091064, 0.8381983637809753, 0.8370096683502197, 0.8412362933158875, 0.8404437899589539, 0.841500461101532, 0.8512746095657349, 0.8525954484939575, 0.8577466607093811, 0.854708731174469, 0.8609166741371155, 0.8621054291725159, 0.8574824929237366, 0.8627657890319824, 0.8609166741371155, 0.8651432991027832, 0.8696341514587402, 0.8755778670310974, 0.874389111995697, 0.8751816153526306, 0.8792761564254761, 0.8798044919967651, 0.8828424215316772, 0.8835028409957886, 0.8816536664962769, 0.886672854423523, 0.8860124349594116, 0.8893144726753235, 0.8899748921394348, 0.8945978283882141, 0.8919561505317688, 0.8912957310676575, 0.895918607711792, 0.8944657444953918, 0.8985602855682373, 0.8949940800666809, 0.9026548862457275, 0.9052965044975281, 0.8989565372467041, 0.9058248400688171, 0.9050323367118835, 0.9062210917472839, 0.9091269373893738, 0.9101836085319519, 0.9163914918899536, 0.91124027967453, 0.9144102334976196, 0.9128252267837524, 0.9134856462478638, 0.9204860925674438, 0.9190331697463989, 0.9163914918899536, 0.9165235757827759, 0.9233918786048889, 0.9216747879981995], "val_loss": [2.034987688064575, 1.5070390701293945, 1.0383318662643433, 0.835761308670044, 0.7496795058250427, 0.6848607659339905, 0.6366238594055176, 0.5982853174209595, 0.5715577602386475, 0.5550366044044495, 0.5379159450531006, 0.5224484801292419, 0.5085893273353577, 0.4954513609409332, 0.48413094878196716, 0.4772189259529114, 0.4651621878147125, 0.4585517644882202, 0.4467437267303467, 0.44423526525497437, 0.43726643919944763, 0.4272599220275879, 0.4286888837814331, 0.42413395643234253, 0.4152557849884033, 0.41249793767929077, 0.4121742248535156, 0.4023326337337494, 0.40209683775901794, 0.39729273319244385, 0.3923886716365814, 0.3897111713886261, 0.3862045407295227, 0.3879772424697876, 0.3859834671020508, 0.3833964169025421, 0.3797251284122467, 0.37667691707611084, 0.3772459328174591, 0.3710690438747406, 0.3686472177505493, 0.36861860752105713, 0.36562642455101013, 0.3649296164512634, 0.3643720746040344, 0.36061957478523254, 0.3587508201599121, 0.36242008209228516, 0.3565274775028229, 0.35235103964805603, 0.35525912046432495, 0.35090288519859314, 0.34764447808265686, 0.3542276918888092, 0.3464348614215851, 0.346843421459198, 0.34742188453674316, 0.34483602643013, 0.341086745262146, 0.33988815546035767, 0.34231141209602356, 0.3403695821762085, 0.347208172082901, 0.336070716381073, 0.33610403537750244, 0.3404606580734253, 0.3363383710384369, 0.3322322964668274, 0.33530256152153015, 0.33042678236961365, 0.3335259258747101, 0.329667329788208, 0.3336253762245178, 0.3322295546531677, 0.33203205466270447, 0.3344862759113312], "val_accuracy": [0.559333324432373, 0.6556666493415833, 0.6840000152587891, 0.7070000171661377, 0.7273333072662354, 0.7519999742507935, 0.765666663646698, 0.781000018119812, 0.7846666574478149, 0.793666660785675, 0.8009999990463257, 0.7963333129882812, 0.8180000185966492, 0.8166666626930237, 0.8223333358764648, 0.8270000219345093, 0.8270000219345093, 0.8320000171661377, 0.8339999914169312, 0.8386666774749756, 0.8343333601951599, 0.8453333377838135, 0.8423333168029785, 0.8423333168029785, 0.8483333587646484, 0.8433333039283752, 0.847000002861023, 0.8519999980926514, 0.8503333330154419, 0.8486666679382324, 0.8513333201408386, 0.8536666631698608, 0.8546666502952576, 0.8516666889190674, 0.8513333201408386, 0.8536666631698608, 0.859000027179718, 0.8606666922569275, 0.8600000143051147, 0.859666645526886, 0.8643333315849304, 0.862666666507721, 0.8663333058357239, 0.8610000014305115, 0.8669999837875366, 0.8663333058357239, 0.8673333525657654, 0.862333357334137, 0.8723333477973938, 0.8700000047683716, 0.8696666955947876, 0.8730000257492065, 0.8730000257492065, 0.8696666955947876, 0.871666669845581, 0.8759999871253967, 0.875, 0.8763333559036255, 0.8726666569709778, 0.8786666393280029, 0.8736666440963745, 0.8790000081062317, 0.8743333220481873, 0.8796666860580444, 0.8799999952316284, 0.878333330154419, 0.8776666522026062, 0.8790000081062317, 0.8816666603088379, 0.8806666731834412, 0.8843333125114441, 0.8803333044052124, 0.8820000290870667, 0.8836666941642761, 0.8806666731834412, 0.8809999823570251]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 1], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 6, 3, 9, 3, 5], [0, 2, 2, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [2, 3, 3, 6, 8, 1, 4, 8, 9, 2, 8], [0, 0, 0, 3, 1, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 2, 2, 1, 1, 1, 15, 9, 6, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.sqrt(alpha))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3041036128997803, 2.3025851249694824, 2.3025851249694824, 2.3025853633880615, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09325055778026581, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025848865509033, 2.3025853633880615, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 3, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 9, 0, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 2, 1, 4, 2, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 81, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 2, 2, 0, 1, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [2.3044004440307617, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 1], [8, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [8, 2, 3, 0, 6, 5, 2, 1, 5, 7, 4, 6, 8, 1, 2, 5, 3, 2, 3], [0, 2, 0, 3, 3, 3, 1, 3, 0, 3, 4, 2, 4, 4], [16, 16, 60], [0, 1, 1], [4], [0, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 73, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 33, 19, 14, 3, 3, 1, 2, 1, 20, 10, 10, 6], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.math.subtract(beta, tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.pow(grad, grad)))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(grad, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), grad))), grad)), beta))), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [9, 2, 3, 3, 3], [0, 1, 1, 2], [86, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [2], [0, 1], [99], [1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 4, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3036789894104004, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}, "mapping_values": [1, 1, 1, 0, 1, 10, 6, 4, 2, 3, 1, 2, 1, 1, 0, 1, 1], "tree_depth": 12}]