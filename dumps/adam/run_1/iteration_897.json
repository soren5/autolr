[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8640000224113464, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222667694091797, 1.8700112104415894, 1.393401861190796, 1.089206337928772, 0.9418482780456543, 0.8436051607131958, 0.775455117225647, 0.7222005128860474, 0.6900776624679565, 0.6611419916152954, 0.6411089897155762, 0.6164843440055847, 0.5945928692817688, 0.5790678858757019, 0.5608278512954712, 0.5473123788833618, 0.5389232039451599, 0.5181093811988831, 0.5086302757263184, 0.5063082575798035, 0.48847129940986633, 0.4808039963245392, 0.46835261583328247, 0.46871182322502136, 0.456408828496933, 0.4510936737060547, 0.4441714882850647, 0.4349520802497864, 0.42790186405181885, 0.42105570435523987, 0.40704214572906494, 0.4064740538597107, 0.39191871881484985, 0.38977593183517456, 0.3927602469921112, 0.37888264656066895, 0.3724534511566162, 0.3749413788318634, 0.36066144704818726, 0.3557596504688263, 0.35270076990127563, 0.3518030643463135, 0.3510299026966095, 0.3432692885398865, 0.34126147627830505, 0.3349083662033081, 0.32828330993652344, 0.3242433965206146, 0.3255530297756195, 0.3126426637172699, 0.3175400495529175, 0.30115556716918945, 0.30988433957099915, 0.30131131410598755, 0.29800185561180115, 0.29415827989578247, 0.28429341316223145, 0.27975112199783325, 0.276057630777359, 0.2763424217700958, 0.27193495631217957, 0.2622346580028534, 0.26555269956588745, 0.26048657298088074, 0.2558644413948059, 0.25684088468551636, 0.24994894862174988, 0.24687454104423523, 0.2462628185749054, 0.24769259989261627, 0.23325136303901672, 0.22859181463718414, 0.22640152275562286], "accuracy": [0.28305375576019287, 0.4912164807319641, 0.5628054141998291, 0.6229031682014465, 0.6650376319885254, 0.6952846646308899, 0.7177387475967407, 0.7343811988830566, 0.7474573850631714, 0.7560427784919739, 0.7623828053474426, 0.7716285586357117, 0.778232753276825, 0.7861577272415161, 0.7969884872436523, 0.7973847389221191, 0.802271842956543, 0.8112534880638123, 0.8202351331710815, 0.8140271902084351, 0.826310932636261, 0.8264430165290833, 0.8323867321014404, 0.8333113193511963, 0.8376700282096863, 0.8376700282096863, 0.8471800088882446, 0.8425571322441101, 0.8467837572097778, 0.8482366800308228, 0.8508783578872681, 0.8541803956031799, 0.8584070801734924, 0.8615770936012268, 0.8597279191017151, 0.8640866279602051, 0.8667283058166504, 0.8634262084960938, 0.869502067565918, 0.8713511824607849, 0.8730682730674744, 0.8745211958885193, 0.8745211958885193, 0.876370370388031, 0.8771628737449646, 0.8784837126731873, 0.8800686597824097, 0.8835028409957886, 0.8823140859603882, 0.8886540532112122, 0.885219931602478, 0.8922203183174133, 0.8889182209968567, 0.8918240666389465, 0.8918240666389465, 0.8928807377815247, 0.8988244533538818, 0.8961827754974365, 0.9009377956390381, 0.8969752788543701, 0.897899866104126, 0.906749427318573, 0.9033153057098389, 0.9026548862457275, 0.9059569239616394, 0.9055606722831726, 0.9076740145683289, 0.9095231890678406, 0.9117686152458191, 0.9097873568534851, 0.9141460657119751, 0.9158631563186646, 0.9152027368545532], "val_loss": [2.0373024940490723, 1.5063567161560059, 1.0312575101852417, 0.8169848918914795, 0.7373465895652771, 0.679472029209137, 0.6358947157859802, 0.6002905964851379, 0.5787114500999451, 0.5637984871864319, 0.5467649102210999, 0.5270196795463562, 0.5138491988182068, 0.5047725439071655, 0.4970727562904358, 0.48224934935569763, 0.47567257285118103, 0.4653688669204712, 0.4594970643520355, 0.4490209221839905, 0.4436729848384857, 0.4388735890388489, 0.4328043758869171, 0.4271993935108185, 0.4206659197807312, 0.4205203354358673, 0.41490742564201355, 0.41847655177116394, 0.4073282480239868, 0.4063590466976166, 0.40004828572273254, 0.3974672853946686, 0.39231905341148376, 0.3932202160358429, 0.39386865496635437, 0.3872968256473541, 0.38570713996887207, 0.38617202639579773, 0.3788655698299408, 0.3784658908843994, 0.3728677034378052, 0.37349963188171387, 0.3730616569519043, 0.3777841329574585, 0.36946403980255127, 0.36892253160476685, 0.36668863892555237, 0.36357739567756653, 0.36058926582336426, 0.36158040165901184, 0.359534353017807, 0.3607742488384247, 0.3565976619720459, 0.35527798533439636, 0.3564293682575226, 0.3575053811073303, 0.3585754334926605, 0.3546479344367981, 0.3569735586643219, 0.35187193751335144, 0.35548990964889526, 0.35438093543052673, 0.3518328070640564, 0.35296621918678284, 0.35443025827407837, 0.3475206196308136, 0.3555105924606323, 0.34964120388031006, 0.34779927134513855, 0.3453640043735504, 0.35695430636405945, 0.35195091366767883, 0.3567552864551544], "val_accuracy": [0.550000011920929, 0.6723333597183228, 0.6909999847412109, 0.7226666808128357, 0.737333357334137, 0.7563333511352539, 0.7706666588783264, 0.7799999713897705, 0.7946666479110718, 0.7860000133514404, 0.8019999861717224, 0.8159999847412109, 0.8206666707992554, 0.8216666579246521, 0.8186666369438171, 0.8349999785423279, 0.8396666646003723, 0.8346666693687439, 0.8370000123977661, 0.8420000076293945, 0.8453333377838135, 0.8483333587646484, 0.8506666421890259, 0.8513333201408386, 0.8539999723434448, 0.8506666421890259, 0.8536666631698608, 0.8546666502952576, 0.8579999804496765, 0.8579999804496765, 0.8613333106040955, 0.8606666922569275, 0.862666666507721, 0.8600000143051147, 0.8603333234786987, 0.8616666793823242, 0.8663333058357239, 0.8656666874885559, 0.8683333396911621, 0.8693333268165588, 0.8659999966621399, 0.8669999837875366, 0.8696666955947876, 0.862666666507721, 0.8740000128746033, 0.8700000047683716, 0.8723333477973938, 0.8733333349227905, 0.875333309173584, 0.8709999918937683, 0.8736666440963745, 0.874666690826416, 0.8766666650772095, 0.875, 0.8756666779518127, 0.874666690826416, 0.8769999742507935, 0.8769999742507935, 0.875, 0.8773333430290222, 0.8799999952316284, 0.8756666779518127, 0.8790000081062317, 0.8813333511352539, 0.8763333559036255, 0.8793333172798157, 0.878000020980835, 0.8820000290870667, 0.8799999952316284, 0.8796666860580444, 0.8769999742507935, 0.878333330154419, 0.8786666393280029]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 3, 1, 3, 5, 6, 4, 2, 8, 7], [0, 2, 0, 3, 5, 3, 0, 5, 3, 1], [76, 16, 67], [0, 1], [0], [4], [99], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 0, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 2, 2, 3, 1, 2, 0], [16, 99, 61, 48, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 21, 11, 10, 3, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.multiply(grad, tf.math.square(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(tf.math.sqrt(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303732395172119, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 0], [0], [3], [81], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 9, 1, 4, 2, 8], [0, 0, 0, 0, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3038439750671387, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 9, 5, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 7, 1, 3, 4, 4, 0, 9, 2, 6, 6, 4, 2, 8, 2, 0, 7, 3], [0, 2, 0, 3, 3, 0, 0, 1, 0, 4, 0, 4, 0, 5, 5, 2], [34, 16, 12, 94, 27, 27, 88, 85], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 7, 8], [0, 0, 3, 3, 0, 0, 4, 4, 2, 0, 7], [36, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 4, 1, 2, 39, 23, 16, 8, 2, 1, 1, 1, 25, 14, 11, 5], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(grad, tf.math.pow(tf.math.pow(tf.math.negative(grad), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(grad, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), grad), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(grad, tf.math.multiply(grad, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(sigma, tf.math.sqrt(sigma)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(grad, grad))), tf.math.sqrt(beta)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 8, 7, 2, 7, 0, 2, 6, 0, 0, 3, 3, 9, 2, 6, 8, 5], [0, 1, 0, 2, 1, 1, 2, 1, 0, 2, 2, 0], [39, 39, 90, 27, 92], [0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [6, 2, 9, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 31, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 21, 12, 5, 5, 2, 3, 2, 2, 1, 1, 1, 15, 8, 7, 5], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(tf.math.add(tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.negative(alpha)), alpha), grad)), tf.math.multiply(alpha, tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad)))), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.square(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10315678268671036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]