[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8791428804397583, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2244434356689453, 1.874804973602295, 1.4183017015457153, 1.1064125299453735, 0.9601947665214539, 0.854535698890686, 0.7961772084236145, 0.7430362105369568, 0.704584002494812, 0.6798930168151855, 0.6543895602226257, 0.6267498135566711, 0.6119507551193237, 0.5977559685707092, 0.5816807150840759, 0.5701302289962769, 0.5611100196838379, 0.5412863492965698, 0.5402887463569641, 0.5127306580543518, 0.5106024742126465, 0.49942952394485474, 0.490215927362442, 0.48334801197052, 0.47216564416885376, 0.46629634499549866, 0.4547388255596161, 0.45079556107521057, 0.44876641035079956, 0.4277741312980652, 0.430885374546051, 0.41987118124961853, 0.4160553812980652, 0.41807591915130615, 0.40591728687286377, 0.40409570932388306, 0.3890058994293213, 0.3896346688270569, 0.38452616333961487, 0.38052573800086975, 0.3760859966278076, 0.36763083934783936, 0.36944034695625305, 0.3535328507423401, 0.3529854118824005, 0.35181042551994324, 0.33782726526260376, 0.34251996874809265, 0.33733710646629333, 0.32895931601524353, 0.3229379951953888, 0.31909146904945374, 0.321973592042923, 0.3098003566265106, 0.31427615880966187, 0.3041946291923523, 0.3102721869945526, 0.2991284132003784, 0.29397907853126526, 0.28884825110435486, 0.2852889597415924], "accuracy": [0.275260865688324, 0.48448026180267334, 0.54655921459198, 0.6132611036300659, 0.659490168094635, 0.6921146512031555, 0.7141724824905396, 0.7345132827758789, 0.7405890822410583, 0.7510236501693726, 0.7611940503120422, 0.7703077793121338, 0.7781006693840027, 0.7874785661697388, 0.7876105904579163, 0.7955356240272522, 0.7948752045631409, 0.800290584564209, 0.8031964302062988, 0.8162726163864136, 0.8144234418869019, 0.8195747137069702, 0.824329674243927, 0.8230088353157043, 0.8273676037788391, 0.8309338092803955, 0.8352925777435303, 0.8401796221733093, 0.8359529972076416, 0.8457271456718445, 0.8444063067436218, 0.8474441766738892, 0.8486329317092896, 0.8477083444595337, 0.8533879518508911, 0.8533879518508911, 0.8603883385658264, 0.8573504090309143, 0.8593316674232483, 0.8626337051391602, 0.8648791313171387, 0.8639545440673828, 0.8642187118530273, 0.8739928603172302, 0.8735966086387634, 0.8728041052818298, 0.8791441321372986, 0.8750495314598083, 0.8802007436752319, 0.8791441321372986, 0.8828424215316772, 0.8840311765670776, 0.8815215826034546, 0.8842953443527222, 0.8835028409957886, 0.8878615498542786, 0.8906353116035461, 0.893541157245636, 0.8906353116035461, 0.894069492816925, 0.8932769894599915], "val_loss": [2.044001340866089, 1.5215731859207153, 1.0477017164230347, 0.8334813117980957, 0.7448477149009705, 0.688205897808075, 0.6460540294647217, 0.6127543449401855, 0.5857285261154175, 0.5662136673927307, 0.5476739406585693, 0.5329171419143677, 0.5193807482719421, 0.5090603232383728, 0.500372052192688, 0.49276646971702576, 0.4794856905937195, 0.4766573905944824, 0.4637523591518402, 0.45313483476638794, 0.4516633152961731, 0.4481629729270935, 0.43786677718162537, 0.433622270822525, 0.4241030812263489, 0.41964322328567505, 0.4125010669231415, 0.41137954592704773, 0.4126378893852234, 0.39949557185173035, 0.404074490070343, 0.3974047303199768, 0.3913394510746002, 0.3931531310081482, 0.3840675950050354, 0.3895483911037445, 0.37637051939964294, 0.38325196504592896, 0.3776482343673706, 0.3742385804653168, 0.36939525604248047, 0.3688122034072876, 0.36591610312461853, 0.3713824450969696, 0.36059194803237915, 0.35984253883361816, 0.36336493492126465, 0.3551567792892456, 0.35520732402801514, 0.3561275899410248, 0.3529878854751587, 0.3530394732952118, 0.3586887717247009, 0.36029040813446045, 0.3507247865200043, 0.3485415577888489, 0.3409668505191803, 0.3498675227165222, 0.34741732478141785, 0.34128448367118835, 0.34067654609680176], "val_accuracy": [0.5090000033378601, 0.6610000133514404, 0.6763333082199097, 0.7086666822433472, 0.7356666922569275, 0.753333330154419, 0.7536666393280029, 0.7746666669845581, 0.7820000052452087, 0.7879999876022339, 0.7956666946411133, 0.7976666688919067, 0.8056666851043701, 0.8109999895095825, 0.8103333115577698, 0.8216666579246521, 0.8246666789054871, 0.8326666951179504, 0.8320000171661377, 0.8379999995231628, 0.8336666822433472, 0.8349999785423279, 0.8416666388511658, 0.8446666598320007, 0.8473333120346069, 0.8500000238418579, 0.8523333072662354, 0.8546666502952576, 0.847000002861023, 0.8546666502952576, 0.8516666889190674, 0.8556666374206543, 0.859333336353302, 0.862333357334137, 0.8636666536331177, 0.8613333106040955, 0.8659999966621399, 0.8603333234786987, 0.8646666407585144, 0.8653333187103271, 0.8683333396911621, 0.8663333058357239, 0.8713333606719971, 0.8683333396911621, 0.871999979019165, 0.8723333477973938, 0.8709999918937683, 0.8730000257492065, 0.8706666827201843, 0.875, 0.8759999871253967, 0.8743333220481873, 0.8733333349227905, 0.8666666746139526, 0.8756666779518127, 0.8799999952316284, 0.8799999952316284, 0.8769999742507935, 0.8790000081062317, 0.878000020980835, 0.8796666860580444]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [2, 0, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 4, 5], [0, 2, 0, 3], [16, 16], [0, 1], [5], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 2, 4, 1, 4, 2, 8, 5, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 98, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 7, 4, 3, 2, 2, 1, 1, 1, 23, 13, 10, 6], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(sigma))))), alpha)), beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 0, 1], [2, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 2, 3, 0, 3, 5, 0], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [42], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 6, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 67, 96, 99, 13, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 1, 11, 7, 4, 2, 2, 1, 1, 0, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.negative(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 2, 5, 0, 3], [0, 1, 0, 2], [39, 13], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 3, 0, 4, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 1], [0, 0, 0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 5, 1, 4, 2, 8], [0, 0, 0, 3, 1, 0, 3, 1, 2, 0], [16, 99, 96, 29, 61, 1]], "fitness": -0.08828571438789368, "mapping_values": [1, 2, 1, 1, 1, 7, 4, 3, 2, 4, 3, 1, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.subtract(alpha, tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [2.311383008956909, 2.3112974166870117, 2.3103749752044678, 2.3098819255828857, 2.308851718902588, 2.310394525527954], "accuracy": [0.08730682730674744, 0.08466517180204391, 0.08942015469074249, 0.09219389408826828, 0.08915598690509796, 0.08558975160121918], "val_loss": [2.3084754943847656, 2.3083930015563965, 2.308345079421997, 2.3083083629608154, 2.3082807064056396, 2.308258056640625], "val_accuracy": [0.08833333104848862, 0.08666666597127914, 0.0860000029206276, 0.08500000089406967, 0.08500000089406967, 0.0846666693687439]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 3, 3, 5], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 6, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 2, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.087714284658432, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), beta)))), alpha), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30928897857666, 2.3093667030334473, 2.309610366821289, 2.3099122047424316, 2.3096954822540283, 2.3095736503601074], "accuracy": [0.09311848133802414, 0.09906221181154251, 0.09021265059709549, 0.09140139818191528, 0.09008057415485382, 0.09338264167308807], "val_loss": [2.309067964553833, 2.309067964553833, 2.309067964553833, 2.309067964553833, 2.309067964553833, 2.309067964553833], "val_accuracy": [0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763]}, "mapping_values": [1, 7, 4, 3, 2, 6, 3, 3, 2, 2, 1, 1, 1, 20, 10, 10, 6], "tree_depth": 18}]