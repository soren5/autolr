[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8648571372032166, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2225451469421387, 1.8678672313690186, 1.38908052444458, 1.0886825323104858, 0.9376338720321655, 0.8258191347122192, 0.7619175910949707, 0.7219796180725098, 0.6812044978141785, 0.655769407749176, 0.6227467060089111, 0.6077703237533569, 0.5859602093696594, 0.5718042850494385, 0.5534805655479431, 0.5354233384132385, 0.5293079614639282, 0.5108238458633423, 0.49869057536125183, 0.4887007474899292, 0.4758789539337158, 0.46939557790756226, 0.4643479287624359, 0.45120930671691895, 0.4536511301994324, 0.4263688623905182, 0.4257855713367462, 0.4170921742916107, 0.4235239624977112, 0.408168226480484, 0.3958534896373749, 0.3925601541996002, 0.3841920793056488, 0.3772777020931244, 0.37792766094207764, 0.3667735755443573, 0.3665103316307068, 0.36187610030174255, 0.3531104326248169, 0.34693238139152527, 0.34206607937812805, 0.338532954454422, 0.3313148319721222, 0.3386475443840027, 0.3265438377857208, 0.31259506940841675, 0.3150305449962616, 0.3158259987831116], "accuracy": [0.2763175368309021, 0.48368775844573975, 0.5624092221260071, 0.6210539937019348, 0.6642451286315918, 0.700171709060669, 0.7230220437049866, 0.7366266250610352, 0.750231146812439, 0.7609298825263977, 0.7681944370269775, 0.7763835787773132, 0.7889314293861389, 0.7915731072425842, 0.7971205711364746, 0.8099326491355896, 0.8076872229576111, 0.8195747137069702, 0.8208954930305481, 0.8236692547798157, 0.8281601071357727, 0.8330471515655518, 0.8304054737091064, 0.8363492488861084, 0.8362171649932861, 0.8495575189590454, 0.8457271456718445, 0.8511425256729126, 0.847840428352356, 0.8564258217811584, 0.8582749962806702, 0.8568220734596252, 0.8638224601745605, 0.8634262084960938, 0.8621054291725159, 0.869502067565918, 0.8698983192443848, 0.8684453964233398, 0.8709549307823181, 0.8761062026023865, 0.8771628737449646, 0.8787478804588318, 0.8811253309249878, 0.8799365758895874, 0.8815215826034546, 0.886672854423523, 0.8850878477096558, 0.8893144726753235], "val_loss": [2.0430428981781006, 1.5234886407852173, 1.0601080656051636, 0.8467169404029846, 0.7572622299194336, 0.695595383644104, 0.6500066518783569, 0.622639536857605, 0.5876925587654114, 0.5652158260345459, 0.5428422689437866, 0.5247901678085327, 0.5111806392669678, 0.5026065111160278, 0.4891848862171173, 0.47655850648880005, 0.471323162317276, 0.45866072177886963, 0.45072680711746216, 0.44413667917251587, 0.435370534658432, 0.4315720200538635, 0.43123868107795715, 0.41860705614089966, 0.41177624464035034, 0.40308088064193726, 0.4020823836326599, 0.4013745188713074, 0.39580050110816956, 0.39328864216804504, 0.38727620244026184, 0.385047972202301, 0.3789058029651642, 0.37620919942855835, 0.3717236816883087, 0.3729025423526764, 0.3709394931793213, 0.36985912919044495, 0.37172937393188477, 0.3605819642543793, 0.35927218198776245, 0.35550275444984436, 0.35105228424072266, 0.3536226451396942, 0.3514895439147949, 0.3510322570800781, 0.34945523738861084, 0.3545282483100891], "val_accuracy": [0.5083333253860474, 0.6613333225250244, 0.6823333501815796, 0.7106666564941406, 0.7296666502952576, 0.746666669845581, 0.762333333492279, 0.765999972820282, 0.7953333258628845, 0.7986666560173035, 0.8033333420753479, 0.812333345413208, 0.8233333230018616, 0.8196666836738586, 0.8289999961853027, 0.8316666483879089, 0.8349999785423279, 0.8410000205039978, 0.8416666388511658, 0.843666672706604, 0.8476666808128357, 0.8519999980926514, 0.8463333249092102, 0.8489999771118164, 0.8543333411216736, 0.8573333621025085, 0.8579999804496765, 0.8546666502952576, 0.8640000224113464, 0.8616666793823242, 0.8616666793823242, 0.8643333315849304, 0.8646666407585144, 0.8629999756813049, 0.8646666407585144, 0.8669999837875366, 0.8693333268165588, 0.8690000176429749, 0.8666666746139526, 0.8733333349227905, 0.8693333268165588, 0.8713333606719971, 0.8763333559036255, 0.871666669845581, 0.8740000128746033, 0.8736666440963745, 0.8743333220481873, 0.8696666955947876]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 5, 0, 3, 4, 9], [0, 2, 0, 3, 5], [16, 16, 4], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 9, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 16, 11, 5, 3, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.math.square(tf.math.negative(beta))), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.304312229156494, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [6, 2, 3, 0, 3, 2, 7], [1, 1, 0, 2, 2, 1, 0], [55, 55], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 1], [16, 16], [0, 1], [9], [1], [99], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 6, 6, 8, 1, 3, 1, 4, 2, 8], [0, 0, 0, 3, 1, 4, 3, 1, 2, 0], [16, 99, 96, 99, 33, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 7, 7, 2, 2, 1, 1, 1, 1, 1, 0, 1, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(alpha, alpha)), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(grad, tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(alpha, tf.math.pow(grad, sigma))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3036019802093506, 2.3025875091552734, 2.3025879859924316, 2.3025851249694824, 2.3025858402252197, 2.302588939666748], "accuracy": [0.09628847241401672, 0.09919429570436478, 0.09972262382507324, 0.10011887550354004, 0.09998679161071777, 0.09945846349000931], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [9, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [90], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 6, 4, 1, 4, 2, 8, 8, 6], [0, 0, 0, 3, 3, 0, 3, 1, 1, 0, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 2, 1, 1, 1, 2, 1, 1, 1, 24, 13, 11, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.sqrt(tf.math.sqrt(alpha)), alpha)), tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 3, 3, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 6, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 1, 6, 4, 1, 2, 2, 8, 8, 2, 9, 5, 1, 8, 8, 4], [0, 0, 0, 3, 0, 1, 3, 1, 4, 0, 0, 2, 1], [16, 99, 96, 99, 61, 1, 43]], "fitness": -0.09399999678134918, "mapping_values": [1, 5, 3, 2, 1, 10, 6, 4, 2, 2, 1, 1, 1, 32, 19, 13, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.math.add(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha), sigma), tf.math.sqrt(tf.math.sqrt(alpha)))), grad)), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), beta))))), alpha)", "other_info": {"loss": [2.3101468086242676, 2.309095859527588, 2.3103885650634766, 2.3092997074127197, 2.3094918727874756, 2.3106327056884766], "accuracy": [0.09470347315073013, 0.09087307006120682, 0.09549596905708313, 0.09377889335155487, 0.09285431355237961, 0.08757099509239197], "val_loss": [2.30899715423584, 2.30899715423584, 2.30899715423584, 2.30899715423584, 2.30899715423584, 2.30899715423584], "val_accuracy": [0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231]}}]