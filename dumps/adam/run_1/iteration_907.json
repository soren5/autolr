[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8722857236862183, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2210018634796143, 1.8594504594802856, 1.3780714273452759, 1.0881322622299194, 0.935321033000946, 0.8362781405448914, 0.7733446359634399, 0.7207666635513306, 0.6849328279495239, 0.6551066637039185, 0.6315082907676697, 0.6137322187423706, 0.5947496294975281, 0.5773698687553406, 0.5486335754394531, 0.5446816086769104, 0.5280001759529114, 0.5274485945701599, 0.5127186179161072, 0.4980848431587219, 0.4875015318393707, 0.47293031215667725, 0.46388137340545654, 0.4532390236854553, 0.4540778696537018, 0.44603192806243896, 0.43702977895736694, 0.4386056661605835, 0.4197413921356201, 0.41648054122924805, 0.41429051756858826, 0.40285906195640564, 0.3943507671356201, 0.40131452679634094, 0.39074310660362244, 0.38527506589889526, 0.3722999393939972, 0.3794110119342804, 0.36928385496139526, 0.36577722430229187, 0.3578850328922272, 0.3492880165576935, 0.34792834520339966, 0.33808887004852295, 0.3326399326324463, 0.3322804570198059, 0.32264798879623413, 0.3203399181365967, 0.31980499625205994, 0.31552594900131226, 0.30924299359321594, 0.30525797605514526, 0.3010599911212921, 0.297893762588501, 0.2950335144996643, 0.2922208905220032, 0.28631865978240967, 0.2909508943557739, 0.27980634570121765], "accuracy": [0.2724871337413788, 0.48289525508880615, 0.5620129704475403, 0.6217144131660461, 0.6651697158813477, 0.7049266695976257, 0.720380425453186, 0.7366266250610352, 0.7479857206344604, 0.7577598690986633, 0.7741381525993347, 0.7794214487075806, 0.7858935594558716, 0.7889314293861389, 0.7996301651000977, 0.8030643463134766, 0.8090080618858337, 0.8061022162437439, 0.8170651197433472, 0.8190463781356812, 0.8276317715644836, 0.8302733898162842, 0.8301413059234619, 0.8370096683502197, 0.8354246616363525, 0.8413683772087097, 0.8424250483512878, 0.8411042094230652, 0.8491612672805786, 0.8492933511734009, 0.8498216867446899, 0.8562937378883362, 0.8602562546730042, 0.8584070801734924, 0.8621054291725159, 0.8660678863525391, 0.8677849769592285, 0.8691058158874512, 0.869502067565918, 0.8709549307823181, 0.8734645247459412, 0.878879964351654, 0.8749174475669861, 0.8809932470321655, 0.8813894987106323, 0.8790120482444763, 0.8877294659614563, 0.8864086866378784, 0.889050304889679, 0.8893144726753235, 0.8897107243537903, 0.8894465565681458, 0.8934090733528137, 0.8922203183174133, 0.8985602855682373, 0.896446943283081, 0.8969752788543701, 0.8944657444953918, 0.8975036144256592], "val_loss": [2.037433385848999, 1.515401840209961, 1.0536582469940186, 0.8485114574432373, 0.763572096824646, 0.7001016736030579, 0.6555741429328918, 0.6194921731948853, 0.5916720628738403, 0.5674744248390198, 0.5482212901115417, 0.5322660803794861, 0.5190129280090332, 0.5025542974472046, 0.4934837222099304, 0.4841890335083008, 0.4769652783870697, 0.46981364488601685, 0.45638614892959595, 0.4584830701351166, 0.44369637966156006, 0.43643054366111755, 0.43528804183006287, 0.4262158274650574, 0.42488813400268555, 0.41476407647132874, 0.41193875670433044, 0.4083525538444519, 0.4031761884689331, 0.3991607129573822, 0.4021434187889099, 0.39248520135879517, 0.39069247245788574, 0.38930216431617737, 0.3849450647830963, 0.3848034739494324, 0.3842504024505615, 0.3786253333091736, 0.3788304030895233, 0.3762325942516327, 0.37329113483428955, 0.37028560042381287, 0.3713150918483734, 0.36761677265167236, 0.36588093638420105, 0.364583820104599, 0.3655591607093811, 0.3625081479549408, 0.36301782727241516, 0.35677430033683777, 0.3569801151752472, 0.3546592593193054, 0.3590725362300873, 0.3536818325519562, 0.3561970293521881, 0.3536466360092163, 0.3526369333267212, 0.3513754904270172, 0.3517201244831085], "val_accuracy": [0.5249999761581421, 0.640333354473114, 0.67166668176651, 0.6996666789054871, 0.7279999852180481, 0.7483333349227905, 0.7616666555404663, 0.7743333578109741, 0.7789999842643738, 0.7956666946411133, 0.7990000247955322, 0.8080000281333923, 0.8223333358764648, 0.82833331823349, 0.82833331823349, 0.8333333134651184, 0.82833331823349, 0.8356666564941406, 0.8386666774749756, 0.8416666388511658, 0.8453333377838135, 0.8496666550636292, 0.847000002861023, 0.8510000109672546, 0.8513333201408386, 0.8543333411216736, 0.8556666374206543, 0.8560000061988831, 0.8539999723434448, 0.859666645526886, 0.862666666507721, 0.8636666536331177, 0.8610000014305115, 0.862333357334137, 0.862333357334137, 0.862333357334137, 0.8650000095367432, 0.8640000224113464, 0.8636666536331177, 0.8679999709129333, 0.8663333058357239, 0.8673333525657654, 0.8706666827201843, 0.8663333058357239, 0.8686666488647461, 0.8706666827201843, 0.871999979019165, 0.8706666827201843, 0.8706666827201843, 0.8736666440963745, 0.874666690826416, 0.8733333349227905, 0.871999979019165, 0.8759999871253967, 0.875, 0.8736666440963745, 0.8756666779518127, 0.874666690826416, 0.8759999871253967]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 9], [0, 1, 0, 2], [39, 25], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [1], [13], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 4, 1, 3, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0, 2], [16, 99, 37, 99, 61, 1]], "fitness": -0.5354285836219788, "mapping_values": [1, 7, 5, 2, 2, 10, 6, 4, 1, 2, 1, 1, 0, 22, 11, 11, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))))), tf.math.multiply(grad, tf.math.subtract(sigma, alpha))), tf.math.pow(tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [2.310821771621704, 2.309844970703125, 2.3095016479492188, 2.3078765869140625, 2.29526686668396, 2.220823287963867, 1.9650189876556396, NaN, NaN, NaN, NaN], "accuracy": [0.09179764986038208, 0.09694888442754745, 0.09192973375320435, 0.09589222073554993, 0.1208558976650238, 0.26443007588386536, 0.35807687044143677, 0.14542332291603088, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.308873414993286, 2.308711290359497, 2.3076071739196777, 2.3014113903045654, 2.271287679672241, 1.9043262004852295, 2.287639856338501, NaN, NaN, NaN, NaN], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09200000017881393, 0.09799999743700027, 0.22733333706855774, 0.5410000085830688, 0.2096666693687439, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 6], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 5, 3, 2, 3, 5], [0, 2, 2, 3], [7, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 2, 4, 6, 8], [0, 3, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 18, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), beta), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), sigma), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha))))", "other_info": {"loss": [2.3033218383789062, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09694888442754745, 0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.10210011899471283], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025851249694824], "val_accuracy": [0.1003333330154419, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}, "mapping_values": [1, 9, 5, 4, 2, 7, 4, 3, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 12}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [31, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [5, 3, 3, 8, 8, 1, 4, 1, 4, 2, 8, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 3, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 6, 3, 3, 2, 2, 1, 1, 1, 21, 12, 9, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), sigma), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 8, 0, 3], [0, 1, 0, 2], [39, 39], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [5, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 9, 8, 1, 4, 5, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 0, 2, 1], [16, 92, 96, 93, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 1, 0, 1, 1, 2, 1, 1, 1, 13, 8, 5, 4], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), tf.math.square(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303510904312134, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033, 2.3025848865509033], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}]