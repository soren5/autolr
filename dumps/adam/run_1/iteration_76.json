[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8577142953872681, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2220327854156494, 1.8573215007781982, 1.375201940536499, 1.0896646976470947, 0.9317085146903992, 0.8300331830978394, 0.7691474556922913, 0.7161227464675903, 0.675987184047699, 0.6583393216133118, 0.6198429465293884, 0.6010661125183105, 0.5858036279678345, 0.5656969547271729, 0.5517470836639404, 0.5375411510467529, 0.5251733064651489, 0.513744056224823, 0.4966302812099457, 0.4957287907600403, 0.4803703725337982, 0.46979179978370667, 0.46997883915901184, 0.4522640109062195, 0.4418807327747345, 0.4406786262989044, 0.43291592597961426, 0.42277586460113525, 0.42173659801483154, 0.4074808359146118, 0.39304623007774353, 0.39069101214408875, 0.38855764269828796, 0.3840755224227905, 0.3798063099384308], "accuracy": [0.28318583965301514, 0.5044247508049011, 0.5721833109855652, 0.617751955986023, 0.666358470916748, 0.698718786239624, 0.7189275026321411, 0.7342491149902344, 0.7460044622421265, 0.7543256878852844, 0.7713643908500671, 0.7807422876358032, 0.787082314491272, 0.7946110367774963, 0.7979130744934082, 0.8025360107421875, 0.8125742673873901, 0.8158763647079468, 0.8170651197433472, 0.8189142942428589, 0.8276317715644836, 0.8276317715644836, 0.8309338092803955, 0.8378021121025085, 0.843481719493866, 0.8465195894241333, 0.8445383906364441, 0.8454629778862, 0.8498216867446899, 0.8529917001724243, 0.8573504090309143, 0.8584070801734924, 0.8623695969581604, 0.8581429123878479, 0.8661999702453613], "val_loss": [2.0343687534332275, 1.4943864345550537, 1.0233045816421509, 0.8149396181106567, 0.7274637222290039, 0.6720791459083557, 0.6281028985977173, 0.5933608412742615, 0.5663279294967651, 0.5447742342948914, 0.5259350538253784, 0.5138383507728577, 0.5004023313522339, 0.4866047501564026, 0.4750080108642578, 0.4667792022228241, 0.45639219880104065, 0.45098811388015747, 0.4400462508201599, 0.4336060881614685, 0.42920270562171936, 0.4229729473590851, 0.4170914590358734, 0.40965428948402405, 0.4059049189090729, 0.4112307131290436, 0.4003733992576599, 0.3943553566932678, 0.39113956689834595, 0.38347363471984863, 0.38435015082359314, 0.3801301121711731, 0.37929004430770874, 0.375291109085083, 0.3721051812171936], "val_accuracy": [0.5613333582878113, 0.6629999876022339, 0.6866666674613953, 0.7080000042915344, 0.7273333072662354, 0.75, 0.7636666893959045, 0.7723333239555359, 0.7860000133514404, 0.7993333339691162, 0.8069999814033508, 0.812666654586792, 0.8253333568572998, 0.8259999752044678, 0.8286666870117188, 0.8289999961853027, 0.840666651725769, 0.840666651725769, 0.8456666469573975, 0.8479999899864197, 0.8416666388511658, 0.8550000190734863, 0.8529999852180481, 0.8553333282470703, 0.8586666584014893, 0.8536666631698608, 0.8579999804496765, 0.8600000143051147, 0.8616666793823242, 0.8666666746139526, 0.8643333315849304, 0.8650000095367432, 0.8646666407585144, 0.8659999966621399, 0.8666666746139526]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 6, 3, 0, 3, 4], [2, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 2, 3, 0, 3, 5, 7, 5, 8, 9], [0, 2, 0, 3], [71, 16, 84], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8, 0, 2, 4, 5, 2, 4, 2, 5, 5], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0, 1, 7, 3, 3, 6], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 1, 14, 10, 4, 3, 2, 1, 1, 0, 35, 20, 15, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(grad))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.sqrt(tf.math.negative(alpha)), beta)), tf.math.add(tf.math.pow(tf.math.square(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.pow(grad, sigma)), tf.math.add(tf.math.square(sigma), tf.math.square(grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 6], [0, 2, 0, 3, 5], [16, 16], [0, 1], [0], [4], [71], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 5, 5, 0, 7, 7, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7, 6], [16, 31, 96, 99, 46, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 11, 6, 5, 2, 2, 1, 1, 0, 27, 15, 12, 6], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.square(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(sigma, alpha))))), beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.sqrt(grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [2, 2, 3, 0, 3, 2, 7, 8, 9, 4, 2, 5, 5, 5, 2, 4, 3, 7, 3, 5], [0, 1, 0, 2, 0, 2, 3, 3, 2, 1, 3, 0, 2], [39, 39, 6, 50, 3], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 5, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 1, 0], [0, 6, 9], [0], [7, 55], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 3, 0, 0, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 20, 13, 5, 10, 6, 4, 2, 4, 3, 1, 2, 16, 8, 8, 5], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.add(tf.math.sqrt(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.square(grad)), tf.math.square(tf.math.add(tf.math.pow(grad, tf.math.multiply(tf.math.add(grad, grad), tf.math.multiply(tf.math.square(alpha), grad))), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(sigma), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 6, 5], [0, 1, 0, 2], [27, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [2, 2, 0, 0, 1, 5], [1, 2, 0, 3], [12, 16], [0, 1, 1], [2], [0, 0], [99, 71], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 0, 2, 7, 6, 2, 0, 0, 8, 7, 4, 5], [0, 0, 0, 3, 0, 4, 3, 4, 2, 0, 5, 1, 6, 3, 3, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 3, 1, 2, 2, 37, 21, 16, 5], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), alpha), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(tf.math.negative(alpha)), beta), tf.math.subtract(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(sigma, tf.math.negative(tf.math.add(tf.math.add(grad, tf.math.divide_no_nan(beta, tf.math.add(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.negative(alpha)))))))), tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.square(grad), sigma), sigma))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}]