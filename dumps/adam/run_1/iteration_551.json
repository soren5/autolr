[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8582857251167297, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2254347801208496, 1.869728684425354, 1.3983625173568726, 1.0936260223388672, 0.9434711933135986, 0.8433111310005188, 0.7715151906013489, 0.723947286605835, 0.6911308765411377, 0.6606737971305847, 0.6292387843132019, 0.5995693206787109, 0.5914078950881958, 0.5759377479553223, 0.5557450652122498, 0.542905867099762, 0.5259581208229065, 0.5143693089485168, 0.5133475661277771, 0.4927850067615509, 0.49164408445358276, 0.4745590388774872, 0.46782130002975464, 0.457998663187027, 0.4483376145362854, 0.4388323426246643, 0.42846977710723877, 0.42578428983688354, 0.4194986820220947, 0.4128580689430237, 0.4046539068222046, 0.39348697662353516, 0.39378994703292847, 0.3847217559814453, 0.3804509937763214, 0.37528854608535767, 0.3753946125507355, 0.36814501881599426, 0.3647339940071106, 0.35711371898651123, 0.3547956049442291, 0.34790149331092834, 0.34981560707092285, 0.3379141092300415, 0.3292462229728699, 0.32161131501197815, 0.320365309715271, 0.31844642758369446, 0.316324383020401, 0.3108709156513214, 0.3100756108760834, 0.30044084787368774, 0.29605990648269653, 0.29323768615722656, 0.28151318430900574], "accuracy": [0.27882710099220276, 0.4979526996612549, 0.5622771382331848, 0.6280544400215149, 0.6676793098449707, 0.6921146512031555, 0.7228899598121643, 0.7392682433128357, 0.7500990629196167, 0.7592127919197083, 0.7711002230644226, 0.7800818681716919, 0.7902522683143616, 0.7951393723487854, 0.7956677079200745, 0.8053097128868103, 0.8123101592063904, 0.8131026029586792, 0.8137630224227905, 0.8273676037788391, 0.8207634687423706, 0.8319904804229736, 0.8327829837799072, 0.8381983637809753, 0.8429533839225769, 0.8438779711723328, 0.845859169960022, 0.8421608805656433, 0.8496896028518677, 0.8544445633888245, 0.8533879518508911, 0.8602562546730042, 0.8610487580299377, 0.8664641380310059, 0.8650112152099609, 0.8632941246032715, 0.868049144744873, 0.8671245574951172, 0.8757099509239197, 0.8708229064941406, 0.871879518032074, 0.8739928603172302, 0.8729361891746521, 0.8792761564254761, 0.8841632604598999, 0.8836349248886108, 0.8858803510665894, 0.8873332738876343, 0.8898428082466125, 0.8883898854255676, 0.8936732411384583, 0.8927486538887024, 0.8924844861030579, 0.8968431949615479, 0.8977677822113037], "val_loss": [2.0418262481689453, 1.5228017568588257, 1.0518786907196045, 0.8431523442268372, 0.7525802254676819, 0.7026346921920776, 0.644823431968689, 0.6146372556686401, 0.5858085751533508, 0.5665205717086792, 0.5442864298820496, 0.5298165082931519, 0.5186533331871033, 0.5042514801025391, 0.4871675670146942, 0.4793550968170166, 0.4716341197490692, 0.4606933891773224, 0.45401710271835327, 0.44826242327690125, 0.4400985538959503, 0.4332627058029175, 0.4273369610309601, 0.42437413334846497, 0.4174710214138031, 0.4161955714225769, 0.4126955270767212, 0.409244179725647, 0.4022253453731537, 0.39977195858955383, 0.3969785273075104, 0.39057451486587524, 0.39180687069892883, 0.3868981599807739, 0.3906065821647644, 0.3826223611831665, 0.3786226511001587, 0.38269710540771484, 0.37255534529685974, 0.3794635832309723, 0.3717586398124695, 0.36835548281669617, 0.36711421608924866, 0.3654090166091919, 0.3642805218696594, 0.36453694105148315, 0.36018338799476624, 0.3652469515800476, 0.35890111327171326, 0.35729411244392395, 0.3536309003829956, 0.3542264699935913, 0.35538721084594727, 0.34942561388015747, 0.3529549241065979], "val_accuracy": [0.5260000228881836, 0.6516666412353516, 0.6753333210945129, 0.703000009059906, 0.7239999771118164, 0.7446666955947876, 0.7616666555404663, 0.7663333415985107, 0.7776666879653931, 0.7850000262260437, 0.8003333210945129, 0.8056666851043701, 0.8173333406448364, 0.8153333067893982, 0.8246666789054871, 0.8289999961853027, 0.8309999704360962, 0.8370000123977661, 0.8373333215713501, 0.843999981880188, 0.8433333039283752, 0.8486666679382324, 0.8489999771118164, 0.8519999980926514, 0.8526666760444641, 0.8539999723434448, 0.8556666374206543, 0.8566666841506958, 0.8613333106040955, 0.8629999756813049, 0.8636666536331177, 0.862333357334137, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8676666617393494, 0.8693333268165588, 0.8676666617393494, 0.8706666827201843, 0.8653333187103271, 0.8730000257492065, 0.8703333139419556, 0.8740000128746033, 0.8726666569709778, 0.8766666650772095, 0.8759999871253967, 0.8763333559036255, 0.875, 0.875, 0.8813333511352539, 0.8809999823570251, 0.8763333559036255, 0.875333309173584, 0.8803333044052124, 0.878000020980835]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 3, 3, 3, 3, 4, 3, 1, 5, 3, 1, 7, 5, 0, 2, 3, 5, 1, 2, 1, 7, 1, 5, 5, 3, 2, 3, 1, 2, 6, 1], [2, 1, 0, 2, 0, 3, 0, 1, 2, 0, 3, 0, 3, 2, 3, 2, 1, 0, 1, 1, 3, 3, 1, 3, 2], [12, 12, 54, 9, 27, 53], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 8, 0, 1, 6, 9, 1, 3, 8, 2, 0, 6, 1, 6, 6, 7, 5, 0, 2, 8, 0], [0, 2, 0, 3, 4, 0, 2, 2, 4, 1, 1, 1, 5, 0], [16, 16, 41, 38, 76], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 4, 2, 0], [80, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 56, 31, 25, 6, 40, 26, 14, 5, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.multiply(grad, alpha), tf.math.multiply(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), grad)), tf.math.pow(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.math.square(tf.math.multiply(grad, tf.math.subtract(tf.math.add(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)), tf.math.negative(tf.math.add(grad, tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(grad))))))), tf.math.subtract(tf.math.add(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad), grad), grad)), tf.math.add(tf.math.subtract(tf.math.square(grad), alpha), tf.math.square(tf.math.multiply(tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(grad, grad)), alpha))), tf.math.subtract(grad, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(tf.math.sqrt(grad), grad), tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.negative(beta)), grad), alpha)), alpha))), tf.math.add(tf.math.sqrt(tf.math.negative(alpha)), grad)))), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, grad)))", "other_info": {"loss": [2.3046674728393555, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3, 9], [0, 1, 0, 2], [53, 39, 56], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [4], [63], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 6, 1, 2, 8, 8], [0, 0, 0, 3, 0, 4, 3, 1, 4, 0], [16, 99, 96, 99, 62, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 3, 10, 6, 4, 1, 2, 1, 1, 0, 3, 1, 2, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303840398788452, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 2, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 1], [0, 0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 5, 8, 1, 4, 1, 4, 2, 8, 4, 8, 9, 7, 4, 2, 3, 3, 9, 2], [0, 0, 0, 3, 4, 0, 3, 1, 2, 1, 2, 5, 3, 1], [16, 99, 96, 60, 34, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 1, 3, 2, 1, 1, 35, 21, 14, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(grad, tf.math.pow(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.multiply(beta, tf.math.multiply(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), sigma))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 2, 3, 3, 0, 1, 9, 4, 7, 3], [0, 1, 0, 2, 3, 3, 2, 2, 0], [39, 39, 0, 24], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 3, 0, 3, 5], [0, 2, 0, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 8, 3, 6, 8, 1, 4, 1, 4, 2, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 60, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 12, 9, 4, 1, 0, 1, 1, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), tf.math.pow(tf.math.add(tf.math.multiply(grad, grad), grad), grad))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.304579973220825, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]