[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8617143034934998, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2244019508361816, 1.8696166276931763, 1.4011428356170654, 1.088428020477295, 0.9368426203727722, 0.839590847492218, 0.777496337890625, 0.721508800983429, 0.6873008608818054, 0.6609357595443726, 0.6307541728019714, 0.6056245565414429, 0.5821184515953064, 0.5704362988471985, 0.5589972734451294, 0.5446907877922058, 0.526401162147522, 0.5057368278503418, 0.49918922781944275, 0.4814288020133972, 0.47948870062828064, 0.47655338048934937, 0.4665764272212982, 0.44988030195236206, 0.4447456896305084, 0.436556339263916, 0.4303787648677826, 0.4143315553665161, 0.421535849571228, 0.4023089110851288, 0.4016411304473877, 0.3927808403968811, 0.3887069523334503, 0.38739752769470215, 0.37522366642951965, 0.37106025218963623, 0.37371310591697693, 0.3685727119445801, 0.3590134084224701, 0.35122981667518616, 0.3461707830429077, 0.3423641324043274, 0.33630454540252686, 0.3351978659629822, 0.32694244384765625, 0.3257667124271393, 0.3163689374923706, 0.3205421268939972, 0.3034861981868744, 0.3018296957015991, 0.29588931798934937, 0.2913159132003784, 0.29715824127197266, 0.29225674271583557, 0.2863941490650177], "accuracy": [0.2658829689025879, 0.48910316824913025, 0.5620129704475403, 0.6227710843086243, 0.665830135345459, 0.700700044631958, 0.7157574892044067, 0.7384757399559021, 0.7477215528488159, 0.7568352818489075, 0.7726852297782898, 0.7788931727409363, 0.7864218950271606, 0.793950617313385, 0.7997622489929199, 0.8035926818847656, 0.8156121969223022, 0.8208954930305481, 0.8257825970649719, 0.8281601071357727, 0.8284242749214172, 0.8294808864593506, 0.8352925777435303, 0.8401796221733093, 0.8474441766738892, 0.8437458872795105, 0.8506141901016235, 0.8552370667457581, 0.8475762605667114, 0.8594637513160706, 0.8578787446022034, 0.8609166741371155, 0.8622375130653381, 0.8639545440673828, 0.8658037185668945, 0.8691058158874512, 0.868049144744873, 0.8696341514587402, 0.874389111995697, 0.8775591254234314, 0.8762382864952087, 0.878879964351654, 0.8829745054244995, 0.8823140859603882, 0.883238673210144, 0.8837670087814331, 0.8865407705307007, 0.8886540532112122, 0.8916919827461243, 0.8947299122810364, 0.8982961177825928, 0.8951261639595032, 0.8922203183174133, 0.8963148593902588, 0.8996169567108154], "val_loss": [2.040760040283203, 1.511763334274292, 1.0366301536560059, 0.8218851089477539, 0.7395302057266235, 0.6826035380363464, 0.6404023170471191, 0.6053506135940552, 0.5774034261703491, 0.5598262548446655, 0.548610508441925, 0.5285036563873291, 0.5208039283752441, 0.5027130246162415, 0.4950457215309143, 0.4875167906284332, 0.4726661443710327, 0.46859684586524963, 0.45893311500549316, 0.4525550901889801, 0.45391130447387695, 0.44185730814933777, 0.4430781304836273, 0.43172091245651245, 0.42734140157699585, 0.4277942180633545, 0.4193591773509979, 0.41630449891090393, 0.41219767928123474, 0.4062142074108124, 0.4045940637588501, 0.4010966122150421, 0.39953935146331787, 0.39616474509239197, 0.3941580355167389, 0.38882192969322205, 0.39302074909210205, 0.38917988538742065, 0.3813425302505493, 0.3805127739906311, 0.38190802931785583, 0.37700554728507996, 0.37702685594558716, 0.37363961338996887, 0.37535548210144043, 0.3701118230819702, 0.3701017200946808, 0.3626921474933624, 0.364158034324646, 0.3631134331226349, 0.3651103079319, 0.36130809783935547, 0.3625370264053345, 0.35952863097190857, 0.3608262538909912], "val_accuracy": [0.5206666588783264, 0.6693333387374878, 0.6846666932106018, 0.7173333168029785, 0.7406666874885559, 0.7536666393280029, 0.7630000114440918, 0.7766666412353516, 0.7879999876022339, 0.7956666946411133, 0.7986666560173035, 0.8086666464805603, 0.8113333582878113, 0.8169999718666077, 0.8203333616256714, 0.8259999752044678, 0.8326666951179504, 0.8293333053588867, 0.8333333134651184, 0.843999981880188, 0.8373333215713501, 0.8479999899864197, 0.8410000205039978, 0.8483333587646484, 0.8543333411216736, 0.8496666550636292, 0.8533333539962769, 0.8539999723434448, 0.8606666922569275, 0.856333315372467, 0.8579999804496765, 0.8606666922569275, 0.8600000143051147, 0.8633333444595337, 0.8616666793823242, 0.8666666746139526, 0.8603333234786987, 0.8663333058357239, 0.8666666746139526, 0.8636666536331177, 0.8669999837875366, 0.8676666617393494, 0.8679999709129333, 0.8713333606719971, 0.8723333477973938, 0.8700000047683716, 0.8696666955947876, 0.8756666779518127, 0.8743333220481873, 0.8769999742507935, 0.871999979019165, 0.8730000257492065, 0.8723333477973938, 0.8769999742507935, 0.8756666779518127]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 2], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 2, 1, 3, 5], [0, 2, 0, 3, 4], [16, 16], [0, 1], [0], [3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [6, 3, 2, 6, 4, 1, 4, 1, 4, 2, 8, 1, 3, 5, 9], [3, 0, 0, 3, 0, 2, 3, 1, 2, 0, 3, 5], [70, 99, 96, 99, 36, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 11, 6, 5, 2, 2, 1, 1, 0, 27, 15, 12, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), beta)), sigma))), tf.math.sqrt(tf.math.subtract(alpha, beta))), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), sigma), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 7, 0, 4, 3, 8, 1, 4, 3, 7, 5, 1, 9, 3, 0, 9], [0, 2, 0, 2, 1, 0, 1, 3, 0, 1, 3], [39, 39, 62, 19, 47, 12], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 4, 3, 5], [0, 2, 0, 3], [3, 16], [0, 1], [0], [0], [47], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 9, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 85, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 20, 11, 6, 6, 3, 3, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.sqrt(grad), alpha), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.pow(tf.math.multiply(tf.math.add(tf.math.square(tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), alpha)), grad), tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303353786468506, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 9, 3, 0, 3, 5], [0, 3, 0, 2], [16, 73], [0, 1], [0], [0], [13], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 66, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 2, 2, 0, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), sigma)), grad))), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 2, 8, 7], [0, 1, 0, 2, 0, 1], [39, 39, 23], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 2, 0, 3, 5], [0, 2, 0, 3, 2], [91, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0], [8, 3, 3, 2, 8, 3, 4, 1, 4, 2, 8, 3, 6, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 91, 96, 99, 61, 1, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 3, 10, 5, 5, 2, 2, 1, 1, 1, 24, 14, 10, 7], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(tf.math.negative(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.divide_no_nan(sigma, alpha), beta)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09430722147226334, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]