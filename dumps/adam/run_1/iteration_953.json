[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8560000061988831, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2213220596313477, 1.859424114227295, 1.3765236139297485, 1.0842175483703613, 0.9240943193435669, 0.8139447569847107, 0.7652828097343445, 0.711652934551239, 0.6679813265800476, 0.6414815187454224, 0.6155346035957336, 0.5997142791748047, 0.576870322227478, 0.5585809946060181, 0.5548381805419922, 0.5288065075874329, 0.5171597003936768, 0.5055574178695679, 0.4902856647968292, 0.4840123653411865, 0.46611082553863525, 0.46798941493034363, 0.45529797673225403, 0.4447436034679413, 0.4367087483406067, 0.43816038966178894, 0.4287228584289551, 0.41631844639778137, 0.40599048137664795, 0.39964938163757324, 0.39299890398979187, 0.3931693434715271, 0.3813224732875824, 0.3688773512840271, 0.36783650517463684, 0.3635014593601227, 0.35305407643318176, 0.3598695695400238, 0.3548649847507477, 0.34414973855018616, 0.3463427722454071, 0.3368375301361084, 0.3322637379169464, 0.32236388325691223, 0.3215450346469879, 0.3156769573688507, 0.31479835510253906], "accuracy": [0.2681283950805664, 0.49187690019607544, 0.5727116465568542, 0.6235635876655579, 0.6701889038085938, 0.7065116763114929, 0.7226257920265198, 0.7465327978134155, 0.7577598690986633, 0.7683265209197998, 0.7733456492424011, 0.7835160493850708, 0.789459764957428, 0.7968564033508301, 0.8020076751708984, 0.8080834746360779, 0.8183859586715698, 0.8202351331710815, 0.8190463781356812, 0.8293488025665283, 0.8304054737091064, 0.8347642421722412, 0.8337075710296631, 0.8412362933158875, 0.8422929644584656, 0.8429533839225769, 0.8461233377456665, 0.8482366800308228, 0.8574824929237366, 0.8599920868873596, 0.8553691506385803, 0.8626337051391602, 0.8601241707801819, 0.8656716346740723, 0.8687095642089844, 0.8683133125305176, 0.8757099509239197, 0.8745211958885193, 0.8770307898521423, 0.8732003569602966, 0.8767666220664978, 0.878351628780365, 0.8811253309249878, 0.8862766027450562, 0.8873332738876343, 0.8861445188522339, 0.8840311765670776], "val_loss": [2.033385992050171, 1.504312515258789, 1.0340629816055298, 0.8287550210952759, 0.7303246855735779, 0.6774055361747742, 0.6349289417266846, 0.6039621829986572, 0.5729183554649353, 0.5564044713973999, 0.5400853157043457, 0.5209562182426453, 0.5088422894477844, 0.4954530894756317, 0.488411545753479, 0.47971436381340027, 0.4668261706829071, 0.4573061466217041, 0.45330119132995605, 0.44519925117492676, 0.44809386134147644, 0.43647754192352295, 0.4295561909675598, 0.42403170466423035, 0.42022138833999634, 0.42327678203582764, 0.41004252433776855, 0.4050556719303131, 0.4022994041442871, 0.3940350413322449, 0.39379873871803284, 0.38598766922950745, 0.3857150971889496, 0.3827074468135834, 0.3800489008426666, 0.3782408535480499, 0.3726485073566437, 0.38077273964881897, 0.3729868233203888, 0.371961385011673, 0.37245169281959534, 0.365458607673645, 0.3655011057853699, 0.36707815527915955, 0.35748153924942017, 0.36628520488739014, 0.3583287298679352], "val_accuracy": [0.5379999876022339, 0.6539999842643738, 0.6840000152587891, 0.7143333554267883, 0.7369999885559082, 0.7513333559036255, 0.7699999809265137, 0.781333327293396, 0.7953333258628845, 0.8019999861717224, 0.8036666512489319, 0.812333345413208, 0.8193333148956299, 0.824999988079071, 0.824999988079071, 0.8270000219345093, 0.8333333134651184, 0.8370000123977661, 0.8363333344459534, 0.8396666646003723, 0.8363333344459534, 0.8416666388511658, 0.8416666388511658, 0.843666672706604, 0.847000002861023, 0.8493333458900452, 0.8473333120346069, 0.8513333201408386, 0.8553333282470703, 0.8529999852180481, 0.8550000190734863, 0.8583333492279053, 0.8573333621025085, 0.8629999756813049, 0.8606666922569275, 0.8600000143051147, 0.8650000095367432, 0.8576666712760925, 0.8636666536331177, 0.8686666488647461, 0.8640000224113464, 0.8696666955947876, 0.8669999837875366, 0.8676666617393494, 0.8683333396911621, 0.8686666488647461, 0.8690000176429749]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 8, 1, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [3, 3, 3, 6, 8, 1, 4, 1, 4, 2, 9], [0, 0, 0, 3, 4, 0, 4, 4, 2, 0], [16, 99, 96, 99, 61, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 6, 3, 3, 2, 1, 0, 1, 1, 20, 11, 9, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)))), grad), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 8, 6, 6, 0], [0, 1, 0, 2, 1, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [2], [0, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 0, 0], [16, 6, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 10, 6, 2, 9, 5, 4, 2, 3, 1, 2, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.negative(alpha)), grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), alpha), tf.math.add(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 6, 0, 3], [0, 1, 0, 2], [88, 33], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [4, 2, 3, 0, 3, 5, 8], [0, 2, 0, 3, 5], [16, 16], [0, 1], [9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 6, 6, 7, 6, 9], [0, 0, 0, 4, 0, 0, 2, 1, 2, 0, 3, 7, 0, 6], [16, 99, 96, 8, 61, 1, 69, 53]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 7, 5, 2, 1, 1, 0, 1, 29, 15, 14, 8], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), beta)), tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, beta), tf.math.add(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), grad)), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 5, 2, 6, 0, 6, 6, 6, 6, 4, 1, 4, 8, 3, 5, 6, 2, 7, 2, 6, 9, 8, 2, 4, 0], [0, 1, 0, 2, 0, 3, 2, 2, 1, 1, 3, 0, 2, 0, 3, 1, 1, 1, 0, 2], [39, 39, 50, 49, 58, 36, 4], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 5, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 8, 6, 8, 1, 6, 1, 4, 2, 8, 0], [0, 4, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 98, 61, 1]], "fitness": -0.09000000357627869, "mapping_values": [1, 49, 29, 20, 7, 6, 4, 2, 1, 2, 1, 1, 1, 21, 12, 9, 4], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(grad, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(grad, tf.math.pow(tf.math.sqrt(tf.math.multiply(grad, grad)), tf.math.square(tf.math.divide_no_nan(alpha, alpha)))), grad), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), grad), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.negative(alpha), alpha)))))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), grad)), tf.math.sqrt(tf.math.negative(alpha))), beta)", "other_info": {"loss": [2.3110198974609375, 2.3098607063293457, 2.3091607093811035, 2.309642791748047, 2.3096697330474854, 2.3104934692382812], "accuracy": [0.0886276587843895, 0.09232597798109055, 0.09179764986038208, 0.09259014576673508, 0.09417514503002167, 0.0940430611371994], "val_loss": [2.3080461025238037, 2.3080461025238037, 2.3080461025238037, 2.3080461025238037, 2.3080461025238037, 2.3080461025238037], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}]