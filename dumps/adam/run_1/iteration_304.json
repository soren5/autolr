[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8811428546905518, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224590539932251, 1.8638859987258911, 1.3978285789489746, 1.1051115989685059, 0.9351550340652466, 0.8531766533851624, 0.7817806601524353, 0.7276771664619446, 0.6996701955795288, 0.6728870868682861, 0.6396504640579224, 0.6114020943641663, 0.5899173617362976, 0.5777763724327087, 0.5623325705528259, 0.5536971092224121, 0.5288746953010559, 0.5210357308387756, 0.5145369172096252, 0.5086684823036194, 0.49337905645370483, 0.48058366775512695, 0.4733416736125946, 0.4671367108821869, 0.4560546278953552, 0.4489839971065521, 0.43767276406288147, 0.43080347776412964, 0.42394670844078064, 0.4119667112827301, 0.4154728055000305, 0.4051834046840668, 0.4020461440086365, 0.3948018252849579, 0.39558297395706177, 0.38355568051338196, 0.38200199604034424, 0.3754238486289978, 0.3634035289287567, 0.3588741719722748, 0.35425013303756714, 0.35747748613357544, 0.34530067443847656, 0.34502410888671875, 0.3350977897644043, 0.33896344900131226, 0.33060407638549805, 0.3261704444885254, 0.32500237226486206, 0.31737399101257324, 0.309316486120224, 0.31210988759994507, 0.29956573247909546, 0.2987413704395294, 0.2934395670890808, 0.2916269898414612, 0.29190024733543396, 0.288055956363678, 0.27709802985191345, 0.27752116322517395, 0.2706053853034973, 0.26719552278518677, 0.2586905062198639, 0.25517407059669495, 0.25299152731895447, 0.24685099720954895, 0.2489650994539261, 0.2379595935344696, 0.2467358112335205, 0.24182036519050598, 0.23832111060619354, 0.23622792959213257, 0.22920526564121246, 0.22353021800518036, 0.21662341058254242, 0.2148113250732422, 0.21315842866897583, 0.20856662094593048, 0.20420268177986145, 0.20272819697856903, 0.20168952643871307, 0.19936147332191467, 0.2022467404603958, 0.19393852353096008, 0.1888069212436676, 0.1853010207414627, 0.18326862156391144, 0.18725469708442688, 0.1802607625722885], "accuracy": [0.27763834595680237, 0.49993395805358887, 0.5666358470916748, 0.6131290197372437, 0.6716417670249939, 0.689869225025177, 0.7165499925613403, 0.7357020378112793, 0.7436270117759705, 0.754589855670929, 0.7660810947418213, 0.7766477465629578, 0.7849689722061157, 0.7905164361000061, 0.7992339134216309, 0.8009510040283203, 0.809140145778656, 0.8127063512802124, 0.81548011302948, 0.8162726163864136, 0.8249900937080383, 0.8274996876716614, 0.8337075710296631, 0.8334434032440186, 0.8363492488861084, 0.8409721255302429, 0.8432175517082214, 0.8521991968154907, 0.8479725122451782, 0.8537842035293579, 0.8499537706375122, 0.8560295701026917, 0.8561616539955139, 0.8597279191017151, 0.8573504090309143, 0.8615770936012268, 0.8631620407104492, 0.868049144744873, 0.8689737319946289, 0.8671245574951172, 0.8722757697105408, 0.8726720213890076, 0.8758420348167419, 0.8751816153526306, 0.878879964351654, 0.8780874609947205, 0.8821820020675659, 0.8772949576377869, 0.8837670087814331, 0.8858803510665894, 0.887201189994812, 0.8848236799240112, 0.8893144726753235, 0.8919561505317688, 0.8956544995307922, 0.8951261639595032, 0.8894465565681458, 0.8980319499969482, 0.900409460067749, 0.8965790271759033, 0.9039757251739502, 0.9037115573883057, 0.9055606722831726, 0.9076740145683289, 0.908730685710907, 0.9085986018180847, 0.9097873568534851, 0.9159952402114868, 0.9075419306755066, 0.913089394569397, 0.9149385690689087, 0.913089394569397, 0.91559898853302, 0.9194294214248657, 0.9225993752479553, 0.9231277108192444, 0.9233918786048889, 0.9260335564613342, 0.9299960136413574, 0.9292035102844238, 0.9292035102844238, 0.9260335564613342, 0.9265618920326233, 0.9315810203552246, 0.9340906143188477, 0.9313168525695801, 0.935279369354248, 0.9315810203552246, 0.9331660270690918], "val_loss": [2.0364224910736084, 1.5119632482528687, 1.0428588390350342, 0.8328427672386169, 0.7376822829246521, 0.6838186979293823, 0.6384417414665222, 0.60288405418396, 0.5764493942260742, 0.5563174486160278, 0.53635573387146, 0.5184746384620667, 0.5070334672927856, 0.4945278465747833, 0.4811205267906189, 0.47261738777160645, 0.46519893407821655, 0.45602861046791077, 0.4515576660633087, 0.44376710057258606, 0.4394070506095886, 0.42795220017433167, 0.4247489273548126, 0.42230477929115295, 0.416422039270401, 0.41304606199264526, 0.405069500207901, 0.40248534083366394, 0.3957495093345642, 0.3932521939277649, 0.3917439877986908, 0.3855334520339966, 0.3846903443336487, 0.38456273078918457, 0.3777863085269928, 0.38091352581977844, 0.3777937889099121, 0.374453604221344, 0.3721783757209778, 0.36629825830459595, 0.3647341728210449, 0.36119210720062256, 0.36700910329818726, 0.36272087693214417, 0.3612198829650879, 0.3656446933746338, 0.3623223900794983, 0.35467955470085144, 0.35379013419151306, 0.3616761565208435, 0.35364094376564026, 0.3468440771102905, 0.35026565194129944, 0.3501940071582794, 0.3545147180557251, 0.3513091504573822, 0.34877344965934753, 0.3410007655620575, 0.3446265459060669, 0.3410213887691498, 0.34085819125175476, 0.33986103534698486, 0.33731886744499207, 0.343218594789505, 0.33527904748916626, 0.33798375725746155, 0.33526405692100525, 0.33732956647872925, 0.3345458209514618, 0.34458380937576294, 0.336759477853775, 0.3364392817020416, 0.3378850817680359, 0.3369640111923218, 0.33935683965682983, 0.3384944200515747, 0.33679357171058655, 0.3375064432621002, 0.3360874056816101, 0.3356230556964874, 0.34466853737831116, 0.33730509877204895, 0.3359909951686859, 0.33959439396858215, 0.3368707001209259, 0.3371012210845947, 0.3451395332813263, 0.33246737718582153, 0.33857905864715576], "val_accuracy": [0.531000018119812, 0.656000018119812, 0.6819999814033508, 0.7106666564941406, 0.7306666374206543, 0.7516666650772095, 0.7699999809265137, 0.7799999713897705, 0.7906666398048401, 0.8006666898727417, 0.8003333210945129, 0.8106666803359985, 0.8169999718666077, 0.8146666884422302, 0.8266666531562805, 0.8276666402816772, 0.8293333053588867, 0.8349999785423279, 0.8373333215713501, 0.8393333554267883, 0.8423333168029785, 0.8493333458900452, 0.8450000286102295, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8556666374206543, 0.8523333072662354, 0.8603333234786987, 0.8566666841506958, 0.8586666584014893, 0.8610000014305115, 0.8613333106040955, 0.8613333106040955, 0.8643333315849304, 0.859333336353302, 0.8629999756813049, 0.8656666874885559, 0.8636666536331177, 0.8669999837875366, 0.8683333396911621, 0.8656666874885559, 0.8656666874885559, 0.8700000047683716, 0.8679999709129333, 0.8683333396911621, 0.8653333187103271, 0.8709999918937683, 0.8723333477973938, 0.8690000176429749, 0.8733333349227905, 0.8740000128746033, 0.8773333430290222, 0.8740000128746033, 0.8743333220481873, 0.8733333349227905, 0.8759999871253967, 0.8786666393280029, 0.875, 0.8763333559036255, 0.878333330154419, 0.8786666393280029, 0.8823333382606506, 0.8803333044052124, 0.8833333253860474, 0.8809999823570251, 0.8836666941642761, 0.8809999823570251, 0.8840000033378601, 0.8796666860580444, 0.8773333430290222, 0.8830000162124634, 0.8830000162124634, 0.8863333463668823, 0.8826666474342346, 0.8790000081062317, 0.8849999904632568, 0.8866666555404663, 0.8846666812896729, 0.8826666474342346, 0.8843333125114441, 0.8856666684150696, 0.8870000243186951, 0.8883333206176758, 0.8853333592414856, 0.8853333592414856, 0.8866666555404663, 0.887666642665863, 0.8880000114440918]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8651428818702698, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2247798442840576, 1.8653119802474976, 1.387534737586975, 1.0984021425247192, 0.9331449270248413, 0.841270923614502, 0.7691632509231567, 0.7274236679077148, 0.691435694694519, 0.6553957462310791, 0.6396521925926208, 0.6208456158638, 0.5865522027015686, 0.5732860565185547, 0.5541465878486633, 0.5363138318061829, 0.5258727073669434, 0.5216972827911377, 0.49978867173194885, 0.49293673038482666, 0.4892299175262451, 0.46613529324531555, 0.4683830440044403, 0.45128583908081055, 0.4429699182510376, 0.4435281753540039, 0.42908984422683716, 0.4263022541999817, 0.4127481281757355, 0.4056272506713867, 0.3998991549015045, 0.39972275495529175, 0.3903517723083496, 0.38382744789123535, 0.3793811798095703, 0.37922903895378113, 0.36452239751815796, 0.36109161376953125, 0.35522371530532837, 0.35783153772354126, 0.3523409068584442, 0.3445394039154053, 0.3301951289176941, 0.33233436942100525, 0.32156863808631897, 0.32665979862213135, 0.3232874870300293, 0.3176161050796509, 0.31856030225753784, 0.30714812874794006], "accuracy": [0.2689208686351776, 0.49385812878608704, 0.573107898235321, 0.6153744459152222, 0.6659622192382812, 0.6977941989898682, 0.7228899598121643, 0.7358341217041016, 0.7453441023826599, 0.7609298825263977, 0.7685906887054443, 0.7724210619926453, 0.7854973077774048, 0.7951393723487854, 0.8035926818847656, 0.8063663840293884, 0.8079513907432556, 0.8101968169212341, 0.8170651197433472, 0.8220842480659485, 0.8214238286018372, 0.8301413059234619, 0.8317263126373291, 0.8416325449943542, 0.8448025584220886, 0.8397833704948425, 0.8474441766738892, 0.8436138033866882, 0.8521991968154907, 0.8540483713150024, 0.859199583530426, 0.8564258217811584, 0.8601241707801819, 0.8580108284950256, 0.8632941246032715, 0.8646149635314941, 0.8691058158874512, 0.8725399374961853, 0.8751816153526306, 0.8697662353515625, 0.8697662353515625, 0.8774270415306091, 0.8840311765670776, 0.8782195448875427, 0.8889182209968567, 0.880729079246521, 0.8849557638168335, 0.8857482671737671, 0.8828424215316772, 0.8889182209968567], "val_loss": [2.038907289505005, 1.5050418376922607, 1.0290719270706177, 0.8263959884643555, 0.7439118027687073, 0.6976345181465149, 0.6501531600952148, 0.6243380308151245, 0.6032819151878357, 0.5704949498176575, 0.5541248917579651, 0.5412310361862183, 0.5217394232749939, 0.5121967196464539, 0.5046314001083374, 0.49193158745765686, 0.4835948944091797, 0.4742962718009949, 0.4658573269844055, 0.4511790871620178, 0.4507524371147156, 0.44506704807281494, 0.4353482723236084, 0.4273386597633362, 0.42494678497314453, 0.42300504446029663, 0.4157778322696686, 0.411243736743927, 0.40778622031211853, 0.39922985434532166, 0.4034328758716583, 0.4011492133140564, 0.3929484784603119, 0.38854411244392395, 0.39441150426864624, 0.3820585608482361, 0.38027215003967285, 0.3757301867008209, 0.37446168065071106, 0.37153056263923645, 0.3698318600654602, 0.36607101559638977, 0.3656781017780304, 0.36295780539512634, 0.3628397285938263, 0.3682924509048462, 0.3558380603790283, 0.3569606840610504, 0.35857951641082764, 0.3570117652416229], "val_accuracy": [0.531000018119812, 0.6600000262260437, 0.6880000233650208, 0.7089999914169312, 0.7363333106040955, 0.7396666407585144, 0.7683333158493042, 0.7770000100135803, 0.7739999890327454, 0.7926666736602783, 0.7996666431427002, 0.8009999990463257, 0.8073333501815796, 0.8140000104904175, 0.8190000057220459, 0.8186666369438171, 0.8236666917800903, 0.828000009059906, 0.8323333263397217, 0.8370000123977661, 0.8399999737739563, 0.8416666388511658, 0.8456666469573975, 0.8476666808128357, 0.8493333458900452, 0.8479999899864197, 0.8533333539962769, 0.8529999852180481, 0.8579999804496765, 0.8529999852180481, 0.8553333282470703, 0.8529999852180481, 0.859333336353302, 0.8573333621025085, 0.8633333444595337, 0.8663333058357239, 0.862333357334137, 0.8629999756813049, 0.8636666536331177, 0.8669999837875366, 0.8663333058357239, 0.8646666407585144, 0.8679999709129333, 0.8653333187103271, 0.8723333477973938, 0.8676666617393494, 0.8696666955947876, 0.8693333268165588, 0.8723333477973938, 0.8723333477973938]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3], [0, 1, 0, 2, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 2, 3, 5, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 39, 96, 90, 72, 1]], "fitness": -0.11142857372760773, "mapping_values": [1, 10, 5, 5, 2, 6, 3, 3, 2, 2, 1, 1, 1, 10, 5, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), sigma)), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3073744773864746, 2.3054330348968506, 2.304393768310547, 2.3043551445007324, 2.3039166927337646, 2.3037538528442383, 2.3035333156585693, 2.3035123348236084, 2.3033287525177, 2.3032829761505127, 2.3034005165100098, 2.303319215774536, 2.3032281398773193, 2.303227186203003, 2.30307936668396, 2.3031487464904785, 2.3031671047210693, 2.303011655807495, 2.3031020164489746, 2.3030152320861816, 2.302988290786743, 2.3030576705932617, 2.302969217300415, 2.3030025959014893, 2.303046226501465], "accuracy": [0.08902391046285629, 0.08849557489156723, 0.09179764986038208, 0.08638224750757217, 0.09153348207473755, 0.08915598690509796, 0.08730682730674744, 0.09430722147226334, 0.09787346422672272, 0.09734513610601425, 0.09774138033390045, 0.09774138033390045, 0.09325055778026581, 0.09787346422672272, 0.09959053993225098, 0.10051512718200684, 0.09457138925790787, 0.10196803510189056, 0.09681680053472519, 0.09509972482919693, 0.10157178342342377, 0.09549596905708313, 0.10157178342342377, 0.09906221181154251, 0.09826971590518951], "val_loss": [2.305356025695801, 2.304504871368408, 2.3040285110473633, 2.3037264347076416, 2.303515911102295, 2.303368091583252, 2.303260326385498, 2.303173542022705, 2.303102970123291, 2.303046941757202, 2.3030002117156982, 2.3029634952545166, 2.3029332160949707, 2.3029074668884277, 2.302884817123413, 2.3028643131256104, 2.3028459548950195, 2.3028290271759033, 2.30281400680542, 2.3028008937835693, 2.302788734436035, 2.3027777671813965, 2.302767515182495, 2.302757740020752, 2.3027493953704834], "val_accuracy": [0.06499999761581421, 0.06866666674613953, 0.07400000095367432, 0.0806666687130928, 0.0833333358168602, 0.0846666693687439, 0.09133332967758179, 0.09166666865348816, 0.09533333033323288, 0.10166666656732559, 0.10599999874830246, 0.10766666382551193, 0.10899999737739563, 0.11133333295583725, 0.11166666448116302, 0.11133333295583725, 0.11166666448116302, 0.11133333295583725, 0.11033333092927933, 0.11266666650772095, 0.11266666650772095, 0.11266666650772095, 0.1120000034570694, 0.11133333295583725, 0.11033333092927933]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [1, 71], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 1, 0], [0, 2, 0, 3, 5], [16, 16], [0, 1], [0], [0], [13], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 2, 3, 4, 8, 4, 4, 1, 4, 2, 8, 9, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 85, 61, 6, 0]], "fitness": -0.10400000214576721, "mapping_values": [1, 9, 5, 4, 2, 12, 7, 5, 2, 2, 1, 1, 1, 21, 13, 8, 7], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(beta, tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), tf.constant(0.0, shape=shape, dtype=tf.float32))), sigma), alpha)", "other_info": {"loss": [86436065837056.0, 98148189995008.0, 99693681967104.0, 98832633298944.0, 98488356438016.0, 99386289815552.0], "accuracy": [0.09615638852119446, 0.0948355570435524, 0.09774138033390045, 0.09787346422672272, 0.09338264167308807, 0.09536388516426086], "val_loss": [69834381459456.0, 69834364682240.0, 69834305961984.0, 69834222075904.0, 69835778162688.0, 69835723636736.0], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 9], [0, 1, 2, 2], [8, 83], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 9, 8], [0, 3, 2, 3], [16, 16], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [2, 3, 1, 7, 0, 3, 2, 0, 6, 5, 0, 4], [0, 6, 5, 7, 4, 1, 5, 1, 0], [18, 23], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 6, 3, 6, 8, 0, 4, 1, 4, 2, 8], [0, 0, 3, 3, 0, 0, 3, 1, 2, 0], [61, 99, 83, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 7, 5, 2, 2, 21, 12, 9, 2, 17, 9, 8, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(grad, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(grad, tf.math.add(grad, tf.math.negative(tf.math.multiply(grad, grad)))), tf.math.add(tf.math.negative(tf.math.divide_no_nan(alpha, tf.math.square(tf.math.negative(tf.math.pow(grad, alpha))))), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, sigma))), tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [1, 2, 0, 2], [39, 29], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [2, 2, 3, 0, 9, 5], [0, 3, 0, 3], [16, 16, 62], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 1, 0], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 8, 5, 3, 3, 2, 1, 1, 1, 24, 13, 11, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.subtract(alpha, beta)))), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]