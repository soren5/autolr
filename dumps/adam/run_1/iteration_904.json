[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8420000076293945, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2217540740966797, 1.863067626953125, 1.3878254890441895, 1.0980291366577148, 0.9352248311042786, 0.8370600938796997, 0.7681164145469666, 0.7216915488243103, 0.6932216286659241, 0.6548025012016296, 0.6380682587623596, 0.6154102087020874, 0.5960635542869568, 0.5821530818939209, 0.5594072937965393, 0.5413471460342407, 0.5375832319259644, 0.518925130367279, 0.5103529095649719, 0.49545183777809143, 0.4893612563610077, 0.4724498391151428, 0.46444645524024963, 0.4564763009548187, 0.4525127410888672, 0.4449611306190491, 0.43328601121902466, 0.43611615896224976, 0.42612361907958984, 0.41416341066360474, 0.40082889795303345, 0.40455883741378784, 0.38980773091316223, 0.38975417613983154, 0.3825526535511017, 0.3724263906478882, 0.36777356266975403, 0.36906754970550537, 0.3579554855823517, 0.35291680693626404, 0.3437531888484955, 0.34771257638931274, 0.33671727776527405, 0.3263319730758667, 0.32878774404525757, 0.32774022221565247, 0.3224690556526184, 0.31058722734451294], "accuracy": [0.26878878474235535, 0.4811781942844391, 0.5694096088409424, 0.6168273687362671, 0.6684718132019043, 0.7014925479888916, 0.7293620109558105, 0.7417778372764587, 0.7471932172775269, 0.7617223858833313, 0.7660810947418213, 0.7769119143486023, 0.7845727205276489, 0.7877426743507385, 0.8009510040283203, 0.8041210174560547, 0.8072909712791443, 0.817461371421814, 0.8148196935653687, 0.8210275769233704, 0.8234050869941711, 0.8278959393501282, 0.8325188159942627, 0.8374059200286865, 0.8411042094230652, 0.8370096683502197, 0.8455950617790222, 0.8446704745292664, 0.848368763923645, 0.8494254350662231, 0.8582749962806702, 0.8539162874221802, 0.8640866279602051, 0.8609166741371155, 0.8631620407104492, 0.8668603897094727, 0.8742570281028748, 0.8673887252807617, 0.867520809173584, 0.8753136992454529, 0.8770307898521423, 0.8735966086387634, 0.8804649114608765, 0.8812574148178101, 0.8820499181747437, 0.8819178342819214, 0.8831065893173218, 0.8861445188522339], "val_loss": [2.0370192527770996, 1.504202961921692, 1.0189791917800903, 0.8122422099113464, 0.7229890823364258, 0.6686658263206482, 0.6278957724571228, 0.5943149328231812, 0.5704357624053955, 0.5443902015686035, 0.5308492183685303, 0.5163589119911194, 0.49922940135002136, 0.4870535135269165, 0.4767729640007019, 0.4645148813724518, 0.4571606516838074, 0.44832462072372437, 0.44479626417160034, 0.4368017911911011, 0.4296790659427643, 0.4209642708301544, 0.41246435046195984, 0.408970445394516, 0.4009515047073364, 0.3966357707977295, 0.39824703335762024, 0.39059683680534363, 0.3821689486503601, 0.37736180424690247, 0.3788333237171173, 0.37800610065460205, 0.3718339800834656, 0.3706477880477905, 0.36368268728256226, 0.3614540994167328, 0.3582746684551239, 0.3537276089191437, 0.35350093245506287, 0.3503054976463318, 0.3519623279571533, 0.34421485662460327, 0.3419211506843567, 0.34466543793678284, 0.34233996272087097, 0.344102144241333, 0.34000399708747864, 0.33599188923835754], "val_accuracy": [0.5210000276565552, 0.6676666736602783, 0.6933333277702332, 0.7089999914169312, 0.7379999756813049, 0.7553333044052124, 0.7616666555404663, 0.7789999842643738, 0.7863333225250244, 0.79666668176651, 0.8056666851043701, 0.8119999766349792, 0.8133333325386047, 0.8223333358764648, 0.8226666450500488, 0.8320000171661377, 0.8383333086967468, 0.8426666855812073, 0.843666672706604, 0.846666693687439, 0.8539999723434448, 0.8516666889190674, 0.8569999933242798, 0.8569999933242798, 0.859000027179718, 0.8616666793823242, 0.8606666922569275, 0.8636666536331177, 0.8656666874885559, 0.8693333268165588, 0.8683333396911621, 0.8653333187103271, 0.871666669845581, 0.8709999918937683, 0.8690000176429749, 0.871999979019165, 0.8726666569709778, 0.8730000257492065, 0.875, 0.8756666779518127, 0.8726666569709778, 0.878333330154419, 0.8816666603088379, 0.8736666440963745, 0.8773333430290222, 0.8756666779518127, 0.8799999952316284, 0.8806666731834412]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [64, 39, 11], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 1, 1], [3, 2, 0, 0, 0, 3], [88, 16, 55], [0, 1, 0], [2, 9], [0], [99, 69], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 2, 3, 3, 1, 2, 0], [16, 99, 96, 99, 1, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(beta, tf.math.pow(sigma, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}, "mapping_values": [1, 6, 3, 3, 3, 14, 8, 6, 3, 3, 2, 1, 2, 21, 11, 10, 4], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 3, 8, 4, 0, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3], [4, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 6, 3, 3, 2, 2, 1, 1, 1, 25, 14, 11, 6], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.pow(alpha, beta)))))), tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.square(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 7, 2, 4, 5, 5], [0, 1, 0, 2, 0, 3, 0], [39, 39, 58, 88], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 3, 3, 5], [0, 2, 0, 3], [16, 72], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 2, 5, 8, 5, 2, 0, 7], [0, 0, 0, 3, 0, 0, 3, 4, 3, 0, 4, 7, 0, 6], [16, 49, 96, 7, 61, 1, 90]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 10, 7, 4, 1, 0, 1, 1, 2, 1, 1, 1, 33, 19, 14, 7], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(grad, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(grad), tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(sigma, tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(tf.math.square(tf.math.sqrt(sigma)), tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), grad))), tf.math.add(grad, tf.math.negative(tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [2, 5, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 9, 0, 3, 9], [0, 2, 0, 3], [56, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 0, 3, 0, 4, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 93, 61, 1]], "fitness": -0.09057142585515976, "mapping_values": [1, 6, 3, 3, 1, 5, 4, 1, 2, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.square(alpha), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad)))))), alpha)", "other_info": {"loss": [2.3109123706817627, 2.3091881275177, 2.310173273086548, 2.3088064193725586, 2.3097825050354004, 2.3075780868530273], "accuracy": [0.09153348207473755, 0.09708096832036972, 0.08981640636920929, 0.09351472556591034, 0.08875974267721176, 0.09536388516426086], "val_loss": [2.308807611465454, 2.308807611465454, 2.308807611465454, 2.308807611465454, 2.308807611465454, 2.308807611465454], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}]