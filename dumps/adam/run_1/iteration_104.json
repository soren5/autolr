[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8608571290969849, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2223379611968994, 1.867207407951355, 1.4011763334274292, 1.1028321981430054, 0.9414984583854675, 0.8409296870231628, 0.7765895128250122, 0.728643536567688, 0.6994617581367493, 0.6596521139144897, 0.6379194259643555, 0.6173688769340515, 0.5962722301483154, 0.5829014182090759, 0.5591204166412354, 0.5465323328971863, 0.5318101644515991, 0.5277771949768066, 0.5060712099075317, 0.495226114988327, 0.4919050633907318, 0.48529863357543945, 0.47548267245292664, 0.4607006907463074, 0.45456427335739136, 0.4525000751018524, 0.44078031182289124, 0.4253932535648346, 0.42402586340904236, 0.41697269678115845, 0.40745341777801514, 0.40821802616119385, 0.4003101885318756, 0.3882065713405609, 0.39025482535362244, 0.38171127438545227, 0.37111571431159973, 0.3636588156223297, 0.36113977432250977, 0.35931140184402466, 0.35308077931404114, 0.3477513790130615, 0.3384060561656952, 0.33830785751342773, 0.32945889234542847, 0.31953638792037964, 0.3272050619125366, 0.3214496374130249, 0.3185690641403198, 0.3109038174152374, 0.3000567853450775, 0.3060421049594879, 0.2894887924194336, 0.29022344946861267, 0.2849683165550232, 0.2805251181125641, 0.2773871421813965, 0.27593329548835754, 0.2740125060081482, 0.2674126625061035, 0.26448944211006165, 0.2622552216053009, 0.2519213855266571, 0.2454659640789032, 0.24778516590595245, 0.24092961847782135, 0.24071688950061798, 0.23808543384075165, 0.2323618084192276, 0.23399345576763153, 0.2267920970916748, 0.22202429175376892, 0.21597956120967865, 0.2124556601047516, 0.2180635929107666, 0.2102956920862198], "accuracy": [0.266939640045166, 0.47510236501693726, 0.5605600476264954, 0.6118082404136658, 0.6623960137367249, 0.6989829540252686, 0.7193237543106079, 0.7341170310974121, 0.7437590956687927, 0.7580240368843079, 0.765949010848999, 0.7808743715286255, 0.7815347909927368, 0.7877426743507385, 0.798309326171875, 0.8043851256370544, 0.8109893202781677, 0.8124422430992126, 0.8183859586715698, 0.8211596608161926, 0.8244617581367493, 0.826310932636261, 0.8302733898162842, 0.8338396549224854, 0.8411042094230652, 0.8399154543876648, 0.8429533839225769, 0.8462554216384888, 0.8495575189590454, 0.8524633646011353, 0.8565579056739807, 0.856689989566803, 0.8580108284950256, 0.8646149635314941, 0.8619733452796936, 0.8650112152099609, 0.8654074668884277, 0.874389111995697, 0.8717474341392517, 0.8757099509239197, 0.8737286925315857, 0.8745211958885193, 0.8792761564254761, 0.8772949576377869, 0.8812574148178101, 0.8853520154953003, 0.8820499181747437, 0.8878615498542786, 0.8845595121383667, 0.8873332738876343, 0.8923524022102356, 0.8891823887825012, 0.8948619961738586, 0.895918607711792, 0.8949940800666809, 0.900409460067749, 0.9010698795318604, 0.8989565372467041, 0.9001452922821045, 0.90423983335495, 0.908730685710907, 0.9064852595329285, 0.9075419306755066, 0.9116365313529968, 0.9126931428909302, 0.9129573106765747, 0.9095231890678406, 0.9138818979263306, 0.9148064851760864, 0.910711944103241, 0.9174481630325317, 0.9199577569961548, 0.9212785363197327, 0.9243164658546448, 0.9222031235694885, 0.9224672913551331], "val_loss": [2.0417263507843018, 1.5256128311157227, 1.0616666078567505, 0.8555106520652771, 0.7581008076667786, 0.6977981925010681, 0.6536430716514587, 0.6167684197425842, 0.5907008051872253, 0.5639164447784424, 0.5511260032653809, 0.5308828353881836, 0.5120496153831482, 0.4971880316734314, 0.4869423806667328, 0.4799436330795288, 0.4651358127593994, 0.4558474123477936, 0.45329466462135315, 0.44138404726982117, 0.43339991569519043, 0.4298168420791626, 0.42176419496536255, 0.4161944091320038, 0.41488996148109436, 0.40860041975975037, 0.3984502851963043, 0.39331063628196716, 0.3969414532184601, 0.38765519857406616, 0.3877106010913849, 0.38001158833503723, 0.37388429045677185, 0.3769391179084778, 0.3724517524242401, 0.37246689200401306, 0.3747499883174896, 0.3680493235588074, 0.36064451932907104, 0.3684103190898895, 0.3605629801750183, 0.36015260219573975, 0.3573320209980011, 0.35438618063926697, 0.3531918227672577, 0.35003015398979187, 0.3532240092754364, 0.35598552227020264, 0.3469844162464142, 0.3463193476200104, 0.34474602341651917, 0.3401316702365875, 0.3454689085483551, 0.3379896283149719, 0.341533362865448, 0.34043604135513306, 0.337053507566452, 0.3405020534992218, 0.33376380801200867, 0.3369687497615814, 0.3326661288738251, 0.3347012996673584, 0.3335651159286499, 0.33553528785705566, 0.33612239360809326, 0.34234216809272766, 0.33114948868751526, 0.3301366865634918, 0.3293215036392212, 0.3335414528846741, 0.32386308908462524, 0.3289845287799835, 0.32869836688041687, 0.3340151607990265, 0.3309580385684967, 0.32569193840026855], "val_accuracy": [0.5270000100135803, 0.637333333492279, 0.6756666898727417, 0.699999988079071, 0.731333315372467, 0.7459999918937683, 0.7590000033378601, 0.7733333110809326, 0.7836666703224182, 0.7976666688919067, 0.7963333129882812, 0.8066666722297668, 0.8190000057220459, 0.8243333101272583, 0.8246666789054871, 0.8236666917800903, 0.8333333134651184, 0.8360000252723694, 0.8353333473205566, 0.8423333168029785, 0.843999981880188, 0.8446666598320007, 0.8460000157356262, 0.8486666679382324, 0.8523333072662354, 0.8523333072662354, 0.8543333411216736, 0.8583333492279053, 0.8553333282470703, 0.8576666712760925, 0.8583333492279053, 0.8640000224113464, 0.8640000224113464, 0.8603333234786987, 0.8636666536331177, 0.8663333058357239, 0.8636666536331177, 0.8679999709129333, 0.8686666488647461, 0.8650000095367432, 0.8656666874885559, 0.8686666488647461, 0.8693333268165588, 0.871999979019165, 0.8709999918937683, 0.8726666569709778, 0.8713333606719971, 0.8706666827201843, 0.8703333139419556, 0.8733333349227905, 0.8713333606719971, 0.875333309173584, 0.8756666779518127, 0.8740000128746033, 0.878333330154419, 0.8766666650772095, 0.8790000081062317, 0.8809999823570251, 0.8773333430290222, 0.8790000081062317, 0.8840000033378601, 0.8846666812896729, 0.8823333382606506, 0.8816666603088379, 0.8830000162124634, 0.8853333592414856, 0.8826666474342346, 0.8806666731834412, 0.8840000033378601, 0.8843333125114441, 0.8883333206176758, 0.8883333206176758, 0.887333333492279, 0.8843333125114441, 0.8859999775886536, 0.887333333492279]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 9], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 1, 1, 4, 1, 8], [0, 0, 2, 3, 0, 0, 3, 1, 2, 2], [16, 28, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 5, 2, 2, 10, 6, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303684711456299, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 1, 3], [16, 70], [0, 1, 0, 1], [1, 5], [0, 5], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 9, 8, 1, 2, 1, 4, 8, 8], [0, 0, 0, 3, 0, 0, 3, 3, 2, 0], [16, 65, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 4, 2, 2, 1, 12, 7, 5, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3035387992858887, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025853633880615, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10210011899471283, 0.09866596013307571, 0.09800554811954498, 0.10011887550354004, 0.09985470771789551, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025848865509033, 2.3025853633880615, 2.3025848865509033, 2.3025848865509033, 2.3025853633880615], "val_accuracy": [0.10000000149011612, 0.10166666656732559, 0.09666666388511658, 0.09666666388511658, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 9, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 2, 2, 0, 3, 5, 6, 7, 7, 6, 5, 8, 9], [0, 2, 1, 3, 4, 5, 5], [16, 16], [0, 1], [9], [1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 2, 3, 0, 3, 2, 1, 2, 0], [16, 99, 96, 99, 61, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 0, 1, 20, 13, 7, 2, 1, 1, 0, 1, 18, 9, 9, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(grad, tf.math.square(grad))), tf.math.sqrt(grad))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(beta, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, beta)))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 2, 3, 0, 3, 8], [0, 1, 0, 0, 1], [39, 39, 48], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 2, 3, 0, 3, 3, 2, 1, 6, 6, 9], [0, 2, 0, 3, 5, 1, 5, 4], [16, 16, 13], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [6, 3, 1, 6, 8, 1, 4, 1, 1, 2, 8, 6, 0, 7, 9, 3, 5], [0, 0, 4, 3, 4, 1, 3, 4, 2, 0, 0, 5], [16, 99, 96, 99, 10, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 19, 11, 8, 3, 2, 1, 1, 1, 29, 17, 12, 5], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.add(grad, tf.math.subtract(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, grad), grad), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(grad, tf.math.subtract(alpha, tf.math.add(sigma, tf.math.sqrt(tf.math.divide_no_nan(grad, beta))))))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}]