[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8577142953872681, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224658250808716, 1.8725799322128296, 1.3996719121932983, 1.108605980873108, 0.940767228603363, 0.8446791768074036, 0.784760057926178, 0.7454055547714233, 0.7153727412223816, 0.6730300188064575, 0.646108090877533, 0.6199544072151184, 0.6079323887825012, 0.5849327445030212, 0.565991997718811, 0.556082010269165, 0.5421698093414307, 0.5318663716316223, 0.518530011177063, 0.502149224281311, 0.489936500787735, 0.48128923773765564, 0.47640275955200195, 0.46312329173088074, 0.4522976875305176, 0.44750574231147766, 0.4422936737537384, 0.43707218766212463, 0.4345211684703827, 0.4225653409957886, 0.418050616979599, 0.4139540195465088, 0.40169915556907654, 0.3969559073448181, 0.3878716826438904, 0.38417568802833557, 0.38260525465011597, 0.37453484535217285, 0.3697308301925659, 0.3684426546096802, 0.3697940707206726, 0.3574620485305786, 0.3505806624889374, 0.34369611740112305, 0.34069719910621643, 0.33205074071884155, 0.33016836643218994, 0.3236926794052124, 0.32208672165870667, 0.32062652707099915, 0.31553369760513306, 0.30832648277282715, 0.3060641288757324, 0.2981683313846588, 0.2963024973869324, 0.2914007306098938, 0.28595393896102905, 0.2876890301704407, 0.2809349298477173, 0.27409112453460693, 0.2750028073787689, 0.2662033438682556, 0.26307228207588196], "accuracy": [0.27143046259880066, 0.4955752193927765, 0.5604279637336731, 0.6131290197372437, 0.6622639298439026, 0.696209192276001, 0.7215691208839417, 0.7326641082763672, 0.7430986762046814, 0.752740740776062, 0.763967752456665, 0.7733456492424011, 0.7703077793121338, 0.7827235460281372, 0.7923656105995178, 0.7979130744934082, 0.8029322624206543, 0.8115176558494568, 0.8190463781356812, 0.8198388814926147, 0.8241975903511047, 0.8285563588142395, 0.8305375576019287, 0.8350284099578857, 0.8381983637809753, 0.8387266993522644, 0.8400475382804871, 0.8453308939933777, 0.8450667262077332, 0.8486329317092896, 0.8482366800308228, 0.8499537706375122, 0.8557654023170471, 0.8654074668884277, 0.8642187118530273, 0.8607845902442932, 0.8598600029945374, 0.8644828796386719, 0.8677849769592285, 0.8625016212463379, 0.8692378997802734, 0.8722757697105408, 0.8755778670310974, 0.8747853636741638, 0.8772949576377869, 0.8802007436752319, 0.8802007436752319, 0.8842953443527222, 0.883238673210144, 0.8819178342819214, 0.8842953443527222, 0.8906353116035461, 0.8842953443527222, 0.8901069760322571, 0.8910315632820129, 0.8918240666389465, 0.9001452922821045, 0.8922203183174133, 0.8977677822113037, 0.9000132083892822, 0.8993527889251709, 0.9072777628898621, 0.9045040011405945], "val_loss": [2.0419085025787354, 1.5171726942062378, 1.0350645780563354, 0.8208426833152771, 0.7307094931602478, 0.67242431640625, 0.6298732757568359, 0.5995061993598938, 0.5722512006759644, 0.5546675324440002, 0.5290343165397644, 0.5138846635818481, 0.5040422081947327, 0.48788782954216003, 0.47871601581573486, 0.4655885398387909, 0.4618496000766754, 0.4455508887767792, 0.43619635701179504, 0.4292060136795044, 0.4250568449497223, 0.41734692454338074, 0.4122108519077301, 0.40475863218307495, 0.40256205201148987, 0.39766788482666016, 0.39227551221847534, 0.3952980041503906, 0.3849380314350128, 0.3857942819595337, 0.3753293454647064, 0.37992382049560547, 0.3740893006324768, 0.3721686899662018, 0.36512812972068787, 0.3622475862503052, 0.35956835746765137, 0.3576386570930481, 0.35598787665367126, 0.36403369903564453, 0.3550921678543091, 0.3506127893924713, 0.3442229926586151, 0.34729892015457153, 0.3446634113788605, 0.34735801815986633, 0.3402676582336426, 0.33914124965667725, 0.3395950198173523, 0.3358197808265686, 0.3335033655166626, 0.3362398147583008, 0.3311380445957184, 0.3322153091430664, 0.3332654535770416, 0.3276272714138031, 0.3298998475074768, 0.32571321725845337, 0.32458966970443726, 0.3275361657142639, 0.32447269558906555, 0.3250322937965393, 0.32216447591781616], "val_accuracy": [0.5450000166893005, 0.6539999842643738, 0.6949999928474426, 0.7176666855812073, 0.7440000176429749, 0.7570000290870667, 0.7730000019073486, 0.7799999713897705, 0.7839999794960022, 0.793666660785675, 0.8116666674613953, 0.8180000185966492, 0.8146666884422302, 0.8186666369438171, 0.8299999833106995, 0.8296666741371155, 0.8289999961853027, 0.8389999866485596, 0.8420000076293945, 0.8476666808128357, 0.8460000157356262, 0.8519999980926514, 0.8510000109672546, 0.8556666374206543, 0.8560000061988831, 0.8573333621025085, 0.8583333492279053, 0.8566666841506958, 0.8613333106040955, 0.8616666793823242, 0.8640000224113464, 0.862666666507721, 0.862333357334137, 0.8703333139419556, 0.8659999966621399, 0.8679999709129333, 0.8686666488647461, 0.871666669845581, 0.8709999918937683, 0.8703333139419556, 0.8706666827201843, 0.8740000128746033, 0.8756666779518127, 0.8740000128746033, 0.878000020980835, 0.8713333606719971, 0.8776666522026062, 0.8766666650772095, 0.875333309173584, 0.878333330154419, 0.8766666650772095, 0.8776666522026062, 0.8826666474342346, 0.8776666522026062, 0.8803333044052124, 0.8776666522026062, 0.8820000290870667, 0.8833333253860474, 0.8826666474342346, 0.8816666603088379, 0.8823333382606506, 0.8816666603088379, 0.8833333253860474]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [78, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 7, 4, 4, 5, 3], [0, 2, 0, 3, 5, 3, 0, 5], [16, 16, 16], [1, 1], [0], [0], [42], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [9, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [1, 3, 0, 3, 4, 4, 3, 1, 2, 0], [4, 99, 96, 99, 61, 1]], "fitness": -0.10542856901884079, "mapping_values": [1, 9, 5, 4, 1, 19, 11, 8, 3, 1, 0, 1, 1, 1, 1, 0, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.pow(grad, tf.math.square(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3065271377563477, 2.3026156425476074, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.08519349992275238, 0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3026318550109863, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10499999672174454, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [0, 2, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 2, 3, 2, 8, 1, 4, 1, 4, 2, 8, 3, 5, 7, 1, 6], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0, 6, 7, 7, 6], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 2, 1, 1, 1, 30, 16, 14, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.multiply(alpha, beta)))))), tf.math.square(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.divide_no_nan(grad, grad))))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 0, 3], [0, 1, 0, 2, 0], [39, 39, 22], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 6, 8, 6, 5, 3, 3, 0, 4, 2, 4, 2, 1, 5, 9, 7, 5], [0, 2, 0, 3, 3, 4, 1, 1, 3, 3, 3, 4, 5], [16, 13, 19], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 6, 3, 5], [3, 4, 1, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 4, 0, 8], [0, 4, 0, 3, 0, 0, 3, 1, 3, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 35, 22, 13, 3, 9, 5, 4, 0, 20, 11, 9, 4], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(beta), tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(grad), grad))), tf.math.pow(grad, alpha)))))), tf.math.add(alpha, tf.math.pow(tf.math.add(grad, tf.math.subtract(tf.math.square(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad)), grad))), tf.math.add(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(sigma, grad), tf.math.square(alpha)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.negative(tf.math.sqrt(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1, 0, 0, 1, 1], [3, 0, 6], [0, 4, 5], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 3, 3, 6, 8, 1, 4, 1, 4, 2, 4, 2, 8, 2, 3, 1, 4, 9, 9], [0, 2, 0, 3, 0, 0, 3, 1, 2, 0, 2, 2, 5, 1], [16, 99, 5, 99, 61, 1, 76]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(beta, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.pow(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(beta), tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.pow(beta, grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}, "mapping_values": [1, 9, 5, 4, 1, 4, 2, 2, 0, 6, 3, 3, 1, 33, 19, 14, 7], "tree_depth": 18}]