[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8517143130302429, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2245283126831055, 1.8733413219451904, 1.3978394269943237, 1.0925921201705933, 0.9486364126205444, 0.8506244421005249, 0.7738294005393982, 0.7351084351539612, 0.6993852853775024, 0.6661965847015381, 0.6376440525054932, 0.6154162287712097, 0.5985559225082397, 0.5693889260292053, 0.5586621761322021, 0.5462775230407715, 0.5449157357215881, 0.5252295136451721, 0.5014225840568542, 0.4951944947242737, 0.477139949798584, 0.4709509015083313, 0.4693327248096466, 0.4600318670272827, 0.45093831419944763, 0.4456588327884674, 0.4375891089439392, 0.4302058815956116, 0.42215296626091003, 0.41185495257377625, 0.4065414071083069, 0.4001390039920807, 0.388068288564682, 0.38989949226379395, 0.380130797624588, 0.37797030806541443, 0.37359848618507385, 0.37009477615356445, 0.36946389079093933, 0.3574737012386322, 0.3496030271053314, 0.35189059376716614, 0.3425278067588806, 0.34000882506370544, 0.3303125500679016, 0.3259088397026062, 0.3262850046157837, 0.31846654415130615, 0.3133711814880371, 0.3061453700065613, 0.3091168701648712, 0.30087438225746155, 0.29618650674819946, 0.29139021039009094, 0.29368361830711365], "accuracy": [0.2744683623313904, 0.47985735535621643, 0.5571258664131165, 0.6192048788070679, 0.6623960137367249, 0.6877558827400208, 0.719852089881897, 0.7293620109558105, 0.739928662776947, 0.7541936039924622, 0.7691190242767334, 0.7769119143486023, 0.7820631265640259, 0.7873464822769165, 0.7957997918128967, 0.8055738806724548, 0.8030643463134766, 0.8025360107421875, 0.8185180425643921, 0.8232730031013489, 0.8251221776008606, 0.8321225643157959, 0.8293488025665283, 0.834632158279419, 0.8359529972076416, 0.8360850811004639, 0.8388587832450867, 0.8376700282096863, 0.8451988101005554, 0.8507462739944458, 0.8525954484939575, 0.8569541573524475, 0.8599920868873596, 0.8582749962806702, 0.8642187118530273, 0.8625016212463379, 0.863558292388916, 0.8617091774940491, 0.86553955078125, 0.8693699836730957, 0.8757099509239197, 0.867520809173584, 0.8750495314598083, 0.8705587387084961, 0.880729079246521, 0.8820499181747437, 0.8841632604598999, 0.8836349248886108, 0.8850878477096558, 0.8885219693183899, 0.886672854423523, 0.8898428082466125, 0.8912957310676575, 0.8957865834236145, 0.8930128216743469], "val_loss": [2.043862819671631, 1.5141801834106445, 1.0441334247589111, 0.8391584753990173, 0.7523354291915894, 0.6949871182441711, 0.6482318043708801, 0.6104881167411804, 0.5900312662124634, 0.5709899663925171, 0.5501893758773804, 0.5322301983833313, 0.5203691124916077, 0.508109986782074, 0.4982456564903259, 0.4904956519603729, 0.48777127265930176, 0.4776606559753418, 0.460898220539093, 0.45709437131881714, 0.4553719758987427, 0.4465884566307068, 0.4419543743133545, 0.439088374376297, 0.4335585832595825, 0.4267953336238861, 0.4207962155342102, 0.4247036278247833, 0.4109165072441101, 0.4092552959918976, 0.40828946232795715, 0.4051150381565094, 0.40665683150291443, 0.39729824662208557, 0.39893990755081177, 0.3951006531715393, 0.38685110211372375, 0.3872182071208954, 0.3881279230117798, 0.38212403655052185, 0.38299423456192017, 0.3788565397262573, 0.3801126182079315, 0.37557294964790344, 0.37267956137657166, 0.3753005266189575, 0.370577871799469, 0.3725244998931885, 0.36712542176246643, 0.3620598018169403, 0.363985151052475, 0.3673539161682129, 0.36685168743133545, 0.36666539311408997, 0.3620885908603668], "val_accuracy": [0.5396666526794434, 0.6583333611488342, 0.6790000200271606, 0.6996666789054871, 0.7283333539962769, 0.746999979019165, 0.7596666812896729, 0.7756666541099548, 0.7853333353996277, 0.7870000004768372, 0.7979999780654907, 0.8006666898727417, 0.8066666722297668, 0.809333324432373, 0.8206666707992554, 0.8223333358764648, 0.8209999799728394, 0.8263333439826965, 0.8320000171661377, 0.8303333520889282, 0.8360000252723694, 0.8386666774749756, 0.8376666903495789, 0.8376666903495789, 0.8383333086967468, 0.8433333039283752, 0.8493333458900452, 0.8410000205039978, 0.8529999852180481, 0.8536666631698608, 0.8536666631698608, 0.8536666631698608, 0.8483333587646484, 0.8550000190734863, 0.8526666760444641, 0.8569999933242798, 0.8613333106040955, 0.8583333492279053, 0.8573333621025085, 0.8640000224113464, 0.8653333187103271, 0.8613333106040955, 0.8653333187103271, 0.8613333106040955, 0.8713333606719971, 0.8633333444595337, 0.8693333268165588, 0.8679999709129333, 0.8690000176429749, 0.874666690826416, 0.8709999918937683, 0.871666669845581, 0.8706666827201843, 0.8693333268165588, 0.8723333477973938]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 4, 3, 4, 1, 4], [0, 1, 2, 2, 1, 0, 2, 3, 1], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 0, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 10, 9, 2, 8, 4, 4, 2, 2, 1, 1, 1, 10, 5, 5, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, tf.math.pow(tf.math.multiply(tf.math.pow(grad, tf.math.subtract(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad), tf.math.pow(grad, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.3038856983184814, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 9], [0, 2, 0, 3], [16, 16, 73], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [6, 3, 3, 2, 8, 8, 4, 1, 4, 2, 8, 3, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 83]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), sigma)), tf.math.sqrt(tf.math.multiply(alpha, beta))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3054862022399902, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}, "mapping_values": [1, 8, 5, 3, 2, 9, 6, 3, 3, 2, 1, 1, 1, 22, 13, 9, 6], "tree_depth": 22}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 6, 6, 8, 1, 2, 1, 4, 2, 6], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 99, 96, 15, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302980422973633, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09853387624025345, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 3, 6, 2, 1, 2, 2], [0, 1, 0, 2, 1, 1, 3, 0], [39, 39, 53], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 9, 4], [2, 2, 0, 3], [16, 35], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 8, 2, 8], [4, 0, 2, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 13, 1]], "fitness": -0.0908571407198906, "mapping_values": [1, 16, 8, 8, 3, 6, 3, 3, 1, 2, 1, 1, 1, 17, 9, 8, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(alpha, tf.math.add(alpha, tf.math.add(grad, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(beta, beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(beta), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.sqrt(alpha))))", "other_info": {"loss": [2.310394763946533, 2.310668706893921, 2.310216188430786, 2.309286594390869, 2.3091306686401367, 2.309319496154785], "accuracy": [0.09126931428909302, 0.09192973375320435, 0.09179764986038208, 0.08928807079792023, 0.09338264167308807, 0.09325055778026581], "val_loss": [2.3086483478546143, 2.3086278438568115, 2.30861234664917, 2.3085975646972656, 2.308582067489624, 2.308558702468872], "val_accuracy": [0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179]}}]