[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87971431016922, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2264158725738525, 1.883138656616211, 1.4228179454803467, 1.1245834827423096, 0.9636178016662598, 0.8570544123649597, 0.7892341613769531, 0.7428163290023804, 0.7103912234306335, 0.6776049137115479, 0.6464032530784607, 0.6186978220939636, 0.6058709025382996, 0.583882212638855, 0.5697414875030518, 0.5519570708274841, 0.5444625020027161, 0.5314995646476746, 0.5091581344604492, 0.5085999369621277, 0.4993470013141632, 0.47943422198295593, 0.4748769998550415, 0.4657655656337738, 0.4618813097476959, 0.45459797978401184, 0.450758159160614, 0.43135109543800354, 0.4276069402694702, 0.41853609681129456, 0.41742268204689026, 0.40973231196403503, 0.4136907458305359, 0.40421152114868164, 0.39682677388191223, 0.38752782344818115, 0.3869898021221161, 0.3718068301677704, 0.36564821004867554, 0.37274402379989624, 0.3558189570903778, 0.35788071155548096, 0.3505411446094513, 0.3386285901069641, 0.3320959806442261, 0.33276042342185974, 0.3289143145084381, 0.321180522441864, 0.3082222044467926, 0.3142070770263672, 0.31262820959091187, 0.30145516991615295], "accuracy": [0.275260865688324, 0.4839519262313843, 0.5514463186264038, 0.6107515692710876, 0.6618676781654358, 0.6889446377754211, 0.7149649858474731, 0.7290979027748108, 0.7412495017051697, 0.7477215528488159, 0.7637035846710205, 0.7744023203849792, 0.7738739848136902, 0.7891955971717834, 0.7895918488502502, 0.7991018295288086, 0.8012151718139648, 0.8090080618858337, 0.8178576231002808, 0.821820080280304, 0.8157442808151245, 0.8284242749214172, 0.829216718673706, 0.8278959393501282, 0.8342359066009521, 0.8378021121025085, 0.8330471515655518, 0.8466516733169556, 0.8494254350662231, 0.8492933511734009, 0.8477083444595337, 0.8498216867446899, 0.8525954484939575, 0.857218325138092, 0.8574824929237366, 0.8607845902442932, 0.8610487580299377, 0.8679170608520508, 0.8714832663536072, 0.8638224601745605, 0.873860776424408, 0.8709549307823181, 0.8710870146751404, 0.8790120482444763, 0.8811253309249878, 0.8771628737449646, 0.8787478804588318, 0.8828424215316772, 0.8891823887825012, 0.8885219693183899, 0.889050304889679, 0.8914278149604797], "val_loss": [2.042558193206787, 1.5261443853378296, 1.0402663946151733, 0.8248271346092224, 0.736682116985321, 0.6856681108474731, 0.630856454372406, 0.598153829574585, 0.5744801759719849, 0.5526587963104248, 0.5285207629203796, 0.5181156992912292, 0.5017104148864746, 0.49153435230255127, 0.48076191544532776, 0.4649498164653778, 0.45893189311027527, 0.44923800230026245, 0.4420507550239563, 0.43643489480018616, 0.4289519190788269, 0.4197063744068146, 0.41264986991882324, 0.4259133040904999, 0.4058433771133423, 0.4043295085430145, 0.3929573595523834, 0.39203089475631714, 0.3935169577598572, 0.3845237195491791, 0.38564860820770264, 0.38002195954322815, 0.37472012639045715, 0.37609320878982544, 0.37455037236213684, 0.36657071113586426, 0.3637740910053253, 0.36373937129974365, 0.3667456805706024, 0.36090803146362305, 0.3588749170303345, 0.35685160756111145, 0.3568505048751831, 0.35314202308654785, 0.35260334610939026, 0.35083016753196716, 0.3491746783256531, 0.3468281924724579, 0.3464011251926422, 0.34657803177833557, 0.34585586190223694, 0.3444811999797821], "val_accuracy": [0.5366666913032532, 0.6583333611488342, 0.6933333277702332, 0.7196666598320007, 0.7456666827201843, 0.7536666393280029, 0.7736666798591614, 0.7760000228881836, 0.7900000214576721, 0.7976666688919067, 0.8050000071525574, 0.8133333325386047, 0.8163333535194397, 0.8220000267028809, 0.8289999961853027, 0.831333339214325, 0.8303333520889282, 0.840666651725769, 0.8376666903495789, 0.8410000205039978, 0.8389999866485596, 0.8460000157356262, 0.8479999899864197, 0.8456666469573975, 0.8476666808128357, 0.8479999899864197, 0.8529999852180481, 0.8533333539962769, 0.8529999852180481, 0.859000027179718, 0.8566666841506958, 0.8583333492279053, 0.8616666793823242, 0.8586666584014893, 0.862666666507721, 0.8663333058357239, 0.8640000224113464, 0.8616666793823242, 0.8643333315849304, 0.8666666746139526, 0.8636666536331177, 0.8666666746139526, 0.8676666617393494, 0.8666666746139526, 0.8690000176429749, 0.871666669845581, 0.8733333349227905, 0.8683333396911621, 0.871666669845581, 0.871666669845581, 0.8730000257492065, 0.8700000047683716]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8602856993675232, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2242989540100098, 1.873699426651001, 1.3980967998504639, 1.0970786809921265, 0.9380642771720886, 0.8486694097518921, 0.7786091566085815, 0.7289666533470154, 0.7007204294204712, 0.662148118019104, 0.6277605295181274, 0.6066532135009766, 0.5967836976051331, 0.5776731967926025, 0.5571865439414978, 0.5431634187698364, 0.5355694890022278, 0.5182801485061646, 0.5110905170440674, 0.5066423416137695, 0.4889267385005951, 0.4801456332206726, 0.4668305516242981, 0.45513859391212463, 0.4574059545993805, 0.4509110450744629, 0.440500408411026, 0.43653634190559387, 0.43303269147872925, 0.4222866892814636, 0.41391298174858093, 0.41223496198654175, 0.40845954418182373, 0.3972037136554718, 0.38860830664634705, 0.37831392884254456, 0.3837234675884247, 0.3794326186180115, 0.3654589354991913, 0.35817039012908936, 0.35950279235839844, 0.3522089421749115, 0.35437923669815063, 0.34794294834136963, 0.34421977400779724, 0.33928701281547546, 0.3335314691066742, 0.3312018811702728, 0.3229089677333832, 0.3210293650627136, 0.31773442029953003, 0.3101428151130676, 0.30810481309890747, 0.30758368968963623], "accuracy": [0.27024170756340027, 0.4753665328025818, 0.5713908076286316, 0.6206578016281128, 0.6656980514526367, 0.6900013089179993, 0.7181349992752075, 0.7358341217041016, 0.7400607466697693, 0.7593448758125305, 0.7680623531341553, 0.7783648371696472, 0.7784969210624695, 0.7886672616004944, 0.7951393723487854, 0.8005547523498535, 0.8100647330284119, 0.8131026029586792, 0.8117818236351013, 0.8124422430992126, 0.8244617581367493, 0.8260467648506165, 0.8355567455291748, 0.8323867321014404, 0.8293488025665283, 0.839519202709198, 0.844010055065155, 0.8409721255302429, 0.8416325449943542, 0.8445383906364441, 0.8524633646011353, 0.8532558679580688, 0.8524633646011353, 0.8552370667457581, 0.8621054291725159, 0.8594637513160706, 0.8626337051391602, 0.8656716346740723, 0.8667283058166504, 0.8710870146751404, 0.8706908226013184, 0.8714832663536072, 0.8717474341392517, 0.872407853603363, 0.874389111995697, 0.8746532797813416, 0.8786157965660095, 0.8775591254234314, 0.8812574148178101, 0.8817857503890991, 0.8860124349594116, 0.8887861371040344, 0.8861445188522339, 0.8887861371040344], "val_loss": [2.0462920665740967, 1.5311692953109741, 1.0589234828948975, 0.8644711971282959, 0.7637085914611816, 0.7089155316352844, 0.6621626019477844, 0.628888726234436, 0.6003938913345337, 0.5836521983146667, 0.5688106417655945, 0.5401322245597839, 0.5256811380386353, 0.517178475856781, 0.501084566116333, 0.49293017387390137, 0.4849632978439331, 0.4776206314563751, 0.4660823941230774, 0.4657718241214752, 0.44773298501968384, 0.44752711057662964, 0.44084590673446655, 0.43318265676498413, 0.4407286047935486, 0.4241090416908264, 0.42125338315963745, 0.4158036410808563, 0.4087931215763092, 0.4035366177558899, 0.4024464190006256, 0.39653462171554565, 0.39406201243400574, 0.39919164776802063, 0.387518972158432, 0.3847959339618683, 0.38206934928894043, 0.37913164496421814, 0.3752806782722473, 0.37932494282722473, 0.3828234374523163, 0.37108832597732544, 0.36563846468925476, 0.368125319480896, 0.363219678401947, 0.3586108684539795, 0.3666565716266632, 0.35764381289482117, 0.3532348573207855, 0.3558492064476013, 0.3542332351207733, 0.35328561067581177, 0.35246458649635315, 0.3544691503047943], "val_accuracy": [0.515999972820282, 0.6359999775886536, 0.6769999861717224, 0.6783333420753479, 0.7229999899864197, 0.7406666874885559, 0.7506666779518127, 0.7590000033378601, 0.7726666927337646, 0.7799999713897705, 0.7776666879653931, 0.8006666898727417, 0.8053333163261414, 0.812333345413208, 0.8169999718666077, 0.8183333277702332, 0.8213333487510681, 0.8276666402816772, 0.8339999914169312, 0.8263333439826965, 0.8373333215713501, 0.8426666855812073, 0.8450000286102295, 0.8450000286102295, 0.8399999737739563, 0.8503333330154419, 0.8473333120346069, 0.8523333072662354, 0.856333315372467, 0.859333336353302, 0.8603333234786987, 0.8586666584014893, 0.8613333106040955, 0.8573333621025085, 0.8640000224113464, 0.8676666617393494, 0.8646666407585144, 0.8650000095367432, 0.8700000047683716, 0.8666666746139526, 0.8616666793823242, 0.8703333139419556, 0.871666669845581, 0.8696666955947876, 0.8696666955947876, 0.8730000257492065, 0.8686666488647461, 0.8730000257492065, 0.8799999952316284, 0.8733333349227905, 0.8766666650772095, 0.8769999742507935, 0.8773333430290222, 0.8730000257492065]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [1, 2, 3, 0, 3, 2, 7, 2, 8, 8, 2, 3, 6], [0, 1, 0, 2, 1, 2, 2, 1, 2, 0, 1], [39, 39, 61], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 8], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 36, 96, 99, 61, 17]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 13, 11, 3, 6, 3, 3, 2, 2, 1, 1, 1, 22, 12, 10, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(tf.math.add(tf.math.sqrt(alpha), tf.math.sqrt(tf.math.add(grad, grad))), tf.math.multiply(tf.math.divide_no_nan(alpha, grad), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.math.sqrt(tf.math.negative(alpha)), beta)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 6], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 2, 3, 0, 3, 5, 2, 4], [0, 2, 0, 3, 5, 0, 5], [16, 16, 81], [0, 1], [0], [1], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [8, 2, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 4, 0, 3, 0, 0, 3, 1, 2, 1], [16, 99, 96, 97, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(tf.math.pow(grad, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(grad, grad), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(sigma, tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}, "mapping_values": [1, 6, 3, 3, 2, 15, 8, 7, 3, 2, 1, 1, 0, 17, 9, 8, 3], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [3], [0, 6], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [6, 5, 3, 6, 2, 1, 4, 1, 4, 2, 1, 6, 4, 1, 9, 7, 0, 3, 6, 4, 1, 7, 3, 9, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0, 7, 3, 3, 2, 0, 4, 6, 2, 4], [16, 99, 96, 99, 61, 1, 8, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 3, 1, 2, 1, 44, 25, 19, 8], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma), tf.math.subtract(tf.math.divide_no_nan(alpha, beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(sigma, tf.math.add(sigma, beta)), tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), grad), grad))), tf.math.sqrt(beta)))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 2, 3], [2, 2, 0, 2, 0], [12, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [2, 3, 3, 6, 6, 1, 4, 1, 4, 2, 8, 5], [0, 0, 0, 2, 0, 0, 4, 1, 2, 0, 0], [16, 99, 96, 14, 61, 74, 8]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 10, 6, 4, 2, 2, 1, 1, 0, 23, 12, 11, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(grad, grad), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), beta)), tf.math.subtract(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad))), alpha)), tf.math.add(tf.math.sqrt(beta), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.4533587962890813e+18, 2.5285308375267017e+19, 7.138331633317105e+19, 1.2990184524406063e+20, 2.0616189586865075e+20, 2.9237377576982282e+20], "accuracy": [0.09787346422672272, 0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [9.887789321333768e+18, 4.846208769999451e+19, 1.0420333820005214e+20, 1.7271904464509967e+20, 2.5232213838371016e+20, 3.4182036178328145e+20], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]