[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8560000061988831, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223182201385498, 1.87144935131073, 1.3951376676559448, 1.0941721200942993, 0.9379295110702515, 0.8354882001876831, 0.773905336856842, 0.73024982213974, 0.6899721026420593, 0.6605761051177979, 0.6389930248260498, 0.6110137104988098, 0.5967025756835938, 0.5815480351448059, 0.5687386393547058, 0.5604819655418396, 0.5330703854560852, 0.5266975164413452, 0.5141667127609253, 0.5069939494132996, 0.4920083284378052, 0.4809167683124542, 0.4771120846271515, 0.4671182334423065, 0.46450650691986084, 0.44912225008010864, 0.4464140236377716, 0.4380747973918915, 0.42249804735183716, 0.42997491359710693, 0.41909459233283997, 0.40715500712394714, 0.40158402919769287, 0.39443498849868774, 0.38809821009635925, 0.38895073533058167, 0.38167476654052734, 0.3694070279598236, 0.3698044717311859, 0.3659455478191376, 0.3656955361366272, 0.3523922562599182, 0.3466024100780487, 0.3504325747489929, 0.34402841329574585, 0.34250408411026, 0.32866308093070984, 0.3344093859195709, 0.3217615485191345, 0.3148016631603241, 0.31063970923423767, 0.3198332190513611, 0.30645614862442017, 0.31113919615745544, 0.30181676149368286, 0.2919636070728302, 0.2926620543003082, 0.28568437695503235, 0.27863258123397827, 0.2814539670944214, 0.2769600749015808, 0.26929745078086853, 0.2647775113582611, 0.26262015104293823, 0.26830077171325684, 0.2584264576435089, 0.2535283863544464, 0.25144365429878235, 0.24790960550308228, 0.24876080453395844, 0.2431543916463852, 0.24007846415042877, 0.23409192264080048, 0.23079434037208557, 0.22899635136127472, 0.22558952867984772], "accuracy": [0.2693171203136444, 0.4811781942844391, 0.5560691952705383, 0.617751955986023, 0.665830135345459, 0.6984546184539795, 0.7199841737747192, 0.7378153204917908, 0.752740740776062, 0.759080708026886, 0.7716285586357117, 0.7763835787773132, 0.7866860628128052, 0.7858935594558716, 0.7932901978492737, 0.7959318161010742, 0.8047813773155212, 0.8092722296714783, 0.81548011302948, 0.8166688680648804, 0.8201030492782593, 0.8265751004219055, 0.8338396549224854, 0.8376700282096863, 0.830669641494751, 0.8368775844573975, 0.8362171649932861, 0.8442742228507996, 0.8474441766738892, 0.8500858545303345, 0.8537842035293579, 0.8560295701026917, 0.8555012345314026, 0.8621054291725159, 0.858671247959137, 0.8552370667457581, 0.863558292388916, 0.8687095642089844, 0.8652753829956055, 0.867520809173584, 0.8713511824607849, 0.8771628737449646, 0.8753136992454529, 0.8729361891746521, 0.878351628780365, 0.8772949576377869, 0.880729079246521, 0.8812574148178101, 0.8897107243537903, 0.8889182209968567, 0.8861445188522339, 0.8849557638168335, 0.8882578015327454, 0.8894465565681458, 0.8928807377815247, 0.8948619961738586, 0.8932769894599915, 0.8936732411384583, 0.8992207050323486, 0.9008057117462158, 0.901862382888794, 0.902390718460083, 0.9074098467826843, 0.9037115573883057, 0.9045040011405945, 0.9088627696037292, 0.910711944103241, 0.9096552729606628, 0.9101836085319519, 0.9084665179252625, 0.9122969508171082, 0.9137498140335083, 0.9171839952468872, 0.9138818979263306, 0.9154669046401978, 0.9190331697463989], "val_loss": [2.0417423248291016, 1.5220240354537964, 1.039921522140503, 0.8348760008811951, 0.7470135688781738, 0.6911209225654602, 0.6406529545783997, 0.6107175350189209, 0.5812886357307434, 0.5599278211593628, 0.5368277430534363, 0.5242234468460083, 0.507143497467041, 0.4964468479156494, 0.48596495389938354, 0.4740922152996063, 0.4662625193595886, 0.4540388286113739, 0.44619983434677124, 0.445095419883728, 0.43697160482406616, 0.4279431700706482, 0.425904780626297, 0.4213692247867584, 0.416852742433548, 0.4119194447994232, 0.4026942551136017, 0.40005508065223694, 0.39710333943367004, 0.393105149269104, 0.39008650183677673, 0.38367435336112976, 0.3815731108188629, 0.3836938440799713, 0.37755754590034485, 0.37373998761177063, 0.3685452342033386, 0.3680640459060669, 0.3629473149776459, 0.3629516661167145, 0.36056339740753174, 0.35816487669944763, 0.35930660367012024, 0.3596142530441284, 0.35371240973472595, 0.35479283332824707, 0.35471004247665405, 0.34911587834358215, 0.34348878264427185, 0.34626927971839905, 0.3464398682117462, 0.341195285320282, 0.3378077447414398, 0.3352728486061096, 0.33447974920272827, 0.3360517919063568, 0.33392009139060974, 0.33367809653282166, 0.3306238055229187, 0.3284834623336792, 0.3332688808441162, 0.3360061049461365, 0.3248472809791565, 0.3230731189250946, 0.32798323035240173, 0.32499217987060547, 0.32437947392463684, 0.325553297996521, 0.3224153518676758, 0.3231654167175293, 0.3187383711338043, 0.31755009293556213, 0.31862765550613403, 0.31906330585479736, 0.3140796720981598, 0.3170967102050781], "val_accuracy": [0.5423333048820496, 0.6473333239555359, 0.6893333196640015, 0.7043333053588867, 0.7279999852180481, 0.7453333139419556, 0.7609999775886536, 0.7696666717529297, 0.7833333611488342, 0.7940000295639038, 0.8043333292007446, 0.8106666803359985, 0.815666675567627, 0.8163333535194397, 0.8273333311080933, 0.8306666612625122, 0.8336666822433472, 0.8396666646003723, 0.8426666855812073, 0.8433333039283752, 0.8423333168029785, 0.847000002861023, 0.8476666808128357, 0.8516666889190674, 0.8500000238418579, 0.8546666502952576, 0.8536666631698608, 0.8576666712760925, 0.859333336353302, 0.8600000143051147, 0.8636666536331177, 0.8619999885559082, 0.8663333058357239, 0.8659999966621399, 0.8640000224113464, 0.8676666617393494, 0.8679999709129333, 0.8696666955947876, 0.871666669845581, 0.8713333606719971, 0.875, 0.875333309173584, 0.8703333139419556, 0.8709999918937683, 0.8766666650772095, 0.8740000128746033, 0.8723333477973938, 0.8740000128746033, 0.8790000081062317, 0.8793333172798157, 0.875, 0.878333330154419, 0.8776666522026062, 0.8826666474342346, 0.8820000290870667, 0.8803333044052124, 0.8796666860580444, 0.8830000162124634, 0.8849999904632568, 0.8830000162124634, 0.8823333382606506, 0.8846666812896729, 0.8840000033378601, 0.8853333592414856, 0.8880000114440918, 0.8823333382606506, 0.8846666812896729, 0.8849999904632568, 0.8856666684150696, 0.8889999985694885, 0.8893333077430725, 0.8853333592414856, 0.8883333206176758, 0.887666642665863, 0.8889999985694885, 0.8883333206176758]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 8, 8, 5, 4], [0, 2, 0, 3, 5], [16, 16], [0, 1], [0], [0], [48], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1], [6, 3, 3, 8, 8, 1, 4, 1, 4, 2, 8, 4, 8, 1, 2, 7, 9, 7, 9], [0, 3, 0, 3, 0, 0, 3, 1, 2, 2, 6, 2], [16, 99, 7, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 15, 10, 5, 2, 2, 1, 1, 1, 31, 19, 12, 6], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), tf.math.pow(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.sqrt(sigma), tf.math.subtract(alpha, beta))), beta), tf.math.add(grad, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 9, 0, 3, 5], [0, 2, 0, 3], [77, 99], [0, 1], [0], [2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 2, 4, 6, 8, 1, 4, 8, 4, 2, 6], [0, 0, 0, 0, 0, 0, 3, 1, 2, 0], [71, 99, 96, 99, 61, 1, 14]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 5, 4, 1, 2, 2, 1, 1, 0, 21, 11, 10, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(tf.math.pow(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.divide_no_nan(alpha, beta)))), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303619146347046, 2.302586317062378, 2.3025856018066406, 2.3025858402252197, 2.3025856018066406, 2.3025851249694824], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025872707366943, 2.3025882244110107, 2.30258846282959, 2.302588939666748, 2.3025894165039062, 2.3025898933410645], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 4, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5, 8, 6, 8, 9], [0, 2, 0, 3], [16, 16, 87], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4], [4, 0, 4, 3, 0, 0, 3, 1, 2, 0, 7], [16, 99, 96, 99, 61, 84]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 14, 10, 4, 3, 2, 1, 1, 1, 23, 12, 11, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(sigma, tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))))), alpha), tf.math.add(tf.math.sqrt(beta), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [37, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [6, 0, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1, 1], [6], [0, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 4, 6, 8, 1, 4, 1, 4, 2, 8, 2, 9], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 6, 3, 3, 1, 3, 1, 2, 1, 23, 13, 10, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.add(alpha, beta)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]