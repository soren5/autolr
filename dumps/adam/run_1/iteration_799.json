[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8748571276664734, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2258684635162354, 1.87617027759552, 1.4060001373291016, 1.107964038848877, 0.9529731869697571, 0.8465049266815186, 0.7821751236915588, 0.7437511682510376, 0.7090396285057068, 0.6807673573493958, 0.6517983675003052, 0.6386362314224243, 0.6059474945068359, 0.5871089696884155, 0.5739483833312988, 0.5556986927986145, 0.5477311015129089, 0.5327669978141785, 0.5312160849571228, 0.5089123845100403, 0.5059342384338379, 0.4975777864456177, 0.4851260781288147, 0.4733719825744629, 0.470976859331131, 0.4679020643234253, 0.45037785172462463, 0.44401419162750244, 0.43842023611068726, 0.43251386284828186, 0.4279976487159729, 0.4285743832588196, 0.40758585929870605, 0.4103706479072571, 0.3941722512245178, 0.39845019578933716, 0.38035598397254944, 0.3725196421146393, 0.3774692416191101, 0.37349608540534973, 0.3683551251888275, 0.3599908947944641, 0.35534730553627014, 0.35170960426330566, 0.35110044479370117, 0.34884852170944214, 0.342790424823761, 0.3365249037742615, 0.33006560802459717, 0.3285028636455536, 0.3266548216342926, 0.30673864483833313, 0.30755048990249634, 0.3122331202030182, 0.30110153555870056, 0.2975134253501892, 0.298357218503952, 0.2914171516895294, 0.28682246804237366, 0.28358012437820435, 0.27042946219444275, 0.2752922773361206, 0.26233330368995667, 0.2638842761516571, 0.25265100598335266, 0.25320836901664734, 0.25972461700439453, 0.2559259831905365, 0.2491672784090042, 0.24222242832183838, 0.23666012287139893, 0.23940610885620117, 0.23169638216495514, 0.22791403532028198, 0.22613634169101715, 0.22239547967910767, 0.2144479751586914, 0.220129132270813, 0.2080569863319397, 0.21241657435894012, 0.20476442575454712, 0.2031814157962799, 0.1997631937265396, 0.19650571048259735, 0.1941923052072525, 0.18734143674373627], "accuracy": [0.2674679756164551, 0.48751816153526306, 0.5635979175567627, 0.6159027814865112, 0.6635847091674805, 0.7014925479888916, 0.7182670831680298, 0.7316074371337891, 0.7430986762046814, 0.7514199018478394, 0.7664773464202881, 0.7675340175628662, 0.7769119143486023, 0.7853652238845825, 0.789988100528717, 0.7980451583862305, 0.7985734939575195, 0.8078193068504333, 0.8115176558494568, 0.817989706993103, 0.817461371421814, 0.821820080280304, 0.8249900937080383, 0.8304054737091064, 0.830669641494751, 0.8366134166717529, 0.8409721255302429, 0.8408400416374207, 0.8416325449943542, 0.845859169960022, 0.8475762605667114, 0.8486329317092896, 0.8549728989601135, 0.8556333184242249, 0.8597279191017151, 0.8602562546730042, 0.8663320541381836, 0.8681812286376953, 0.8672566413879395, 0.8685774803161621, 0.870030403137207, 0.8717474341392517, 0.8730682730674744, 0.874389111995697, 0.8732003569602966, 0.8721436858177185, 0.8803328275680542, 0.8796724081039429, 0.8795403242111206, 0.8823140859603882, 0.8776912093162537, 0.8926165699958801, 0.8877294659614563, 0.8849557638168335, 0.8930128216743469, 0.8926165699958801, 0.8908994793891907, 0.8945978283882141, 0.8948619961738586, 0.89552241563797, 0.9000132083892822, 0.8972394466400146, 0.9056927561759949, 0.904768168926239, 0.9100515246391296, 0.9074098467826843, 0.906749427318573, 0.9074098467826843, 0.9109761118888855, 0.9104477763175964, 0.913617730140686, 0.9113723635673523, 0.9167877435684204, 0.9166556596755981, 0.9187690019607544, 0.919561505317688, 0.9227314591407776, 0.915070652961731, 0.9247127175331116, 0.9223352074623108, 0.9269581437110901, 0.9252410531044006, 0.9251089692115784, 0.9274864792823792, 0.9273543953895569, 0.9282789826393127], "val_loss": [2.040134906768799, 1.516693353652954, 1.0318922996520996, 0.8217939734458923, 0.7304245829582214, 0.6746188998222351, 0.6277737021446228, 0.594346821308136, 0.572762668132782, 0.5486006736755371, 0.5343489050865173, 0.5213205814361572, 0.5007544159889221, 0.48946499824523926, 0.48361220955848694, 0.4681054651737213, 0.4604288637638092, 0.45705199241638184, 0.4446834325790405, 0.43380534648895264, 0.4382593631744385, 0.4275282323360443, 0.41930484771728516, 0.41142719984054565, 0.4080519676208496, 0.4038888216018677, 0.3994258642196655, 0.394930899143219, 0.39399096369743347, 0.39064982533454895, 0.3899478614330292, 0.3789439797401428, 0.38055363297462463, 0.37185293436050415, 0.3702148497104645, 0.3668689429759979, 0.3660658001899719, 0.360355019569397, 0.3610004186630249, 0.357799232006073, 0.3533800542354584, 0.3554600477218628, 0.3607464134693146, 0.35112711787223816, 0.34968268871307373, 0.345578134059906, 0.35153740644454956, 0.34471824765205383, 0.33918508887290955, 0.33903345465660095, 0.33809760212898254, 0.3382350504398346, 0.34160852432250977, 0.3337521553039551, 0.3336501121520996, 0.3298826813697815, 0.33503457903862, 0.3332245349884033, 0.3263648748397827, 0.3303925395011902, 0.328022837638855, 0.3255794048309326, 0.32692620158195496, 0.32544583082199097, 0.32384324073791504, 0.33081698417663574, 0.32507839798927307, 0.32120710611343384, 0.32026806473731995, 0.3253105580806732, 0.31926795840263367, 0.3275435268878937, 0.3217446506023407, 0.3194150924682617, 0.32199662923812866, 0.32157889008522034, 0.32139748334884644, 0.31887122988700867, 0.31967538595199585, 0.31627312302589417, 0.3174712657928467, 0.318688303232193, 0.32324451208114624, 0.3192062973976135, 0.315657377243042, 0.3174383044242859], "val_accuracy": [0.5383333563804626, 0.6673333048820496, 0.6890000104904175, 0.7106666564941406, 0.7393333315849304, 0.7553333044052124, 0.765333354473114, 0.7760000228881836, 0.7863333225250244, 0.8013333082199097, 0.7926666736602783, 0.7973333597183228, 0.8159999847412109, 0.8203333616256714, 0.8163333535194397, 0.8253333568572998, 0.8296666741371155, 0.8266666531562805, 0.8353333473205566, 0.8426666855812073, 0.8376666903495789, 0.846666693687439, 0.8496666550636292, 0.8513333201408386, 0.8529999852180481, 0.8533333539962769, 0.8543333411216736, 0.8533333539962769, 0.8600000143051147, 0.8600000143051147, 0.8573333621025085, 0.8606666922569275, 0.8600000143051147, 0.8633333444595337, 0.862333357334137, 0.8643333315849304, 0.8663333058357239, 0.8690000176429749, 0.8679999709129333, 0.871999979019165, 0.8733333349227905, 0.8669999837875366, 0.8713333606719971, 0.8709999918937683, 0.8736666440963745, 0.875333309173584, 0.8743333220481873, 0.874666690826416, 0.878000020980835, 0.878333330154419, 0.8793333172798157, 0.8776666522026062, 0.8776666522026062, 0.8820000290870667, 0.8806666731834412, 0.8843333125114441, 0.8816666603088379, 0.8816666603088379, 0.8866666555404663, 0.8830000162124634, 0.8809999823570251, 0.887333333492279, 0.8863333463668823, 0.8830000162124634, 0.8883333206176758, 0.8836666941642761, 0.8870000243186951, 0.8870000243186951, 0.8893333077430725, 0.8899999856948853, 0.8886666893959045, 0.8830000162124634, 0.8893333077430725, 0.890666663646698, 0.8870000243186951, 0.8886666893959045, 0.8913333415985107, 0.8930000066757202, 0.8916666507720947, 0.8930000066757202, 0.8943333625793457, 0.8899999856948853, 0.8899999856948853, 0.890999972820282, 0.8916666507720947, 0.8926666378974915]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1], [9, 2, 3, 0, 3], [0, 1, 0, 2], [60, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [2, 1, 1, 0, 8, 0, 5, 6, 7, 7, 1, 1, 2, 0, 3, 1, 7, 5, 3, 4, 2, 6, 7, 6, 2, 3, 3, 2, 6, 0, 3, 8, 8, 2, 0, 9, 0, 9], [2, 4, 2, 7, 5, 5, 7, 3, 5, 0, 7, 6, 1, 4, 3, 2, 0, 7, 6, 7, 3, 1, 1, 4], [99, 67, 86, 87], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 5, 6, 8, 1, 9, 1, 2, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 79, 60, 70, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 62, 38, 24, 4, 17, 10, 7, 5], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.negative(tf.math.sqrt(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.negative(tf.math.multiply(grad, beta)), tf.math.subtract(grad, grad)), grad), tf.math.add(tf.math.square(tf.math.multiply(grad, tf.math.pow(sigma, grad))), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))), tf.math.divide_no_nan(grad, alpha)), grad), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, tf.math.negative(grad)), tf.math.multiply(tf.math.sqrt(grad), sigma)), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(alpha))))))))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 0, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 5, 3, 5], [0, 2, 1, 1], [16, 16], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 2, 1, 9, 3, 9, 5, 4, 8], [0, 6, 6], [99, 73, 77], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 3, 1, 4, 2, 8], [2, 0, 4, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 1, 12, 9, 3, 3, 21, 11, 10, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(alpha, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.subtract(tf.math.multiply(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.math.pow(alpha, tf.math.add(tf.math.sqrt(beta), tf.constant(1.0, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 2, 3], [0, 1, 0, 2], [30, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 8, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 2, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 1, 0, 1, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), alpha)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), beta))))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 9, 3, 4, 7, 3], [0, 1, 0, 2, 1, 2], [39, 39, 88], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 3, 7, 3, 6, 4, 5, 6, 2, 8, 3, 3, 7, 8, 1, 6, 2, 9], [0, 3, 6, 7, 1, 7, 1, 3, 0, 6, 5, 3, 0], [99, 47, 1, 34], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 8, 8, 1, 4, 1, 4, 2, 8], [3, 0, 0, 3, 0, 0, 2, 1, 2, 0], [16, 75, 58, 99, 61, 1]], "fitness": -0.09514285624027252, "mapping_values": [1, 14, 8, 6, 3, 6, 3, 3, 2, 31, 18, 13, 4, 11, 6, 5, 3], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.multiply(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(grad, grad), tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.multiply(grad, tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.subtract(alpha, tf.math.divide_no_nan(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)))), sigma))), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.309166669845581, 2.3115036487579346, 2.3109841346740723, 2.309823513031006, 2.3108556270599365, 2.311157464981079], "accuracy": [0.09113723784685135, 0.09034473448991776, 0.09813763201236725, 0.09113723784685135, 0.09153348207473755, 0.08955223858356476], "val_loss": [2.308755874633789, 2.308755874633789, 2.308755874633789, 2.308755874633789, 2.308755874633789, 2.308755874633789], "val_accuracy": [0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133]}}]