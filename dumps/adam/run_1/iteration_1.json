[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87028568983078, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.225290060043335, 1.87587571144104, 1.406939148902893, 1.1034153699874878, 0.9364996552467346, 0.8502227067947388, 0.7870576977729797, 0.7375462055206299, 0.6952239274978638, 0.6707677245140076, 0.6472273468971252, 0.6362292170524597, 0.6056740880012512, 0.5910203456878662, 0.5703982710838318, 0.5594262480735779, 0.5389491319656372, 0.5383169651031494, 0.5234876871109009, 0.5182483792304993, 0.5045607089996338, 0.49271783232688904, 0.48245716094970703, 0.47712844610214233, 0.4654799699783325, 0.4568401873111725, 0.4421028792858124, 0.4378829896450043, 0.4297875761985779, 0.4283367693424225, 0.4136851727962494, 0.4101272225379944, 0.40888863801956177, 0.39788806438446045, 0.39247435331344604, 0.38223880529403687, 0.3798972964286804, 0.3816218078136444, 0.36781516671180725, 0.35992199182510376, 0.3521583676338196, 0.34970781207084656, 0.35160112380981445, 0.346280574798584, 0.33691030740737915, 0.3301299512386322, 0.3344143331050873, 0.3258132338523865, 0.31187909841537476, 0.311753511428833, 0.31051746010780334], "accuracy": [0.28080835938453674, 0.49332982301712036, 0.5671641826629639, 0.6172236204147339, 0.666358470916748, 0.6985867023468018, 0.717870831489563, 0.7325320243835449, 0.748778223991394, 0.7600052952766418, 0.7642319202423096, 0.7721568942070007, 0.7817989587783813, 0.7862898111343384, 0.7952714562416077, 0.8021397590637207, 0.8053097128868103, 0.8078193068504333, 0.8136309385299683, 0.8133667707443237, 0.8190463781356812, 0.8230088353157043, 0.8308017253875732, 0.8304054737091064, 0.834632158279419, 0.8383304476737976, 0.8407079577445984, 0.8421608805656433, 0.8474441766738892, 0.847840428352356, 0.8532558679580688, 0.8564258217811584, 0.8552370667457581, 0.8564258217811584, 0.8614450097084045, 0.8638224601745605, 0.8663320541381836, 0.8628978729248047, 0.870030403137207, 0.8745211958885193, 0.8728041052818298, 0.8745211958885193, 0.8729361891746521, 0.8741249442100525, 0.8761062026023865, 0.880729079246521, 0.8798044919967651, 0.8809932470321655, 0.886672854423523, 0.8901069760322571, 0.8905032277107239], "val_loss": [2.0410406589508057, 1.5159962177276611, 1.0343514680862427, 0.818366527557373, 0.7298635244369507, 0.6792207956314087, 0.6413783431053162, 0.6035386323928833, 0.5772879719734192, 0.5541664361953735, 0.5407692193984985, 0.5259008407592773, 0.5070452690124512, 0.4972658157348633, 0.48341649770736694, 0.47361060976982117, 0.46466130018234253, 0.45349934697151184, 0.4506053030490875, 0.4412882626056671, 0.4393457770347595, 0.42829975485801697, 0.4321250915527344, 0.41928210854530334, 0.41407886147499084, 0.40695059299468994, 0.4023847281932831, 0.40181228518486023, 0.3914965093135834, 0.38717448711395264, 0.3866230547428131, 0.38421010971069336, 0.37486281991004944, 0.37446627020835876, 0.3743094801902771, 0.3678441047668457, 0.38001909852027893, 0.36418765783309937, 0.36285334825515747, 0.3592497706413269, 0.36321061849594116, 0.35346969962120056, 0.3517414927482605, 0.3520362079143524, 0.34956493973731995, 0.3548556864261627, 0.3506647050380707, 0.34547480940818787, 0.3445698320865631, 0.3420434892177582, 0.3442150056362152], "val_accuracy": [0.5653333067893982, 0.6723333597183228, 0.6913333535194397, 0.7183333039283752, 0.7419999837875366, 0.7599999904632568, 0.7636666893959045, 0.7816666960716248, 0.7860000133514404, 0.7993333339691162, 0.793666660785675, 0.8116666674613953, 0.8173333406448364, 0.815666675567627, 0.8286666870117188, 0.8333333134651184, 0.8356666564941406, 0.843999981880188, 0.8399999737739563, 0.8373333215713501, 0.843999981880188, 0.8500000238418579, 0.843999981880188, 0.8483333587646484, 0.8529999852180481, 0.8560000061988831, 0.8606666922569275, 0.8556666374206543, 0.8640000224113464, 0.8653333187103271, 0.8643333315849304, 0.8643333315849304, 0.8659999966621399, 0.8676666617393494, 0.8666666746139526, 0.8703333139419556, 0.8579999804496765, 0.8686666488647461, 0.871666669845581, 0.8706666827201843, 0.8683333396911621, 0.8723333477973938, 0.874666690826416, 0.8730000257492065, 0.874666690826416, 0.8763333559036255, 0.8693333268165588, 0.8759999871253967, 0.871999979019165, 0.875333309173584, 0.8740000128746033]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8671428561210632, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2240922451019287, 1.8716022968292236, 1.39580237865448, 1.091602087020874, 0.9448911547660828, 0.8347897529602051, 0.7674015164375305, 0.7186868786811829, 0.6735697984695435, 0.6598908305168152, 0.6262739300727844, 0.6158132553100586, 0.5812278985977173, 0.5765432119369507, 0.5579936504364014, 0.5411397814750671, 0.5337038636207581, 0.529248058795929, 0.5067874193191528, 0.49510249495506287, 0.4890486001968384, 0.4741574227809906, 0.47324833273887634, 0.45892053842544556, 0.4492296874523163, 0.4511191248893738, 0.4362913966178894, 0.43049266934394836, 0.417552649974823, 0.416894793510437, 0.4079177677631378, 0.40442728996276855, 0.3980977237224579, 0.3906228542327881, 0.38284629583358765, 0.37963002920150757, 0.37006455659866333, 0.3694058358669281, 0.37017473578453064, 0.36707890033721924], "accuracy": [0.2681283950805664, 0.48064985871315, 0.5622771382331848, 0.6151102781295776, 0.661471426486969, 0.703209638595581, 0.722757875919342, 0.7421740889549255, 0.7548540234565735, 0.7660810947418213, 0.7724210619926453, 0.7737419009208679, 0.7915731072425842, 0.7873464822769165, 0.7993659973144531, 0.8014793395996094, 0.8043851256370544, 0.8067626357078552, 0.8138951063156128, 0.8190463781356812, 0.8260467648506165, 0.8319904804229736, 0.8338396549224854, 0.8407079577445984, 0.8405758738517761, 0.8404437899589539, 0.8449346423149109, 0.8488970994949341, 0.8529917001724243, 0.8518029451370239, 0.8531237840652466, 0.8535200357437134, 0.8558974862098694, 0.8622375130653381, 0.863029956817627, 0.8684453964233398, 0.8708229064941406, 0.8698983192443848, 0.8664641380310059, 0.8734645247459412], "val_loss": [2.04404354095459, 1.5246515274047852, 1.0593689680099487, 0.8528059720993042, 0.7734651565551758, 0.7085248827934265, 0.6664459109306335, 0.6294727921485901, 0.6030877232551575, 0.5779749751091003, 0.5635645985603333, 0.5406778454780579, 0.5290287137031555, 0.5159396529197693, 0.5045204162597656, 0.4937323331832886, 0.4909628927707672, 0.4761867821216583, 0.47001734375953674, 0.46194222569465637, 0.45742854475975037, 0.4489084780216217, 0.43883875012397766, 0.43389737606048584, 0.42933788895606995, 0.42190656065940857, 0.421843558549881, 0.4094957411289215, 0.4063199460506439, 0.4026177227497101, 0.40430670976638794, 0.40521687269210815, 0.3911590874195099, 0.39677080512046814, 0.38623741269111633, 0.38590899109840393, 0.38600778579711914, 0.3790709376335144, 0.3758181929588318, 0.374481201171875], "val_accuracy": [0.5223333239555359, 0.6430000066757202, 0.6740000247955322, 0.70333331823349, 0.7120000123977661, 0.7396666407585144, 0.7549999952316284, 0.7583333253860474, 0.7773333191871643, 0.7816666960716248, 0.7879999876022339, 0.8013333082199097, 0.8006666898727417, 0.8073333501815796, 0.8159999847412109, 0.815666675567627, 0.8173333406448364, 0.8276666402816772, 0.8270000219345093, 0.8346666693687439, 0.8316666483879089, 0.8333333134651184, 0.8379999995231628, 0.840666651725769, 0.8413333296775818, 0.8453333377838135, 0.8429999947547913, 0.8483333587646484, 0.8479999899864197, 0.8493333458900452, 0.8493333458900452, 0.8516666889190674, 0.8560000061988831, 0.8479999899864197, 0.862666666507721, 0.8603333234786987, 0.8566666841506958, 0.8606666922569275, 0.8600000143051147, 0.862666666507721]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [9, 2, 4, 0, 2], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8, 6, 8, 7, 8, 7, 6, 1, 0], [4, 4, 0, 3, 0, 0, 3, 1, 2, 4, 4, 1, 2, 6, 7], [16, 99, 10, 38, 61, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 10, 6, 4, 2, 2, 1, 1, 1, 34, 19, 15, 3], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.add(tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(sigma), alpha)))))), tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad))), tf.math.divide_no_nan(alpha, tf.math.subtract(beta, tf.math.negative(grad)))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 1, 5], [0, 2, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 3, 3, 5], [0, 2, 0, 3, 3], [44, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 11, 6, 5, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.square(grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [3, 2, 4, 0, 3], [0, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 4, 3, 0, 3, 5, 1, 5, 1, 0], [0, 2, 0, 2, 4, 1], [42, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 3, 1, 4, 2, 8], [0, 0, 0, 4, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 16, 10, 6, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(beta, tf.math.square(tf.math.subtract(grad, tf.math.negative(alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(grad, sigma), tf.math.sqrt(alpha))))), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 1, 7], [0, 0, 1, 2, 0, 2], [39, 39, 36], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 1, 3, 5], [0, 2, 2, 3, 1], [16, 84], [0, 1], [0], [0], [50], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 3, 2, 8], [2, 0, 0, 3, 0, 0, 3, 0, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 3, 11, 6, 5, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(alpha, tf.math.add(grad, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(beta, tf.math.square(grad))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]