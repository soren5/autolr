[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8657143115997314, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2253339290618896, 1.8746339082717896, 1.4003525972366333, 1.1004455089569092, 0.9506009221076965, 0.8557302355766296, 0.7897550463676453, 0.7434094548225403, 0.7046250700950623, 0.6751331686973572, 0.6491427421569824, 0.6174098253250122, 0.6042599081993103, 0.5828649997711182, 0.5722928643226624, 0.559647262096405, 0.5372982621192932, 0.5245069265365601, 0.5062317848205566, 0.5005840063095093, 0.49582695960998535, 0.48113325238227844, 0.47317954897880554, 0.4624633491039276, 0.4460420608520508, 0.4435112178325653, 0.4298693835735321, 0.4259679615497589, 0.43010199069976807, 0.4200548827648163, 0.41421282291412354, 0.4094807505607605, 0.4021608233451843, 0.3940221667289734, 0.3789857029914856, 0.38008055090904236, 0.3758558928966522, 0.37213101983070374, 0.36888954043388367, 0.35460165143013, 0.3501925468444824, 0.349913626909256, 0.3405783176422119, 0.3348858654499054, 0.33538979291915894, 0.32667025923728943, 0.32489529252052307, 0.3214800953865051, 0.3079795241355896, 0.3096734285354614, 0.2994318902492523, 0.3004699945449829, 0.2943093478679657, 0.28701967000961304, 0.2834269106388092, 0.2870248258113861, 0.2780124545097351, 0.28026220202445984, 0.2742249667644501, 0.2693701684474945, 0.2692490220069885, 0.26121899485588074, 0.2608371078968048, 0.2565525472164154, 0.24693043529987335, 0.24433086812496185, 0.2335413247346878, 0.24418164789676666, 0.23809149861335754, 0.23178628087043762, 0.23275022208690643, 0.2225526124238968, 0.22232986986637115, 0.2189561426639557], "accuracy": [0.2743362784385681, 0.48646149039268494, 0.5614846348762512, 0.6118082404136658, 0.6557918190956116, 0.6923788189888, 0.7073041796684265, 0.7253995537757874, 0.7397965788841248, 0.7528728246688843, 0.7627789974212646, 0.7781006693840027, 0.7807422876358032, 0.785629391670227, 0.7924976944923401, 0.8000264167785645, 0.8084797263145447, 0.8095363974571228, 0.8181217908859253, 0.8165367841720581, 0.8226125836372375, 0.8294808864593506, 0.8335754871368408, 0.8309338092803955, 0.8429533839225769, 0.8411042094230652, 0.8469158411026001, 0.8514066934585571, 0.8491612672805786, 0.8496896028518677, 0.8531237840652466, 0.8584070801734924, 0.8590674996376038, 0.858671247959137, 0.8673887252807617, 0.8631620407104492, 0.8626337051391602, 0.8664641380310059, 0.8625016212463379, 0.8721436858177185, 0.8725399374961853, 0.8754457831382751, 0.8840311765670776, 0.8809932470321655, 0.8808611631393433, 0.8804649114608765, 0.8838990926742554, 0.8798044919967651, 0.8903711438179016, 0.8919561505317688, 0.8918240666389465, 0.8922203183174133, 0.8939374089241028, 0.8957865834236145, 0.897899866104126, 0.8969752788543701, 0.8982961177825928, 0.8957865834236145, 0.9019944667816162, 0.9055606722831726, 0.90423983335495, 0.9045040011405945, 0.9071456789970398, 0.9052965044975281, 0.9137498140335083, 0.9138818979263306, 0.9177123308181763, 0.9109761118888855, 0.9133535623550415, 0.9161273241043091, 0.9173160791397095, 0.917580246925354, 0.920089840888977, 0.920089840888977], "val_loss": [2.046006441116333, 1.5312563180923462, 1.065495491027832, 0.8603255748748779, 0.7711023688316345, 0.7145407795906067, 0.6718978881835938, 0.6340960264205933, 0.6059272289276123, 0.5820199251174927, 0.5711577534675598, 0.5493298172950745, 0.5403990745544434, 0.5219310522079468, 0.516203761100769, 0.5060098767280579, 0.49562767148017883, 0.4921264946460724, 0.47868093848228455, 0.4738703668117523, 0.46747174859046936, 0.46012580394744873, 0.45214641094207764, 0.4481637477874756, 0.44540002942085266, 0.4409501552581787, 0.4379076361656189, 0.4349617660045624, 0.432448148727417, 0.42505183815956116, 0.4303909242153168, 0.4213786721229553, 0.42357462644577026, 0.4113558828830719, 0.41295018792152405, 0.4128115177154541, 0.4040115475654602, 0.4083719849586487, 0.40045785903930664, 0.4012489318847656, 0.39850959181785583, 0.3951551914215088, 0.3922092616558075, 0.39049866795539856, 0.38992542028427124, 0.39010271430015564, 0.387972891330719, 0.38963696360588074, 0.38124364614486694, 0.3843337297439575, 0.3780466318130493, 0.37954556941986084, 0.38272571563720703, 0.3770189583301544, 0.3761345148086548, 0.3721950650215149, 0.3751266300678253, 0.3718869984149933, 0.3711431622505188, 0.37312620878219604, 0.3749217092990875, 0.3724476993083954, 0.3697863817214966, 0.37288931012153625, 0.36987102031707764, 0.3711585998535156, 0.37276673316955566, 0.37306761741638184, 0.3651377856731415, 0.3671785593032837, 0.3656371235847473, 0.36948901414871216, 0.3629947006702423, 0.36934754252433777], "val_accuracy": [0.5339999794960022, 0.6470000147819519, 0.6723333597183228, 0.6899999976158142, 0.7233333587646484, 0.7423333525657654, 0.7536666393280029, 0.7630000114440918, 0.7799999713897705, 0.7919999957084656, 0.7946666479110718, 0.8019999861717224, 0.8076666593551636, 0.8149999976158142, 0.8146666884422302, 0.8199999928474426, 0.8209999799728394, 0.8303333520889282, 0.8296666741371155, 0.831333339214325, 0.8379999995231628, 0.8376666903495789, 0.840666651725769, 0.8396666646003723, 0.8379999995231628, 0.840666651725769, 0.843666672706604, 0.843666672706604, 0.8433333039283752, 0.8500000238418579, 0.843666672706604, 0.8460000157356262, 0.8503333330154419, 0.8500000238418579, 0.8526666760444641, 0.8533333539962769, 0.8550000190734863, 0.8536666631698608, 0.859000027179718, 0.8553333282470703, 0.8606666922569275, 0.8603333234786987, 0.8650000095367432, 0.8603333234786987, 0.8643333315849304, 0.8656666874885559, 0.862333357334137, 0.8659999966621399, 0.8669999837875366, 0.8646666407585144, 0.8703333139419556, 0.8679999709129333, 0.8656666874885559, 0.8659999966621399, 0.8709999918937683, 0.8709999918937683, 0.8706666827201843, 0.8723333477973938, 0.8696666955947876, 0.8713333606719971, 0.8706666827201843, 0.8733333349227905, 0.875333309173584, 0.8713333606719971, 0.8759999871253967, 0.8723333477973938, 0.8733333349227905, 0.8726666569709778, 0.8799999952316284, 0.8763333559036255, 0.8773333430290222, 0.8786666393280029, 0.8776666522026062, 0.8740000128746033]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 6, 8, 5], [0, 1, 0, 2, 3], [39, 54], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 3], [0, 1, 0, 3], [16, 16], [0, 0, 0, 1, 1], [0, 2, 8], [0, 4], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 4, 6, 8], [0, 0, 0, 3, 0, 3, 3, 1, 3, 0], [16, 43, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 8, 5, 2, 9, 5, 4, 2, 5, 3, 2, 1, 1, 0, 1, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(grad)), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303391218185425, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0], [0, 2, 3, 0, 1, 4, 4, 7, 9], [0, 1, 0, 2, 2, 1], [39, 39, 73], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 1], [16, 18], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [9, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 9, 6, 3, 7, 4, 3, 2, 2, 1, 1, 1, 1, 1, 0, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030335903167725, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 8, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 0, 3, 5, 2, 8, 6, 2, 8, 6, 0, 8, 5], [0, 2, 0, 3, 3, 5, 3, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 8, 3, 6, 8, 0, 4, 1, 4, 2, 8], [0, 1, 0, 3, 0, 0, 3, 4, 2, 0], [55, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 23, 15, 8, 2, 2, 1, 1, 1, 16, 9, 7, 4], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(grad, tf.math.sqrt(grad)), tf.math.divide_no_nan(grad, tf.math.negative(grad)))))), tf.math.sqrt(tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(alpha)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 0, 3, 6, 8, 4, 3, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 97, 99, 25, 1]], "fitness": -0.07257142663002014, "mapping_values": [1, 9, 5, 4, 1, 8, 4, 4, 2, 1, 0, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), sigma))))), alpha)", "other_info": {"loss": [936105792.0, 1056667968.0, 1062891840.0, 1079533312.0, 1052479360.0, 1087728256.0], "accuracy": [0.09113723784685135, 0.08809932321310043, 0.09166556596755981, 0.09100515395402908, 0.08625016361474991, 0.08532558381557465], "val_loss": [511739424.0, 511739424.0, 511739424.0, 511739424.0, 511739424.0, 511739424.0], "val_accuracy": [0.08233333379030228, 0.08233333379030228, 0.08233333379030228, 0.08233333379030228, 0.08233333379030228, 0.08233333379030228]}}]