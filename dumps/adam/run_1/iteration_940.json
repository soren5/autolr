[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.868571400642395, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221662759780884, 1.8642120361328125, 1.3907768726348877, 1.1014902591705322, 0.9204330444335938, 0.8273597955703735, 0.7597689628601074, 0.7162118554115295, 0.6701900362968445, 0.6425173282623291, 0.6140389442443848, 0.5942291021347046, 0.5774982571601868, 0.5702422261238098, 0.5540055632591248, 0.53655606508255, 0.5232455730438232, 0.5089240074157715, 0.5016942620277405, 0.4837186336517334, 0.47332194447517395, 0.46850258111953735, 0.4586199223995209, 0.4462025761604309, 0.443973183631897, 0.4367792010307312, 0.4213065803050995, 0.4152306616306305, 0.41311511397361755, 0.3977583050727844, 0.39812058210372925, 0.3855849504470825, 0.3859889805316925, 0.3860360383987427, 0.37777653336524963, 0.3653721511363983, 0.3658910095691681, 0.36138802766799927, 0.35903412103652954, 0.35204219818115234, 0.34405824542045593, 0.341095507144928, 0.34148937463760376, 0.32812145352363586, 0.32686159014701843, 0.32432857155799866, 0.32133737206459045, 0.3132392466068268, 0.3156281113624573, 0.3079296350479126, 0.308336466550827, 0.2972458302974701, 0.2922227382659912, 0.2889629602432251, 0.2820698022842407, 0.2832379937171936, 0.2824721336364746, 0.2735739052295685, 0.2662833631038666, 0.27382996678352356, 0.2643262445926666, 0.2573123872280121, 0.25735965371131897, 0.2557680308818817, 0.24745777249336243, 0.24838414788246155, 0.2433312088251114, 0.24162591993808746, 0.22993817925453186, 0.23318244516849518, 0.22783398628234863], "accuracy": [0.2724871337413788, 0.4928014874458313, 0.568220853805542, 0.6139215230941772, 0.6711134314537048, 0.7010962963104248, 0.7264562249183655, 0.7360982894897461, 0.7605336308479309, 0.7622507214546204, 0.778761088848114, 0.7903843522071838, 0.7854973077774048, 0.7942147850990295, 0.8014793395996094, 0.8115176558494568, 0.8153480291366577, 0.819442629814148, 0.8203672170639038, 0.8280280232429504, 0.828820526599884, 0.8348963260650635, 0.8391229510307312, 0.8407079577445984, 0.8461233377456665, 0.8446704745292664, 0.8500858545303345, 0.8508783578872681, 0.8555012345314026, 0.8628978729248047, 0.8588033318519592, 0.8598600029945374, 0.863029956817627, 0.8664641380310059, 0.869502067565918, 0.8735966086387634, 0.8726720213890076, 0.8708229064941406, 0.8745211958885193, 0.8749174475669861, 0.8815215826034546, 0.8794082403182983, 0.8811253309249878, 0.8858803510665894, 0.882710337638855, 0.8823140859603882, 0.8853520154953003, 0.8901069760322571, 0.8886540532112122, 0.8901069760322571, 0.8893144726753235, 0.8943336606025696, 0.893541157245636, 0.8967111110687256, 0.8977677822113037, 0.8977677822113037, 0.8994848728179932, 0.9025228023529053, 0.9052965044975281, 0.9039757251739502, 0.9045040011405945, 0.9049002528190613, 0.9105798602104187, 0.9089948534965515, 0.9142781496047974, 0.9148064851760864, 0.9115044474601746, 0.9125610589981079, 0.9153348207473755, 0.9167877435684204, 0.9162594079971313], "val_loss": [2.0410046577453613, 1.5156702995300293, 1.0552151203155518, 0.8551368713378906, 0.7689451575279236, 0.7114879488945007, 0.669325053691864, 0.6288797855377197, 0.6022769212722778, 0.5789763331413269, 0.5591993927955627, 0.5457745790481567, 0.532788097858429, 0.514758288860321, 0.5063908696174622, 0.5031402111053467, 0.4832056164741516, 0.4761548638343811, 0.4676549434661865, 0.46574681997299194, 0.45046865940093994, 0.44685229659080505, 0.44497767090797424, 0.43248721957206726, 0.43595752120018005, 0.42005404829978943, 0.4174923598766327, 0.41822710633277893, 0.407818078994751, 0.4041585624217987, 0.40016454458236694, 0.4017712473869324, 0.40347179770469666, 0.39586856961250305, 0.3910571336746216, 0.3869002163410187, 0.3878486752510071, 0.381552517414093, 0.377048134803772, 0.3758874535560608, 0.37503188848495483, 0.3695967495441437, 0.3720916211605072, 0.3699226975440979, 0.36753323674201965, 0.36311450600624084, 0.3683623969554901, 0.36318522691726685, 0.3570537865161896, 0.35796257853507996, 0.3575649559497833, 0.35556286573410034, 0.3573058247566223, 0.3506736159324646, 0.3490355610847473, 0.3513210713863373, 0.35094523429870605, 0.3435996472835541, 0.3534066677093506, 0.3429940938949585, 0.3455241620540619, 0.34583866596221924, 0.34688761830329895, 0.3408789336681366, 0.3406088352203369, 0.3397056460380554, 0.33969080448150635, 0.33949214220046997, 0.3454843759536743, 0.33974772691726685, 0.33342882990837097], "val_accuracy": [0.5440000295639038, 0.6570000052452087, 0.6793333292007446, 0.706333339214325, 0.722000002861023, 0.7413333058357239, 0.746999979019165, 0.7590000033378601, 0.7703333497047424, 0.7766666412353516, 0.7926666736602783, 0.793666660785675, 0.8033333420753479, 0.8153333067893982, 0.8136666417121887, 0.8096666932106018, 0.8236666917800903, 0.8236666917800903, 0.8266666531562805, 0.8253333568572998, 0.8299999833106995, 0.8379999995231628, 0.8353333473205566, 0.8410000205039978, 0.8346666693687439, 0.843666672706604, 0.8463333249092102, 0.846666693687439, 0.8510000109672546, 0.8500000238418579, 0.8516666889190674, 0.8510000109672546, 0.8519999980926514, 0.8510000109672546, 0.8566666841506958, 0.8583333492279053, 0.8643333315849304, 0.8636666536331177, 0.8650000095367432, 0.8669999837875366, 0.8633333444595337, 0.8686666488647461, 0.8656666874885559, 0.8663333058357239, 0.8659999966621399, 0.8676666617393494, 0.8693333268165588, 0.8669999837875366, 0.8679999709129333, 0.8736666440963745, 0.8679999709129333, 0.8696666955947876, 0.8703333139419556, 0.871666669845581, 0.8743333220481873, 0.8733333349227905, 0.871666669845581, 0.8743333220481873, 0.8726666569709778, 0.8756666779518127, 0.8766666650772095, 0.8743333220481873, 0.8786666393280029, 0.878000020980835, 0.8759999871253967, 0.8809999823570251, 0.874666690826416, 0.8773333430290222, 0.8766666650772095, 0.8806666731834412, 0.8790000081062317]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 5, 3], [0, 2, 0, 2], [54, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 8, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 3, 3, 6, 8, 1, 4, 1, 4, 4, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 47, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 1, 18, 9, 9, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.sqrt(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 2, 9, 0, 3], [0, 0, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 6, 3, 5, 6, 5], [0, 2, 0, 3, 3, 4], [16, 16], [0, 1, 0, 1, 0, 1, 0, 1, 1], [4, 6, 1, 1], [0, 5, 1, 6, 3], [99], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 14, 8, 6, 2, 9, 4, 5, 1, 5, 2, 3, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.subtract(alpha, tf.math.subtract(grad, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3037052154541016, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [9, 2, 3, 0, 3, 5], [0, 2, 0, 0], [16, 16], [0, 1], [0], [0], [55], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 6, 8, 1, 4, 4, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 3, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 1, 0, 1, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, alpha)))", "other_info": {"loss": [2.990370273590088, 2.3033106327056885, 2.3025858402252197, 2.3025853633880615, 2.3025851249694824, 2.3025851249694824, 2.3025856018066406], "accuracy": [0.0948355570435524, 0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3052866458892822, 2.3025853633880615, 2.3025851249694824, 2.3025848865509033, 2.3025848865509033, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.07000000029802322, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 4], [0, 0, 0, 3, 5], [16, 65, 30], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 7, 7, 6, 3, 4, 1, 7, 0, 7, 4, 6, 3, 7, 4, 8, 5, 8, 5, 6, 1, 1, 7, 1, 9, 2, 8, 9, 2, 5, 1, 1, 7, 2, 2, 3, 3], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2, 6, 5, 5, 5, 4, 6, 5, 0, 6, 2, 6, 6, 0, 6, 1, 1, 7, 3, 5, 6, 7, 0, 6, 0, 3], [16, 51, 96, 27, 61, 0, 77, 93, 13, 15, 92, 0]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 7, 5, 3, 2, 1, 1, 1, 83, 47, 36, 12], "tree_depth": 36, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.add(tf.math.add(alpha, beta), tf.constant(0.0, shape=shape, dtype=tf.float32)))), beta), tf.math.add(grad, tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(grad, tf.math.subtract(tf.math.add(grad, grad), tf.math.negative(tf.math.add(grad, tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.square(tf.math.sqrt(grad))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.square(tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(beta, tf.math.add(grad, grad)), tf.math.subtract(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(tf.math.square(alpha), tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), sigma), tf.math.add(grad, grad)))))))), tf.math.add(grad, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.multiply(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]