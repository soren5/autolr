[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.871999979019165, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2253546714782715, 1.8775780200958252, 1.399466872215271, 1.0941996574401855, 0.941029965877533, 0.8427216410636902, 0.7828139662742615, 0.725483238697052, 0.6868197321891785, 0.652950644493103, 0.6492242813110352, 0.6180164813995361, 0.5960898995399475, 0.5726051926612854, 0.5597361326217651, 0.5505536794662476, 0.5392939448356628, 0.5221567153930664, 0.5091125965118408, 0.49475032091140747, 0.48841843008995056, 0.47775131464004517, 0.4648721218109131, 0.46578627824783325, 0.45384886860847473, 0.4439297616481781, 0.43315133452415466, 0.429641455411911, 0.4241660535335541, 0.4155416190624237, 0.4065856635570526, 0.39578136801719666, 0.39821192622184753, 0.3918413519859314, 0.38575083017349243, 0.3735491633415222, 0.380761981010437, 0.3721756339073181, 0.3658198118209839, 0.3520005941390991, 0.35398292541503906, 0.34400641918182373, 0.34135329723358154, 0.33522719144821167, 0.3308519423007965, 0.324473112821579, 0.3216729164123535, 0.3159618377685547, 0.3105134665966034, 0.30889779329299927, 0.3027656674385071], "accuracy": [0.27037379145622253, 0.48870691657066345, 0.5633337497711182, 0.6203936338424683, 0.6637167930603027, 0.6999075412750244, 0.7214370369911194, 0.7314753532409668, 0.7481178045272827, 0.7656848430633545, 0.7626469135284424, 0.7791573405265808, 0.7835160493850708, 0.7944789528846741, 0.7998943328857422, 0.8016114234924316, 0.809140145778656, 0.8117818236351013, 0.8186501264572144, 0.8224804997444153, 0.8232730031013489, 0.8308017253875732, 0.8317263126373291, 0.8355567455291748, 0.8397833704948425, 0.8454629778862, 0.8471800088882446, 0.8426892161369324, 0.8438779711723328, 0.8540483713150024, 0.8569541573524475, 0.8588033318519592, 0.8552370667457581, 0.8560295701026917, 0.8597279191017151, 0.8665962219238281, 0.8617091774940491, 0.8684453964233398, 0.8702945709228516, 0.8745211958885193, 0.8717474341392517, 0.8712190985679626, 0.8757099509239197, 0.8790120482444763, 0.8802007436752319, 0.8840311765670776, 0.8835028409957886, 0.8829745054244995, 0.8878615498542786, 0.886672854423523, 0.8901069760322571], "val_loss": [2.043733835220337, 1.5219917297363281, 1.0405628681182861, 0.8271674513816833, 0.7385728359222412, 0.6863242387771606, 0.6394210457801819, 0.6055542230606079, 0.579637348651886, 0.5593869090080261, 0.547102153301239, 0.5338431596755981, 0.5128932595252991, 0.5035747289657593, 0.4914575219154358, 0.48520979285240173, 0.4707808494567871, 0.46300965547561646, 0.4578178822994232, 0.44813793897628784, 0.44279488921165466, 0.4348852038383484, 0.43235597014427185, 0.42223528027534485, 0.4195095896720886, 0.4223223924636841, 0.4137158691883087, 0.40655502676963806, 0.40145930647850037, 0.4012601673603058, 0.3948502242565155, 0.393573522567749, 0.388724148273468, 0.3894922137260437, 0.3867871165275574, 0.38577529788017273, 0.38708215951919556, 0.3817291557788849, 0.3733513653278351, 0.3704090118408203, 0.3720945119857788, 0.36655640602111816, 0.36299189925193787, 0.3657146096229553, 0.3571730852127075, 0.3598894774913788, 0.3540472388267517, 0.3548164963722229, 0.3521439731121063, 0.3499751687049866, 0.34883660078048706], "val_accuracy": [0.5223333239555359, 0.6539999842643738, 0.6896666884422302, 0.7213333249092102, 0.7350000143051147, 0.75, 0.7620000243186951, 0.7723333239555359, 0.7773333191871643, 0.7993333339691162, 0.8033333420753479, 0.8090000152587891, 0.8186666369438171, 0.8223333358764648, 0.8266666531562805, 0.8306666612625122, 0.8366666436195374, 0.8343333601951599, 0.8399999737739563, 0.8389999866485596, 0.8443333506584167, 0.8513333201408386, 0.8506666421890259, 0.8510000109672546, 0.8543333411216736, 0.8496666550636292, 0.8529999852180481, 0.8543333411216736, 0.8556666374206543, 0.859666645526886, 0.8573333621025085, 0.859666645526886, 0.8583333492279053, 0.862333357334137, 0.8619999885559082, 0.8650000095367432, 0.8586666584014893, 0.8656666874885559, 0.862333357334137, 0.8640000224113464, 0.8646666407585144, 0.8659999966621399, 0.8713333606719971, 0.8690000176429749, 0.8690000176429749, 0.8723333477973938, 0.871999979019165, 0.8703333139419556, 0.8703333139419556, 0.8696666955947876, 0.871999979019165]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8608571290969849, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222198009490967, 1.8626443147659302, 1.3853189945220947, 1.0853662490844727, 0.931647002696991, 0.8478020429611206, 0.7707939743995667, 0.7216519117355347, 0.690000057220459, 0.6530358791351318, 0.6362318396568298, 0.6097108125686646, 0.5943684577941895, 0.5772351026535034, 0.5639727711677551, 0.5424941778182983, 0.5329158306121826, 0.5233623385429382, 0.5083281397819519, 0.4914330840110779, 0.4884272515773773, 0.471181720495224, 0.46308648586273193, 0.4599435031414032, 0.4452829658985138, 0.43922656774520874, 0.4346368908882141, 0.4225696623325348, 0.42091163992881775, 0.4157487750053406, 0.4091602861881256, 0.40055784583091736, 0.3898012340068817, 0.3897312879562378, 0.3853475749492645, 0.3732336759567261, 0.36707016825675964, 0.3611578941345215, 0.35421329736709595, 0.3557034730911255, 0.3434772789478302, 0.34184014797210693, 0.33612918853759766, 0.33465075492858887, 0.323803573846817, 0.3233625888824463, 0.3184356689453125, 0.31324225664138794, 0.30968913435935974, 0.3038422465324402, 0.30334392189979553, 0.29133883118629456, 0.2944442629814148], "accuracy": [0.2769779562950134, 0.49689605832099915, 0.5700700283050537, 0.6188086271286011, 0.6651697158813477, 0.6903975605964661, 0.724210798740387, 0.7395324110984802, 0.7494386434555054, 0.759080708026886, 0.76542067527771, 0.772288978099823, 0.7837802171707153, 0.7869502305984497, 0.7992339134216309, 0.8080834746360779, 0.8107251524925232, 0.8117818236351013, 0.8175934553146362, 0.8278959393501282, 0.8220842480659485, 0.8309338092803955, 0.8317263126373291, 0.8374059200286865, 0.8417646288871765, 0.8422929644584656, 0.8498216867446899, 0.852331280708313, 0.852331280708313, 0.8502179384231567, 0.8560295701026917, 0.8585391640663147, 0.863558292388916, 0.8627657890319824, 0.8672566413879395, 0.8709549307823181, 0.8706908226013184, 0.8734645247459412, 0.8774270415306091, 0.8758420348167419, 0.878879964351654, 0.8790120482444763, 0.8816536664962769, 0.8813894987106323, 0.8840311765670776, 0.8883898854255676, 0.8850878477096558, 0.8926165699958801, 0.8918240666389465, 0.8916919827461243, 0.8945978283882141, 0.8956544995307922, 0.894069492816925], "val_loss": [2.034541368484497, 1.4998877048492432, 1.0209977626800537, 0.8166917562484741, 0.7290024161338806, 0.6806460618972778, 0.6348448991775513, 0.6021235585212708, 0.573820948600769, 0.5523001551628113, 0.5338252186775208, 0.522424578666687, 0.5040000081062317, 0.49988818168640137, 0.4815484881401062, 0.46943217515945435, 0.4626108705997467, 0.4515331983566284, 0.4452548921108246, 0.4358329176902771, 0.42773184180259705, 0.42321279644966125, 0.41643330454826355, 0.41378238797187805, 0.4048992991447449, 0.39727547764778137, 0.3969200551509857, 0.4016236662864685, 0.39018192887306213, 0.38439810276031494, 0.38044703006744385, 0.38113245368003845, 0.37847933173179626, 0.37098827958106995, 0.3698015809059143, 0.36336076259613037, 0.36498329043388367, 0.3592173755168915, 0.3612303137779236, 0.3612538278102875, 0.35770702362060547, 0.3498915135860443, 0.35169216990470886, 0.3452366590499878, 0.34636980295181274, 0.3438626229763031, 0.34559890627861023, 0.34139999747276306, 0.3426257371902466, 0.3411528766155243, 0.3401089012622833, 0.3347177803516388, 0.33705630898475647], "val_accuracy": [0.550000011920929, 0.6650000214576721, 0.6953333616256714, 0.718666672706604, 0.7366666793823242, 0.7593333125114441, 0.7723333239555359, 0.7789999842643738, 0.7839999794960022, 0.7913333177566528, 0.7983333468437195, 0.79666668176651, 0.8113333582878113, 0.8146666884422302, 0.8206666707992554, 0.8230000138282776, 0.8213333487510681, 0.8309999704360962, 0.8316666483879089, 0.8336666822433472, 0.8326666951179504, 0.8389999866485596, 0.8389999866485596, 0.8379999995231628, 0.843666672706604, 0.8493333458900452, 0.8519999980926514, 0.8416666388511658, 0.8539999723434448, 0.8543333411216736, 0.8539999723434448, 0.8556666374206543, 0.8483333587646484, 0.859000027179718, 0.8610000014305115, 0.8606666922569275, 0.8636666536331177, 0.8653333187103271, 0.8586666584014893, 0.8600000143051147, 0.8653333187103271, 0.8690000176429749, 0.8669999837875366, 0.8669999837875366, 0.8686666488647461, 0.8673333525657654, 0.8703333139419556, 0.8740000128746033, 0.8700000047683716, 0.8700000047683716, 0.8686666488647461, 0.871666669845581, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 9, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 8, 0, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 0, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.2005714327096939, "mapping_values": [1, 9, 5, 4, 1, 5, 4, 1, 2, 2, 1, 1, 1, 8, 4, 4, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma))))", "other_info": {"loss": [2.293351888656616, 2.3374733924865723, 2.3040497303009033, 2.304842472076416, 2.3053057193756104, 2.3054254055023193], "accuracy": [0.10447761416435242, 0.1138555034995079, 0.09509972482919693, 0.09998679161071777, 0.0936468094587326, 0.09602430462837219], "val_loss": [2.187598705291748, 2.3032751083374023, 2.3048512935638428, 2.303917169570923, 2.3052687644958496, 2.3035285472869873], "val_accuracy": [0.19433332979679108, 0.10233332961797714, 0.09966666996479034, 0.09966666996479034, 0.0963333323597908, 0.10433333367109299]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 0, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [40, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 6, 1, 4, 5, 4, 2, 8], [0, 0, 2, 3, 1, 0, 3, 1, 2, 4], [16, 99, 96, 86, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 1, 2, 1, 1, 1, 21, 11, 10, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.subtract(sigma, alpha)))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma))), tf.math.pow(alpha, tf.math.add(tf.math.sqrt(beta), grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 2, 9, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [1], [0, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 41, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 3, 1, 2, 1, 21, 11, 10, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), sigma))), alpha)), tf.math.sqrt(beta)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 9, 3, 0, 3], [0, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [77], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 1, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 0, 1, 10, 6, 4, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]