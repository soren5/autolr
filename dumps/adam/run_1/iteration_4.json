[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.871999979019165, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2253546714782715, 1.8775780200958252, 1.399466872215271, 1.0941996574401855, 0.941029965877533, 0.8427216410636902, 0.7828139662742615, 0.725483238697052, 0.6868197321891785, 0.652950644493103, 0.6492242813110352, 0.6180164813995361, 0.5960898995399475, 0.5726051926612854, 0.5597361326217651, 0.5505536794662476, 0.5392939448356628, 0.5221567153930664, 0.5091125965118408, 0.49475032091140747, 0.48841843008995056, 0.47775131464004517, 0.4648721218109131, 0.46578627824783325, 0.45384886860847473, 0.4439297616481781, 0.43315133452415466, 0.429641455411911, 0.4241660535335541, 0.4155416190624237, 0.4065856635570526, 0.39578136801719666, 0.39821192622184753, 0.3918413519859314, 0.38575083017349243, 0.3735491633415222, 0.380761981010437, 0.3721756339073181, 0.3658198118209839, 0.3520005941390991, 0.35398292541503906, 0.34400641918182373, 0.34135329723358154, 0.33522719144821167, 0.3308519423007965, 0.324473112821579, 0.3216729164123535, 0.3159618377685547, 0.3105134665966034, 0.30889779329299927, 0.3027656674385071], "accuracy": [0.27037379145622253, 0.48870691657066345, 0.5633337497711182, 0.6203936338424683, 0.6637167930603027, 0.6999075412750244, 0.7214370369911194, 0.7314753532409668, 0.7481178045272827, 0.7656848430633545, 0.7626469135284424, 0.7791573405265808, 0.7835160493850708, 0.7944789528846741, 0.7998943328857422, 0.8016114234924316, 0.809140145778656, 0.8117818236351013, 0.8186501264572144, 0.8224804997444153, 0.8232730031013489, 0.8308017253875732, 0.8317263126373291, 0.8355567455291748, 0.8397833704948425, 0.8454629778862, 0.8471800088882446, 0.8426892161369324, 0.8438779711723328, 0.8540483713150024, 0.8569541573524475, 0.8588033318519592, 0.8552370667457581, 0.8560295701026917, 0.8597279191017151, 0.8665962219238281, 0.8617091774940491, 0.8684453964233398, 0.8702945709228516, 0.8745211958885193, 0.8717474341392517, 0.8712190985679626, 0.8757099509239197, 0.8790120482444763, 0.8802007436752319, 0.8840311765670776, 0.8835028409957886, 0.8829745054244995, 0.8878615498542786, 0.886672854423523, 0.8901069760322571], "val_loss": [2.043733835220337, 1.5219917297363281, 1.0405628681182861, 0.8271674513816833, 0.7385728359222412, 0.6863242387771606, 0.6394210457801819, 0.6055542230606079, 0.579637348651886, 0.5593869090080261, 0.547102153301239, 0.5338431596755981, 0.5128932595252991, 0.5035747289657593, 0.4914575219154358, 0.48520979285240173, 0.4707808494567871, 0.46300965547561646, 0.4578178822994232, 0.44813793897628784, 0.44279488921165466, 0.4348852038383484, 0.43235597014427185, 0.42223528027534485, 0.4195095896720886, 0.4223223924636841, 0.4137158691883087, 0.40655502676963806, 0.40145930647850037, 0.4012601673603058, 0.3948502242565155, 0.393573522567749, 0.388724148273468, 0.3894922137260437, 0.3867871165275574, 0.38577529788017273, 0.38708215951919556, 0.3817291557788849, 0.3733513653278351, 0.3704090118408203, 0.3720945119857788, 0.36655640602111816, 0.36299189925193787, 0.3657146096229553, 0.3571730852127075, 0.3598894774913788, 0.3540472388267517, 0.3548164963722229, 0.3521439731121063, 0.3499751687049866, 0.34883660078048706], "val_accuracy": [0.5223333239555359, 0.6539999842643738, 0.6896666884422302, 0.7213333249092102, 0.7350000143051147, 0.75, 0.7620000243186951, 0.7723333239555359, 0.7773333191871643, 0.7993333339691162, 0.8033333420753479, 0.8090000152587891, 0.8186666369438171, 0.8223333358764648, 0.8266666531562805, 0.8306666612625122, 0.8366666436195374, 0.8343333601951599, 0.8399999737739563, 0.8389999866485596, 0.8443333506584167, 0.8513333201408386, 0.8506666421890259, 0.8510000109672546, 0.8543333411216736, 0.8496666550636292, 0.8529999852180481, 0.8543333411216736, 0.8556666374206543, 0.859666645526886, 0.8573333621025085, 0.859666645526886, 0.8583333492279053, 0.862333357334137, 0.8619999885559082, 0.8650000095367432, 0.8586666584014893, 0.8656666874885559, 0.862333357334137, 0.8640000224113464, 0.8646666407585144, 0.8659999966621399, 0.8713333606719971, 0.8690000176429749, 0.8690000176429749, 0.8723333477973938, 0.871999979019165, 0.8703333139419556, 0.8703333139419556, 0.8696666955947876, 0.871999979019165]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8697142601013184, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22267746925354, 1.8663467168807983, 1.3908649682998657, 1.0901787281036377, 0.9299660921096802, 0.8374987840652466, 0.768130898475647, 0.7266172766685486, 0.6854478120803833, 0.6664038896560669, 0.6304731369018555, 0.6096907258033752, 0.5849247574806213, 0.5726299285888672, 0.5590977668762207, 0.5415172576904297, 0.5288833379745483, 0.5150143504142761, 0.4973148703575134, 0.49250659346580505, 0.47636696696281433, 0.4748038351535797, 0.46333417296409607, 0.452310174703598, 0.4481392502784729, 0.44233617186546326, 0.43066293001174927, 0.42374157905578613, 0.4173530340194702, 0.4151723086833954, 0.4094843864440918, 0.40218570828437805, 0.39349690079689026, 0.38017821311950684, 0.38479045033454895, 0.38520124554634094, 0.37839528918266296, 0.3702670931816101, 0.36511558294296265, 0.3519359230995178, 0.3520597219467163, 0.34354621171951294, 0.34168076515197754, 0.3409913182258606, 0.3335149586200714, 0.3297663927078247, 0.3314977288246155], "accuracy": [0.27327960729599, 0.4859331548213959, 0.5694096088409424, 0.615770697593689, 0.6688680648803711, 0.6968696117401123, 0.7210407853126526, 0.7357020378112793, 0.7469290494918823, 0.757099449634552, 0.7705719470977783, 0.7823272943496704, 0.7839123010635376, 0.7915731072425842, 0.7943468689918518, 0.8043851256370544, 0.8053097128868103, 0.8186501264572144, 0.8185180425643921, 0.8219521641731262, 0.8300092220306396, 0.8297450542449951, 0.8313300609588623, 0.837141752243042, 0.8384625315666199, 0.8449346423149109, 0.8442742228507996, 0.8459912538528442, 0.850350022315979, 0.8494254350662231, 0.8533879518508911, 0.8569541573524475, 0.8598600029945374, 0.8661999702453613, 0.8671245574951172, 0.8584070801734924, 0.8628978729248047, 0.8669924736022949, 0.8701624870300293, 0.8753136992454529, 0.8709549307823181, 0.8802007436752319, 0.8792761564254761, 0.8750495314598083, 0.8837670087814331, 0.8842953443527222, 0.8805969953536987], "val_loss": [2.0281715393066406, 1.4944039583206177, 1.014687418937683, 0.8063002824783325, 0.7178728580474854, 0.6661238074302673, 0.6236050724983215, 0.5916057825088501, 0.5654183626174927, 0.5444905757904053, 0.5205374956130981, 0.5057188868522644, 0.495728462934494, 0.4794594347476959, 0.46884533762931824, 0.45819562673568726, 0.44690054655075073, 0.4381639063358307, 0.4298642575740814, 0.42981427907943726, 0.41847842931747437, 0.412690669298172, 0.4079729914665222, 0.3981097936630249, 0.39688077569007874, 0.39440056681632996, 0.3875551223754883, 0.3833499252796173, 0.3815014660358429, 0.37836703658103943, 0.3709050416946411, 0.3691622018814087, 0.3671775162220001, 0.3644399344921112, 0.3605163097381592, 0.36099228262901306, 0.36040160059928894, 0.35403677821159363, 0.3559490144252777, 0.349895179271698, 0.346104234457016, 0.3438741862773895, 0.34565335512161255, 0.3466734290122986, 0.34126701951026917, 0.3489134907722473, 0.3407408893108368], "val_accuracy": [0.5463333129882812, 0.6693333387374878, 0.7009999752044678, 0.7246666550636292, 0.7379999756813049, 0.7570000290870667, 0.7680000066757202, 0.7889999747276306, 0.7853333353996277, 0.7943333387374878, 0.8143333196640015, 0.8096666932106018, 0.8149999976158142, 0.8276666402816772, 0.8383333086967468, 0.8389999866485596, 0.8450000286102295, 0.8496666550636292, 0.8510000109672546, 0.8489999771118164, 0.8526666760444641, 0.8586666584014893, 0.8573333621025085, 0.8629999756813049, 0.8586666584014893, 0.8650000095367432, 0.8636666536331177, 0.8676666617393494, 0.8676666617393494, 0.8659999966621399, 0.8709999918937683, 0.8733333349227905, 0.874666690826416, 0.8726666569709778, 0.8756666779518127, 0.8773333430290222, 0.8740000128746033, 0.875333309173584, 0.8733333349227905, 0.8766666650772095, 0.8803333044052124, 0.8820000290870667, 0.8776666522026062, 0.8790000081062317, 0.878000020980835, 0.874666690826416, 0.8820000290870667]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [8, 2, 3, 0, 3], [0, 1, 0, 2], [39, 55], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 91], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 2, 3, 6, 8, 2, 4, 0, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [92, 82, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3038079738616943, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 6}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [17, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 3, 4, 1, 4, 2, 8], [4, 0, 4, 3, 4, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 35]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 10, 6, 4, 2, 1, 0, 1, 1, 21, 11, 10, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(grad, tf.math.pow(grad, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [5, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 2, 3, 0, 3, 5, 5, 9], [0, 2, 0, 3], [16, 16, 68], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 5, 5, 3, 2, 8, 6, 6, 0, 0], [4, 4, 7, 7, 7, 3, 1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 1, 6, 1, 3, 8, 0, 3, 5, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 5, 4, 1, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 8, 3, 3, 18, 11, 7, 0, 35, 20, 15, 6], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(grad, tf.math.subtract(grad, tf.math.square(tf.math.square(tf.math.multiply(tf.math.add(grad, tf.math.sqrt(grad)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.negative(grad)), sigma), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.subtract(alpha, beta))))), tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.subtract(grad, grad))), tf.math.multiply(tf.math.sqrt(tf.math.negative(tf.math.multiply(grad, tf.math.square(tf.math.negative(alpha))))), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [39, 39, 28], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 1], [0, 2, 3, 3, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 3, 3, 6, 1, 6, 3, 2, 0, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09028571099042892, "mapping_values": [1, 9, 5, 4, 3, 11, 6, 5, 1, 2, 1, 1, 1, 18, 9, 9, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.subtract(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)), alpha), beta)", "other_info": {"loss": [2.3102471828460693, 2.3092658519744873, 2.3095791339874268, 2.310081958770752, 2.3089776039123535, 2.3092005252838135], "accuracy": [0.08928807079792023, 0.09338264167308807, 0.09034473448991776, 0.08558975160121918, 0.09417514503002167, 0.09219389408826828], "val_loss": [2.308760404586792, 2.308760643005371, 2.3087618350982666, 2.308763027191162, 2.3087644577026367, 2.3087656497955322], "val_accuracy": [0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555]}}]