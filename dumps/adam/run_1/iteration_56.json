[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8714285492897034, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224222421646118, 1.8805385828018188, 1.3929567337036133, 1.1036128997802734, 0.9356516003608704, 0.8424104452133179, 0.7788424491882324, 0.7358942627906799, 0.6876368522644043, 0.6663686633110046, 0.6495853066444397, 0.6208674907684326, 0.5982221961021423, 0.5829038619995117, 0.563442051410675, 0.5533334612846375, 0.5382558703422546, 0.5286870002746582, 0.5115869045257568, 0.510099470615387, 0.4952259361743927, 0.480330228805542, 0.48635396361351013, 0.46538588404655457, 0.45516490936279297, 0.4531433582305908, 0.44602227210998535, 0.43360668420791626, 0.4282549321651459, 0.41578513383865356, 0.4150426983833313, 0.4109366834163666, 0.4037725627422333, 0.3876003921031952, 0.3868595361709595, 0.37942376732826233, 0.377523809671402, 0.3778882920742035, 0.376328706741333, 0.3638187050819397, 0.35524898767471313, 0.3481627106666565, 0.34554731845855713, 0.33962348103523254, 0.33721306920051575, 0.3317783772945404, 0.3277427852153778, 0.3220938742160797, 0.3232156038284302, 0.3179478645324707, 0.3057830035686493, 0.3052884638309479, 0.3015526533126831, 0.3021888732910156, 0.29541656374931335, 0.28850871324539185, 0.28785738348960876, 0.28331631422042847, 0.2769358158111572, 0.2760606110095978, 0.2638459801673889, 0.2601119577884674, 0.2567010521888733, 0.2544662058353424, 0.25133755803108215, 0.24985980987548828], "accuracy": [0.2763175368309021, 0.4830273389816284, 0.5757495760917664, 0.6103553175926208, 0.6630563735961914, 0.6980583667755127, 0.7218332886695862, 0.7339849472045898, 0.7491744756698608, 0.7552502751350403, 0.7618544697761536, 0.7777044177055359, 0.780610203742981, 0.7907806038856506, 0.7952714562416077, 0.7980451583862305, 0.8039889335632324, 0.809140145778656, 0.8168009519577026, 0.8165367841720581, 0.8169330358505249, 0.8293488025665283, 0.8256505131721497, 0.8338396549224854, 0.8400475382804871, 0.8381983637809753, 0.8381983637809753, 0.843481719493866, 0.8457271456718445, 0.8510104417800903, 0.8506141901016235, 0.8531237840652466, 0.8584070801734924, 0.859199583530426, 0.8589354157447815, 0.8618412613868713, 0.8644828796386719, 0.8631620407104492, 0.8705587387084961, 0.8683133125305176, 0.8728041052818298, 0.872407853603363, 0.8762382864952087, 0.8790120482444763, 0.8819178342819214, 0.8849557638168335, 0.8804649114608765, 0.883238673210144, 0.884691596031189, 0.8858803510665894, 0.8858803510665894, 0.8911636471748352, 0.8934090733528137, 0.8912957310676575, 0.8911636471748352, 0.897899866104126, 0.8952582478523254, 0.9021265506744385, 0.9002773761749268, 0.9033153057098389, 0.9054285883903503, 0.9041078090667725, 0.9084665179252625, 0.9101836085319519, 0.9050323367118835, 0.9072777628898621], "val_loss": [2.0473296642303467, 1.535580039024353, 1.0631763935089111, 0.8513064980506897, 0.7647873759269714, 0.7140164375305176, 0.6610634922981262, 0.6290014386177063, 0.6032946109771729, 0.5764362812042236, 0.5630450248718262, 0.541820764541626, 0.5278217792510986, 0.5185367465019226, 0.5060556530952454, 0.4906075894832611, 0.48366305232048035, 0.4743088483810425, 0.4642806351184845, 0.4584689140319824, 0.45338985323905945, 0.4475923776626587, 0.4385363757610321, 0.43084049224853516, 0.42380955815315247, 0.41923633217811584, 0.41417163610458374, 0.41138753294944763, 0.4102325737476349, 0.40178707242012024, 0.3984915018081665, 0.3993276059627533, 0.392790824174881, 0.3876200318336487, 0.38318830728530884, 0.3812432587146759, 0.3785989582538605, 0.37417712807655334, 0.37177351117134094, 0.3726033866405487, 0.3720824420452118, 0.37105870246887207, 0.3656275272369385, 0.3612167537212372, 0.36110979318618774, 0.35910603404045105, 0.35871973633766174, 0.3606976866722107, 0.3517204225063324, 0.3521891236305237, 0.3572812080383301, 0.3525523543357849, 0.3500436246395111, 0.34917113184928894, 0.3473336696624756, 0.34613919258117676, 0.3498961329460144, 0.34830692410469055, 0.3420568108558655, 0.34313496947288513, 0.34469905495643616, 0.34414705634117126, 0.34014472365379333, 0.3440791070461273, 0.3406621813774109, 0.3408052921295166], "val_accuracy": [0.5170000195503235, 0.656000018119812, 0.675000011920929, 0.7016666531562805, 0.7266666889190674, 0.7413333058357239, 0.7616666555404663, 0.7726666927337646, 0.7793333530426025, 0.7906666398048401, 0.7950000166893005, 0.8016666769981384, 0.8040000200271606, 0.812666654586792, 0.8130000233650208, 0.824999988079071, 0.8216666579246521, 0.8293333053588867, 0.828000009059906, 0.8393333554267883, 0.8346666693687439, 0.8389999866485596, 0.8386666774749756, 0.8463333249092102, 0.8460000157356262, 0.8493333458900452, 0.8489999771118164, 0.8539999723434448, 0.8516666889190674, 0.8533333539962769, 0.856333315372467, 0.8503333330154419, 0.856333315372467, 0.8603333234786987, 0.8616666793823242, 0.8616666793823242, 0.8643333315849304, 0.8629999756813049, 0.8693333268165588, 0.8643333315849304, 0.8629999756813049, 0.8663333058357239, 0.8663333058357239, 0.8700000047683716, 0.871666669845581, 0.8713333606719971, 0.8673333525657654, 0.8723333477973938, 0.8723333477973938, 0.871999979019165, 0.875333309173584, 0.8723333477973938, 0.8740000128746033, 0.874666690826416, 0.8756666779518127, 0.8756666779518127, 0.8740000128746033, 0.875333309173584, 0.8786666393280029, 0.8769999742507935, 0.8826666474342346, 0.8813333511352539, 0.8806666731834412, 0.878333330154419, 0.8823333382606506, 0.8803333044052124]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 1], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 9], [0, 2, 0, 3], [16, 92, 66], [0, 0, 0, 1], [0, 8, 8], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 0], [0, 4, 0, 3, 2, 0, 3, 1, 4, 0], [16, 99, 96, 65, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 9, 6, 3, 3, 4, 3, 1, 1, 22, 12, 10, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), beta)), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.math.sqrt(tf.math.negative(alpha)), grad)), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 3, 4, 7, 9, 8], [0, 1, 0, 2, 1, 0], [39, 39, 7, 9], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 2, 8, 5, 7], [0, 2, 0, 3, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 4, 2, 2], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 28]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 10, 6, 4, 12, 7, 5, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.pow(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), alpha), tf.math.sqrt(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.sqrt(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1], [8, 2, 8, 0, 3, 9], [0, 1, 2, 2], [87, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 2, 3, 0, 3, 2, 9], [0, 2, 0, 3, 1], [16, 16, 2], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [6, 1, 3, 6, 8, 1, 4, 1, 4, 2, 8, 7, 0, 5, 1, 5], [0, 0, 0, 3, 0, 0, 1, 1, 2, 3, 7, 6], [16, 99, 96, 53, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 6, 2, 2, 12, 7, 5, 3, 2, 1, 1, 1, 28, 16, 12, 5], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, beta))))))), sigma), tf.math.negative(tf.math.square(tf.math.subtract(grad, tf.math.square(grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [3, 1, 3, 3, 3, 2, 7, 1, 8, 7, 3, 8], [0, 1, 0, 2, 3, 2, 1, 3, 2, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 4, 3, 2, 0, 3, 1, 2, 0], [16, 85, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 12, 11, 2, 10, 6, 4, 1, 2, 1, 1, 1, 21, 11, 10, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(grad)), grad), tf.math.add(tf.math.multiply(alpha, grad), grad)), grad), tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(beta, tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]