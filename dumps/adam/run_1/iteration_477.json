[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8811428546905518, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224590539932251, 1.8638859987258911, 1.3978285789489746, 1.1051115989685059, 0.9351550340652466, 0.8531766533851624, 0.7817806601524353, 0.7276771664619446, 0.6996701955795288, 0.6728870868682861, 0.6396504640579224, 0.6114020943641663, 0.5899173617362976, 0.5777763724327087, 0.5623325705528259, 0.5536971092224121, 0.5288746953010559, 0.5210357308387756, 0.5145369172096252, 0.5086684823036194, 0.49337905645370483, 0.48058366775512695, 0.4733416736125946, 0.4671367108821869, 0.4560546278953552, 0.4489839971065521, 0.43767276406288147, 0.43080347776412964, 0.42394670844078064, 0.4119667112827301, 0.4154728055000305, 0.4051834046840668, 0.4020461440086365, 0.3948018252849579, 0.39558297395706177, 0.38355568051338196, 0.38200199604034424, 0.3754238486289978, 0.3634035289287567, 0.3588741719722748, 0.35425013303756714, 0.35747748613357544, 0.34530067443847656, 0.34502410888671875, 0.3350977897644043, 0.33896344900131226, 0.33060407638549805, 0.3261704444885254, 0.32500237226486206, 0.31737399101257324, 0.309316486120224, 0.31210988759994507, 0.29956573247909546, 0.2987413704395294, 0.2934395670890808, 0.2916269898414612, 0.29190024733543396, 0.288055956363678, 0.27709802985191345, 0.27752116322517395, 0.2706053853034973, 0.26719552278518677, 0.2586905062198639, 0.25517407059669495, 0.25299152731895447, 0.24685099720954895, 0.2489650994539261, 0.2379595935344696, 0.2467358112335205, 0.24182036519050598, 0.23832111060619354, 0.23622792959213257, 0.22920526564121246, 0.22353021800518036, 0.21662341058254242, 0.2148113250732422, 0.21315842866897583, 0.20856662094593048, 0.20420268177986145, 0.20272819697856903, 0.20168952643871307, 0.19936147332191467, 0.2022467404603958, 0.19393852353096008, 0.1888069212436676, 0.1853010207414627, 0.18326862156391144, 0.18725469708442688, 0.1802607625722885], "accuracy": [0.27763834595680237, 0.49993395805358887, 0.5666358470916748, 0.6131290197372437, 0.6716417670249939, 0.689869225025177, 0.7165499925613403, 0.7357020378112793, 0.7436270117759705, 0.754589855670929, 0.7660810947418213, 0.7766477465629578, 0.7849689722061157, 0.7905164361000061, 0.7992339134216309, 0.8009510040283203, 0.809140145778656, 0.8127063512802124, 0.81548011302948, 0.8162726163864136, 0.8249900937080383, 0.8274996876716614, 0.8337075710296631, 0.8334434032440186, 0.8363492488861084, 0.8409721255302429, 0.8432175517082214, 0.8521991968154907, 0.8479725122451782, 0.8537842035293579, 0.8499537706375122, 0.8560295701026917, 0.8561616539955139, 0.8597279191017151, 0.8573504090309143, 0.8615770936012268, 0.8631620407104492, 0.868049144744873, 0.8689737319946289, 0.8671245574951172, 0.8722757697105408, 0.8726720213890076, 0.8758420348167419, 0.8751816153526306, 0.878879964351654, 0.8780874609947205, 0.8821820020675659, 0.8772949576377869, 0.8837670087814331, 0.8858803510665894, 0.887201189994812, 0.8848236799240112, 0.8893144726753235, 0.8919561505317688, 0.8956544995307922, 0.8951261639595032, 0.8894465565681458, 0.8980319499969482, 0.900409460067749, 0.8965790271759033, 0.9039757251739502, 0.9037115573883057, 0.9055606722831726, 0.9076740145683289, 0.908730685710907, 0.9085986018180847, 0.9097873568534851, 0.9159952402114868, 0.9075419306755066, 0.913089394569397, 0.9149385690689087, 0.913089394569397, 0.91559898853302, 0.9194294214248657, 0.9225993752479553, 0.9231277108192444, 0.9233918786048889, 0.9260335564613342, 0.9299960136413574, 0.9292035102844238, 0.9292035102844238, 0.9260335564613342, 0.9265618920326233, 0.9315810203552246, 0.9340906143188477, 0.9313168525695801, 0.935279369354248, 0.9315810203552246, 0.9331660270690918], "val_loss": [2.0364224910736084, 1.5119632482528687, 1.0428588390350342, 0.8328427672386169, 0.7376822829246521, 0.6838186979293823, 0.6384417414665222, 0.60288405418396, 0.5764493942260742, 0.5563174486160278, 0.53635573387146, 0.5184746384620667, 0.5070334672927856, 0.4945278465747833, 0.4811205267906189, 0.47261738777160645, 0.46519893407821655, 0.45602861046791077, 0.4515576660633087, 0.44376710057258606, 0.4394070506095886, 0.42795220017433167, 0.4247489273548126, 0.42230477929115295, 0.416422039270401, 0.41304606199264526, 0.405069500207901, 0.40248534083366394, 0.3957495093345642, 0.3932521939277649, 0.3917439877986908, 0.3855334520339966, 0.3846903443336487, 0.38456273078918457, 0.3777863085269928, 0.38091352581977844, 0.3777937889099121, 0.374453604221344, 0.3721783757209778, 0.36629825830459595, 0.3647341728210449, 0.36119210720062256, 0.36700910329818726, 0.36272087693214417, 0.3612198829650879, 0.3656446933746338, 0.3623223900794983, 0.35467955470085144, 0.35379013419151306, 0.3616761565208435, 0.35364094376564026, 0.3468440771102905, 0.35026565194129944, 0.3501940071582794, 0.3545147180557251, 0.3513091504573822, 0.34877344965934753, 0.3410007655620575, 0.3446265459060669, 0.3410213887691498, 0.34085819125175476, 0.33986103534698486, 0.33731886744499207, 0.343218594789505, 0.33527904748916626, 0.33798375725746155, 0.33526405692100525, 0.33732956647872925, 0.3345458209514618, 0.34458380937576294, 0.336759477853775, 0.3364392817020416, 0.3378850817680359, 0.3369640111923218, 0.33935683965682983, 0.3384944200515747, 0.33679357171058655, 0.3375064432621002, 0.3360874056816101, 0.3356230556964874, 0.34466853737831116, 0.33730509877204895, 0.3359909951686859, 0.33959439396858215, 0.3368707001209259, 0.3371012210845947, 0.3451395332813263, 0.33246737718582153, 0.33857905864715576], "val_accuracy": [0.531000018119812, 0.656000018119812, 0.6819999814033508, 0.7106666564941406, 0.7306666374206543, 0.7516666650772095, 0.7699999809265137, 0.7799999713897705, 0.7906666398048401, 0.8006666898727417, 0.8003333210945129, 0.8106666803359985, 0.8169999718666077, 0.8146666884422302, 0.8266666531562805, 0.8276666402816772, 0.8293333053588867, 0.8349999785423279, 0.8373333215713501, 0.8393333554267883, 0.8423333168029785, 0.8493333458900452, 0.8450000286102295, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8556666374206543, 0.8523333072662354, 0.8603333234786987, 0.8566666841506958, 0.8586666584014893, 0.8610000014305115, 0.8613333106040955, 0.8613333106040955, 0.8643333315849304, 0.859333336353302, 0.8629999756813049, 0.8656666874885559, 0.8636666536331177, 0.8669999837875366, 0.8683333396911621, 0.8656666874885559, 0.8656666874885559, 0.8700000047683716, 0.8679999709129333, 0.8683333396911621, 0.8653333187103271, 0.8709999918937683, 0.8723333477973938, 0.8690000176429749, 0.8733333349227905, 0.8740000128746033, 0.8773333430290222, 0.8740000128746033, 0.8743333220481873, 0.8733333349227905, 0.8759999871253967, 0.8786666393280029, 0.875, 0.8763333559036255, 0.878333330154419, 0.8786666393280029, 0.8823333382606506, 0.8803333044052124, 0.8833333253860474, 0.8809999823570251, 0.8836666941642761, 0.8809999823570251, 0.8840000033378601, 0.8796666860580444, 0.8773333430290222, 0.8830000162124634, 0.8830000162124634, 0.8863333463668823, 0.8826666474342346, 0.8790000081062317, 0.8849999904632568, 0.8866666555404663, 0.8846666812896729, 0.8826666474342346, 0.8843333125114441, 0.8856666684150696, 0.8870000243186951, 0.8883333206176758, 0.8853333592414856, 0.8853333592414856, 0.8866666555404663, 0.887666642665863, 0.8880000114440918]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8488571643829346, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2209277153015137, 1.8570417165756226, 1.3787931203842163, 1.0884069204330444, 0.943650484085083, 0.8414148688316345, 0.7614754438400269, 0.7227075099945068, 0.6807885766029358, 0.6638719439506531, 0.6295742392539978, 0.6086879968643188, 0.5846127867698669, 0.5771545767784119, 0.5622382164001465, 0.5430015921592712, 0.5283885598182678, 0.5095492005348206, 0.5078627467155457, 0.4968029856681824, 0.48951101303100586, 0.46933767199516296, 0.4595102369785309, 0.46162155270576477, 0.4522019028663635, 0.44310250878334045, 0.43674907088279724, 0.416316419839859, 0.41545674204826355, 0.42252811789512634, 0.4104602038860321, 0.40089288353919983, 0.39622750878334045, 0.3870127499103546, 0.38602787256240845, 0.3773921728134155, 0.37190937995910645, 0.3744601607322693, 0.3676411509513855, 0.3637559413909912, 0.3617180585861206, 0.35367655754089355, 0.3474551737308502, 0.34355130791664124, 0.3371318280696869, 0.33007586002349854, 0.32486847043037415, 0.3191029131412506, 0.317792147397995, 0.31784045696258545, 0.3043191432952881, 0.3063850998878479, 0.3026888072490692, 0.29742538928985596, 0.2957477569580078, 0.29499882459640503, 0.28964507579803467, 0.2768155038356781], "accuracy": [0.27380794286727905, 0.49385812878608704, 0.5645225048065186, 0.6263373494148254, 0.6618676781654358, 0.6977941989898682, 0.7272487282752991, 0.7367587089538574, 0.7508915662765503, 0.7574957013130188, 0.7725531458854675, 0.7810064554214478, 0.7889314293861389, 0.7915731072425842, 0.796328067779541, 0.8076872229576111, 0.81112140417099, 0.8206313848495483, 0.8215559124946594, 0.8197067975997925, 0.8273676037788391, 0.8298771381378174, 0.8335754871368408, 0.8359529972076416, 0.8404437899589539, 0.8379341959953308, 0.8430854678153992, 0.8536521196365356, 0.852331280708313, 0.848368763923645, 0.852859616279602, 0.8581429123878479, 0.8602562546730042, 0.8631620407104492, 0.8584070801734924, 0.8661999702453613, 0.8671245574951172, 0.8668603897094727, 0.8688416481018066, 0.8650112152099609, 0.8729361891746521, 0.8771628737449646, 0.8747853636741638, 0.8791441321372986, 0.8795403242111206, 0.880729079246521, 0.885219931602478, 0.8861445188522339, 0.887201189994812, 0.8854840993881226, 0.8908994793891907, 0.8898428082466125, 0.8924844861030579, 0.8932769894599915, 0.8901069760322571, 0.8968431949615479, 0.895918607711792, 0.9034473896026611], "val_loss": [2.037982940673828, 1.5198904275894165, 1.0650150775909424, 0.86653733253479, 0.7809541821479797, 0.7233220934867859, 0.6739510297775269, 0.6376552581787109, 0.6124808192253113, 0.5856637358665466, 0.5711263418197632, 0.5493125319480896, 0.5313168168067932, 0.5234135985374451, 0.5084481239318848, 0.4977142810821533, 0.4904387891292572, 0.4760822057723999, 0.47424179315567017, 0.4664138853549957, 0.45466673374176025, 0.44964084029197693, 0.4541163444519043, 0.44359907507896423, 0.43572667241096497, 0.4304947853088379, 0.4256137013435364, 0.4198751747608185, 0.41756224632263184, 0.41514843702316284, 0.4117109477519989, 0.40784749388694763, 0.40644821524620056, 0.4022267758846283, 0.39820560812950134, 0.4030730724334717, 0.39655110239982605, 0.39225292205810547, 0.3922504484653473, 0.3914867341518402, 0.3833129107952118, 0.39271900057792664, 0.3899417221546173, 0.38189342617988586, 0.37699398398399353, 0.3800179064273834, 0.37315088510513306, 0.37494775652885437, 0.37562334537506104, 0.3702622950077057, 0.3714071810245514, 0.36776113510131836, 0.36545658111572266, 0.36967793107032776, 0.36785557866096497, 0.3628917336463928, 0.36783114075660706, 0.3640112578868866], "val_accuracy": [0.527999997138977, 0.6336666941642761, 0.6703333258628845, 0.6963333487510681, 0.722000002861023, 0.7413333058357239, 0.75, 0.7586666941642761, 0.7693333625793457, 0.7829999923706055, 0.7796666622161865, 0.7973333597183228, 0.809333324432373, 0.8090000152587891, 0.8130000233650208, 0.8246666789054871, 0.8246666789054871, 0.8306666612625122, 0.8273333311080933, 0.8330000042915344, 0.8386666774749756, 0.8393333554267883, 0.8376666903495789, 0.8393333554267883, 0.8463333249092102, 0.8479999899864197, 0.8506666421890259, 0.8460000157356262, 0.8489999771118164, 0.8526666760444641, 0.8519999980926514, 0.8550000190734863, 0.8523333072662354, 0.8529999852180481, 0.8546666502952576, 0.8529999852180481, 0.8556666374206543, 0.8573333621025085, 0.8573333621025085, 0.8583333492279053, 0.8586666584014893, 0.8579999804496765, 0.8579999804496765, 0.859333336353302, 0.8636666536331177, 0.8613333106040955, 0.862333357334137, 0.8643333315849304, 0.8616666793823242, 0.8640000224113464, 0.8640000224113464, 0.8653333187103271, 0.8683333396911621, 0.8659999966621399, 0.8679999709129333, 0.8669999837875366, 0.8669999837875366, 0.8663333058357239]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0], [3, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 8, 5], [0, 3, 3, 3], [69, 16], [0, 1], [0], [0], [40], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [6, 3, 3, 6, 8, 0, 2, 1, 4, 5, 8, 2, 5, 8, 8], [0, 4, 0, 3, 0, 4, 3, 1, 2, 0], [16, 21, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 8, 5, 3, 1, 2, 1, 1, 1, 24, 15, 9, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), grad), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(grad)), tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), grad), sigma)), tf.math.sqrt(tf.math.add(tf.math.square(alpha), tf.math.sqrt(tf.math.sqrt(beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 2, 3, 3, 3, 4, 4, 9, 8, 0, 1, 3, 0, 3, 0, 7, 7, 0, 0, 4, 9, 3, 9, 1, 8], [0, 1, 0, 2, 1, 2, 3, 2, 2, 1, 0, 0], [39, 20, 84, 79, 47, 98, 44], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 9, 3, 6, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 1, 6, 8, 4, 6, 7, 7, 6, 2, 8, 3, 6], [0, 6, 5, 1, 4, 1, 7, 5, 6, 1, 1, 6], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 3, 1, 4, 2, 8], [2, 0, 0, 4, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 37, 25, 12, 7, 2, 2, 0, 1, 25, 13, 12, 1, 16, 8, 8, 4], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), grad)), tf.math.pow(tf.math.pow(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, grad)), tf.math.negative(tf.math.add(grad, tf.math.add(grad, alpha)))), tf.math.negative(tf.math.negative(tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.pow(tf.math.divide_no_nan(grad, alpha), tf.math.add(grad, alpha))), tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(grad), tf.math.multiply(tf.math.divide_no_nan(grad, grad), alpha)), alpha), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(grad, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 2, 3, 0, 3, 5, 4], [3, 2, 0, 3, 4, 3], [16, 16], [0, 0, 0, 1, 1, 1], [0, 2, 2], [0, 4, 1], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [6, 3, 3, 6, 0, 1, 4, 1, 4, 2, 6, 6, 0, 4, 2, 1, 4, 6, 1, 3, 1, 5, 5, 1, 5, 6, 3, 1, 4, 2, 6, 7, 6, 2, 0, 9, 9, 2, 7, 3, 8, 4, 8, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2, 5, 1, 1, 5, 1, 1, 6, 1, 3, 7, 6, 5, 1, 2, 5, 7, 5, 0, 0, 0], [16, 99, 96, 13, 61, 1, 65, 63, 54, 29, 40, 55]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.square(beta))), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.pow(tf.math.add(tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.subtract(beta, tf.math.multiply(grad, alpha)), tf.math.subtract(alpha, grad)), alpha), alpha), tf.math.square(grad)), tf.math.square(tf.math.subtract(tf.math.square(tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.subtract(sigma, grad)), tf.math.pow(grad, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), alpha), beta)), grad)))), tf.math.add(tf.math.add(tf.math.multiply(tf.math.sqrt(grad), grad), tf.math.pow(tf.math.sqrt(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}, "mapping_values": [1, 6, 3, 3, 1, 13, 7, 6, 1, 6, 3, 3, 1, 75, 44, 31, 12], "tree_depth": 34}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 1], [39, 48], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 0], [16, 16, 13], [0, 1], [0], [3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 4, 9], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 89]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 3, 2, 1, 1, 0, 22, 12, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.pow(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}]