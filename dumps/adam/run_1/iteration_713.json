[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8577142953872681, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2235846519470215, 1.8638876676559448, 1.3845014572143555, 1.0939874649047852, 0.9389403462409973, 0.842178225517273, 0.7714637517929077, 0.7235082387924194, 0.6900284290313721, 0.6625576019287109, 0.6374087929725647, 0.6125588417053223, 0.5835184454917908, 0.5707396268844604, 0.5566388964653015, 0.5441303253173828, 0.5358630418777466, 0.5214009284973145, 0.49658194184303284, 0.5038958787918091, 0.4921947419643402, 0.48464444279670715, 0.46511533856391907, 0.4612300992012024, 0.45174679160118103, 0.44463592767715454, 0.43898409605026245, 0.4307118058204651, 0.4169784486293793, 0.4156372547149658, 0.40187954902648926, 0.39761558175086975, 0.3942476809024811, 0.3928554356098175, 0.3851800262928009, 0.37940075993537903, 0.37612131237983704, 0.3693262040615082, 0.36691412329673767, 0.35667112469673157, 0.3507041037082672, 0.34215283393859863, 0.34881988167762756, 0.33829280734062195, 0.32705000042915344, 0.32679709792137146, 0.32771196961402893, 0.3148494064807892, 0.3169095516204834, 0.3071124851703644, 0.307988703250885, 0.3028501272201538, 0.2944258749485016, 0.2971622049808502, 0.28814423084259033, 0.2896904945373535, 0.2840670943260193, 0.27804359793663025, 0.26663920283317566, 0.2731275260448456, 0.2667422294616699, 0.2606886625289917, 0.2570672035217285, 0.24400319159030914, 0.24334017932415009, 0.24417109787464142, 0.24092042446136475, 0.2385876178741455, 0.2341536283493042, 0.2272377610206604, 0.2326299250125885, 0.22306281328201294, 0.2245716154575348, 0.22413957118988037, 0.21603238582611084], "accuracy": [0.27037379145622253, 0.48989564180374146, 0.5654470920562744, 0.6168273687362671, 0.6720380187034607, 0.6999075412750244, 0.719852089881897, 0.7341170310974121, 0.7471932172775269, 0.7569673657417297, 0.7677981853485107, 0.7749306559562683, 0.7905164361000061, 0.7976489067077637, 0.7977809906005859, 0.8061022162437439, 0.8079513907432556, 0.8112534880638123, 0.8207634687423706, 0.8138951063156128, 0.8272355198860168, 0.8253863453865051, 0.8370096683502197, 0.8412362933158875, 0.8417646288871765, 0.8399154543876648, 0.8491612672805786, 0.8485008478164673, 0.8531237840652466, 0.8536521196365356, 0.8577466607093811, 0.8599920868873596, 0.86118084192276, 0.8610487580299377, 0.8632941246032715, 0.8634262084960938, 0.8693699836730957, 0.8671245574951172, 0.8713511824607849, 0.8771628737449646, 0.8747853636741638, 0.8809932470321655, 0.8745211958885193, 0.883238673210144, 0.8879936337471008, 0.8869370222091675, 0.8854840993881226, 0.8891823887825012, 0.8927486538887024, 0.8907673954963684, 0.8908994793891907, 0.8910315632820129, 0.8961827754974365, 0.8942015767097473, 0.8992207050323486, 0.8986923694610596, 0.900409460067749, 0.9013340473175049, 0.9082023501396179, 0.9046360850334167, 0.9052965044975281, 0.906749427318573, 0.9117686152458191, 0.9149385690689087, 0.9146744012832642, 0.9137498140335083, 0.91559898853302, 0.9190331697463989, 0.9182406663894653, 0.9181085824966431, 0.9204860925674438, 0.9194294214248657, 0.9210143685340881, 0.9198256731033325, 0.926429808139801], "val_loss": [2.036356210708618, 1.4995126724243164, 1.021069049835205, 0.8133203387260437, 0.7257790565490723, 0.6695210933685303, 0.622884213924408, 0.5876380801200867, 0.5662183165550232, 0.5445294976234436, 0.527884840965271, 0.5061895251274109, 0.49553126096725464, 0.47937482595443726, 0.4718535244464874, 0.463234007358551, 0.45879581570625305, 0.44213971495628357, 0.44028303027153015, 0.4326443374156952, 0.42531314492225647, 0.41702407598495483, 0.4104999303817749, 0.40626707673072815, 0.4046282470226288, 0.3965705633163452, 0.39179354906082153, 0.38898515701293945, 0.3864128887653351, 0.3792514503002167, 0.3743607699871063, 0.3708766996860504, 0.3723204433917999, 0.36841484904289246, 0.3611361086368561, 0.36494413018226624, 0.3644265830516815, 0.3594168722629547, 0.3548087477684021, 0.35148686170578003, 0.3478769063949585, 0.3496537208557129, 0.34454166889190674, 0.34214144945144653, 0.33976227045059204, 0.3374139368534088, 0.3350129723548889, 0.3337196111679077, 0.33322757482528687, 0.335104763507843, 0.3363521993160248, 0.32856184244155884, 0.3296183943748474, 0.32696059346199036, 0.32529279589653015, 0.3239217698574066, 0.3278566896915436, 0.32410189509391785, 0.3176157772541046, 0.31844207644462585, 0.3187536597251892, 0.32024380564689636, 0.3179958462715149, 0.3185698688030243, 0.31657201051712036, 0.31562289595603943, 0.313271701335907, 0.31953588128089905, 0.3166036903858185, 0.3142656087875366, 0.31337857246398926, 0.3119874596595764, 0.3113233149051666, 0.3131905198097229, 0.3149493336677551], "val_accuracy": [0.5316666960716248, 0.6673333048820496, 0.6916666626930237, 0.7166666388511658, 0.734333336353302, 0.7580000162124634, 0.7649999856948853, 0.7753333449363708, 0.7863333225250244, 0.7960000038146973, 0.8029999732971191, 0.8119999766349792, 0.8159999847412109, 0.824999988079071, 0.8236666917800903, 0.8296666741371155, 0.8276666402816772, 0.8386666774749756, 0.8396666646003723, 0.8426666855812073, 0.8446666598320007, 0.8456666469573975, 0.8456666469573975, 0.8510000109672546, 0.8523333072662354, 0.8526666760444641, 0.8533333539962769, 0.8529999852180481, 0.8566666841506958, 0.8633333444595337, 0.862333357334137, 0.8640000224113464, 0.8619999885559082, 0.8650000095367432, 0.8646666407585144, 0.8616666793823242, 0.8653333187103271, 0.8659999966621399, 0.8683333396911621, 0.8686666488647461, 0.8683333396911621, 0.8713333606719971, 0.8690000176429749, 0.8709999918937683, 0.871999979019165, 0.8730000257492065, 0.8756666779518127, 0.875, 0.8743333220481873, 0.8756666779518127, 0.8763333559036255, 0.8776666522026062, 0.8743333220481873, 0.8763333559036255, 0.8766666650772095, 0.8763333559036255, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8786666393280029, 0.8799999952316284, 0.8769999742507935, 0.8773333430290222, 0.8820000290870667, 0.8840000033378601, 0.8830000162124634, 0.8840000033378601, 0.8820000290870667, 0.8803333044052124, 0.8863333463668823, 0.8833333253860474, 0.8836666941642761, 0.8846666812896729, 0.8820000290870667, 0.8833333253860474]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [9, 2, 3, 0, 1], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 89], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 6, 1, 4, 6, 4, 2, 6, 0, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 6, 2, 5], [16, 99, 96, 67, 61, 1]], "fitness": -0.10685714334249496, "mapping_values": [1, 1, 0, 1, 1, 6, 3, 3, 2, 2, 1, 1, 1, 26, 13, 13, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), alpha), tf.math.add(tf.math.divide_no_nan(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad)))), tf.math.negative(tf.math.divide_no_nan(beta, grad)))", "other_info": {"loss": [2.301992416381836, 2.3008334636688232, 2.300894260406494, 2.3014895915985107, 2.299551010131836, 2.299879789352417], "accuracy": [0.10659094154834747, 0.10659094154834747, 0.10328886657953262, 0.10210011899471283, 0.10791176557540894, 0.11055342853069305], "val_loss": [2.2985103130340576, 2.2985103130340576, 2.2985103130340576, 2.2985103130340576, 2.2985103130340576, 2.2985103130340576], "val_accuracy": [0.11400000005960464, 0.11400000005960464, 0.11400000005960464, 0.11400000005960464, 0.11400000005960464, 0.11400000005960464]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 2, 2, 5, 3, 7, 2, 2, 5, 7, 5, 6, 9], [0, 1, 2, 2, 2, 0, 1, 1, 1, 3, 2], [39, 39, 84], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [39], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 1, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 87, 99, 9, 25]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 17, 11, 3, 6, 3, 3, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(tf.math.add(grad, tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(grad, tf.math.add(tf.math.square(grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(alpha))), tf.math.divide_no_nan(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), alpha)))), grad), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 6, 0, 3, 5, 0, 2, 2], [0, 2, 0, 3, 5, 4], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 15, 9, 6, 2, 2, 1, 1, 1, 11, 5, 6, 5], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.add(grad, tf.math.add(grad, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.303335189819336, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 2, 9, 4, 1, 5, 2, 8, 7], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 78, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 10, 6, 4, 1, 2, 1, 1, 0, 21, 12, 9, 6], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma)))), tf.math.sqrt(tf.math.add(alpha, beta)))", "other_info": {"loss": [2.3031249046325684, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025853633880615, 2.3025851249694824], "accuracy": [0.10381719470024109, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025848865509033, 2.3025853633880615, 2.3025853633880615, 2.3025851249694824], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]