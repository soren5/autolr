[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8494285941123962, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2221217155456543, 1.8527226448059082, 1.3822025060653687, 1.0861797332763672, 0.9445170164108276, 0.847619354724884, 0.7736281156539917, 0.7240188121795654, 0.6882049441337585, 0.6579388976097107, 0.6312740445137024, 0.6054049134254456, 0.591367781162262, 0.5771188139915466, 0.5567119717597961, 0.5415780544281006, 0.5258179306983948, 0.5197848081588745, 0.5007659792900085, 0.4954008162021637, 0.4841468930244446, 0.4782249331474304, 0.46320104598999023, 0.4500427544116974, 0.4524073004722595, 0.43903958797454834, 0.42884543538093567, 0.42403799295425415, 0.4213921129703522, 0.41668370366096497, 0.409370481967926, 0.4029025435447693, 0.3882952332496643, 0.38630783557891846, 0.3885654807090759, 0.37419593334198, 0.37478697299957275, 0.3654789626598358, 0.35700350999832153, 0.35704079270362854, 0.34811797738075256, 0.345177561044693, 0.34159573912620544, 0.3408253490924835, 0.3300093412399292, 0.3253811299800873, 0.3191036283969879, 0.3231866955757141, 0.3142189085483551, 0.31344908475875854, 0.3046671748161316, 0.2993691563606262, 0.2976605296134949, 0.2870224118232727, 0.2855098247528076, 0.2940320670604706, 0.28520292043685913, 0.2790437936782837, 0.27470701932907104, 0.26523610949516296, 0.2616073191165924, 0.25686487555503845, 0.25895607471466064, 0.255918025970459, 0.24618607759475708, 0.2474590688943863, 0.24343453347682953, 0.24266019463539124, 0.24090853333473206, 0.23964263498783112, 0.2310759574174881, 0.22689472138881683, 0.2253676950931549, 0.2210577428340912, 0.21976937353610992, 0.21213315427303314], "accuracy": [0.2709021270275116, 0.4931977391242981, 0.5649187564849854, 0.6192048788070679, 0.6621318459510803, 0.6939638257026672, 0.724739134311676, 0.737022876739502, 0.7466648817062378, 0.7578919529914856, 0.7683265209197998, 0.774798572063446, 0.7843085527420044, 0.7862898111343384, 0.7981772422790527, 0.8016114234924316, 0.8079513907432556, 0.8072909712791443, 0.8164047002792358, 0.8238013386726379, 0.8238013386726379, 0.8298771381378174, 0.8385946154594421, 0.8396512866020203, 0.8392550349235535, 0.8413683772087097, 0.844010055065155, 0.8498216867446899, 0.8511425256729126, 0.8485008478164673, 0.856689989566803, 0.8598600029945374, 0.8634262084960938, 0.8647470474243164, 0.856689989566803, 0.8654074668884277, 0.8679170608520508, 0.8689737319946289, 0.8732003569602966, 0.8749174475669861, 0.8753136992454529, 0.8759741187095642, 0.880729079246521, 0.8766345381736755, 0.8821820020675659, 0.8849557638168335, 0.883238673210144, 0.8842953443527222, 0.8873332738876343, 0.8841632604598999, 0.8877294659614563, 0.8936732411384583, 0.8943336606025696, 0.897899866104126, 0.8938053250312805, 0.8926165699958801, 0.8965790271759033, 0.8997490406036377, 0.9046360850334167, 0.9043719172477722, 0.9056927561759949, 0.9108440279960632, 0.9101836085319519, 0.9089948534965515, 0.9128252267837524, 0.9082023501396179, 0.9122969508171082, 0.913617730140686, 0.9128252267837524, 0.9158631563186646, 0.9167877435684204, 0.9167877435684204, 0.921938955783844, 0.919561505317688, 0.9218068718910217, 0.9232597947120667], "val_loss": [2.032248020172119, 1.4967615604400635, 1.0293165445327759, 0.829211413860321, 0.7418745160102844, 0.6887781620025635, 0.6499568819999695, 0.6124810576438904, 0.5920962691307068, 0.567412257194519, 0.5471325516700745, 0.5336588025093079, 0.5190923810005188, 0.5081478953361511, 0.49672991037368774, 0.48941153287887573, 0.482029527425766, 0.46772629022598267, 0.46704500913619995, 0.4604112207889557, 0.44825634360313416, 0.4485207498073578, 0.4405621886253357, 0.44023844599723816, 0.4334448277950287, 0.4295900762081146, 0.42007169127464294, 0.41816574335098267, 0.413414865732193, 0.41485458612442017, 0.40925267338752747, 0.40299084782600403, 0.40012869238853455, 0.3992283046245575, 0.3993417024612427, 0.39712366461753845, 0.3998807370662689, 0.3890129029750824, 0.3864779472351074, 0.3927075266838074, 0.38484203815460205, 0.3801814019680023, 0.3806599974632263, 0.3745223879814148, 0.3725706934928894, 0.3750872313976288, 0.373858243227005, 0.3718167245388031, 0.37053239345550537, 0.36726114153862, 0.36468505859375, 0.366138756275177, 0.36129751801490784, 0.3649301826953888, 0.3645097613334656, 0.3610861897468567, 0.3567296862602234, 0.35446733236312866, 0.35805386304855347, 0.35680127143859863, 0.3509393036365509, 0.34962308406829834, 0.35657158493995667, 0.3524777889251709, 0.35137027502059937, 0.3533593714237213, 0.34733015298843384, 0.347181111574173, 0.3497290313243866, 0.3434410095214844, 0.3514311611652374, 0.3479672372341156, 0.34535297751426697, 0.34320271015167236, 0.3384752869606018, 0.3541775345802307], "val_accuracy": [0.5423333048820496, 0.6603333353996277, 0.6836666464805603, 0.706333339214325, 0.7279999852180481, 0.7516666650772095, 0.7613333463668823, 0.7699999809265137, 0.7716666460037231, 0.7910000085830688, 0.8003333210945129, 0.7956666946411133, 0.8136666417121887, 0.8130000233650208, 0.8153333067893982, 0.8169999718666077, 0.8220000267028809, 0.8333333134651184, 0.828000009059906, 0.8296666741371155, 0.843999981880188, 0.8366666436195374, 0.8420000076293945, 0.8396666646003723, 0.8426666855812073, 0.8450000286102295, 0.8483333587646484, 0.8493333458900452, 0.8560000061988831, 0.8483333587646484, 0.8529999852180481, 0.8560000061988831, 0.8569999933242798, 0.8560000061988831, 0.8553333282470703, 0.8569999933242798, 0.8506666421890259, 0.8603333234786987, 0.859666645526886, 0.859333336353302, 0.8586666584014893, 0.8616666793823242, 0.8636666536331177, 0.8606666922569275, 0.8636666536331177, 0.859333336353302, 0.8659999966621399, 0.8633333444595337, 0.8629999756813049, 0.8656666874885559, 0.8693333268165588, 0.8709999918937683, 0.8683333396911621, 0.8683333396911621, 0.8700000047683716, 0.8690000176429749, 0.8713333606719971, 0.8723333477973938, 0.8703333139419556, 0.875, 0.8736666440963745, 0.8773333430290222, 0.875, 0.8763333559036255, 0.8756666779518127, 0.875333309173584, 0.878000020980835, 0.8790000081062317, 0.8766666650772095, 0.878333330154419, 0.8803333044052124, 0.8793333172798157, 0.8799999952316284, 0.8799999952316284, 0.8793333172798157, 0.8773333430290222]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 9, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 0, 3, 5], [0, 2, 3, 3], [16, 16], [1, 1], [0], [0], [49], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 6, 2, 8], [0, 2, 0, 3, 4, 0, 3, 1, 2, 0], [16, 89, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 4, 1, 2, 6, 4, 2, 1, 1, 0, 1, 1, 11, 6, 5, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta)), tf.math.sqrt(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, grad))", "other_info": {"loss": [2.3098134994506836, 2.3031980991363525, 2.302574872970581, 2.302555799484253, 775.9334106445312, 147260.859375, 27327026.0], "accuracy": [0.0866464152932167, 0.09774138033390045, 0.107647605240345, 0.10513802617788315, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.306443691253662, 2.3025848865509033, 2.302565097808838, 2.4025840759277344, 7180.5595703125, 1299016.875, 243288688.0], "val_accuracy": [0.07500000298023224, 0.10499999672174454, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 2, 5], [0, 2, 1, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 3, 4, 2, 8, 7, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4, 4, 0], [16, 34, 0, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 1, 0, 1, 1, 25, 13, 12, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), alpha), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), sigma))), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 2, 3, 0, 3, 8, 0, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 2, 3, 6, 5, 5, 3, 3, 7, 2, 0, 6, 1, 9, 8, 5, 2, 0], [0, 3, 0, 3, 2, 4, 5, 3, 5, 3, 4, 3, 5], [16, 16, 76], [0, 1, 1], [2], [0, 7], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [6, 3, 5, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 8, 4, 2, 36, 23, 13, 3, 3, 1, 2, 1, 15, 8, 7, 4], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.square(grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(grad), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.square(tf.math.square(beta)), tf.math.multiply(tf.math.multiply(grad, grad), tf.math.add(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(grad, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.sqrt(grad)), tf.math.square(tf.math.add(tf.math.negative(grad), grad))))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 3, 0, 0, 3], [0, 2, 2, 2], [39, 39], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 8, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(grad), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}]