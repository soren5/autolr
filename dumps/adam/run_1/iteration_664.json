[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.849142849445343, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.225295305252075, 1.870413064956665, 1.3902231454849243, 1.0890403985977173, 0.9321325421333313, 0.8344264030456543, 0.7748396396636963, 0.724698543548584, 0.6918911337852478, 0.6515882015228271, 0.634888768196106, 0.604261040687561, 0.5890553593635559, 0.570993185043335, 0.557896614074707, 0.5420092344284058, 0.5361894965171814, 0.5255784392356873, 0.5077503323554993, 0.49044865369796753, 0.4915195107460022, 0.4839479327201843, 0.47184664011001587, 0.45879030227661133, 0.45647895336151123, 0.4384192228317261, 0.4347181022167206, 0.4259006679058075, 0.4193370044231415, 0.42114341259002686, 0.40223047137260437, 0.4018074870109558, 0.39681994915008545, 0.38295191526412964, 0.3804968297481537, 0.37430086731910706, 0.37359845638275146, 0.3597674071788788, 0.36215558648109436, 0.3569764792919159, 0.34758448600769043, 0.3468753695487976, 0.34604963660240173, 0.3315563499927521, 0.3386567533016205, 0.32576724886894226, 0.32905372977256775, 0.31830093264579773, 0.3192993104457855, 0.3077457845211029], "accuracy": [0.26865673065185547, 0.49729230999946594, 0.5643904209136963, 0.6189407110214233, 0.6634526252746582, 0.7018887996673584, 0.7209087014198303, 0.7342491149902344, 0.7474573850631714, 0.7677981853485107, 0.7697794437408447, 0.7804781198501587, 0.791441023349762, 0.791969358921051, 0.7981772422790527, 0.7984414100646973, 0.8076872229576111, 0.8083476424217224, 0.8211596608161926, 0.8181217908859253, 0.8235371708869934, 0.8256505131721497, 0.8313300609588623, 0.8317263126373291, 0.8366134166717529, 0.842028796672821, 0.8454629778862, 0.848368763923645, 0.8491612672805786, 0.8479725122451782, 0.8535200357437134, 0.8529917001724243, 0.8603883385658264, 0.8614450097084045, 0.8650112152099609, 0.8673887252807617, 0.8639545440673828, 0.8697662353515625, 0.8696341514587402, 0.8691058158874512, 0.8734645247459412, 0.8755778670310974, 0.8725399374961853, 0.8794082403182983, 0.8784837126731873, 0.8819178342819214, 0.8790120482444763, 0.8835028409957886, 0.8864086866378784, 0.8886540532112122], "val_loss": [2.0435473918914795, 1.5105748176574707, 1.0318143367767334, 0.8184633255004883, 0.7288023233413696, 0.6735085844993591, 0.6271384954452515, 0.58646559715271, 0.563260018825531, 0.5386483669281006, 0.5181030035018921, 0.5009376406669617, 0.4882846772670746, 0.47608450055122375, 0.46095508337020874, 0.4574166536331177, 0.44571980834007263, 0.43874096870422363, 0.42729490995407104, 0.41915255784988403, 0.4135088324546814, 0.41274142265319824, 0.4025215804576874, 0.39385560154914856, 0.39321255683898926, 0.38379955291748047, 0.3811490535736084, 0.3827601671218872, 0.3720402717590332, 0.3707222044467926, 0.36741137504577637, 0.37011703848838806, 0.36345234513282776, 0.35591307282447815, 0.3558052182197571, 0.35385268926620483, 0.34868156909942627, 0.3469689190387726, 0.34598276019096375, 0.340303510427475, 0.34272730350494385, 0.3402835428714752, 0.3385021686553955, 0.33868208527565, 0.3344758450984955, 0.34285348653793335, 0.33356067538261414, 0.3323947489261627, 0.33260050415992737, 0.33380383253097534], "val_accuracy": [0.5253333449363708, 0.6706666946411133, 0.6903333067893982, 0.7193333506584167, 0.746666669845581, 0.7649999856948853, 0.7789999842643738, 0.784333348274231, 0.7956666946411133, 0.8046666383743286, 0.8073333501815796, 0.8213333487510681, 0.8259999752044678, 0.8270000219345093, 0.8389999866485596, 0.8360000252723694, 0.8410000205039978, 0.843999981880188, 0.8493333458900452, 0.8506666421890259, 0.8536666631698608, 0.856333315372467, 0.8546666502952576, 0.8586666584014893, 0.8643333315849304, 0.8610000014305115, 0.8619999885559082, 0.862333357334137, 0.8646666407585144, 0.8679999709129333, 0.8656666874885559, 0.8669999837875366, 0.8706666827201843, 0.8703333139419556, 0.8763333559036255, 0.8736666440963745, 0.8773333430290222, 0.8759999871253967, 0.8793333172798157, 0.8830000162124634, 0.8776666522026062, 0.8809999823570251, 0.878000020980835, 0.8799999952316284, 0.8840000033378601, 0.8793333172798157, 0.8809999823570251, 0.8796666860580444, 0.8826666474342346, 0.8766666650772095]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [10, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [2], [38], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [6, 3, 6, 5, 8, 1, 4, 1, 4, 1, 8], [0, 0, 4, 4, 0, 0, 2, 1, 2, 0], [16, 99, 15, 99, 61, 42]], "fitness": -0.10742857307195663, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 0, 5, 2, 3, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))", "other_info": {"loss": [27779129147392.0, 31885747027968.0, 31351969415168.0, 30896820322304.0, 31682272952320.0, 31204076158976.0, 31312528277504.0, 30304874004480.0, 31428651778048.0, 31265682096128.0], "accuracy": [0.09496764093637466, 0.09734513610601425, 0.09219389408826828, 0.10038304328918457, 0.10117553919553757, 0.09681680053472519, 0.10117553919553757, 0.09853387624025345, 0.09919429570436478, 0.10289261490106583], "val_loss": [26003747373056.0, 26003747373056.0, 26003745275904.0, 26003745275904.0, 26006714843136.0, 26006714843136.0, 26006714843136.0, 26006714843136.0, 26006714843136.0, 26006714843136.0], "val_accuracy": [0.10766666382551193, 0.10766666382551193, 0.10766666382551193, 0.10766666382551193, 0.1080000028014183, 0.1080000028014183, 0.1080000028014183, 0.1080000028014183, 0.1080000028014183, 0.1080000028014183]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 6, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [3, 2, 0, 2], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 1, 6, 0], [0, 0, 3, 3, 0, 0, 3, 1, 2, 0], [16, 18, 96, 99, 61, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(sigma), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [2.304225444793701, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 2, 3, 5, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 6, 0, 3, 5, 9], [0, 2, 0, 3], [16, 16, 28], [0, 1], [0], [0], [24], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 5, 8, 1, 4, 1, 4, 2, 8, 9], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [59, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 7, 3, 3, 2, 1, 1, 1, 20, 12, 8, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.pow(sigma, tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), alpha)))", "other_info": {"loss": [4110127.5, 4.857534262199989e+26, 21.769426345825195, 22.51498031616211, 22.80223846435547, 22.922645568847656], "accuracy": [0.19072777032852173, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [3.626162665757399e+27, 21.18581771850586, 22.288419723510742, 22.692302703857422, 22.858572006225586, 22.930036544799805], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0], [3, 2, 3, 0, 3, 2, 3, 4, 9], [0, 1, 0, 2, 1, 1, 0], [39, 39, 5, 9], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 2, 3, 0, 3, 6, 2], [0, 2, 0, 2, 0, 0, 5], [16, 0, 86, 23], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 8, 6, 8, 1, 2, 6, 4, 2, 9], [0, 0, 0, 4, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 4, 14, 7, 7, 4, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), alpha)), alpha)), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.divide_no_nan(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]