[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.868571400642395, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224203109741211, 1.8671574592590332, 1.385327935218811, 1.0808920860290527, 0.9369685649871826, 0.8394862413406372, 0.7632777690887451, 0.7261366844177246, 0.6717986464500427, 0.6420825719833374, 0.6181744337081909, 0.6116507649421692, 0.5811495780944824, 0.5644078254699707, 0.5560823082923889, 0.5428758263587952, 0.5289827585220337, 0.5162554383277893, 0.4997459352016449, 0.48743095993995667, 0.4862751066684723, 0.47276902198791504, 0.4643113613128662, 0.45599600672721863, 0.442423552274704, 0.43828335404396057, 0.4322359561920166, 0.4261767566204071, 0.4172539710998535, 0.41972506046295166, 0.4021795392036438, 0.39597374200820923, 0.39335379004478455, 0.3834396302700043, 0.3802908957004547, 0.3744257688522339, 0.3729285001754761, 0.36962226033210754, 0.3582676947116852, 0.35081911087036133, 0.3466956615447998, 0.34128502011299133, 0.34056517481803894, 0.33207619190216064, 0.33144599199295044, 0.3178110122680664, 0.3160424530506134, 0.32282310724258423, 0.3120351731777191, 0.3098016083240509, 0.3085016906261444, 0.3029358983039856, 0.29466381669044495, 0.29074758291244507, 0.28568536043167114, 0.2850698232650757, 0.27730119228363037, 0.27748459577560425, 0.2704029977321625, 0.269114226102829, 0.27506422996520996, 0.26413020491600037, 0.25761085748672485, 0.25095975399017334, 0.2562486231327057, 0.2525854706764221, 0.24744562804698944, 0.23476888239383698, 0.23286603391170502, 0.23120419681072235, 0.23158212006092072, 0.22625096142292023, 0.2237890511751175, 0.21495027840137482, 0.2130514532327652], "accuracy": [0.2705058753490448, 0.47932901978492737, 0.5676925182342529, 0.625148594379425, 0.666358470916748, 0.7016246318817139, 0.7255316376686096, 0.7368907928466797, 0.7552502751350403, 0.7717606425285339, 0.7777044177055359, 0.7796856164932251, 0.7907806038856506, 0.7951393723487854, 0.7994980812072754, 0.8049134612083435, 0.8078193068504333, 0.8137630224227905, 0.819442629814148, 0.8276317715644836, 0.8256505131721497, 0.8302733898162842, 0.8339717388153076, 0.8372738361358643, 0.842028796672821, 0.8426892161369324, 0.8441421389579773, 0.8520671129226685, 0.852859616279602, 0.8500858545303345, 0.8549728989601135, 0.8556333184242249, 0.8627657890319824, 0.8599920868873596, 0.8632941246032715, 0.8669924736022949, 0.8665962219238281, 0.8683133125305176, 0.8730682730674744, 0.874389111995697, 0.8758420348167419, 0.8791441321372986, 0.878879964351654, 0.8802007436752319, 0.8816536664962769, 0.8854840993881226, 0.8882578015327454, 0.8868049383163452, 0.889050304889679, 0.8869370222091675, 0.8874653577804565, 0.8918240666389465, 0.8944657444953918, 0.8971073627471924, 0.8957865834236145, 0.8957865834236145, 0.9027869701385498, 0.8990886211395264, 0.9008057117462158, 0.9037115573883057, 0.9009377956390381, 0.9034473896026611, 0.9056927561759949, 0.9093911051750183, 0.909259021282196, 0.9103156924247742, 0.9126931428909302, 0.9157310724258423, 0.9182406663894653, 0.9194294214248657, 0.9194294214248657, 0.9161273241043091, 0.9178444147109985, 0.9207502603530884, 0.9241843819618225], "val_loss": [2.0394070148468018, 1.511171579360962, 1.0363447666168213, 0.8214158415794373, 0.7324056029319763, 0.6725279092788696, 0.6218215227127075, 0.589273989200592, 0.5615319609642029, 0.543095588684082, 0.5265567302703857, 0.5126417279243469, 0.49760672450065613, 0.48762303590774536, 0.4795950651168823, 0.47008708119392395, 0.46500155329704285, 0.4544256627559662, 0.44287529587745667, 0.436960369348526, 0.4307023882865906, 0.42645129561424255, 0.4239944517612457, 0.41381022334098816, 0.40625253319740295, 0.41164714097976685, 0.4037126898765564, 0.399533212184906, 0.39624539017677307, 0.39091238379478455, 0.38659611344337463, 0.383566290140152, 0.38139742612838745, 0.3822222352027893, 0.37835824489593506, 0.37157532572746277, 0.3693455755710602, 0.37211790680885315, 0.36408931016921997, 0.3655399978160858, 0.36091381311416626, 0.3622059226036072, 0.35691341757774353, 0.3565923273563385, 0.3560246229171753, 0.3536636531352997, 0.35395458340644836, 0.35150471329689026, 0.3497167229652405, 0.35047468543052673, 0.34483814239501953, 0.3493518531322479, 0.3476230800151825, 0.3437758684158325, 0.3485088348388672, 0.3478383421897888, 0.34640389680862427, 0.342548668384552, 0.34332895278930664, 0.34360018372535706, 0.3463849723339081, 0.340987890958786, 0.34276148676872253, 0.33804529905319214, 0.338592529296875, 0.3393281102180481, 0.33884432911872864, 0.33980417251586914, 0.3392191529273987, 0.3335704207420349, 0.3371855616569519, 0.33792927861213684, 0.3349054455757141, 0.3413098454475403, 0.3329477310180664], "val_accuracy": [0.5299999713897705, 0.6623333096504211, 0.687666654586792, 0.715666651725769, 0.7443333268165588, 0.7580000162124634, 0.7680000066757202, 0.7806666493415833, 0.7900000214576721, 0.7960000038146973, 0.8026666641235352, 0.8149999976158142, 0.8159999847412109, 0.8259999752044678, 0.8209999799728394, 0.8326666951179504, 0.8336666822433472, 0.8353333473205566, 0.8420000076293945, 0.8426666855812073, 0.8460000157356262, 0.8493333458900452, 0.8460000157356262, 0.8546666502952576, 0.8560000061988831, 0.8493333458900452, 0.8556666374206543, 0.8556666374206543, 0.8616666793823242, 0.8610000014305115, 0.862666666507721, 0.8686666488647461, 0.8629999756813049, 0.8640000224113464, 0.8646666407585144, 0.8650000095367432, 0.8693333268165588, 0.8713333606719971, 0.8669999837875366, 0.8700000047683716, 0.8726666569709778, 0.8756666779518127, 0.8743333220481873, 0.8700000047683716, 0.871999979019165, 0.8740000128746033, 0.8773333430290222, 0.8756666779518127, 0.8736666440963745, 0.8740000128746033, 0.8786666393280029, 0.8743333220481873, 0.8786666393280029, 0.8773333430290222, 0.8776666522026062, 0.8790000081062317, 0.878000020980835, 0.878000020980835, 0.8796666860580444, 0.8773333430290222, 0.8806666731834412, 0.8836666941642761, 0.8803333044052124, 0.8793333172798157, 0.8816666603088379, 0.8843333125114441, 0.8823333382606506, 0.8790000081062317, 0.8796666860580444, 0.8870000243186951, 0.8833333253860474, 0.8836666941642761, 0.8846666812896729, 0.8823333382606506, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 8, 3, 0, 3], [0, 1, 0, 2], [39, 95], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 2, 2, 0, 3, 2], [0, 2, 0, 3, 3], [16, 16], [1, 1], [2], [0], [21], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 8, 6, 8, 1, 1, 2, 7, 8, 6, 0, 7, 0, 2, 6, 9, 7, 5, 0, 2, 1, 4, 1, 3, 9, 5, 8, 3, 6, 5, 2, 0, 3, 6, 3, 9, 3, 4, 8, 5, 8, 3, 1, 7, 2, 1, 9, 8, 5, 4, 1], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 1, 7, 5, 7, 2, 0, 3, 5, 3, 0, 1, 6, 0, 3, 0, 4, 3, 2, 2, 2, 2, 1, 5, 2, 1, 5, 4], [16, 99, 96, 99, 61, 1, 22, 48, 60, 45, 93, 5, 96, 74]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 3, 2, 1, 10, 5, 5, 2, 1, 0, 1, 1, 97, 60, 37, 14], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)), tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), alpha), grad))))), tf.math.add(tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.divide_no_nan(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.math.multiply(sigma, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), grad), tf.math.square(sigma)))))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), alpha)))), tf.math.sqrt(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.math.negative(tf.math.multiply(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(grad, sigma))), tf.math.pow(tf.math.sqrt(tf.math.square(beta)), beta))))), beta)), tf.math.sqrt(tf.math.multiply(beta, tf.math.subtract(tf.math.add(tf.math.add(tf.math.subtract(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), grad), beta), tf.math.square(tf.math.pow(tf.math.subtract(alpha, grad), grad))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 5, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 0, 1, 1, 1], [0, 2, 7, 5], [2, 1, 5], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 3, 1, 4, 1, 4, 2, 8, 2, 0, 6, 5, 8], [4, 0, 0, 3, 2, 0, 1, 1, 2, 0, 2, 7, 5], [16, 99, 96, 99, 61, 82]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 1, 0, 1, 1, 7, 4, 3, 0, 29, 16, 13, 4], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.square(beta), alpha), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.pow(grad, tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)), beta))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), beta), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), beta), tf.math.divide_no_nan(tf.math.square(tf.math.sqrt(grad)), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 3, 4, 3, 0], [0, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 4, 3, 5], [0, 2, 0, 3, 4], [34, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [2, 3, 3, 6, 8, 1, 9, 1, 6, 2, 2], [3, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 30, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 11, 6, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3036534786224365, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 8], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 5], [0, 2, 0, 3], [14, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 5, 2, 2, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.08942857384681702, "mapping_values": [1, 8, 5, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))), alpha)), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.309511423110962, 2.3093135356903076, 2.308832883834839, 2.30845308303833, 2.3064281940460205, 2.304896116256714], "accuracy": [0.09087307006120682, 0.08994849026203156, 0.09377889335155487, 0.09140139818191528, 0.08757099509239197, 0.08968432247638702], "val_loss": [2.3086462020874023, 2.308274507522583, 2.3075857162475586, 2.3067281246185303, 2.305459976196289, 2.3039443492889404], "val_accuracy": [0.08799999952316284, 0.08566666394472122, 0.08233333379030228, 0.07333333045244217, 0.06700000166893005, 0.07900000363588333]}}]