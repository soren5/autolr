[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8705714344978333, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2188053131103516, 1.8563569784164429, 1.3881713151931763, 1.0966441631317139, 0.9502116441726685, 0.8374560475349426, 0.7742003798484802, 0.7180747985839844, 0.6911706924438477, 0.654584527015686, 0.6264718770980835, 0.6067598462104797, 0.591038167476654, 0.5751208662986755, 0.5569748282432556, 0.5514121651649475, 0.5242495536804199, 0.5183438658714294, 0.5058730244636536, 0.49712663888931274, 0.48902830481529236, 0.4753756821155548, 0.46815967559814453, 0.46289923787117004, 0.45445993542671204, 0.44579610228538513, 0.42816171050071716, 0.42601093649864197, 0.4192400276660919, 0.41552937030792236, 0.4017525613307953, 0.3866022825241089, 0.3878806531429291, 0.3812991678714752, 0.3820687532424927, 0.3714534342288971, 0.3625193238258362, 0.3654777407646179, 0.3653351366519928, 0.35885629057884216, 0.34986796975135803, 0.337961345911026, 0.33945995569229126, 0.3298199772834778, 0.3331308662891388, 0.32659003138542175, 0.31160926818847656, 0.3113440275192261, 0.3134302496910095, 0.30572253465652466, 0.29527199268341064, 0.28957176208496094, 0.2872050404548645, 0.2891096770763397, 0.28151851892471313, 0.28453436493873596, 0.27256590127944946, 0.2685130834579468, 0.2664499878883362, 0.25957733392715454, 0.25955426692962646, 0.25377899408340454, 0.25672581791877747, 0.25034964084625244, 0.2396383434534073, 0.24681265652179718, 0.23625805974006653, 0.2302728146314621, 0.2268710881471634, 0.2189767211675644, 0.22340820729732513, 0.21750447154045105], "accuracy": [0.27684587240219116, 0.5000660419464111, 0.5686171054840088, 0.6207898855209351, 0.667811393737793, 0.7054550051689148, 0.7257958054542542, 0.7383436560630798, 0.7427024245262146, 0.7606657147407532, 0.7753269076347351, 0.7792893648147583, 0.7799497842788696, 0.793422281742096, 0.8004226684570312, 0.8025360107421875, 0.8133667707443237, 0.8127063512802124, 0.8187822103500366, 0.8216879963874817, 0.8240655064582825, 0.8281601071357727, 0.835160493850708, 0.8356888294219971, 0.8397833704948425, 0.8401796221733093, 0.8469158411026001, 0.8514066934585571, 0.8508783578872681, 0.8537842035293579, 0.8562937378883362, 0.8593316674232483, 0.859199583530426, 0.8639545440673828, 0.8648791313171387, 0.8705587387084961, 0.8704266548156738, 0.8688416481018066, 0.870030403137207, 0.8730682730674744, 0.874389111995697, 0.8766345381736755, 0.8790120482444763, 0.8835028409957886, 0.8794082403182983, 0.8784837126731873, 0.8919561505317688, 0.8886540532112122, 0.8874653577804565, 0.8914278149604797, 0.8953903317451477, 0.8942015767097473, 0.8977677822113037, 0.8938053250312805, 0.8996169567108154, 0.8977677822113037, 0.8988244533538818, 0.9012019634246826, 0.9039757251739502, 0.9021265506744385, 0.9072777628898621, 0.9095231890678406, 0.9104477763175964, 0.9116365313529968, 0.9137498140335083, 0.9084665179252625, 0.9174481630325317, 0.9162594079971313, 0.9189010858535767, 0.9187690019607544, 0.9202219247817993, 0.9255052208900452], "val_loss": [2.0352470874786377, 1.5050538778305054, 1.0406413078308105, 0.8334452509880066, 0.7511868476867676, 0.6927890777587891, 0.6454364657402039, 0.6026672124862671, 0.581701397895813, 0.5514222979545593, 0.5302477478981018, 0.5127965211868286, 0.5025838017463684, 0.4953322410583496, 0.47350525856018066, 0.46228548884391785, 0.4564328193664551, 0.4451271891593933, 0.437968909740448, 0.43304532766342163, 0.4213125705718994, 0.41999346017837524, 0.412141352891922, 0.41001421213150024, 0.40251582860946655, 0.39766088128089905, 0.38725191354751587, 0.38846659660339355, 0.387611985206604, 0.37893661856651306, 0.37492239475250244, 0.37239253520965576, 0.366219162940979, 0.3642282783985138, 0.36974331736564636, 0.36089766025543213, 0.36141377687454224, 0.3557860255241394, 0.35646772384643555, 0.35319286584854126, 0.35176968574523926, 0.3542018532752991, 0.34464967250823975, 0.34368896484375, 0.3406160771846771, 0.34082043170928955, 0.3392203748226166, 0.33554986119270325, 0.33275553584098816, 0.3333519399166107, 0.3346635401248932, 0.3283814787864685, 0.33094173669815063, 0.32762810587882996, 0.3288787305355072, 0.33247265219688416, 0.3218000829219818, 0.32795020937919617, 0.3269377648830414, 0.3273579776287079, 0.32298246026039124, 0.31851091980934143, 0.3244917094707489, 0.31874221563339233, 0.3295203447341919, 0.32012468576431274, 0.31758493185043335, 0.3225545585155487, 0.3229573965072632, 0.31668058037757874, 0.31831762194633484, 0.3174784779548645], "val_accuracy": [0.5416666865348816, 0.6573333144187927, 0.6813333630561829, 0.7110000252723694, 0.7316666841506958, 0.7493333220481873, 0.7580000162124634, 0.7733333110809326, 0.7793333530426025, 0.7943333387374878, 0.8063333630561829, 0.8103333115577698, 0.8103333115577698, 0.8149999976158142, 0.8259999752044678, 0.8289999961853027, 0.8306666612625122, 0.8426666855812073, 0.8423333168029785, 0.8396666646003723, 0.8463333249092102, 0.8463333249092102, 0.846666693687439, 0.8503333330154419, 0.8536666631698608, 0.856333315372467, 0.8613333106040955, 0.859000027179718, 0.8586666584014893, 0.8603333234786987, 0.8619999885559082, 0.8629999756813049, 0.8683333396911621, 0.8669999837875366, 0.8656666874885559, 0.8700000047683716, 0.871666669845581, 0.8693333268165588, 0.8706666827201843, 0.8740000128746033, 0.8676666617393494, 0.8686666488647461, 0.8759999871253967, 0.8790000081062317, 0.8756666779518127, 0.8790000081062317, 0.878333330154419, 0.8796666860580444, 0.8776666522026062, 0.8769999742507935, 0.8813333511352539, 0.8813333511352539, 0.8826666474342346, 0.8830000162124634, 0.8806666731834412, 0.8816666603088379, 0.8833333253860474, 0.8809999823570251, 0.8806666731834412, 0.8859999775886536, 0.8853333592414856, 0.887333333492279, 0.8849999904632568, 0.8863333463668823, 0.8843333125114441, 0.8830000162124634, 0.890666663646698, 0.8863333463668823, 0.8833333253860474, 0.8863333463668823, 0.8863333463668823, 0.8870000243186951]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 3, 6, 8, 4, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 4, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.12857143580913544, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [7.772480682097377e+17, 9.000461997241795e+17, 9.214454447797699e+17, 8.566472388252795e+17, 8.663247278561034e+17, 9.046433265593876e+17], "accuracy": [0.11874257028102875, 0.12376172095537186, 0.12442214041948318, 0.12679962813854218, 0.12362963706254959, 0.12613920867443085], "val_loss": [7.77405985567277e+17, 7.77405985567277e+17, 7.77405985567277e+17, 7.77405985567277e+17, 7.77405985567277e+17, 7.77405985567277e+17], "val_accuracy": [0.12333333492279053, 0.12333333492279053, 0.12333333492279053, 0.12333333492279053, 0.12333333492279053, 0.12333333492279053]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 5, 2, 1], [0, 2, 3, 3, 0, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.square(grad)), tf.math.add(tf.math.subtract(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}, "mapping_values": [1, 9, 5, 4, 2, 15, 9, 6, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 17}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 2, 6, 6, 4, 1, 2, 7, 0, 5, 9, 8], [0, 1, 0, 2, 1, 3, 1, 2, 1], [39, 39, 70], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 3, 0, 3, 5], [0, 2, 0, 3], [68, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 6, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 2, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 14, 9, 3, 1, 1, 0, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.square(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(alpha)))), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(alpha, tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3, 0, 3, 6, 4, 9], [0, 1, 2, 2, 3, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 87], [1, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 2, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [7, 99, 96, 10, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(grad, grad), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.304178476333618, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}, "mapping_values": [1, 16, 10, 6, 2, 10, 6, 4, 1, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 16}]