[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8640000224113464, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2234628200531006, 1.8656810522079468, 1.3997867107391357, 1.099830985069275, 0.9418210983276367, 0.83287513256073, 0.7724298238754272, 0.7273331880569458, 0.6932856440544128, 0.6539596319198608, 0.6290619969367981, 0.6121566891670227, 0.5926020741462708, 0.581866443157196, 0.5528156757354736, 0.5408042669296265, 0.5278533101081848, 0.5145197510719299, 0.5011246800422668, 0.4947470724582672, 0.4768851399421692, 0.47066450119018555, 0.4688379466533661, 0.45749664306640625, 0.45234984159469604, 0.4438498616218567, 0.44335025548934937, 0.4294334352016449, 0.4226205050945282, 0.4073881208896637, 0.4058367609977722, 0.3982471823692322, 0.3903317153453827, 0.3876331150531769, 0.38210490345954895, 0.37417057156562805, 0.362688809633255, 0.35979557037353516, 0.358153373003006, 0.3490104079246521, 0.3499227464199066, 0.338653028011322, 0.3394491970539093, 0.3336498737335205, 0.32730379700660706, 0.3220714330673218, 0.3163396716117859, 0.3164125084877014], "accuracy": [0.272090882062912, 0.48751816153526306, 0.5686171054840088, 0.6169594526290894, 0.6672830581665039, 0.7033417224884033, 0.7264562249183655, 0.7368907928466797, 0.7441553473472595, 0.763439416885376, 0.7728173136711121, 0.774798572063446, 0.7862898111343384, 0.7884030938148499, 0.7989697456359863, 0.8012151718139648, 0.8083476424217224, 0.8175934553146362, 0.8226125836372375, 0.8247259259223938, 0.8253863453865051, 0.8319904804229736, 0.8294808864593506, 0.8389908671379089, 0.8422929644584656, 0.8441421389579773, 0.8400475382804871, 0.8466516733169556, 0.8506141901016235, 0.8533879518508911, 0.8562937378883362, 0.8557654023170471, 0.8613129258155823, 0.8634262084960938, 0.8632941246032715, 0.8672566413879395, 0.8704266548156738, 0.8713511824607849, 0.8754457831382751, 0.8750495314598083, 0.8733324408531189, 0.8775591254234314, 0.8786157965660095, 0.8828424215316772, 0.8820499181747437, 0.884691596031189, 0.889578640460968, 0.8916919827461243], "val_loss": [2.040048122406006, 1.5241245031356812, 1.053973913192749, 0.8372864723205566, 0.7448474168777466, 0.6911678910255432, 0.6464216113090515, 0.6104227900505066, 0.5915971994400024, 0.5638788342475891, 0.5498252511024475, 0.5314817428588867, 0.5163161158561707, 0.5075036883354187, 0.49813321232795715, 0.48873552680015564, 0.47981706261634827, 0.4668358564376831, 0.4630070924758911, 0.45930254459381104, 0.45193028450012207, 0.4430426061153412, 0.4468248188495636, 0.4391399621963501, 0.43379947543144226, 0.4218558669090271, 0.4171063303947449, 0.4232043921947479, 0.4064231812953949, 0.40810421109199524, 0.4020310044288635, 0.39893582463264465, 0.39839017391204834, 0.39111363887786865, 0.3904307782649994, 0.38732844591140747, 0.3854650855064392, 0.38839468359947205, 0.3792778253555298, 0.37863612174987793, 0.3785994350910187, 0.3776669502258301, 0.3714603781700134, 0.3701293170452118, 0.3739621639251709, 0.3666453957557678, 0.3680133521556854, 0.36733928322792053], "val_accuracy": [0.515666663646698, 0.6433333158493042, 0.6830000281333923, 0.7166666388511658, 0.7396666407585144, 0.7493333220481873, 0.7580000162124634, 0.7723333239555359, 0.7746666669845581, 0.7873333096504211, 0.7940000295639038, 0.8009999990463257, 0.8136666417121887, 0.8113333582878113, 0.8176666498184204, 0.8240000009536743, 0.8203333616256714, 0.8383333086967468, 0.8399999737739563, 0.8343333601951599, 0.8393333554267883, 0.8450000286102295, 0.8403333425521851, 0.8413333296775818, 0.843999981880188, 0.8486666679382324, 0.8546666502952576, 0.8510000109672546, 0.8583333492279053, 0.856333315372467, 0.8579999804496765, 0.8606666922569275, 0.8586666584014893, 0.8600000143051147, 0.8613333106040955, 0.8600000143051147, 0.8659999966621399, 0.8610000014305115, 0.8666666746139526, 0.8663333058357239, 0.8653333187103271, 0.8629999756813049, 0.8706666827201843, 0.8690000176429749, 0.8636666536331177, 0.8696666955947876, 0.8690000176429749, 0.8706666827201843]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 4], [0, 2, 0, 3], [16, 52], [0, 0, 0, 0, 1, 1, 1], [0, 2, 0, 3], [0, 5, 0], [99, 36], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 0, 8, 1, 4, 1, 4, 2, 4], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [8, 27, 18, 90, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 1, 0, 1, 1, 7, 4, 3, 2, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.negative(tf.math.multiply(grad, grad)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 1], [1, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 3, 3, 0, 3, 0], [0, 2, 0, 3], [12, 16], [0, 1], [0], [0], [87], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 2, 8], [1, 0, 0, 3, 0, 0, 2, 1, 2, 3], [16, 44, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 1, 0, 1, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, grad: tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(beta, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [8, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [9, 9, 3, 0, 3, 5], [0, 3, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [9, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 0, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303516387939453, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 2], [38, 39], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [96], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 0]], "fitness": -0.09114285558462143, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), alpha), beta)", "other_info": {"loss": [2.311023712158203, 2.310075044631958, 2.3105406761169434, 2.310185670852661, 2.3104233741760254, 2.3102989196777344], "accuracy": [0.09047681838274002, 0.08492933213710785, 0.09232597798109055, 0.09536388516426086, 0.09047681838274002, 0.08836349099874496], "val_loss": [2.3090267181396484, 2.3090267181396484, 2.3090267181396484, 2.3090267181396484, 2.3090267181396484, 2.3090267181396484], "val_accuracy": [0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548]}, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 1, 21, 12, 9, 6], "tree_depth": 20}]