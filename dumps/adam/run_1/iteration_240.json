[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87971431016922, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2264158725738525, 1.883138656616211, 1.4228179454803467, 1.1245834827423096, 0.9636178016662598, 0.8570544123649597, 0.7892341613769531, 0.7428163290023804, 0.7103912234306335, 0.6776049137115479, 0.6464032530784607, 0.6186978220939636, 0.6058709025382996, 0.583882212638855, 0.5697414875030518, 0.5519570708274841, 0.5444625020027161, 0.5314995646476746, 0.5091581344604492, 0.5085999369621277, 0.4993470013141632, 0.47943422198295593, 0.4748769998550415, 0.4657655656337738, 0.4618813097476959, 0.45459797978401184, 0.450758159160614, 0.43135109543800354, 0.4276069402694702, 0.41853609681129456, 0.41742268204689026, 0.40973231196403503, 0.4136907458305359, 0.40421152114868164, 0.39682677388191223, 0.38752782344818115, 0.3869898021221161, 0.3718068301677704, 0.36564821004867554, 0.37274402379989624, 0.3558189570903778, 0.35788071155548096, 0.3505411446094513, 0.3386285901069641, 0.3320959806442261, 0.33276042342185974, 0.3289143145084381, 0.321180522441864, 0.3082222044467926, 0.3142070770263672, 0.31262820959091187, 0.30145516991615295], "accuracy": [0.275260865688324, 0.4839519262313843, 0.5514463186264038, 0.6107515692710876, 0.6618676781654358, 0.6889446377754211, 0.7149649858474731, 0.7290979027748108, 0.7412495017051697, 0.7477215528488159, 0.7637035846710205, 0.7744023203849792, 0.7738739848136902, 0.7891955971717834, 0.7895918488502502, 0.7991018295288086, 0.8012151718139648, 0.8090080618858337, 0.8178576231002808, 0.821820080280304, 0.8157442808151245, 0.8284242749214172, 0.829216718673706, 0.8278959393501282, 0.8342359066009521, 0.8378021121025085, 0.8330471515655518, 0.8466516733169556, 0.8494254350662231, 0.8492933511734009, 0.8477083444595337, 0.8498216867446899, 0.8525954484939575, 0.857218325138092, 0.8574824929237366, 0.8607845902442932, 0.8610487580299377, 0.8679170608520508, 0.8714832663536072, 0.8638224601745605, 0.873860776424408, 0.8709549307823181, 0.8710870146751404, 0.8790120482444763, 0.8811253309249878, 0.8771628737449646, 0.8787478804588318, 0.8828424215316772, 0.8891823887825012, 0.8885219693183899, 0.889050304889679, 0.8914278149604797], "val_loss": [2.042558193206787, 1.5261443853378296, 1.0402663946151733, 0.8248271346092224, 0.736682116985321, 0.6856681108474731, 0.630856454372406, 0.598153829574585, 0.5744801759719849, 0.5526587963104248, 0.5285207629203796, 0.5181156992912292, 0.5017104148864746, 0.49153435230255127, 0.48076191544532776, 0.4649498164653778, 0.45893189311027527, 0.44923800230026245, 0.4420507550239563, 0.43643489480018616, 0.4289519190788269, 0.4197063744068146, 0.41264986991882324, 0.4259133040904999, 0.4058433771133423, 0.4043295085430145, 0.3929573595523834, 0.39203089475631714, 0.3935169577598572, 0.3845237195491791, 0.38564860820770264, 0.38002195954322815, 0.37472012639045715, 0.37609320878982544, 0.37455037236213684, 0.36657071113586426, 0.3637740910053253, 0.36373937129974365, 0.3667456805706024, 0.36090803146362305, 0.3588749170303345, 0.35685160756111145, 0.3568505048751831, 0.35314202308654785, 0.35260334610939026, 0.35083016753196716, 0.3491746783256531, 0.3468281924724579, 0.3464011251926422, 0.34657803177833557, 0.34585586190223694, 0.3444811999797821], "val_accuracy": [0.5366666913032532, 0.6583333611488342, 0.6933333277702332, 0.7196666598320007, 0.7456666827201843, 0.7536666393280029, 0.7736666798591614, 0.7760000228881836, 0.7900000214576721, 0.7976666688919067, 0.8050000071525574, 0.8133333325386047, 0.8163333535194397, 0.8220000267028809, 0.8289999961853027, 0.831333339214325, 0.8303333520889282, 0.840666651725769, 0.8376666903495789, 0.8410000205039978, 0.8389999866485596, 0.8460000157356262, 0.8479999899864197, 0.8456666469573975, 0.8476666808128357, 0.8479999899864197, 0.8529999852180481, 0.8533333539962769, 0.8529999852180481, 0.859000027179718, 0.8566666841506958, 0.8583333492279053, 0.8616666793823242, 0.8586666584014893, 0.862666666507721, 0.8663333058357239, 0.8640000224113464, 0.8616666793823242, 0.8643333315849304, 0.8666666746139526, 0.8636666536331177, 0.8666666746139526, 0.8676666617393494, 0.8666666746139526, 0.8690000176429749, 0.871666669845581, 0.8733333349227905, 0.8683333396911621, 0.871666669845581, 0.871666669845581, 0.8730000257492065, 0.8700000047683716]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8494285941123962, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223392963409424, 1.8683067560195923, 1.3964121341705322, 1.1003111600875854, 0.9369293451309204, 0.8522651195526123, 0.7729254364967346, 0.7235629558563232, 0.6945574283599854, 0.6584217548370361, 0.6375715136528015, 0.6174208521842957, 0.6037735342979431, 0.5770054459571838, 0.5641986131668091, 0.5576921105384827, 0.5336809754371643, 0.5245707631111145, 0.5197625160217285, 0.5060709714889526, 0.49647197127342224, 0.48651373386383057, 0.4729229807853699, 0.4707198143005371, 0.4542725086212158, 0.45061400532722473, 0.4420619010925293, 0.4307076632976532, 0.42121174931526184, 0.41423046588897705, 0.417787104845047, 0.4086298644542694, 0.39787009358406067, 0.39493510127067566, 0.3839397430419922, 0.3740139901638031, 0.37758123874664307, 0.37029480934143066, 0.3730189800262451, 0.3680547773838043, 0.35413312911987305, 0.3527909517288208, 0.35021835565567017, 0.33965736627578735, 0.3276432752609253, 0.32371771335601807, 0.33026012778282166, 0.31784772872924805], "accuracy": [0.2635054886341095, 0.49029189348220825, 0.5626733303070068, 0.6193369626998901, 0.6667547225952148, 0.6906617283821106, 0.7236824631690979, 0.7383436560630798, 0.7456082701683044, 0.7606657147407532, 0.7688548564910889, 0.7746664881706238, 0.7802139520645142, 0.7926297783851624, 0.7964601516723633, 0.7948752045631409, 0.8064984679222107, 0.8099326491355896, 0.8145555257797241, 0.8175934553146362, 0.8175934553146362, 0.8276317715644836, 0.826310932636261, 0.8294808864593506, 0.8327829837799072, 0.8416325449943542, 0.8437458872795105, 0.8445383906364441, 0.8482366800308228, 0.8496896028518677, 0.8500858545303345, 0.8541803956031799, 0.8562937378883362, 0.8560295701026917, 0.8625016212463379, 0.8658037185668945, 0.8665962219238281, 0.8692378997802734, 0.8677849769592285, 0.8692378997802734, 0.876370370388031, 0.8705587387084961, 0.8745211958885193, 0.8792761564254761, 0.8791441321372986, 0.8837670087814331, 0.8798044919967651, 0.8858803510665894], "val_loss": [2.033987045288086, 1.495749831199646, 1.0231252908706665, 0.8196243643760681, 0.733894944190979, 0.682420551776886, 0.6368638277053833, 0.5998133420944214, 0.5746904015541077, 0.554603636264801, 0.5385748744010925, 0.5266255736351013, 0.5111783146858215, 0.49596697092056274, 0.4872540831565857, 0.4783523678779602, 0.46733903884887695, 0.4669017195701599, 0.4524088203907013, 0.44529399275779724, 0.4464132487773895, 0.4319297671318054, 0.42913833260536194, 0.4244079291820526, 0.41955432295799255, 0.41133421659469604, 0.4083738625049591, 0.4017254114151001, 0.40180647373199463, 0.3956826627254486, 0.3976067304611206, 0.39132219552993774, 0.3941686153411865, 0.39035722613334656, 0.381999671459198, 0.37756261229515076, 0.38293036818504333, 0.3731745183467865, 0.37328222393989563, 0.37065425515174866, 0.3707784414291382, 0.36623266339302063, 0.3628424108028412, 0.35947680473327637, 0.3612925708293915, 0.36304354667663574, 0.35624369978904724, 0.35392463207244873], "val_accuracy": [0.5713333487510681, 0.6683333516120911, 0.687666654586792, 0.715666651725769, 0.731333315372467, 0.7509999871253967, 0.7720000147819519, 0.7749999761581421, 0.7870000004768372, 0.7953333258628845, 0.800000011920929, 0.8080000281333923, 0.815666675567627, 0.8190000057220459, 0.8256666660308838, 0.8309999704360962, 0.8316666483879089, 0.8303333520889282, 0.8393333554267883, 0.843999981880188, 0.8399999737739563, 0.8476666808128357, 0.8463333249092102, 0.8483333587646484, 0.8486666679382324, 0.8560000061988831, 0.8566666841506958, 0.8586666584014893, 0.8579999804496765, 0.8606666922569275, 0.859666645526886, 0.8643333315849304, 0.856333315372467, 0.8613333106040955, 0.8693333268165588, 0.8676666617393494, 0.8636666536331177, 0.8709999918937683, 0.871999979019165, 0.8696666955947876, 0.8730000257492065, 0.871666669845581, 0.8763333559036255, 0.871999979019165, 0.8736666440963745, 0.8740000128746033, 0.8759999871253967, 0.874666690826416]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 5], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [82, 16], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 8, 1, 5, 7, 1, 7, 8, 3, 5, 4, 6], [0, 4, 4, 3, 1, 1, 6, 1], [83], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8], [0, 0, 3, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 2, 2, 1, 1, 1, 20, 12, 8, 1, 21, 11, 10, 5], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.square(grad), sigma)), tf.math.pow(tf.math.divide_no_nan(alpha, alpha), grad)), alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 2, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 9, 0, 5], [0, 2, 0, 3], [16, 6], [1, 1], [0], [0], [22], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 4, 3, 6, 8, 1, 4, 1, 4, 0, 8, 1], [0, 0, 0, 4, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 6, 4, 2, 2, 1, 0, 1, 1, 22, 12, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.math.pow(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.sqrt(tf.math.subtract(alpha, beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [62, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [2, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 1, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 0, 61, 1]], "fitness": -0.09114285558462143, "mapping_values": [1, 9, 5, 4, 2, 9, 5, 4, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(beta), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha)), sigma)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.3097476959228516, 2.3083317279815674, 2.309443473815918, 2.3110897541046143, 2.3096446990966797, 2.30938720703125], "accuracy": [0.0874389111995697, 0.09417514503002167, 0.08981640636920929, 0.08849557489156723, 0.09470347315073013, 0.08796724677085876], "val_loss": [2.309047222137451, 2.309047222137451, 2.309047222137451, 2.309047222137451, 2.309047222137451, 2.309047222137451], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [9, 2, 3, 0, 3], [0, 1, 0, 2], [71, 47], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 6, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 5, 6, 4, 1, 4, 1, 4, 2, 8], [0, 0, 0, 2, 0, 2, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.08971428871154785, "mapping_values": [1, 1, 1, 0, 1, 10, 6, 4, 2, 2, 1, 1, 0, 16, 8, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), beta)), tf.constant(1.0, shape=shape, dtype=tf.float32)), beta)), tf.math.subtract(sigma, alpha))", "other_info": {"loss": [2.309767961502075, 2.3087379932403564, 2.309901237487793, 2.310346841812134, 2.310711145401001, 2.309668779373169], "accuracy": [0.09285431355237961, 0.0956280529499054, 0.0948355570435524, 0.08875974267721176, 0.09179764986038208, 0.08902391046285629], "val_loss": [2.3089094161987305, 2.3089094161987305, 2.3089094161987305, 2.3089094161987305, 2.3089094161987305, 2.3089094161987305], "val_accuracy": [0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707, 0.08766666799783707]}}]