[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8740000128746033, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.220431327819824, 1.8569740056991577, 1.3755658864974976, 1.0874396562576294, 0.9262239336967468, 0.8379094004631042, 0.7675543427467346, 0.7217980623245239, 0.6871329545974731, 0.654635488986969, 0.6388610601425171, 0.6150592565536499, 0.5940167903900146, 0.5808444023132324, 0.56529301404953, 0.5501704216003418, 0.5388270020484924, 0.5208674073219299, 0.5151153206825256, 0.49882566928863525, 0.488606721162796, 0.48571860790252686, 0.4818565249443054, 0.4635099470615387, 0.45399028062820435, 0.447063684463501, 0.42773061990737915, 0.4359186291694641, 0.4229935109615326, 0.4215356111526489, 0.4066852331161499, 0.40534907579421997, 0.4016064405441284, 0.3922232687473297, 0.39207661151885986, 0.38746607303619385, 0.37294304370880127, 0.3714742660522461, 0.3697217106819153, 0.3609004616737366, 0.35770687460899353, 0.3554362654685974, 0.34485262632369995], "accuracy": [0.2779025137424469, 0.49689605832099915, 0.5691454410552979, 0.6178840398788452, 0.667811393737793, 0.6940959095954895, 0.7205125093460083, 0.7360982894897461, 0.7448157668113708, 0.76106196641922, 0.7633073329925537, 0.7720248103141785, 0.7791573405265808, 0.7895918488502502, 0.7980451583862305, 0.7991018295288086, 0.8054417967796326, 0.8095363974571228, 0.8148196935653687, 0.8203672170639038, 0.8252542614936829, 0.8261788487434387, 0.82683926820755, 0.8372738361358643, 0.8359529972076416, 0.841500461101532, 0.8479725122451782, 0.8457271456718445, 0.8479725122451782, 0.8469158411026001, 0.8595958352088928, 0.8555012345314026, 0.8533879518508911, 0.8585391640663147, 0.8614450097084045, 0.8661999702453613, 0.8669924736022949, 0.8651432991027832, 0.8691058158874512, 0.8722757697105408, 0.8722757697105408, 0.8710870146751404, 0.8775591254234314], "val_loss": [2.0389509201049805, 1.5124274492263794, 1.0496517419815063, 0.8497922420501709, 0.7626957893371582, 0.7097421884536743, 0.6660829186439514, 0.6305967569351196, 0.6106986999511719, 0.58641517162323, 0.5680446028709412, 0.5499541759490967, 0.5397006273269653, 0.5237101316452026, 0.5184644460678101, 0.5011928677558899, 0.4974513649940491, 0.4835914671421051, 0.4776989221572876, 0.4746166169643402, 0.4587276875972748, 0.4570014774799347, 0.453452467918396, 0.4375725984573364, 0.4370024800300598, 0.4279727637767792, 0.42560073733329773, 0.42118921875953674, 0.4194360375404358, 0.4133787155151367, 0.4061407148838043, 0.4093184471130371, 0.40150943398475647, 0.3984459638595581, 0.39168456196784973, 0.3900165259838104, 0.39059528708457947, 0.38579386472702026, 0.3800792098045349, 0.38237810134887695, 0.3783215880393982, 0.37695303559303284, 0.3709409236907959], "val_accuracy": [0.5609999895095825, 0.6486666798591614, 0.6710000038146973, 0.6990000009536743, 0.7229999899864197, 0.737666666507721, 0.7513333559036255, 0.7649999856948853, 0.7733333110809326, 0.7883333563804626, 0.7873333096504211, 0.7940000295639038, 0.8046666383743286, 0.812666654586792, 0.8119999766349792, 0.8166666626930237, 0.815666675567627, 0.8273333311080933, 0.8276666402816772, 0.8326666951179504, 0.8336666822433472, 0.8343333601951599, 0.843666672706604, 0.8453333377838135, 0.8433333039283752, 0.847000002861023, 0.8450000286102295, 0.846666693687439, 0.8486666679382324, 0.8513333201408386, 0.8546666502952576, 0.8516666889190674, 0.8576666712760925, 0.8560000061988831, 0.8606666922569275, 0.8586666584014893, 0.859000027179718, 0.8673333525657654, 0.8603333234786987, 0.8613333106040955, 0.8619999885559082, 0.8629999756813049, 0.8656666874885559]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8588571548461914, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224398136138916, 1.8688828945159912, 1.4014331102371216, 1.0940272808074951, 0.946462869644165, 0.8461288213729858, 0.7746132016181946, 0.7221165299415588, 0.6841025352478027, 0.6558354496955872, 0.6388620734214783, 0.6077280044555664, 0.5889330506324768, 0.5798115134239197, 0.5669462084770203, 0.5538346767425537, 0.5383833050727844, 0.5237175822257996, 0.5033183693885803, 0.5016729235649109, 0.4903423488140106, 0.48290324211120605, 0.4687848687171936, 0.46502798795700073, 0.45570647716522217, 0.4544644355773926, 0.4458042085170746, 0.43119335174560547, 0.4286957085132599, 0.42486727237701416, 0.41544702649116516, 0.403043270111084, 0.40315866470336914, 0.39654695987701416, 0.38376742601394653, 0.38604581356048584, 0.3798297941684723, 0.3788718283176422, 0.37375006079673767, 0.3569122850894928, 0.35771945118904114, 0.34678369760513306, 0.3441704213619232, 0.3412151038646698, 0.34264814853668213, 0.3363981544971466, 0.32931748032569885, 0.32033395767211914, 0.3176000416278839, 0.31768903136253357, 0.316292405128479, 0.30579546093940735, 0.3010561764240265, 0.2983534634113312, 0.29473721981048584, 0.29499462246894836, 0.28070929646492004, 0.2825532555580139, 0.27539607882499695, 0.27542397379875183, 0.27172425389289856, 0.2698816955089569, 0.2596268355846405, 0.2607465088367462, 0.2558319866657257, 0.25744184851646423, 0.24862678349018097, 0.24735626578330994, 0.24819183349609375], "accuracy": [0.27024170756340027, 0.48949941992759705, 0.561880886554718, 0.6196011304855347, 0.6659622192382812, 0.6984546184539795, 0.7207766771316528, 0.7325320243835449, 0.748249888420105, 0.7585523724555969, 0.765949010848999, 0.7753269076347351, 0.778761088848114, 0.7884030938148499, 0.7964601516723633, 0.7969884872436523, 0.800290584564209, 0.8084797263145447, 0.8175934553146362, 0.8136309385299683, 0.821820080280304, 0.8244617581367493, 0.8300092220306396, 0.8322546482086182, 0.8342359066009521, 0.8370096683502197, 0.8379341959953308, 0.8441421389579773, 0.8433496356010437, 0.8467837572097778, 0.8539162874221802, 0.8498216867446899, 0.8532558679580688, 0.8520671129226685, 0.8602562546730042, 0.8573504090309143, 0.86118084192276, 0.8639545440673828, 0.8652753829956055, 0.8741249442100525, 0.8671245574951172, 0.8747853636741638, 0.8754457831382751, 0.8757099509239197, 0.8722757697105408, 0.8774270415306091, 0.8815215826034546, 0.8833707571029663, 0.8800686597824097, 0.8845595121383667, 0.8861445188522339, 0.8877294659614563, 0.8897107243537903, 0.8916919827461243, 0.893541157245636, 0.8920882344245911, 0.8943336606025696, 0.8977677822113037, 0.8982961177825928, 0.9021265506744385, 0.9015982151031494, 0.8969752788543701, 0.9058248400688171, 0.9049002528190613, 0.9070135951042175, 0.904768168926239, 0.909259021282196, 0.9091269373893738, 0.9074098467826843], "val_loss": [2.038952589035034, 1.5150654315948486, 1.037724494934082, 0.8303598761558533, 0.7444910407066345, 0.6865742206573486, 0.6358964443206787, 0.5972108244895935, 0.567366898059845, 0.550890326499939, 0.5294890403747559, 0.511595606803894, 0.4985753297805786, 0.4848746061325073, 0.4696814715862274, 0.460869699716568, 0.4576825797557831, 0.44483089447021484, 0.4363722801208496, 0.42974862456321716, 0.4239545166492462, 0.4146067798137665, 0.41640007495880127, 0.4060289263725281, 0.400292307138443, 0.39874544739723206, 0.39368534088134766, 0.39055997133255005, 0.3878121078014374, 0.3828600347042084, 0.3886251747608185, 0.37382885813713074, 0.37309664487838745, 0.37170130014419556, 0.370380699634552, 0.3671061098575592, 0.3637935519218445, 0.3608415424823761, 0.3601936101913452, 0.3630964756011963, 0.35394391417503357, 0.35214176774024963, 0.3543696403503418, 0.35206982493400574, 0.34711214900016785, 0.3431532680988312, 0.34648698568344116, 0.34246113896369934, 0.346425324678421, 0.34364888072013855, 0.34191739559173584, 0.34670865535736084, 0.3396186828613281, 0.33608195185661316, 0.342162549495697, 0.3381912112236023, 0.33157864212989807, 0.33728837966918945, 0.3333754539489746, 0.33475813269615173, 0.3327709138393402, 0.3322918713092804, 0.3324054479598999, 0.3270479440689087, 0.33892300724983215, 0.33872854709625244, 0.33548712730407715, 0.3289022147655487, 0.3266260325908661], "val_accuracy": [0.5566666722297668, 0.6600000262260437, 0.690666675567627, 0.7096666693687439, 0.7336666584014893, 0.7506666779518127, 0.7730000019073486, 0.7839999794960022, 0.7976666688919067, 0.8050000071525574, 0.8096666932106018, 0.8146666884422302, 0.8243333101272583, 0.8273333311080933, 0.8343333601951599, 0.8393333554267883, 0.8420000076293945, 0.8443333506584167, 0.843999981880188, 0.8460000157356262, 0.8489999771118164, 0.8543333411216736, 0.8496666550636292, 0.856333315372467, 0.8569999933242798, 0.8583333492279053, 0.859666645526886, 0.8573333621025085, 0.8579999804496765, 0.8653333187103271, 0.8659999966621399, 0.8686666488647461, 0.8676666617393494, 0.8650000095367432, 0.8696666955947876, 0.8679999709129333, 0.8700000047683716, 0.8703333139419556, 0.8713333606719971, 0.8679999709129333, 0.8736666440963745, 0.871666669845581, 0.8743333220481873, 0.8726666569709778, 0.8723333477973938, 0.8733333349227905, 0.8733333349227905, 0.874666690826416, 0.871666669845581, 0.8743333220481873, 0.875333309173584, 0.8769999742507935, 0.8763333559036255, 0.8766666650772095, 0.8733333349227905, 0.8793333172798157, 0.8786666393280029, 0.878000020980835, 0.8796666860580444, 0.8790000081062317, 0.8773333430290222, 0.8769999742507935, 0.875, 0.8816666603088379, 0.8766666650772095, 0.875, 0.8803333044052124, 0.8796666860580444, 0.878000020980835]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [4, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 2, 1, 2, 3, 5, 9], [0, 2, 0, 3], [16, 16, 27], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 6, 5, 9], [0, 2, 0, 3, 0, 0, 3, 1, 2, 0], [16, 5, 98, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 11, 7, 4, 3, 2, 1, 1, 1, 23, 13, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(beta, tf.math.pow(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.divide_no_nan(tf.math.square(alpha), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2, 2, 9, 7, 1, 8, 4, 3, 4, 5, 1, 8, 3, 9], [0, 1, 0, 2, 2, 3, 2, 3, 1, 1, 2], [39, 39, 31, 32], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 1, 2], [0, 3, 0, 3, 1], [16, 5], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 4, 2, 9, 1, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 4, 5], [43, 99, 96, 99, 61, 1, 88, 55]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 19, 11, 4, 11, 6, 5, 2, 2, 1, 1, 1, 28, 16, 12, 8], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.pow(tf.math.multiply(tf.math.pow(grad, tf.math.square(grad)), grad), grad)), tf.math.subtract(alpha, tf.math.sqrt(tf.math.multiply(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.subtract(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.add(tf.math.pow(alpha, beta), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))))), tf.math.subtract(grad, grad)), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 0], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 1], [0, 2, 3, 3, 4], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 2, 11, 6, 5, 1, 2, 1, 1, 1, 13, 7, 6, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.subtract(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(1.0, shape=shape, dtype=tf.float32)))), grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [5, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 8], [0, 2, 0, 3], [52, 16], [0, 1], [0], [4], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 9, 4, 1, 0, 2, 8], [0, 0, 4, 3, 2, 0, 3, 4, 2, 0], [16, 99, 96, 77, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 0, 10, 6, 4, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(grad), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]