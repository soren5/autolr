[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8694285750389099, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2241058349609375, 1.8695811033248901, 1.4024631977081299, 1.1072423458099365, 0.9581826329231262, 0.8543639779090881, 0.779224693775177, 0.7285834550857544, 0.692898154258728, 0.6627869606018066, 0.641314685344696, 0.6163071393966675, 0.5913456678390503, 0.5705056190490723, 0.552782416343689, 0.5465424656867981, 0.5315079092979431, 0.5171229243278503, 0.502268373966217, 0.4971480965614319, 0.485010027885437, 0.47521257400512695, 0.4633362889289856, 0.4564494788646698, 0.44219204783439636, 0.437930166721344, 0.435112863779068, 0.42206138372421265, 0.4275968670845032, 0.40950125455856323, 0.4007757604122162, 0.3887660503387451, 0.39037466049194336, 0.38481858372688293, 0.38950619101524353, 0.3707751929759979, 0.36657071113586426, 0.3672349452972412, 0.35623234510421753, 0.3539413511753082, 0.3454361855983734, 0.34121301770210266, 0.34439152479171753, 0.3335825502872467, 0.321561336517334, 0.3201086223125458, 0.3197544515132904, 0.3149080276489258, 0.3079840838909149, 0.30434557795524597, 0.3073769211769104, 0.30492103099823, 0.29502737522125244, 0.29390203952789307, 0.2873726785182953, 0.28422635793685913, 0.27652212977409363, 0.2689121663570404, 0.2659558951854706, 0.2690928876399994, 0.2733815014362335, 0.2596299350261688], "accuracy": [0.2674679756164551, 0.4943864643573761, 0.5635979175567627, 0.6144498586654663, 0.6538106203079224, 0.69673752784729, 0.7256637215614319, 0.7314753532409668, 0.7446836829185486, 0.752740740776062, 0.7605336308479309, 0.7765156626701355, 0.7837802171707153, 0.7926297783851624, 0.7973847389221191, 0.800818920135498, 0.8084797263145447, 0.816008448600769, 0.8185180425643921, 0.8190463781356812, 0.8301413059234619, 0.8333113193511963, 0.830669641494751, 0.8383304476737976, 0.8425571322441101, 0.8442742228507996, 0.846387505531311, 0.8470479249954224, 0.8462554216384888, 0.8533879518508911, 0.8585391640663147, 0.8617091774940491, 0.8623695969581604, 0.8613129258155823, 0.8598600029945374, 0.8681812286376953, 0.8698983192443848, 0.8659358024597168, 0.8732003569602966, 0.8737286925315857, 0.8762382864952087, 0.8803328275680542, 0.8809932470321655, 0.8805969953536987, 0.887201189994812, 0.8853520154953003, 0.8848236799240112, 0.8816536664962769, 0.8891823887825012, 0.8942015767097473, 0.8862766027450562, 0.8893144726753235, 0.8963148593902588, 0.8924844861030579, 0.8969752788543701, 0.8971073627471924, 0.8997490406036377, 0.9050323367118835, 0.9034473896026611, 0.9041078090667725, 0.902390718460083, 0.9085986018180847], "val_loss": [2.0356295108795166, 1.5069860219955444, 1.0286043882369995, 0.8214139938354492, 0.736549973487854, 0.6778802871704102, 0.6308359503746033, 0.6007359027862549, 0.5720755457878113, 0.5487608313560486, 0.5327964425086975, 0.5181721448898315, 0.49993258714675903, 0.48922160267829895, 0.47655266523361206, 0.46922850608825684, 0.46329960227012634, 0.4553988575935364, 0.4437040090560913, 0.4358951151371002, 0.4293970465660095, 0.4240800440311432, 0.41387805342674255, 0.4110852777957916, 0.41442734003067017, 0.40305253863334656, 0.39747509360313416, 0.3983311653137207, 0.39318957924842834, 0.38560575246810913, 0.38041529059410095, 0.3884202539920807, 0.37225455045700073, 0.3714357614517212, 0.3674381375312805, 0.3653915524482727, 0.36492404341697693, 0.3625199496746063, 0.3590535819530487, 0.36295878887176514, 0.3559444844722748, 0.358650803565979, 0.35205915570259094, 0.3498660922050476, 0.34739887714385986, 0.3523750901222229, 0.34675902128219604, 0.3463197350502014, 0.34509900212287903, 0.34072399139404297, 0.33937495946884155, 0.34040510654449463, 0.33749422430992126, 0.3354887366294861, 0.33326029777526855, 0.33555033802986145, 0.32933682203292847, 0.32861047983169556, 0.33020099997520447, 0.32700949907302856, 0.3283916413784027, 0.3308899998664856], "val_accuracy": [0.5389999747276306, 0.6610000133514404, 0.6903333067893982, 0.7149999737739563, 0.7283333539962769, 0.7456666827201843, 0.7593333125114441, 0.7699999809265137, 0.7829999923706055, 0.7943333387374878, 0.8019999861717224, 0.8009999990463257, 0.8059999942779541, 0.8230000138282776, 0.8263333439826965, 0.8209999799728394, 0.8333333134651184, 0.8336666822433472, 0.8396666646003723, 0.8413333296775818, 0.8423333168029785, 0.8500000238418579, 0.8519999980926514, 0.8536666631698608, 0.8456666469573975, 0.8553333282470703, 0.8569999933242798, 0.8613333106040955, 0.859333336353302, 0.8633333444595337, 0.8629999756813049, 0.8553333282470703, 0.8676666617393494, 0.8666666746139526, 0.8679999709129333, 0.8706666827201843, 0.871666669845581, 0.8643333315849304, 0.8736666440963745, 0.8700000047683716, 0.8709999918937683, 0.8656666874885559, 0.8733333349227905, 0.8773333430290222, 0.8769999742507935, 0.8700000047683716, 0.8743333220481873, 0.878333330154419, 0.8759999871253967, 0.8786666393280029, 0.8776666522026062, 0.878333330154419, 0.8726666569709778, 0.8790000081062317, 0.8830000162124634, 0.8830000162124634, 0.8833333253860474, 0.8813333511352539, 0.8806666731834412, 0.8833333253860474, 0.8796666860580444, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [5, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [6, 0, 3, 6, 8, 1, 2, 1, 4, 2, 2, 2, 5, 4, 5, 8, 1, 6, 4, 7, 8, 4, 5, 7, 8, 5, 8, 1, 4, 5, 1, 0, 3, 1, 9, 0, 3, 3, 1, 0, 8], [0, 2, 0, 3, 0, 0, 3, 1, 2, 0, 0, 5, 1, 6, 6, 7, 2, 5, 6, 3, 3, 1, 3, 1, 6], [16, 99, 96, 99, 61, 1, 82]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 66, 41, 25, 7], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), beta)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(beta, tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma))), tf.math.add(tf.math.add(alpha, beta), tf.math.square(tf.math.pow(tf.math.square(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.add(grad, tf.math.sqrt(tf.math.square(alpha)))), grad)), grad), tf.math.sqrt(tf.math.subtract(tf.math.pow(grad, beta), tf.math.square(grad)))), tf.math.subtract(tf.math.negative(tf.math.multiply(tf.math.subtract(grad, sigma), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, alpha), sigma)))))))))), tf.math.subtract(tf.math.negative(tf.math.sqrt(alpha)), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 2, 3, 6, 3, 2, 5], [0, 2, 0, 3, 5, 1], [16, 16], [0, 1], [0], [0], [3], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 2, 8, 6, 5], [0, 0, 0, 2, 0, 0, 3, 1, 4, 0], [20, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 13, 7, 6, 2, 2, 1, 1, 1, 23, 13, 10, 6], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), tf.math.square(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta)), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma)), tf.math.sqrt(tf.math.divide_no_nan(tf.math.square(alpha), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 1, 0, 5, 4, 3, 0, 8, 6, 3, 4, 4, 6, 1, 9, 2, 8], [0, 1, 0, 2, 0, 2, 0, 0, 2, 1, 1, 2, 0], [39, 32, 41, 19, 19, 37, 24], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 1, 0, 3, 5], [0, 2, 0, 3], [2, 12], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9], [0, 0, 0, 3, 0, 0, 0, 1, 2, 4], [15, 99, 96, 99, 61, 1, 82]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.subtract(tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.square(grad)), tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.math.pow(grad, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad), alpha))), tf.math.divide_no_nan(tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(grad))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), alpha), tf.math.add(tf.math.sqrt(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10487385839223862, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}, "mapping_values": [1, 34, 21, 13, 7, 10, 6, 4, 2, 2, 1, 1, 1, 21, 12, 9, 7], "tree_depth": 24}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [87, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 8, 3, 0, 3, 5], [0, 2, 0, 1], [37, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4, 5, 5, 3, 4, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0, 1, 2, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.08857142925262451, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 1, 30, 17, 13, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.pow(alpha, beta)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.multiply(tf.math.pow(alpha, tf.math.sqrt(beta)), beta))))", "other_info": {"loss": [2.3117411136627197, 2.3100175857543945, 2.3100152015686035, 2.3101203441619873, 2.3109750747680664, 2.3100695610046387], "accuracy": [0.08981640636920929, 0.08942015469074249, 0.0944393053650856, 0.09285431355237961, 0.08889182657003403, 0.09232597798109055], "val_loss": [2.308418035507202, 2.308418035507202, 2.308418035507202, 2.308418035507202, 2.308418035507202, 2.308418035507202], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}]