[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.878000020980835, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2224395275115967, 1.8670783042907715, 1.388458251953125, 1.0954017639160156, 0.9435276389122009, 0.8520331382751465, 0.7831074595451355, 0.7392901182174683, 0.6944105625152588, 0.6681712865829468, 0.6388452053070068, 0.6204488277435303, 0.6004019975662231, 0.5960241556167603, 0.5688852667808533, 0.5539748668670654, 0.5375875234603882, 0.5286516547203064, 0.5144819021224976, 0.4999626874923706, 0.4967844486236572, 0.479257732629776, 0.4772557318210602, 0.4661349058151245, 0.4592231810092926, 0.4389232397079468, 0.4312085509300232, 0.432329922914505, 0.42237091064453125, 0.41829559206962585, 0.40383008122444153, 0.3991278111934662, 0.39593032002449036, 0.3879355788230896, 0.3850327432155609, 0.37697115540504456, 0.3702997863292694, 0.37397080659866333, 0.3610646724700928, 0.35055291652679443, 0.346886545419693, 0.34592729806900024, 0.33994436264038086, 0.34215033054351807, 0.3366647958755493, 0.32529550790786743, 0.3214634656906128, 0.32358211278915405, 0.3132103383541107, 0.3044368326663971, 0.30539530515670776, 0.2996930181980133, 0.300107479095459, 0.28643354773521423, 0.2789861261844635, 0.2746070921421051, 0.2769784927368164, 0.2762717008590698, 0.27172884345054626], "accuracy": [0.2705058753490448, 0.48131024837493896, 0.5654470920562744, 0.6131290197372437, 0.6579051613807678, 0.6947563290596008, 0.7232862114906311, 0.7271166443824768, 0.7473253011703491, 0.752740740776062, 0.7697794437408447, 0.7771760821342468, 0.7808743715286255, 0.7808743715286255, 0.7981772422790527, 0.8033285140991211, 0.8037247657775879, 0.8107251524925232, 0.8161405324935913, 0.8182538747787476, 0.8189142942428589, 0.8281601071357727, 0.8297450542449951, 0.8339717388153076, 0.8401796221733093, 0.8441421389579773, 0.844010055065155, 0.8441421389579773, 0.8510104417800903, 0.852859616279602, 0.8525954484939575, 0.8570862412452698, 0.860652506351471, 0.8647470474243164, 0.86118084192276, 0.8697662353515625, 0.8650112152099609, 0.8671245574951172, 0.8732003569602966, 0.8792761564254761, 0.8786157965660095, 0.8772949576377869, 0.8808611631393433, 0.8776912093162537, 0.8813894987106323, 0.8870691061019897, 0.8856161832809448, 0.886672854423523, 0.8894465565681458, 0.8885219693183899, 0.8894465565681458, 0.894069492816925, 0.8905032277107239, 0.8994848728179932, 0.8985602855682373, 0.9012019634246826, 0.9000132083892822, 0.9015982151031494, 0.902390718460083], "val_loss": [2.0337789058685303, 1.5052913427352905, 1.032944917678833, 0.822698712348938, 0.735540509223938, 0.6839811205863953, 0.6380799412727356, 0.6029306054115295, 0.5754747986793518, 0.5563652515411377, 0.5367688536643982, 0.5217717885971069, 0.5232280492782593, 0.49952924251556396, 0.49152490496635437, 0.4777308702468872, 0.47967007756233215, 0.46273109316825867, 0.4550873935222626, 0.4554212987422943, 0.43860429525375366, 0.43437620997428894, 0.4331565797328949, 0.42844241857528687, 0.419869601726532, 0.4154161810874939, 0.41123905777931213, 0.40508878231048584, 0.4010832905769348, 0.39912882447242737, 0.3921383321285248, 0.3915916383266449, 0.38940998911857605, 0.38510072231292725, 0.38587525486946106, 0.383687824010849, 0.3783247768878937, 0.378089040517807, 0.36986857652664185, 0.37147825956344604, 0.3668105900287628, 0.36897575855255127, 0.3653184473514557, 0.35993993282318115, 0.36410102248191833, 0.3609732985496521, 0.3587341010570526, 0.3537465035915375, 0.3556331396102905, 0.3540750741958618, 0.3571542203426361, 0.3485299050807953, 0.3511503040790558, 0.3475714921951294, 0.3487464189529419, 0.3498191237449646, 0.34317997097969055, 0.34570804238319397, 0.34605872631073], "val_accuracy": [0.5196666717529297, 0.668666660785675, 0.6899999976158142, 0.718999981880188, 0.7369999885559082, 0.7446666955947876, 0.7613333463668823, 0.7689999938011169, 0.7789999842643738, 0.7903333306312561, 0.7993333339691162, 0.8090000152587891, 0.8040000200271606, 0.8133333325386047, 0.815666675567627, 0.8199999928474426, 0.8206666707992554, 0.8289999961853027, 0.831333339214325, 0.831333339214325, 0.8443333506584167, 0.8416666388511658, 0.8403333425521851, 0.8433333039283752, 0.8463333249092102, 0.8446666598320007, 0.8513333201408386, 0.8489999771118164, 0.8519999980926514, 0.8529999852180481, 0.8533333539962769, 0.859000027179718, 0.856333315372467, 0.8553333282470703, 0.859333336353302, 0.8629999756813049, 0.8606666922569275, 0.8556666374206543, 0.8636666536331177, 0.8640000224113464, 0.8643333315849304, 0.8629999756813049, 0.8653333187103271, 0.8663333058357239, 0.8666666746139526, 0.8640000224113464, 0.8643333315849304, 0.8686666488647461, 0.8690000176429749, 0.8713333606719971, 0.8673333525657654, 0.8700000047683716, 0.8713333606719971, 0.878000020980835, 0.8733333349227905, 0.8730000257492065, 0.8736666440963745, 0.8759999871253967, 0.8743333220481873]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 97], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 3, 6, 3, 2, 0, 1, 7, 2, 7, 7, 7, 2, 1, 6, 3], [0, 4, 5, 7, 0, 1, 1, 5, 0, 0, 3, 1, 3, 5, 1], [33, 59, 93, 92], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 4, 4, 0, 8], [0, 3, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 40, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 31, 16, 15, 4, 20, 11, 9, 4], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(tf.math.negative(tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.add(tf.math.add(grad, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), alpha), alpha), tf.math.add(grad, tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.math.multiply(alpha, sigma)))))))), grad), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.negative(tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 1, 96], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 0], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [1, 6, 3, 2, 8, 1, 4, 0, 2, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 50, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 11, 7, 4, 2, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), alpha)", "other_info": {"loss": [4.7911835027884995e+24, 46.27521896362305, 146.1390838623047, 303.83868408203125, 519.0523681640625, 792.072998046875], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [19.475797653198242, 95.35566711425781, 228.80499267578125, 419.6775817871094, 667.986328125, 973.6798095703125], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 1], [0, 1, 0, 2, 0], [39, 39, 28], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 1], [16, 16], [0, 1], [0], [0], [4], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 9, 2, 1, 0, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 1, 0, 1, 1, 2, 1, 1, 1, 16, 9, 7, 6], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [21944.642578125, 475611.1875, 2508075.5, 8314755.5, 21555464.0, 49280652.0], "accuracy": [0.10051512718200684, 0.09932637959718704, 0.10355303436517715, 0.10210011899471283, 0.10315678268671036, 0.10011887550354004], "val_loss": [104423.5078125, 965968.3125, 3837157.75, 10890088.0, 25994002.0, 56346700.0], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0], [2, 2, 3, 0, 3, 6, 1, 9], [0, 1, 0, 2, 0, 1], [9, 39, 56, 17], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 2, 3, 2, 3, 6, 3, 4, 5, 4, 6, 3, 6, 4, 7, 6, 3, 7, 2, 5, 4, 3, 7, 9, 7, 4], [0, 2, 0, 3, 2, 0, 1, 4, 5, 4, 1, 1, 0, 2, 5, 1, 2, 5, 2, 2, 1, 1, 2, 0], [16, 16, 27, 77, 97, 13], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 8, 2, 8, 8], [0, 4, 0, 3, 0, 0, 3, 1, 0, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 4, 52, 28, 24, 6, 2, 1, 1, 1, 21, 12, 9, 5], "tree_depth": 48, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.subtract(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.multiply(tf.math.divide_no_nan(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(alpha, tf.math.square(tf.math.pow(grad, tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.square(alpha), tf.math.pow(tf.math.multiply(tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), beta), grad))), alpha)), beta)), grad), beta), beta)))), tf.math.add(alpha, alpha)))))), tf.math.pow(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.sqrt(tf.math.sqrt(alpha))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]