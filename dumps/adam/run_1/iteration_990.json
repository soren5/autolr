[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8600000143051147, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221782922744751, 1.862732172012329, 1.3870439529418945, 1.0928174257278442, 0.9272736310958862, 0.8264588117599487, 0.7683018445968628, 0.7111189365386963, 0.6729024052619934, 0.6573489308357239, 0.630431056022644, 0.6073610782623291, 0.588235080242157, 0.5735662579536438, 0.5543861985206604, 0.5448644161224365, 0.5228927135467529, 0.5277449488639832, 0.5110377073287964, 0.5025684833526611, 0.48930153250694275, 0.48001521825790405, 0.4604423940181732, 0.46057960391044617, 0.4492625296115875, 0.44824129343032837, 0.4340303838253021, 0.4310016334056854, 0.4250740706920624, 0.4113713204860687, 0.40880662202835083, 0.3982602655887604, 0.3948725163936615, 0.3835808336734772, 0.38127192854881287, 0.37413060665130615, 0.3637535870075226, 0.3662117123603821, 0.3666434586048126, 0.3609056770801544, 0.35319823026657104, 0.3533911108970642, 0.33600834012031555, 0.3330431878566742, 0.3285668194293976, 0.324163019657135, 0.3118263781070709, 0.3140315115451813, 0.3036143481731415, 0.3034939467906952, 0.3017306625843048, 0.2940234839916229, 0.29264289140701294, 0.28901761770248413, 0.28205519914627075, 0.274074524641037, 0.2749464511871338, 0.26925522089004517, 0.2715917229652405, 0.2563585638999939, 0.2629716694355011, 0.2530481219291687, 0.2545112371444702, 0.2459564208984375, 0.24686284363269806, 0.24302440881729126, 0.23153790831565857, 0.22914548218250275, 0.23568791151046753, 0.23335908353328705, 0.22107622027397156, 0.2141495794057846, 0.21482476592063904, 0.2140558511018753, 0.2125246673822403, 0.21092872321605682, 0.21001151204109192, 0.1940552294254303, 0.1953803449869156, 0.19605982303619385, 0.19223009049892426, 0.1918046772480011, 0.18315206468105316, 0.18938253819942474, 0.17977210879325867, 0.1737629771232605, 0.17299328744411469, 0.16970784962177277, 0.17193518579006195], "accuracy": [0.2755250334739685, 0.4843481779098511, 0.568220853805542, 0.6238277554512024, 0.670320987701416, 0.7091533541679382, 0.7250033020973206, 0.7454761862754822, 0.7540615797042847, 0.7666094303131104, 0.7737419009208679, 0.778232753276825, 0.7835160493850708, 0.7930260300636292, 0.8005547523498535, 0.8035926818847656, 0.8171972036361694, 0.8045172095298767, 0.8214238286018372, 0.8157442808151245, 0.8259146809577942, 0.8304054737091064, 0.8368775844573975, 0.8333113193511963, 0.8438779711723328, 0.8450667262077332, 0.845859169960022, 0.8495575189590454, 0.8508783578872681, 0.8581429123878479, 0.8561616539955139, 0.8576145768165588, 0.8625016212463379, 0.8646149635314941, 0.8660678863525391, 0.8665962219238281, 0.8708229064941406, 0.8688416481018066, 0.8704266548156738, 0.8729361891746521, 0.8792761564254761, 0.8759741187095642, 0.8811253309249878, 0.8798044919967651, 0.8844274282455444, 0.8812574148178101, 0.8887861371040344, 0.8860124349594116, 0.8912957310676575, 0.8923524022102356, 0.8938053250312805, 0.8948619961738586, 0.8969752788543701, 0.8977677822113037, 0.9000132083892822, 0.9041078090667725, 0.9055606722831726, 0.9034473896026611, 0.9030511379241943, 0.9072777628898621, 0.9080702662467957, 0.9104477763175964, 0.9088627696037292, 0.9104477763175964, 0.9113723635673523, 0.9157310724258423, 0.9179764986038208, 0.9174481630325317, 0.9157310724258423, 0.9171839952468872, 0.9210143685340881, 0.9223352074623108, 0.9224672913551331, 0.9232597947120667, 0.9270902276039124, 0.9204860925674438, 0.9235239624977112, 0.927882730960846, 0.9280148148536682, 0.930260181427002, 0.9322414398193359, 0.9356756210327148, 0.934751033782959, 0.9332981109619141, 0.936732292175293, 0.9377889037132263, 0.9392418265342712, 0.9413551688194275, 0.9371285438537598], "val_loss": [2.0374553203582764, 1.5182170867919922, 1.0407708883285522, 0.832308292388916, 0.7401358485221863, 0.681882381439209, 0.6349772810935974, 0.5991986393928528, 0.5749750733375549, 0.5551227331161499, 0.5352065563201904, 0.5140913724899292, 0.5011364221572876, 0.48699960112571716, 0.47473180294036865, 0.47018417716026306, 0.45734846591949463, 0.456024169921875, 0.442412793636322, 0.427077054977417, 0.4266967475414276, 0.4198247194290161, 0.4109767973423004, 0.4081135392189026, 0.40208765864372253, 0.3941975235939026, 0.38914355635643005, 0.3841606080532074, 0.3830794394016266, 0.37445777654647827, 0.37237513065338135, 0.36731046438217163, 0.36504969000816345, 0.3615128993988037, 0.3585561513900757, 0.35513627529144287, 0.3553769588470459, 0.34987175464630127, 0.3495681881904602, 0.34681689739227295, 0.34719139337539673, 0.33833757042884827, 0.3380624055862427, 0.3466596305370331, 0.3391501009464264, 0.33360806107521057, 0.33066126704216003, 0.32765597105026245, 0.32893651723861694, 0.3259013593196869, 0.3236425817012787, 0.3300608694553375, 0.32552677392959595, 0.32090243697166443, 0.32040631771087646, 0.31952986121177673, 0.3239670395851135, 0.3156873881816864, 0.3150881826877594, 0.31444981694221497, 0.31364521384239197, 0.3141380548477173, 0.3127155005931854, 0.3075067102909088, 0.3116045296192169, 0.305537611246109, 0.31233206391334534, 0.31033962965011597, 0.3077719807624817, 0.3076554834842682, 0.3055481016635895, 0.3065846264362335, 0.3089110851287842, 0.30663830041885376, 0.3074190616607666, 0.30585646629333496, 0.30662012100219727, 0.31237709522247314, 0.30646735429763794, 0.30750715732574463, 0.3054727017879486, 0.3087792992591858, 0.3090337812900543, 0.30455201864242554, 0.31153303384780884, 0.3085838556289673, 0.3056740462779999, 0.3105277419090271, 0.30888426303863525], "val_accuracy": [0.5316666960716248, 0.6513333320617676, 0.6840000152587891, 0.7056666612625122, 0.7319999933242798, 0.7490000128746033, 0.7636666893959045, 0.7756666541099548, 0.7876666784286499, 0.7919999957084656, 0.8046666383743286, 0.8083333373069763, 0.8096666932106018, 0.8136666417121887, 0.8240000009536743, 0.8236666917800903, 0.8336666822433472, 0.8330000042915344, 0.8326666951179504, 0.8403333425521851, 0.8413333296775818, 0.8450000286102295, 0.8460000157356262, 0.8510000109672546, 0.8506666421890259, 0.8523333072662354, 0.8586666584014893, 0.8560000061988831, 0.8573333621025085, 0.862666666507721, 0.8653333187103271, 0.8586666584014893, 0.8656666874885559, 0.8669999837875366, 0.8696666955947876, 0.8693333268165588, 0.8679999709129333, 0.875333309173584, 0.8730000257492065, 0.8743333220481873, 0.875, 0.8769999742507935, 0.875333309173584, 0.8743333220481873, 0.8736666440963745, 0.8833333253860474, 0.8793333172798157, 0.8840000033378601, 0.8820000290870667, 0.8820000290870667, 0.8846666812896729, 0.8806666731834412, 0.8849999904632568, 0.8853333592414856, 0.8846666812896729, 0.8870000243186951, 0.8799999952316284, 0.8866666555404663, 0.887333333492279, 0.8866666555404663, 0.8880000114440918, 0.8920000195503235, 0.890999972820282, 0.8889999985694885, 0.8896666765213013, 0.8943333625793457, 0.890999972820282, 0.8923333287239075, 0.8899999856948853, 0.8953333497047424, 0.8939999938011169, 0.8963333368301392, 0.8933333158493042, 0.8970000147819519, 0.8973333239555359, 0.8966666460037231, 0.8960000276565552, 0.8960000276565552, 0.9003333449363708, 0.8970000147819519, 0.8996666669845581, 0.9006666541099548, 0.8976666927337646, 0.9010000228881836, 0.8996666669845581, 0.8966666460037231, 0.9006666541099548, 0.8966666460037231, 0.8996666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 1], [75, 13], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 2, 4, 1, 1, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 38, 81, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 2, 1, 1, 1, 12, 6, 6, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.add(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.30375337600708, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 1], [81, 39], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 2, 3, 5, 3, 1, 1, 3, 2, 9, 5, 8, 2], [0, 3, 1, 3, 5, 3, 0, 5, 3, 4], [16, 16, 55], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [4, 3, 1, 6, 4, 4, 4, 5, 4, 2, 8, 3, 7, 2, 2, 2, 2, 4, 9, 4, 3, 8, 1, 9, 8, 5, 1, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 1, 5, 7, 0, 1, 2, 4, 1], [16, 99, 96, 99, 61, 1, 93, 44, 85, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 25, 15, 10, 3, 1, 0, 1, 1, 46, 28, 18, 10], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.square(tf.math.multiply(alpha, tf.math.subtract(grad, tf.math.subtract(grad, tf.math.multiply(tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))), tf.math.square(grad)), tf.math.sqrt(tf.math.add(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.multiply(tf.math.add(sigma, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(tf.math.pow(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.math.multiply(grad, tf.math.sqrt(tf.math.subtract(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), alpha))), tf.math.sqrt(tf.math.square(tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), beta))))), grad), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 59], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 2, 6, 3, 3, 2, 7, 2, 5, 1, 4, 5, 6, 0, 3, 2, 2, 7, 8, 5, 8, 1, 2, 8, 5, 5], [1, 2, 0, 3, 4, 3, 2, 4, 3, 3, 3, 3, 2, 2, 3, 5, 3, 0, 5, 1], [16, 16], [0, 1], [0], [0], [74], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 9, 7], [0, 0, 1, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 47, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 51, 31, 20, 2, 2, 1, 1, 1, 22, 12, 10, 6], "tree_depth": 39, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), beta), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(grad, tf.math.add(grad, grad)), beta), tf.math.square(tf.math.subtract(tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(tf.math.add(grad, grad), tf.math.add(grad, tf.math.sqrt(grad))), grad)), beta)), tf.math.square(tf.math.sqrt(beta))), tf.math.subtract(tf.math.add(grad, grad), tf.math.sqrt(grad))))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(grad))))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 4, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 9, 0, 3, 5], [0, 2, 0, 3], [35, 92], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 5, 4, 1, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.pow(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]