[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8659999966621399, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2220304012298584, 1.8648483753204346, 1.3895974159240723, 1.1001924276351929, 0.9447269439697266, 0.843613862991333, 0.7717943787574768, 0.7405949831008911, 0.6942139267921448, 0.665253221988678, 0.6397126317024231, 0.6199002861976624, 0.6005101203918457, 0.58687424659729, 0.5592829585075378, 0.5528945922851562, 0.5315935015678406, 0.5249254703521729, 0.5086967349052429, 0.504132091999054, 0.483508437871933, 0.48173314332962036, 0.4715173840522766, 0.46080368757247925, 0.4534139037132263, 0.4469691216945648, 0.4443024694919586, 0.43425825238227844, 0.42937973141670227, 0.42606523633003235, 0.4143230617046356, 0.40608635544776917, 0.3966212272644043, 0.3916243016719818, 0.3897206485271454, 0.375299334526062, 0.37354913353919983, 0.3693199157714844, 0.36548516154289246, 0.3584138751029968, 0.3530121445655823, 0.3476538360118866, 0.34263303875923157, 0.33283889293670654, 0.3260837197303772, 0.3256445527076721, 0.3264508843421936, 0.32484546303749084, 0.31116196513175964, 0.3086394965648651, 0.30384713411331177, 0.29787009954452515, 0.2938925623893738, 0.29392558336257935, 0.2889555096626282, 0.28320571780204773, 0.2738598585128784, 0.27048906683921814], "accuracy": [0.28080835938453674, 0.48408401012420654, 0.5649187564849854, 0.6151102781295776, 0.6621318459510803, 0.6940959095954895, 0.7214370369911194, 0.7310791015625, 0.7436270117759705, 0.7574957013130188, 0.7656848430633545, 0.7696473598480225, 0.7779685854911804, 0.7861577272415161, 0.7906485199928284, 0.8021397590637207, 0.804649293422699, 0.8146876096725464, 0.8207634687423706, 0.8177255392074585, 0.8231409192085266, 0.8264430165290833, 0.8304054737091064, 0.834632158279419, 0.8380662798881531, 0.8417646288871765, 0.8446704745292664, 0.8441421389579773, 0.8461233377456665, 0.8492933511734009, 0.8529917001724243, 0.856689989566803, 0.8581429123878479, 0.8578787446022034, 0.8614450097084045, 0.8669924736022949, 0.8661999702453613, 0.8728041052818298, 0.8702945709228516, 0.8746532797813416, 0.8768987059593201, 0.8742570281028748, 0.8787478804588318, 0.878879964351654, 0.8804649114608765, 0.8800686597824097, 0.8841632604598999, 0.8813894987106323, 0.8874653577804565, 0.8853520154953003, 0.8905032277107239, 0.8951261639595032, 0.8975036144256592, 0.8938053250312805, 0.8934090733528137, 0.8969752788543701, 0.9000132083892822, 0.8971073627471924], "val_loss": [2.0349624156951904, 1.5098530054092407, 1.0422061681747437, 0.8406354188919067, 0.7527262568473816, 0.6960045695304871, 0.6532715559005737, 0.6149560809135437, 0.5886301398277283, 0.5686244368553162, 0.5496143102645874, 0.531144917011261, 0.5256169438362122, 0.510396420955658, 0.4980599284172058, 0.48609381914138794, 0.4796179234981537, 0.46985310316085815, 0.4634988605976105, 0.45561304688453674, 0.4488453269004822, 0.4442770481109619, 0.4356209337711334, 0.43427178263664246, 0.4258384108543396, 0.4286273717880249, 0.4231555163860321, 0.42074838280677795, 0.41820788383483887, 0.41705623269081116, 0.41054973006248474, 0.4100821018218994, 0.40391337871551514, 0.39818131923675537, 0.39660871028900146, 0.39510929584503174, 0.3962453603744507, 0.3943752348423004, 0.38741177320480347, 0.3863937258720398, 0.3857148289680481, 0.38578107953071594, 0.38067546486854553, 0.38350948691368103, 0.3833048641681671, 0.38341817259788513, 0.37479332089424133, 0.37647131085395813, 0.3712413012981415, 0.37032580375671387, 0.3685372769832611, 0.3705742657184601, 0.36954426765441895, 0.3704778254032135, 0.36359086632728577, 0.3647509813308716, 0.3620571792125702, 0.36330050230026245], "val_accuracy": [0.5133333206176758, 0.6583333611488342, 0.6880000233650208, 0.7083333134651184, 0.7300000190734863, 0.7543333172798157, 0.7649999856948853, 0.7756666541099548, 0.7889999747276306, 0.796999990940094, 0.8013333082199097, 0.8119999766349792, 0.8103333115577698, 0.8253333568572998, 0.8296666741371155, 0.8330000042915344, 0.8309999704360962, 0.8410000205039978, 0.8443333506584167, 0.843999981880188, 0.8476666808128357, 0.8489999771118164, 0.8523333072662354, 0.8526666760444641, 0.8550000190734863, 0.8539999723434448, 0.8553333282470703, 0.8536666631698608, 0.8533333539962769, 0.8556666374206543, 0.8610000014305115, 0.8610000014305115, 0.8633333444595337, 0.8613333106040955, 0.8629999756813049, 0.8633333444595337, 0.862666666507721, 0.8673333525657654, 0.8643333315849304, 0.8686666488647461, 0.8673333525657654, 0.8713333606719971, 0.8723333477973938, 0.8659999966621399, 0.8703333139419556, 0.8733333349227905, 0.874666690826416, 0.8659999966621399, 0.8703333139419556, 0.8773333430290222, 0.8759999871253967, 0.8756666779518127, 0.8809999823570251, 0.871999979019165, 0.8763333559036255, 0.8773333430290222, 0.878333330154419, 0.8756666779518127]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 1, 0, 3, 9, 0], [0, 2, 3, 3], [39, 16], [0, 1, 1], [1], [0, 6], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 5, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10028571635484695, "mapping_values": [1, 9, 5, 4, 1, 10, 7, 3, 2, 3, 1, 2, 1, 11, 6, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.309492826461792, 2.312554121017456, 2.3167872428894043, 2.3386213779449463, 2.3965351581573486, 2.5293121337890625, 2.7978129386901855], "accuracy": [0.09721305221319199, 0.09351472556591034, 0.09721305221319199, 0.09536388516426086, 0.09879804402589798, 0.09642054885625839, 0.10408136248588562], "val_loss": [2.309222459793091, 2.3094053268432617, 2.311738967895508, 2.3261349201202393, 2.3670246601104736, 2.4654507637023926, 2.683863639831543], "val_accuracy": [0.0989999994635582, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 4, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 5], [0, 2, 0, 3, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 2, 0, 4, 1, 1, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 4], [16, 99, 96, 99, 61, 75]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 11, 6, 5, 2, 2, 1, 1, 1, 21, 11, 10, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(grad, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 1, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 4, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 2, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [7.4249725341796875, 58.70749282836914, 203.18331909179688, 501.0893249511719, 1010.8387451171875, 1782.0980224609375], "accuracy": [0.10130762308835983, 0.10302469879388809, 0.09932637959718704, 0.09747721254825592, 0.10315678268671036, 0.10077928751707077], "val_loss": [20.591617584228516, 96.51622772216797, 267.7342224121094, 583.8087768554688, 1093.8046875, 1847.173828125], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 2, 3, 2, 2], [2, 1, 0, 2, 1, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 7, 9, 4, 0], [0, 2, 0, 3, 5], [16, 16, 39], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [5, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 96, 96, 99, 61, 1]], "fitness": -0.08799999952316284, "mapping_values": [1, 11, 5, 6, 1, 15, 10, 5, 3, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(grad, alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.negative(grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.309002637863159, 2.309026002883911, 2.309542655944824, 2.3098952770233154, 2.3096859455108643, 2.3103413581848145, 2.308347225189209, 2.3089795112609863], "accuracy": [0.09417514503002167, 0.09259014576673508, 0.08915598690509796, 0.09681680053472519, 0.09126931428909302, 0.08572183549404144, 0.09259014576673508, 0.09259014576673508], "val_loss": [2.3085262775421143, 2.308441162109375, 2.3083503246307373, 2.3082666397094727, 2.308183193206787, 2.3080990314483643, 2.308016061782837, 2.3079328536987305], "val_accuracy": [0.08966666460037231, 0.09033333510160446, 0.09099999815225601, 0.09000000357627869, 0.08966666460037231, 0.08933333307504654, 0.08699999749660492, 0.08633333444595337]}}]