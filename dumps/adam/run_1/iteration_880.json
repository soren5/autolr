[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2217447757720947, 1.8610590696334839, 1.3805896043777466, 1.0842170715332031, 0.9194115996360779, 0.8244979381561279, 0.767691433429718, 0.7024739980697632, 0.6694735288619995, 0.6434289216995239, 0.6155992150306702, 0.6058039665222168, 0.5727706551551819, 0.5682789087295532, 0.5509359240531921, 0.5318769216537476, 0.5202516913414001, 0.5131315588951111, 0.4944981634616852, 0.48364266753196716, 0.4752097427845001, 0.4683055877685547, 0.4545864462852478, 0.4528733491897583, 0.4452674388885498, 0.4367333650588989, 0.4301731586456299, 0.41109004616737366, 0.41883397102355957, 0.40546759963035583, 0.39614707231521606, 0.3918464183807373, 0.38507339358329773, 0.3834819495677948, 0.3738917410373688, 0.36410269141197205, 0.353054940700531, 0.3591179847717285, 0.3498104214668274, 0.3502359688282013, 0.3447059988975525, 0.3428865671157837, 0.3304058313369751, 0.32579612731933594, 0.320209264755249, 0.313968300819397, 0.3137257993221283, 0.3101646304130554, 0.3055060803890228, 0.2946501076221466, 0.30156782269477844, 0.29173168540000916, 0.2896992564201355, 0.28765687346458435, 0.28240516781806946, 0.27727487683296204, 0.2762170433998108, 0.26774904131889343, 0.26429301500320435, 0.2594354748725891, 0.26281726360321045, 0.24767591059207916, 0.2514500617980957, 0.25415751338005066, 0.2457139939069748, 0.24948474764823914, 0.2345401495695114, 0.23122696578502655], "accuracy": [0.2775062620639801, 0.48566898703575134, 0.5719191431999207, 0.6255448460578918, 0.6701889038085938, 0.7100779414176941, 0.7230220437049866, 0.7508915662765503, 0.7580240368843079, 0.7676661014556885, 0.7791573405265808, 0.7796856164932251, 0.7915731072425842, 0.7964601516723633, 0.8029322624206543, 0.8067626357078552, 0.8158763647079468, 0.8189142942428589, 0.8232730031013489, 0.8276317715644836, 0.832650899887085, 0.8325188159942627, 0.8428213000297546, 0.8449346423149109, 0.848368763923645, 0.8466516733169556, 0.848368763923645, 0.8574824929237366, 0.8521991968154907, 0.8562937378883362, 0.8605204224586487, 0.8584070801734924, 0.8626337051391602, 0.8677849769592285, 0.8681812286376953, 0.8701624870300293, 0.874389111995697, 0.8746532797813416, 0.8757099509239197, 0.8790120482444763, 0.8786157965660095, 0.8792761564254761, 0.8816536664962769, 0.8854840993881226, 0.8865407705307007, 0.8903711438179016, 0.8893144726753235, 0.886672854423523, 0.8927486538887024, 0.8928807377815247, 0.8912957310676575, 0.8988244533538818, 0.8976356983184814, 0.8965790271759033, 0.8994848728179932, 0.9014661312103271, 0.9006736278533936, 0.90423983335495, 0.9035794734954834, 0.9064852595329285, 0.9072777628898621, 0.9104477763175964, 0.9093911051750183, 0.9064852595329285, 0.9119006991386414, 0.9083344340324402, 0.9190331697463989, 0.9161273241043091], "val_loss": [2.043010950088501, 1.5253312587738037, 1.0627431869506836, 0.8745177388191223, 0.775834321975708, 0.7186909317970276, 0.6787779331207275, 0.644729495048523, 0.6162309646606445, 0.5932388305664062, 0.5800918936729431, 0.5622164011001587, 0.5569146275520325, 0.5374966859817505, 0.5359779596328735, 0.5163686275482178, 0.508709192276001, 0.5009159445762634, 0.4977757930755615, 0.4881284236907959, 0.4791243374347687, 0.4741629958152771, 0.473197877407074, 0.46143272519111633, 0.46400871872901917, 0.45024362206459045, 0.4482356905937195, 0.4484635889530182, 0.4381583631038666, 0.43592894077301025, 0.433126837015152, 0.42988061904907227, 0.42620036005973816, 0.423086553812027, 0.42079365253448486, 0.4191463887691498, 0.4141375422477722, 0.41328027844429016, 0.4083062410354614, 0.4025610089302063, 0.4038747251033783, 0.39870283007621765, 0.4051688313484192, 0.39892786741256714, 0.4004077911376953, 0.393636018037796, 0.3937359154224396, 0.3868481516838074, 0.3909635841846466, 0.3874034881591797, 0.3900182247161865, 0.38253283500671387, 0.3797246813774109, 0.38082805275917053, 0.3827741742134094, 0.37947046756744385, 0.37640613317489624, 0.3783702850341797, 0.37717363238334656, 0.37682878971099854, 0.3792259991168976, 0.3780269920825958, 0.37652072310447693, 0.3709099590778351, 0.3776542842388153, 0.3741617798805237, 0.3734557330608368, 0.37411585450172424], "val_accuracy": [0.5006666779518127, 0.6446666717529297, 0.6759999990463257, 0.6890000104904175, 0.7149999737739563, 0.7293333411216736, 0.7436666488647461, 0.7573333382606506, 0.7649999856948853, 0.7773333191871643, 0.7889999747276306, 0.7913333177566528, 0.7889999747276306, 0.8029999732971191, 0.8009999990463257, 0.8143333196640015, 0.8140000104904175, 0.8180000185966492, 0.8153333067893982, 0.8266666531562805, 0.8299999833106995, 0.8273333311080933, 0.8256666660308838, 0.8316666483879089, 0.8326666951179504, 0.8376666903495789, 0.8336666822433472, 0.8363333344459534, 0.843999981880188, 0.8429999947547913, 0.8443333506584167, 0.8456666469573975, 0.843666672706604, 0.8496666550636292, 0.8460000157356262, 0.8516666889190674, 0.8546666502952576, 0.8523333072662354, 0.8533333539962769, 0.859333336353302, 0.8569999933242798, 0.859666645526886, 0.856333315372467, 0.8610000014305115, 0.8576666712760925, 0.8643333315849304, 0.8653333187103271, 0.8650000095367432, 0.8633333444595337, 0.8656666874885559, 0.8610000014305115, 0.8696666955947876, 0.871666669845581, 0.8656666874885559, 0.8686666488647461, 0.8706666827201843, 0.8733333349227905, 0.871999979019165, 0.8763333559036255, 0.8736666440963745, 0.8709999918937683, 0.8723333477973938, 0.8773333430290222, 0.8766666650772095, 0.8743333220481873, 0.875, 0.8766666650772095, 0.8730000257492065]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 8, 3, 3], [0, 1, 0, 2], [39, 39], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0], [0, 9], [0], [1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 1, 0], [16, 99, 96, 99, 10, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 2, 0, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 47], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [77, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 32, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 2, 1, 1, 1, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, alpha)))", "other_info": {"loss": [2.303417444229126, 2.3025851249694824, 2.3025851249694824, 2.3025853633880615, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 2], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [97], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 3, 3, 4, 8, 1, 3, 1, 4, 5, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 7, 4, 3, 2, 2, 1, 1, 1, 18, 9, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 2, 0, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 3, 7, 3, 5, 7, 3, 8, 5, 4, 1, 4, 3, 3, 6, 1, 9, 4, 3, 2, 0, 0, 0, 7, 5, 7, 3, 2, 5, 4, 2], [3, 2, 0, 3, 2, 1, 5, 0, 0, 0, 4, 5, 1, 2, 4, 1, 0, 1, 4, 4, 3, 4, 5, 1], [97, 16, 21, 68, 95, 3], [0, 1], [0], [0], [60], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 8, 7], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 1, 6], [16, 99, 96, 99, 61, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 60, 36, 24, 6, 2, 1, 1, 1, 24, 12, 12, 6], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.square(beta), tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.square(tf.math.add(tf.math.multiply(tf.math.sqrt(grad), beta), tf.math.square(alpha))), tf.math.pow(tf.math.subtract(grad, tf.math.pow(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.multiply(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)), tf.math.negative(tf.math.negative(alpha)))), beta)), grad)), alpha)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.add(tf.math.square(tf.math.add(tf.math.multiply(alpha, grad), tf.math.add(grad, tf.math.square(tf.math.pow(grad, grad))))), tf.math.add(grad, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha)), tf.math.add(tf.math.sqrt(beta), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}]