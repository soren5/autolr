[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8774285912513733, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224471092224121, 1.8719912767410278, 1.392892599105835, 1.082674503326416, 0.9196232557296753, 0.8184207677841187, 0.7657420635223389, 0.7192550897598267, 0.671069860458374, 0.6554583311080933, 0.6330852508544922, 0.6044749021530151, 0.5731306672096252, 0.566804051399231, 0.5561562776565552, 0.5366157293319702, 0.5231515765190125, 0.514232873916626, 0.50346440076828, 0.4964093863964081, 0.4810097813606262, 0.4708891808986664, 0.46522289514541626, 0.4473213255405426, 0.43746620416641235, 0.42941775918006897, 0.43376290798187256, 0.42223313450813293, 0.4068085253238678, 0.40793704986572266, 0.39004045724868774, 0.3958593010902405, 0.38634368777275085, 0.3832891583442688, 0.37367022037506104, 0.3652940094470978, 0.3644692897796631, 0.3549381196498871, 0.35343849658966064, 0.34953773021698, 0.343513160943985, 0.33519959449768066, 0.3369024395942688, 0.33751437067985535, 0.32096028327941895, 0.32452234625816345, 0.3145146071910858, 0.31396716833114624, 0.3078911304473877, 0.30894967913627625, 0.3001355528831482, 0.29106441140174866, 0.2979634702205658, 0.2847161591053009, 0.28807923197746277, 0.28494390845298767, 0.2751897871494293, 0.27448222041130066, 0.2660207152366638, 0.2591118812561035, 0.2609066367149353, 0.26497283577919006], "accuracy": [0.2719587981700897, 0.48474442958831787, 0.5704662799835205, 0.627129852771759, 0.6732267737388611, 0.7046625018119812, 0.7236824631690979, 0.7372870445251465, 0.7598732113838196, 0.76106196641922, 0.7713643908500671, 0.7790252566337585, 0.7924976944923401, 0.7964601516723633, 0.800290584564209, 0.8035926818847656, 0.8088759779930115, 0.8183859586715698, 0.8226125836372375, 0.8182538747787476, 0.8290846943855286, 0.8318583965301514, 0.8334434032440186, 0.8405758738517761, 0.842028796672821, 0.8477083444595337, 0.8485008478164673, 0.8495575189590454, 0.8544445633888245, 0.8502179384231567, 0.8636903762817383, 0.8551049828529358, 0.8634262084960938, 0.8626337051391602, 0.8676528930664062, 0.8658037185668945, 0.8714832663536072, 0.8747853636741638, 0.873860776424408, 0.8746532797813416, 0.8775591254234314, 0.8776912093162537, 0.8791441321372986, 0.8812574148178101, 0.8844274282455444, 0.8831065893173218, 0.8886540532112122, 0.8873332738876343, 0.8906353116035461, 0.8879936337471008, 0.8951261639595032, 0.8920882344245911, 0.89552241563797, 0.896446943283081, 0.8945978283882141, 0.9002773761749268, 0.898428201675415, 0.9049002528190613, 0.8994848728179932, 0.9074098467826843, 0.9045040011405945, 0.9019944667816162], "val_loss": [2.037929058074951, 1.5084259510040283, 1.0267930030822754, 0.8192124962806702, 0.7406920790672302, 0.6817162036895752, 0.6445317268371582, 0.6153426766395569, 0.5916168093681335, 0.5670245885848999, 0.5539756417274475, 0.534339427947998, 0.5242795348167419, 0.5173749923706055, 0.5069122910499573, 0.49601465463638306, 0.4813956618309021, 0.4746057987213135, 0.47366034984588623, 0.46990910172462463, 0.4575881361961365, 0.4473074972629547, 0.4439048767089844, 0.43652456998825073, 0.4342786371707916, 0.4301052689552307, 0.4298461079597473, 0.42341893911361694, 0.4204467833042145, 0.4157106876373291, 0.4130615293979645, 0.4137704372406006, 0.4066324830055237, 0.4046173393726349, 0.4004724621772766, 0.40239691734313965, 0.3915439546108246, 0.3991140127182007, 0.39500123262405396, 0.39171525835990906, 0.3949354588985443, 0.390479177236557, 0.3862020969390869, 0.38696086406707764, 0.38034749031066895, 0.37655001878738403, 0.37807589769363403, 0.37973475456237793, 0.3821481168270111, 0.3764892518520355, 0.3737926781177521, 0.3786062002182007, 0.3714762032032013, 0.37716975808143616, 0.383768767118454, 0.3652239143848419, 0.3704872131347656, 0.3649051785469055, 0.36743858456611633, 0.3639569580554962, 0.36869826912879944, 0.3674834668636322], "val_accuracy": [0.5366666913032532, 0.6663333177566528, 0.6936666369438171, 0.7166666388511658, 0.7409999966621399, 0.753333330154419, 0.7689999938011169, 0.7816666960716248, 0.7863333225250244, 0.7960000038146973, 0.8073333501815796, 0.8063333630561829, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.824999988079071, 0.8306666612625122, 0.8349999785423279, 0.8326666951179504, 0.8353333473205566, 0.8389999866485596, 0.8403333425521851, 0.843999981880188, 0.8463333249092102, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8533333539962769, 0.8506666421890259, 0.8583333492279053, 0.8553333282470703, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.8613333106040955, 0.8619999885559082, 0.8613333106040955, 0.8640000224113464, 0.8643333315849304, 0.8650000095367432, 0.859000027179718, 0.8636666536331177, 0.8669999837875366, 0.8666666746139526, 0.8693333268165588, 0.8669999837875366, 0.8683333396911621, 0.8666666746139526, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8683333396911621, 0.8709999918937683, 0.8693333268165588, 0.8730000257492065, 0.8693333268165588, 0.8776666522026062, 0.8736666440963745, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8713333606719971]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8539999723434448, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2207884788513184, 1.8510323762893677, 1.372353196144104, 1.0746829509735107, 0.9453611373901367, 0.8269769549369812, 0.7675721049308777, 0.7226478457450867, 0.6822101473808289, 0.6613330245018005, 0.6308059692382812, 0.608054518699646, 0.580062747001648, 0.5688640475273132, 0.5486040711402893, 0.5291555523872375, 0.5183072686195374, 0.5066930055618286, 0.5019444227218628, 0.48291856050491333, 0.4737602472305298, 0.46271803975105286, 0.45978614687919617, 0.453083336353302, 0.4465371370315552, 0.4297201335430145, 0.42641115188598633, 0.4250011444091797, 0.41824594140052795, 0.40721139311790466, 0.4070582389831543, 0.3908470869064331], "accuracy": [0.2743362784385681, 0.49927353858947754, 0.5712587237358093, 0.6209219098091125, 0.6601505875587463, 0.7116629481315613, 0.7264562249183655, 0.7338528633117676, 0.7518161535263062, 0.7604015469551086, 0.765949010848999, 0.7759873270988464, 0.7893276810646057, 0.7971205711364746, 0.7984414100646973, 0.8090080618858337, 0.8136309385299683, 0.8149517774581909, 0.8170651197433472, 0.8277638554573059, 0.828820526599884, 0.8348963260650635, 0.8370096683502197, 0.8384625315666199, 0.8401796221733093, 0.8428213000297546, 0.8498216867446899, 0.8479725122451782, 0.8487650156021118, 0.8521991968154907, 0.8569541573524475, 0.8651432991027832], "val_loss": [2.033316135406494, 1.5030183792114258, 1.0415822267532349, 0.8492291569709778, 0.7702182531356812, 0.708646833896637, 0.6629046201705933, 0.6391746401786804, 0.6089556217193604, 0.5897261500358582, 0.5742987394332886, 0.5583778619766235, 0.5403731465339661, 0.528026282787323, 0.5208561420440674, 0.5086089968681335, 0.5037424564361572, 0.4983902871608734, 0.48552650213241577, 0.4822545051574707, 0.4747231900691986, 0.46824002265930176, 0.46814054250717163, 0.46333178877830505, 0.4543435871601105, 0.4580704867839813, 0.44227978587150574, 0.4461783170700073, 0.43848079442977905, 0.4384981393814087, 0.43815553188323975, 0.42880550026893616], "val_accuracy": [0.5463333129882812, 0.6496666669845581, 0.6753333210945129, 0.6983333230018616, 0.7279999852180481, 0.7443333268165588, 0.7630000114440918, 0.762666642665863, 0.7713333368301392, 0.7833333611488342, 0.7943333387374878, 0.7946666479110718, 0.8066666722297668, 0.8076666593551636, 0.8103333115577698, 0.812333345413208, 0.8159999847412109, 0.8213333487510681, 0.8293333053588867, 0.8253333568572998, 0.8286666870117188, 0.8299999833106995, 0.8333333134651184, 0.8316666483879089, 0.8399999737739563, 0.8360000252723694, 0.8486666679382324, 0.8420000076293945, 0.8456666469573975, 0.8450000286102295, 0.843999981880188, 0.8476666808128357]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [6, 2, 3, 0, 3, 3, 7, 3, 6, 3, 7, 9, 4, 1, 1, 6, 8, 5, 4, 7, 0, 7, 1, 9, 4, 0, 7], [0, 0, 0, 2, 2, 1, 2, 1, 0, 3, 2, 3, 0, 2, 3, 0, 0, 1, 0], [39, 39, 35, 63, 8, 76, 89, 84, 92, 8], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 7, 9, 3, 8, 9, 7], [0, 2, 0, 3, 2], [16, 16, 70, 84], [0, 1], [0], [0], [99], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 2, 4, 8, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 90, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 46, 27, 19, 10, 17, 12, 5, 4, 2, 1, 1, 1, 10, 5, 5, 4], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(grad, tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.sqrt(grad)), alpha), tf.math.square(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(tf.math.negative(grad), grad), grad))), tf.math.add(tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), sigma))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3039050102233887, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 0, 7, 9, 2, 3], [0, 1, 0, 2, 0, 1], [39, 82, 60, 18], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 7, 1, 7, 4], [0, 2, 0, 3, 5, 1, 1, 0], [16, 16, 31], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 9, 8, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 2, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 10, 6, 4, 18, 10, 8, 3, 2, 1, 1, 1, 21, 12, 9, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(alpha), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(grad, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.add(grad, alpha)))), tf.math.pow(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.pow(alpha, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [6, 2, 3, 0, 4], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 2, 4, 7], [2, 2, 0, 3, 1, 4, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 0, 8, 1, 5, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 15, 8, 7, 1, 2, 1, 1, 1, 9, 5, 4, 3], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(beta, tf.math.add(beta, tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha))))), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [3.1057422161102295, 4.843756675720215, 5.969568729400635, 6.964094161987305, 7.772315502166748, 8.447715759277344], "accuracy": [0.09509972482919693, 0.09879804402589798, 0.10196803510189056, 0.10408136248588562, 0.09932637959718704, 0.09576013684272766], "val_loss": [3.4567298889160156, 4.4594902992248535, 5.2247395515441895, 5.845024108886719, 6.3690876960754395, 6.824491024017334], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [5, 2, 3, 0, 3, 5], [2, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 3, 0, 3, 1, 2, 0], [23, 99, 96, 99, 61, 1]], "fitness": -0.09000000357627869, "mapping_values": [1, 7, 4, 3, 2, 10, 6, 4, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(beta), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, sigma)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [2.309539556503296, 2.3112847805023193, 2.3107175827026367, 2.311307191848755, 2.3108112812042236, 2.310656785964966], "accuracy": [0.09206181764602661, 0.09166556596755981, 0.09034473448991776, 0.08677849918603897, 0.0952318087220192, 0.09206181764602661], "val_loss": [2.30802321434021, 2.30802321434021, 2.30802321434021, 2.30802321434021, 2.30802321434021, 2.30802321434021], "val_accuracy": [0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918]}}]