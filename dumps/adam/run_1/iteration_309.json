[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8811428546905518, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224590539932251, 1.8638859987258911, 1.3978285789489746, 1.1051115989685059, 0.9351550340652466, 0.8531766533851624, 0.7817806601524353, 0.7276771664619446, 0.6996701955795288, 0.6728870868682861, 0.6396504640579224, 0.6114020943641663, 0.5899173617362976, 0.5777763724327087, 0.5623325705528259, 0.5536971092224121, 0.5288746953010559, 0.5210357308387756, 0.5145369172096252, 0.5086684823036194, 0.49337905645370483, 0.48058366775512695, 0.4733416736125946, 0.4671367108821869, 0.4560546278953552, 0.4489839971065521, 0.43767276406288147, 0.43080347776412964, 0.42394670844078064, 0.4119667112827301, 0.4154728055000305, 0.4051834046840668, 0.4020461440086365, 0.3948018252849579, 0.39558297395706177, 0.38355568051338196, 0.38200199604034424, 0.3754238486289978, 0.3634035289287567, 0.3588741719722748, 0.35425013303756714, 0.35747748613357544, 0.34530067443847656, 0.34502410888671875, 0.3350977897644043, 0.33896344900131226, 0.33060407638549805, 0.3261704444885254, 0.32500237226486206, 0.31737399101257324, 0.309316486120224, 0.31210988759994507, 0.29956573247909546, 0.2987413704395294, 0.2934395670890808, 0.2916269898414612, 0.29190024733543396, 0.288055956363678, 0.27709802985191345, 0.27752116322517395, 0.2706053853034973, 0.26719552278518677, 0.2586905062198639, 0.25517407059669495, 0.25299152731895447, 0.24685099720954895, 0.2489650994539261, 0.2379595935344696, 0.2467358112335205, 0.24182036519050598, 0.23832111060619354, 0.23622792959213257, 0.22920526564121246, 0.22353021800518036, 0.21662341058254242, 0.2148113250732422, 0.21315842866897583, 0.20856662094593048, 0.20420268177986145, 0.20272819697856903, 0.20168952643871307, 0.19936147332191467, 0.2022467404603958, 0.19393852353096008, 0.1888069212436676, 0.1853010207414627, 0.18326862156391144, 0.18725469708442688, 0.1802607625722885], "accuracy": [0.27763834595680237, 0.49993395805358887, 0.5666358470916748, 0.6131290197372437, 0.6716417670249939, 0.689869225025177, 0.7165499925613403, 0.7357020378112793, 0.7436270117759705, 0.754589855670929, 0.7660810947418213, 0.7766477465629578, 0.7849689722061157, 0.7905164361000061, 0.7992339134216309, 0.8009510040283203, 0.809140145778656, 0.8127063512802124, 0.81548011302948, 0.8162726163864136, 0.8249900937080383, 0.8274996876716614, 0.8337075710296631, 0.8334434032440186, 0.8363492488861084, 0.8409721255302429, 0.8432175517082214, 0.8521991968154907, 0.8479725122451782, 0.8537842035293579, 0.8499537706375122, 0.8560295701026917, 0.8561616539955139, 0.8597279191017151, 0.8573504090309143, 0.8615770936012268, 0.8631620407104492, 0.868049144744873, 0.8689737319946289, 0.8671245574951172, 0.8722757697105408, 0.8726720213890076, 0.8758420348167419, 0.8751816153526306, 0.878879964351654, 0.8780874609947205, 0.8821820020675659, 0.8772949576377869, 0.8837670087814331, 0.8858803510665894, 0.887201189994812, 0.8848236799240112, 0.8893144726753235, 0.8919561505317688, 0.8956544995307922, 0.8951261639595032, 0.8894465565681458, 0.8980319499969482, 0.900409460067749, 0.8965790271759033, 0.9039757251739502, 0.9037115573883057, 0.9055606722831726, 0.9076740145683289, 0.908730685710907, 0.9085986018180847, 0.9097873568534851, 0.9159952402114868, 0.9075419306755066, 0.913089394569397, 0.9149385690689087, 0.913089394569397, 0.91559898853302, 0.9194294214248657, 0.9225993752479553, 0.9231277108192444, 0.9233918786048889, 0.9260335564613342, 0.9299960136413574, 0.9292035102844238, 0.9292035102844238, 0.9260335564613342, 0.9265618920326233, 0.9315810203552246, 0.9340906143188477, 0.9313168525695801, 0.935279369354248, 0.9315810203552246, 0.9331660270690918], "val_loss": [2.0364224910736084, 1.5119632482528687, 1.0428588390350342, 0.8328427672386169, 0.7376822829246521, 0.6838186979293823, 0.6384417414665222, 0.60288405418396, 0.5764493942260742, 0.5563174486160278, 0.53635573387146, 0.5184746384620667, 0.5070334672927856, 0.4945278465747833, 0.4811205267906189, 0.47261738777160645, 0.46519893407821655, 0.45602861046791077, 0.4515576660633087, 0.44376710057258606, 0.4394070506095886, 0.42795220017433167, 0.4247489273548126, 0.42230477929115295, 0.416422039270401, 0.41304606199264526, 0.405069500207901, 0.40248534083366394, 0.3957495093345642, 0.3932521939277649, 0.3917439877986908, 0.3855334520339966, 0.3846903443336487, 0.38456273078918457, 0.3777863085269928, 0.38091352581977844, 0.3777937889099121, 0.374453604221344, 0.3721783757209778, 0.36629825830459595, 0.3647341728210449, 0.36119210720062256, 0.36700910329818726, 0.36272087693214417, 0.3612198829650879, 0.3656446933746338, 0.3623223900794983, 0.35467955470085144, 0.35379013419151306, 0.3616761565208435, 0.35364094376564026, 0.3468440771102905, 0.35026565194129944, 0.3501940071582794, 0.3545147180557251, 0.3513091504573822, 0.34877344965934753, 0.3410007655620575, 0.3446265459060669, 0.3410213887691498, 0.34085819125175476, 0.33986103534698486, 0.33731886744499207, 0.343218594789505, 0.33527904748916626, 0.33798375725746155, 0.33526405692100525, 0.33732956647872925, 0.3345458209514618, 0.34458380937576294, 0.336759477853775, 0.3364392817020416, 0.3378850817680359, 0.3369640111923218, 0.33935683965682983, 0.3384944200515747, 0.33679357171058655, 0.3375064432621002, 0.3360874056816101, 0.3356230556964874, 0.34466853737831116, 0.33730509877204895, 0.3359909951686859, 0.33959439396858215, 0.3368707001209259, 0.3371012210845947, 0.3451395332813263, 0.33246737718582153, 0.33857905864715576], "val_accuracy": [0.531000018119812, 0.656000018119812, 0.6819999814033508, 0.7106666564941406, 0.7306666374206543, 0.7516666650772095, 0.7699999809265137, 0.7799999713897705, 0.7906666398048401, 0.8006666898727417, 0.8003333210945129, 0.8106666803359985, 0.8169999718666077, 0.8146666884422302, 0.8266666531562805, 0.8276666402816772, 0.8293333053588867, 0.8349999785423279, 0.8373333215713501, 0.8393333554267883, 0.8423333168029785, 0.8493333458900452, 0.8450000286102295, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8556666374206543, 0.8523333072662354, 0.8603333234786987, 0.8566666841506958, 0.8586666584014893, 0.8610000014305115, 0.8613333106040955, 0.8613333106040955, 0.8643333315849304, 0.859333336353302, 0.8629999756813049, 0.8656666874885559, 0.8636666536331177, 0.8669999837875366, 0.8683333396911621, 0.8656666874885559, 0.8656666874885559, 0.8700000047683716, 0.8679999709129333, 0.8683333396911621, 0.8653333187103271, 0.8709999918937683, 0.8723333477973938, 0.8690000176429749, 0.8733333349227905, 0.8740000128746033, 0.8773333430290222, 0.8740000128746033, 0.8743333220481873, 0.8733333349227905, 0.8759999871253967, 0.8786666393280029, 0.875, 0.8763333559036255, 0.878333330154419, 0.8786666393280029, 0.8823333382606506, 0.8803333044052124, 0.8833333253860474, 0.8809999823570251, 0.8836666941642761, 0.8809999823570251, 0.8840000033378601, 0.8796666860580444, 0.8773333430290222, 0.8830000162124634, 0.8830000162124634, 0.8863333463668823, 0.8826666474342346, 0.8790000081062317, 0.8849999904632568, 0.8866666555404663, 0.8846666812896729, 0.8826666474342346, 0.8843333125114441, 0.8856666684150696, 0.8870000243186951, 0.8883333206176758, 0.8853333592414856, 0.8853333592414856, 0.8866666555404663, 0.887666642665863, 0.8880000114440918]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8654285669326782, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222778558731079, 1.869832992553711, 1.396490454673767, 1.0949363708496094, 0.9477588534355164, 0.8428283929824829, 0.7728177905082703, 0.7158236503601074, 0.6995273232460022, 0.6632370948791504, 0.6375292539596558, 0.6081721782684326, 0.5923015475273132, 0.5787093639373779, 0.5551579594612122, 0.5363332033157349, 0.5371829867362976, 0.5215137600898743, 0.5021668672561646, 0.4978363811969757, 0.47954583168029785, 0.47454342246055603, 0.46546852588653564, 0.45185941457748413, 0.4369499683380127, 0.43459954857826233, 0.4261462986469269, 0.4255109429359436, 0.40991100668907166, 0.40704894065856934, 0.40767747163772583, 0.40293803811073303, 0.38727596402168274, 0.3855431079864502, 0.37846702337265015, 0.3759053647518158, 0.3753858208656311, 0.3580056428909302, 0.35533690452575684, 0.35174015164375305, 0.3448586165904999, 0.34732288122177124, 0.346926212310791, 0.3333591818809509, 0.3263590931892395, 0.32046014070510864, 0.3195347785949707, 0.31463590264320374, 0.31781235337257385, 0.3124600052833557], "accuracy": [0.26799631118774414, 0.4904239773750305, 0.5614846348762512, 0.6189407110214233, 0.6559239029884338, 0.6972658634185791, 0.7190595865249634, 0.7367587089538574, 0.7449478507041931, 0.7519482374191284, 0.7687227725982666, 0.7758552432060242, 0.7795535326004028, 0.7884030938148499, 0.8006868362426758, 0.8024039268493652, 0.8035926818847656, 0.8142913579940796, 0.8173292875289917, 0.8201030492782593, 0.8265751004219055, 0.8313300609588623, 0.8314621448516846, 0.8383304476737976, 0.8401796221733093, 0.8417646288871765, 0.8506141901016235, 0.8457271456718445, 0.8585391640663147, 0.8553691506385803, 0.8539162874221802, 0.8573504090309143, 0.8622375130653381, 0.8661999702453613, 0.8654074668884277, 0.8663320541381836, 0.8693699836730957, 0.8745211958885193, 0.8698983192443848, 0.872407853603363, 0.8747853636741638, 0.8772949576377869, 0.8765024542808533, 0.8794082403182983, 0.8817857503890991, 0.8858803510665894, 0.8857482671737671, 0.887201189994812, 0.8821820020675659, 0.8870691061019897], "val_loss": [2.036165952682495, 1.5146559476852417, 1.0447190999984741, 0.839093029499054, 0.7527413964271545, 0.6984036564826965, 0.6532452702522278, 0.6221956014633179, 0.6043985486030579, 0.5757985711097717, 0.5580100417137146, 0.5407488346099854, 0.5279208421707153, 0.5206361413002014, 0.5078451633453369, 0.4925646185874939, 0.4867106080055237, 0.4774983823299408, 0.4668494760990143, 0.45592692494392395, 0.4522170424461365, 0.4457758069038391, 0.44019949436187744, 0.4383057951927185, 0.4306527078151703, 0.4211018979549408, 0.42056894302368164, 0.41161587834358215, 0.4102458953857422, 0.4081004559993744, 0.40254876017570496, 0.4054412841796875, 0.39452654123306274, 0.39009130001068115, 0.3942932188510895, 0.3846428096294403, 0.382560133934021, 0.38435763120651245, 0.3820638060569763, 0.3794378936290741, 0.38801342248916626, 0.3768714666366577, 0.36790284514427185, 0.36995381116867065, 0.3652312159538269, 0.3724133372306824, 0.37112918496131897, 0.36540722846984863, 0.35889559984207153, 0.3597458600997925], "val_accuracy": [0.5400000214576721, 0.6600000262260437, 0.6726666688919067, 0.7039999961853027, 0.7246666550636292, 0.7329999804496765, 0.750333309173584, 0.7683333158493042, 0.7716666460037231, 0.7733333110809326, 0.7846666574478149, 0.7919999957084656, 0.800000011920929, 0.8050000071525574, 0.800000011920929, 0.8119999766349792, 0.8169999718666077, 0.8196666836738586, 0.8213333487510681, 0.8293333053588867, 0.831333339214325, 0.8343333601951599, 0.8370000123977661, 0.8376666903495789, 0.8376666903495789, 0.8476666808128357, 0.8423333168029785, 0.8526666760444641, 0.8476666808128357, 0.8463333249092102, 0.8513333201408386, 0.8546666502952576, 0.8560000061988831, 0.859333336353302, 0.8556666374206543, 0.859000027179718, 0.859000027179718, 0.859333336353302, 0.8613333106040955, 0.862666666507721, 0.8526666760444641, 0.8640000224113464, 0.8666666746139526, 0.8633333444595337, 0.8693333268165588, 0.862666666507721, 0.862333357334137, 0.8686666488647461, 0.8669999837875366, 0.8676666617393494]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 3, 3], [0, 2, 0, 2], [42, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 1, 0, 3, 5], [1, 2, 0, 3], [16, 64], [0, 0, 0, 1, 1], [0, 5, 1], [4, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [5, 3, 3, 6, 8, 1, 1, 1, 4, 2, 2, 5, 3, 6, 6, 6, 1, 5, 3, 5], [0, 0, 0, 3, 0, 0, 3, 2, 2, 0, 7, 1, 6, 3, 7, 3], [16, 99, 90, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 2, 2, 1, 1, 0, 1, 0, 5, 3, 2, 0, 36, 20, 16, 6], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.subtract(grad, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.subtract(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.multiply(sigma, beta))))), beta))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.square(tf.math.multiply(grad, alpha)), tf.math.square(grad))), sigma), grad))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 1, 1, 4, 1, 4, 2, 8, 3, 5, 4, 8, 1, 3, 9, 8, 6, 6, 9, 7, 9, 1, 0, 0, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 4, 1, 4, 0, 1, 2, 7], [16, 99, 96, 99, 61, 1, 68, 38, 66, 49]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 45, 28, 17, 10], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.math.add(tf.math.sqrt(sigma), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.math.pow(sigma, alpha)), tf.math.sqrt(tf.math.subtract(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(grad, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.subtract(tf.math.negative(grad), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.pow(alpha, beta))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [1, 2, 3, 0, 3, 2, 7, 1, 5, 3], [0, 1, 0, 1, 3, 2, 3, 3, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 8, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 3, 8, 1, 4, 1, 4, 2, 8, 9], [0, 3, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 10, 1]], "fitness": -0.09542857110500336, "mapping_values": [1, 19, 10, 9, 2, 8, 5, 3, 2, 2, 1, 1, 1, 21, 12, 9, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(tf.math.add(grad, grad), tf.math.subtract(grad, tf.math.square(tf.math.multiply(grad, grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))), alpha), beta)", "other_info": {"loss": [2.3099212646484375, 2.3107101917266846, 2.3094332218170166, 2.3110971450805664, 2.31109619140625, 2.3095643520355225, 2.309727191925049, 2.3109629154205322, 2.311354875564575, 2.311613082885742], "accuracy": [0.0952318087220192, 0.0952318087220192, 0.08796724677085876, 0.0874389111995697, 0.08915598690509796, 0.0940430611371994, 0.0882314071059227, 0.09272222965955734, 0.0870426595211029, 0.08902391046285629], "val_loss": [2.30900502204895, 2.3090507984161377, 2.3091108798980713, 2.309182643890381, 2.3092644214630127, 2.3093554973602295, 2.3094546794891357, 2.3095622062683105, 2.3096771240234375, 2.3097987174987793], "val_accuracy": [0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.08966666460037231]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 1, 2], [39, 39], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 2, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 4, 2, 8], [2, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 25, 96, 99, 61, 1]], "fitness": -0.09142857044935226, "mapping_values": [1, 9, 5, 4, 0, 1, 0, 1, 1, 2, 1, 1, 1, 11, 6, 5, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, grad))", "other_info": {"loss": [2.3095006942749023, 2.3095834255218506, 2.309811592102051, 2.3090620040893555, 2.3107409477233887, 2.3101437091827393], "accuracy": [0.09285431355237961, 0.09457138925790787, 0.09245806187391281, 0.08981640636920929, 0.09179764986038208, 0.09549596905708313], "val_loss": [2.3089561462402344, 2.308947801589966, 2.3089399337768555, 2.308932065963745, 2.3089234828948975, 2.308915138244629], "val_accuracy": [0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024]}}]