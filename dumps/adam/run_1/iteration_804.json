[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8868571519851685, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222154140472412, 1.859197735786438, 1.3886425495147705, 1.0942152738571167, 0.9472610950469971, 0.8421790599822998, 0.785043478012085, 0.7365858554840088, 0.6991368532180786, 0.6711625456809998, 0.6421544551849365, 0.616988480091095, 0.5891450047492981, 0.5784561634063721, 0.5666466355323792, 0.5408433675765991, 0.5275765061378479, 0.5185150504112244, 0.5135302543640137, 0.4996265769004822, 0.4883091151714325, 0.4786703586578369, 0.46795788407325745, 0.4565187096595764, 0.4521287977695465, 0.44850486516952515, 0.43140366673469543, 0.4286278486251831, 0.4160599708557129, 0.40969768166542053, 0.4078174829483032, 0.4077450931072235, 0.3962053656578064, 0.3874478042125702, 0.3814776539802551, 0.37641963362693787, 0.36877620220184326, 0.36491847038269043, 0.36217331886291504, 0.3575732409954071, 0.35670387744903564, 0.34235450625419617, 0.3445626497268677, 0.3372246325016022, 0.3359149098396301, 0.32897427678108215, 0.3171994388103485, 0.31594499945640564, 0.3125719130039215, 0.3067867159843445, 0.3022006154060364, 0.29946571588516235, 0.2935422956943512, 0.29266270995140076, 0.2913725972175598, 0.28443366289138794, 0.28473037481307983, 0.2726939022541046], "accuracy": [0.2735437750816345, 0.4904239773750305, 0.5555408596992493, 0.6178840398788452, 0.6641130447387695, 0.7017567157745361, 0.713908314704895, 0.735041618347168, 0.7427024245262146, 0.7543256878852844, 0.7617223858833313, 0.7740060687065125, 0.7889314293861389, 0.7885351777076721, 0.7961959838867188, 0.8031964302062988, 0.8043851256370544, 0.8161405324935913, 0.8121780753135681, 0.817461371421814, 0.8253863453865051, 0.8276317715644836, 0.8360850811004639, 0.8370096683502197, 0.8387266993522644, 0.8408400416374207, 0.8465195894241333, 0.8474441766738892, 0.8514066934585571, 0.8540483713150024, 0.8512746095657349, 0.8552370667457581, 0.8580108284950256, 0.8595958352088928, 0.8659358024597168, 0.8656716346740723, 0.8706908226013184, 0.8732003569602966, 0.870030403137207, 0.8737286925315857, 0.8759741187095642, 0.8780874609947205, 0.8739928603172302, 0.8750495314598083, 0.8768987059593201, 0.8805969953536987, 0.8836349248886108, 0.8889182209968567, 0.8919561505317688, 0.887201189994812, 0.8942015767097473, 0.8926165699958801, 0.8927486538887024, 0.8947299122810364, 0.896446943283081, 0.9013340473175049, 0.8949940800666809, 0.901862382888794], "val_loss": [2.034653663635254, 1.5119132995605469, 1.0521267652511597, 0.8441394567489624, 0.7562442421913147, 0.6965953707695007, 0.650301456451416, 0.6196342706680298, 0.5882320404052734, 0.5681450963020325, 0.5468230247497559, 0.5336557030677795, 0.5143576264381409, 0.5023654103279114, 0.4943074882030487, 0.4793010354042053, 0.47493281960487366, 0.46272075176239014, 0.45892831683158875, 0.4573541581630707, 0.444460928440094, 0.4394555687904358, 0.43474116921424866, 0.4347025454044342, 0.4249707758426666, 0.420932412147522, 0.41770264506340027, 0.4096238911151886, 0.40386274456977844, 0.40828609466552734, 0.3989697992801666, 0.3986034393310547, 0.39560550451278687, 0.3956313133239746, 0.3914906084537506, 0.38913363218307495, 0.3851446807384491, 0.3827963173389435, 0.380838006734848, 0.37676432728767395, 0.3827856779098511, 0.37158650159835815, 0.37598717212677, 0.3692159354686737, 0.36991506814956665, 0.3662453889846802, 0.36762621998786926, 0.36403775215148926, 0.3626459240913391, 0.36377111077308655, 0.3616364598274231, 0.357797771692276, 0.35540148615837097, 0.3593367636203766, 0.35848695039749146, 0.35831132531166077, 0.355889230966568, 0.35637328028678894], "val_accuracy": [0.5426666736602783, 0.6463333368301392, 0.6673333048820496, 0.7006666660308838, 0.7263333201408386, 0.7476666569709778, 0.7593333125114441, 0.7636666893959045, 0.7820000052452087, 0.7836666703224182, 0.793666660785675, 0.7990000247955322, 0.8090000152587891, 0.8153333067893982, 0.8216666579246521, 0.8259999752044678, 0.828000009059906, 0.8346666693687439, 0.8349999785423279, 0.8309999704360962, 0.8399999737739563, 0.8443333506584167, 0.8393333554267883, 0.8453333377838135, 0.8476666808128357, 0.8463333249092102, 0.8463333249092102, 0.8550000190734863, 0.8576666712760925, 0.8550000190734863, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8573333621025085, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8616666793823242, 0.8656666874885559, 0.8679999709129333, 0.862333357334137, 0.8676666617393494, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.8723333477973938, 0.8653333187103271, 0.8679999709129333, 0.8726666569709778, 0.8713333606719971, 0.8709999918937683, 0.8709999918937683, 0.8756666779518127, 0.8713333606719971, 0.871666669845581, 0.8736666440963745, 0.8713333606719971, 0.8733333349227905]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8700000047683716, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223510503768921, 1.874604344367981, 1.4012426137924194, 1.0975826978683472, 0.9448164105415344, 0.8488380312919617, 0.7807859778404236, 0.7336084842681885, 0.6953462958335876, 0.6545656323432922, 0.6314088106155396, 0.6047723293304443, 0.5885016322135925, 0.5750061273574829, 0.5580514669418335, 0.5386305451393127, 0.5288141965866089, 0.5176396369934082, 0.5049582123756409, 0.4962143003940582, 0.4838889539241791, 0.471649706363678, 0.4679501950740814, 0.45789408683776855, 0.4417603611946106, 0.4439399838447571, 0.42495453357696533, 0.4243150055408478, 0.41257762908935547, 0.409653902053833, 0.40979886054992676, 0.39776283502578735, 0.3988300859928131, 0.3906135559082031, 0.3767368197441101, 0.36626747250556946, 0.3642207682132721, 0.3574369549751282, 0.35749930143356323, 0.3499676585197449, 0.3496350646018982, 0.3368671238422394, 0.34294620156288147, 0.33191609382629395, 0.31818923354148865, 0.32373714447021484, 0.31606683135032654, 0.30985262989997864, 0.30388933420181274, 0.29926106333732605, 0.29665040969848633, 0.294786661863327, 0.2950643301010132, 0.28599104285240173, 0.2774723768234253, 0.2784203290939331, 0.2681743800640106, 0.266055166721344, 0.25982460379600525], "accuracy": [0.27565711736679077, 0.4904239773750305, 0.5649187564849854, 0.6185444593429565, 0.6634526252746582, 0.6936996579170227, 0.7168141603469849, 0.7327961921691895, 0.7417778372764587, 0.76106196641922, 0.7711002230644226, 0.7814027070999146, 0.7849689722061157, 0.7885351777076721, 0.8013472557067871, 0.8053097128868103, 0.8094043135643005, 0.8088759779930115, 0.8191784620285034, 0.8215559124946594, 0.8261788487434387, 0.8301413059234619, 0.8333113193511963, 0.837537944316864, 0.8409721255302429, 0.837537944316864, 0.8486329317092896, 0.8470479249954224, 0.8515387773513794, 0.8516708612442017, 0.8541803956031799, 0.8536521196365356, 0.8552370667457581, 0.8643507957458496, 0.8636903762817383, 0.8671245574951172, 0.8697662353515625, 0.8691058158874512, 0.8688416481018066, 0.8735966086387634, 0.8713511824607849, 0.8751816153526306, 0.874389111995697, 0.8762382864952087, 0.889050304889679, 0.8820499181747437, 0.8865407705307007, 0.8869370222091675, 0.8926165699958801, 0.8920882344245911, 0.8924844861030579, 0.8919561505317688, 0.8919561505317688, 0.8951261639595032, 0.8992207050323486, 0.9001452922821045, 0.9002773761749268, 0.9033153057098389, 0.9052965044975281], "val_loss": [2.040198564529419, 1.5152662992477417, 1.0438878536224365, 0.8360546827316284, 0.7460946440696716, 0.6951420307159424, 0.6473031640052795, 0.617559015750885, 0.5955509543418884, 0.5676340460777283, 0.5500778555870056, 0.5329473614692688, 0.518896222114563, 0.5149747133255005, 0.4999672472476959, 0.4872168302536011, 0.48573851585388184, 0.47115465998649597, 0.474967896938324, 0.45936617255210876, 0.4521118104457855, 0.44551053643226624, 0.4433133006095886, 0.4342515468597412, 0.4386172592639923, 0.4228193461894989, 0.42326465249061584, 0.4137336313724518, 0.4097168445587158, 0.40902945399284363, 0.41396212577819824, 0.40051504969596863, 0.39662694931030273, 0.3934659957885742, 0.3920552134513855, 0.38915926218032837, 0.38922119140625, 0.3899519741535187, 0.38476425409317017, 0.38184207677841187, 0.379781037569046, 0.37699654698371887, 0.3771226704120636, 0.370344877243042, 0.3722737729549408, 0.36810094118118286, 0.369859904050827, 0.3655681610107422, 0.3719314634799957, 0.36524727940559387, 0.36657223105430603, 0.36088457703590393, 0.3601706922054291, 0.357673704624176, 0.35914120078086853, 0.3659806251525879, 0.36048948764801025, 0.3555946350097656, 0.35958805680274963], "val_accuracy": [0.5263333320617676, 0.6513333320617676, 0.6776666641235352, 0.7013333439826965, 0.7293333411216736, 0.7490000128746033, 0.7536666393280029, 0.7689999938011169, 0.7776666879653931, 0.7900000214576721, 0.79666668176651, 0.8100000023841858, 0.8163333535194397, 0.8116666674613953, 0.8180000185966492, 0.8259999752044678, 0.8270000219345093, 0.8306666612625122, 0.8276666402816772, 0.8323333263397217, 0.8360000252723694, 0.8463333249092102, 0.846666693687439, 0.8493333458900452, 0.8410000205039978, 0.8516666889190674, 0.8523333072662354, 0.859333336353302, 0.859333336353302, 0.8579999804496765, 0.8539999723434448, 0.8586666584014893, 0.8606666922569275, 0.8656666874885559, 0.862333357334137, 0.8666666746139526, 0.8640000224113464, 0.8633333444595337, 0.8690000176429749, 0.8676666617393494, 0.8656666874885559, 0.8683333396911621, 0.8706666827201843, 0.8703333139419556, 0.871999979019165, 0.8726666569709778, 0.8703333139419556, 0.8733333349227905, 0.8709999918937683, 0.8763333559036255, 0.8709999918937683, 0.875, 0.8740000128746033, 0.878333330154419, 0.8763333559036255, 0.8723333477973938, 0.875, 0.8769999742507935, 0.875333309173584]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 2, 2], [39, 20], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [56, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [6, 1, 3, 6, 8, 1, 4, 3, 4, 2, 8, 4, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4, 6], [78, 99, 3, 99, 61, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 6, 3, 3, 2, 2, 1, 1, 1, 24, 13, 11, 5], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, alpha))))), beta)), tf.math.square(grad)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 5, 3, 0, 3], [0, 1, 2, 2], [6, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [2, 79], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 4, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 6, 3, 3, 2, 2, 1, 1, 0, 21, 11, 10, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), beta), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.sqrt(grad))), tf.math.subtract(tf.math.pow(sigma, tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), alpha)), tf.math.add(tf.math.sqrt(grad), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [2, 2, 3, 0, 3, 5], [0, 2, 0, 3], [1, 16], [0, 0, 1, 0, 1, 1], [5, 4, 2], [0, 3, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 7, 4, 4, 5, 8, 2, 1, 0, 6, 2, 3, 7], [0, 4, 0, 3, 0, 1, 4, 1, 2, 0, 4, 7, 4, 1, 2, 2, 3, 6, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 8, 4, 4, 2, 6, 3, 3, 1, 42, 23, 19, 4], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, grad)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.math.add(tf.math.pow(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), tf.math.square(tf.math.sqrt(tf.math.add(tf.math.subtract(grad, tf.math.negative(tf.math.divide_no_nan(grad, alpha))), tf.math.add(tf.math.multiply(beta, beta), tf.math.add(sigma, grad)))))), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 3, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.08799999952316284, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), sigma), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.3085200786590576, 2.3081982135772705, 2.307471513748169, 2.3064825534820557, 2.304978609085083, 2.304389476776123], "accuracy": [0.09760929644107819, 0.09074098616838455, 0.08955223858356476, 0.08268392831087112, 0.08968432247638702, 0.08915598690509796], "val_loss": [2.3080410957336426, 2.3074541091918945, 2.3065619468688965, 2.305600881576538, 2.3046252727508545, 2.30381178855896], "val_accuracy": [0.08166666328907013, 0.07666666805744171, 0.0676666647195816, 0.06400000303983688, 0.07400000095367432, 0.07833333313465118]}}]