[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8708571195602417, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2241647243499756, 1.874403953552246, 1.4141284227371216, 1.1123148202896118, 0.9572668075561523, 0.8587760329246521, 0.7938173413276672, 0.7516992688179016, 0.7030141353607178, 0.6830711960792542, 0.6498902440071106, 0.6323878765106201, 0.6200706362724304, 0.5964711308479309, 0.575619101524353, 0.5751074552536011, 0.546555757522583, 0.5438818335533142, 0.5375616550445557, 0.5121073722839355, 0.5052903294563293, 0.5050474405288696, 0.48186370730400085, 0.475117564201355, 0.4683719575405121, 0.46257102489471436, 0.44984716176986694, 0.4410961866378784, 0.4389931559562683, 0.430132657289505, 0.42324256896972656, 0.4207214117050171, 0.41011184453964233, 0.40772855281829834, 0.39259710907936096, 0.38532134890556335, 0.38491401076316833, 0.37445008754730225, 0.37413689494132996, 0.3615014851093292, 0.3595128357410431, 0.3513813614845276, 0.3447619080543518, 0.3448238968849182, 0.3361772298812866, 0.34002313017845154, 0.32934191823005676, 0.33000439405441284, 0.32044172286987305, 0.32077649235725403, 0.30886444449424744, 0.30406931042671204, 0.30021795630455017, 0.3024401366710663, 0.2949911952018738, 0.29044386744499207, 0.2847749590873718, 0.2855028212070465, 0.27694013714790344, 0.26929178833961487, 0.2660030126571655, 0.2677833139896393, 0.2699105143547058, 0.2569502890110016, 0.2531640827655792], "accuracy": [0.26799631118774414, 0.48051777482032776, 0.550521731376648, 0.6190727949142456, 0.6596222519874573, 0.6968696117401123, 0.7232862114906311, 0.7313432693481445, 0.7512878179550171, 0.7559106945991516, 0.7644960880279541, 0.7740060687065125, 0.7753269076347351, 0.7858935594558716, 0.7913089394569397, 0.7922335267066956, 0.802800178527832, 0.8063663840293884, 0.8107251524925232, 0.816008448600769, 0.8219521641731262, 0.8191784620285034, 0.8284242749214172, 0.8337075710296631, 0.8309338092803955, 0.8327829837799072, 0.8407079577445984, 0.8459912538528442, 0.8455950617790222, 0.8490291833877563, 0.8466516733169556, 0.8453308939933777, 0.8540483713150024, 0.8603883385658264, 0.8621054291725159, 0.8627657890319824, 0.8647470474243164, 0.8685774803161621, 0.8627657890319824, 0.8728041052818298, 0.872407853603363, 0.8737286925315857, 0.874389111995697, 0.878879964351654, 0.8802007436752319, 0.8794082403182983, 0.8811253309249878, 0.8853520154953003, 0.8868049383163452, 0.8879936337471008, 0.8907673954963684, 0.8916919827461243, 0.8928807377815247, 0.8897107243537903, 0.8923524022102356, 0.8963148593902588, 0.9009377956390381, 0.8952582478523254, 0.9015982151031494, 0.9009377956390381, 0.9041078090667725, 0.9041078090667725, 0.9037115573883057, 0.9095231890678406, 0.9101836085319519], "val_loss": [2.0440309047698975, 1.5315189361572266, 1.0711758136749268, 0.8651397228240967, 0.773409366607666, 0.7184720635414124, 0.6704756617546082, 0.6304843425750732, 0.6039634346961975, 0.5758219361305237, 0.5612630844116211, 0.5382733941078186, 0.5256426930427551, 0.5072498917579651, 0.5038764476776123, 0.4911586046218872, 0.47799012064933777, 0.4654226005077362, 0.4623641073703766, 0.45085301995277405, 0.44218236207962036, 0.44008228182792664, 0.43845096230506897, 0.4244367778301239, 0.421677827835083, 0.4184023141860962, 0.41770678758621216, 0.4045993983745575, 0.3995208740234375, 0.3971695005893707, 0.39801815152168274, 0.3932831585407257, 0.3885776400566101, 0.38510724902153015, 0.3811219036579132, 0.37848055362701416, 0.3783798813819885, 0.36976322531700134, 0.3712637424468994, 0.3663449287414551, 0.3642677366733551, 0.36523908376693726, 0.3651585280895233, 0.3555986285209656, 0.35614416003227234, 0.3538648784160614, 0.3536655008792877, 0.3507344126701355, 0.3481636643409729, 0.34438416361808777, 0.3459268808364868, 0.3473031520843506, 0.3422398269176483, 0.34306859970092773, 0.337261438369751, 0.3434549570083618, 0.33773109316825867, 0.3353346884250641, 0.3385104238986969, 0.33535340428352356, 0.33473896980285645, 0.33288028836250305, 0.33442649245262146, 0.3316747546195984, 0.3311823308467865], "val_accuracy": [0.5320000052452087, 0.637666642665863, 0.67166668176651, 0.6993333101272583, 0.7250000238418579, 0.7390000224113464, 0.7486666440963745, 0.7613333463668823, 0.7776666879653931, 0.777999997138977, 0.7900000214576721, 0.796999990940094, 0.8019999861717224, 0.8100000023841858, 0.8140000104904175, 0.8183333277702332, 0.8216666579246521, 0.8306666612625122, 0.8316666483879089, 0.8303333520889282, 0.8383333086967468, 0.8383333086967468, 0.8373333215713501, 0.8500000238418579, 0.8479999899864197, 0.8516666889190674, 0.8479999899864197, 0.8539999723434448, 0.8533333539962769, 0.8533333539962769, 0.8513333201408386, 0.8550000190734863, 0.859333336353302, 0.859000027179718, 0.8603333234786987, 0.8643333315849304, 0.8556666374206543, 0.8650000095367432, 0.8673333525657654, 0.8673333525657654, 0.8690000176429749, 0.8693333268165588, 0.8706666827201843, 0.8693333268165588, 0.871666669845581, 0.8690000176429749, 0.8709999918937683, 0.871666669845581, 0.8736666440963745, 0.874666690826416, 0.8706666827201843, 0.8713333606719971, 0.8803333044052124, 0.8796666860580444, 0.875333309173584, 0.8726666569709778, 0.8763333559036255, 0.8823333382606506, 0.8799999952316284, 0.8833333253860474, 0.8773333430290222, 0.8816666603088379, 0.878333330154419, 0.8806666731834412, 0.8820000290870667]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 0], [4, 2, 8, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 9, 5], [0, 2, 0, 3], [16, 38], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 4, 2, 8], [2, 0, 0, 1, 0, 0, 3, 1, 2, 0], [16, 66, 96, 99, 49, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 7, 5, 2, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.sqrt(grad), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 5, 0, 3], [0, 1, 0, 0], [74, 81], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 6, 6, 0, 7], [0, 2, 0, 3, 2, 2, 4], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 1, 3, 4, 8, 1, 4, 1, 4, 2, 8, 2, 9, 7, 6, 7, 7, 7, 7, 9, 0, 4, 3], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0, 6, 2, 7, 3, 3, 0, 4], [16, 99, 73, 99, 72, 8, 24, 62, 79]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 17, 10, 7, 2, 2, 1, 1, 1, 40, 23, 17, 9], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, beta)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.divide_no_nan(alpha, beta))))), tf.math.add(tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.negative(tf.math.pow(sigma, tf.math.multiply(sigma, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09457138925790787, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [0, 1, 0, 2], [78, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 1, 3, 5], [0, 3, 0, 3, 5], [16, 16], [1, 0], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 1, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 60, 69]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 2, 1, 0, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [31, 97], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 9, 3, 0, 4, 0], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 4, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 2, 2, 0, 1, 2, 1, 1, 1, 16, 8, 8, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]