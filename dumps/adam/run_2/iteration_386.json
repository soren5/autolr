[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8714285492897034, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2217857837677, 1.8647607564926147, 1.3977527618408203, 1.085909128189087, 0.935699999332428, 0.8284727334976196, 0.7726195454597473, 0.733432948589325, 0.6825253963470459, 0.6577721834182739, 0.6365422606468201, 0.6099610924720764, 0.5925586223602295, 0.5715670585632324, 0.5581822991371155, 0.5467174649238586, 0.5278840065002441, 0.5182512998580933, 0.5019071698188782, 0.4918959438800812, 0.49347224831581116, 0.4703594744205475, 0.46771228313446045, 0.4542003273963928, 0.4467427730560303, 0.4426708519458771, 0.43582457304000854, 0.43458378314971924, 0.4126128852367401, 0.41004031896591187, 0.4007500112056732, 0.39877745509147644, 0.3917188346385956, 0.3900197148323059, 0.37645870447158813, 0.37315890192985535, 0.3694615662097931, 0.36986297369003296, 0.3557332754135132, 0.3607841432094574, 0.3449060022830963, 0.3466722369194031, 0.34110933542251587, 0.3300309181213379, 0.3298953175544739, 0.32331544160842896, 0.3210185766220093, 0.3093573749065399, 0.31315743923187256, 0.29647296667099, 0.299883097410202, 0.2999539375305176, 0.2976438105106354, 0.2925649583339691, 0.2854091227054596, 0.281114399433136, 0.2777867317199707, 0.2785857021808624, 0.2679271101951599, 0.268403559923172, 0.26115766167640686, 0.26303210854530334, 0.2610483467578888, 0.24735666811466217, 0.2529957592487335, 0.24595634639263153, 0.24218474328517914, 0.23472943902015686, 0.23440834879875183], "accuracy": [0.27499669790267944, 0.4773477613925934, 0.5614846348762512, 0.6244881749153137, 0.6701889038085938, 0.7036058902740479, 0.7251353859901428, 0.7359662055969238, 0.7535332441329956, 0.7623828053474426, 0.7630431652069092, 0.7796856164932251, 0.7836481332778931, 0.7889314293861389, 0.793422281742096, 0.8035926818847656, 0.8045172095298767, 0.8088759779930115, 0.8158763647079468, 0.8195747137069702, 0.8165367841720581, 0.8302733898162842, 0.832650899887085, 0.8400475382804871, 0.8391229510307312, 0.8391229510307312, 0.8436138033866882, 0.8451988101005554, 0.8514066934585571, 0.8471800088882446, 0.8560295701026917, 0.8536521196365356, 0.8578787446022034, 0.8585391640663147, 0.8650112152099609, 0.8647470474243164, 0.867520809173584, 0.8659358024597168, 0.8729361891746521, 0.8667283058166504, 0.8737286925315857, 0.8733324408531189, 0.8768987059593201, 0.8816536664962769, 0.8854840993881226, 0.8853520154953003, 0.8848236799240112, 0.889050304889679, 0.887597382068634, 0.8902390599250793, 0.894069492816925, 0.8902390599250793, 0.8928807377815247, 0.8923524022102356, 0.8943336606025696, 0.9001452922821045, 0.8982961177825928, 0.9005415439605713, 0.9031832218170166, 0.9008057117462158, 0.9080702662467957, 0.9035794734954834, 0.9060890078544617, 0.9117686152458191, 0.9054285883903503, 0.9154669046401978, 0.9126931428909302, 0.9126931428909302, 0.9159952402114868], "val_loss": [2.0350329875946045, 1.5157902240753174, 1.0488590002059937, 0.8311106562614441, 0.7478606104850769, 0.6805101037025452, 0.639402449131012, 0.6020695567131042, 0.5772089958190918, 0.5565073490142822, 0.5352866053581238, 0.5232129693031311, 0.5089772343635559, 0.4969008266925812, 0.49066585302352905, 0.47736653685569763, 0.47068697214126587, 0.4627934694290161, 0.4579958915710449, 0.4496067762374878, 0.4428161084651947, 0.43702465295791626, 0.4344169497489929, 0.42546480894088745, 0.4290234446525574, 0.41821029782295227, 0.4170149266719818, 0.41014358401298523, 0.40876972675323486, 0.40509867668151855, 0.40134701132774353, 0.4000583589076996, 0.3961673974990845, 0.39952540397644043, 0.39387086033821106, 0.38840702176094055, 0.3869798481464386, 0.38344109058380127, 0.3793087303638458, 0.3823213279247284, 0.3787643313407898, 0.3785400390625, 0.37877604365348816, 0.3749338388442993, 0.3711582124233246, 0.3697023391723633, 0.37116914987564087, 0.3686576783657074, 0.3705836236476898, 0.3647412657737732, 0.3691391944885254, 0.3679995834827423, 0.3628292679786682, 0.3612838089466095, 0.3612495958805084, 0.35752514004707336, 0.35742780566215515, 0.3567589521408081, 0.3624865710735321, 0.3569914996623993, 0.3604860007762909, 0.35587695240974426, 0.35437828302383423, 0.3594502806663513, 0.3568302392959595, 0.3580484688282013, 0.35733625292778015, 0.3547114133834839, 0.36784231662750244], "val_accuracy": [0.5329999923706055, 0.6653333306312561, 0.6809999942779541, 0.7136666774749756, 0.7273333072662354, 0.7490000128746033, 0.7630000114440918, 0.7726666927337646, 0.7823333144187927, 0.7940000295639038, 0.8019999861717224, 0.8059999942779541, 0.8113333582878113, 0.8153333067893982, 0.8276666402816772, 0.8296666741371155, 0.8306666612625122, 0.8323333263397217, 0.8326666951179504, 0.8379999995231628, 0.8413333296775818, 0.8420000076293945, 0.8450000286102295, 0.8513333201408386, 0.8453333377838135, 0.8483333587646484, 0.8476666808128357, 0.8560000061988831, 0.856333315372467, 0.8519999980926514, 0.8583333492279053, 0.8550000190734863, 0.8556666374206543, 0.8546666502952576, 0.8606666922569275, 0.8600000143051147, 0.8633333444595337, 0.8636666536331177, 0.862333357334137, 0.8636666536331177, 0.8650000095367432, 0.8646666407585144, 0.8666666746139526, 0.8619999885559082, 0.8656666874885559, 0.8673333525657654, 0.8673333525657654, 0.8693333268165588, 0.8703333139419556, 0.8679999709129333, 0.8683333396911621, 0.8726666569709778, 0.8693333268165588, 0.8756666779518127, 0.874666690826416, 0.8756666779518127, 0.875, 0.8763333559036255, 0.8733333349227905, 0.8769999742507935, 0.8723333477973938, 0.8773333430290222, 0.8766666650772095, 0.8806666731834412, 0.8776666522026062, 0.8773333430290222, 0.8806666731834412, 0.8759999871253967, 0.8806666731834412]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [3, 2, 3, 0, 3, 3, 5], [0, 1, 1, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 5], [0, 2, 0, 3, 0], [16, 68, 97], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [2, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 8, 7, 0, 1, 6, 2, 2], [0, 1, 0, 3, 0, 0, 3, 1, 2, 0, 5, 0, 2, 6, 4], [18, 99, 96, 99, 61, 1]], "fitness": -0.2191428542137146, "mapping_values": [1, 13, 7, 6, 2, 11, 6, 5, 3, 2, 1, 1, 1, 34, 19, 15, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.multiply(alpha, tf.math.square(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.sqrt(sigma))), alpha), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), beta)), grad)))), grad)", "other_info": {"loss": [2.550985097885132, 2.3358917236328125, 2.304713726043701, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.23061682283878326, 0.15968827903270721, 0.14515915513038635, 0.1154404953122139, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.440215587615967, 2.468700408935547, 2.2598717212677, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10233332961797714, 0.2199999988079071, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 80], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 9, 8, 7, 3, 8, 8, 1, 8, 5], [4, 0, 0, 3, 0, 3, 3, 1, 2, 0, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 29, 18, 11, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.add(tf.math.multiply(sigma, alpha), tf.math.sqrt(beta))))))), tf.math.sqrt(tf.math.subtract(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.square(beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4, 3, 5, 2], [0, 0, 0, 3, 4, 4, 4, 1, 2, 0, 7, 2, 7], [16, 99, 96, 99, 4, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 0, 28, 15, 13, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.pow(sigma, tf.math.add(grad, grad)), grad), tf.math.sqrt(tf.math.pow(alpha, beta))), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(grad, beta)))))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 2, 1, 0, 3, 8, 0, 3, 5, 3], [0, 1, 0, 2, 3, 2], [17, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 0], [16, 16], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 8, 6, 4, 7, 1, 3, 5, 6, 5, 5, 6], [0, 3, 4, 1, 2, 2, 2, 4], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 3, 4, 6, 8, 1, 4, 1, 4, 2, 8, 0], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 72, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 10, 6, 2, 6, 3, 3, 1, 20, 12, 8, 1, 22, 12, 10, 5], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.multiply(grad, tf.math.square(tf.math.multiply(grad, grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.subtract(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.square(sigma), tf.math.square(grad)))), alpha), beta), tf.math.divide_no_nan(beta, beta)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), grad), sigma), tf.math.add(tf.math.sqrt(tf.math.negative(alpha)), beta)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]