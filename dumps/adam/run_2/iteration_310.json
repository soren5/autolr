[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8785714507102966, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222548484802246, 1.8594169616699219, 1.3881627321243286, 1.0904992818832397, 0.9375282526016235, 0.8402489423751831, 0.769374668598175, 0.7320953011512756, 0.6916646361351013, 0.6708877682685852, 0.6309993863105774, 0.624679446220398, 0.5978816747665405, 0.5884103178977966, 0.56795734167099, 0.5550946593284607, 0.5295586585998535, 0.5199467539787292, 0.5156577229499817, 0.5081614851951599, 0.4953101575374603, 0.48289594054222107, 0.4784843325614929, 0.4575261175632477, 0.45709407329559326, 0.44893893599510193, 0.44598907232284546, 0.43875405192375183, 0.42906349897384644, 0.4228615462779999, 0.41317132115364075, 0.40261098742485046, 0.3990901708602905, 0.39255398511886597, 0.38717857003211975, 0.37992504239082336, 0.37020576000213623, 0.37111926078796387, 0.36265993118286133, 0.35861432552337646, 0.3594362735748291, 0.3465592861175537, 0.3460329473018646, 0.356612890958786, 0.34417375922203064, 0.33161425590515137, 0.33337312936782837, 0.3172817528247833, 0.31857356429100037, 0.30752575397491455, 0.30623894929885864, 0.3002781569957733, 0.3006315231323242, 0.29350200295448303, 0.29455259442329407, 0.28694280982017517, 0.27934837341308594, 0.2808997631072998, 0.2760571241378784, 0.2783985733985901, 0.269773006439209, 0.26919037103652954, 0.25597119331359863, 0.2612079381942749, 0.2503906786441803, 0.25042933225631714, 0.25264960527420044, 0.242923766374588, 0.23837485909461975, 0.2421792596578598, 0.2355913519859314, 0.24009783565998077, 0.22595486044883728, 0.22499191761016846, 0.219712033867836, 0.2202376425266266, 0.21702684462070465, 0.20527660846710205, 0.20819300413131714, 0.2020711600780487, 0.205993190407753, 0.1951950043439865, 0.19675980508327484, 0.18329188227653503, 0.19223476946353912], "accuracy": [0.2690529525279999, 0.48170650005340576, 0.5645225048065186, 0.6194690465927124, 0.6629242897033691, 0.6952846646308899, 0.7152291536331177, 0.7313432693481445, 0.7500990629196167, 0.7523444890975952, 0.7667415142059326, 0.7724210619926453, 0.7847048044204712, 0.7926297783851624, 0.7942147850990295, 0.8009510040283203, 0.8075551390647888, 0.8124422430992126, 0.8131026029586792, 0.8177255392074585, 0.8249900937080383, 0.830669641494751, 0.8294808864593506, 0.8345000743865967, 0.837141752243042, 0.8459912538528442, 0.8425571322441101, 0.8461233377456665, 0.8481045961380005, 0.8473120927810669, 0.8515387773513794, 0.8545766472816467, 0.8576145768165588, 0.8619733452796936, 0.8614450097084045, 0.8615770936012268, 0.8709549307823181, 0.8659358024597168, 0.870030403137207, 0.8722757697105408, 0.8725399374961853, 0.8747853636741638, 0.8753136992454529, 0.8710870146751404, 0.8759741187095642, 0.8808611631393433, 0.8836349248886108, 0.8854840993881226, 0.8881257176399231, 0.8898428082466125, 0.8907673954963684, 0.8886540532112122, 0.8897107243537903, 0.8961827754974365, 0.8903711438179016, 0.8951261639595032, 0.89988112449646, 0.8986923694610596, 0.9005415439605713, 0.898428201675415, 0.9002773761749268, 0.9005415439605713, 0.9075419306755066, 0.9054285883903503, 0.9088627696037292, 0.9111081957817078, 0.9115044474601746, 0.9129573106765747, 0.9178444147109985, 0.913089394569397, 0.9152027368545532, 0.9132214784622192, 0.9178444147109985, 0.9178444147109985, 0.9227314591407776, 0.9198256731033325, 0.9192973375320435, 0.9262977242469788, 0.925901472568512, 0.9292035102844238, 0.9249768853187561, 0.9330339431762695, 0.9248448014259338, 0.9368643760681152, 0.9276185631752014], "val_loss": [2.0323307514190674, 1.5042835474014282, 1.0442346334457397, 0.844497799873352, 0.7515795826911926, 0.692566990852356, 0.6438770890235901, 0.6116536855697632, 0.585066556930542, 0.561345636844635, 0.5430920124053955, 0.5257808566093445, 0.5110422968864441, 0.49992066621780396, 0.48742419481277466, 0.4777980148792267, 0.46444255113601685, 0.4583050012588501, 0.45259127020835876, 0.44551199674606323, 0.43701159954071045, 0.42717885971069336, 0.4212254285812378, 0.42423194646835327, 0.41200512647628784, 0.40643569827079773, 0.4022913873195648, 0.4017253816127777, 0.3966419994831085, 0.39421606063842773, 0.38782450556755066, 0.3827483654022217, 0.3796747922897339, 0.3841698467731476, 0.3754654824733734, 0.3748626410961151, 0.3722996115684509, 0.36637982726097107, 0.36191973090171814, 0.3627820611000061, 0.35589924454689026, 0.356498122215271, 0.35873058438301086, 0.3482925593852997, 0.3481626808643341, 0.354320228099823, 0.34407007694244385, 0.3431173861026764, 0.3411721885204315, 0.34310591220855713, 0.3384391963481903, 0.336691290140152, 0.3388608694076538, 0.34078553318977356, 0.33429059386253357, 0.3320641815662384, 0.3329349756240845, 0.32851728796958923, 0.329758882522583, 0.32812976837158203, 0.32725080847740173, 0.3304600715637207, 0.3305065631866455, 0.32970789074897766, 0.3241739571094513, 0.3270145356655121, 0.3238857090473175, 0.32313236594200134, 0.3215543329715729, 0.32393884658813477, 0.3200088143348694, 0.32180848717689514, 0.32325491309165955, 0.3219682574272156, 0.3165547549724579, 0.32265421748161316, 0.31819048523902893, 0.32021814584732056, 0.3205169141292572, 0.32145634293556213, 0.318745881319046, 0.32069554924964905, 0.31761109828948975, 0.3236912786960602, 0.32758912444114685], "val_accuracy": [0.5193333625793457, 0.6466666460037231, 0.6713333129882812, 0.70333331823349, 0.7316666841506958, 0.7450000047683716, 0.7616666555404663, 0.7753333449363708, 0.7833333611488342, 0.7929999828338623, 0.8050000071525574, 0.8130000233650208, 0.8143333196640015, 0.8196666836738586, 0.8206666707992554, 0.8289999961853027, 0.831333339214325, 0.8386666774749756, 0.8356666564941406, 0.8370000123977661, 0.8433333039283752, 0.8460000157356262, 0.8450000286102295, 0.8443333506584167, 0.8506666421890259, 0.8476666808128357, 0.8543333411216736, 0.8546666502952576, 0.856333315372467, 0.8543333411216736, 0.8586666584014893, 0.859333336353302, 0.8586666584014893, 0.8606666922569275, 0.862333357334137, 0.8640000224113464, 0.862333357334137, 0.8653333187103271, 0.871666669845581, 0.8673333525657654, 0.8679999709129333, 0.8659999966621399, 0.8683333396911621, 0.8723333477973938, 0.8726666569709778, 0.8730000257492065, 0.8723333477973938, 0.871999979019165, 0.875333309173584, 0.8713333606719971, 0.875333309173584, 0.8773333430290222, 0.8763333559036255, 0.8799999952316284, 0.8769999742507935, 0.8796666860580444, 0.8806666731834412, 0.8793333172798157, 0.8823333382606506, 0.8843333125114441, 0.8840000033378601, 0.8823333382606506, 0.8809999823570251, 0.8830000162124634, 0.8866666555404663, 0.8843333125114441, 0.8870000243186951, 0.8893333077430725, 0.8853333592414856, 0.8856666684150696, 0.890333354473114, 0.8880000114440918, 0.8913333415985107, 0.890999972820282, 0.8893333077430725, 0.8930000066757202, 0.8916666507720947, 0.8913333415985107, 0.8883333206176758, 0.8953333497047424, 0.893666684627533, 0.8939999938011169, 0.8953333497047424, 0.8916666507720947, 0.8899999856948853]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [6, 2, 3, 0, 3, 0, 0, 8, 4, 6], [0, 1, 0, 2, 0, 3, 3], [39, 39, 76], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 5], [0, 0, 0, 0, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 48]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 10, 7, 3, 1, 0, 1, 1, 2, 1, 1, 1, 18, 9, 9, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(tf.math.pow(grad, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(grad, grad)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(sigma, alpha)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [9, 2, 3, 0, 3], [2, 1, 0, 0], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 4], [0, 2, 0, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 77, 71, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 11, 6, 5, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.pow(sigma, tf.math.subtract(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), sigma))), alpha)), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [97, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 4, 9], [0, 1, 0, 3], [16, 16, 34], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 5, 2, 4, 2, 8], [4, 0, 4, 3, 0, 4, 0, 1, 4, 0], [30, 99, 96, 99, 75, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(alpha))), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.square(grad))), sigma)), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}, "mapping_values": [1, 9, 5, 4, 2, 12, 8, 4, 3, 2, 1, 1, 1, 17, 9, 8, 3], "tree_depth": 17}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [5, 2, 3, 0, 5, 5], [0, 2, 1, 1], [16, 16], [0, 0, 0, 1, 1], [0, 0, 6], [0, 0], [99, 27], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 3, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 91, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 8, 5, 3, 1, 5, 3, 2, 2, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.square(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]