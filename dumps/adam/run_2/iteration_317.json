[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8617143034934998, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224191188812256, 1.8671067953109741, 1.387803316116333, 1.0885891914367676, 0.9361370205879211, 0.8385707139968872, 0.7710259556770325, 0.7168795466423035, 0.6869595646858215, 0.6538053154945374, 0.6303372383117676, 0.6153180599212646, 0.5932332873344421, 0.575189471244812, 0.556453287601471, 0.546222448348999, 0.5253508687019348, 0.5142823457717896, 0.5028314590454102, 0.48875343799591064, 0.4920259118080139, 0.47740939259529114, 0.464762806892395, 0.45594704151153564, 0.45094966888427734, 0.447842538356781, 0.4388091564178467, 0.43062564730644226, 0.4253164529800415, 0.41390764713287354, 0.41347071528434753, 0.39931681752204895, 0.3934206962585449, 0.39339974522590637, 0.37837788462638855, 0.3803762197494507, 0.3725975751876831, 0.37434622645378113, 0.362100213766098, 0.3587256669998169, 0.3626839518547058, 0.34555041790008545, 0.3377658724784851, 0.34130099415779114, 0.33570510149002075, 0.32830139994621277, 0.3237460255622864, 0.31202879548072815, 0.3119216859340668, 0.3119572103023529, 0.2998950779438019, 0.30614715814590454], "accuracy": [0.2694492042064667, 0.4905560612678528, 0.5723153948783875, 0.6248844265937805, 0.6667547225952148, 0.7041342258453369, 0.7224937081336975, 0.746268630027771, 0.750231146812439, 0.7625148296356201, 0.7753269076347351, 0.77677983045578, 0.785101056098938, 0.7996301651000977, 0.7987055778503418, 0.8074230551719666, 0.8162726163864136, 0.8166688680648804, 0.8201030492782593, 0.8284242749214172, 0.8277638554573059, 0.8278959393501282, 0.8333113193511963, 0.8354246616363525, 0.8381983637809753, 0.8392550349235535, 0.8442742228507996, 0.8488970994949341, 0.8545766472816467, 0.8527275323867798, 0.8573504090309143, 0.8589354157447815, 0.8614450097084045, 0.8595958352088928, 0.8646149635314941, 0.8626337051391602, 0.8665962219238281, 0.8646149635314941, 0.873860776424408, 0.8728041052818298, 0.8713511824607849, 0.8766345381736755, 0.8792761564254761, 0.878879964351654, 0.8815215826034546, 0.8882578015327454, 0.8809932470321655, 0.8868049383163452, 0.8878615498542786, 0.8879936337471008, 0.8952582478523254, 0.889578640460968], "val_loss": [2.0395114421844482, 1.5158084630966187, 1.0447168350219727, 0.8330761790275574, 0.7438709139823914, 0.6827052235603333, 0.6349412202835083, 0.6013005375862122, 0.5705464482307434, 0.5490943789482117, 0.5326490998268127, 0.5182263851165771, 0.4971129596233368, 0.49311840534210205, 0.4791342318058014, 0.46815022826194763, 0.4529995918273926, 0.4458925426006317, 0.44432124495506287, 0.43016719818115234, 0.43165868520736694, 0.42212817072868347, 0.4178331196308136, 0.40668246150016785, 0.40130648016929626, 0.40589439868927, 0.4013809859752655, 0.39254674315452576, 0.38845160603523254, 0.38067060708999634, 0.3818596303462982, 0.3757079243659973, 0.3700173795223236, 0.37032219767570496, 0.3732518255710602, 0.3658696413040161, 0.35767662525177, 0.36240383982658386, 0.3553907871246338, 0.3568190038204193, 0.3527677059173584, 0.3486628830432892, 0.3464350700378418, 0.34417861700057983, 0.3457387387752533, 0.3475288152694702, 0.3431470990180969, 0.34017321467399597, 0.3373245298862457, 0.33844828605651855, 0.3365987539291382, 0.3390859067440033], "val_accuracy": [0.5180000066757202, 0.6620000004768372, 0.6883333325386047, 0.7076666951179504, 0.7323333621025085, 0.7493333220481873, 0.7646666765213013, 0.7786666750907898, 0.7950000166893005, 0.8033333420753479, 0.8096666932106018, 0.8183333277702332, 0.8273333311080933, 0.8223333358764648, 0.8326666951179504, 0.8360000252723694, 0.8396666646003723, 0.847000002861023, 0.8423333168029785, 0.8510000109672546, 0.8483333587646484, 0.8473333120346069, 0.8463333249092102, 0.8539999723434448, 0.8536666631698608, 0.8496666550636292, 0.8526666760444641, 0.8579999804496765, 0.8610000014305115, 0.8606666922569275, 0.8576666712760925, 0.8663333058357239, 0.8643333315849304, 0.8666666746139526, 0.8643333315849304, 0.8663333058357239, 0.8700000047683716, 0.8663333058357239, 0.8696666955947876, 0.8726666569709778, 0.8736666440963745, 0.871999979019165, 0.875333309173584, 0.8769999742507935, 0.874666690826416, 0.8740000128746033, 0.8796666860580444, 0.8776666522026062, 0.8773333430290222, 0.878000020980835, 0.8796666860580444, 0.8793333172798157]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [4, 2, 3, 0, 3, 5], [3, 3, 0, 3], [76, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [9, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 4, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 8, 4, 4, 1, 2, 1, 1, 1, 1, 1, 0, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(tf.math.multiply(grad, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303694248199463, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 6, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3, 5], [0, 3, 0, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 1, 3, 6, 8, 1, 4, 5, 4, 2, 8], [0, 0, 4, 4, 1, 2, 3, 1, 3, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 2, 1, 1, 10, 5, 5, 2, 2, 1, 1, 1, 17, 9, 8, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad))), tf.math.square(alpha))), tf.math.pow(beta, sigma)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 8, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 0], [3, 2, 3, 3], [16, 16], [0, 1], [0], [0], [75], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [6, 3, 3, 6, 2, 1, 4, 3, 4, 2, 8, 3], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0, 1, 6], [16, 99, 96, 33, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 0, 2, 1, 1, 1, 24, 12, 12, 5], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(grad, tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.math.multiply(alpha, beta)))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), alpha), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 8, 6, 2, 2, 7, 6], [0, 1, 0, 2, 1, 3, 1, 2, 0], [39, 39, 14], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 0, 2, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 6, 5, 4, 3, 3, 4, 3, 8, 5, 1, 4, 8, 1, 5, 6, 2, 8, 8, 6, 9, 2, 8], [0, 3, 5, 7, 2, 3, 2, 5, 7, 3, 0, 5, 1, 2], [97, 66, 77], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 6, 1, 4, 1, 4, 6, 8, 8, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 6, 3], [16, 80, 88, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 11, 9, 3, 5, 3, 2, 1, 37, 23, 14, 3, 25, 13, 12, 6], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.divide_no_nan(alpha, grad)), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.math.multiply(sigma, tf.math.multiply(tf.math.pow(tf.math.multiply(tf.math.sqrt(tf.math.square(tf.math.subtract(grad, grad))), beta), tf.math.pow(sigma, tf.math.sqrt(tf.math.subtract(tf.math.square(beta), grad)))), tf.math.divide_no_nan(grad, sigma))), tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(alpha), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.sqrt(alpha)))), beta)), tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]