[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8500000238418579, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2207188606262207, 1.8644334077835083, 1.3934741020202637, 1.1041582822799683, 0.9565459489822388, 0.857442319393158, 0.7836056351661682, 0.7362446188926697, 0.6966590881347656, 0.6618695855140686, 0.6340908408164978, 0.6224164962768555, 0.5901941657066345, 0.5827569961547852, 0.5642294883728027, 0.5520261526107788, 0.5376198887825012, 0.5236265659332275, 0.5137653946876526, 0.49857527017593384, 0.490565687417984, 0.47744277119636536, 0.4671342670917511, 0.46252596378326416, 0.4491601586341858, 0.4443191587924957, 0.433636337518692, 0.43492886424064636, 0.4205130636692047, 0.40809789299964905, 0.40841493010520935, 0.39618977904319763, 0.3943531811237335, 0.3912070095539093, 0.3851683437824249, 0.3804960548877716, 0.3663497269153595, 0.36221906542778015, 0.3590954840183258, 0.3486980199813843, 0.3468201458454132, 0.3406596779823303, 0.3406253755092621, 0.33052316308021545, 0.3286111652851105, 0.3200688064098358, 0.32517924904823303, 0.31840091943740845, 0.31487104296684265, 0.3036634027957916, 0.30183812975883484, 0.30172595381736755, 0.29887422919273376, 0.2922043800354004, 0.28624817728996277, 0.27635303139686584, 0.27396467328071594, 0.27798858284950256, 0.26624003052711487, 0.26674196124076843, 0.2593478858470917, 0.2644338011741638, 0.2533535361289978, 0.24788202345371246, 0.24471448361873627, 0.24511940777301788, 0.24605053663253784, 0.24732938408851624, 0.23744091391563416, 0.23496267199516296, 0.22820425033569336, 0.22135502099990845, 0.22076967358589172, 0.21517221629619598], "accuracy": [0.272090882062912, 0.4881785809993744, 0.5588429570198059, 0.6100911498069763, 0.6622639298439026, 0.6892088055610657, 0.7160216569900513, 0.7300224304199219, 0.746268630027771, 0.7567031979560852, 0.7701756954193115, 0.7700436115264893, 0.7839123010635376, 0.7903843522071838, 0.798309326171875, 0.7998943328857422, 0.8103289008140564, 0.8117818236351013, 0.816008448600769, 0.8215559124946594, 0.8255184292793274, 0.8281601071357727, 0.833179235458374, 0.8313300609588623, 0.8366134166717529, 0.8397833704948425, 0.8446704745292664, 0.8416325449943542, 0.8506141901016235, 0.8529917001724243, 0.8512746095657349, 0.8576145768165588, 0.8617091774940491, 0.8603883385658264, 0.8618412613868713, 0.8646149635314941, 0.869502067565918, 0.8716153502464294, 0.8730682730674744, 0.8765024542808533, 0.8735966086387634, 0.8771628737449646, 0.8800686597824097, 0.8836349248886108, 0.8831065893173218, 0.8893144726753235, 0.8819178342819214, 0.8858803510665894, 0.8906353116035461, 0.8938053250312805, 0.8911636471748352, 0.894069492816925, 0.889050304889679, 0.8968431949615479, 0.8965790271759033, 0.9027869701385498, 0.901862382888794, 0.8997490406036377, 0.9062210917472839, 0.9056927561759949, 0.9084665179252625, 0.9030511379241943, 0.9097873568534851, 0.9099194407463074, 0.9140139818191528, 0.9103156924247742, 0.9125610589981079, 0.9096552729606628, 0.9144102334976196, 0.9173160791397095, 0.9202219247817993, 0.9215427041053772, 0.9222031235694885, 0.9228635430335999], "val_loss": [2.034773349761963, 1.5127705335617065, 1.0426974296569824, 0.8337048888206482, 0.7448821663856506, 0.6928426623344421, 0.6395521759986877, 0.6045226454734802, 0.5809022784233093, 0.5557560920715332, 0.5382733345031738, 0.5209899544715881, 0.5056718587875366, 0.49515581130981445, 0.4810448884963989, 0.47159627079963684, 0.46474307775497437, 0.453178346157074, 0.44406750798225403, 0.4339603781700134, 0.42944571375846863, 0.4258589744567871, 0.4149259030818939, 0.4092577397823334, 0.4095386564731598, 0.4011673033237457, 0.39635083079338074, 0.3961490988731384, 0.39195728302001953, 0.384501188993454, 0.3801650404930115, 0.37906375527381897, 0.3744961619377136, 0.37120357155799866, 0.3708513081073761, 0.36634424328804016, 0.36789941787719727, 0.3622179627418518, 0.3572736382484436, 0.35762259364128113, 0.35575562715530396, 0.35453087091445923, 0.3478055000305176, 0.34756338596343994, 0.34748953580856323, 0.34918415546417236, 0.342808336019516, 0.3425200283527374, 0.3388829231262207, 0.33811965584754944, 0.3427406847476959, 0.3360764682292938, 0.3407379984855652, 0.3315386474132538, 0.3321126699447632, 0.33329179883003235, 0.33234935998916626, 0.33146893978118896, 0.33068159222602844, 0.3279126286506653, 0.32955384254455566, 0.32671159505844116, 0.3275575339794159, 0.3258080780506134, 0.32741600275039673, 0.3272961378097534, 0.32437053322792053, 0.32756802439689636, 0.32496312260627747, 0.32115787267684937, 0.3225811719894409, 0.3255681097507477, 0.32386982440948486, 0.3255709111690521], "val_accuracy": [0.5260000228881836, 0.6620000004768372, 0.6866666674613953, 0.7136666774749756, 0.7393333315849304, 0.7543333172798157, 0.762666642665863, 0.7753333449363708, 0.7960000038146973, 0.7960000038146973, 0.8086666464805603, 0.8143333196640015, 0.8186666369438171, 0.8296666741371155, 0.8303333520889282, 0.8293333053588867, 0.8253333568572998, 0.8426666855812073, 0.8443333506584167, 0.8460000157356262, 0.8496666550636292, 0.8486666679382324, 0.8506666421890259, 0.8539999723434448, 0.8536666631698608, 0.8573333621025085, 0.8566666841506958, 0.8550000190734863, 0.8600000143051147, 0.8576666712760925, 0.8629999756813049, 0.862666666507721, 0.8679999709129333, 0.8686666488647461, 0.8646666407585144, 0.8686666488647461, 0.8640000224113464, 0.8636666536331177, 0.8740000128746033, 0.8756666779518127, 0.8686666488647461, 0.8733333349227905, 0.8733333349227905, 0.875333309173584, 0.8773333430290222, 0.8740000128746033, 0.8773333430290222, 0.878000020980835, 0.8820000290870667, 0.8809999823570251, 0.8786666393280029, 0.8799999952316284, 0.8806666731834412, 0.8856666684150696, 0.8836666941642761, 0.8823333382606506, 0.8859999775886536, 0.8863333463668823, 0.8856666684150696, 0.8853333592414856, 0.8856666684150696, 0.887666642665863, 0.8843333125114441, 0.8870000243186951, 0.8853333592414856, 0.890333354473114, 0.8880000114440918, 0.8916666507720947, 0.8923333287239075, 0.8896666765213013, 0.8896666765213013, 0.890666663646698, 0.887666642665863, 0.8886666893959045]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 4, 3], [0, 1, 0, 2, 0], [39, 39, 24], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 3, 3, 6, 8, 2, 4, 1, 4, 2, 8], [0, 4, 0, 3, 4, 0, 4, 1, 2, 0], [16, 57, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 10, 6, 4, 2, 2, 1, 1, 1, 20, 11, 9, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.subtract(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), grad)), alpha)), tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 2, 3, 0, 3, 0, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [66, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 0, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.square(grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [2.3042070865631104, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.302584648132324, 2.302586317062378, 2.302586317062378, 2.302583932876587, 2.3025906085968018], "accuracy": [0.09998679161071777, 0.09906221181154251, 0.09919429570436478, 0.09787346422672272, 0.09998679161071777, 0.09919429570436478, 0.09998679161071777, 0.09985470771789551, 0.09998679161071777, 0.10011887550354004, 0.10077928751707077], "val_loss": [2.3025853633880615, 2.3025848865509033, 2.3025853633880615, 2.3025851249694824, 2.3025853633880615, 2.3025853633880615, 2.302586555480957, 2.30259108543396, 2.3026013374328613, 2.3026256561279297, 2.3026835918426514], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09566666930913925, 0.09566666930913925, 0.10100000351667404, 0.10100000351667404, 0.09933333098888397, 0.09933333098888397, 0.09566666930913925, 0.10100000351667404]}, "mapping_values": [1, 11, 7, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 13}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 8, 3, 5, 4, 7, 0], [3, 2, 3, 3, 1, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 1, 1, 4, 1, 4, 2, 6, 3, 0, 5, 3], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0, 0, 2, 4, 5], [16, 99, 95, 99, 61, 1, 89]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 15, 9, 6, 0, 2, 1, 1, 1, 29, 15, 14, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(grad), tf.math.multiply(tf.math.square(beta), tf.math.pow(grad, grad))), tf.math.add(tf.math.negative(alpha), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), alpha))), tf.math.add(tf.math.divide_no_nan(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), beta))), tf.math.square(tf.math.multiply(grad, grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [8, 2, 3, 0, 3], [0, 1, 0, 2], [45, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 3, 9, 4, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [12], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [6, 3, 5, 6, 8, 1, 2, 0, 6, 9, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 2, 2, 1, 1, 1, 16, 10, 6, 6], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]