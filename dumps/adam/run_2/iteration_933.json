[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8657143115997314, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223436117172241, 1.8695383071899414, 1.3915431499481201, 1.0857161283493042, 0.9387179613113403, 0.8383629322052002, 0.7709912061691284, 0.7220549583435059, 0.6845187544822693, 0.6567319631576538, 0.6304929852485657, 0.6159553527832031, 0.592894971370697, 0.5727460384368896, 0.5584024786949158, 0.5447446703910828, 0.5317279696464539, 0.5183159112930298, 0.5109959244728088, 0.4973403811454773, 0.48811084032058716, 0.4922988712787628, 0.47246769070625305, 0.45984920859336853, 0.45902636647224426, 0.43863219022750854, 0.4321225583553314, 0.4271313548088074, 0.420670747756958, 0.40775516629219055, 0.4114244282245636, 0.40172216296195984, 0.3927789330482483, 0.3901527225971222, 0.37869128584861755, 0.37983161211013794, 0.37339988350868225, 0.3637239933013916, 0.36091387271881104, 0.35888591408729553, 0.3525432348251343, 0.35172417759895325, 0.34867653250694275, 0.3399633467197418, 0.33091840147972107, 0.32679709792137146, 0.3256533741950989, 0.3206025958061218, 0.31062042713165283, 0.3137548863887787, 0.3117317855358124], "accuracy": [0.27380794286727905, 0.48672565817832947, 0.5650508403778076, 0.6223748326301575, 0.6647734642028809, 0.6960771083831787, 0.7223616242408752, 0.7341170310974121, 0.7445515990257263, 0.7582882046699524, 0.7633073329925537, 0.7733456492424011, 0.7794214487075806, 0.7898560166358948, 0.793422281742096, 0.8033285140991211, 0.8012151718139648, 0.8099326491355896, 0.8148196935653687, 0.8195747137069702, 0.8236692547798157, 0.8168009519577026, 0.8308017253875732, 0.8366134166717529, 0.833179235458374, 0.8432175517082214, 0.8448025584220886, 0.8482366800308228, 0.8507462739944458, 0.8540483713150024, 0.8525954484939575, 0.8570862412452698, 0.8551049828529358, 0.8615770936012268, 0.8650112152099609, 0.8664641380310059, 0.8684453964233398, 0.8755778670310974, 0.8730682730674744, 0.8714832663536072, 0.8732003569602966, 0.8745211958885193, 0.8745211958885193, 0.8767666220664978, 0.883238673210144, 0.8790120482444763, 0.8831065893173218, 0.8860124349594116, 0.8902390599250793, 0.8927486538887024, 0.889050304889679], "val_loss": [2.0385801792144775, 1.5144482851028442, 1.047194480895996, 0.8424697518348694, 0.7609360218048096, 0.7070906758308411, 0.6616626977920532, 0.62812340259552, 0.6040273308753967, 0.5788926482200623, 0.5606803894042969, 0.5465278029441833, 0.5330008268356323, 0.5217100381851196, 0.5128958225250244, 0.4997243285179138, 0.48875993490219116, 0.4822145998477936, 0.47384440898895264, 0.4673313796520233, 0.46634945273399353, 0.454134076833725, 0.44636502861976624, 0.43841487169265747, 0.43628233671188354, 0.4301273226737976, 0.42454081773757935, 0.42662718892097473, 0.41973909735679626, 0.41310155391693115, 0.4092009365558624, 0.4048309028148651, 0.40713635087013245, 0.4056639075279236, 0.40385890007019043, 0.3955715298652649, 0.3973578214645386, 0.39399462938308716, 0.38964053988456726, 0.38879337906837463, 0.38760140538215637, 0.38555029034614563, 0.38542065024375916, 0.38491901755332947, 0.3809177577495575, 0.37800273299217224, 0.37607064843177795, 0.3766900300979614, 0.37377461791038513, 0.37365567684173584, 0.3737774193286896], "val_accuracy": [0.5443333387374878, 0.6589999794960022, 0.6753333210945129, 0.7006666660308838, 0.7250000238418579, 0.7406666874885559, 0.7556666731834412, 0.7643333077430725, 0.7770000100135803, 0.7853333353996277, 0.7986666560173035, 0.8013333082199097, 0.8043333292007446, 0.8096666932106018, 0.8149999976158142, 0.8183333277702332, 0.8226666450500488, 0.8276666402816772, 0.8333333134651184, 0.8326666951179504, 0.8330000042915344, 0.8413333296775818, 0.8450000286102295, 0.8486666679382324, 0.8483333587646484, 0.8479999899864197, 0.8519999980926514, 0.8473333120346069, 0.8533333539962769, 0.8546666502952576, 0.8550000190734863, 0.8619999885559082, 0.8579999804496765, 0.859666645526886, 0.8573333621025085, 0.8629999756813049, 0.8569999933242798, 0.859666645526886, 0.8629999756813049, 0.862333357334137, 0.8646666407585144, 0.8643333315849304, 0.8693333268165588, 0.8653333187103271, 0.8686666488647461, 0.8709999918937683, 0.8646666407585144, 0.8706666827201843, 0.8690000176429749, 0.8686666488647461, 0.8696666955947876]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 9, 3, 6, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [2, 2, 9, 8, 3, 5, 5, 6], [0, 2, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4, 8, 3, 6, 5, 6, 7, 0, 6, 6, 1, 3, 4, 8, 7, 5, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7, 0, 0, 7, 3, 1, 4, 2, 4, 1], [16, 14, 96, 99, 61, 1, 49, 69, 67]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 0, 1, 12, 8, 4, 2, 2, 1, 1, 1, 48, 28, 20, 9], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(tf.math.square(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(beta, alpha)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(sigma, tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.pow(tf.math.sqrt(alpha), beta)))), tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.math.divide_no_nan(tf.math.add(grad, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), grad))))), tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.pow(sigma, tf.math.sqrt(alpha)), tf.math.add(grad, beta)), tf.math.square(grad)), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 4, 5], [0, 2, 0, 0, 2], [78, 16, 80], [0, 1], [0], [4], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [6, 3, 3, 1, 8, 1, 4, 1, 3, 2, 8, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 3, 32, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 13, 8, 5, 3, 2, 1, 1, 0, 22, 12, 10, 6], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.square(beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.math.pow(tf.math.subtract(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.math.sqrt(alpha))))), beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [75, 80], [0, 1], [0], [0], [99], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 5, 1, 1, 4, 1, 4, 2, 8, 1, 4, 0], [1, 0, 0, 3, 4, 0, 3, 1, 2, 4, 4, 6], [16, 99, 96, 65, 61, 40]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 26, 14, 12, 3], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.multiply(tf.math.multiply(tf.math.square(tf.math.subtract(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.subtract(sigma, grad)), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), alpha)), beta)), grad)), tf.math.negative(grad)), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [8], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 2, 1, 4, 8, 8, 2, 7, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2, 7], [16, 99, 70, 99, 1, 1]], "fitness": -0.09000000357627869, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 26, 14, 12, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma)))), tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, beta)))), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.pow(beta, grad)))", "other_info": {"loss": [2.3095650672912598, 2.309204339981079, 2.3114013671875, 2.310480833053589, 2.309096097946167, 2.3104710578918457], "accuracy": [0.08955223858356476, 0.0944393053650856, 0.09034473448991776, 0.09219389408826828, 0.09206181764602661, 0.08968432247638702], "val_loss": [2.3091561794281006, 2.3091561794281006, 2.3091561794281006, 2.3091561794281006, 2.3091561794281006, 2.3091561794281006], "val_accuracy": [0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024]}}]