[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8628571629524231, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2233965396881104, 1.871553659439087, 1.4094009399414062, 1.1005516052246094, 0.9401759505271912, 0.8501242399215698, 0.7799935340881348, 0.7254751324653625, 0.6983294486999512, 0.6585213541984558, 0.6422692537307739, 0.6163234114646912, 0.5924384593963623, 0.5738509893417358, 0.5670478343963623, 0.5375195145606995, 0.53359055519104, 0.5156062245368958, 0.507877767086029, 0.4931055009365082, 0.4920581579208374, 0.48318493366241455, 0.46408024430274963, 0.46717146039009094, 0.4502961039543152, 0.4435518682003021, 0.4317281246185303, 0.419718861579895, 0.4232305586338043, 0.40251901745796204, 0.4040299952030182, 0.394834041595459, 0.3804803490638733, 0.37963563203811646, 0.3789091110229492, 0.3776687979698181, 0.37236639857292175, 0.35704803466796875, 0.3545842468738556, 0.35108640789985657, 0.3438032269477844, 0.34348493814468384, 0.34030595421791077, 0.33246007561683655, 0.3295316994190216, 0.3221428394317627, 0.3116024434566498, 0.30723363161087036, 0.30329251289367676, 0.30288606882095337, 0.29096168279647827, 0.2922772169113159, 0.2909724712371826, 0.28760582208633423, 0.2757072448730469, 0.2766903042793274, 0.27706682682037354, 0.2763097584247589, 0.25941625237464905, 0.26340097188949585, 0.26502683758735657, 0.2563393712043762], "accuracy": [0.278959184885025, 0.48064985871315, 0.559371292591095, 0.6126006841659546, 0.665830135345459, 0.695813000202179, 0.7174745798110962, 0.7371549606323242, 0.7479857206344604, 0.7555144429206848, 0.7685906887054443, 0.7724210619926453, 0.7874785661697388, 0.7917051911354065, 0.7977809906005859, 0.8084797263145447, 0.8058380484580994, 0.8162726163864136, 0.8153480291366577, 0.8211596608161926, 0.8219521641731262, 0.8276317715644836, 0.8334434032440186, 0.828820526599884, 0.8399154543876648, 0.8409721255302429, 0.8490291833877563, 0.8510104417800903, 0.8479725122451782, 0.8548408150672913, 0.8536521196365356, 0.8610487580299377, 0.8603883385658264, 0.8626337051391602, 0.8659358024597168, 0.8623695969581604, 0.8656716346740723, 0.8721436858177185, 0.8741249442100525, 0.8772949576377869, 0.8761062026023865, 0.8774270415306091, 0.8790120482444763, 0.8809932470321655, 0.8796724081039429, 0.884691596031189, 0.8854840993881226, 0.8910315632820129, 0.8894465565681458, 0.8897107243537903, 0.8951261639595032, 0.8911636471748352, 0.9005415439605713, 0.8949940800666809, 0.8994848728179932, 0.9014661312103271, 0.9000132083892822, 0.9009377956390381, 0.9066173434257507, 0.9027869701385498, 0.9074098467826843, 0.9080702662467957], "val_loss": [2.04231858253479, 1.527635097503662, 1.0638961791992188, 0.8618531823158264, 0.7711005806922913, 0.7160437703132629, 0.6737626791000366, 0.6424683332443237, 0.6162025332450867, 0.5985678434371948, 0.576901912689209, 0.5585659742355347, 0.5434145331382751, 0.5340790748596191, 0.5190737247467041, 0.5122257471084595, 0.5008038878440857, 0.4941980242729187, 0.48858293890953064, 0.48314720392227173, 0.475211501121521, 0.47002771496772766, 0.4566798210144043, 0.4567427635192871, 0.44629383087158203, 0.43902963399887085, 0.43358731269836426, 0.42944803833961487, 0.4251534938812256, 0.4222414195537567, 0.41959357261657715, 0.41287368535995483, 0.40831810235977173, 0.4061630964279175, 0.40468984842300415, 0.4016163647174835, 0.398337721824646, 0.3957967460155487, 0.39347273111343384, 0.3928220272064209, 0.3906838893890381, 0.3863026797771454, 0.392121285200119, 0.38864022493362427, 0.3847116231918335, 0.3821472227573395, 0.3793109059333801, 0.37718668580055237, 0.3790634274482727, 0.37621191143989563, 0.3729690611362457, 0.37412235140800476, 0.3728352189064026, 0.376313716173172, 0.3676382601261139, 0.3672865331172943, 0.36397483944892883, 0.3662841320037842, 0.3667600154876709, 0.3613959848880768, 0.36582455039024353, 0.36410409212112427], "val_accuracy": [0.5270000100135803, 0.637666642665863, 0.6656666398048401, 0.6936666369438171, 0.7163333296775818, 0.7360000014305115, 0.7506666779518127, 0.753333330154419, 0.7670000195503235, 0.7733333110809326, 0.7806666493415833, 0.7916666865348816, 0.7973333597183228, 0.7986666560173035, 0.8043333292007446, 0.8063333630561829, 0.8153333067893982, 0.8206666707992554, 0.8149999976158142, 0.8176666498184204, 0.8286666870117188, 0.8230000138282776, 0.8360000252723694, 0.8356666564941406, 0.8360000252723694, 0.8373333215713501, 0.8416666388511658, 0.843666672706604, 0.8479999899864197, 0.847000002861023, 0.8506666421890259, 0.8500000238418579, 0.8569999933242798, 0.8533333539962769, 0.8576666712760925, 0.8576666712760925, 0.8573333621025085, 0.8606666922569275, 0.8633333444595337, 0.8576666712760925, 0.8603333234786987, 0.8650000095367432, 0.8573333621025085, 0.8610000014305115, 0.8619999885559082, 0.8659999966621399, 0.8656666874885559, 0.8693333268165588, 0.8663333058357239, 0.8696666955947876, 0.871999979019165, 0.8690000176429749, 0.8673333525657654, 0.8666666746139526, 0.8726666569709778, 0.871666669845581, 0.875333309173584, 0.8743333220481873, 0.8726666569709778, 0.874666690826416, 0.8743333220481873, 0.8743333220481873]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 0], [39, 39], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 2, 3, 0, 3, 5], [3, 2, 0, 3, 5], [16, 16], [0, 1], [9], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 2, 4, 8, 1, 4, 1, 1, 2, 3], [1, 0, 0, 2, 0, 0, 3, 1, 0, 0, 1], [16, 99, 96, 45, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(tf.math.multiply(beta, tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.subtract(tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, alpha)), tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), alpha))))", "other_info": {"loss": [1.269617565630464e+16, 3.770484306632245e+18, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.10038304328918457, 0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.604220622072709e+17, 1.5342934898683937e+19, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}, "mapping_values": [1, 1, 0, 1, 1, 11, 6, 5, 1, 1, 1, 0, 1, 22, 11, 11, 6], "tree_depth": 17}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39, 65], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [57, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 2, 3, 6, 8, 1, 5, 2, 1, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 10, 6, 4, 2, 1, 0, 1, 1, 15, 8, 7, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [694673664.0, 2633884416.0, 4273911808.0, 5542989312.0, 6637001728.0, 7689203712.0], "accuracy": [0.09760929644107819, 0.09945846349000931, 0.1010434553027153, 0.10196803510189056, 0.10460969805717468, 0.1014397069811821], "val_loss": [1440765696.0, 2772765696.0, 3863224064.0, 4796852736.0, 5620061184.0, 6360669696.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 8, 3, 0, 4], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 2], [0, 1, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 5, 3, 6, 8, 8, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 4, 2, 0], [16, 99, 54, 99, 61, 1]], "fitness": -0.09542857110500336, "mapping_values": [1, 3, 2, 1, 1, 7, 4, 3, 1, 2, 1, 1, 1, 10, 6, 4, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(sigma))", "other_info": {"loss": [2.3098340034484863, 2.3096847534179688, 2.310049057006836, 2.3092591762542725, 2.3097445964813232, 2.309326171875], "accuracy": [0.08796724677085876, 0.09576013684272766, 0.08611807972192764, 0.0952318087220192, 0.09008057415485382, 0.09074098616838455], "val_loss": [2.3087470531463623, 2.308706760406494, 2.308670997619629, 2.3086397647857666, 2.308609962463379, 2.308582305908203], "val_accuracy": [0.08966666460037231, 0.08933333307504654, 0.08866667002439499, 0.08833333104848862, 0.08833333104848862, 0.08933333307504654]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 3, 4, 4, 9, 3, 9, 2, 4], [0, 1, 0, 2, 2, 2, 1, 2], [39, 39, 1, 85], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 6, 3, 6], [0, 2, 0, 3, 0, 3], [16, 16, 71], [0, 1], [8], [0], [99], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 0, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 4, 0, 3, 1, 2, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.07914285361766815, "mapping_values": [1, 21, 13, 8, 4, 13, 7, 6, 3, 2, 1, 1, 1, 8, 4, 4, 3], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(tf.math.pow(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)))), grad)), tf.math.pow(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [3.452507528154317e+16, 3.997155552185549e+16, 3.975055797963981e+16, 3.912405969010688e+16, 3.884126186346906e+16, 3.923167009570816e+16], "accuracy": [0.08109892904758453, 0.0730418711900711, 0.07634394615888596, 0.07726852595806122, 0.07370228320360184, 0.07924976944923401], "val_loss": [2.808505099406541e+16, 2.808505099406541e+16, 2.808505099406541e+16, 2.808505099406541e+16, 2.808505099406541e+16, 2.808505099406541e+16], "val_accuracy": [0.07599999755620956, 0.07599999755620956, 0.07599999755620956, 0.07599999755620956, 0.07599999755620956, 0.07599999755620956]}}]