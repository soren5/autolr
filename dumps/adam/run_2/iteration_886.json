[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8725714087486267, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2212183475494385, 1.8651907444000244, 1.3921765089035034, 1.0757331848144531, 0.9311664700508118, 0.8415564298629761, 0.766411304473877, 0.7162880897521973, 0.691635251045227, 0.6556783318519592, 0.6319180130958557, 0.6058618426322937, 0.5884022116661072, 0.5772782564163208, 0.5546592473983765, 0.5434507131576538, 0.525246262550354, 0.5126265287399292, 0.5059899091720581, 0.48618143796920776, 0.49040552973747253, 0.4721927344799042, 0.47075191140174866, 0.4628262519836426, 0.44476932287216187, 0.4378912150859833, 0.43486613035202026, 0.4302704930305481, 0.41833460330963135, 0.4086203873157501, 0.4052865505218506, 0.40053409337997437, 0.3988826274871826, 0.3885273337364197, 0.38156062364578247, 0.37895771861076355, 0.37565362453460693, 0.3694533407688141, 0.35727837681770325, 0.3571406304836273, 0.3519981801509857, 0.3470920920372009, 0.34635478258132935, 0.33682164549827576, 0.3318430483341217, 0.33054742217063904, 0.3255034387111664, 0.3279504179954529, 0.3164959251880646, 0.3097994923591614, 0.30924269556999207, 0.2999061346054077, 0.29640987515449524, 0.28994935750961304, 0.285754919052124, 0.28619155287742615, 0.2811538577079773, 0.2781277000904083, 0.26643431186676025, 0.2649032771587372, 0.26168152689933777, 0.2615817189216614, 0.2609484791755676, 0.2542184591293335, 0.24871577322483063, 0.24382619559764862, 0.24511460959911346, 0.23728251457214355, 0.23171184957027435, 0.23621711134910583, 0.22717562317848206], "accuracy": [0.2665433883666992, 0.4803856909275055, 0.5667679309844971, 0.6279223561286926, 0.6713775992393494, 0.7016246318817139, 0.7214370369911194, 0.7400607466697693, 0.7429665923118591, 0.7556465268135071, 0.7708360552787781, 0.7790252566337585, 0.7836481332778931, 0.7902522683143616, 0.8012151718139648, 0.8026680946350098, 0.8087438941001892, 0.8166688680648804, 0.8115176558494568, 0.8232730031013489, 0.8208954930305481, 0.8319904804229736, 0.8284242749214172, 0.8319904804229736, 0.8359529972076416, 0.8408400416374207, 0.8421608805656433, 0.8424250483512878, 0.8474441766738892, 0.8529917001724243, 0.8494254350662231, 0.8525954484939575, 0.8499537706375122, 0.8574824929237366, 0.8601241707801819, 0.8642187118530273, 0.8668603897094727, 0.8660678863525391, 0.8673887252807617, 0.870030403137207, 0.8747853636741638, 0.874389111995697, 0.8768987059593201, 0.8768987059593201, 0.8779553771018982, 0.8796724081039429, 0.8802007436752319, 0.8811253309249878, 0.8836349248886108, 0.8833707571029663, 0.8850878477096558, 0.8910315632820129, 0.8928807377815247, 0.8939374089241028, 0.8931449055671692, 0.8952582478523254, 0.8957865834236145, 0.8965790271759033, 0.9030511379241943, 0.9039757251739502, 0.9022586345672607, 0.9026548862457275, 0.9041078090667725, 0.9096552729606628, 0.9101836085319519, 0.9100515246391296, 0.910711944103241, 0.9129573106765747, 0.9149385690689087, 0.9100515246391296, 0.9162594079971313], "val_loss": [2.0356533527374268, 1.5114073753356934, 1.044866681098938, 0.833705484867096, 0.7428663969039917, 0.6955773234367371, 0.6446044445037842, 0.612348735332489, 0.5911754369735718, 0.5674915909767151, 0.5473719835281372, 0.5334259271621704, 0.5191124081611633, 0.5057244300842285, 0.48993420600891113, 0.48641687631607056, 0.4757902920246124, 0.4637427031993866, 0.46104833483695984, 0.4471960961818695, 0.4482784867286682, 0.43625301122665405, 0.4327063262462616, 0.42534396052360535, 0.4226410388946533, 0.41627758741378784, 0.4109422564506531, 0.407513827085495, 0.4050021171569824, 0.4014570713043213, 0.3998791575431824, 0.39322003722190857, 0.39009517431259155, 0.3874738812446594, 0.38446664810180664, 0.3798561990261078, 0.3814825117588043, 0.37656885385513306, 0.38201433420181274, 0.37233665585517883, 0.3699396252632141, 0.36416369676589966, 0.3701224625110626, 0.36511194705963135, 0.36240023374557495, 0.3608594536781311, 0.3595041036605835, 0.3639580011367798, 0.35545608401298523, 0.3556481599807739, 0.3549966514110565, 0.34872472286224365, 0.35680001974105835, 0.35141289234161377, 0.3481605648994446, 0.3496396541595459, 0.3435443043708801, 0.34481364488601685, 0.35222020745277405, 0.34492069482803345, 0.3446010649204254, 0.34595686197280884, 0.34315672516822815, 0.3434444069862366, 0.3425164818763733, 0.3413027226924896, 0.3433588147163391, 0.3395062983036041, 0.34628593921661377, 0.33977949619293213, 0.34787067770957947], "val_accuracy": [0.5293333530426025, 0.656000018119812, 0.6776666641235352, 0.7013333439826965, 0.734666645526886, 0.7536666393280029, 0.7646666765213013, 0.7763333320617676, 0.7770000100135803, 0.79666668176651, 0.7983333468437195, 0.8119999766349792, 0.8169999718666077, 0.8263333439826965, 0.8270000219345093, 0.8309999704360962, 0.8286666870117188, 0.8423333168029785, 0.840666651725769, 0.846666693687439, 0.847000002861023, 0.8486666679382324, 0.8479999899864197, 0.8560000061988831, 0.859000027179718, 0.8513333201408386, 0.8579999804496765, 0.8550000190734863, 0.8576666712760925, 0.8640000224113464, 0.8613333106040955, 0.8650000095367432, 0.8646666407585144, 0.8636666536331177, 0.8683333396911621, 0.8696666955947876, 0.8700000047683716, 0.8696666955947876, 0.8666666746139526, 0.8723333477973938, 0.8736666440963745, 0.874666690826416, 0.8700000047683716, 0.8743333220481873, 0.8759999871253967, 0.8763333559036255, 0.8763333559036255, 0.8776666522026062, 0.8766666650772095, 0.8796666860580444, 0.8723333477973938, 0.8796666860580444, 0.878333330154419, 0.8816666603088379, 0.8786666393280029, 0.8796666860580444, 0.8826666474342346, 0.8853333592414856, 0.8853333592414856, 0.8826666474342346, 0.8856666684150696, 0.8806666731834412, 0.8849999904632568, 0.8836666941642761, 0.8843333125114441, 0.887333333492279, 0.8849999904632568, 0.8853333592414856, 0.8849999904632568, 0.8863333463668823, 0.8846666812896729]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 2, 3, 0, 2, 8, 3, 6, 7, 9, 8, 4, 7, 8, 6], [0, 1, 0, 2, 0, 3, 3, 2, 1, 2], [39, 39, 8, 80], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 2, 0, 3, 5], [0, 2, 0, 3], [16, 84], [0, 1], [5], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 8, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 3, 2, 0], [16, 99, 96, 99, 61, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 15, 10, 4, 10, 6, 4, 2, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))), tf.math.pow(grad, tf.math.add(grad, tf.math.sqrt(tf.math.divide_no_nan(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, sigma)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 24], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 0, 3], [51, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 5, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 8, 4, 4, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.3054251670837402, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [6, 9, 3, 0, 3, 7, 5, 3, 1, 7, 3, 1, 3, 6, 4, 3, 3, 7, 7, 1, 7, 2, 7, 2, 6, 7, 7, 4, 2, 6, 8, 6, 9, 2, 3, 7, 8, 7, 6, 8, 5, 9, 4, 4, 1, 6, 0, 2, 8, 8, 2, 7, 7, 4, 4, 3, 2, 8, 5, 4, 1, 0], [0, 1, 0, 2, 2, 1, 0, 0, 1, 1, 0, 0, 2, 3, 1, 1, 0, 2, 1, 1, 2, 1, 1, 3, 2, 2, 1, 1, 3, 0, 3, 3, 3, 3, 1, 1, 1, 2, 0, 2, 1, 3, 1, 1, 3], [39, 50, 87, 91, 60, 79, 99, 31, 63, 2, 27, 26], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [9, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 0, 4, 6, 2, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 9]], "fitness": -0.10000000149011612, "mapping_values": [1, 107, 62, 45, 12, 1, 1, 0, 1, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.multiply(grad, tf.math.subtract(tf.math.add(tf.math.multiply(grad, tf.math.subtract(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.subtract(alpha, tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(grad, tf.math.add(tf.math.pow(tf.math.add(tf.math.divide_no_nan(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.sqrt(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.divide_no_nan(alpha, tf.math.sqrt(tf.math.square(alpha))))), grad))))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.math.pow(tf.math.subtract(alpha, grad), tf.math.divide_no_nan(tf.math.negative(grad), grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(alpha))))))), grad), tf.math.add(tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad), grad)), tf.math.add(tf.math.pow(grad, grad), alpha)))), alpha), tf.math.pow(tf.math.multiply(alpha, grad), tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.square(tf.math.pow(tf.math.subtract(tf.math.negative(grad), alpha), grad))))))), alpha)), alpha), grad))))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [95.4248275756836, 11099.3466796875, 183174.0, 1295778.25, 5550227.5, 18398140.0], "accuracy": [0.09998679161071777, 0.09576013684272766, 0.09972262382507324, 0.0944393053650856, 0.10342095047235489, 0.10130762308835983], "val_loss": [818.1718139648438, 40265.43359375, 427998.75, 2326541.0, 8703611.0, 25656034.0], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 1, 0, 3, 5], [0, 1, 3, 3], [16, 16], [1, 1], [2], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 8, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 1, 0, 3, 1, 4, 0], [59, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 7, 4, 3, 1, 1, 0, 1, 1, 17, 9, 8, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), sigma), alpha)))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), alpha)", "other_info": {"loss": [2.303725481033325, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]