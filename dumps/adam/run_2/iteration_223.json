[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8557142615318298, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222522258758545, 1.8537999391555786, 1.381662368774414, 1.0732920169830322, 0.9263020753860474, 0.8288116455078125, 0.7668097615242004, 0.7205642461776733, 0.6743701100349426, 0.6519172787666321, 0.6329981088638306, 0.5964447259902954, 0.5868902206420898, 0.5663841962814331, 0.546383261680603, 0.5368831157684326, 0.5225740671157837, 0.5137032270431519, 0.5022279620170593, 0.49198466539382935, 0.48470863699913025, 0.470584511756897, 0.4657323360443115, 0.4491124451160431, 0.448794960975647, 0.43757307529449463, 0.4325578510761261, 0.422909140586853, 0.41522017121315, 0.4089539647102356, 0.40113434195518494, 0.3891878128051758, 0.3922435939311981, 0.3850060999393463, 0.36985743045806885, 0.3680054545402527, 0.3686104118824005, 0.3700837194919586, 0.3554016947746277, 0.3534824848175049, 0.34471678733825684, 0.3416963517665863, 0.3393946886062622, 0.33070316910743713, 0.32612600922584534, 0.3260763883590698, 0.32191070914268494], "accuracy": [0.2785629332065582, 0.48672565817832947, 0.5659754276275635, 0.6301677227020264, 0.6687359809875488, 0.6955488324165344, 0.7268524765968323, 0.735041618347168, 0.7585523724555969, 0.7647602558135986, 0.7726852297782898, 0.7841764688491821, 0.7858935594558716, 0.793422281742096, 0.8021397590637207, 0.8115176558494568, 0.8103289008140564, 0.8113855719566345, 0.8195747137069702, 0.8222163319587708, 0.8259146809577942, 0.8338396549224854, 0.8318583965301514, 0.8378021121025085, 0.8403117060661316, 0.8421608805656433, 0.8448025584220886, 0.843481719493866, 0.8525954484939575, 0.8507462739944458, 0.8562937378883362, 0.8580108284950256, 0.856689989566803, 0.8644828796386719, 0.8683133125305176, 0.8647470474243164, 0.8664641380310059, 0.8709549307823181, 0.8733324408531189, 0.870030403137207, 0.8720116019248962, 0.8750495314598083, 0.8776912093162537, 0.8821820020675659, 0.8784837126731873, 0.8795403242111206, 0.8823140859603882], "val_loss": [2.031569719314575, 1.4939066171646118, 1.0263558626174927, 0.8327609300613403, 0.7442944049835205, 0.6917896866798401, 0.6445793509483337, 0.6085941791534424, 0.5895225405693054, 0.5663971304893494, 0.5455175638198853, 0.524883508682251, 0.5112372636795044, 0.5010519027709961, 0.48694831132888794, 0.4778941571712494, 0.4679054915904999, 0.4596787095069885, 0.44987162947654724, 0.44362688064575195, 0.43942269682884216, 0.4304257035255432, 0.42610445618629456, 0.4217592477798462, 0.4094964861869812, 0.40771928429603577, 0.407932847738266, 0.4003998339176178, 0.39552661776542664, 0.3963165581226349, 0.3880345821380615, 0.3854879140853882, 0.38176223635673523, 0.37397441267967224, 0.3826635777950287, 0.37030062079429626, 0.3684714436531067, 0.3702961802482605, 0.3691352605819702, 0.36019471287727356, 0.36373811960220337, 0.3563861548900604, 0.3559891879558563, 0.35402393341064453, 0.35801583528518677, 0.35487520694732666, 0.3491867780685425], "val_accuracy": [0.5659999847412109, 0.6693333387374878, 0.6919999718666077, 0.7123333215713501, 0.7366666793823242, 0.7416666746139526, 0.7630000114440918, 0.7730000019073486, 0.7796666622161865, 0.7906666398048401, 0.8043333292007446, 0.8056666851043701, 0.8090000152587891, 0.8209999799728394, 0.8253333568572998, 0.8226666450500488, 0.8323333263397217, 0.8339999914169312, 0.8413333296775818, 0.8363333344459534, 0.8416666388511658, 0.8463333249092102, 0.8493333458900452, 0.8523333072662354, 0.8556666374206543, 0.8569999933242798, 0.8510000109672546, 0.8526666760444641, 0.8603333234786987, 0.859000027179718, 0.8613333106040955, 0.8619999885559082, 0.859333336353302, 0.8663333058357239, 0.8610000014305115, 0.8686666488647461, 0.8676666617393494, 0.871999979019165, 0.8700000047683716, 0.8733333349227905, 0.8700000047683716, 0.8763333559036255, 0.8743333220481873, 0.875, 0.8759999871253967, 0.8759999871253967, 0.875]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 9, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 3, 2, 3, 1, 2, 2, 0, 5, 4, 6, 1, 0, 2, 8, 7, 6, 2, 1, 9, 2, 2, 8, 7, 3, 2, 5, 1, 6, 3, 8, 1, 0, 4, 4, 2, 7, 3, 8, 4, 3, 1, 7, 4, 9, 0, 5, 4, 4, 8, 9], [0, 0, 2, 3, 4, 1, 3, 1, 2, 0, 4, 3, 7, 3, 3, 6, 7, 4, 7, 5, 3, 5, 7, 5, 6, 3, 4, 1, 6, 2, 5, 2, 4, 7, 3, 0, 7, 0, 1, 6, 5, 4], [16, 99, 96, 99, 61, 1, 33, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 6, 3, 3, 2, 1, 0, 1, 1, 103, 61, 42, 8], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(beta, sigma))), tf.math.subtract(grad, tf.math.pow(alpha, sigma)))), tf.math.add(tf.math.sqrt(tf.math.multiply(alpha, beta)), tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.add(tf.math.negative(tf.math.square(tf.math.pow(sigma, tf.math.divide_no_nan(tf.math.subtract(tf.math.negative(tf.math.add(tf.math.sqrt(grad), sigma)), tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(grad, tf.math.sqrt(tf.math.add(grad, tf.math.multiply(grad, tf.math.add(tf.math.square(grad), grad))))), tf.math.subtract(sigma, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.sqrt(tf.math.subtract(tf.math.negative(grad), tf.math.pow(grad, tf.math.pow(tf.math.add(grad, tf.math.add(tf.math.multiply(sigma, grad), tf.math.sqrt(tf.math.pow(tf.math.multiply(tf.math.subtract(alpha, grad), beta), grad)))), beta))))), tf.math.add(tf.math.pow(grad, grad), sigma))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.square(grad))))), tf.math.pow(tf.math.pow(tf.math.sqrt(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), alpha), grad)), grad)), grad))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 2, 3, 0, 3, 4, 4, 3, 4, 5, 5, 1, 4, 5, 8, 7, 6, 3, 6, 1, 5, 9], [0, 1, 0, 2, 2, 1, 1, 1, 2, 2, 3, 0, 3, 1], [39, 39, 37, 51], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 2, 4, 1, 4, 2, 8], [4, 0, 0, 4, 0, 0, 0, 2, 2, 0], [16, 99, 96, 10, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 36, 22, 14, 4, 6, 3, 3, 2, 2, 1, 1, 1, 20, 10, 10, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.multiply(tf.math.pow(tf.math.square(tf.math.square(grad)), tf.math.subtract(alpha, tf.math.pow(alpha, tf.math.square(alpha)))), tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, alpha)))))))), tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), beta), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [74.68827056884766, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.19416193664073944, 0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [18831.2578125, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 5], [0, 1, 2, 0], [39, 40], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 1, 1, 2, 3, 7, 0, 5], [0, 2, 0, 3, 5, 3, 5, 0, 4], [16, 16, 26], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 8, 4, 2, 8, 7, 4, 3, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0, 4, 2], [82, 31, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 1, 21, 12, 9, 3, 1, 0, 1, 1, 27, 15, 12, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.subtract(grad, tf.math.add(grad, tf.math.multiply(grad, tf.math.add(tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.square(grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.add(tf.math.pow(sigma, alpha), beta)), tf.math.multiply(tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad)))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 6, 0, 2], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 4, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 1, 0, 3, 1, 2, 0], [16, 99, 96, 43, 61, 1]], "fitness": -0.09942857176065445, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), alpha)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, alpha))", "other_info": {"loss": [2.308335304260254, 2.3097481727600098, 2.3097078800201416, 2.3080499172210693, 2.3084354400634766, 2.3099331855773926, 2.309129238128662, 2.3104360103607178], "accuracy": [0.09945846349000931, 0.09681680053472519, 0.09602430462837219, 0.09945846349000931, 0.09496764093637466, 0.09087307006120682, 0.0948355570435524, 0.09100515395402908], "val_loss": [2.3088788986206055, 2.308263063430786, 2.308115243911743, 2.30788516998291, 2.307767629623413, 2.3078231811523438, 2.3076789379119873, 2.3078856468200684], "val_accuracy": [0.08366666734218597, 0.0989999994635582, 0.10366666316986084, 0.10333333164453506, 0.10233332961797714, 0.0989999994635582, 0.0963333323597908, 0.09566666930913925]}}]