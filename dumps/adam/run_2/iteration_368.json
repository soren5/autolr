[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8679999709129333, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2229020595550537, 1.862384557723999, 1.3918251991271973, 1.0832386016845703, 0.919314980506897, 0.8317986130714417, 0.7695103287696838, 0.7134606838226318, 0.6874664425849915, 0.6561802625656128, 0.6338927149772644, 0.6036500930786133, 0.5908984541893005, 0.5775430202484131, 0.5606353878974915, 0.5408604741096497, 0.5336702466011047, 0.515195906162262, 0.5130512118339539, 0.49853020906448364, 0.4870089888572693, 0.4780195653438568, 0.46759259700775146, 0.4588710069656372, 0.45397132635116577, 0.447700560092926, 0.43631696701049805, 0.4343978464603424, 0.42375150322914124, 0.41248229146003723, 0.4124411642551422, 0.40128979086875916, 0.3922766447067261, 0.3820274770259857, 0.3841973841190338, 0.3864254057407379, 0.36485907435417175, 0.3714609444141388, 0.36420419812202454, 0.35564160346984863, 0.3538028299808502, 0.34649187326431274, 0.3401130735874176, 0.33544284105300903, 0.33435702323913574, 0.32803720235824585, 0.32050466537475586, 0.32254353165626526, 0.32203468680381775, 0.3131667971611023, 0.3052234947681427, 0.30623528361320496, 0.29120075702667236, 0.29541438817977905, 0.2840826213359833, 0.28353577852249146, 0.2792082726955414], "accuracy": [0.27420419454574585, 0.4843481779098511, 0.5563333630561829, 0.6239598393440247, 0.6707172393798828, 0.7028133869171143, 0.7215691208839417, 0.7411174178123474, 0.7498348951339722, 0.7559106945991516, 0.7643640041351318, 0.7827235460281372, 0.7843085527420044, 0.7895918488502502, 0.7967243194580078, 0.8033285140991211, 0.8079513907432556, 0.8150838613510132, 0.8129705190658569, 0.817461371421814, 0.8226125836372375, 0.828820526599884, 0.8285563588142395, 0.8354246616363525, 0.839519202709198, 0.8408400416374207, 0.8430854678153992, 0.8437458872795105, 0.8475762605667114, 0.8498216867446899, 0.8516708612442017, 0.8565579056739807, 0.8582749962806702, 0.8628978729248047, 0.8570862412452698, 0.859199583530426, 0.8668603897094727, 0.8664641380310059, 0.8696341514587402, 0.8717474341392517, 0.8688416481018066, 0.8741249442100525, 0.8767666220664978, 0.8795403242111206, 0.8792761564254761, 0.8808611631393433, 0.8819178342819214, 0.8835028409957886, 0.8825782537460327, 0.8864086866378784, 0.8906353116035461, 0.889050304889679, 0.8920882344245911, 0.8907673954963684, 0.8997490406036377, 0.895918607711792, 0.900409460067749], "val_loss": [2.0370962619781494, 1.507078766822815, 1.0391368865966797, 0.8325240612030029, 0.7458747029304504, 0.6986120343208313, 0.6530519127845764, 0.6218669414520264, 0.5980566143989563, 0.5753453969955444, 0.5581796169281006, 0.5404680371284485, 0.5327428579330444, 0.5222136974334717, 0.5028874278068542, 0.4924236536026001, 0.48347413539886475, 0.4768601059913635, 0.4641418755054474, 0.458120733499527, 0.4550209939479828, 0.4445975422859192, 0.4414431154727936, 0.43725910782814026, 0.43018490076065063, 0.4248603880405426, 0.4209805428981781, 0.4150982201099396, 0.4117831885814667, 0.40446776151657104, 0.4030969738960266, 0.40092015266418457, 0.395713210105896, 0.390516072511673, 0.39176616072654724, 0.3866707384586334, 0.3857441544532776, 0.3857051730155945, 0.38019368052482605, 0.37790873646736145, 0.3756285309791565, 0.3793957531452179, 0.37327542901039124, 0.37108486890792847, 0.3723430931568146, 0.3673710227012634, 0.3720168471336365, 0.37504297494888306, 0.3669564127922058, 0.36467674374580383, 0.3638027608394623, 0.3582800030708313, 0.36073607206344604, 0.35937097668647766, 0.3587961494922638, 0.3622836172580719, 0.3629191815853119], "val_accuracy": [0.5083333253860474, 0.6673333048820496, 0.6833333373069763, 0.7110000252723694, 0.7350000143051147, 0.7473333477973938, 0.765999972820282, 0.7673333287239075, 0.7766666412353516, 0.7940000295639038, 0.7889999747276306, 0.8050000071525574, 0.8046666383743286, 0.809333324432373, 0.8226666450500488, 0.8240000009536743, 0.8246666789054871, 0.8330000042915344, 0.8379999995231628, 0.8396666646003723, 0.8316666483879089, 0.8429999947547913, 0.8456666469573975, 0.843999981880188, 0.8479999899864197, 0.8483333587646484, 0.8500000238418579, 0.8519999980926514, 0.8543333411216736, 0.8556666374206543, 0.8569999933242798, 0.856333315372467, 0.862333357334137, 0.8613333106040955, 0.862333357334137, 0.862666666507721, 0.8656666874885559, 0.8610000014305115, 0.8663333058357239, 0.8646666407585144, 0.8669999837875366, 0.8686666488647461, 0.8703333139419556, 0.871999979019165, 0.8736666440963745, 0.8713333606719971, 0.871999979019165, 0.8709999918937683, 0.871666669845581, 0.8759999871253967, 0.871999979019165, 0.878000020980835, 0.878000020980835, 0.874666690826416, 0.875333309173584, 0.8763333559036255, 0.878000020980835]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [0, 2, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 0, 1, 2, 1, 4, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 99, 27, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha))), sigma), alpha)))", "other_info": {"loss": [2.763838052749634, 3.6697044372558594, 5.0021891593933105, 5.692119598388672, 6.361238956451416, 7.111289978027344], "accuracy": [0.1022322028875351, 0.09800554811954498, 0.10157178342342377, 0.10289261490106583, 0.09813763201236725, 0.09866596013307571], "val_loss": [2.840829372406006, 3.8216238021850586, 4.467759609222412, 5.025284290313721, 5.803289890289307, 6.234478950500488], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 3, 0, 8, 5], [0, 2, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [6, 3, 3, 2, 9, 1, 4, 1, 4, 2, 8, 7, 1, 7, 9], [0, 0, 0, 3, 0, 0, 3, 2, 2, 0, 7], [16, 99, 96, 99, 61, 1, 36, 60]], "fitness": -0.09285714477300644, "mapping_values": [1, 10, 5, 5, 2, 6, 4, 2, 1, 2, 1, 1, 1, 26, 15, 11, 8], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), sigma))))), tf.math.sqrt(tf.math.add(beta, beta))), tf.math.subtract(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), grad)))", "other_info": {"loss": [2.309405565261841, 2.3090569972991943, 2.308824300765991, 2.3098371028900146, 2.309648275375366, 2.309528350830078], "accuracy": [0.09325055778026581, 0.09642054885625839, 0.09681680053472519, 0.09747721254825592, 0.0948355570435524, 0.09800554811954498], "val_loss": [2.3088502883911133, 2.3088502883911133, 2.3088502883911133, 2.3088502883911133, 2.3088502883911133, 2.3088502883911133], "val_accuracy": [0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 4, 8], [0, 1, 0, 2, 0], [39, 39, 68], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 9, 3, 2, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 5, 6, 0, 1, 4, 9, 4, 2, 8], [0, 0, 0, 3, 0, 3, 3, 1, 2, 0], [16, 99, 96, 84, 61, 1]], "fitness": -0.09142857044935226, "mapping_values": [1, 12, 7, 5, 3, 2, 2, 0, 1, 1, 0, 1, 1, 13, 8, 5, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.sqrt(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.311102867126465, 2.3103599548339844, 2.3115506172180176, 2.3107879161834717, 2.309628963470459, 2.3107810020446777], "accuracy": [0.08889182657003403, 0.09153348207473755, 0.0812310129404068, 0.08928807079792023, 0.09259014576673508, 0.09192973375320435], "val_loss": [2.3085334300994873, 2.308533191680908, 2.308533191680908, 2.308532953262329, 2.30853271484375, 2.308532476425171], "val_accuracy": [0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [9, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [3, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 1, 1], [0, 5, 6], [0, 0], [79, 97], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 5, 1, 2, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.08371428400278091, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3082282543182373, 2.3080599308013916, 2.3085813522338867, 2.307920217514038, 2.309175729751587, 2.3085455894470215], "accuracy": [0.09747721254825592, 0.09285431355237961, 0.09694888442754745, 0.09509972482919693, 0.09840179979801178, 0.09470347315073013], "val_loss": [2.3086981773376465, 2.308593511581421, 2.308529853820801, 2.3084824085235596, 2.3084473609924316, 2.3084187507629395], "val_accuracy": [0.08766666799783707, 0.08699999749660492, 0.0846666693687439, 0.08399999886751175, 0.0820000022649765, 0.08266666531562805]}, "mapping_values": [1, 1, 1, 0, 1, 8, 4, 4, 2, 5, 3, 2, 2, 13, 7, 6, 5], "tree_depth": 18}]