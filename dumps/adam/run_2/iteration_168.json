[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8557142615318298, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2205944061279297, 1.8600231409072876, 1.3848483562469482, 1.0882176160812378, 0.942915141582489, 0.8303949236869812, 0.7659553289413452, 0.7142943739891052, 0.6912459135055542, 0.6505522727966309, 0.6177396178245544, 0.598858118057251, 0.5805914998054504, 0.5632346272468567, 0.5468380451202393, 0.5324344038963318, 0.5200526118278503, 0.50861656665802, 0.4932084381580353, 0.47742587327957153, 0.470842182636261, 0.4578370451927185, 0.4493486285209656, 0.4394298493862152, 0.4377259612083435, 0.42252296209335327, 0.4203346073627472, 0.420979768037796, 0.4133213460445404, 0.4031379222869873, 0.39134883880615234, 0.3894801735877991, 0.3766370117664337, 0.38100504875183105, 0.36949506402015686, 0.3629820644855499, 0.36514830589294434, 0.35209956765174866, 0.358376145362854, 0.3454463481903076, 0.3373698890209198, 0.3364090919494629, 0.3310208320617676], "accuracy": [0.2813366651535034, 0.4810461103916168, 0.5635979175567627, 0.6243560910224915, 0.6649055480957031, 0.7079645991325378, 0.7248712182044983, 0.746268630027771, 0.7473253011703491, 0.7646281719207764, 0.7823272943496704, 0.7824593782424927, 0.7910447716712952, 0.7973847389221191, 0.8025360107421875, 0.8047813773155212, 0.8158763647079468, 0.817461371421814, 0.8191784620285034, 0.8297450542449951, 0.8333113193511963, 0.8359529972076416, 0.8389908671379089, 0.8426892161369324, 0.8433496356010437, 0.8500858545303345, 0.8512746095657349, 0.8482366800308228, 0.8536521196365356, 0.852859616279602, 0.8621054291725159, 0.863558292388916, 0.8661999702453613, 0.8613129258155823, 0.86553955078125, 0.8714832663536072, 0.8677849769592285, 0.8751816153526306, 0.8714832663536072, 0.8728041052818298, 0.8799365758895874, 0.8779553771018982, 0.8858803510665894], "val_loss": [2.039783477783203, 1.5200176239013672, 1.0614334344863892, 0.8539677858352661, 0.7653504014015198, 0.7026306986808777, 0.6559317708015442, 0.6276541948318481, 0.5958759784698486, 0.5708743333816528, 0.5533503293991089, 0.5401095151901245, 0.5205612182617188, 0.5098082423210144, 0.49719250202178955, 0.4877016544342041, 0.4773009419441223, 0.4700362980365753, 0.4590105414390564, 0.4530770778656006, 0.44618281722068787, 0.4393102526664734, 0.43167436122894287, 0.43054214119911194, 0.43607884645462036, 0.4236324727535248, 0.41477030515670776, 0.417940229177475, 0.4094676077365875, 0.4038768708705902, 0.40476611256599426, 0.39515796303749084, 0.397072970867157, 0.3902425169944763, 0.3943556249141693, 0.3867567479610443, 0.38635021448135376, 0.38185054063796997, 0.37982872128486633, 0.3760385811328888, 0.37573906779289246, 0.3761051297187805, 0.37603357434272766], "val_accuracy": [0.5166666507720947, 0.6506666541099548, 0.6786666512489319, 0.6956666707992554, 0.7203333377838135, 0.7400000095367432, 0.7509999871253967, 0.7576666474342346, 0.7736666798591614, 0.7833333611488342, 0.7916666865348816, 0.8016666769981384, 0.8073333501815796, 0.8103333115577698, 0.8133333325386047, 0.8240000009536743, 0.8286666870117188, 0.8296666741371155, 0.8323333263397217, 0.8366666436195374, 0.8389999866485596, 0.8443333506584167, 0.847000002861023, 0.843999981880188, 0.8403333425521851, 0.8473333120346069, 0.8543333411216736, 0.8453333377838135, 0.8516666889190674, 0.8569999933242798, 0.8553333282470703, 0.8606666922569275, 0.8576666712760925, 0.8619999885559082, 0.859666645526886, 0.8613333106040955, 0.8576666712760925, 0.8663333058357239, 0.862666666507721, 0.8646666407585144, 0.8663333058357239, 0.8653333187103271, 0.8633333444595337]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 2, 3, 0, 3, 7, 6, 4, 5, 5, 0, 2, 7, 2, 4, 8, 7, 1, 8, 4, 0, 4, 6, 9, 2, 2, 0, 8, 2, 3, 1, 9, 2, 4, 0, 7, 6, 6, 2, 8, 9, 8, 5, 3, 2, 9, 0, 3, 9, 7, 1, 9, 9, 9, 4, 9], [0, 1, 0, 2, 3, 3, 1, 2, 3, 0, 3, 1, 1, 1, 1, 2, 3, 1, 3, 0, 3, 2, 2, 3], [39, 39, 87, 54, 48, 45, 85, 82, 98, 58, 57, 55, 26], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [4, 16], [0, 0, 1], [0, 8], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [6, 3, 5, 6, 8, 6, 4, 1, 4, 2, 8, 6, 2, 0], [0, 0, 3, 3, 0, 0, 3, 1, 2, 1, 0], [16, 99, 96, 99, 61, 55]], "fitness": -0.10000000149011612, "mapping_values": [1, 80, 56, 24, 13, 10, 6, 4, 2, 3, 2, 1, 0, 25, 14, 11, 5], "tree_depth": 60, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.math.square(tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.add(tf.math.subtract(grad, grad), tf.math.sqrt(tf.math.pow(grad, tf.math.negative(tf.math.pow(alpha, tf.math.divide_no_nan(grad, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(grad, tf.math.add(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.add(grad, tf.math.multiply(tf.math.subtract(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(alpha)), tf.math.square(tf.math.multiply(tf.math.add(grad, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.negative(alpha)), grad)))))))), tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), grad))))), grad), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, beta), alpha)))))), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 2, 3, 0, 3, 6, 9, 2, 4, 2, 5, 1, 3, 5, 3, 4, 1, 4, 8, 3], [0, 0, 0, 2, 0, 0, 2, 3, 2, 0, 3, 2, 1, 0, 2], [39, 39, 27, 73, 62, 40, 50, 69], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 35, 20, 15, 8, 1, 0, 1, 1, 2, 1, 1, 0, 22, 12, 10, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.subtract(tf.math.multiply(tf.math.square(tf.math.multiply(grad, grad)), tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad), grad), alpha)), tf.math.sqrt(tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(grad, sigma), tf.math.sqrt(tf.math.sqrt(alpha)))))), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 2, 5, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1, 0, 0, 1, 1, 1], [6, 4, 4], [0, 4, 4, 1], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 3, 3, 6, 8, 1, 4, 1, 1, 2, 8, 7], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [68, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 6, 4, 2, 1, 7, 3, 4, 1, 22, 12, 10, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(grad, grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.add(alpha, beta))), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 6], [0, 1, 0, 1], [80, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 8, 3, 0, 3, 5], [0, 2, 0, 3], [4, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 9, 1, 4, 1, 4, 2, 8], [0, 0, 0, 1, 0, 0, 3, 1, 2, 0], [16, 99, 47, 99, 61, 1]], "fitness": -0.09028571099042892, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 1, 9, 5, 4, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), alpha), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.310295581817627, 2.3096084594726562, 2.310192584991455, 2.310455083847046, 2.3098509311676025, 2.3099400997161865], "accuracy": [0.09351472556591034, 0.08875974267721176, 0.0878351628780365, 0.08994849026203156, 0.0882314071059227, 0.09245806187391281], "val_loss": [2.3091282844543457, 2.3091282844543457, 2.3091282844543457, 2.3091282844543457, 2.3091282844543457, 2.3091282844543457], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}]