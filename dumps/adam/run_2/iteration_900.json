[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8665714263916016, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2216222286224365, 1.8608454465866089, 1.3859974145889282, 1.0834985971450806, 0.9301342964172363, 0.8327052593231201, 0.7742936015129089, 0.7163557410240173, 0.6807442903518677, 0.6580387949943542, 0.6250997185707092, 0.6078447103500366, 0.5896228551864624, 0.5726302266120911, 0.5593618154525757, 0.5414308905601501, 0.5318340063095093, 0.5142635107040405, 0.5047007203102112, 0.49784374237060547, 0.47955384850502014, 0.4745495021343231, 0.46067798137664795, 0.4580846130847931, 0.44758906960487366, 0.4414437711238861, 0.43154680728912354, 0.42584091424942017, 0.42498543858528137, 0.4155126214027405, 0.3993240296840668, 0.40557995438575745, 0.39141684770584106, 0.3878768980503082, 0.39818528294563293, 0.3878178596496582, 0.37460848689079285, 0.36950793862342834, 0.35506993532180786, 0.34874480962753296, 0.3504071831703186, 0.3469950556755066, 0.342132568359375, 0.3331230580806732, 0.3352943956851959, 0.32515212893486023, 0.3201706111431122, 0.32150816917419434, 0.3073471784591675, 0.3104093074798584, 0.30994343757629395, 0.30443572998046875, 0.2993088364601135, 0.2924562096595764, 0.2918633818626404, 0.28632470965385437, 0.2819938361644745, 0.27625003457069397, 0.27625906467437744, 0.27373114228248596, 0.2673018276691437, 0.25495606660842896, 0.26344335079193115, 0.25686028599739075, 0.25428274273872375, 0.24613817036151886, 0.24691078066825867, 0.24167703092098236, 0.23755519092082977, 0.22955606877803802, 0.2281709462404251, 0.22806662321090698, 0.2271692454814911], "accuracy": [0.2782987654209137, 0.49570730328559875, 0.5711266398429871, 0.620261549949646, 0.6672830581665039, 0.707568347454071, 0.7231541275978088, 0.7485140562057495, 0.7536653280258179, 0.7655527591705322, 0.7759873270988464, 0.7802139520645142, 0.7884030938148499, 0.796328067779541, 0.8037247657775879, 0.8017435073852539, 0.8086118102073669, 0.8178576231002808, 0.819442629814148, 0.8235371708869934, 0.8273676037788391, 0.82683926820755, 0.8314621448516846, 0.834632158279419, 0.841500461101532, 0.8425571322441101, 0.846387505531311, 0.8471800088882446, 0.8486329317092896, 0.8508783578872681, 0.8564258217811584, 0.8581429123878479, 0.8621054291725159, 0.8595958352088928, 0.8543124794960022, 0.8609166741371155, 0.8668603897094727, 0.867520809173584, 0.8746532797813416, 0.872407853603363, 0.8717474341392517, 0.8746532797813416, 0.8754457831382751, 0.8809932470321655, 0.8805969953536987, 0.8829745054244995, 0.8835028409957886, 0.8824461698532104, 0.8891823887825012, 0.8858803510665894, 0.8842953443527222, 0.8897107243537903, 0.8883898854255676, 0.8931449055671692, 0.8965790271759033, 0.8963148593902588, 0.8992207050323486, 0.9012019634246826, 0.8976356983184814, 0.9017302989959717, 0.9014661312103271, 0.9075419306755066, 0.9029190540313721, 0.9060890078544617, 0.9074098467826843, 0.9111081957817078, 0.9070135951042175, 0.9116365313529968, 0.91124027967453, 0.9137498140335083, 0.9178444147109985, 0.9192973375320435, 0.9174481630325317], "val_loss": [2.037557363510132, 1.5142929553985596, 1.0473164319992065, 0.8428226113319397, 0.7514897584915161, 0.7099130749702454, 0.654819130897522, 0.6192626357078552, 0.5948785543441772, 0.5783109664916992, 0.5544403195381165, 0.5515586733818054, 0.5265648365020752, 0.5139765739440918, 0.5096858143806458, 0.4983876645565033, 0.48719483613967896, 0.4752451479434967, 0.46980020403862, 0.46229875087738037, 0.4545160233974457, 0.4495489001274109, 0.44281119108200073, 0.43807968497276306, 0.4366183280944824, 0.42665648460388184, 0.4205422103404999, 0.4130483865737915, 0.4178285598754883, 0.40310022234916687, 0.40584659576416016, 0.40004870295524597, 0.39726293087005615, 0.39760807156562805, 0.39734408259391785, 0.3894517123699188, 0.3892703056335449, 0.3849513828754425, 0.37912166118621826, 0.37561628222465515, 0.3749418556690216, 0.3747381269931793, 0.36910977959632874, 0.3733655512332916, 0.36984890699386597, 0.3651629090309143, 0.3614380359649658, 0.3642313778400421, 0.36023181676864624, 0.3577765226364136, 0.36064717173576355, 0.3604976534843445, 0.35233423113822937, 0.35378268361091614, 0.35451892018318176, 0.3526061177253723, 0.34815624356269836, 0.34999918937683105, 0.34631574153900146, 0.34927043318748474, 0.3430978059768677, 0.3434092104434967, 0.34281817078590393, 0.33969974517822266, 0.3439035713672638, 0.3384212255477905, 0.3389112651348114, 0.3377645015716553, 0.3430175483226776, 0.33707135915756226, 0.3433094620704651, 0.3375120759010315, 0.3431621789932251], "val_accuracy": [0.5483333468437195, 0.6536666750907898, 0.6793333292007446, 0.7096666693687439, 0.7333333492279053, 0.7473333477973938, 0.7593333125114441, 0.768666684627533, 0.7786666750907898, 0.7820000052452087, 0.7883333563804626, 0.7906666398048401, 0.8046666383743286, 0.8116666674613953, 0.8040000200271606, 0.8116666674613953, 0.8240000009536743, 0.824999988079071, 0.8246666789054871, 0.8276666402816772, 0.8360000252723694, 0.8316666483879089, 0.8410000205039978, 0.8399999737739563, 0.8429999947547913, 0.846666693687439, 0.8453333377838135, 0.8506666421890259, 0.8486666679382324, 0.8560000061988831, 0.8546666502952576, 0.8556666374206543, 0.8566666841506958, 0.8569999933242798, 0.8560000061988831, 0.8583333492279053, 0.8579999804496765, 0.8586666584014893, 0.8643333315849304, 0.8636666536331177, 0.8646666407585144, 0.8643333315849304, 0.8656666874885559, 0.8673333525657654, 0.8676666617393494, 0.8709999918937683, 0.8713333606719971, 0.8713333606719971, 0.8723333477973938, 0.8723333477973938, 0.8730000257492065, 0.8713333606719971, 0.871999979019165, 0.875333309173584, 0.8743333220481873, 0.8723333477973938, 0.8790000081062317, 0.8769999742507935, 0.8790000081062317, 0.8796666860580444, 0.8796666860580444, 0.8809999823570251, 0.878000020980835, 0.8813333511352539, 0.8799999952316284, 0.8790000081062317, 0.8823333382606506, 0.8846666812896729, 0.8806666731834412, 0.8836666941642761, 0.8846666812896729, 0.8823333382606506, 0.8833333253860474]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 2, 3, 6], [0, 1, 0, 2, 2, 0, 3], [39, 39, 24], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 9, 2, 7, 3, 6], [0, 2, 0, 3, 1, 2], [16, 16, 43], [0, 1], [0], [0], [43], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 6, 1, 4, 2, 2], [0, 0, 0, 2, 0, 0, 3, 1, 2, 0], [16, 99, 96, 58, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 3, 15, 9, 6, 3, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad))), tf.math.divide_no_nan(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(alpha, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [4, 2, 3, 0, 3, 9, 1, 6, 2, 9, 7], [1, 1, 2, 2, 3, 2, 2], [39, 73], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 3, 8, 6, 1, 6, 1, 2, 9, 5, 4, 3, 7, 2, 9], [0, 2, 0, 3, 3, 3, 4, 4, 2, 4, 4, 3], [81, 16, 64, 99], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 0, 1, 4, 2, 8, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [82, 99, 96, 44, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 11, 7, 2, 32, 20, 12, 4, 2, 1, 1, 1, 21, 12, 9, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.subtract(grad, grad)))))), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), grad), tf.math.square(tf.math.pow(tf.math.multiply(grad, beta), tf.math.add(tf.math.add(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)), grad)))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))), sigma)), tf.math.sqrt(tf.math.sqrt(alpha))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [6], [0, 5], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 6, 7, 4, 8, 0], [0, 0, 0, 3, 1, 1, 3, 1, 4, 0, 2, 0, 0], [16, 30, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 3, 1, 2, 1, 28, 15, 13, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(alpha, tf.math.pow(alpha, sigma)))), alpha), tf.math.add(tf.math.divide_no_nan(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(beta, tf.math.sqrt(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 0, 0, 0], [16, 16], [0, 1, 1], [3], [0, 0], [99, 96], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 2, 6, 8, 1, 3, 1, 4, 2, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 98, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.square(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}, "mapping_values": [1, 9, 5, 4, 1, 6, 3, 3, 2, 3, 1, 2, 2, 21, 11, 10, 6], "tree_depth": 18}]