[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8745714426040649, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223723888397217, 1.876588225364685, 1.4062081575393677, 1.1097160577774048, 0.9346094727516174, 0.8465587496757507, 0.7803452014923096, 0.7386778593063354, 0.7001796364784241, 0.6636190414428711, 0.6405962705612183, 0.6194413304328918, 0.5974814295768738, 0.5810303688049316, 0.5712352395057678, 0.5427697896957397, 0.541211724281311, 0.5262661576271057, 0.5122530460357666, 0.5017035603523254, 0.48959797620773315, 0.4813711643218994, 0.4723527133464813, 0.47231757640838623, 0.46108728647232056, 0.45088595151901245, 0.4536275863647461, 0.43914663791656494, 0.4340049922466278, 0.42583656311035156, 0.4154815971851349, 0.4122422933578491, 0.40653571486473083, 0.40350207686424255, 0.39336642622947693, 0.38663995265960693, 0.3784778118133545, 0.37709441781044006, 0.3716462254524231, 0.36543118953704834, 0.36000534892082214, 0.3558379113674164, 0.3461984694004059, 0.3537731170654297, 0.34367331862449646, 0.33474355936050415, 0.3258867859840393, 0.3283688426017761, 0.3270774185657501, 0.32202666997909546, 0.31820037961006165, 0.3114236891269684, 0.3031826317310333, 0.3025358021259308, 0.3018808662891388, 0.28746357560157776, 0.2908157706260681, 0.2938602566719055, 0.2778853178024292, 0.2732681930065155, 0.27895671129226685, 0.27593329548835754, 0.2722128927707672, 0.26275086402893066, 0.26675868034362793, 0.251589298248291, 0.2618390917778015, 0.2538192570209503, 0.25343799591064453, 0.24614979326725006, 0.245462104678154, 0.2364029735326767, 0.23514769971370697, 0.22748112678527832], "accuracy": [0.2736758589744568, 0.48051777482032776, 0.5568616986274719, 0.6124686598777771, 0.6662263870239258, 0.702681303024292, 0.7168141603469849, 0.726192057132721, 0.7417778372764587, 0.7600052952766418, 0.7643640041351318, 0.7751948237419128, 0.7862898111343384, 0.7877426743507385, 0.7954035401344299, 0.804649293422699, 0.8083476424217224, 0.8068947196006775, 0.819970965385437, 0.821820080280304, 0.8226125836372375, 0.829216718673706, 0.8281601071357727, 0.8350284099578857, 0.837537944316864, 0.8445383906364441, 0.8401796221733093, 0.8446704745292664, 0.8490291833877563, 0.8536521196365356, 0.8553691506385803, 0.8555012345314026, 0.8560295701026917, 0.8541803956031799, 0.8581429123878479, 0.8663320541381836, 0.8679170608520508, 0.8663320541381836, 0.8687095642089844, 0.871879518032074, 0.8726720213890076, 0.8732003569602966, 0.8778232932090759, 0.8741249442100525, 0.8774270415306091, 0.884691596031189, 0.8877294659614563, 0.8861445188522339, 0.8882578015327454, 0.8838990926742554, 0.8873332738876343, 0.886672854423523, 0.8924844861030579, 0.894069492816925, 0.8943336606025696, 0.9031832218170166, 0.8930128216743469, 0.894069492816925, 0.902390718460083, 0.9034473896026611, 0.8989565372467041, 0.9015982151031494, 0.9026548862457275, 0.9080702662467957, 0.9079381823539734, 0.9095231890678406, 0.9082023501396179, 0.9108440279960632, 0.9084665179252625, 0.915070652961731, 0.9101836085319519, 0.9167877435684204, 0.9137498140335083, 0.9204860925674438], "val_loss": [2.043872117996216, 1.5223082304000854, 1.044672966003418, 0.8404951095581055, 0.7547501921653748, 0.6953216791152954, 0.6576761603355408, 0.6253227591514587, 0.6046910881996155, 0.583977222442627, 0.5629831552505493, 0.5446115732192993, 0.5288282632827759, 0.5176824331283569, 0.5050798654556274, 0.4960358440876007, 0.4871900975704193, 0.47976094484329224, 0.4701824188232422, 0.4607110917568207, 0.4543381631374359, 0.4459248185157776, 0.44438135623931885, 0.43756046891212463, 0.43340206146240234, 0.4287755489349365, 0.4227277338504791, 0.4215230345726013, 0.42276015877723694, 0.4134335517883301, 0.4037988781929016, 0.4076860845088959, 0.40011098980903625, 0.3976360261440277, 0.3911595046520233, 0.3897155225276947, 0.3904740810394287, 0.3926733434200287, 0.3824450373649597, 0.3777798116207123, 0.375477135181427, 0.37570154666900635, 0.37346580624580383, 0.36844608187675476, 0.3684074580669403, 0.3670668601989746, 0.3675483763217926, 0.3619762361049652, 0.3623374402523041, 0.3600800633430481, 0.35891133546829224, 0.3559750020503998, 0.3573361337184906, 0.35636603832244873, 0.3526191711425781, 0.3564976453781128, 0.3506532907485962, 0.35303646326065063, 0.3515506982803345, 0.35126838088035583, 0.3464091420173645, 0.35081371665000916, 0.34880009293556213, 0.34749218821525574, 0.34570568799972534, 0.34890037775039673, 0.348175048828125, 0.34590959548950195, 0.3449862003326416, 0.34713247418403625, 0.3501901924610138, 0.3497961163520813, 0.34956350922584534, 0.3477826416492462], "val_accuracy": [0.5356666445732117, 0.6553333401679993, 0.6859999895095825, 0.7116666436195374, 0.7266666889190674, 0.7476666569709778, 0.7566666603088379, 0.7609999775886536, 0.7786666750907898, 0.778333306312561, 0.7953333258628845, 0.8026666641235352, 0.8146666884422302, 0.8176666498184204, 0.8213333487510681, 0.8226666450500488, 0.8243333101272583, 0.8246666789054871, 0.8293333053588867, 0.8356666564941406, 0.8360000252723694, 0.8426666855812073, 0.8356666564941406, 0.8450000286102295, 0.8426666855812073, 0.8483333587646484, 0.8523333072662354, 0.8473333120346069, 0.8453333377838135, 0.8543333411216736, 0.8550000190734863, 0.8556666374206543, 0.856333315372467, 0.8579999804496765, 0.859000027179718, 0.8616666793823242, 0.8569999933242798, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8669999837875366, 0.8636666536331177, 0.8646666407585144, 0.8653333187103271, 0.8709999918937683, 0.8679999709129333, 0.8686666488647461, 0.871666669845581, 0.8679999709129333, 0.8726666569709778, 0.8730000257492065, 0.8763333559036255, 0.8723333477973938, 0.875, 0.875333309173584, 0.8740000128746033, 0.8776666522026062, 0.8773333430290222, 0.8756666779518127, 0.8736666440963745, 0.8806666731834412, 0.8809999823570251, 0.8803333044052124, 0.8793333172798157, 0.8813333511352539, 0.8793333172798157, 0.8823333382606506, 0.8769999742507935, 0.8836666941642761, 0.8799999952316284, 0.8786666393280029, 0.8820000290870667, 0.8809999823570251, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 3, 8, 6, 0, 5, 8], [0, 1, 2, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 89], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 5, 3, 6, 8, 3, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 99, 21, 99, 61, 60]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 12, 6, 1, 1, 1, 0, 1, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.sqrt(tf.math.divide_no_nan(tf.math.negative(grad), grad)))), tf.math.square(grad)), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 6, 0, 3, 1, 3, 1, 9, 1], [0, 1, 0, 2, 1, 1, 2], [39, 39, 34], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 2], [0, 2, 0, 3, 4], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 4, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 2], [87, 99, 96, 7, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, alpha)))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, grad)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.subtract(sigma, alpha), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}, "mapping_values": [1, 17, 10, 7, 3, 12, 7, 5, 2, 2, 1, 1, 1, 17, 8, 9, 4], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [8, 2, 3, 0, 3], [0, 1, 0, 0], [39, 39, 10], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 2, 6, 3, 9, 0], [0, 3, 0, 2, 4, 4], [16, 16, 35], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 5, 3, 6, 8, 1, 4, 2, 4, 2, 8], [0, 2, 0, 4, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 17, 11, 6, 3, 2, 1, 1, 1, 4, 2, 2, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), tf.math.divide_no_nan(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.negative(grad)), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 2, 0, 3, 5, 7, 6, 3, 1, 8, 4, 4, 7, 7, 1, 8, 5, 2, 2, 1, 9], [0, 3, 0, 3, 5, 0, 4, 4, 0, 3, 5, 4, 0, 0, 0], [16, 16, 30, 74, 37, 80, 1, 88], [0, 1], [0], [0], [99], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 8, 3, 6, 8, 1, 4, 1, 4, 6, 8], [0, 2, 0, 3, 0, 0, 3, 1, 2, 0], [8, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 37, 22, 15, 8, 2, 1, 1, 1, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.add(grad, tf.math.add(grad, tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad))), grad), tf.math.sqrt(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.square(grad)), tf.math.add(tf.math.add(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}]