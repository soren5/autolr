[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8734285831451416, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2233126163482666, 1.86952805519104, 1.4003528356552124, 1.0999536514282227, 0.9483218193054199, 0.8358030915260315, 0.7750764489173889, 0.7270005345344543, 0.688148021697998, 0.6582709550857544, 0.6345717310905457, 0.6055909395217896, 0.5873880982398987, 0.5735569000244141, 0.5516076683998108, 0.5365599393844604, 0.5263528823852539, 0.5155733823776245, 0.5073564052581787, 0.48862215876579285, 0.4840133786201477, 0.4675934314727783, 0.46467405557632446, 0.45405322313308716, 0.441266268491745, 0.4359295070171356, 0.4305281937122345, 0.42611855268478394, 0.4201851189136505, 0.4074710011482239, 0.402535617351532, 0.40515297651290894, 0.3906475007534027, 0.387483686208725, 0.3799634873867035, 0.37939971685409546, 0.378099650144577, 0.3644888699054718, 0.3633231818675995, 0.35640060901641846, 0.3497759699821472, 0.34288284182548523, 0.33979910612106323, 0.3322810232639313, 0.34004098176956177, 0.32655125856399536, 0.3279210925102234, 0.31562304496765137, 0.315340131521225, 0.3081035315990448, 0.30470865964889526, 0.3037184774875641, 0.30036428570747375, 0.2962758541107178, 0.2866738438606262, 0.29043450951576233, 0.2807118594646454, 0.28356605768203735, 0.27586257457733154, 0.26403409242630005, 0.26857635378837585, 0.2595270872116089, 0.26614972949028015, 0.25594764947891235, 0.24724918603897095, 0.24672004580497742, 0.24283355474472046, 0.23698584735393524, 0.23297683894634247, 0.2406681627035141, 0.2307143211364746, 0.2257656306028366, 0.223392516374588, 0.2169923186302185, 0.22141768038272858, 0.22021062672138214, 0.21055307984352112, 0.20431604981422424, 0.20757101476192474, 0.20545345544815063, 0.19765938818454742, 0.19106009602546692, 0.19912631809711456, 0.1963462084531784, 0.18574796617031097, 0.18592767417430878], "accuracy": [0.2790912687778473, 0.47866860032081604, 0.5650508403778076, 0.6156386137008667, 0.6660943031311035, 0.700171709060669, 0.7174745798110962, 0.7366266250610352, 0.7493065595626831, 0.7553823590278625, 0.7695152759552002, 0.7812706232070923, 0.7907806038856506, 0.7942147850990295, 0.8004226684570312, 0.8057059645652771, 0.8129705190658569, 0.8162726163864136, 0.8158763647079468, 0.826310932636261, 0.8261788487434387, 0.8304054737091064, 0.8330471515655518, 0.8389908671379089, 0.8428213000297546, 0.8453308939933777, 0.8487650156021118, 0.8473120927810669, 0.8529917001724243, 0.8544445633888245, 0.8564258217811584, 0.8553691506385803, 0.8627657890319824, 0.8558974862098694, 0.86553955078125, 0.8610487580299377, 0.8679170608520508, 0.8691058158874512, 0.8726720213890076, 0.8729361891746521, 0.8758420348167419, 0.8759741187095642, 0.8746532797813416, 0.8791441321372986, 0.8798044919967651, 0.8841632604598999, 0.8825782537460327, 0.8850878477096558, 0.8842953443527222, 0.8919561505317688, 0.8899748921394348, 0.8918240666389465, 0.8882578015327454, 0.8918240666389465, 0.8961827754974365, 0.8951261639595032, 0.8952582478523254, 0.9008057117462158, 0.8982961177825928, 0.9026548862457275, 0.9015982151031494, 0.9051644206047058, 0.9041078090667725, 0.9072777628898621, 0.9119006991386414, 0.909259021282196, 0.9125610589981079, 0.91124027967453, 0.9165235757827759, 0.9111081957817078, 0.9198256731033325, 0.9140139818191528, 0.9166556596755981, 0.9189010858535767, 0.9190331697463989, 0.9191652536392212, 0.9252410531044006, 0.9229956269264221, 0.923920214176178, 0.9248448014259338, 0.9268260598182678, 0.9294676780700684, 0.9276185631752014, 0.928411066532135, 0.9326376914978027, 0.9309206008911133], "val_loss": [2.0346362590789795, 1.4959495067596436, 1.0160149335861206, 0.8000465631484985, 0.7110053896903992, 0.6546908617019653, 0.6103872060775757, 0.5759857892990112, 0.5518101453781128, 0.531524658203125, 0.5133707523345947, 0.5022963285446167, 0.48647627234458923, 0.47468557953834534, 0.46842989325523376, 0.45807820558547974, 0.45051148533821106, 0.44238021969795227, 0.43583032488822937, 0.43599870800971985, 0.42315176129341125, 0.4191346764564514, 0.41193732619285583, 0.40930038690567017, 0.40184536576271057, 0.4007393419742584, 0.39338186383247375, 0.39240723848342896, 0.39070796966552734, 0.3838157057762146, 0.3826688528060913, 0.37675487995147705, 0.373505562543869, 0.3693278729915619, 0.375314325094223, 0.36614111065864563, 0.36293238401412964, 0.35986214876174927, 0.3626493215560913, 0.35772836208343506, 0.3573548197746277, 0.34988874197006226, 0.35292333364486694, 0.35179463028907776, 0.34706464409828186, 0.34583887457847595, 0.34827953577041626, 0.3423195779323578, 0.3450799286365509, 0.33860230445861816, 0.342878133058548, 0.342360258102417, 0.33717820048332214, 0.3459329903125763, 0.33192768692970276, 0.3328596353530884, 0.33722415566444397, 0.3337987959384918, 0.3305472433567047, 0.3302418887615204, 0.33014076948165894, 0.32633116841316223, 0.3261123597621918, 0.32646456360816956, 0.33039242029190063, 0.32445859909057617, 0.3214426338672638, 0.3260764181613922, 0.32744526863098145, 0.3256092071533203, 0.3258804380893707, 0.3211432695388794, 0.3241822123527527, 0.3236728310585022, 0.3203928768634796, 0.3263576626777649, 0.32358086109161377, 0.3213694989681244, 0.31692516803741455, 0.32207754254341125, 0.31851524114608765, 0.3201872706413269, 0.3210655450820923, 0.3203417956829071, 0.31848397850990295, 0.32253995537757874], "val_accuracy": [0.5456666946411133, 0.668666660785675, 0.6919999718666077, 0.7243333458900452, 0.7433333396911621, 0.7573333382606506, 0.7726666927337646, 0.7789999842643738, 0.7886666655540466, 0.8006666898727417, 0.8109999895095825, 0.8169999718666077, 0.8226666450500488, 0.831333339214325, 0.8273333311080933, 0.8343333601951599, 0.8370000123977661, 0.8420000076293945, 0.8450000286102295, 0.8396666646003723, 0.8486666679382324, 0.8500000238418579, 0.8483333587646484, 0.8476666808128357, 0.8536666631698608, 0.856333315372467, 0.8566666841506958, 0.859333336353302, 0.859333336353302, 0.859000027179718, 0.8636666536331177, 0.862666666507721, 0.8629999756813049, 0.8643333315849304, 0.8646666407585144, 0.8640000224113464, 0.8663333058357239, 0.8646666407585144, 0.8736666440963745, 0.8706666827201843, 0.8709999918937683, 0.875, 0.8756666779518127, 0.8713333606719971, 0.8740000128746033, 0.8799999952316284, 0.8766666650772095, 0.8786666393280029, 0.8763333559036255, 0.8793333172798157, 0.8806666731834412, 0.8736666440963745, 0.8823333382606506, 0.8769999742507935, 0.8826666474342346, 0.8793333172798157, 0.8840000033378601, 0.8863333463668823, 0.8799999952316284, 0.8849999904632568, 0.8833333253860474, 0.8856666684150696, 0.8880000114440918, 0.8846666812896729, 0.8859999775886536, 0.8859999775886536, 0.8886666893959045, 0.8883333206176758, 0.8883333206176758, 0.890333354473114, 0.8883333206176758, 0.8883333206176758, 0.8880000114440918, 0.8883333206176758, 0.8920000195503235, 0.8920000195503235, 0.887333333492279, 0.8923333287239075, 0.8913333415985107, 0.8913333415985107, 0.8970000147819519, 0.8913333415985107, 0.8949999809265137, 0.8953333497047424, 0.8960000276565552, 0.8946666717529297]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 5, 3, 9], [0, 1, 0, 2], [39, 39, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 3, 8, 3, 5], [0, 2, 3, 3], [16, 78], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 3, 6, 4, 2, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.305108070373535, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 0, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [1], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 0, 9, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 26, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 2, 1, 1, 0, 6, 4, 2, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2655347.75, 52005364.0, 240563088.0, 663362816.0, 1429765120.0, 2603515904.0], "accuracy": [0.10236428678035736, 0.09576013684272766, 0.1014397069811821, 0.10328886657953262, 0.10355303436517715, 0.10593052208423615], "val_loss": [12407973.0, 99166816.0, 334581952.0, 792960256.0, 1548606720.0, 2675831808.0], "val_accuracy": [0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668, 0.10566666722297668]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 2, 9, 8], [0, 1, 0, 2], [39, 39, 5], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [65, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [6, 3, 6, 6, 8, 1, 4, 1, 4, 2, 8, 9, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [72, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 8, 4, 3, 2, 1, 1, 1, 2, 1, 1, 1, 22, 13, 9, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.sqrt(alpha)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0], [0, 2, 3, 0, 3, 4, 8, 9], [0, 1, 0, 0], [39, 39, 58, 98], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 30], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 5, 3, 6, 8, 1, 4, 0, 3, 2, 8], [0, 0, 0, 3, 0, 0, 4, 0, 2, 4], [16, 99, 96, 99, 61, 45]], "fitness": -0.09285714477300644, "mapping_values": [1, 12, 8, 4, 4, 7, 4, 3, 2, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.311375141143799, 2.3102335929870605, 2.310584545135498, 2.310601234436035, 2.3095967769622803, 2.3095033168792725], "accuracy": [0.09694888442754745, 0.08915598690509796, 0.08915598690509796, 0.09259014576673508, 0.08994849026203156, 0.09496764093637466], "val_loss": [2.3086462020874023, 2.3086462020874023, 2.3086462020874023, 2.3086462020874023, 2.3086462020874023, 2.3086462020874023], "val_accuracy": [0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024]}}]