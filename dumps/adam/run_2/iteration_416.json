[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8465714454650879, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222346305847168, 1.8675869703292847, 1.4018443822860718, 1.1276494264602661, 0.9492734670639038, 0.8563586473464966, 0.7948182225227356, 0.7529082894325256, 0.7083645462989807, 0.6821193695068359, 0.6503698229789734, 0.6238237023353577, 0.6075034141540527, 0.5882795453071594, 0.5715210437774658, 0.5581932663917542, 0.5413671731948853, 0.5362723469734192, 0.5223955512046814, 0.5101799368858337, 0.4938410818576813, 0.48471635580062866, 0.47307875752449036, 0.4705553650856018, 0.45661240816116333, 0.45327964425086975, 0.45167505741119385, 0.4339972138404846, 0.4351029694080353, 0.4266712963581085, 0.4281255006790161, 0.41819679737091064, 0.4141724705696106, 0.4058629870414734, 0.3950556516647339, 0.3898303508758545, 0.3892397880554199, 0.3844824433326721, 0.37450212240219116, 0.3745900094509125, 0.36905112862586975, 0.3623363673686981, 0.3531703054904938, 0.34972333908081055, 0.3424225151538849, 0.33956149220466614, 0.34213101863861084, 0.3322158455848694, 0.33126240968704224, 0.3245924711227417, 0.31831708550453186, 0.3163119852542877, 0.31061381101608276, 0.30241554975509644, 0.29543060064315796, 0.30227896571159363, 0.2914002239704132, 0.29374173283576965, 0.27924656867980957, 0.2788095474243164, 0.27883848547935486, 0.2720012068748474, 0.2678760588169098, 0.2599436342716217, 0.26028692722320557, 0.2609862685203552], "accuracy": [0.2739400267601013, 0.4826310873031616, 0.5558050274848938, 0.5983357429504395, 0.6601505875587463, 0.6886804699897766, 0.7125874757766724, 0.722757875919342, 0.7456082701683044, 0.7497028112411499, 0.7623828053474426, 0.7697794437408447, 0.780610203742981, 0.783119797706604, 0.7905164361000061, 0.7959318161010742, 0.8074230551719666, 0.8078193068504333, 0.8084797263145447, 0.8173292875289917, 0.8222163319587708, 0.8253863453865051, 0.8314621448516846, 0.8277638554573059, 0.8370096683502197, 0.8367455005645752, 0.8330471515655518, 0.8459912538528442, 0.8473120927810669, 0.8437458872795105, 0.8430854678153992, 0.8508783578872681, 0.8514066934585571, 0.8541803956031799, 0.8588033318519592, 0.8561616539955139, 0.8577466607093811, 0.8613129258155823, 0.867520809173584, 0.8664641380310059, 0.870030403137207, 0.8683133125305176, 0.8726720213890076, 0.8726720213890076, 0.8759741187095642, 0.8791441321372986, 0.8765024542808533, 0.8776912093162537, 0.8787478804588318, 0.8794082403182983, 0.8868049383163452, 0.8823140859603882, 0.8840311765670776, 0.889578640460968, 0.8893144726753235, 0.8914278149604797, 0.8939374089241028, 0.8951261639595032, 0.8967111110687256, 0.8980319499969482, 0.8993527889251709, 0.8990886211395264, 0.9006736278533936, 0.9063531756401062, 0.9060890078544617, 0.9049002528190613], "val_loss": [2.0368475914001465, 1.5109667778015137, 1.0380688905715942, 0.830266535282135, 0.73929363489151, 0.6774042844772339, 0.6317477822303772, 0.600759744644165, 0.5673696398735046, 0.5512571930885315, 0.5321304202079773, 0.514139711856842, 0.5000945925712585, 0.4882871210575104, 0.4799955189228058, 0.46529892086982727, 0.459115594625473, 0.4515434503555298, 0.44773855805397034, 0.4355011284351349, 0.43062373995780945, 0.42830950021743774, 0.4185118079185486, 0.41330650448799133, 0.4072360098361969, 0.40197649598121643, 0.3975710868835449, 0.39183422923088074, 0.3939436972141266, 0.3856988549232483, 0.38886770606040955, 0.3846733868122101, 0.38017866015434265, 0.37811946868896484, 0.37509432435035706, 0.37957942485809326, 0.36828291416168213, 0.36558932065963745, 0.3648047149181366, 0.3601722717285156, 0.3647656738758087, 0.35899654030799866, 0.35684481263160706, 0.3536621928215027, 0.3527548015117645, 0.35354647040367126, 0.3487667739391327, 0.3515251576900482, 0.3459978699684143, 0.3521999418735504, 0.3515602648258209, 0.35167935490608215, 0.34617719054222107, 0.3420056104660034, 0.3427794277667999, 0.3421822488307953, 0.3416275084018707, 0.3418680429458618, 0.34044238924980164, 0.33781421184539795, 0.3365163505077362, 0.33370810747146606, 0.33660006523132324, 0.3315110206604004, 0.33632463216781616, 0.33583757281303406], "val_accuracy": [0.5326666831970215, 0.6679999828338623, 0.6863333582878113, 0.7123333215713501, 0.7350000143051147, 0.7516666650772095, 0.7723333239555359, 0.7806666493415833, 0.7973333597183228, 0.8023333549499512, 0.8066666722297668, 0.8196666836738586, 0.8243333101272583, 0.8263333439826965, 0.8343333601951599, 0.8356666564941406, 0.843666672706604, 0.8396666646003723, 0.8429999947547913, 0.8489999771118164, 0.8500000238418579, 0.8506666421890259, 0.8543333411216736, 0.8586666584014893, 0.8606666922569275, 0.8636666536331177, 0.8629999756813049, 0.8656666874885559, 0.8650000095367432, 0.8650000095367432, 0.8663333058357239, 0.8640000224113464, 0.8673333525657654, 0.8706666827201843, 0.8686666488647461, 0.8683333396911621, 0.8723333477973938, 0.8723333477973938, 0.8726666569709778, 0.874666690826416, 0.8709999918937683, 0.8790000081062317, 0.875, 0.8759999871253967, 0.8766666650772095, 0.878333330154419, 0.8796666860580444, 0.874666690826416, 0.8806666731834412, 0.8736666440963745, 0.8816666603088379, 0.8790000081062317, 0.8796666860580444, 0.8799999952316284, 0.8843333125114441, 0.8816666603088379, 0.8836666941642761, 0.8806666731834412, 0.8830000162124634, 0.887333333492279, 0.8899999856948853, 0.8849999904632568, 0.8816666603088379, 0.8866666555404663, 0.8853333592414856, 0.8809999823570251]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [2, 0, 2, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 3, 4, 8, 1, 4, 1, 4, 2, 8, 8, 5], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 1, 2, 1, 1, 1, 23, 13, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.add(tf.math.negative(grad), beta)), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.pow(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.sqrt(alpha))))), beta), tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10599999874830246, 0.10599999874830246, 0.10599999874830246, 0.10599999874830246, 0.10599999874830246, 0.10599999874830246]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [81, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 5], [0, 2, 3, 3, 1], [16, 16], [0, 1, 1], [6], [0, 6], [99], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [6, 2, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 3, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 84, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 1, 3, 1, 2, 1, 16, 8, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad))), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 5, 0, 3, 5, 8], [0, 2, 0, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 0, 1, 4, 1, 4, 2, 8, 0, 2], [0, 0, 0, 3, 0, 0, 3, 0, 2, 0, 3], [16, 99, 96, 99, 61, 1, 88]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 7, 3, 2, 2, 1, 1, 1, 24, 13, 11, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.square(beta), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), beta), tf.math.add(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 3, 3, 1, 1, 7, 9], [0, 1, 0, 2, 2, 2, 1], [39, 39, 87], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 1], [2, 2, 0, 3, 4], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 0, 3, 6, 4, 1, 4, 1, 4, 2, 8, 8, 6], [0, 0, 0, 3, 0, 2, 3, 1, 2, 0, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.09628571569919586, "mapping_values": [1, 16, 9, 7, 3, 11, 6, 5, 1, 2, 1, 1, 1, 24, 13, 11, 5], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(grad, tf.math.subtract(tf.math.add(grad, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(beta), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, sigma), tf.math.sqrt(tf.math.sqrt(alpha))))), beta))), tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad))", "other_info": {"loss": [2.311161518096924, 2.309746026992798, 2.309842586517334, 2.310028553009033, 2.3113183975219727, 2.310258626937866], "accuracy": [0.09509972482919693, 0.09206181764602661, 0.08281600475311279, 0.09536388516426086, 0.08625016361474991, 0.09179764986038208], "val_loss": [2.3092572689056396, 2.3092572689056396, 2.3092572689056396, 2.3092572689056396, 2.3092572689056396, 2.3092572689056396], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}]