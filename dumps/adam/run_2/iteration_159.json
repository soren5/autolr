[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8571428656578064, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2255992889404297, 1.876314401626587, 1.399587631225586, 1.0993940830230713, 0.9366236329078674, 0.848858654499054, 0.7806198596954346, 0.7204856276512146, 0.6978116035461426, 0.6628566384315491, 0.6368168592453003, 0.6172876954078674, 0.5943063497543335, 0.5666998624801636, 0.5692123770713806, 0.5469838380813599, 0.5246954560279846, 0.5222145915031433, 0.5124073028564453, 0.5026037096977234, 0.4891844391822815, 0.4806577265262604, 0.4669349193572998, 0.4595785439014435, 0.4440527856349945, 0.4418106973171234, 0.43926408886909485, 0.4277329742908478, 0.41731420159339905, 0.4101884961128235, 0.40504419803619385, 0.402037113904953, 0.3896237313747406, 0.3896801173686981, 0.3749006688594818, 0.3702021837234497, 0.3734060525894165, 0.3606872856616974, 0.3555494248867035, 0.35496005415916443, 0.34919473528862, 0.3469809591770172, 0.33696675300598145, 0.3334389626979828], "accuracy": [0.26495838165283203, 0.4994056224822998, 0.5683529376983643, 0.6123365759849548, 0.6642451286315918, 0.6977941989898682, 0.7224937081336975, 0.739928662776947, 0.7490423917770386, 0.7618544697761536, 0.7609298825263977, 0.776251494884491, 0.7878747582435608, 0.7981772422790527, 0.7964601516723633, 0.8005547523498535, 0.8121780753135681, 0.8119139075279236, 0.817989706993103, 0.8228767514228821, 0.8260467648506165, 0.8296129703521729, 0.8342359066009521, 0.835160493850708, 0.8408400416374207, 0.842028796672821, 0.8407079577445984, 0.8510104417800903, 0.8499537706375122, 0.8584070801734924, 0.8565579056739807, 0.8553691506385803, 0.8598600029945374, 0.8584070801734924, 0.8665962219238281, 0.8689737319946289, 0.8650112152099609, 0.8685774803161621, 0.8771628737449646, 0.873860776424408, 0.8759741187095642, 0.8755778670310974, 0.8775591254234314, 0.8787478804588318], "val_loss": [2.046186685562134, 1.5312552452087402, 1.0449899435043335, 0.8311898708343506, 0.7393090128898621, 0.6865318417549133, 0.6406307816505432, 0.6045399308204651, 0.5805351138114929, 0.5565249919891357, 0.5382201075553894, 0.5254923701286316, 0.5105403065681458, 0.4962455928325653, 0.48299872875213623, 0.47196337580680847, 0.46697860956192017, 0.4665135145187378, 0.4513354003429413, 0.4476138651371002, 0.4383169412612915, 0.4361322522163391, 0.4308275282382965, 0.4200098514556885, 0.4170500636100769, 0.41042324900627136, 0.410501092672348, 0.40746164321899414, 0.399038165807724, 0.3935714066028595, 0.3949379026889801, 0.39211905002593994, 0.3858473598957062, 0.3839814066886902, 0.38326334953308105, 0.3764224350452423, 0.3781696856021881, 0.37695297598838806, 0.3720688819885254, 0.37080615758895874, 0.3690270483493805, 0.36760035157203674, 0.36828288435935974, 0.36402347683906555], "val_accuracy": [0.5303333401679993, 0.6349999904632568, 0.6779999732971191, 0.7089999914169312, 0.7306666374206543, 0.7509999871253967, 0.7646666765213013, 0.7699999809265137, 0.7793333530426025, 0.7913333177566528, 0.8016666769981384, 0.8090000152587891, 0.8143333196640015, 0.8243333101272583, 0.8253333568572998, 0.8306666612625122, 0.8353333473205566, 0.8299999833106995, 0.8433333039283752, 0.8420000076293945, 0.8476666808128357, 0.846666693687439, 0.847000002861023, 0.8516666889190674, 0.8503333330154419, 0.8539999723434448, 0.8603333234786987, 0.8526666760444641, 0.856333315372467, 0.8640000224113464, 0.8616666793823242, 0.8643333315849304, 0.8643333315849304, 0.859333336353302, 0.8619999885559082, 0.8679999709129333, 0.8673333525657654, 0.8683333396911621, 0.8696666955947876, 0.8686666488647461, 0.8669999837875366, 0.8696666955947876, 0.8679999709129333, 0.8679999709129333]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 4, 3, 8, 3, 7, 0, 1, 8], [0, 1, 0, 2, 2, 2, 2, 0], [39, 39, 12], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 5, 0, 3, 1], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 1, 2, 2], [0, 0, 0, 3, 0, 0, 3, 0, 2, 0], [16, 30, 99, 99, 61, 1]], "fitness": -0.46314287185668945, "mapping_values": [1, 19, 11, 8, 3, 6, 4, 2, 1, 2, 1, 1, 0, 10, 5, 5, 4], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.multiply(alpha, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)))), grad)), tf.math.subtract(tf.math.sqrt(grad), grad)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.310344934463501, 2.3101987838745117, 2.308443069458008, 2.3084702491760254, 2.307859182357788, 2.305018663406372, 2.3036530017852783, 2.301985502243042, 2.3004953861236572, 2.2979369163513184, 2.2961208820343018, 2.2944605350494385, 2.289342164993286, 2.2868080139160156, 2.284151792526245, 2.2802884578704834, 2.2764852046966553, 2.273202896118164, 2.268920660018921, 2.26676344871521, 2.2629857063293457, 2.2573914527893066, 2.253432512283325, 2.247868299484253, 2.243870735168457, 2.2375314235687256, 2.233654737472534, 2.2268733978271484, 2.219886064529419, 2.2153749465942383, 2.2081546783447266, 2.2016355991363525, 2.194868803024292, 2.1860883235931396, 2.1756505966186523, 2.1662673950195312, 2.1559903621673584, 2.147759199142456, 2.1363797187805176], "accuracy": [0.08651433140039444, 0.08942015469074249, 0.09589222073554993, 0.09338264167308807, 0.09576013684272766, 0.09694888442754745, 0.09840179979801178, 0.10487385839223862, 0.10777968913316727, 0.11332716792821884, 0.11900673806667328, 0.11345925182104111, 0.13617752492427826, 0.14555540680885315, 0.14581957459449768, 0.16219785809516907, 0.16840575635433197, 0.18082155287265778, 0.19455818831920624, 0.20063400268554688, 0.21555937826633453, 0.22837141156196594, 0.23946638405323029, 0.2599392533302307, 0.26760005950927734, 0.28582748770713806, 0.28622373938560486, 0.3028661906719208, 0.31805574893951416, 0.31660282611846924, 0.33760401606559753, 0.3387927711009979, 0.33760401606559753, 0.3531897962093353, 0.3603222966194153, 0.37088891863822937, 0.37168142199516296, 0.37181350588798523, 0.3726060092449188], "val_loss": [2.3080615997314453, 2.3076250553131104, 2.3069117069244385, 2.305922746658325, 2.3046655654907227, 2.3031413555145264, 2.3013548851013184, 2.2993133068084717, 2.297025203704834, 2.29451584815979, 2.2917990684509277, 2.288877248764038, 2.285766839981079, 2.2825002670288086, 2.279083013534546, 2.275514841079712, 2.2718052864074707, 2.2679481506347656, 2.263936758041382, 2.2597708702087402, 2.2554376125335693, 2.250920534133911, 2.246206760406494, 2.2412667274475098, 2.2360925674438477, 2.2306559085845947, 2.22493577003479, 2.218907117843628, 2.212536573410034, 2.2057809829711914, 2.1986160278320312, 2.190964698791504, 2.182781457901001, 2.174013137817383, 2.1645843982696533, 2.154398202896118, 2.143376350402832, 2.131432056427002, 2.1184730529785156], "val_accuracy": [0.08900000154972076, 0.09000000357627869, 0.09033333510160446, 0.09133332967758179, 0.09133332967758179, 0.09233333170413971, 0.09566666930913925, 0.10300000011920929, 0.1106666699051857, 0.12066666781902313, 0.13366666436195374, 0.14100000262260437, 0.15133333206176758, 0.16366666555404663, 0.1836666613817215, 0.2083333283662796, 0.2446666657924652, 0.27566665410995483, 0.3176666796207428, 0.35766667127609253, 0.38966667652130127, 0.4113333225250244, 0.4189999997615814, 0.4309999942779541, 0.43799999356269836, 0.44600000977516174, 0.4506666660308838, 0.4583333432674408, 0.4623333215713501, 0.46966665983200073, 0.47200000286102295, 0.4729999899864197, 0.4736666679382324, 0.47600001096725464, 0.47433334589004517, 0.47200000286102295, 0.4726666808128357, 0.47200000286102295, 0.4716666638851166]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 9], [0, 1, 0, 2], [39, 39, 26], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [6, 2, 3, 6, 3, 5, 2, 0, 7], [0, 2, 0, 3, 1, 1, 4, 1], [47, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [3, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 3, 17, 9, 8, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(tf.math.negative(tf.math.add(alpha, alpha)), grad)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 1, 0, 3, 2, 0, 4, 5, 1], [0, 0, 0, 2, 0, 2, 0], [42, 39, 78, 50, 56], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 3], [0, 2, 0, 3], [28, 16], [0, 1], [5], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 2, 4, 1, 4, 2, 8, 1, 7, 5, 0, 4, 9, 7, 4, 6, 4, 7, 3, 7, 1, 9, 4, 0, 3], [0, 0, 0, 0, 0, 0, 3, 1, 2, 0, 4, 0, 7, 1, 0, 2, 7, 6, 2, 7, 7], [16, 17, 96, 99, 61, 1, 98, 49, 46, 53, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 10, 7, 5, 2, 1, 1, 1, 2, 1, 1, 1, 50, 29, 21, 11], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(grad, tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.subtract(grad, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(sigma, alpha), tf.math.square(tf.math.negative(beta)))), tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), grad), tf.math.add(tf.math.pow(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(tf.math.multiply(alpha, tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.pow(beta, grad)))), grad)), tf.math.negative(beta))), tf.math.multiply(grad, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 4, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 9], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 4, 2, 2, 0], [4, 0, 0, 3, 0, 0, 3, 0, 2, 0], [16, 99, 96, 24, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 7, 3, 2, 2, 1, 1, 1, 22, 12, 10, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), sigma)))), tf.math.add(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]