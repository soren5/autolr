[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8694285750389099, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223670244216919, 1.8767237663269043, 1.3962520360946655, 1.104002833366394, 0.942922055721283, 0.8422617316246033, 0.7887263298034668, 0.7270219326019287, 0.6970349550247192, 0.6617308855056763, 0.6377193331718445, 0.6251610517501831, 0.6053022742271423, 0.5709546804428101, 0.5576181411743164, 0.546983003616333, 0.523098349571228, 0.5194003582000732, 0.5038883686065674, 0.4980055093765259, 0.48912516236305237, 0.48528844118118286, 0.4699355661869049, 0.46253496408462524, 0.447964072227478, 0.4419597387313843, 0.4353279173374176, 0.4324483871459961, 0.4219370484352112, 0.4166339933872223, 0.4063868224620819, 0.39739593863487244, 0.3976500928401947, 0.38894855976104736, 0.38120338320732117, 0.3823745548725128, 0.37841862440109253, 0.3712736964225769, 0.366404265165329, 0.3538549244403839, 0.34521278738975525, 0.34753385186195374, 0.34241700172424316, 0.3384328782558441, 0.3354600667953491, 0.33806470036506653, 0.3301617503166199, 0.31936976313591003, 0.3193393051624298, 0.30878400802612305, 0.31420716643333435, 0.30655965209007263, 0.3062914311885834, 0.2929074168205261, 0.29175934195518494, 0.28729692101478577, 0.27939745783805847, 0.28515011072158813, 0.27611422538757324, 0.2709382474422455, 0.26751041412353516, 0.26430514454841614, 0.2595124840736389, 0.2550477683544159, 0.2513950765132904, 0.24825727939605713, 0.24353177845478058, 0.2477460503578186, 0.24085167050361633, 0.23731333017349243, 0.2372182309627533, 0.22869496047496796, 0.2302708774805069, 0.22256557643413544, 0.22034414112567902], "accuracy": [0.26561880111694336, 0.4909523129463196, 0.5649187564849854, 0.6153744459152222, 0.6693964004516602, 0.698718786239624, 0.7103421092033386, 0.7341170310974121, 0.7477215528488159, 0.7598732113838196, 0.7709681391716003, 0.7737419009208679, 0.7786290049552917, 0.7881389260292053, 0.7992339134216309, 0.8005547523498535, 0.8103289008140564, 0.8108572363853455, 0.8145555257797241, 0.8178576231002808, 0.8235371708869934, 0.8216879963874817, 0.8265751004219055, 0.8335754871368408, 0.8408400416374207, 0.8385946154594421, 0.845859169960022, 0.8437458872795105, 0.8457271456718445, 0.8488970994949341, 0.8549728989601135, 0.8557654023170471, 0.8552370667457581, 0.8577466607093811, 0.8621054291725159, 0.8622375130653381, 0.8634262084960938, 0.8659358024597168, 0.8644828796386719, 0.8706908226013184, 0.8765024542808533, 0.8737286925315857, 0.8775591254234314, 0.8794082403182983, 0.8762382864952087, 0.8746532797813416, 0.8765024542808533, 0.8817857503890991, 0.8882578015327454, 0.8894465565681458, 0.887201189994812, 0.8869370222091675, 0.8889182209968567, 0.8920882344245911, 0.8931449055671692, 0.8953903317451477, 0.8981640338897705, 0.8973715305328369, 0.9021265506744385, 0.9009377956390381, 0.9001452922821045, 0.9005415439605713, 0.9045040011405945, 0.909259021282196, 0.9105798602104187, 0.9091269373893738, 0.9128252267837524, 0.9089948534965515, 0.913617730140686, 0.9132214784622192, 0.9146744012832642, 0.9183727502822876, 0.9182406663894653, 0.9191652536392212, 0.9202219247817993], "val_loss": [2.0418410301208496, 1.5245444774627686, 1.054245948791504, 0.8540397882461548, 0.7645070552825928, 0.7081947326660156, 0.6648932695388794, 0.6266141533851624, 0.6017110347747803, 0.5787349343299866, 0.5570817589759827, 0.5476898550987244, 0.5287054181098938, 0.511600911617279, 0.5066941976547241, 0.4957493543624878, 0.4804519712924957, 0.4741494059562683, 0.47576725482940674, 0.4630940854549408, 0.4519267976284027, 0.44420793652534485, 0.4376501441001892, 0.43420520424842834, 0.42746517062187195, 0.42604389786720276, 0.41877269744873047, 0.41453325748443604, 0.4097428023815155, 0.40255072712898254, 0.40555670857429504, 0.40102458000183105, 0.39466235041618347, 0.3912625312805176, 0.3981303572654724, 0.3933486044406891, 0.38371333479881287, 0.3864801526069641, 0.3810858130455017, 0.38087305426597595, 0.37688353657722473, 0.37843671441078186, 0.37379515171051025, 0.37441325187683105, 0.37697380781173706, 0.3717897832393646, 0.3654170334339142, 0.36791035532951355, 0.36675602197647095, 0.3651559352874756, 0.3651444911956787, 0.3672502338886261, 0.36464622616767883, 0.3602433204650879, 0.35710734128952026, 0.3589310348033905, 0.35600537061691284, 0.3578730523586273, 0.35702306032180786, 0.3518684208393097, 0.3556075990200043, 0.3548600971698761, 0.3568893373012543, 0.3498130142688751, 0.35303401947021484, 0.3500112295150757, 0.3521800637245178, 0.35132908821105957, 0.35592082142829895, 0.3529650866985321, 0.34665438532829285, 0.35004305839538574, 0.35014933347702026, 0.3530544340610504, 0.35505133867263794], "val_accuracy": [0.5063333511352539, 0.6476666927337646, 0.6766666769981384, 0.6966666579246521, 0.7253333330154419, 0.7369999885559082, 0.749666690826416, 0.7649999856948853, 0.7770000100135803, 0.7820000052452087, 0.7943333387374878, 0.8006666898727417, 0.8090000152587891, 0.8130000233650208, 0.8080000281333923, 0.8203333616256714, 0.8243333101272583, 0.8263333439826965, 0.8246666789054871, 0.8323333263397217, 0.8349999785423279, 0.840666651725769, 0.8383333086967468, 0.843666672706604, 0.8463333249092102, 0.8433333039283752, 0.8476666808128357, 0.8489999771118164, 0.8483333587646484, 0.8489999771118164, 0.8543333411216736, 0.8526666760444641, 0.8533333539962769, 0.8543333411216736, 0.8523333072662354, 0.859333336353302, 0.8556666374206543, 0.8560000061988831, 0.8603333234786987, 0.8576666712760925, 0.862666666507721, 0.8600000143051147, 0.8610000014305115, 0.8643333315849304, 0.8636666536331177, 0.8640000224113464, 0.8656666874885559, 0.8636666536331177, 0.8673333525657654, 0.8659999966621399, 0.8706666827201843, 0.862333357334137, 0.8666666746139526, 0.8653333187103271, 0.8709999918937683, 0.8703333139419556, 0.8696666955947876, 0.8690000176429749, 0.8696666955947876, 0.8713333606719971, 0.871999979019165, 0.8726666569709778, 0.8723333477973938, 0.8709999918937683, 0.8709999918937683, 0.875333309173584, 0.8709999918937683, 0.8730000257492065, 0.8723333477973938, 0.8766666650772095, 0.875333309173584, 0.8766666650772095, 0.8730000257492065, 0.8736666440963745, 0.8743333220481873]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 1], [39, 10], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 2, 3, 5, 1, 9, 5, 4, 3, 2, 6, 6, 0, 6], [0, 3, 0, 3, 5, 4, 2, 3, 3, 5, 4], [16, 16, 22], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 4, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10599999874830246, "mapping_values": [1, 2, 1, 1, 1, 27, 16, 11, 3, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(grad, tf.math.multiply(tf.math.add(grad, beta), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.negative(tf.math.divide_no_nan(grad, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), grad)), grad), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.309429168701172, 2.3085381984710693, 2.307243585586548, 2.306540012359619, 2.3050568103790283, 2.3044650554656982, 2.3039793968200684, 2.3034708499908447, 2.303032159805298, 2.3028433322906494, 2.3027241230010986, 2.30261492729187, 2.3026123046875], "accuracy": [0.08889182657003403, 0.08902391046285629, 0.09430722147226334, 0.08466517180204391, 0.0936468094587326, 0.08651433140039444, 0.09589222073554993, 0.09457138925790787, 0.09945846349000931, 0.09747721254825592, 0.1006472036242485, 0.10408136248588562, 0.10302469879388809], "val_loss": [2.307924270629883, 2.3071796894073486, 2.3063225746154785, 2.305330753326416, 2.30446457862854, 2.3037734031677246, 2.3032424449920654, 2.3028969764709473, 2.3027138710021973, 2.302625894546509, 2.3025972843170166, 2.3025875091552734, 2.3025858402252197], "val_accuracy": [0.0860000029206276, 0.0793333351612091, 0.06700000166893005, 0.07100000232458115, 0.07266666740179062, 0.08933333307504654, 0.09399999678134918, 0.11299999803304672, 0.11299999803304672, 0.10266666859388351, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [47], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma), alpha)", "other_info": {"loss": [2.303831100463867, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09879804402589798, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876]}, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 1, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 8, 6], [2, 1, 0, 2, 0], [39, 57], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 2, 3, 4, 3, 5, 2, 6, 3, 7, 5, 6, 1, 4, 1, 8, 0, 2, 8, 0, 7, 3, 6, 6, 2, 9, 6, 5, 7, 9], [0, 2, 0, 3, 4, 4, 3, 4, 0, 4, 2, 1, 0, 2, 4, 2, 1, 3, 1], [16, 16, 74, 2, 49, 73], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [6, 6, 5, 3, 4, 8], [0, 2, 1, 3, 1], [7], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 0, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 49, 30, 19, 6, 11, 6, 5, 1, 16, 8, 8, 4], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.sqrt(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(grad, tf.math.square(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.math.negative(grad)), grad), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.sqrt(tf.math.negative(grad)), tf.math.add(tf.math.multiply(beta, alpha), tf.math.divide_no_nan(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), beta)))))), tf.math.divide_no_nan(grad, beta)), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.square(tf.math.add(grad, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.square(tf.math.multiply(alpha, tf.math.pow(sigma, tf.math.sqrt(alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 2, 5], [0, 2, 0, 3, 4], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4, 1], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0, 0, 3], [45, 99, 17, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 11, 6, 5, 2, 2, 1, 1, 1, 25, 13, 12, 6], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.pow(alpha, beta)))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]