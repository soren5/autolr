[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8560000061988831, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223814010620117, 1.8784737586975098, 1.4004453420639038, 1.0969312191009521, 0.9389427304267883, 0.842826247215271, 0.791680634021759, 0.7365553379058838, 0.7048512101173401, 0.6775006651878357, 0.6486027240753174, 0.6250669360160828, 0.6057619452476501, 0.587246835231781, 0.575234591960907, 0.5555647611618042, 0.5397136211395264, 0.535517692565918, 0.5262432098388672, 0.505401074886322, 0.4942134618759155, 0.4875471293926239, 0.4829634428024292, 0.4667521119117737, 0.45943278074264526, 0.4549694061279297, 0.44057750701904297, 0.43798497319221497, 0.42791882157325745, 0.4258246123790741, 0.4195941388607025, 0.41885292530059814, 0.40503519773483276, 0.39618614315986633, 0.3984558880329132, 0.39316627383232117, 0.38126927614212036, 0.3713513910770416, 0.3760216236114502, 0.37131747603416443, 0.36286160349845886, 0.35621732473373413, 0.3476024270057678, 0.3499778211116791, 0.3387429118156433, 0.33576852083206177, 0.34078195691108704, 0.3277934193611145, 0.3218195140361786, 0.3161259889602661, 0.3108128011226654, 0.30772700905799866, 0.3061017692089081, 0.2993220090866089, 0.29911088943481445, 0.29312437772750854, 0.28994470834732056, 0.2881764769554138, 0.27888181805610657, 0.2767684757709503, 0.26690271496772766, 0.2683592736721039, 0.26201799511909485, 0.25576117634773254, 0.25529420375823975, 0.2534170150756836, 0.25402694940567017, 0.24866726994514465, 0.24461984634399414, 0.23667439818382263], "accuracy": [0.27341169118881226, 0.4795931875705719, 0.5646545886993408, 0.6197332143783569, 0.6705851554870605, 0.6946242451667786, 0.7156254053115845, 0.737022876739502, 0.7460044622421265, 0.7614582180976868, 0.7629110813140869, 0.7757231593132019, 0.7819310426712036, 0.7877426743507385, 0.7931581139564514, 0.7979130744934082, 0.8062343001365662, 0.8082155585289001, 0.809140145778656, 0.8204993009567261, 0.8259146809577942, 0.8272355198860168, 0.8274996876716614, 0.8325188159942627, 0.8359529972076416, 0.8405758738517761, 0.8498216867446899, 0.842028796672821, 0.847840428352356, 0.8492933511734009, 0.8504821062088013, 0.8519350290298462, 0.8540483713150024, 0.8647470474243164, 0.8625016212463379, 0.8602562546730042, 0.8665962219238281, 0.8735966086387634, 0.870030403137207, 0.8671245574951172, 0.876370370388031, 0.8734645247459412, 0.8757099509239197, 0.8799365758895874, 0.8840311765670776, 0.8841632604598999, 0.882710337638855, 0.8850878477096558, 0.8873332738876343, 0.8907673954963684, 0.896446943283081, 0.8928807377815247, 0.8920882344245911, 0.8942015767097473, 0.8934090733528137, 0.8992207050323486, 0.89988112449646, 0.8986923694610596, 0.9010698795318604, 0.9049002528190613, 0.9078060984611511, 0.9072777628898621, 0.9070135951042175, 0.9093911051750183, 0.9088627696037292, 0.9113723635673523, 0.9152027368545532, 0.9122969508171082, 0.9115044474601746, 0.9192973375320435], "val_loss": [2.0390634536743164, 1.5133986473083496, 1.029404640197754, 0.8185579180717468, 0.7242275476455688, 0.6729487180709839, 0.630186915397644, 0.5932759046554565, 0.5657734274864197, 0.5463367700576782, 0.5244385600090027, 0.5064917206764221, 0.4935692846775055, 0.48356693983078003, 0.4711472988128662, 0.46104151010513306, 0.4512357711791992, 0.44615787267684937, 0.43517082929611206, 0.4272150993347168, 0.41745051741600037, 0.41086483001708984, 0.4010072946548462, 0.39726337790489197, 0.39140579104423523, 0.3851056396961212, 0.3828185498714447, 0.3765755891799927, 0.37264689803123474, 0.37569886445999146, 0.380188912153244, 0.366733193397522, 0.35649722814559937, 0.3541213274002075, 0.3519689440727234, 0.3476298153400421, 0.35674744844436646, 0.34620463848114014, 0.3437812626361847, 0.33940187096595764, 0.3418349623680115, 0.33966222405433655, 0.3366954028606415, 0.3320867121219635, 0.3347339332103729, 0.33100688457489014, 0.3226221203804016, 0.3244772255420685, 0.32265549898147583, 0.31987515091896057, 0.32246971130371094, 0.32111895084381104, 0.3150797486305237, 0.3133489489555359, 0.31252631545066833, 0.31381329894065857, 0.31712785363197327, 0.3126293122768402, 0.3128471374511719, 0.3069175183773041, 0.3084373474121094, 0.30736634135246277, 0.3094552457332611, 0.30453726649284363, 0.3076590895652771, 0.3037366271018982, 0.309050589799881, 0.30099499225616455, 0.3051261305809021, 0.30178019404411316], "val_accuracy": [0.5513333082199097, 0.6696666479110718, 0.6886666417121887, 0.7006666660308838, 0.7293333411216736, 0.7483333349227905, 0.7620000243186951, 0.7749999761581421, 0.7793333530426025, 0.7953333258628845, 0.8053333163261414, 0.8116666674613953, 0.8153333067893982, 0.8203333616256714, 0.8346666693687439, 0.8349999785423279, 0.8383333086967468, 0.8356666564941406, 0.8500000238418579, 0.8506666421890259, 0.8513333201408386, 0.8543333411216736, 0.8606666922569275, 0.8606666922569275, 0.862666666507721, 0.8703333139419556, 0.8693333268165588, 0.8686666488647461, 0.8733333349227905, 0.8723333477973938, 0.8643333315849304, 0.871999979019165, 0.878000020980835, 0.8786666393280029, 0.8759999871253967, 0.8820000290870667, 0.8773333430290222, 0.8816666603088379, 0.8790000081062317, 0.8836666941642761, 0.8823333382606506, 0.8776666522026062, 0.8826666474342346, 0.8836666941642761, 0.8846666812896729, 0.887666642665863, 0.8870000243186951, 0.8886666893959045, 0.887333333492279, 0.8883333206176758, 0.8899999856948853, 0.8893333077430725, 0.8899999856948853, 0.890666663646698, 0.8889999985694885, 0.8899999856948853, 0.8893333077430725, 0.8916666507720947, 0.8886666893959045, 0.890666663646698, 0.8960000276565552, 0.8946666717529297, 0.890666663646698, 0.890333354473114, 0.8963333368301392, 0.8946666717529297, 0.8913333415985107, 0.8946666717529297, 0.8949999809265137, 0.8946666717529297]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 0, 3], [0, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 3], [0, 2, 2, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 5, 6, 8, 1, 4, 1, 4, 2, 8], [2, 0, 4, 3, 0, 0, 3, 1, 2, 0], [1, 50, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 9, 5, 4, 1, 1, 0, 1, 1, 17, 9, 8, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 6], [0, 1, 0, 2, 0], [39, 39, 34], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 3, 3, 0, 3, 0], [0, 2, 3, 3], [16, 16], [1, 1], [2], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 9, 4, 1, 0, 6, 8], [0, 0, 1, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 98, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 1, 0, 1, 1, 15, 9, 6, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(alpha, sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [4778291200.0, 22741579776.0, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1022322028875351, 0.1018359512090683, 0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [22744346624.0, 23008346112.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5, 0, 1, 2, 2, 9], [0, 2, 0, 3, 4, 3], [16, 16, 42], [0, 1], [0], [4], [99], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 28, 99, 90, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 17, 11, 6, 3, 2, 1, 1, 0, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(tf.math.add(grad, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), sigma)))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), sigma))), alpha), tf.math.add(tf.math.sqrt(beta), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 2, 0, 3], [16, 69], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 6, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 3]], "fitness": -0.07742857187986374, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 1, 0, 1, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), grad)), tf.math.divide_no_nan(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [432513776353280.0, 487416108417024.0, 490662499713024.0, 463623767982080.0, 483773405724672.0, 475445665464320.0], "accuracy": [0.0870426595211029, 0.08321225643157959, 0.08374059200286865, 0.08492933213710785, 0.07911768555641174, 0.080042265355587], "val_loss": [468125699014656.0, 468125631905792.0, 468125699014656.0, 468125766123520.0, 468125766123520.0, 468125732569088.0], "val_accuracy": [0.06800000369548798, 0.06800000369548798, 0.06800000369548798, 0.06800000369548798, 0.06800000369548798, 0.06800000369548798]}}]