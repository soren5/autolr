[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8574285507202148, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22208309173584, 1.862202763557434, 1.397402286529541, 1.0840399265289307, 0.9279738664627075, 0.8390676975250244, 0.7798840999603271, 0.7303076386451721, 0.6855265498161316, 0.6509400010108948, 0.6339841485023499, 0.6082386374473572, 0.5961287021636963, 0.5749993324279785, 0.5559460520744324, 0.5415734052658081, 0.5284473299980164, 0.5147445201873779, 0.503167986869812, 0.49193841218948364, 0.4898526072502136, 0.47244399785995483, 0.4627169668674469, 0.46237677335739136, 0.4545316696166992, 0.4399675130844116, 0.4366567134857178, 0.42884525656700134, 0.4256284832954407, 0.41430357098579407, 0.4076513946056366, 0.3982720375061035, 0.39373472332954407, 0.39270156621932983, 0.38063549995422363, 0.37440744042396545, 0.3793710172176361, 0.3696806728839874, 0.3661026954650879, 0.35906314849853516, 0.3562837541103363, 0.34904730319976807, 0.34402960538864136, 0.33861905336380005, 0.3360253870487213, 0.32531943917274475, 0.3192278742790222, 0.31690165400505066, 0.31496745347976685, 0.30573105812072754, 0.302147775888443, 0.29858410358428955, 0.2968658208847046, 0.29677614569664, 0.29126378893852234], "accuracy": [0.2806762754917145, 0.4991414546966553, 0.5551446080207825, 0.6176198720932007, 0.6674151420593262, 0.6999075412750244, 0.7201162576675415, 0.7326641082763672, 0.7553823590278625, 0.7569673657417297, 0.7693831920623779, 0.7781006693840027, 0.7798177003860474, 0.7959318161010742, 0.7996301651000977, 0.8038568496704102, 0.8064984679222107, 0.8190463781356812, 0.8204993009567261, 0.8260467648506165, 0.8226125836372375, 0.8322546482086182, 0.8294808864593506, 0.8318583965301514, 0.8374059200286865, 0.8461233377456665, 0.8451988101005554, 0.8508783578872681, 0.8481045961380005, 0.8481045961380005, 0.8525954484939575, 0.8578787446022034, 0.8541803956031799, 0.8569541573524475, 0.8639545440673828, 0.8648791313171387, 0.86118084192276, 0.8654074668884277, 0.8692378997802734, 0.8697662353515625, 0.8688416481018066, 0.8728041052818298, 0.8734645247459412, 0.871879518032074, 0.8804649114608765, 0.8815215826034546, 0.8902390599250793, 0.8849557638168335, 0.8858803510665894, 0.8901069760322571, 0.8918240666389465, 0.8908994793891907, 0.8911636471748352, 0.8923524022102356, 0.8934090733528137], "val_loss": [2.0384585857391357, 1.5149348974227905, 1.0514764785766602, 0.845198392868042, 0.7585300207138062, 0.7083368897438049, 0.6618211269378662, 0.6306207776069641, 0.60512375831604, 0.5777747631072998, 0.5573227405548096, 0.5420135855674744, 0.5324748754501343, 0.5198176503181458, 0.5037677884101868, 0.49558374285697937, 0.48980531096458435, 0.47678518295288086, 0.4656356871128082, 0.4622921645641327, 0.4560745060443878, 0.448362797498703, 0.44426751136779785, 0.44414258003234863, 0.4355718493461609, 0.4283008575439453, 0.4221118092536926, 0.41841381788253784, 0.40987804532051086, 0.40614718198776245, 0.4042595624923706, 0.4040389358997345, 0.40173518657684326, 0.3956954777240753, 0.39151903986930847, 0.39716821908950806, 0.3943871259689331, 0.3829832673072815, 0.38186076283454895, 0.37894678115844727, 0.37867993116378784, 0.37333354353904724, 0.3749610185623169, 0.37965503334999084, 0.3669678270816803, 0.3673606216907501, 0.36372989416122437, 0.3636103570461273, 0.3621721863746643, 0.3598968982696533, 0.3588349521160126, 0.3582150936126709, 0.35902515053749084, 0.3551146984100342, 0.3613015115261078], "val_accuracy": [0.5333333611488342, 0.659333348274231, 0.6816666722297668, 0.7093333601951599, 0.7229999899864197, 0.7476666569709778, 0.7570000290870667, 0.768666684627533, 0.7766666412353516, 0.7886666655540466, 0.7990000247955322, 0.8019999861717224, 0.8059999942779541, 0.8146666884422302, 0.8246666789054871, 0.8306666612625122, 0.8349999785423279, 0.8360000252723694, 0.8426666855812073, 0.8376666903495789, 0.840666651725769, 0.8450000286102295, 0.8420000076293945, 0.8383333086967468, 0.8446666598320007, 0.8473333120346069, 0.8443333506584167, 0.8493333458900452, 0.8556666374206543, 0.856333315372467, 0.8539999723434448, 0.8533333539962769, 0.8536666631698608, 0.8553333282470703, 0.8600000143051147, 0.8519999980926514, 0.8573333621025085, 0.8656666874885559, 0.862333357334137, 0.8633333444595337, 0.8640000224113464, 0.8659999966621399, 0.8650000095367432, 0.8603333234786987, 0.8669999837875366, 0.8676666617393494, 0.8659999966621399, 0.8683333396911621, 0.8703333139419556, 0.8736666440963745, 0.8723333477973938, 0.871666669845581, 0.871999979019165, 0.8696666955947876, 0.871999979019165]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 2, 0, 2], [39, 39], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 9, 2, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [6, 3, 3, 6, 6, 1, 3, 1, 4, 2, 8, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 31, 99, 42, 1, 71]], "fitness": -0.173714280128479, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 22, 12, 10, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), sigma), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), sigma)), alpha)), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1457649536.0, 1.2582254870003712e+16, 1.8284211626063797e+20, 4.559421658058051e+31, NaN, NaN, NaN, NaN], "accuracy": [0.10289261490106583, 0.09932637959718704, 0.09430722147226334, 0.10910051316022873, 0.09628847241401672, 0.09694888442754745, 0.09998679161071777, 0.09998679161071777], "val_loss": [61300240384.0, 4.81336941913047e+16, 4.658414017081096e+22, 5.759774143273423e+33, NaN, NaN, NaN, NaN], "val_accuracy": [0.03999999910593033, 0.06300000101327896, 0.1743333339691162, 0.08666666597127914, 0.06533333659172058, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 2, 0, 0, 3, 1], [0, 1, 0, 2, 0], [39, 39, 69], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [4], [35], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 2, 6], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0, 0, 1], [16, 99, 96, 99, 61, 1, 84]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 2, 1, 1, 0, 25, 13, 12, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.subtract(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.add(grad, beta)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39], [0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 8], [0, 2, 0, 3], [11, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [6, 9, 3, 6, 8, 1, 4, 1, 4, 2, 8, 7, 4, 0, 5, 6, 2, 2], [0, 1, 0, 3, 4, 0, 3, 1, 2, 0, 0, 4, 7], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 31, 18, 13, 6], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(alpha, tf.math.pow(tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(sigma, grad))), tf.math.pow(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma)), tf.math.square(alpha)), tf.math.divide_no_nan(beta, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(grad, grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 6, 1, 4, 3, 4], [0, 0, 0, 3, 0, 3, 0, 4, 0], [77, 16, 10, 70, 95, 5], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 2, 4, 1, 1, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 3, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 20, 11, 9, 6, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.pow(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30305814743042, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]