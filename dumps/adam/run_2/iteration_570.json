[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8697142601013184, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223378896713257, 1.8643503189086914, 1.3988347053527832, 1.0992975234985352, 0.9508770108222961, 0.8480886220932007, 0.7763040065765381, 0.726047694683075, 0.6935844421386719, 0.6646609902381897, 0.6422102451324463, 0.6258995532989502, 0.6022853851318359, 0.5863182544708252, 0.5742685794830322, 0.5469769835472107, 0.5360919833183289, 0.5267226696014404, 0.5168432593345642, 0.49998462200164795, 0.49397969245910645, 0.4822823107242584, 0.46865391731262207, 0.4715932607650757, 0.4479652941226959, 0.4415113627910614, 0.4372836649417877, 0.4306993782520294, 0.4252161681652069, 0.41227054595947266, 0.4025823771953583, 0.3961060047149658, 0.3980201184749603, 0.38977381587028503, 0.38725540041923523, 0.37801656126976013, 0.37441661953926086, 0.36154863238334656, 0.3673337399959564, 0.349977970123291, 0.3545524775981903, 0.34867867827415466, 0.345081090927124, 0.34497570991516113, 0.3336121737957001, 0.32661885023117065, 0.3215739130973816, 0.3174184262752533, 0.31316083669662476, 0.30665746331214905, 0.2975618243217468, 0.297819584608078, 0.2928776144981384, 0.29113680124282837, 0.29143381118774414], "accuracy": [0.2645621597766876, 0.4935939908027649, 0.5606921315193176, 0.6174877882003784, 0.6586976647377014, 0.6984546184539795, 0.7215691208839417, 0.7371549606323242, 0.7467969655990601, 0.7594769597053528, 0.7667415142059326, 0.7749306559562683, 0.7847048044204712, 0.7907806038856506, 0.7960638999938965, 0.7998943328857422, 0.8058380484580994, 0.8108572363853455, 0.8168009519577026, 0.8235371708869934, 0.8245938420295715, 0.8297450542449951, 0.8352925777435303, 0.833179235458374, 0.8441421389579773, 0.8428213000297546, 0.8442742228507996, 0.8537842035293579, 0.8486329317092896, 0.8555012345314026, 0.8589354157447815, 0.8607845902442932, 0.8597279191017151, 0.8640866279602051, 0.8652753829956055, 0.8685774803161621, 0.8667283058166504, 0.8689737319946289, 0.8691058158874512, 0.8772949576377869, 0.8765024542808533, 0.8742570281028748, 0.8759741187095642, 0.8779553771018982, 0.8849557638168335, 0.8854840993881226, 0.8854840993881226, 0.8891823887825012, 0.8882578015327454, 0.8934090733528137, 0.8957865834236145, 0.893541157245636, 0.8932769894599915, 0.8969752788543701, 0.8990886211395264], "val_loss": [2.036613941192627, 1.5156233310699463, 1.0497850179672241, 0.8425787091255188, 0.7464292049407959, 0.687044620513916, 0.6380802989006042, 0.6075964570045471, 0.5809869766235352, 0.5563788414001465, 0.5417322516441345, 0.5273112654685974, 0.5085076093673706, 0.5055916905403137, 0.48413386940956116, 0.4718689024448395, 0.46391353011131287, 0.45390573143959045, 0.4470668137073517, 0.4373721778392792, 0.4305259883403778, 0.41988322138786316, 0.4277779161930084, 0.40951278805732727, 0.40342798829078674, 0.4040382206439972, 0.3954453468322754, 0.3920927047729492, 0.38682085275650024, 0.39222168922424316, 0.37940219044685364, 0.3744361102581024, 0.3777821958065033, 0.37034326791763306, 0.37335073947906494, 0.36779120564460754, 0.36284518241882324, 0.3616388440132141, 0.35749104619026184, 0.3582075238227844, 0.35631200671195984, 0.3530803620815277, 0.35151615738868713, 0.353666752576828, 0.3484657108783722, 0.3508661389350891, 0.3417026698589325, 0.33971697092056274, 0.34650179743766785, 0.3387033939361572, 0.3379001319408417, 0.3327133357524872, 0.3336476683616638, 0.33538496494293213, 0.3295114040374756], "val_accuracy": [0.515999972820282, 0.6470000147819519, 0.6930000185966492, 0.7183333039283752, 0.7390000224113464, 0.7519999742507935, 0.768666684627533, 0.7773333191871643, 0.796999990940094, 0.8009999990463257, 0.8006666898727417, 0.809333324432373, 0.815666675567627, 0.8133333325386047, 0.8240000009536743, 0.8320000171661377, 0.8323333263397217, 0.8370000123977661, 0.843999981880188, 0.8446666598320007, 0.8383333086967468, 0.8473333120346069, 0.8510000109672546, 0.8513333201408386, 0.8536666631698608, 0.8569999933242798, 0.859000027179718, 0.8566666841506958, 0.862333357334137, 0.8606666922569275, 0.8603333234786987, 0.8619999885559082, 0.8659999966621399, 0.8653333187103271, 0.8690000176429749, 0.8676666617393494, 0.8726666569709778, 0.8683333396911621, 0.8730000257492065, 0.8703333139419556, 0.8706666827201843, 0.8756666779518127, 0.8769999742507935, 0.8763333559036255, 0.875333309173584, 0.874666690826416, 0.8759999871253967, 0.8786666393280029, 0.8776666522026062, 0.8803333044052124, 0.8766666650772095, 0.8803333044052124, 0.8793333172798157, 0.878333330154419, 0.8799999952316284]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 4, 3], [0, 1, 0, 2], [50, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 0, 0, 3, 8], [0, 2, 0, 3], [16, 16], [0, 1], [8], [0], [99], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 0, 1, 4, 1, 2, 2, 8, 7, 3, 8, 4, 2, 6], [0, 0, 4, 3, 4, 0, 3, 1, 2, 0, 5, 6, 1, 2, 4], [16, 99, 3, 99, 61, 56]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 5, 3, 2, 1, 2, 1, 1, 1, 32, 17, 15, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), tf.math.subtract(tf.math.add(tf.math.add(grad, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(tf.math.multiply(sigma, alpha), beta))), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(grad, grad), alpha)), tf.math.divide_no_nan(beta, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 4, 3], [0, 1, 0, 2, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 1, 1, 2, 2, 5], [0, 0, 0, 3, 0, 1, 3, 1, 2, 3], [16, 99, 97, 99, 44, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 2, 1, 1, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(alpha, tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [4.291787147521973, 29.705114364624023, 127.74407958984375, 295.85302734375, 511.3855895996094, 816.484619140625], "accuracy": [0.1006472036242485, 0.1010434553027153, 0.09377889335155487, 0.10645885765552521, 0.1010434553027153, 0.09602430462837219], "val_loss": [9.346179962158203, 22.275178909301758, 147.35935974121094, 263.1746826171875, 419.4358825683594, 730.5368041992188], "val_accuracy": [0.10166666656732559, 0.09533333033323288, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [5, 2, 5, 0, 3], [0, 1, 0, 2], [39, 47], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 3, 0, 3, 5, 6, 2, 1, 3, 3, 5, 8, 2, 3, 6, 6, 2, 2, 1, 2, 0, 9, 8, 4, 2, 1, 2, 1, 6, 3, 0, 2, 2, 4, 6, 4, 8, 5], [3, 2, 0, 3, 2, 1, 1, 3, 5, 5, 4, 3, 2, 5, 0, 2, 5, 2, 3, 2, 0, 5, 2, 0, 3, 3, 3], [16, 16, 41, 15, 86], [0, 1], [5], [4], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 66, 39, 27, 5, 2, 1, 1, 0, 16, 8, 8, 5], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.square(beta))), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.square(tf.math.sqrt(tf.math.add(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad), tf.math.sqrt(tf.math.pow(grad, grad))), tf.math.add(grad, tf.math.subtract(tf.math.add(grad, beta), grad))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(beta, grad)))), tf.math.divide_no_nan(tf.math.multiply(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad))))), tf.math.pow(tf.math.divide_no_nan(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.pow(tf.math.sqrt(tf.math.square(grad)), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [9.034501075744629, 61.64345932006836, 196.5906982421875, 491.6986999511719, 1000.5166015625, 1778.0166015625, 2680.717041015625], "accuracy": [0.10553427785634995, 0.09866596013307571, 0.09694888442754745, 0.10355303436517715, 0.09259014576673508, 0.0952318087220192, 0.0948355570435524], "val_loss": [33.467350006103516, 36.85319137573242, 126.12031555175781, 284.3492126464844, 542.5676879882812, 895.6885986328125, 1330.731201171875], "val_accuracy": [0.09733333438634872, 0.09966666996479034, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 2, 3, 0, 3, 5, 1, 0, 2, 0, 0, 7, 4, 3, 2, 3, 6, 0, 9, 9, 6, 4, 0, 1], [2, 1, 0, 2, 3, 2, 2, 1, 1, 0, 0, 3, 2, 3], [39, 39, 80, 78, 4], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 2], [16, 69], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 3], [0, 0, 0, 2, 0, 0, 3, 1, 2, 0, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 38, 24, 14, 5, 10, 6, 4, 2, 2, 1, 1, 1, 23, 12, 11, 6], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.square(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad), tf.math.subtract(tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.math.add(tf.math.pow(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(grad, grad), grad), alpha), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(grad, grad))))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.square(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.multiply(alpha, beta)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]