[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8722857236862183, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2252120971679688, 1.865338683128357, 1.388829231262207, 1.0760936737060547, 0.9425135850906372, 0.8366045355796814, 0.7737473249435425, 0.7276661396026611, 0.6899788975715637, 0.6517305970191956, 0.6262674927711487, 0.6097802519798279, 0.5873851180076599, 0.5796813368797302, 0.5620332360267639, 0.5512753129005432, 0.5340003371238708, 0.5159861445426941, 0.5092703700065613, 0.49303707480430603, 0.48735013604164124, 0.4817330837249756, 0.46490049362182617, 0.4578826129436493, 0.46227195858955383, 0.4422239661216736, 0.44135600328445435, 0.4358118176460266, 0.4271387457847595, 0.41522279381752014, 0.4013606011867523, 0.4044516980648041, 0.39939916133880615, 0.3916170001029968, 0.38029390573501587, 0.38038450479507446, 0.38233476877212524, 0.3642289936542511, 0.3622679114341736, 0.3566150665283203, 0.35478195548057556, 0.3597176671028137, 0.3434947431087494, 0.33699697256088257], "accuracy": [0.2661471366882324, 0.5025756359100342, 0.5686171054840088, 0.6321489810943604, 0.6610751748085022, 0.6988508701324463, 0.7194558382034302, 0.7329282760620117, 0.7453441023826599, 0.7650244235992432, 0.776251494884491, 0.7810064554214478, 0.7897239327430725, 0.7898560166358948, 0.7975168228149414, 0.8004226684570312, 0.8029322624206543, 0.8145555257797241, 0.8149517774581909, 0.8273676037788391, 0.8247259259223938, 0.82683926820755, 0.83119797706604, 0.8350284099578857, 0.8400475382804871, 0.8459912538528442, 0.8383304476737976, 0.8433496356010437, 0.8455950617790222, 0.8536521196365356, 0.8553691506385803, 0.8576145768165588, 0.8570862412452698, 0.8605204224586487, 0.8647470474243164, 0.8640866279602051, 0.8660678863525391, 0.8726720213890076, 0.8737286925315857, 0.8746532797813416, 0.8688416481018066, 0.870030403137207, 0.8747853636741638, 0.8798044919967651], "val_loss": [2.039623260498047, 1.5043883323669434, 1.0278840065002441, 0.8258451223373413, 0.7440567016601562, 0.689810037612915, 0.6485255360603333, 0.6209537982940674, 0.5872328877449036, 0.5674824118614197, 0.5452049374580383, 0.5355797410011292, 0.5211277604103088, 0.5048990845680237, 0.5005843639373779, 0.4840085506439209, 0.47748619318008423, 0.47010281682014465, 0.4599665105342865, 0.45582839846611023, 0.4447973966598511, 0.44096794724464417, 0.43184107542037964, 0.43403005599975586, 0.42766350507736206, 0.42290884256362915, 0.42543351650238037, 0.417064905166626, 0.4112454950809479, 0.4085545241832733, 0.4019480049610138, 0.4036543667316437, 0.3954971432685852, 0.39570748805999756, 0.39350447058677673, 0.3892401456832886, 0.39121484756469727, 0.3870045244693756, 0.38457661867141724, 0.38732144236564636, 0.38128793239593506, 0.37874963879585266, 0.38583049178123474, 0.381348580121994], "val_accuracy": [0.5350000262260437, 0.6616666913032532, 0.6830000281333923, 0.70333331823349, 0.7200000286102295, 0.7363333106040955, 0.7630000114440918, 0.7643333077430725, 0.7753333449363708, 0.7893333435058594, 0.7963333129882812, 0.7960000038146973, 0.8100000023841858, 0.8173333406448364, 0.8073333501815796, 0.8259999752044678, 0.8273333311080933, 0.828000009059906, 0.8353333473205566, 0.8316666483879089, 0.8383333086967468, 0.843999981880188, 0.8460000157356262, 0.8383333086967468, 0.8486666679382324, 0.8450000286102295, 0.8453333377838135, 0.8519999980926514, 0.8553333282470703, 0.856333315372467, 0.8579999804496765, 0.8543333411216736, 0.859000027179718, 0.859000027179718, 0.8600000143051147, 0.862666666507721, 0.8566666841506958, 0.8633333444595337, 0.8640000224113464, 0.8616666793823242, 0.862333357334137, 0.8633333444595337, 0.862333357334137, 0.8636666536331177]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3], [0, 2, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1, 1], [2], [1, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 6, 8, 2, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 0, 2, 0], [16, 99, 96, 99, 61, 1, 98]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 10, 6, 4, 1, 3, 1, 2, 0, 21, 11, 10, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(beta), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3028624057769775, 2.302577495574951, 2.3026046752929688, 2.3026230335235596, 2.3026349544525146, 2.3026578426361084, 2.3027005195617676], "accuracy": [0.09840179979801178, 0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025617599487305, 2.3025386333465576, 2.302532434463501, 2.302537679672241, 2.3025479316711426, 2.3025705814361572, 2.3025951385498047], "val_accuracy": [0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 21], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 9, 0, 3, 5], [1, 2, 0, 3], [16, 16], [0, 1], [0], [3], [60], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 1, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 4, 2, 0, 0, 0, 1, 2, 0], [16, 40, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 1, 0, 1, 0, 2, 1, 1, 0, 21, 11, 10, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(grad, tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.pow(beta, tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha)), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [2, 2, 3, 0, 3], [0, 2, 0, 2], [38, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 2], [3, 2, 0, 3, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 4, 4, 6, 8, 1, 4, 1, 4, 2, 8, 3], [0, 1, 0, 3, 0, 0, 3, 1, 2, 0, 1], [16, 99, 24, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 11, 6, 5, 1, 2, 1, 1, 1, 23, 12, 11, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(alpha, tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma)), tf.math.sqrt(tf.math.multiply(alpha, beta)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 3, 0, 3], [16, 16], [0, 1], [5], [3], [98], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 9, 2, 8], [2, 3, 0, 3, 0, 0, 3, 1, 2, 0], [57, 99, 96, 99, 61, 1]], "fitness": -0.09571428596973419, "mapping_values": [1, 10, 5, 5, 2, 10, 6, 4, 1, 2, 1, 1, 0, 16, 8, 8, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, tf.math.multiply(sigma, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [2.309312582015991, 2.3097472190856934, 2.310741424560547, 2.310851812362671, 2.310121774673462, 2.3095180988311768], "accuracy": [0.09285431355237961, 0.09298639744520187, 0.09140139818191528, 0.08598599582910538, 0.08849557489156723, 0.0948355570435524], "val_loss": [2.308682918548584, 2.308682918548584, 2.308682918548584, 2.308682918548584, 2.308682918548584, 2.308682918548584], "val_accuracy": [0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341]}}]