[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8725714087486267, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2246811389923096, 1.8640295267105103, 1.3928420543670654, 1.1056410074234009, 0.9350547790527344, 0.842428982257843, 0.78023761510849, 0.7326473593711853, 0.694551408290863, 0.6726264357566833, 0.640534520149231, 0.6253942847251892, 0.6031182408332825, 0.5895251631736755, 0.5668047070503235, 0.5526070594787598, 0.5509095191955566, 0.5328847169876099, 0.523569643497467, 0.5127648711204529, 0.4992070198059082, 0.49092233180999756, 0.4839514195919037, 0.467317134141922, 0.458266019821167, 0.4530274569988251, 0.44265806674957275, 0.4441028833389282, 0.4277723431587219, 0.4195433557033539, 0.4176633358001709, 0.4155016839504242, 0.4040859341621399, 0.40526247024536133, 0.3976811170578003, 0.3840237855911255, 0.3795716166496277, 0.37750256061553955, 0.3806820511817932, 0.3741742670536041, 0.36661651730537415, 0.35319381952285767, 0.3539925217628479, 0.35067877173423767, 0.34140241146087646, 0.3378078043460846, 0.3297930359840393, 0.33005452156066895, 0.33231326937675476, 0.31886178255081177, 0.31330606341362, 0.3047456443309784, 0.304775208234787], "accuracy": [0.2641659080982208, 0.49385812878608704, 0.5585787892341614, 0.6061286330223083, 0.6655659675598145, 0.6886804699897766, 0.7180029153823853, 0.7308149337768555, 0.7437590956687927, 0.7478536367416382, 0.7584202885627747, 0.7667415142059326, 0.769911527633667, 0.7832518815994263, 0.7927618622779846, 0.7985734939575195, 0.8009510040283203, 0.8042530417442322, 0.8101968169212341, 0.8146876096725464, 0.8131026029586792, 0.817461371421814, 0.8253863453865051, 0.8251221776008606, 0.8286884427070618, 0.835160493850708, 0.8411042094230652, 0.8381983637809753, 0.8465195894241333, 0.8475762605667114, 0.8485008478164673, 0.8466516733169556, 0.8516708612442017, 0.8536521196365356, 0.8549728989601135, 0.8601241707801819, 0.8639545440673828, 0.8626337051391602, 0.8627657890319824, 0.8619733452796936, 0.8656716346740723, 0.8747853636741638, 0.8754457831382751, 0.8729361891746521, 0.8730682730674744, 0.8825782537460327, 0.8813894987106323, 0.8780874609947205, 0.8804649114608765, 0.884691596031189, 0.8908994793891907, 0.885219931602478, 0.8901069760322571], "val_loss": [2.042433500289917, 1.5183908939361572, 1.0518769025802612, 0.8529036641120911, 0.7655355334281921, 0.710136890411377, 0.665465235710144, 0.6328160762786865, 0.6059549450874329, 0.5871389508247375, 0.5791187286376953, 0.5535398721694946, 0.541211724281311, 0.5301812291145325, 0.5201349258422852, 0.512055516242981, 0.5045228004455566, 0.4946935176849365, 0.4859694838523865, 0.47898152470588684, 0.4756404757499695, 0.4666542708873749, 0.4603062868118286, 0.4544104039669037, 0.4487277865409851, 0.4431367516517639, 0.4494589567184448, 0.4363732933998108, 0.4321569800376892, 0.42774051427841187, 0.4216545820236206, 0.42112699151039124, 0.41456159949302673, 0.4136608839035034, 0.41495954990386963, 0.40539342164993286, 0.4071652889251709, 0.402705579996109, 0.4074220061302185, 0.39430826902389526, 0.39869457483291626, 0.39428597688674927, 0.3910873532295227, 0.39172008633613586, 0.38741979002952576, 0.39154475927352905, 0.3917427659034729, 0.3805193603038788, 0.38190242648124695, 0.3909166753292084, 0.3785518407821655, 0.379485547542572, 0.375220388174057], "val_accuracy": [0.5366666913032532, 0.6439999938011169, 0.6673333048820496, 0.6943333148956299, 0.722000002861023, 0.7429999709129333, 0.7516666650772095, 0.762333333492279, 0.7753333449363708, 0.7833333611488342, 0.7793333530426025, 0.8009999990463257, 0.8043333292007446, 0.8076666593551636, 0.8100000023841858, 0.8140000104904175, 0.815666675567627, 0.8236666917800903, 0.8243333101272583, 0.8293333053588867, 0.8289999961853027, 0.8320000171661377, 0.8410000205039978, 0.8383333086967468, 0.8393333554267883, 0.8446666598320007, 0.8393333554267883, 0.8479999899864197, 0.846666693687439, 0.8489999771118164, 0.8516666889190674, 0.8500000238418579, 0.8513333201408386, 0.8523333072662354, 0.8566666841506958, 0.8586666584014893, 0.8523333072662354, 0.859666645526886, 0.859333336353302, 0.859666645526886, 0.8553333282470703, 0.8610000014305115, 0.8646666407585144, 0.8583333492279053, 0.8676666617393494, 0.8603333234786987, 0.8629999756813049, 0.8690000176429749, 0.8603333234786987, 0.8586666584014893, 0.8653333187103271, 0.8669999837875366, 0.8679999709129333]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [2, 2, 3, 0, 3, 3, 9, 9], [0, 1, 0, 2], [39, 39, 32, 74], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 4, 3, 0, 3, 5], [1, 2, 0, 2], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 4, 2, 8, 1, 4, 1, 4, 2, 8], [0, 3, 0, 3, 0, 0, 3, 0, 2, 0], [16, 72, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 8, 4, 4, 10, 6, 4, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(alpha), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303635835647583, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 8, 9], [0, 1, 0, 2], [39, 39, 16], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 2, 3, 0, 3, 5, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 7, 9, 1, 8, 7, 2, 8, 3, 4, 5, 8, 3, 0, 6, 5, 0], [0, 2, 0, 0, 5, 6, 7, 4, 5], [99, 10, 24, 95], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 3], [0, 0, 0, 3, 0, 3, 3, 1, 2, 4], [16, 99, 96, 99, 81, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 7, 3, 3, 11, 7, 4, 2, 27, 18, 9, 4, 10, 5, 5, 4], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.pow(tf.math.square(tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.negative(grad), grad)), tf.math.divide_no_nan(grad, tf.math.square(grad))))), tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 2, 3, 0, 3, 3, 5, 4, 3, 9, 2, 2, 6, 7, 6, 5, 0, 0, 6, 4, 0, 5, 9], [0, 1, 0, 2, 1, 1, 2, 2, 3, 2, 1, 2], [39, 39, 70, 36], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 2, 3, 0, 3, 5, 7, 9, 6, 3, 8, 3, 2, 8, 3, 9], [0, 3, 0, 3, 2, 1, 5, 5, 4], [16, 99, 24, 99], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 7, 3, 7, 8, 0, 0, 3, 3], [0, 0, 7, 7, 3, 0], [99, 79, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 3, 1, 0, 5, 4, 0, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 45, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 35, 23, 12, 4, 25, 16, 9, 4, 15, 9, 6, 3, 17, 9, 8, 5], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.square(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(grad, tf.math.divide_no_nan(alpha, alpha)), grad))))))), tf.math.add(tf.math.divide_no_nan(grad, tf.math.square(tf.math.negative(grad))), tf.math.negative(grad))), tf.math.divide_no_nan(tf.math.pow(tf.math.negative(alpha), grad), tf.math.square(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.multiply(grad, sigma), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 6, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 6, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 3, 99, 61, 1]], "fitness": -0.0925714299082756, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.310742139816284, 2.3106274604797363, 2.3089921474456787, 2.309528112411499, 2.3091397285461426, 2.3090145587921143, 2.3099851608276367, 2.3084685802459717, 2.3083510398864746, 2.3092825412750244], "accuracy": [0.0882314071059227, 0.09126931428909302, 0.09615638852119446, 0.09087307006120682, 0.09100515395402908, 0.09285431355237961, 0.09536388516426086, 0.0878351628780365, 0.09668471664190292, 0.09259014576673508], "val_loss": [2.3075361251831055, 2.307385206222534, 2.3072965145111084, 2.307232141494751, 2.3071823120117188, 2.3071415424346924, 2.3071069717407227, 2.307076930999756, 2.307051181793213, 2.3070271015167236], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09200000017881393, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}]