[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.847428560256958, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2215983867645264, 1.8642418384552002, 1.3932377099990845, 1.083925485610962, 0.9368826746940613, 0.8420254588127136, 0.777154803276062, 0.719287633895874, 0.6820520162582397, 0.6698452830314636, 0.6488957405090332, 0.624103307723999, 0.6122009754180908, 0.5784439444541931, 0.5615221261978149, 0.5541345477104187, 0.5464973449707031, 0.5235368609428406, 0.5155295133590698, 0.504280686378479, 0.4922216534614563, 0.4918683171272278, 0.47721055150032043, 0.4681897461414337, 0.4669206440448761, 0.45550069212913513, 0.44549861550331116, 0.4334917664527893, 0.43492570519447327, 0.42679452896118164, 0.42142459750175476, 0.4113749861717224, 0.4080697000026703, 0.3998343050479889, 0.38881486654281616, 0.3877296447753906, 0.3801150619983673, 0.37795814871788025, 0.3697192072868347, 0.3638341724872589, 0.3640369474887848, 0.36207571625709534, 0.34769248962402344, 0.35067620873451233, 0.3432445228099823, 0.33167824149131775, 0.3270007073879242, 0.3306364119052887, 0.32942914962768555], "accuracy": [0.2817329168319702, 0.49293357133865356, 0.561352550983429, 0.6247523427009583, 0.6639809608459473, 0.6931713223457336, 0.7207766771316528, 0.7416457533836365, 0.7528728246688843, 0.7625148296356201, 0.7683265209197998, 0.7784969210624695, 0.7817989587783813, 0.7984414100646973, 0.8017435073852539, 0.7997622489929199, 0.8099326491355896, 0.8177255392074585, 0.8153480291366577, 0.8216879963874817, 0.8265751004219055, 0.8280280232429504, 0.8323867321014404, 0.8352925777435303, 0.8413683772087097, 0.843481719493866, 0.8459912538528442, 0.8467837572097778, 0.8490291833877563, 0.8498216867446899, 0.8537842035293579, 0.8535200357437134, 0.8533879518508911, 0.859199583530426, 0.8625016212463379, 0.8601241707801819, 0.8652753829956055, 0.8638224601745605, 0.8729361891746521, 0.8720116019248962, 0.8720116019248962, 0.8728041052818298, 0.8787478804588318, 0.8782195448875427, 0.8745211958885193, 0.8821820020675659, 0.8856161832809448, 0.8812574148178101, 0.8833707571029663], "val_loss": [2.042431354522705, 1.5259990692138672, 1.0691535472869873, 0.8681966066360474, 0.7866510152816772, 0.7312998175621033, 0.6875173449516296, 0.6517888307571411, 0.6235235333442688, 0.6061266660690308, 0.592176616191864, 0.5728120803833008, 0.5587461590766907, 0.5389829874038696, 0.5351243615150452, 0.519702672958374, 0.5071370601654053, 0.49866679310798645, 0.49111369252204895, 0.4869443476200104, 0.48185405135154724, 0.4707241356372833, 0.472782701253891, 0.4597282409667969, 0.45726343989372253, 0.448555052280426, 0.4493260979652405, 0.4376364052295685, 0.43967780470848083, 0.43642711639404297, 0.4343453645706177, 0.42472028732299805, 0.4184238612651825, 0.41367512941360474, 0.4170805811882019, 0.4092869758605957, 0.4098338484764099, 0.4097619354724884, 0.40216198563575745, 0.4049343168735504, 0.396681547164917, 0.3946002125740051, 0.3953758180141449, 0.3930637240409851, 0.3888761103153229, 0.3877924084663391, 0.3897685408592224, 0.38119661808013916, 0.3840099573135376], "val_accuracy": [0.5423333048820496, 0.6346666812896729, 0.6613333225250244, 0.6856666803359985, 0.7196666598320007, 0.7356666922569275, 0.7473333477973938, 0.753333330154419, 0.7676666378974915, 0.7746666669845581, 0.7846666574478149, 0.7893333435058594, 0.7983333468437195, 0.8040000200271606, 0.8076666593551636, 0.8176666498184204, 0.8230000138282776, 0.8230000138282776, 0.8263333439826965, 0.8273333311080933, 0.831333339214325, 0.8393333554267883, 0.8360000252723694, 0.8386666774749756, 0.8463333249092102, 0.8493333458900452, 0.8443333506584167, 0.8526666760444641, 0.8506666421890259, 0.8536666631698608, 0.8516666889190674, 0.859666645526886, 0.8606666922569275, 0.8586666584014893, 0.8586666584014893, 0.8613333106040955, 0.8636666536331177, 0.8616666793823242, 0.8629999756813049, 0.8610000014305115, 0.8690000176429749, 0.8690000176429749, 0.8666666746139526, 0.8706666827201843, 0.8700000047683716, 0.8693333268165588, 0.8669999837875366, 0.8700000047683716, 0.8679999709129333]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [6, 1, 3, 0, 3], [0, 1, 0, 2], [57, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [9, 16], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [1, 3, 8, 5, 0, 2, 1, 1, 8, 8], [0, 0, 7, 4, 7, 3], [99, 22], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 2, 1, 1, 1, 5, 3, 1, 9], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0, 1, 0, 6, 2, 3], [16, 99, 96, 99, 61, 1, 30, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 1, 16, 10, 6, 2, 34, 19, 15, 8], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(tf.math.subtract(tf.math.subtract(grad, grad), tf.math.sqrt(grad)), tf.math.sqrt(sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.add(grad, beta)))), tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.subtract(grad, beta))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2, 1], [47, 39], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 2, 3, 0, 3, 3], [2, 2, 0, 3], [6, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 1, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 6, 3, 3, 1, 2, 1, 1, 0, 20, 10, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.multiply(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha)))), alpha), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [6, 3, 3, 6, 8, 1, 1, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 0, 20, 10, 10, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))))), sigma)), alpha), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 0, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0], [6, 6, 7, 1, 3, 7, 1, 3, 6, 2, 4, 6, 9, 3, 8, 6, 8, 0, 0, 9, 8, 2, 6, 0, 7, 9, 9, 2, 7, 1, 1, 6, 5, 5, 4, 2, 6, 5, 9], [0, 4, 3, 5, 7, 3, 0, 6, 4, 7, 4, 3, 3, 7, 3, 7, 4, 2, 0, 4, 1], [99, 50, 52, 35, 7, 7, 92, 14], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.0974285677075386, "mapping_values": [1, 10, 5, 5, 2, 6, 3, 3, 2, 60, 39, 21, 8, 10, 5, 5, 4], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.divide_no_nan(grad, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(sigma, grad)), grad)), tf.math.sqrt(sigma))), tf.math.negative(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad), tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(grad, grad), grad))), tf.math.negative(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(sigma, tf.math.square(sigma)), grad), sigma), tf.math.square(grad)), tf.math.pow(tf.math.add(grad, beta), tf.math.divide_no_nan(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))))), alpha), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [362095640051712.0, 432304228925440.0, 437980128870400.0, 456201963831296.0, 448553700818944.0, 439586178203648.0], "accuracy": [0.10830801725387573, 0.10698718577623367, 0.11240258812904358, 0.10777968913316727, 0.10672302544116974, 0.10976093262434006], "val_loss": [447267223896064.0, 447267223896064.0, 447267223896064.0, 447267223896064.0, 447267223896064.0, 447267223896064.0], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}]