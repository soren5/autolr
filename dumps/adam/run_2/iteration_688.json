[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8600000143051147, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2239043712615967, 1.8644927740097046, 1.3863893747329712, 1.0885924100875854, 0.9456003308296204, 0.8436331748962402, 0.773308277130127, 0.7338014841079712, 0.6960486769676208, 0.6647297739982605, 0.6452693343162537, 0.6223675012588501, 0.5965298414230347, 0.5774174332618713, 0.5737228989601135, 0.5572750568389893, 0.5434736013412476, 0.5247520804405212, 0.5080921053886414, 0.502415657043457, 0.48949405550956726, 0.48066818714141846, 0.4752536714076996, 0.4624421298503876, 0.460580050945282, 0.4544426500797272, 0.44075873494148254, 0.4428068995475769, 0.42664262652397156, 0.4206351041793823, 0.41258302330970764, 0.4077068865299225, 0.39722520112991333, 0.3889812231063843, 0.37893953919410706, 0.36971452832221985, 0.3694896101951599, 0.3606085777282715, 0.3622564375400543, 0.35550859570503235, 0.34925371408462524, 0.34973472356796265, 0.3429899215698242, 0.34036731719970703, 0.3343798816204071, 0.32579103112220764, 0.32314661145210266, 0.3165319263935089, 0.3084612488746643, 0.3026879131793976, 0.30217915773391724, 0.2974662780761719, 0.2902328670024872, 0.28935542702674866, 0.2784152030944824, 0.27771082520484924, 0.2755190134048462, 0.27374154329299927, 0.261343389749527, 0.2694687843322754, 0.26292911171913147, 0.257347971200943, 0.2560373544692993, 0.24564680457115173, 0.24151933193206787, 0.2456236630678177, 0.23413313925266266, 0.23444432020187378, 0.23191478848457336, 0.22552621364593506, 0.2273455262184143, 0.22222356498241425], "accuracy": [0.2759212851524353, 0.48685774207115173, 0.5650508403778076, 0.6145819425582886, 0.656980574131012, 0.6935675740242004, 0.7168141603469849, 0.7333245277404785, 0.7464007139205933, 0.7559106945991516, 0.7626469135284424, 0.7749306559562683, 0.7824593782424927, 0.7926297783851624, 0.7887993454933167, 0.7989697456359863, 0.8054417967796326, 0.8121780753135681, 0.8149517774581909, 0.8201030492782593, 0.8251221776008606, 0.8255184292793274, 0.8301413059234619, 0.832650899887085, 0.8329150676727295, 0.8397833704948425, 0.8408400416374207, 0.8428213000297546, 0.8499537706375122, 0.8502179384231567, 0.8520671129226685, 0.8527275323867798, 0.859199583530426, 0.863029956817627, 0.8660678863525391, 0.8681812286376953, 0.8701624870300293, 0.8735966086387634, 0.8722757697105408, 0.8754457831382751, 0.8745211958885193, 0.8725399374961853, 0.8800686597824097, 0.8775591254234314, 0.8786157965660095, 0.8842953443527222, 0.8841632604598999, 0.8828424215316772, 0.8850878477096558, 0.8918240666389465, 0.891559898853302, 0.8898428082466125, 0.8967111110687256, 0.8899748921394348, 0.90423983335495, 0.9009377956390381, 0.8993527889251709, 0.9027869701385498, 0.9045040011405945, 0.9039757251739502, 0.90423983335495, 0.9078060984611511, 0.9063531756401062, 0.9093911051750183, 0.9116365313529968, 0.9089948534965515, 0.9111081957817078, 0.9142781496047974, 0.9166556596755981, 0.9174481630325317, 0.9154669046401978, 0.920089840888977], "val_loss": [2.042173385620117, 1.519916296005249, 1.0459239482879639, 0.8383185267448425, 0.7492057085037231, 0.6890910863876343, 0.6402007937431335, 0.6078642010688782, 0.5807192921638489, 0.5559109449386597, 0.5455963015556335, 0.5246963500976562, 0.511767566204071, 0.4972250461578369, 0.4892438054084778, 0.48268961906433105, 0.46718481183052063, 0.463558554649353, 0.4604254961013794, 0.4486925005912781, 0.4413192868232727, 0.4331413209438324, 0.42850008606910706, 0.4278254508972168, 0.42440006136894226, 0.4141431450843811, 0.4171821177005768, 0.41665393114089966, 0.4132319688796997, 0.4054256081581116, 0.3981951177120209, 0.39573806524276733, 0.39085257053375244, 0.3881066143512726, 0.38638249039649963, 0.3843151032924652, 0.3772948682308197, 0.37663567066192627, 0.3746054768562317, 0.37359029054641724, 0.36963269114494324, 0.36779776215553284, 0.36775752902030945, 0.36868423223495483, 0.3660462498664856, 0.3659268915653229, 0.37155136466026306, 0.35660579800605774, 0.3645419776439667, 0.36181506514549255, 0.35353490710258484, 0.3557344973087311, 0.35368266701698303, 0.3540148437023163, 0.353607177734375, 0.3533703088760376, 0.35542532801628113, 0.3518022894859314, 0.35562947392463684, 0.35553956031799316, 0.3518804609775543, 0.3504708707332611, 0.34926357865333557, 0.3512757122516632, 0.3516714572906494, 0.34651505947113037, 0.3487101197242737, 0.3486682176589966, 0.3489806354045868, 0.3510096073150635, 0.35042089223861694, 0.3518151342868805], "val_accuracy": [0.5223333239555359, 0.6603333353996277, 0.6883333325386047, 0.7059999704360962, 0.7279999852180481, 0.7423333525657654, 0.7580000162124634, 0.7693333625793457, 0.7833333611488342, 0.7919999957084656, 0.7910000085830688, 0.8100000023841858, 0.8149999976158142, 0.8199999928474426, 0.8236666917800903, 0.8230000138282776, 0.8306666612625122, 0.8326666951179504, 0.8326666951179504, 0.8349999785423279, 0.840666651725769, 0.843999981880188, 0.843666672706604, 0.8463333249092102, 0.8460000157356262, 0.8479999899864197, 0.840666651725769, 0.8433333039283752, 0.8536666631698608, 0.8473333120346069, 0.8526666760444641, 0.8583333492279053, 0.8519999980926514, 0.8560000061988831, 0.8583333492279053, 0.8569999933242798, 0.859333336353302, 0.862666666507721, 0.862333357334137, 0.8640000224113464, 0.8646666407585144, 0.8636666536331177, 0.8650000095367432, 0.8669999837875366, 0.8666666746139526, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8663333058357239, 0.8713333606719971, 0.871666669845581, 0.8730000257492065, 0.8726666569709778, 0.8713333606719971, 0.8743333220481873, 0.8733333349227905, 0.875333309173584, 0.8730000257492065, 0.8736666440963745, 0.875, 0.8763333559036255, 0.8759999871253967, 0.8773333430290222, 0.8766666650772095, 0.878000020980835, 0.8776666522026062, 0.8790000081062317, 0.878333330154419, 0.8786666393280029, 0.8773333430290222, 0.8790000081062317, 0.878333330154419]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 6, 0, 5, 9], [0, 1, 0, 2], [39, 55, 27], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 7, 8, 8, 1, 6, 4, 1, 2], [0, 3, 0, 3, 5, 4, 1, 0, 5, 4], [16, 16, 9], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 9, 6, 8, 1, 4, 1, 4, 4, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.square(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.subtract(grad, tf.math.divide_no_nan(grad, grad)))), tf.math.pow(alpha, tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}, "mapping_values": [1, 13, 9, 4, 3, 24, 14, 10, 3, 2, 1, 1, 0, 16, 9, 7, 6], "tree_depth": 21}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 13], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [9], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 1, 4, 1, 8, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 78, 61, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 1, 0, 1, 1, 14, 7, 7, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.add(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0940430611371994, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 0, 3], [0, 1, 2, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 79, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 1, 10, 6, 4, 2, 2, 1, 1, 1, 20, 10, 10, 6], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.pow(sigma, tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [19.500722885131836, 203.20233154296875, 19546.541015625, 6332990.5, 2053544704.0, 694924541952.0], "accuracy": [0.10342095047235489, 0.09998679161071777, 0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [113.17595672607422, 235.4585418701172, 209320.53125, 65907240.0, 21722214400.0, 7420223946752.0], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [2, 2, 3, 6, 3, 0, 1, 7, 6, 2, 7, 0, 0, 2, 2, 3, 5, 5, 3, 7, 6, 8, 1, 2, 9, 1, 5, 0, 6], [0, 2, 0, 2, 2, 2, 0, 3, 2, 1, 3, 0, 1, 2, 1, 0, 3, 1, 0, 0], [39, 39, 4, 71, 7, 95, 69, 98], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 1, 0], [0, 2, 3, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 1, 9], [0, 3, 0, 3, 4, 0, 3, 1, 2, 4], [16, 86, 96, 27, 54, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 49, 29, 20, 8, 10, 6, 4, 1, 2, 1, 1, 0, 23, 13, 10, 4], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), tf.math.negative(tf.math.subtract(tf.math.add(grad, tf.math.divide_no_nan(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), grad)), tf.math.add(grad, tf.math.add(tf.math.negative(tf.math.negative(tf.math.add(tf.math.add(tf.math.multiply(alpha, tf.math.square(grad)), tf.math.square(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, grad)), alpha)), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.square(alpha)))), tf.math.negative(tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.subtract(grad, tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.add(tf.math.sqrt(grad), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, alpha)), beta))), grad), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]