[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8642857074737549, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.225119113922119, 1.8664182424545288, 1.3959934711456299, 1.1088039875030518, 0.9448013305664062, 0.842465877532959, 0.7750798463821411, 0.7282140254974365, 0.6866399645805359, 0.6632537245750427, 0.6489464640617371, 0.6200295686721802, 0.6012246012687683, 0.5970144867897034, 0.5735021829605103, 0.5497542023658752, 0.5306825041770935, 0.526206374168396, 0.5052489638328552, 0.5022140741348267, 0.4871752858161926, 0.4789600372314453, 0.47328516840934753, 0.47148340940475464, 0.4534554183483124, 0.4424554705619812, 0.4430411458015442, 0.4289732277393341, 0.42379605770111084, 0.41949617862701416, 0.41220635175704956, 0.4132833778858185, 0.4093721807003021, 0.39536598324775696, 0.3870496153831482, 0.3860027492046356, 0.3823847770690918, 0.3722885251045227, 0.37561365962028503, 0.3600166440010071, 0.3546711504459381, 0.34705397486686707, 0.3458564877510071, 0.3462301790714264, 0.34077367186546326, 0.3336372375488281, 0.33748704195022583, 0.3263286054134369, 0.3117308020591736, 0.3157549202442169, 0.3090914189815521, 0.3123404085636139, 0.2936859726905823, 0.2906670868396759, 0.29148441553115845, 0.29454880952835083, 0.2811877727508545, 0.2802145779132843], "accuracy": [0.26443007588386536, 0.49808478355407715, 0.5646545886993408, 0.6159027814865112, 0.6604147553443909, 0.698190450668335, 0.7194558382034302, 0.7317395210266113, 0.7498348951339722, 0.759080708026886, 0.7689869403839111, 0.774798572063446, 0.7807422876358032, 0.7841764688491821, 0.7918372750282288, 0.8005547523498535, 0.8061022162437439, 0.8148196935653687, 0.819442629814148, 0.8234050869941711, 0.8203672170639038, 0.8274996876716614, 0.829216718673706, 0.8289526104927063, 0.8396512866020203, 0.8405758738517761, 0.837537944316864, 0.8477083444595337, 0.8504821062088013, 0.8518029451370239, 0.8533879518508911, 0.8490291833877563, 0.8544445633888245, 0.8614450097084045, 0.8622375130653381, 0.8614450097084045, 0.8685774803161621, 0.8669924736022949, 0.8661999702453613, 0.872407853603363, 0.8733324408531189, 0.8741249442100525, 0.8775591254234314, 0.8766345381736755, 0.8800686597824097, 0.8824461698532104, 0.8805969953536987, 0.8841632604598999, 0.8910315632820129, 0.887597382068634, 0.8883898854255676, 0.887597382068634, 0.8942015767097473, 0.89988112449646, 0.8972394466400146, 0.891559898853302, 0.8952582478523254, 0.9035794734954834], "val_loss": [2.0378832817077637, 1.5120470523834229, 1.037733554840088, 0.8259885907173157, 0.7368905544281006, 0.680290699005127, 0.6274139881134033, 0.5951765775680542, 0.5666649341583252, 0.5495297908782959, 0.5302761197090149, 0.5082135200500488, 0.4994480013847351, 0.48948031663894653, 0.4705321788787842, 0.4590080976486206, 0.44983574748039246, 0.4436255395412445, 0.4386621415615082, 0.42362916469573975, 0.42472144961357117, 0.41310954093933105, 0.4150313436985016, 0.404793918132782, 0.3977075219154358, 0.3940756320953369, 0.3868095576763153, 0.3847205936908722, 0.38045263290405273, 0.38229143619537354, 0.3712694048881531, 0.3744967579841614, 0.37311819195747375, 0.36315226554870605, 0.3624107241630554, 0.3661845326423645, 0.3580136299133301, 0.35392919182777405, 0.35330620408058167, 0.3490280210971832, 0.34838607907295227, 0.3470471203327179, 0.34719255566596985, 0.3437362611293793, 0.33984142541885376, 0.3439580202102661, 0.3418196737766266, 0.3361225426197052, 0.33612510561943054, 0.3316105604171753, 0.33181360363960266, 0.3319277763366699, 0.3254487216472626, 0.32967132329940796, 0.3329576253890991, 0.32709449529647827, 0.32695186138153076, 0.3294512629508972], "val_accuracy": [0.5636666417121887, 0.6669999957084656, 0.6866666674613953, 0.7096666693687439, 0.7363333106040955, 0.750333309173584, 0.7649999856948853, 0.7739999890327454, 0.7856666445732117, 0.79666668176651, 0.79666668176651, 0.8109999895095825, 0.8140000104904175, 0.8186666369438171, 0.831333339214325, 0.8336666822433472, 0.8349999785423279, 0.8396666646003723, 0.843999981880188, 0.8476666808128357, 0.8463333249092102, 0.8523333072662354, 0.8483333587646484, 0.8519999980926514, 0.859666645526886, 0.859333336353302, 0.8576666712760925, 0.8646666407585144, 0.8646666407585144, 0.8646666407585144, 0.8663333058357239, 0.862666666507721, 0.8629999756813049, 0.8656666874885559, 0.8706666827201843, 0.8656666874885559, 0.8696666955947876, 0.875, 0.875333309173584, 0.875333309173584, 0.8743333220481873, 0.8759999871253967, 0.8743333220481873, 0.8793333172798157, 0.8769999742507935, 0.878333330154419, 0.8793333172798157, 0.8803333044052124, 0.8763333559036255, 0.8830000162124634, 0.8820000290870667, 0.8796666860580444, 0.887666642665863, 0.8820000290870667, 0.8836666941642761, 0.8849999904632568, 0.8830000162124634, 0.8816666603088379]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3, 5], [0, 2, 0, 3, 2], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 2, 9, 6, 4, 1, 4, 1, 8, 1, 8, 5, 3, 3, 6, 1, 3, 7, 6, 7, 9, 1, 1, 8, 7, 1, 5, 7, 7, 2, 8, 1], [0, 0, 0, 0, 0, 0, 3, 1, 2, 0, 0, 5, 3, 1, 6, 6, 3, 7, 6, 2, 5, 5, 3], [16, 78, 6, 99, 61, 1, 19, 79, 59, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 10, 5, 5, 2, 2, 1, 1, 0, 55, 32, 23, 10], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(alpha, beta)), tf.math.subtract(tf.math.multiply(tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(sigma, alpha)), tf.math.subtract(tf.math.sqrt(tf.math.add(grad, grad)), tf.math.subtract(tf.math.square(tf.math.add(sigma, grad)), tf.math.add(tf.math.add(grad, beta), tf.math.sqrt(grad)))))))), tf.math.subtract(grad, sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 4, 0, 3], [2, 1, 2, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 52], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 9, 2, 4, 1, 4, 1, 4, 2, 8], [3, 0, 4, 2, 0, 0, 0, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 1, 0, 1, 1, 2, 1, 1, 1, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303485155105591, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 3, 8, 8, 7, 6, 2, 6, 2, 7, 9, 5, 7, 0, 1, 1, 8, 5, 3, 6, 1, 7, 2, 5, 6, 7, 8, 0, 4, 2, 3, 4, 8, 8], [0, 1, 0, 2, 0, 3, 0, 0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 1, 1, 3, 1, 0, 3, 1], [39, 39, 55, 91, 3, 34, 22, 48, 33, 15, 2], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 8], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 4, 2, 0], [16, 26, 96, 49, 61, 44]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(tf.math.divide_no_nan(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), grad), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(tf.math.negative(tf.math.subtract(tf.math.subtract(tf.math.sqrt(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), grad))), alpha)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(grad, tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.pow(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.pow(tf.math.sqrt(grad), alpha), tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), grad)))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.subtract(sigma, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}, "mapping_values": [1, 62, 38, 24, 11, 9, 5, 4, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 36}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 3, 6, 5], [0, 1, 1, 2, 3, 1], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 0, 0, 6, 5], [2, 2, 3, 3], [16, 42], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 22]], "fitness": -0.09457142651081085, "mapping_values": [1, 14, 8, 6, 1, 2, 1, 1, 0, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(alpha, tf.math.square(grad))), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3102381229400635, 2.3101518154144287, 2.3100571632385254, 2.309631824493408, 2.3098232746124268, 2.3090012073516846], "accuracy": [0.08994849026203156, 0.09536388516426086, 0.08902391046285629, 0.09536388516426086, 0.09457138925790787, 0.09721305221319199], "val_loss": [2.3097829818725586, 2.3097829818725586, 2.3097829818725586, 2.3097829818725586, 2.3097829818725586, 2.3097829818725586], "val_accuracy": [0.08666666597127914, 0.08666666597127914, 0.08666666597127914, 0.08666666597127914, 0.08666666597127914, 0.08666666597127914]}}]