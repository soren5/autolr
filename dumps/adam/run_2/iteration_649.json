[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8711428642272949, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222766637802124, 1.8623391389846802, 1.3834059238433838, 1.076817512512207, 0.92440265417099, 0.831673264503479, 0.7703870534896851, 0.7249757051467896, 0.6924506425857544, 0.6579880118370056, 0.625798761844635, 0.608620285987854, 0.5926632285118103, 0.5691400170326233, 0.5568299293518066, 0.533589780330658, 0.529541552066803, 0.5167688727378845, 0.504295825958252, 0.49332281947135925, 0.4891112446784973, 0.48437920212745667, 0.45970138907432556, 0.4601147770881653, 0.45088714361190796, 0.43718042969703674, 0.4365018308162689, 0.4242915213108063, 0.41659465432167053, 0.41070714592933655, 0.4029700458049774, 0.39855822920799255, 0.3987901508808136, 0.3913992643356323, 0.37718456983566284, 0.3785850405693054, 0.3711322546005249, 0.3655472993850708, 0.36070629954338074, 0.35339418053627014, 0.3509891927242279, 0.3530274033546448, 0.34284549951553345, 0.3362618684768677, 0.3371970057487488, 0.3299988806247711, 0.32125720381736755, 0.3211398422718048, 0.3177260756492615, 0.30955973267555237, 0.30538836121559143, 0.29944685101509094, 0.30089253187179565, 0.2977450489997864, 0.2844209372997284, 0.28410664200782776, 0.280090868473053, 0.27279889583587646, 0.27154794335365295, 0.2686144709587097, 0.2692375183105469, 0.2711488902568817, 0.2622174024581909, 0.25488150119781494, 0.2515772581100464, 0.24431222677230835, 0.2362709790468216, 0.23860716819763184, 0.23498356342315674, 0.22804990410804749, 0.2294023185968399, 0.22352944314479828, 0.2243751734495163, 0.22823622822761536, 0.21775995194911957, 0.22259275615215302], "accuracy": [0.27341169118881226, 0.4971602261066437, 0.574560821056366, 0.625148594379425, 0.6693964004516602, 0.7010962963104248, 0.720380425453186, 0.7322678565979004, 0.7432307600975037, 0.7602694630622864, 0.7691190242767334, 0.7766477465629578, 0.7823272943496704, 0.7926297783851624, 0.8012151718139648, 0.8083476424217224, 0.8054417967796326, 0.8129705190658569, 0.8161405324935913, 0.8202351331710815, 0.8239334225654602, 0.8261788487434387, 0.8345000743865967, 0.8360850811004639, 0.8383304476737976, 0.8445383906364441, 0.8465195894241333, 0.8481045961380005, 0.8490291833877563, 0.8490291833877563, 0.8508783578872681, 0.8578787446022034, 0.8543124794960022, 0.8584070801734924, 0.8667283058166504, 0.8622375130653381, 0.8632941246032715, 0.8705587387084961, 0.868049144744873, 0.8721436858177185, 0.871879518032074, 0.8761062026023865, 0.8782195448875427, 0.8829745054244995, 0.8798044919967651, 0.8802007436752319, 0.8862766027450562, 0.8794082403182983, 0.8831065893173218, 0.8864086866378784, 0.887597382068634, 0.8922203183174133, 0.8931449055671692, 0.8920882344245911, 0.8957865834236145, 0.8977677822113037, 0.9001452922821045, 0.900409460067749, 0.8993527889251709, 0.8988244533538818, 0.9019944667816162, 0.9014661312103271, 0.9066173434257507, 0.9076740145683289, 0.9108440279960632, 0.9104477763175964, 0.9099194407463074, 0.9126931428909302, 0.9177123308181763, 0.9152027368545532, 0.9119006991386414, 0.9208822846412659, 0.9190331697463989, 0.913089394569397, 0.9216747879981995, 0.9182406663894653], "val_loss": [2.037564516067505, 1.5147149562835693, 1.046953797340393, 0.8404176235198975, 0.749269425868988, 0.692483127117157, 0.6482160091400146, 0.6174567341804504, 0.5900986194610596, 0.5684719681739807, 0.552855372428894, 0.5342820882797241, 0.5195650458335876, 0.5098135471343994, 0.49727189540863037, 0.4846210181713104, 0.4777595102787018, 0.47114795446395874, 0.4630673825740814, 0.4594094157218933, 0.45468488335609436, 0.4437102973461151, 0.44359293580055237, 0.43382593989372253, 0.4298555552959442, 0.4226158857345581, 0.41757333278656006, 0.4130275547504425, 0.41044262051582336, 0.4052237868309021, 0.4018712639808655, 0.39911192655563354, 0.3933509588241577, 0.39028599858283997, 0.38714417815208435, 0.3856669068336487, 0.3807435631752014, 0.3775474727153778, 0.37585118412971497, 0.3760351836681366, 0.37141406536102295, 0.37049585580825806, 0.36680465936660767, 0.37598395347595215, 0.3662073016166687, 0.3666137158870697, 0.36280128359794617, 0.3632320165634155, 0.3623479902744293, 0.355502188205719, 0.36104702949523926, 0.3559596836566925, 0.35559603571891785, 0.35417234897613525, 0.34930962324142456, 0.3521556854248047, 0.34770116209983826, 0.3466036915779114, 0.35061410069465637, 0.34586238861083984, 0.3495444357395172, 0.34498608112335205, 0.3469982147216797, 0.34494319558143616, 0.3397393524646759, 0.3409643769264221, 0.3400305509567261, 0.3373194634914398, 0.3343038260936737, 0.3423956036567688, 0.3392336070537567, 0.3379807770252228, 0.33671924471855164, 0.3496752381324768, 0.3434002995491028, 0.33830586075782776], "val_accuracy": [0.5566666722297668, 0.6576666831970215, 0.6800000071525574, 0.7073333263397217, 0.7256666421890259, 0.7423333525657654, 0.7606666684150696, 0.7663333415985107, 0.781000018119812, 0.7870000004768372, 0.7993333339691162, 0.8009999990463257, 0.8146666884422302, 0.8193333148956299, 0.8236666917800903, 0.828000009059906, 0.831333339214325, 0.8320000171661377, 0.8316666483879089, 0.8376666903495789, 0.8413333296775818, 0.8393333554267883, 0.8376666903495789, 0.8473333120346069, 0.847000002861023, 0.8493333458900452, 0.8483333587646484, 0.8550000190734863, 0.8536666631698608, 0.8560000061988831, 0.8529999852180481, 0.856333315372467, 0.8606666922569275, 0.8603333234786987, 0.8653333187103271, 0.8636666536331177, 0.8633333444595337, 0.8666666746139526, 0.8659999966621399, 0.8619999885559082, 0.8650000095367432, 0.8690000176429749, 0.8659999966621399, 0.8629999756813049, 0.8713333606719971, 0.8679999709129333, 0.8679999709129333, 0.8686666488647461, 0.8713333606719971, 0.871666669845581, 0.8723333477973938, 0.8713333606719971, 0.8723333477973938, 0.8740000128746033, 0.8730000257492065, 0.8769999742507935, 0.8773333430290222, 0.8759999871253967, 0.874666690826416, 0.8796666860580444, 0.8756666779518127, 0.8759999871253967, 0.875, 0.878000020980835, 0.8826666474342346, 0.8843333125114441, 0.8833333253860474, 0.8843333125114441, 0.8806666731834412, 0.8833333253860474, 0.8863333463668823, 0.8833333253860474, 0.8826666474342346, 0.8763333559036255, 0.8786666393280029, 0.8806666731834412]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 3, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 0, 5, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [2, 2, 4, 1, 3, 2, 7, 7, 0, 5, 4, 2, 2, 7, 1, 3, 9, 9, 9, 5, 4, 5], [0, 0, 2, 7, 0, 1, 0, 6, 5, 6, 6, 2, 7], [99, 85, 71, 94, 82, 45, 24], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [6, 3, 3, 6, 8, 8, 4, 1, 4, 2, 8], [4, 0, 4, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 7, 3, 2, 35, 22, 13, 7, 11, 6, 5, 2], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.square(beta))), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(beta, tf.math.add(tf.math.add(tf.math.add(grad, tf.math.negative(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.pow(grad, tf.math.square(grad))))), beta)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.sqrt(sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [6, 9, 3, 6, 8, 1, 4, 1, 4, 2, 8, 0, 4, 0, 6, 5], [0, 4, 4, 3, 3, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(grad, grad), tf.math.pow(tf.math.add(tf.math.sqrt(sigma), sigma), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.pow(sigma, alpha)))), tf.math.negative(tf.math.divide_no_nan(beta, tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [2.31099534034729, 2.3097286224365234, 2.3146677017211914, 2.330115795135498, 2.3674538135528564, 2.4520103931427, 2.6079936027526855], "accuracy": [0.09285431355237961, 0.09708096832036972, 0.0952318087220192, 0.09708096832036972, 0.1006472036242485, 0.10672302544116974, 0.10289261490106583], "val_loss": [2.3076751232147217, 2.3072574138641357, 2.3068580627441406, 2.314639091491699, 2.3387668132781982, 2.387690305709839, 2.4416022300720215], "val_accuracy": [0.10133333504199982, 0.1066666692495346, 0.1066666692495346, 0.1066666692495346, 0.1066666692495346, 0.1066666692495346, 0.1066666692495346]}, "mapping_values": [1, 9, 5, 4, 2, 7, 4, 3, 2, 2, 1, 1, 1, 26, 16, 10, 4], "tree_depth": 21}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [2, 2, 2, 0, 3, 1], [2, 1, 0, 2, 1, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 8, 3, 0, 3, 5], [0, 2, 0, 2], [16, 16], [0, 1], [9], [3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0], [2, 3, 3, 6, 8, 1, 4, 1, 4, 9, 8, 5, 7, 7, 1, 6, 9], [0, 0, 0, 3, 0, 0, 2, 1, 4, 0, 4], [16, 99, 37, 99, 61, 96, 64, 61]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 1, 6, 4, 2, 1, 1, 1, 0, 1, 28, 17, 11, 8], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(beta, alpha))), tf.math.add(tf.math.subtract(grad, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 79], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 1], [3, 2, 0, 3, 4], [29, 67], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [6, 3, 3, 6, 4, 1, 0, 1, 4, 2, 8, 4, 8, 7, 1, 6, 0, 5, 7, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 4, 2, 5, 0], [16, 8, 29, 99, 61, 1, 14, 60]], "fitness": -0.09342857450246811, "mapping_values": [1, 9, 5, 4, 1, 11, 6, 5, 1, 2, 1, 1, 1, 34, 20, 14, 8], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.subtract(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.pow(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(alpha, beta))))), tf.math.divide_no_nan(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad)), beta)), tf.math.square(tf.math.add(grad, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3103883266448975, 2.3091437816619873, 2.3084969520568848, 2.3094680309295654, 2.309145450592041, 2.3101470470428467], "accuracy": [0.08809932321310043, 0.09179764986038208, 0.09153348207473755, 0.09417514503002167, 0.0956280529499054, 0.0936468094587326], "val_loss": [2.3091022968292236, 2.3091022968292236, 2.3091022968292236, 2.3091022968292236, 2.3091022968292236, 2.3091022968292236], "val_accuracy": [0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654]}}]