[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8677142858505249, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222437858581543, 1.8645204305648804, 1.4061216115951538, 1.120444655418396, 0.9576935768127441, 0.8648692965507507, 0.7931129932403564, 0.7460012435913086, 0.712813138961792, 0.6795058250427246, 0.6560527682304382, 0.627402663230896, 0.6119668483734131, 0.5878276228904724, 0.5782309174537659, 0.5547661781311035, 0.5451485514640808, 0.5330855250358582, 0.5193281769752502, 0.5099369287490845, 0.5032801628112793, 0.4899441599845886, 0.4812326729297638, 0.47215449810028076, 0.4585079848766327, 0.45657140016555786, 0.45283007621765137, 0.4460380971431732, 0.43841326236724854, 0.4318455159664154, 0.4207706153392792, 0.4147931933403015, 0.40828412771224976, 0.3949618935585022, 0.3979615271091461, 0.3865891098976135, 0.3762456178665161, 0.37395307421684265, 0.36625930666923523, 0.3645063042640686, 0.35907313227653503, 0.3627031147480011, 0.3549734354019165, 0.3416278064250946, 0.3424682319164276, 0.3392352759838104, 0.33137014508247375, 0.32635417580604553, 0.3282916247844696, 0.31658342480659485, 0.3144613206386566, 0.30928969383239746, 0.3062293529510498, 0.30125191807746887, 0.29650619626045227, 0.2858445942401886, 0.2929244935512543, 0.28494787216186523, 0.27832746505737305, 0.2806442975997925, 0.271731972694397, 0.26806747913360596], "accuracy": [0.27658170461654663, 0.48606523871421814, 0.5616167187690735, 0.614317774772644, 0.6649055480957031, 0.6866992712020874, 0.7119271159172058, 0.728701651096344, 0.7400607466697693, 0.7528728246688843, 0.7619865536689758, 0.7713643908500671, 0.7827235460281372, 0.7843085527420044, 0.7873464822769165, 0.7947431206703186, 0.8025360107421875, 0.8100647330284119, 0.8140271902084351, 0.8208954930305481, 0.8166688680648804, 0.8244617581367493, 0.8294808864593506, 0.8305375576019287, 0.8342359066009521, 0.835160493850708, 0.8372738361358643, 0.8389908671379089, 0.8417646288871765, 0.8465195894241333, 0.8500858545303345, 0.8532558679580688, 0.8540483713150024, 0.8574824929237366, 0.8595958352088928, 0.8646149635314941, 0.8614450097084045, 0.8652753829956055, 0.8668603897094727, 0.8681812286376953, 0.8709549307823181, 0.8676528930664062, 0.8693699836730957, 0.8772949576377869, 0.8754457831382751, 0.8811253309249878, 0.8802007436752319, 0.8804649114608765, 0.8820499181747437, 0.8869370222091675, 0.887201189994812, 0.8893144726753235, 0.8922203183174133, 0.891559898853302, 0.8953903317451477, 0.8992207050323486, 0.8951261639595032, 0.895918607711792, 0.9008057117462158, 0.8988244533538818, 0.9037115573883057, 0.9031832218170166], "val_loss": [2.0386409759521484, 1.5067825317382812, 1.038986325263977, 0.8346455693244934, 0.740507960319519, 0.6889512538909912, 0.6469734311103821, 0.6068543195724487, 0.5833583474159241, 0.5601069331169128, 0.5498245358467102, 0.5318599343299866, 0.520486056804657, 0.5120724439620972, 0.49793341755867004, 0.48669442534446716, 0.47868406772613525, 0.4704515337944031, 0.4646140933036804, 0.45887407660484314, 0.45349258184432983, 0.45029589533805847, 0.4419907331466675, 0.4329250156879425, 0.42901811003685, 0.42529159784317017, 0.419149249792099, 0.4196045398712158, 0.4114285111427307, 0.4104304909706116, 0.40455567836761475, 0.4038880169391632, 0.40155717730522156, 0.39662060141563416, 0.3913347125053406, 0.39181607961654663, 0.38829460740089417, 0.38349929451942444, 0.3805001676082611, 0.37904882431030273, 0.3861108720302582, 0.37668734788894653, 0.37429696321487427, 0.3739203214645386, 0.36930325627326965, 0.3720111548900604, 0.36702513694763184, 0.36469677090644836, 0.36373811960220337, 0.36407169699668884, 0.3627149164676666, 0.3628665804862976, 0.35870474576950073, 0.360422283411026, 0.3591407835483551, 0.3592057228088379, 0.35470670461654663, 0.358144611120224, 0.3572840988636017, 0.3496969938278198, 0.3531273305416107, 0.35059383511543274], "val_accuracy": [0.5040000081062317, 0.6746666431427002, 0.6786666512489319, 0.7120000123977661, 0.7333333492279053, 0.7526666522026062, 0.7573333382606506, 0.765333354473114, 0.7836666703224182, 0.7850000262260437, 0.793666660785675, 0.800000011920929, 0.8050000071525574, 0.8066666722297668, 0.8180000185966492, 0.8236666917800903, 0.8259999752044678, 0.8303333520889282, 0.8240000009536743, 0.8303333520889282, 0.8339999914169312, 0.831333339214325, 0.8376666903495789, 0.8460000157356262, 0.846666693687439, 0.8476666808128357, 0.8460000157356262, 0.8510000109672546, 0.8543333411216736, 0.8539999723434448, 0.8546666502952576, 0.8550000190734863, 0.8583333492279053, 0.862333357334137, 0.859333336353302, 0.859666645526886, 0.8636666536331177, 0.862333357334137, 0.8636666536331177, 0.8646666407585144, 0.8640000224113464, 0.8663333058357239, 0.8690000176429749, 0.8693333268165588, 0.8686666488647461, 0.8693333268165588, 0.8723333477973938, 0.871999979019165, 0.8733333349227905, 0.875333309173584, 0.875333309173584, 0.8730000257492065, 0.8740000128746033, 0.8769999742507935, 0.875333309173584, 0.8759999871253967, 0.8803333044052124, 0.875, 0.8773333430290222, 0.8793333172798157, 0.8793333172798157, 0.8799999952316284]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 4, 9], [0, 1, 0, 2], [39, 39, 21], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 2, 1, 0, 4, 5, 6, 0, 3, 1, 3, 0, 3, 7, 6, 7, 6, 2, 1, 4, 4, 5, 4, 2, 1, 0], [0, 2, 0, 3, 3, 0, 4, 3, 2, 4, 0, 4, 2, 3, 0, 0, 5, 2, 4, 3], [16, 16, 43, 52, 76, 34], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 5, 8, 1, 4, 1, 4, 2, 8, 1, 0], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 16, 96, 84, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 3, 46, 26, 20, 6, 2, 1, 1, 1, 23, 13, 10, 5], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(grad, tf.math.negative(tf.math.multiply(tf.math.subtract(tf.math.multiply(grad, tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.pow(beta, tf.math.square(tf.math.pow(tf.math.add(grad, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))), grad), tf.math.subtract(tf.math.negative(beta), grad)))), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)))), tf.math.subtract(tf.math.negative(sigma), alpha))))), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 2, 3, 2, 3, 5, 8, 3, 4, 7, 4, 2, 1, 4, 7, 4, 8, 4, 7, 2, 7, 7, 3, 4, 0, 0, 2, 8, 1, 3, 4, 2, 0, 7, 5, 9], [0, 2, 0, 1, 5, 3, 0, 0, 1, 1, 0, 2, 4, 1, 5, 3, 1, 4, 1, 2, 1, 3, 0, 0, 3, 1], [16, 16, 37, 2, 2, 1, 27, 99], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 1, 6, 2, 1, 4, 1, 4, 2, 8, 0], [0, 4, 0, 3, 4, 0, 3, 1, 2, 2, 5], [16, 99, 84, 99, 95, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 62, 36, 26, 8, 2, 1, 1, 1, 23, 12, 11, 3], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha)), tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.math.add(tf.math.pow(grad, grad), tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.pow(tf.math.sqrt(alpha), tf.math.pow(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), beta), tf.math.add(tf.math.add(tf.math.add(tf.math.add(tf.math.multiply(tf.math.pow(grad, alpha), tf.math.negative(tf.math.negative(grad))), grad), alpha), tf.math.add(grad, alpha)), tf.math.sqrt(beta)))))), tf.math.subtract(tf.math.multiply(tf.math.pow(alpha, tf.math.add(grad, tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), tf.constant(1.0, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(grad, tf.math.pow(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), sigma))), alpha)), tf.math.add(tf.math.sqrt(beta), beta)), tf.math.negative(grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 0, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 0, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0], [0, 9], [0], [96], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 2, 1, 4, 1, 4, 2, 4], [4, 0, 2, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 5, 3, 2, 1, 2, 2, 0, 1, 17, 8, 9, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 2, 3, 0, 3, 5, 5], [0, 2, 0, 3, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 8, 5, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.08514285832643509, "mapping_values": [1, 6, 3, 3, 2, 12, 7, 5, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, alpha))", "other_info": {"loss": [2.3102777004241943, 2.30972957611084, 2.3084824085235596, 2.3083114624023438, 2.307115077972412, 2.307584524154663], "accuracy": [0.0940430611371994, 0.09589222073554993, 0.09708096832036972, 0.08915598690509796, 0.09655263274908066, 0.08955223858356476], "val_loss": [2.308264970779419, 2.3080272674560547, 2.307814359664917, 2.30751633644104, 2.3072350025177, 2.307323932647705], "val_accuracy": [0.08666666597127914, 0.08399999886751175, 0.0820000022649765, 0.0806666687130928, 0.07599999755620956, 0.07866666465997696]}}]