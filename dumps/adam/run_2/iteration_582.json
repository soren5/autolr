[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8568571209907532, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2219927310943604, 1.8658071756362915, 1.3881515264511108, 1.0934979915618896, 0.9443899989128113, 0.8377991914749146, 0.7743991613388062, 0.7281212210655212, 0.6933024525642395, 0.6658482551574707, 0.6366286873817444, 0.6220859885215759, 0.5993744730949402, 0.5873714685440063, 0.5651479959487915, 0.5429649949073792, 0.5328490138053894, 0.5225266814231873, 0.5090303421020508, 0.5046372413635254, 0.4973237216472626, 0.4812275767326355, 0.47061237692832947, 0.46087032556533813, 0.4509499669075012, 0.44682058691978455, 0.44579747319221497, 0.42598071694374084, 0.4252741038799286, 0.41553640365600586, 0.4058336913585663, 0.4037579894065857, 0.3977646827697754, 0.3912293314933777, 0.3822149932384491, 0.38205137848854065, 0.37820637226104736, 0.3704809248447418, 0.3623597323894501, 0.35512953996658325, 0.3563355505466461, 0.3548671007156372, 0.34758540987968445, 0.33901870250701904, 0.33922550082206726, 0.3284977972507477, 0.32344746589660645, 0.3199287950992584, 0.31350627541542053, 0.311337947845459, 0.3049527704715729, 0.30461385846138, 0.2956853210926056, 0.2966427206993103, 0.2924498915672302, 0.28971222043037415, 0.2850665748119354, 0.282023549079895, 0.2760298550128937, 0.2717542350292206, 0.2617459297180176, 0.25389403104782104], "accuracy": [0.2779025137424469, 0.4858010709285736, 0.5595033764839172, 0.6185444593429565, 0.667811393737793, 0.6988508701324463, 0.7250033020973206, 0.7341170310974121, 0.7469290494918823, 0.7544577717781067, 0.7677981853485107, 0.7734777331352234, 0.7795535326004028, 0.7893276810646057, 0.7956677079200745, 0.7987055778503418, 0.8068947196006775, 0.8096684813499451, 0.8162726163864136, 0.8146876096725464, 0.8138951063156128, 0.8277638554573059, 0.8289526104927063, 0.8333113193511963, 0.8356888294219971, 0.8380662798881531, 0.8438779711723328, 0.8436138033866882, 0.8454629778862, 0.8481045961380005, 0.8540483713150024, 0.854708731174469, 0.8539162874221802, 0.8580108284950256, 0.8610487580299377, 0.8625016212463379, 0.8625016212463379, 0.8667283058166504, 0.8701624870300293, 0.8755778670310974, 0.8693699836730957, 0.8693699836730957, 0.8761062026023865, 0.8753136992454529, 0.8765024542808533, 0.8799365758895874, 0.8815215826034546, 0.8824461698532104, 0.8860124349594116, 0.882710337638855, 0.8893144726753235, 0.889578640460968, 0.8928807377815247, 0.8902390599250793, 0.8961827754974365, 0.8953903317451477, 0.8957865834236145, 0.8982961177825928, 0.8982961177825928, 0.9013340473175049, 0.9054285883903503, 0.9089948534965515], "val_loss": [2.0396509170532227, 1.5177503824234009, 1.0619922876358032, 0.8539692163467407, 0.7634446024894714, 0.7049161791801453, 0.6588612198829651, 0.6242459416389465, 0.6048046946525574, 0.5843015909194946, 0.5646708607673645, 0.5533457398414612, 0.5404088497161865, 0.5286620259284973, 0.5160045623779297, 0.5025841593742371, 0.4970158636569977, 0.4914076626300812, 0.4822905957698822, 0.4763990044593811, 0.467529833316803, 0.46482816338539124, 0.4570904076099396, 0.45132872462272644, 0.4497711658477783, 0.44472500681877136, 0.43933770060539246, 0.4362337291240692, 0.43253302574157715, 0.42931392788887024, 0.42730802297592163, 0.4241170287132263, 0.4194720983505249, 0.4159867763519287, 0.41601821780204773, 0.41427937150001526, 0.41231217980384827, 0.4077248275279999, 0.40691763162612915, 0.4012822210788727, 0.40500837564468384, 0.40388232469558716, 0.3986785411834717, 0.40409618616104126, 0.39582380652427673, 0.3953988552093506, 0.3927568793296814, 0.3926120698451996, 0.39003047347068787, 0.38812559843063354, 0.3848331570625305, 0.38517236709594727, 0.38567012548446655, 0.39290210604667664, 0.38476985692977905, 0.3890914022922516, 0.3825737237930298, 0.38405728340148926, 0.3844858705997467, 0.3825345039367676, 0.38329267501831055, 0.39748233556747437], "val_accuracy": [0.531333327293396, 0.6463333368301392, 0.6776666641235352, 0.7139999866485596, 0.7409999966621399, 0.7483333349227905, 0.762333333492279, 0.7749999761581421, 0.7826666831970215, 0.7876666784286499, 0.793666660785675, 0.8013333082199097, 0.8063333630561829, 0.8109999895095825, 0.815666675567627, 0.8226666450500488, 0.8259999752044678, 0.8256666660308838, 0.8360000252723694, 0.8320000171661377, 0.8343333601951599, 0.8393333554267883, 0.840666651725769, 0.840666651725769, 0.8423333168029785, 0.843999981880188, 0.847000002861023, 0.8443333506584167, 0.843999981880188, 0.8486666679382324, 0.8510000109672546, 0.8489999771118164, 0.8539999723434448, 0.8543333411216736, 0.8566666841506958, 0.859000027179718, 0.859333336353302, 0.8603333234786987, 0.8603333234786987, 0.8603333234786987, 0.859333336353302, 0.862333357334137, 0.8619999885559082, 0.8640000224113464, 0.8656666874885559, 0.8643333315849304, 0.8646666407585144, 0.8663333058357239, 0.8690000176429749, 0.8700000047683716, 0.8723333477973938, 0.8693333268165588, 0.8726666569709778, 0.871666669845581, 0.8686666488647461, 0.8696666955947876, 0.875333309173584, 0.8723333477973938, 0.8733333349227905, 0.8740000128746033, 0.8726666569709778, 0.8690000176429749]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 0], [39, 39, 83], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 0, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 5, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 6, 4, 2, 1, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [560333504.0, 1815353088.0, 1891247488.0, 1897015680.0, 1883514368.0, 1909853440.0], "accuracy": [0.09959053993225098, 0.10170386731624603, 0.10381719470024109, 0.10091137140989304, 0.10474177449941635, 0.1010434553027153], "val_loss": [1278873216.0, 1456131584.0, 1457868288.0, 1457881728.0, 1457881728.0, 1457881728.0], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3], [0, 1, 1, 2], [42, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 4, 0, 4, 8, 1, 3, 8, 7, 5, 2, 1], [0, 5, 6, 7, 1, 3, 6, 6, 2], [99], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [6, 4, 3, 6, 8, 1, 4, 1, 4, 2, 3, 4], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0, 1, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 21, 12, 9, 1, 24, 12, 12, 6], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.negative(tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.multiply(grad, grad), grad)), tf.math.sqrt(tf.math.add(alpha, sigma)))), tf.math.square(tf.math.add(grad, tf.math.subtract(grad, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.math.multiply(tf.math.pow(alpha, grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 4, 3, 0, 3, 5], [3, 2, 2, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 6, 1, 6, 6, 1, 4, 1, 4, 8, 8, 5], [3, 0, 4, 4, 0, 0, 1, 3, 2, 0], [16, 12, 96, 99, 38, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 0, 2, 1, 1, 1, 22, 12, 10, 4], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(sigma, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(grad, tf.math.pow(grad, tf.math.sqrt(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), alpha), tf.math.sqrt(tf.math.square(sigma)))), beta), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 2, 1, 0, 3, 5, 3, 1, 8, 8, 9], [0, 2, 0, 1, 3], [16, 10, 3], [0, 1, 0, 1, 1], [1, 3], [4, 3, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8, 4, 1, 7, 3], [0, 3, 0, 2, 0, 0, 3, 1, 2, 0, 6, 7, 2, 5], [16, 99, 96, 99, 85, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 16, 11, 5, 3, 5, 2, 3, 0, 30, 16, 14, 5], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.subtract(tf.math.sqrt(tf.math.sqrt(alpha)), grad), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(grad, tf.math.multiply(sigma, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(beta, tf.math.add(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.pow(sigma, alpha)))))), tf.math.subtract(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad))), grad), tf.math.multiply(beta, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]