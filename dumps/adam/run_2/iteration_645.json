[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8725714087486267, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2223920822143555, 1.8606607913970947, 1.3793013095855713, 1.0874571800231934, 0.925093412399292, 0.8385351896286011, 0.7737848162651062, 0.7276825904846191, 0.6935930848121643, 0.6669830679893494, 0.6315450072288513, 0.6116085648536682, 0.5973308682441711, 0.5834860801696777, 0.5632796883583069, 0.5539010167121887, 0.5397148728370667, 0.5171266198158264, 0.5147166848182678, 0.5055133700370789, 0.49437543749809265, 0.47720831632614136, 0.47384408116340637, 0.4719889760017395, 0.45538002252578735, 0.45250946283340454, 0.44309061765670776, 0.4294131100177765, 0.42569008469581604, 0.42347046732902527, 0.40715378522872925, 0.41177254915237427, 0.3989580273628235, 0.385272741317749, 0.3879566490650177, 0.3798012137413025, 0.3758106231689453, 0.3641844689846039, 0.3615250885486603, 0.36581259965896606, 0.3605163097381592, 0.35176271200180054, 0.3420022428035736, 0.34017983078956604, 0.33288639783859253, 0.33114227652549744, 0.32631856203079224, 0.3196832239627838, 0.3153545558452606, 0.313521146774292, 0.3087986707687378, 0.3004245460033417, 0.30270642042160034, 0.2994582951068878, 0.295301228761673, 0.29481929540634155, 0.28445738554000854, 0.2761093080043793, 0.2742869555950165, 0.26719021797180176, 0.26835668087005615, 0.26492124795913696, 0.2585945427417755, 0.250794380903244, 0.2543065845966339, 0.2510477304458618, 0.2469339519739151, 0.24470962584018707, 0.24476374685764313, 0.24090054631233215, 0.2282811552286148, 0.23189817368984222, 0.2298339158296585, 0.2192912995815277, 0.22193244099617004, 0.21299229562282562, 0.21457229554653168, 0.20811495184898376, 0.20960041880607605, 0.20316153764724731, 0.2013072371482849, 0.19779857993125916], "accuracy": [0.2763175368309021, 0.4986131191253662, 0.5643904209136963, 0.6188086271286011, 0.6671509742736816, 0.7014925479888916, 0.7195879220962524, 0.7397965788841248, 0.7449478507041931, 0.7593448758125305, 0.7726852297782898, 0.7759873270988464, 0.7812706232070923, 0.7921014428138733, 0.7994980812072754, 0.8016114234924316, 0.8057059645652771, 0.8104609847068787, 0.8113855719566345, 0.8227446675300598, 0.8203672170639038, 0.8294808864593506, 0.8277638554573059, 0.8310658931732178, 0.8411042094230652, 0.8319904804229736, 0.8383304476737976, 0.8473120927810669, 0.8462554216384888, 0.848368763923645, 0.8498216867446899, 0.8507462739944458, 0.857218325138092, 0.8609166741371155, 0.8632941246032715, 0.859199583530426, 0.8669924736022949, 0.8693699836730957, 0.8672566413879395, 0.8712190985679626, 0.8681812286376953, 0.8726720213890076, 0.8749174475669861, 0.8790120482444763, 0.8796724081039429, 0.8774270415306091, 0.8786157965660095, 0.8829745054244995, 0.8854840993881226, 0.8858803510665894, 0.8889182209968567, 0.8916919827461243, 0.8944657444953918, 0.8932769894599915, 0.8943336606025696, 0.8928807377815247, 0.896446943283081, 0.9008057117462158, 0.8981640338897705, 0.9025228023529053, 0.901862382888794, 0.9025228023529053, 0.908730685710907, 0.9096552729606628, 0.9099194407463074, 0.9108440279960632, 0.9100515246391296, 0.9083344340324402, 0.9140139818191528, 0.9146744012832642, 0.9157310724258423, 0.9178444147109985, 0.9158631563186646, 0.9187690019607544, 0.9189010858535767, 0.9228635430335999, 0.9225993752479553, 0.9243164658546448, 0.9241843819618225, 0.9252410531044006, 0.926429808139801, 0.9318451881408691], "val_loss": [2.035078763961792, 1.4976868629455566, 1.0296039581298828, 0.8354410529136658, 0.7490637898445129, 0.6968094110488892, 0.6508298516273499, 0.617872416973114, 0.5908592939376831, 0.5764848589897156, 0.5455882549285889, 0.5288428664207458, 0.5217499136924744, 0.5052717328071594, 0.49150875210762024, 0.48129895329475403, 0.47467684745788574, 0.4671862721443176, 0.4569574296474457, 0.45006948709487915, 0.4439738094806671, 0.4312695860862732, 0.4313346743583679, 0.4237598478794098, 0.41585904359817505, 0.4126894474029541, 0.410379022359848, 0.40242815017700195, 0.4022148549556732, 0.3993833065032959, 0.39008578658103943, 0.389739066362381, 0.38599103689193726, 0.3821485936641693, 0.3836820125579834, 0.3751678764820099, 0.37729185819625854, 0.3712122440338135, 0.37303081154823303, 0.375102162361145, 0.36719125509262085, 0.369086354970932, 0.3592623174190521, 0.36050519347190857, 0.3566821217536926, 0.35954928398132324, 0.35995030403137207, 0.3581671118736267, 0.3568299114704132, 0.3564397692680359, 0.3514047861099243, 0.35200265049934387, 0.34831932187080383, 0.35257789492607117, 0.3491670787334442, 0.34619733691215515, 0.3454233407974243, 0.3490538001060486, 0.3427567183971405, 0.35178858041763306, 0.34187284111976624, 0.34565022587776184, 0.3433428406715393, 0.3434737026691437, 0.3417385220527649, 0.3424253463745117, 0.340229332447052, 0.34244677424430847, 0.3389735221862793, 0.35146066546440125, 0.34868693351745605, 0.3369120657444, 0.346159428358078, 0.3405691385269165, 0.3399590253829956, 0.3397051990032196, 0.3356254994869232, 0.33959612250328064, 0.3441081941127777, 0.3424398899078369, 0.33995917439460754, 0.3434258699417114], "val_accuracy": [0.5376666784286499, 0.6620000004768372, 0.6836666464805603, 0.7049999833106995, 0.7310000061988831, 0.7416666746139526, 0.7583333253860474, 0.7713333368301392, 0.7786666750907898, 0.7770000100135803, 0.7976666688919067, 0.8029999732971191, 0.8003333210945129, 0.8143333196640015, 0.8196666836738586, 0.8343333601951599, 0.8226666450500488, 0.828000009059906, 0.8346666693687439, 0.8353333473205566, 0.843666672706604, 0.8456666469573975, 0.8423333168029785, 0.8456666469573975, 0.8503333330154419, 0.8529999852180481, 0.8510000109672546, 0.8576666712760925, 0.8553333282470703, 0.8586666584014893, 0.862666666507721, 0.8673333525657654, 0.8656666874885559, 0.8640000224113464, 0.8636666536331177, 0.8706666827201843, 0.8686666488647461, 0.8706666827201843, 0.8676666617393494, 0.8656666874885559, 0.8740000128746033, 0.8713333606719971, 0.878333330154419, 0.8776666522026062, 0.8796666860580444, 0.878333330154419, 0.8793333172798157, 0.8769999742507935, 0.8803333044052124, 0.878000020980835, 0.8813333511352539, 0.8790000081062317, 0.8823333382606506, 0.8786666393280029, 0.8799999952316284, 0.8836666941642761, 0.8793333172798157, 0.8849999904632568, 0.8840000033378601, 0.878333330154419, 0.8859999775886536, 0.8856666684150696, 0.8859999775886536, 0.8840000033378601, 0.8863333463668823, 0.8846666812896729, 0.8896666765213013, 0.8853333592414856, 0.8883333206176758, 0.8843333125114441, 0.8816666603088379, 0.890666663646698, 0.8820000290870667, 0.8889999985694885, 0.8889999985694885, 0.8880000114440918, 0.8913333415985107, 0.8893333077430725, 0.8870000243186951, 0.8896666765213013, 0.887333333492279, 0.890999972820282]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 8, 1, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 5, 8], [0, 0, 0, 3, 4, 0, 3, 4, 2, 0], [19, 99, 96, 99, 61, 1]], "fitness": -0.13857142627239227, "mapping_values": [1, 9, 5, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 19, 10, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.square(beta))", "other_info": {"loss": [4375230464.0, 7471359488.0, 11341263872.0, 11505463296.0, 11342785536.0, 11998984192.0], "accuracy": [0.10487385839223862, 0.10249637067317963, 0.08360850811004639, 0.0866464152932167, 0.0870426595211029, 0.0866464152932167], "val_loss": [6166027264.0, 10625900544.0, 11386004480.0, 11865623552.0, 12166389760.0, 12397061120.0], "val_accuracy": [0.13833333551883698, 0.06433333456516266, 0.06499999761581421, 0.06599999964237213, 0.0663333311676979, 0.06700000166893005]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 5, 2, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 2, 9, 3, 5], [0, 2, 0, 3], [16, 42], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 8, 6, 8, 1, 4, 1, 4, 2, 8, 4, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 18, 65, 99, 99, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 6, 4, 2, 2, 2, 1, 1, 1, 23, 13, 10, 6], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.pow(alpha, beta)))))), tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 3], [0, 2, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 2, 4, 0, 8, 5, 6, 7, 4, 9], [0, 2, 1, 3, 5], [16, 16], [0, 1], [0], [0], [60], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [3, 1, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 3, 2, 0], [16, 99, 96, 23, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)))))), sigma), tf.math.add(beta, tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}, "mapping_values": [1, 12, 7, 5, 2, 15, 10, 5, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 20}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 0, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [71, 16], [1, 1], [0], [2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [6, 0, 3, 6, 8, 1, 0, 1, 4, 8, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 10, 6, 4, 2, 1, 0, 1, 0, 11, 6, 5, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [5508275109888.0, 12452192321536.0, 5488748527616.0, 9980595929088.0, 2726984941568.0, 6034641911808.0], "accuracy": [0.10038304328918457, 0.09985470771789551, 0.1002509593963623, 0.09985470771789551, 0.09998679161071777, 0.09972262382507324], "val_loss": [4729615155200.0, 4763369865216.0, 4763369865216.0, 4763369865216.0, 4763369865216.0, 4763369865216.0], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}]