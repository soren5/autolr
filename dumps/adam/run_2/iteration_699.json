[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8734285831451416, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224612236022949, 1.873229742050171, 1.3976500034332275, 1.097550392150879, 0.935315728187561, 0.8369896411895752, 0.7728801965713501, 0.7279866933822632, 0.6851723194122314, 0.6547952890396118, 0.6354754567146301, 0.6094349026679993, 0.5870118141174316, 0.5751580595970154, 0.5527550578117371, 0.5408994555473328, 0.5237647294998169, 0.5130710005760193, 0.5030300617218018, 0.49154868721961975, 0.4812108278274536, 0.4773103892803192, 0.47152215242385864, 0.46206820011138916, 0.44971129298210144, 0.4408571720123291, 0.4243740737438202, 0.41717037558555603, 0.4189598262310028, 0.4060654938220978, 0.40290290117263794, 0.39417633414268494, 0.3983384072780609, 0.38193193078041077, 0.38350608944892883, 0.3685695230960846, 0.3677339255809784, 0.3650595545768738, 0.35601747035980225, 0.34545621275901794, 0.3424670994281769, 0.3411701023578644, 0.33237242698669434, 0.32750171422958374, 0.3252333104610443, 0.3184892535209656, 0.3116565942764282, 0.31888410449028015, 0.3038777709007263, 0.3018249571323395, 0.29881343245506287, 0.292069673538208, 0.29349586367607117, 0.2904369831085205, 0.28082820773124695, 0.2833316922187805, 0.2797781527042389, 0.2786644399166107, 0.2707343101501465, 0.2636966109275818, 0.2551758885383606, 0.2550840377807617, 0.2497463822364807, 0.24532794952392578, 0.24869304895401, 0.24358278512954712, 0.24029536545276642, 0.23811215162277222, 0.23304669559001923, 0.2273012399673462, 0.22166505455970764, 0.22176803648471832, 0.21560046076774597, 0.21933774650096893], "accuracy": [0.28424251079559326, 0.4807819426059723, 0.5705983638763428, 0.6193369626998901, 0.6634526252746582, 0.698190450668335, 0.7211728692054749, 0.7338528633117676, 0.7556465268135071, 0.7609298825263977, 0.7689869403839111, 0.7784969210624695, 0.7866860628128052, 0.7909126877784729, 0.7981772422790527, 0.8047813773155212, 0.8133667707443237, 0.8124422430992126, 0.8171972036361694, 0.8265751004219055, 0.8273676037788391, 0.8301413059234619, 0.8319904804229736, 0.8364813327789307, 0.8396512866020203, 0.8459912538528442, 0.8477083444595337, 0.850350022315979, 0.8496896028518677, 0.8527275323867798, 0.8561616539955139, 0.8593316674232483, 0.8580108284950256, 0.8622375130653381, 0.8648791313171387, 0.8669924736022949, 0.8685774803161621, 0.8691058158874512, 0.8696341514587402, 0.8774270415306091, 0.8765024542808533, 0.8782195448875427, 0.8812574148178101, 0.8848236799240112, 0.8835028409957886, 0.8844274282455444, 0.8837670087814331, 0.885219931602478, 0.8893144726753235, 0.8906353116035461, 0.8981640338897705, 0.8960506916046143, 0.8967111110687256, 0.8910315632820129, 0.9022586345672607, 0.9002773761749268, 0.8969752788543701, 0.8986923694610596, 0.9015982151031494, 0.9063531756401062, 0.9054285883903503, 0.9079381823539734, 0.9121648669242859, 0.913617730140686, 0.9111081957817078, 0.9133535623550415, 0.9145423173904419, 0.9099194407463074, 0.9117686152458191, 0.9182406663894653, 0.9223352074623108, 0.9207502603530884, 0.9276185631752014, 0.9198256731033325], "val_loss": [2.0417890548706055, 1.5205562114715576, 1.044536828994751, 0.8313433527946472, 0.7444810271263123, 0.6818348169326782, 0.6431480646133423, 0.6091718077659607, 0.5841110348701477, 0.5641511082649231, 0.5473056435585022, 0.526980459690094, 0.5170370936393738, 0.5067272186279297, 0.492666095495224, 0.4851299524307251, 0.4795125722885132, 0.46463748812675476, 0.460841566324234, 0.4512607455253601, 0.44559404253959656, 0.45738717913627625, 0.4413846731185913, 0.42847418785095215, 0.4274017810821533, 0.4221626818180084, 0.4113295078277588, 0.41232770681381226, 0.40457797050476074, 0.40541401505470276, 0.40406566858291626, 0.3996444046497345, 0.39274266362190247, 0.3890749216079712, 0.38773882389068604, 0.38543811440467834, 0.382555216550827, 0.38376790285110474, 0.37329378724098206, 0.374263197183609, 0.3767522871494293, 0.37432539463043213, 0.36757951974868774, 0.3723057508468628, 0.3643873631954193, 0.3620929419994354, 0.3650931715965271, 0.36206063628196716, 0.36108922958374023, 0.3593164086341858, 0.3569068908691406, 0.3561078608036041, 0.3581192195415497, 0.3568309247493744, 0.35524019598960876, 0.3573806881904602, 0.35935214161872864, 0.3567582666873932, 0.3536856174468994, 0.3430158197879791, 0.3487902283668518, 0.345478355884552, 0.34619244933128357, 0.35115721821784973, 0.33911117911338806, 0.3451274335384369, 0.34650447964668274, 0.3465941250324249, 0.34428897500038147, 0.3396095633506775, 0.34331193566322327, 0.34272512793540955, 0.3425353467464447, 0.34616968035697937], "val_accuracy": [0.5206666588783264, 0.6676666736602783, 0.6836666464805603, 0.7066666483879089, 0.7213333249092102, 0.7509999871253967, 0.7570000290870667, 0.7703333497047424, 0.7789999842643738, 0.7863333225250244, 0.7889999747276306, 0.8063333630561829, 0.8029999732971191, 0.8130000233650208, 0.8176666498184204, 0.8196666836738586, 0.824999988079071, 0.8320000171661377, 0.8296666741371155, 0.8370000123977661, 0.8376666903495789, 0.8336666822433472, 0.8423333168029785, 0.8486666679382324, 0.8483333587646484, 0.8479999899864197, 0.8536666631698608, 0.8556666374206543, 0.8573333621025085, 0.856333315372467, 0.8529999852180481, 0.8560000061988831, 0.8606666922569275, 0.8613333106040955, 0.8619999885559082, 0.8656666874885559, 0.8619999885559082, 0.8666666746139526, 0.8686666488647461, 0.8690000176429749, 0.8679999709129333, 0.8703333139419556, 0.8723333477973938, 0.8730000257492065, 0.8709999918937683, 0.8740000128746033, 0.8703333139419556, 0.8743333220481873, 0.8756666779518127, 0.878000020980835, 0.875, 0.8803333044052124, 0.8756666779518127, 0.8759999871253967, 0.8790000081062317, 0.8806666731834412, 0.8763333559036255, 0.8766666650772095, 0.8786666393280029, 0.8833333253860474, 0.8803333044052124, 0.8836666941642761, 0.8803333044052124, 0.8816666603088379, 0.8870000243186951, 0.8836666941642761, 0.8830000162124634, 0.8809999823570251, 0.8889999985694885, 0.8880000114440918, 0.8830000162124634, 0.8853333592414856, 0.8883333206176758, 0.8840000033378601]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 2, 6, 2, 8, 0, 5], [0, 2, 0, 2, 1, 0, 1], [16, 16, 88], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 5, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 80, 96, 99, 61, 95]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 19, 12, 7, 3, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.add(tf.math.sqrt(alpha), tf.math.negative(tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.subtract(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [2, 2, 3, 0, 3, 1, 8, 0, 3, 6, 4, 5], [0, 2, 1, 3, 0, 4, 0, 3, 5], [16, 16, 30], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 4, 8, 9, 1, 2, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 99]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 21, 12, 9, 3, 2, 1, 1, 1, 16, 9, 7, 6], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [7.143932342529297, 55.61027526855469, 193.7982635498047, 479.78411865234375, 980.2696533203125, 1737.724365234375], "accuracy": [0.09853387624025345, 0.10170386731624603, 0.10289261490106583, 0.10328886657953262, 0.09589222073554993, 0.1026284471154213], "val_loss": [19.348834991455078, 91.71661376953125, 255.54966735839844, 558.9820556640625, 1050.139404296875, 1777.697998046875], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 6, 4], [1, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 2, 3, 0, 1, 0], [0, 2, 0, 3, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4, 1, 3, 4, 9, 3, 1, 5, 2, 0], [0, 4, 3, 3, 3, 0, 3, 1, 2, 3, 5, 1, 3, 1, 3, 6], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 1, 11, 6, 5, 2, 2, 1, 1, 1, 37, 21, 16, 3], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, alpha)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(grad))), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(sigma, sigma))), tf.math.subtract(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(tf.math.pow(beta, tf.math.subtract(tf.math.multiply(tf.math.pow(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.negative(sigma))), alpha), sigma)))), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 1], [0, 1, 0, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 3, 6], [0, 2, 0, 3, 3, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 6, 8, 1, 4, 3, 4, 2, 8], [4, 2, 0, 3, 0, 0, 3, 1, 2, 0], [78, 55, 96, 87, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 13, 7, 6, 2, 2, 1, 1, 1, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(grad, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]