[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8697142601013184, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2242798805236816, 1.8732341527938843, 1.3936855792999268, 1.0986368656158447, 0.9320455193519592, 0.831543505191803, 0.7619599103927612, 0.7277215719223022, 0.6874855160713196, 0.6441805958747864, 0.6336964964866638, 0.6095801591873169, 0.5917184948921204, 0.5701027512550354, 0.5505594611167908, 0.5419520735740662, 0.5355839729309082, 0.5089684128761292, 0.5039141774177551, 0.5042377710342407, 0.4884319603443146, 0.4728572368621826, 0.4679621160030365, 0.4650285542011261, 0.45016026496887207, 0.4434579014778137, 0.439715713262558, 0.42482683062553406, 0.41166192293167114, 0.4148130714893341, 0.4072965383529663, 0.40503525733947754, 0.39919981360435486, 0.3978900909423828, 0.3913191556930542, 0.37822070717811584, 0.3752393126487732, 0.3751426935195923, 0.3670400083065033, 0.36254021525382996, 0.35887017846107483, 0.3580237925052643, 0.35403141379356384, 0.3418448269367218, 0.3376074731349945, 0.33380207419395447, 0.33183741569519043, 0.32614076137542725, 0.3187035322189331, 0.3209647536277771, 0.32351499795913696, 0.3157949447631836, 0.3011425733566284, 0.298976868391037, 0.3023999035358429, 0.30075082182884216, 0.2891382575035095, 0.28657737374305725, 0.2783847451210022, 0.2761186361312866, 0.2737118899822235], "accuracy": [0.2709021270275116, 0.4854048490524292, 0.5650508403778076, 0.615770697593689, 0.6656980514526367, 0.7020208835601807, 0.7236824631690979, 0.7351737022399902, 0.7445515990257263, 0.759609043598175, 0.7662131786346436, 0.7769119143486023, 0.7817989587783813, 0.7965922355651855, 0.7977809906005859, 0.8018755912780762, 0.8039889335632324, 0.8132346868515015, 0.8169330358505249, 0.8146876096725464, 0.8240655064582825, 0.8293488025665283, 0.8298771381378174, 0.8350284099578857, 0.8374059200286865, 0.8368775844573975, 0.8403117060661316, 0.8466516733169556, 0.8487650156021118, 0.852331280708313, 0.8529917001724243, 0.8558974862098694, 0.8524633646011353, 0.8543124794960022, 0.8578787446022034, 0.8623695969581604, 0.8668603897094727, 0.8696341514587402, 0.867520809173584, 0.8667283058166504, 0.8679170608520508, 0.8705587387084961, 0.872407853603363, 0.8771628737449646, 0.8776912093162537, 0.8766345381736755, 0.8786157965660095, 0.8825782537460327, 0.886672854423523, 0.8849557638168335, 0.8819178342819214, 0.8865407705307007, 0.8902390599250793, 0.8912957310676575, 0.8906353116035461, 0.8923524022102356, 0.8943336606025696, 0.897899866104126, 0.8969752788543701, 0.9043719172477722, 0.9002773761749268], "val_loss": [2.043196201324463, 1.5161752700805664, 1.0356770753860474, 0.8236063718795776, 0.7269086837768555, 0.6706723570823669, 0.6227775812149048, 0.5918877720832825, 0.5677109360694885, 0.5452930331230164, 0.5272265672683716, 0.5151512622833252, 0.5023355484008789, 0.4909718334674835, 0.47898006439208984, 0.4695780575275421, 0.45938557386398315, 0.4544795751571655, 0.4503909647464752, 0.4451900124549866, 0.43869221210479736, 0.4378421902656555, 0.42892542481422424, 0.4188980758190155, 0.4200021028518677, 0.4124021828174591, 0.41167813539505005, 0.4080253541469574, 0.4001280963420868, 0.40100550651550293, 0.39595067501068115, 0.39202946424484253, 0.3858262896537781, 0.3875716030597687, 0.38966837525367737, 0.3814762830734253, 0.3810081481933594, 0.37700048089027405, 0.38571280241012573, 0.3728301525115967, 0.36902445554733276, 0.3760749399662018, 0.3720802366733551, 0.3702941834926605, 0.36621126532554626, 0.36203140020370483, 0.3628489673137665, 0.3582950532436371, 0.35874152183532715, 0.36092638969421387, 0.3540348410606384, 0.3559000790119171, 0.3547074794769287, 0.3492380380630493, 0.3519911766052246, 0.35422590374946594, 0.3514382839202881, 0.34993383288383484, 0.34851205348968506, 0.34847697615623474, 0.35449838638305664], "val_accuracy": [0.5473333597183228, 0.6600000262260437, 0.6869999766349792, 0.7083333134651184, 0.7333333492279053, 0.7490000128746033, 0.762666642665863, 0.7766666412353516, 0.7860000133514404, 0.7993333339691162, 0.8113333582878113, 0.8130000233650208, 0.8216666579246521, 0.824999988079071, 0.8320000171661377, 0.8330000042915344, 0.8343333601951599, 0.8383333086967468, 0.8370000123977661, 0.8373333215713501, 0.840666651725769, 0.840666651725769, 0.8539999723434448, 0.8519999980926514, 0.8523333072662354, 0.8550000190734863, 0.859000027179718, 0.8526666760444641, 0.8636666536331177, 0.8646666407585144, 0.8633333444595337, 0.8643333315849304, 0.8659999966621399, 0.8646666407585144, 0.8606666922569275, 0.8666666746139526, 0.8706666827201843, 0.8693333268165588, 0.8646666407585144, 0.8679999709129333, 0.8726666569709778, 0.8666666746139526, 0.8730000257492065, 0.8736666440963745, 0.8676666617393494, 0.8763333559036255, 0.8740000128746033, 0.8766666650772095, 0.8730000257492065, 0.8736666440963745, 0.8740000128746033, 0.8736666440963745, 0.8769999742507935, 0.874666690826416, 0.878333330154419, 0.8793333172798157, 0.8793333172798157, 0.874666690826416, 0.8759999871253967, 0.8790000081062317, 0.8726666569709778]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [5, 2, 3, 0, 2, 3, 7, 3, 2, 4, 1], [0, 1, 1, 2, 2, 3, 2, 0, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 3, 0, 3, 3], [0, 2, 0, 3, 0], [16, 16, 92], [0, 0], [0, 9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 6, 6, 8, 1, 4, 1, 4, 2, 1], [4, 0, 0, 1, 0, 4, 3, 1, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 11, 10, 2, 11, 6, 5, 3, 2, 2, 0, 1, 12, 6, 6, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.math.multiply(alpha, grad), tf.math.add(grad, tf.math.multiply(tf.math.add(grad, grad), tf.math.pow(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), alpha)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 0, 3], [2, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [83, 75], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 4, 1, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 2, 4, 0, 0, 3, 1, 2, 0], [16, 51, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(grad)), alpha)), lambda shape,  alpha, beta, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), beta)), grad)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}, "mapping_values": [1, 6, 4, 2, 0, 1, 0, 1, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 9], [0, 2, 0, 3], [16, 14, 12], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 3, 8, 2, 4, 1, 2, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 7, 3, 3, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma), tf.math.add(alpha, tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.303633213043213, 2.3025641441345215, 2.3025548458099365, 2.3025569915771484, 2.3025662899017334, 2.302560806274414, 2.3025734424591064], "accuracy": [0.10685510188341141, 0.10527011007070541, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025906085968018, 2.3025755882263184, 2.3025524616241455, 2.3025662899017334, 2.3025543689727783, 2.302549123764038, 2.302534818649292], "val_accuracy": [0.0976666659116745, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 3, 5, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [2, 0, 0, 3, 3, 0, 3, 1, 0, 0], [31, 99, 96, 99, 61, 1]], "fitness": -0.08971428871154785, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 1, 7, 3, 4, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3097991943359375, 2.3094418048858643, 2.3097658157348633, 2.310213327407837, 2.3095085620880127, 2.3105528354644775], "accuracy": [0.09179764986038208, 0.09628847241401672, 0.09470347315073013, 0.09285431355237961, 0.09100515395402908, 0.08942015469074249], "val_loss": [2.3080713748931885, 2.3080713748931885, 2.3080713748931885, 2.3080713748931885, 2.3080713748931885, 2.3080713748931885], "val_accuracy": [0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869]}}]