[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8539999723434448, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2232282161712646, 1.8621819019317627, 1.378900408744812, 1.0914881229400635, 0.9278940558433533, 0.8324927687644958, 0.7644389271736145, 0.7255488038063049, 0.6949490904808044, 0.6617550253868103, 0.6379444003105164, 0.6131688952445984, 0.5998623371124268, 0.5732845067977905, 0.5658749341964722, 0.5395569801330566, 0.5331620573997498, 0.5245354175567627, 0.5171352028846741, 0.5045948624610901, 0.49737459421157837, 0.4827783703804016, 0.46699270606040955, 0.45523136854171753, 0.45168137550354004, 0.4552575647830963, 0.44429510831832886, 0.43202927708625793, 0.41873469948768616, 0.41084006428718567, 0.406051903963089, 0.3993295133113861, 0.39517056941986084, 0.3935444951057434, 0.3776894807815552, 0.38037148118019104, 0.3798796832561493, 0.36667579412460327, 0.3621583580970764, 0.3575160503387451, 0.3507588803768158, 0.3429376184940338, 0.33980515599250793, 0.3372980058193207, 0.32840803265571594, 0.327634334564209, 0.32459837198257446, 0.31047528982162476, 0.3115370571613312, 0.3079255521297455, 0.3142336308956146, 0.30052050948143005, 0.2923107445240021, 0.2924017906188965, 0.2803363502025604, 0.27483102679252625, 0.2770146429538727, 0.2761665880680084, 0.26648008823394775, 0.2657354176044464, 0.26030194759368896, 0.25258028507232666, 0.2562975585460663, 0.24982710182666779, 0.25282129645347595, 0.2460818737745285, 0.23936469852924347, 0.23119662702083588, 0.2300931066274643, 0.22570709884166718, 0.22356738150119781, 0.2147720754146576, 0.22447820007801056, 0.21503503620624542, 0.21251437067985535], "accuracy": [0.2723550498485565, 0.5023114681243896, 0.5665037631988525, 0.6189407110214233, 0.663848876953125, 0.6993792057037354, 0.7238145470619202, 0.7325320243835449, 0.7436270117759705, 0.7515519857406616, 0.7647602558135986, 0.7732135653495789, 0.7817989587783813, 0.7911768555641174, 0.7998943328857422, 0.8117818236351013, 0.8061022162437439, 0.8094043135643005, 0.81548011302948, 0.8145555257797241, 0.8220842480659485, 0.8253863453865051, 0.8304054737091064, 0.8376700282096863, 0.8388587832450867, 0.839519202709198, 0.8404437899589539, 0.8455950617790222, 0.8507462739944458, 0.8537842035293579, 0.8512746095657349, 0.8585391640663147, 0.8618412613868713, 0.8588033318519592, 0.8661999702453613, 0.8665962219238281, 0.8654074668884277, 0.8704266548156738, 0.873860776424408, 0.8737286925315857, 0.8739928603172302, 0.8811253309249878, 0.8811253309249878, 0.8819178342819214, 0.8799365758895874, 0.883238673210144, 0.8856161832809448, 0.8894465565681458, 0.8906353116035461, 0.8877294659614563, 0.8844274282455444, 0.8927486538887024, 0.8994848728179932, 0.896446943283081, 0.9010698795318604, 0.9030511379241943, 0.8947299122810364, 0.8992207050323486, 0.9055606722831726, 0.9058248400688171, 0.9054285883903503, 0.9091269373893738, 0.9064852595329285, 0.9066173434257507, 0.9054285883903503, 0.913617730140686, 0.9120327830314636, 0.9183727502822876, 0.9152027368545532, 0.9170519113540649, 0.9222031235694885, 0.923920214176178, 0.9183727502822876, 0.9228635430335999, 0.9224672913551331], "val_loss": [2.036343812942505, 1.504726529121399, 1.0244510173797607, 0.819187581539154, 0.7317101359367371, 0.6803280711174011, 0.6340585350990295, 0.6117843389511108, 0.574339747428894, 0.5529714226722717, 0.5342398881912231, 0.5204759240150452, 0.5024548172950745, 0.49486324191093445, 0.4770869016647339, 0.4680687189102173, 0.4600900113582611, 0.4549911618232727, 0.44480687379837036, 0.43762630224227905, 0.43265363574028015, 0.4255833625793457, 0.42325907945632935, 0.41637206077575684, 0.4112524688243866, 0.4078325927257538, 0.40160900354385376, 0.39408665895462036, 0.39172008633613586, 0.38806843757629395, 0.382883757352829, 0.38162922859191895, 0.37738850712776184, 0.3718716502189636, 0.36905941367149353, 0.3637206554412842, 0.3704005181789398, 0.36114469170570374, 0.3584413528442383, 0.3544561266899109, 0.35977354645729065, 0.34988513588905334, 0.3507370948791504, 0.34566840529441833, 0.34830671548843384, 0.3429582118988037, 0.3404354751110077, 0.33805087208747864, 0.34240391850471497, 0.33878064155578613, 0.33487239480018616, 0.33409014344215393, 0.3359626829624176, 0.33923670649528503, 0.3288397192955017, 0.32858434319496155, 0.33131635189056396, 0.32486045360565186, 0.3267434537410736, 0.3227008581161499, 0.32686543464660645, 0.32528066635131836, 0.32463642954826355, 0.3238958418369293, 0.3192664086818695, 0.3298129439353943, 0.3172173798084259, 0.3193743824958801, 0.3177556097507477, 0.3134930431842804, 0.32109707593917847, 0.31436851620674133, 0.31515002250671387, 0.3179692327976227, 0.3159189820289612], "val_accuracy": [0.5576666593551636, 0.6626666784286499, 0.6916666626930237, 0.7213333249092102, 0.7379999756813049, 0.7546666860580444, 0.7663333415985107, 0.7743333578109741, 0.7933333516120911, 0.7993333339691162, 0.8033333420753479, 0.815666675567627, 0.8223333358764648, 0.8293333053588867, 0.8346666693687439, 0.8379999995231628, 0.8330000042915344, 0.8403333425521851, 0.8446666598320007, 0.8493333458900452, 0.8516666889190674, 0.8463333249092102, 0.8510000109672546, 0.8569999933242798, 0.8603333234786987, 0.8516666889190674, 0.8566666841506958, 0.8643333315849304, 0.8646666407585144, 0.8640000224113464, 0.8629999756813049, 0.862666666507721, 0.8690000176429749, 0.8650000095367432, 0.8730000257492065, 0.871999979019165, 0.8643333315849304, 0.8669999837875366, 0.8686666488647461, 0.8733333349227905, 0.871999979019165, 0.874666690826416, 0.8709999918937683, 0.878000020980835, 0.8776666522026062, 0.8759999871253967, 0.8763333559036255, 0.878333330154419, 0.8793333172798157, 0.8766666650772095, 0.8769999742507935, 0.8820000290870667, 0.8809999823570251, 0.8813333511352539, 0.8786666393280029, 0.8813333511352539, 0.8823333382606506, 0.8849999904632568, 0.8836666941642761, 0.8849999904632568, 0.8843333125114441, 0.8859999775886536, 0.8823333382606506, 0.8866666555404663, 0.887333333492279, 0.8806666731834412, 0.8863333463668823, 0.8846666812896729, 0.887333333492279, 0.890999972820282, 0.8883333206176758, 0.890666663646698, 0.8883333206176758, 0.8870000243186951, 0.8863333463668823]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 0, 5, 1, 9, 1, 5], [1, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 4, 0, 3, 5], [0, 2, 3, 3], [16, 13], [0, 1], [0], [0], [99], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 5, 9, 1, 4, 2, 8], [4, 0, 0, 4, 0, 0, 3, 1, 2, 0], [41, 99, 29, 99, 61, 73]], "fitness": -0.4659999907016754, "mapping_values": [1, 16, 11, 5, 2, 6, 4, 2, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), tf.math.multiply(tf.math.negative(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.square(grad), grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.4877967834472656, 2.303724765777588, 2.3025429248809814, 2.292449474334717, 2.353072166442871, 2.289825439453125, 2.231041193008423, 2.285771608352661, 2.3027350902557373, 2.232531785964966, 2.3041088581085205], "accuracy": [0.1916523575782776, 0.09826971590518951, 0.09628847241401672, 0.13736626505851746, 0.19561484456062317, 0.14489498734474182, 0.21384228765964508, 0.1142517477273941, 0.09589222073554993, 0.17884030938148499, 0.09906221181154251], "val_loss": [2.30391526222229, 2.3024349212646484, 2.301039457321167, 2.1581428050994873, 2.3073337078094482, 2.069815158843994, 2.0954818725585938, 2.302595376968384, 2.2970352172851562, 2.3058371543884277, 2.2979273796081543], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.39233332872390747, 0.164000004529953, 0.46433332562446594, 0.25566667318344116, 0.10133333504199982, 0.13566666841506958, 0.09866666793823242, 0.17599999904632568]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [6, 2, 3, 0, 3, 9], [0, 1, 0, 2], [9, 39, 76], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 5, 3, 0, 3, 7, 6, 3, 4], [0, 2, 0, 3, 2, 5, 5, 2, 2], [47, 19], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 3, 2, 8], [0, 0, 0, 4, 0, 4, 3, 1, 2, 0], [16, 97, 96, 58, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 3, 20, 11, 9, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta))), tf.math.multiply(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.divide_no_nan(beta, grad)))), tf.math.multiply(grad, tf.math.pow(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 8, 3], [2, 1, 0, 2], [6, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 8, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 4, 4, 1, 4, 2, 8, 1, 1, 6, 3, 0, 4, 9, 2, 7, 1, 3, 2, 8, 4, 4, 2, 4, 9], [0, 0, 0, 3, 0, 0, 2, 1, 4, 4, 0, 6, 4, 5, 4, 4, 6, 2, 5, 6, 7, 1], [16, 99, 96, 99, 61, 1, 75, 98]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 6, 4, 2, 1, 2, 1, 1, 1, 51, 29, 22, 8], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(grad), alpha), tf.math.multiply(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(beta, alpha), grad), grad))))), tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(grad, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(tf.math.subtract(grad, tf.math.multiply(grad, tf.math.add(tf.math.sqrt(grad), tf.math.pow(grad, grad)))), tf.math.pow(tf.math.add(beta, grad), tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad))), grad)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [8, 2, 3, 0, 3], [0, 1, 0, 2], [39, 63], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 6, 3, 5], [0, 2, 0, 2, 1], [16, 16], [0, 0, 1], [0, 0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 2, 3, 2, 1, 1, 16, 8, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}]