[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8591428399085999, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2248713970184326, 1.8751906156539917, 1.3967095613479614, 1.10032057762146, 0.9401932954788208, 0.8340431451797485, 0.7762104272842407, 0.7328199744224548, 0.6909266114234924, 0.6608495712280273, 0.6432785391807556, 0.6115928292274475, 0.5919220447540283, 0.5648369789123535, 0.5573135018348694, 0.5414049625396729, 0.5250426530838013, 0.5152975916862488, 0.5018027424812317, 0.4895980954170227, 0.488895446062088, 0.4777137339115143, 0.4587676227092743, 0.45038875937461853, 0.4427828788757324, 0.43333011865615845, 0.4298287034034729, 0.4244282841682434, 0.4127503037452698, 0.4018533229827881, 0.4045563042163849, 0.3873576819896698, 0.3905414044857025, 0.38680166006088257, 0.37555310130119324, 0.36684954166412354, 0.3635561764240265, 0.3668573200702667, 0.3576611876487732, 0.3554094433784485, 0.3468164801597595, 0.3399600088596344, 0.33498910069465637, 0.32944661378860474, 0.3231773376464844, 0.3222675621509552, 0.31583720445632935, 0.31623321771621704, 0.30390962958335876, 0.3044479191303253, 0.29814085364341736, 0.2923622727394104, 0.29014474153518677, 0.28363361954689026, 0.2791062891483307, 0.2780531942844391, 0.2820012867450714, 0.27017372846603394, 0.26393091678619385, 0.26308876276016235], "accuracy": [0.26244881749153137, 0.4861973226070404, 0.5558050274848938, 0.6135252714157104, 0.6668868064880371, 0.6972658634185791, 0.7162858247756958, 0.7289658188819885, 0.7534011602401733, 0.7600052952766418, 0.7613261342048645, 0.7807422876358032, 0.7835160493850708, 0.7971205711364746, 0.7984414100646973, 0.8024039268493652, 0.8104609847068787, 0.8107251524925232, 0.8228767514228821, 0.8224804997444153, 0.8230088353157043, 0.8265751004219055, 0.8338396549224854, 0.8363492488861084, 0.8411042094230652, 0.8498216867446899, 0.8465195894241333, 0.8494254350662231, 0.850350022315979, 0.8555012345314026, 0.852331280708313, 0.8610487580299377, 0.8569541573524475, 0.8597279191017151, 0.868049144744873, 0.8687095642089844, 0.870030403137207, 0.8663320541381836, 0.8749174475669861, 0.8726720213890076, 0.8772949576377869, 0.8762382864952087, 0.8813894987106323, 0.8776912093162537, 0.8877294659614563, 0.8840311765670776, 0.8819178342819214, 0.887597382068634, 0.8885219693183899, 0.8898428082466125, 0.8905032277107239, 0.8947299122810364, 0.8936732411384583, 0.8963148593902588, 0.9019944667816162, 0.8969752788543701, 0.8949940800666809, 0.9014661312103271, 0.9035794734954834, 0.9049002528190613], "val_loss": [2.0417258739471436, 1.5164785385131836, 1.0373125076293945, 0.8317003846168518, 0.7363109588623047, 0.6842016577720642, 0.6484983563423157, 0.6136716604232788, 0.5923109650611877, 0.5747830271720886, 0.5583534240722656, 0.5433305501937866, 0.5228573083877563, 0.5108187794685364, 0.5014461278915405, 0.49334317445755005, 0.4817377030849457, 0.47996464371681213, 0.4646590054035187, 0.4689291715621948, 0.4577203094959259, 0.4573312997817993, 0.4418882727622986, 0.4355369508266449, 0.4379070997238159, 0.4295772612094879, 0.42401501536369324, 0.41937488317489624, 0.4159587025642395, 0.4152888059616089, 0.4140821099281311, 0.41080525517463684, 0.40960702300071716, 0.4032016694545746, 0.4046591818332672, 0.3988082706928253, 0.3982902765274048, 0.39418286085128784, 0.3918745219707489, 0.3898083567619324, 0.3919202387332916, 0.3843666911125183, 0.38467949628829956, 0.3871384263038635, 0.3873150646686554, 0.3848402500152588, 0.38537418842315674, 0.3818409740924835, 0.3785433769226074, 0.37578389048576355, 0.3804108202457428, 0.3771648406982422, 0.3788738548755646, 0.37368518114089966, 0.3764961361885071, 0.37642472982406616, 0.3710233271121979, 0.3761543333530426, 0.3701407015323639, 0.3729637563228607], "val_accuracy": [0.5516666769981384, 0.675000011920929, 0.7016666531562805, 0.7126666903495789, 0.7409999966621399, 0.753000020980835, 0.7739999890327454, 0.7793333530426025, 0.7903333306312561, 0.7943333387374878, 0.8009999990463257, 0.8016666769981384, 0.8199999928474426, 0.8159999847412109, 0.8199999928474426, 0.8246666789054871, 0.8309999704360962, 0.8339999914169312, 0.8353333473205566, 0.8246666789054871, 0.8379999995231628, 0.8360000252723694, 0.8399999737739563, 0.8403333425521851, 0.8423333168029785, 0.8426666855812073, 0.847000002861023, 0.846666693687439, 0.8486666679382324, 0.8543333411216736, 0.8506666421890259, 0.8533333539962769, 0.8553333282470703, 0.8553333282470703, 0.8550000190734863, 0.8536666631698608, 0.8539999723434448, 0.8573333621025085, 0.8569999933242798, 0.8583333492279053, 0.8603333234786987, 0.8619999885559082, 0.8606666922569275, 0.8619999885559082, 0.8583333492279053, 0.8666666746139526, 0.8636666536331177, 0.8646666407585144, 0.8686666488647461, 0.8663333058357239, 0.8673333525657654, 0.8696666955947876, 0.8650000095367432, 0.8696666955947876, 0.8706666827201843, 0.8690000176429749, 0.8676666617393494, 0.8686666488647461, 0.8679999709129333, 0.8700000047683716]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [2, 2, 0, 0], [16, 63], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 5, 3, 6, 8, 1, 4, 1, 8, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.13571429252624512, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 1, 4, 2, 2, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(beta), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [1.337728243637158e+18, 6.56840274974081e+18, 6.271597282404073e+18, 5.995901338809008e+18, 5.417432328517452e+18, 5.977715416485593e+18, 4.934062827691311e+18, 4.957998096316367e+18, 4.971936605221683e+18], "accuracy": [0.08796724677085876, 0.09681680053472519, 0.09642054885625839, 0.09668471664190292, 0.10302469879388809, 0.09377889335155487, 0.09602430462837219, 0.09734513610601425, 0.09800554811954498], "val_loss": [5.553557915350073e+18, 5.553557915350073e+18, 5.553557915350073e+18, 5.553557915350073e+18, 5.553557915350073e+18, 5.553557915350073e+18, 5.553557915350073e+18, 5.553557915350073e+18, 5.553557915350073e+18], "val_accuracy": [0.07966666668653488, 0.07966666668653488, 0.07999999821186066, 0.1393333375453949, 0.1393333375453949, 0.1393333375453949, 0.1393333375453949, 0.1393333375453949, 0.1393333375453949]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 9, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 1, 6, 8, 2, 9, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [369236480.0, 1402682752.0, 2198835456.0, 2892874752.0, 3533576704.0, 4025724160.0], "accuracy": [0.09325055778026581, 0.09774138033390045, 0.09681680053472519, 0.09840179979801178, 0.09840179979801178, 0.09826971590518951], "val_loss": [762447552.0, 1460900096.0, 2027345152.0, 2507862528.0, 2927710464.0, 3301992448.0], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 12, 7, 5, 5], "tree_depth": 16}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 62], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 4, 3, 8, 6, 5], [0, 2, 0, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 1, 6, 8, 1, 4, 1, 4, 8, 9, 9], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 19, 12, 7, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [159.3948516845703, 2324.792724609375, 2479.631591796875, 3522.864990234375, 3641.57177734375, 4927.81298828125, 4703.5244140625], "accuracy": [0.10513802617788315, 0.09496764093637466, 0.09826971590518951, 0.09879804402589798, 0.10500594228506088, 0.09747721254825592, 0.09932637959718704], "val_loss": [1024.89013671875, 1967.9163818359375, 4026.714111328125, 3973.077880859375, 4145.98583984375, 2748.314697265625, 3947.802001953125], "val_accuracy": [0.09700000286102295, 0.10466666519641876, 0.10266666859388351, 0.09600000083446503, 0.09966666996479034, 0.09700000286102295, 0.10466666519641876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [3, 2, 3, 0, 3], [1, 1, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 3, 0, 3, 5], [0, 3, 0, 3], [16, 17], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 0, 8], [1, 0, 0, 3, 0, 2, 3, 1, 2, 3], [67, 99, 84, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 0, 6, 4, 2, 1, 2, 1, 1, 1, 16, 8, 8, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), grad), tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.pow(beta, tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]