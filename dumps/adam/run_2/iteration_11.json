[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8671428561210632, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.219883680343628, 1.8646430969238281, 1.3936896324157715, 1.0893877744674683, 0.9355166554450989, 0.842409610748291, 0.7710077166557312, 0.7305188179016113, 0.6986204385757446, 0.6727396249771118, 0.6498048901557922, 0.6268044114112854, 0.6140111088752747, 0.5887817740440369, 0.578136682510376, 0.5584238767623901, 0.5524672269821167, 0.5343066453933716, 0.5221304893493652, 0.5067646503448486, 0.49799448251724243, 0.49728572368621826, 0.4813750684261322, 0.47350600361824036, 0.46665558218955994, 0.46120086312294006, 0.4508947730064392, 0.4514182507991791, 0.43237996101379395, 0.4303359389305115, 0.42297977209091187, 0.42136141657829285, 0.41076475381851196, 0.4052966833114624, 0.39923855662345886, 0.38885870575904846, 0.3861909806728363, 0.373085081577301, 0.37552767992019653, 0.36961859464645386, 0.3645276427268982, 0.3621616065502167, 0.3508068323135376, 0.3534679412841797, 0.3436737656593323, 0.34320715069770813, 0.3334048390388489, 0.32730600237846375, 0.3194701075553894, 0.3264276683330536, 0.3190784752368927, 0.317353218793869, 0.3047613799571991, 0.3113130033016205, 0.29358038306236267, 0.2904236614704132, 0.29598477482795715, 0.2843449115753174, 0.2814180254936218, 0.2754606008529663, 0.27888524532318115, 0.27082836627960205, 0.26988962292671204, 0.26404473185539246], "accuracy": [0.28503501415252686, 0.4916127324104309, 0.5641262531280518, 0.6206578016281128, 0.6627922058105469, 0.6931713223457336, 0.7180029153823853, 0.7416457533836365, 0.7471932172775269, 0.7552502751350403, 0.76106196641922, 0.770439863204956, 0.7744023203849792, 0.7844406366348267, 0.7880068421363831, 0.8000264167785645, 0.8005547523498535, 0.8061022162437439, 0.8152159452438354, 0.8182538747787476, 0.8171972036361694, 0.8251221776008606, 0.8325188159942627, 0.8300092220306396, 0.8358209133148193, 0.8421608805656433, 0.8393871188163757, 0.8389908671379089, 0.8432175517082214, 0.8498216867446899, 0.8510104417800903, 0.8479725122451782, 0.8552370667457581, 0.8537842035293579, 0.8619733452796936, 0.863029956817627, 0.8654074668884277, 0.8681812286376953, 0.8654074668884277, 0.8712190985679626, 0.870030403137207, 0.8710870146751404, 0.8734645247459412, 0.8689737319946289, 0.8799365758895874, 0.8733324408531189, 0.8833707571029663, 0.8819178342819214, 0.887201189994812, 0.8840311765670776, 0.8848236799240112, 0.8887861371040344, 0.8922203183174133, 0.8862766027450562, 0.8942015767097473, 0.8969752788543701, 0.8914278149604797, 0.8997490406036377, 0.8963148593902588, 0.89988112449646, 0.8990886211395264, 0.8988244533538818, 0.9025228023529053, 0.9056927561759949], "val_loss": [2.0383734703063965, 1.52497136592865, 1.0601259469985962, 0.8562812209129333, 0.7658120393753052, 0.7131959795951843, 0.6649298071861267, 0.6330333948135376, 0.6113543510437012, 0.5844947695732117, 0.5694802403450012, 0.5587157011032104, 0.5405371785163879, 0.5320618748664856, 0.5227773785591125, 0.5067153573036194, 0.5035103559494019, 0.488569974899292, 0.4856756627559662, 0.47375935316085815, 0.46686801314353943, 0.4690234065055847, 0.4562239646911621, 0.45184147357940674, 0.44802647829055786, 0.43765127658843994, 0.44083112478256226, 0.43040087819099426, 0.4233548939228058, 0.4223497211933136, 0.4192502796649933, 0.419228196144104, 0.4093460142612457, 0.40610718727111816, 0.40181079506874084, 0.3973771929740906, 0.40005266666412354, 0.3999347388744354, 0.39140209555625916, 0.39240047335624695, 0.3948496878147125, 0.38875582814216614, 0.3842795789241791, 0.38304319977760315, 0.3777843713760376, 0.37781664729118347, 0.3811173439025879, 0.377654492855072, 0.37773609161376953, 0.37403377890586853, 0.36979779601097107, 0.3724605441093445, 0.36716514825820923, 0.3631788194179535, 0.36722949147224426, 0.36092469096183777, 0.3646883964538574, 0.36131754517555237, 0.3600904941558838, 0.36084359884262085, 0.36253821849823, 0.35693618655204773, 0.3574981689453125, 0.3609990179538727], "val_accuracy": [0.5479999780654907, 0.6539999842643738, 0.6823333501815796, 0.7059999704360962, 0.7303333282470703, 0.7436666488647461, 0.7633333206176758, 0.7706666588783264, 0.7726666927337646, 0.7973333597183228, 0.7950000166893005, 0.7950000166893005, 0.8100000023841858, 0.8083333373069763, 0.8109999895095825, 0.8173333406448364, 0.8136666417121887, 0.8243333101272583, 0.8296666741371155, 0.8286666870117188, 0.8363333344459534, 0.8320000171661377, 0.8363333344459534, 0.8410000205039978, 0.8479999899864197, 0.843666672706604, 0.8433333039283752, 0.8486666679382324, 0.8519999980926514, 0.8536666631698608, 0.8526666760444641, 0.8533333539962769, 0.8603333234786987, 0.8573333621025085, 0.8619999885559082, 0.8606666922569275, 0.8603333234786987, 0.862333357334137, 0.8613333106040955, 0.8640000224113464, 0.8636666536331177, 0.8653333187103271, 0.8659999966621399, 0.8673333525657654, 0.8646666407585144, 0.8683333396911621, 0.8693333268165588, 0.8690000176429749, 0.8690000176429749, 0.8703333139419556, 0.8709999918937683, 0.8693333268165588, 0.8709999918937683, 0.8756666779518127, 0.8736666440963745, 0.871999979019165, 0.875, 0.8769999742507935, 0.8796666860580444, 0.871666669845581, 0.875, 0.8766666650772095, 0.8769999742507935, 0.8786666393280029]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8628571629524231, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2229695320129395, 1.864099144935608, 1.3911603689193726, 1.0931836366653442, 0.9516995549201965, 0.8546255230903625, 0.792049765586853, 0.7455160021781921, 0.7032554149627686, 0.6648150086402893, 0.6419381499290466, 0.6239599585533142, 0.599778950214386, 0.5841473937034607, 0.5728290677070618, 0.5594377517700195, 0.5418055057525635, 0.5305907130241394, 0.5155051946640015, 0.5038956999778748, 0.49163976311683655, 0.48638826608657837, 0.4681887626647949, 0.4660845398902893, 0.45724543929100037, 0.4433615207672119, 0.43717870116233826, 0.4319593906402588, 0.42852088809013367, 0.4196079969406128, 0.4185764193534851, 0.4033798277378082, 0.40304264426231384, 0.3952471911907196, 0.38257914781570435, 0.3813822567462921, 0.38172030448913574, 0.3757135272026062, 0.3581271767616272, 0.3590329587459564, 0.35323643684387207, 0.35091984272003174, 0.35090765357017517, 0.3453444540500641, 0.33981695771217346, 0.3328959047794342, 0.33294814825057983, 0.32368335127830505, 0.3136817216873169, 0.31517383456230164, 0.3093886375427246, 0.300158828496933, 0.30007725954055786, 0.2955440580844879], "accuracy": [0.27763834595680237, 0.478140264749527, 0.563730001449585, 0.6170915365219116, 0.6616035103797913, 0.6947563290596008, 0.7137762308120728, 0.7331924438476562, 0.743891179561615, 0.7588165402412415, 0.7670056819915771, 0.7714964747428894, 0.7821952104568481, 0.7917051911354065, 0.7890635132789612, 0.8063663840293884, 0.8024039268493652, 0.8113855719566345, 0.8164047002792358, 0.8183859586715698, 0.8231409192085266, 0.8239334225654602, 0.8319904804229736, 0.8329150676727295, 0.8362171649932861, 0.8396512866020203, 0.8445383906364441, 0.8432175517082214, 0.8437458872795105, 0.8491612672805786, 0.8488970994949341, 0.856689989566803, 0.8552370667457581, 0.8564258217811584, 0.8683133125305176, 0.8656716346740723, 0.8601241707801819, 0.8648791313171387, 0.869502067565918, 0.874389111995697, 0.8720116019248962, 0.8717474341392517, 0.874389111995697, 0.8745211958885193, 0.8796724081039429, 0.8787478804588318, 0.8757099509239197, 0.8811253309249878, 0.886672854423523, 0.8879936337471008, 0.8844274282455444, 0.8914278149604797, 0.891559898853302, 0.8939374089241028], "val_loss": [2.0410940647125244, 1.5150504112243652, 1.063849925994873, 0.8641148805618286, 0.7851593494415283, 0.7207182049751282, 0.6807264685630798, 0.6455557942390442, 0.6147971153259277, 0.5991014242172241, 0.5806163549423218, 0.5579531788825989, 0.5451377630233765, 0.5327196717262268, 0.5234919190406799, 0.51446932554245, 0.5043816566467285, 0.49257123470306396, 0.48585042357444763, 0.47891488671302795, 0.47506392002105713, 0.4743242561817169, 0.46022742986679077, 0.4569095969200134, 0.44957903027534485, 0.445818692445755, 0.4491053819656372, 0.4400922358036041, 0.4365426301956177, 0.43883728981018066, 0.4261126220226288, 0.42482954263687134, 0.41717472672462463, 0.4220605194568634, 0.42054083943367004, 0.4161926209926605, 0.41278430819511414, 0.40494975447654724, 0.40619996190071106, 0.39966219663619995, 0.40183231234550476, 0.39778459072113037, 0.39648470282554626, 0.3884817659854889, 0.39327871799468994, 0.4030205011367798, 0.38995447754859924, 0.38517138361930847, 0.38599103689193726, 0.3830117881298065, 0.3862212002277374, 0.38327938318252563, 0.3782995343208313, 0.38629305362701416], "val_accuracy": [0.5146666765213013, 0.6516666412353516, 0.6669999957084656, 0.6880000233650208, 0.7146666646003723, 0.7400000095367432, 0.7486666440963745, 0.7559999823570251, 0.7746666669845581, 0.781000018119812, 0.7863333225250244, 0.8023333549499512, 0.8096666932106018, 0.8136666417121887, 0.8130000233650208, 0.8196666836738586, 0.8206666707992554, 0.8299999833106995, 0.8326666951179504, 0.8339999914169312, 0.8379999995231628, 0.8343333601951599, 0.843999981880188, 0.843666672706604, 0.8456666469573975, 0.8450000286102295, 0.8423333168029785, 0.8479999899864197, 0.8503333330154419, 0.8503333330154419, 0.8533333539962769, 0.8550000190734863, 0.859000027179718, 0.8533333539962769, 0.8569999933242798, 0.8603333234786987, 0.8550000190734863, 0.8629999756813049, 0.862333357334137, 0.8640000224113464, 0.8600000143051147, 0.8640000224113464, 0.8646666407585144, 0.8659999966621399, 0.8646666407585144, 0.8650000095367432, 0.8640000224113464, 0.8700000047683716, 0.8726666569709778, 0.8690000176429749, 0.8693333268165588, 0.8690000176429749, 0.871666669845581, 0.8726666569709778]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [0, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [8, 3, 3, 0, 8, 8, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 3, 3, 1, 2, 0], [16, 99, 96, 99, 61, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 0, 17, 10, 7, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.sqrt(grad)))), tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [8, 2, 3, 0, 3, 8], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [5, 2, 8, 0, 2, 5], [3, 2, 0, 3], [16, 16], [0, 1, 0, 1], [1, 5], [0, 3], [99], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 2, 1, 4, 2, 4, 5, 8, 2, 7, 8, 0, 5, 1, 5, 4], [0, 0, 0, 3, 0, 1, 3, 1, 4, 0, 1, 3, 5, 5, 6], [16, 99, 96, 68, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.sqrt(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.sqrt(tf.math.negative(grad)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.square(tf.math.sqrt(sigma)))), alpha), tf.math.add(tf.math.add(tf.math.sqrt(grad), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), alpha))), tf.math.square(tf.math.subtract(sigma, tf.math.square(tf.math.pow(grad, grad))))), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}, "mapping_values": [1, 10, 6, 4, 1, 6, 4, 2, 0, 4, 2, 2, 1, 36, 21, 15, 5], "tree_depth": 23}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 9, 3], [0, 1, 0, 1], [56, 22], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 1, 3, 7, 0, 2, 5, 7, 6, 0, 6, 1], [0, 2, 0, 3, 3, 3, 3, 1, 5, 5, 0, 2], [81, 16, 35], [0, 1], [0], [2], [99], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4, 0, 4, 7, 9, 6, 8, 9, 8, 3, 4, 6, 1, 5, 0, 1, 2, 7, 9, 7, 8, 7, 9, 7, 6, 5, 3, 4, 6, 2, 7, 2, 2, 5, 3, 0, 2, 8, 5, 0], [4, 0, 1, 3, 0, 4, 3, 1, 2, 0, 6, 2, 3, 2, 3, 5, 7, 5, 4, 4, 6, 0, 6, 3, 1, 5, 6, 1, 0, 1], [78, 99, 96, 99, 65, 1, 94, 4, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 28, 16, 12, 3, 2, 1, 1, 0, 81, 51, 30, 9], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(grad, grad)), tf.math.divide_no_nan(grad, alpha))), grad), tf.math.negative(tf.math.divide_no_nan(grad, tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.pow(grad, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.pow(alpha, sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.pow(tf.math.add(grad, sigma), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.divide_no_nan(tf.math.sqrt(beta), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(grad, beta), sigma)))), tf.math.subtract(beta, tf.math.square(sigma))), tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.sqrt(grad), tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(tf.math.divide_no_nan(grad, tf.math.square(tf.math.multiply(grad, grad))), tf.math.pow(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(sigma, tf.math.add(tf.math.add(alpha, grad), tf.math.square(grad)))), tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.square(tf.math.negative(alpha))))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 1, 3, 2, 0, 1, 9, 2], [0, 1, 0, 1, 1, 0, 0], [39, 39, 93, 7, 25], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 15], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 9, 6, 8, 1, 4, 1, 4, 2, 8, 3], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [54, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 10, 7, 5, 1, 0, 1, 1, 2, 1, 1, 1, 21, 12, 9, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(tf.math.negative(tf.math.subtract(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.multiply(alpha, beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}]