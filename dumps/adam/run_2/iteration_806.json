[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8585714101791382, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223898410797119, 1.8723381757736206, 1.3988468647003174, 1.1161954402923584, 0.952057957649231, 0.8546246290206909, 0.7918968796730042, 0.7421457767486572, 0.7076675891876221, 0.670711100101471, 0.6385939121246338, 0.6199929118156433, 0.6041530966758728, 0.5863837599754333, 0.5702601075172424, 0.553231418132782, 0.534156858921051, 0.5248251557350159, 0.5035994052886963, 0.49565017223358154, 0.4945133924484253, 0.48810261487960815, 0.47706037759780884, 0.4660470187664032, 0.4596003293991089, 0.4545495808124542, 0.4377046823501587, 0.43234628438949585, 0.42605161666870117, 0.4187212884426117, 0.4198060631752014, 0.41584473848342896, 0.40840837359428406, 0.39729055762290955, 0.39834168553352356, 0.3843231797218323, 0.38384687900543213, 0.3701407015323639, 0.38109445571899414, 0.362762987613678, 0.3588704466819763, 0.3534902036190033, 0.35129523277282715, 0.3395378291606903, 0.3300497531890869, 0.33373916149139404, 0.32681313157081604, 0.3263128995895386, 0.31879252195358276, 0.3237427771091461, 0.31345346570014954, 0.3011372685432434, 0.2937659025192261, 0.29496026039123535, 0.29706263542175293, 0.2937091290950775, 0.2874934673309326, 0.28305456042289734, 0.2784719467163086, 0.2692783772945404, 0.2658303678035736, 0.2623867094516754, 0.2624404728412628, 0.26287704706192017, 0.25978314876556396, 0.2535362243652344, 0.251084566116333, 0.24831026792526245, 0.2437928467988968, 0.23930159211158752, 0.23591673374176025, 0.23576273024082184, 0.22439709305763245, 0.2258152961730957, 0.2201356440782547], "accuracy": [0.27816668152809143, 0.48685774207115173, 0.5649187564849854, 0.6115440726280212, 0.6633205413818359, 0.6946242451667786, 0.7120591998100281, 0.7329282760620117, 0.7452120184898376, 0.7585523724555969, 0.7668735980987549, 0.7790252566337585, 0.7807422876358032, 0.7917051911354065, 0.7943468689918518, 0.8025360107421875, 0.8099326491355896, 0.8109893202781677, 0.8215559124946594, 0.8239334225654602, 0.822348415851593, 0.8256505131721497, 0.8315942287445068, 0.8356888294219971, 0.8408400416374207, 0.8391229510307312, 0.8442742228507996, 0.8448025584220886, 0.8485008478164673, 0.8510104417800903, 0.850350022315979, 0.8488970994949341, 0.8576145768165588, 0.8577466607093811, 0.857218325138092, 0.8625016212463379, 0.8597279191017151, 0.8664641380310059, 0.8605204224586487, 0.8728041052818298, 0.8746532797813416, 0.8772949576377869, 0.874389111995697, 0.8751816153526306, 0.8825782537460327, 0.8778232932090759, 0.8808611631393433, 0.8821820020675659, 0.887201189994812, 0.8858803510665894, 0.8873332738876343, 0.8901069760322571, 0.8951261639595032, 0.8976356983184814, 0.8924844861030579, 0.8960506916046143, 0.8948619961738586, 0.8976356983184814, 0.898428201675415, 0.9035794734954834, 0.9015982151031494, 0.9059569239616394, 0.906749427318573, 0.904768168926239, 0.9066173434257507, 0.908730685710907, 0.9083344340324402, 0.91124027967453, 0.9095231890678406, 0.9128252267837524, 0.9128252267837524, 0.9138818979263306, 0.9182406663894653, 0.9159952402114868, 0.9186369180679321], "val_loss": [2.03902006149292, 1.5134788751602173, 1.0432699918746948, 0.835356593132019, 0.7386199831962585, 0.6875115036964417, 0.6495249271392822, 0.6085153222084045, 0.5806497931480408, 0.561713457107544, 0.5449719429016113, 0.5270344018936157, 0.5254564881324768, 0.5030866265296936, 0.4941293001174927, 0.47986912727355957, 0.477015882730484, 0.4680711627006531, 0.46339747309684753, 0.46809062361717224, 0.45673975348472595, 0.4500944912433624, 0.43762654066085815, 0.4321228861808777, 0.4327652156352997, 0.42267662286758423, 0.4216703176498413, 0.42259716987609863, 0.41533830761909485, 0.40876147150993347, 0.4060310125350952, 0.40650495886802673, 0.3977322280406952, 0.3985520005226135, 0.397971510887146, 0.3934400677680969, 0.39138662815093994, 0.3871760964393616, 0.38287729024887085, 0.38204720616340637, 0.3792579472064972, 0.383414626121521, 0.3734736442565918, 0.3738223612308502, 0.3740096092224121, 0.3735388219356537, 0.37546655535697937, 0.3695470690727234, 0.36060526967048645, 0.36593472957611084, 0.35826224088668823, 0.35844364762306213, 0.359396755695343, 0.3569134473800659, 0.3591526746749878, 0.3561841547489166, 0.35461172461509705, 0.3573126494884491, 0.351814329624176, 0.3536284267902374, 0.35470059514045715, 0.349821001291275, 0.35291358828544617, 0.3496132791042328, 0.34697625041007996, 0.350558876991272, 0.35016629099845886, 0.34717032313346863, 0.35131940245628357, 0.34927821159362793, 0.354688435792923, 0.3540754020214081, 0.34302884340286255, 0.3487231433391571, 0.34801924228668213], "val_accuracy": [0.5246666669845581, 0.6610000133514404, 0.6803333163261414, 0.7110000252723694, 0.734000027179718, 0.7490000128746033, 0.7556666731834412, 0.7720000147819519, 0.7873333096504211, 0.7916666865348816, 0.7973333597183228, 0.8016666769981384, 0.8100000023841858, 0.8176666498184204, 0.8193333148956299, 0.8243333101272583, 0.8276666402816772, 0.8333333134651184, 0.8286666870117188, 0.82833331823349, 0.8336666822433472, 0.8360000252723694, 0.8446666598320007, 0.846666693687439, 0.8423333168029785, 0.8496666550636292, 0.8506666421890259, 0.8460000157356262, 0.8536666631698608, 0.8539999723434448, 0.8566666841506958, 0.8539999723434448, 0.8583333492279053, 0.8569999933242798, 0.859666645526886, 0.859333336353302, 0.859333336353302, 0.8586666584014893, 0.8619999885559082, 0.8643333315849304, 0.8633333444595337, 0.8603333234786987, 0.8653333187103271, 0.8659999966621399, 0.8659999966621399, 0.8640000224113464, 0.8659999966621399, 0.8686666488647461, 0.8690000176429749, 0.8673333525657654, 0.8706666827201843, 0.8703333139419556, 0.871666669845581, 0.8709999918937683, 0.871666669845581, 0.8700000047683716, 0.874666690826416, 0.8730000257492065, 0.874666690826416, 0.8756666779518127, 0.875333309173584, 0.875, 0.8763333559036255, 0.8769999742507935, 0.875333309173584, 0.8763333559036255, 0.8776666522026062, 0.8769999742507935, 0.8806666731834412, 0.8816666603088379, 0.8799999952316284, 0.878000020980835, 0.8816666603088379, 0.8766666650772095, 0.8803333044052124]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 7, 5], [0, 1, 0, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 3, 8, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 1, 1, 1], [0, 6, 7], [0, 7, 5], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 6, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 90, 96, 99, 93, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 10, 6, 4, 2, 6, 3, 3, 1, 16, 8, 8, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.square(grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, alpha)))", "other_info": {"loss": [1.3965806700401472e+20, 1.6077903446270804e+20, 1.6077906964708013e+20, 1.6077903446270804e+20, 1.6077903446270804e+20, 1.6077903446270804e+20], "accuracy": [0.10051512718200684, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.6133628454785096e+20, 1.6133628454785096e+20, 1.6133628454785096e+20, 1.6133628454785096e+20, 1.6133628454785096e+20, 1.6133628454785096e+20], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 6, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 3, 4, 3, 5, 8, 6], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0, 2, 4, 0, 1], [16, 99, 96, 99, 61, 1, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 7, 4, 3, 2, 2, 1, 1, 0, 31, 17, 14, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(tf.math.multiply(grad, tf.math.pow(tf.math.multiply(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), beta), grad))), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3], [0, 1, 1, 2], [8, 39], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [30], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 0, 0], [16, 98, 96, 99, 61, 91]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [0, 1, 0, 1], [39, 50], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 4], [0, 2, 0, 3], [16, 88], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 5, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 2], [16, 99, 96, 15, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 1, 0, 1, 1, 17, 9, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [6.17205810546875, 63.023338317871094, 593.495849609375, 5863.8095703125, 59637.78125, 570118.5625], "accuracy": [0.09919429570436478, 0.09813763201236725, 0.09932637959718704, 0.10355303436517715, 0.09840179979801178, 0.10315678268671036], "val_loss": [16.361059188842773, 149.03358459472656, 1440.6070556640625, 14426.5595703125, 140862.375, 1350172.625], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]