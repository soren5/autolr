[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.87028568983078, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.225227117538452, 1.8659194707870483, 1.3969746828079224, 1.0904520750045776, 0.9444030523300171, 0.8316219449043274, 0.7833667993545532, 0.7304221987724304, 0.6905325055122375, 0.6471098065376282, 0.6309249401092529, 0.6128763556480408, 0.5917050242424011, 0.5612540245056152, 0.5525310039520264, 0.5483177304267883, 0.5317663550376892, 0.5123229622840881, 0.5023795962333679, 0.488669753074646, 0.47993218898773193, 0.47180938720703125, 0.4648051857948303, 0.4567148983478546, 0.4383074641227722, 0.44321227073669434, 0.42567363381385803, 0.4197969138622284, 0.41471293568611145, 0.4056490659713745, 0.40460243821144104, 0.40092459321022034, 0.39119431376457214, 0.38436228036880493, 0.38894522190093994, 0.38360658288002014, 0.37543705105781555, 0.3636176884174347, 0.3566164970397949, 0.351529061794281, 0.34793001413345337, 0.3442297875881195, 0.33816149830818176, 0.32873865962028503, 0.32972848415374756, 0.3248975872993469, 0.32555896043777466, 0.3183233141899109, 0.3115383982658386, 0.30884504318237305, 0.3044084310531616, 0.3002924621105194, 0.2972601056098938, 0.29663869738578796, 0.2925961911678314], "accuracy": [0.2728833854198456, 0.4966318905353546, 0.5632016658782959, 0.6147140264511108, 0.6621318459510803, 0.698718786239624, 0.7111346125602722, 0.7313432693481445, 0.7421740889549255, 0.7629110813140869, 0.7663452625274658, 0.7709681391716003, 0.7808743715286255, 0.7940827012062073, 0.7930260300636292, 0.7954035401344299, 0.8064984679222107, 0.8148196935653687, 0.8145555257797241, 0.8238013386726379, 0.8289526104927063, 0.8286884427070618, 0.8334434032440186, 0.8348963260650635, 0.8384625315666199, 0.8379341959953308, 0.8470479249954224, 0.8486329317092896, 0.8521991968154907, 0.8535200357437134, 0.8533879518508911, 0.8562937378883362, 0.8581429123878479, 0.8621054291725159, 0.8565579056739807, 0.8597279191017151, 0.8668603897094727, 0.870030403137207, 0.869502067565918, 0.8708229064941406, 0.8746532797813416, 0.876370370388031, 0.8759741187095642, 0.8805969953536987, 0.8813894987106323, 0.8841632604598999, 0.8841632604598999, 0.8821820020675659, 0.8796724081039429, 0.8886540532112122, 0.8870691061019897, 0.889050304889679, 0.8927486538887024, 0.8907673954963684, 0.8930128216743469], "val_loss": [2.041022539138794, 1.5226833820343018, 1.0581461191177368, 0.8516650199890137, 0.7617958784103394, 0.7066755294799805, 0.660171627998352, 0.6280522346496582, 0.5977591276168823, 0.5750890970230103, 0.5563716292381287, 0.5362255573272705, 0.5288282632827759, 0.5097432732582092, 0.5048366189002991, 0.4907635450363159, 0.482308566570282, 0.4735082983970642, 0.46727481484413147, 0.45716309547424316, 0.4470689296722412, 0.4403795599937439, 0.4393799602985382, 0.432829350233078, 0.42397403717041016, 0.4215388596057892, 0.41348910331726074, 0.41331982612609863, 0.4045655429363251, 0.39939549565315247, 0.4038291275501251, 0.39566874504089355, 0.39258134365081787, 0.3883433938026428, 0.38936907052993774, 0.3857487738132477, 0.3818204700946808, 0.37342265248298645, 0.37202754616737366, 0.370511919260025, 0.3684503138065338, 0.3631759583950043, 0.36591535806655884, 0.3635757565498352, 0.35982897877693176, 0.35569003224372864, 0.35738760232925415, 0.35535773634910583, 0.3517955243587494, 0.35105782747268677, 0.35023316740989685, 0.3525868058204651, 0.3487299084663391, 0.34982413053512573, 0.34890443086624146], "val_accuracy": [0.5649999976158142, 0.6503333449363708, 0.6713333129882812, 0.6970000267028809, 0.7179999947547913, 0.734333336353302, 0.749666690826416, 0.7506666779518127, 0.762666642665863, 0.7763333320617676, 0.7823333144187927, 0.7976666688919067, 0.8043333292007446, 0.8166666626930237, 0.812333345413208, 0.8163333535194397, 0.8209999799728394, 0.8259999752044678, 0.8323333263397217, 0.8326666951179504, 0.8396666646003723, 0.8360000252723694, 0.8426666855812073, 0.840666651725769, 0.8473333120346069, 0.847000002861023, 0.8533333539962769, 0.8463333249092102, 0.8513333201408386, 0.8513333201408386, 0.8523333072662354, 0.862333357334137, 0.8606666922569275, 0.8619999885559082, 0.859666645526886, 0.859666645526886, 0.8656666874885559, 0.871999979019165, 0.8693333268165588, 0.8706666827201843, 0.8690000176429749, 0.8733333349227905, 0.8713333606719971, 0.8736666440963745, 0.8759999871253967, 0.8769999742507935, 0.8776666522026062, 0.8740000128746033, 0.878000020980835, 0.8836666941642761, 0.8766666650772095, 0.875333309173584, 0.878000020980835, 0.878000020980835, 0.8773333430290222]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3, 4, 2, 7, 9], [0, 1, 2, 2, 3, 1], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 1, 1, 6, 2, 2, 3, 9, 2, 9], [0, 2, 0, 3, 3, 5, 3, 3, 2], [16, 16, 55, 2], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 2, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 9, 6, 2, 24, 15, 9, 4, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(grad, grad)))), grad), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.divide_no_nan(grad, tf.math.add(grad, tf.math.add(tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), grad)))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [2, 3, 3, 6, 8, 1, 4, 1, 4, 4, 8, 8, 9], [0, 0, 0, 3, 0, 1, 3, 1, 2, 0], [16, 99, 55, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha))), sigma))), tf.math.sqrt(tf.math.sqrt(alpha)))), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 2, 1, 1, 1, 22, 13, 9, 5], "tree_depth": 24}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 3, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [5, 2, 9, 0, 3, 6], [0, 1, 3, 3], [26, 83], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 3, 8, 1, 4, 1, 4, 2, 9], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 64, 99, 35, 36]], "fitness": -0.09314285963773727, "mapping_values": [1, 9, 5, 4, 1, 5, 4, 1, 2, 2, 1, 1, 1, 20, 11, 9, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3103926181793213, 2.309276819229126, 2.3083062171936035, 2.309925079345703, 2.310558557510376, 2.3103344440460205], "accuracy": [0.0952318087220192, 0.09272222965955734, 0.09166556596755981, 0.09272222965955734, 0.09496764093637466, 0.09100515395402908], "val_loss": [2.3087427616119385, 2.3087427616119385, 2.3087427616119385, 2.3087427616119385, 2.3087427616119385, 2.3087427616119385], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 3, 3, 3], [0, 1, 2, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 3, 0, 3, 5], [0, 2, 0, 3], [16, 39], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 1, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.07457143068313599, "mapping_values": [1, 2, 1, 1, 1, 6, 3, 3, 2, 2, 1, 1, 1, 16, 8, 8, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(alpha), grad)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [57694098554880.0, 77874409242624.0, 77907049316352.0, 77257477455872.0, 79332156375040.0, 79576147427328.0], "accuracy": [0.09589222073554993, 0.10302469879388809, 0.09972262382507324, 0.1018359512090683, 0.09602430462837219, 0.10566636174917221], "val_loss": [47353268535296.0, 47353255952384.0, 47351771168768.0, 47351771168768.0, 47351792140288.0, 47351792140288.0], "val_accuracy": [0.06866666674613953, 0.06866666674613953, 0.06866666674613953, 0.06866666674613953, 0.06866666674613953, 0.06866666674613953]}}]