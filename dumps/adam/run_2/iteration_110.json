[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8642857074737549, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2245852947235107, 1.876104474067688, 1.405474305152893, 1.110467791557312, 0.9452364444732666, 0.8556345105171204, 0.7928569316864014, 0.7394502758979797, 0.6937457323074341, 0.6660398244857788, 0.6383635997772217, 0.6211907267570496, 0.5981157422065735, 0.5755535960197449, 0.5599585771560669, 0.5526383519172668, 0.5296830534934998, 0.5185204148292542, 0.5076423287391663, 0.49306315183639526, 0.48965102434158325, 0.4819214344024658, 0.4687919616699219, 0.4612707793712616, 0.45782867074012756, 0.4382183849811554, 0.4307233393192291, 0.427835077047348, 0.42445138096809387, 0.41987344622612, 0.41304582357406616, 0.40048763155937195, 0.3965056240558624, 0.3886679410934448, 0.38930022716522217, 0.38161009550094604, 0.37110447883605957, 0.36577117443084717, 0.36363908648490906, 0.35723191499710083, 0.35590606927871704, 0.34747469425201416, 0.34921300411224365, 0.3326146900653839, 0.3318610191345215, 0.3273223638534546, 0.32341644167900085, 0.3212399184703827, 0.31185799837112427, 0.3154072165489197, 0.30541911721229553, 0.2967582046985626, 0.2941913306713104, 0.2978109121322632, 0.2870578169822693, 0.27898555994033813, 0.28287768363952637, 0.2750028967857361, 0.2878945469856262, 0.26983198523521423, 0.26598307490348816, 0.26274704933166504, 0.26207324862480164, 0.25102612376213074, 0.25707823038101196, 0.25329551100730896, 0.2377101331949234, 0.24214453995227814, 0.24011766910552979], "accuracy": [0.266939640045166, 0.48131024837493896, 0.5630695819854736, 0.615770697593689, 0.6621318459510803, 0.6921146512031555, 0.7161537408828735, 0.7285695672035217, 0.7446836829185486, 0.7530049085617065, 0.7662131786346436, 0.770439863204956, 0.7861577272415161, 0.7898560166358948, 0.8016114234924316, 0.7965922355651855, 0.8055738806724548, 0.811649739742279, 0.8150838613510132, 0.8234050869941711, 0.8222163319587708, 0.8232730031013489, 0.8308017253875732, 0.8329150676727295, 0.8342359066009521, 0.843481719493866, 0.8451988101005554, 0.8466516733169556, 0.8470479249954224, 0.8511425256729126, 0.8473120927810669, 0.8552370667457581, 0.8585391640663147, 0.8617091774940491, 0.8588033318519592, 0.8667283058166504, 0.8672566413879395, 0.8691058158874512, 0.8728041052818298, 0.870030403137207, 0.8683133125305176, 0.8766345381736755, 0.8733324408531189, 0.8794082403182983, 0.8815215826034546, 0.882710337638855, 0.8796724081039429, 0.8833707571029663, 0.8887861371040344, 0.8889182209968567, 0.8932769894599915, 0.8926165699958801, 0.8947299122810364, 0.8924844861030579, 0.8972394466400146, 0.8990886211395264, 0.9013340473175049, 0.8976356983184814, 0.8956544995307922, 0.9000132083892822, 0.9017302989959717, 0.9026548862457275, 0.9056927561759949, 0.9089948534965515, 0.9068815112113953, 0.9100515246391296, 0.9138818979263306, 0.9105798602104187, 0.9104477763175964], "val_loss": [2.0440096855163574, 1.5261173248291016, 1.0531224012374878, 0.8445360660552979, 0.7605187296867371, 0.7044717073440552, 0.6579182147979736, 0.6207776069641113, 0.5933454036712646, 0.5708543062210083, 0.5551109313964844, 0.5335759520530701, 0.520562469959259, 0.5124457478523254, 0.49808260798454285, 0.4878271520137787, 0.47255033254623413, 0.47111910581588745, 0.45695480704307556, 0.4536186158657074, 0.4505358338356018, 0.4352792501449585, 0.43299227952957153, 0.43411320447921753, 0.4217061698436737, 0.4208945333957672, 0.4126013219356537, 0.4083435833454132, 0.4055179953575134, 0.3981607258319855, 0.3965771496295929, 0.3930540680885315, 0.3913895785808563, 0.3906004726886749, 0.38081806898117065, 0.3818933069705963, 0.38129621744155884, 0.373972624540329, 0.3707781434059143, 0.37411853671073914, 0.36530062556266785, 0.3673761785030365, 0.36716997623443604, 0.36156901717185974, 0.368818998336792, 0.35888490080833435, 0.3587271273136139, 0.35653531551361084, 0.3555002510547638, 0.354665607213974, 0.35307666659355164, 0.35207217931747437, 0.3507099151611328, 0.34781795740127563, 0.34260669350624084, 0.34801140427589417, 0.34531471133232117, 0.3489210903644562, 0.34310486912727356, 0.3409344255924225, 0.34609970450401306, 0.3382044732570648, 0.33577778935432434, 0.34117957949638367, 0.3378964960575104, 0.33971619606018066, 0.3425430953502655, 0.33650141954421997, 0.33264651894569397], "val_accuracy": [0.5540000200271606, 0.6606666445732117, 0.6850000023841858, 0.7053333520889282, 0.7253333330154419, 0.7419999837875366, 0.7536666393280029, 0.7663333415985107, 0.7716666460037231, 0.7836666703224182, 0.7943333387374878, 0.8063333630561829, 0.8063333630561829, 0.8046666383743286, 0.8169999718666077, 0.8253333568572998, 0.8256666660308838, 0.8299999833106995, 0.8363333344459534, 0.8299999833106995, 0.8353333473205566, 0.8456666469573975, 0.8453333377838135, 0.8389999866485596, 0.8523333072662354, 0.8476666808128357, 0.8479999899864197, 0.8510000109672546, 0.8566666841506958, 0.8579999804496765, 0.8560000061988831, 0.8560000061988831, 0.8556666374206543, 0.856333315372467, 0.8616666793823242, 0.862333357334137, 0.8643333315849304, 0.8653333187103271, 0.8666666746139526, 0.8600000143051147, 0.8696666955947876, 0.8636666536331177, 0.8650000095367432, 0.8693333268165588, 0.8666666746139526, 0.8700000047683716, 0.8696666955947876, 0.8679999709129333, 0.8686666488647461, 0.8730000257492065, 0.874666690826416, 0.8709999918937683, 0.874666690826416, 0.874666690826416, 0.875, 0.8756666779518127, 0.8740000128746033, 0.874666690826416, 0.878333330154419, 0.8769999742507935, 0.8786666393280029, 0.8799999952316284, 0.8796666860580444, 0.8823333382606506, 0.8823333382606506, 0.8806666731834412, 0.8806666731834412, 0.8799999952316284, 0.8816666603088379]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 4, 3, 0, 3, 0, 9], [0, 1, 0, 2], [2, 32, 68], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [5, 2, 3, 1, 3, 5, 2, 4, 5, 4, 7], [0, 2, 0, 3, 2, 1, 2, 0, 0], [16, 12, 82, 53], [0, 1, 1], [4], [0, 3], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 1, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 4, 4, 3, 4, 0, 3, 2, 2, 0], [16, 99, 96, 99, 61, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 7, 3, 3, 20, 11, 9, 4, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(beta, tf.math.pow(tf.math.square(alpha), tf.math.pow(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [31.279470443725586, 6194.853515625, 2.337785482406616, 2.312185764312744, 2.3052141666412354, 2.30342435836792, 2.3030776977539062, 2.302940607070923, 2.302989959716797, 2.302961826324463], "accuracy": [0.18901069462299347, 0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09694888442754745, 0.09602430462837219, 0.09377889335155487, 0.09285431355237961, 0.0940430611371994, 0.0944393053650856], "val_loss": [34.029029846191406, 2.3579535484313965, 2.31723690032959, 2.3061282634735107, 2.303163528442383, 2.3025639057159424, 2.302603244781494, 2.3025567531585693, 2.3027100563049316, 2.302640914916992], "val_accuracy": [0.09933333098888397, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.10533333569765091, 0.10533333569765091, 0.09966666996479034, 0.10533333569765091, 0.09933333098888397, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 4, 0, 3], [0, 1, 0, 2], [32, 98], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 1, 3], [16, 16], [0, 1], [8], [4], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 25]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 2, 1, 1, 0, 16, 8, 8, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 9], [0, 2, 0, 3], [16, 1, 57], [0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 2, 5, 3], [0, 1, 2, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 0, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1, 33]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 7, 3, 3, 9, 5, 4, 1, 21, 11, 10, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.multiply(alpha, beta)), sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2, 0], [39, 39, 52], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 0, 2, 5, 1, 7, 5, 7, 8, 3, 7, 5, 6, 3, 7, 4, 0, 9, 2, 7, 0, 6, 0, 9], [0, 2, 0, 3, 5, 2, 2, 5, 4, 2, 3, 1, 1, 0], [16, 16, 46, 52, 48], [0, 1], [0], [0], [24], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [6, 2, 3, 6, 2, 1, 4, 1, 4, 2, 8, 0, 2, 8, 9, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1, 89, 54]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.math.square(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.add(tf.math.sqrt(grad), tf.math.multiply(tf.math.add(grad, tf.math.square(tf.math.divide_no_nan(tf.math.multiply(beta, beta), tf.math.add(tf.math.pow(tf.math.negative(grad), grad), beta)))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, alpha)), tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), alpha)))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.pow(tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.negative(alpha))), beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.sqrt(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}, "mapping_values": [1, 10, 5, 5, 3, 40, 26, 14, 5, 2, 1, 1, 1, 26, 16, 10, 8], "tree_depth": 33}]