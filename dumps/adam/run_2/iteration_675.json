[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8577142953872681, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2240631580352783, 1.8628798723220825, 1.3864020109176636, 1.0851163864135742, 0.9300365447998047, 0.8426782488822937, 0.7677404284477234, 0.7158553600311279, 0.691411554813385, 0.6653410196304321, 0.6324920058250427, 0.6200525164604187, 0.5882616639137268, 0.5651274919509888, 0.5597627758979797, 0.5489872694015503, 0.5411298871040344, 0.5233061909675598, 0.5147143602371216, 0.5069035887718201, 0.4845799505710602, 0.47691842913627625, 0.4726007878780365, 0.4603703022003174, 0.4618128836154938, 0.4451030194759369, 0.4375918209552765, 0.4375224709510803, 0.42684972286224365, 0.4225645959377289, 0.40974000096321106, 0.403045654296875, 0.407162070274353, 0.3969019055366516, 0.38760343194007874, 0.38797011971473694, 0.3787533938884735, 0.3720981776714325, 0.37055665254592896, 0.3608599305152893, 0.3603598177433014, 0.35843804478645325, 0.3443893790245056, 0.3413076400756836, 0.3435632586479187, 0.33504384756088257, 0.32733213901519775, 0.3260495066642761, 0.3204341530799866, 0.3175799548625946, 0.317202091217041], "accuracy": [0.27737417817115784, 0.48791441321372986, 0.5699379444122314, 0.6256769299507141, 0.6691322326660156, 0.700700044631958, 0.7285695672035217, 0.7427024245262146, 0.7520803213119507, 0.7609298825263977, 0.7740060687065125, 0.7729493975639343, 0.7873464822769165, 0.7975168228149414, 0.7985734939575195, 0.8035926818847656, 0.8088759779930115, 0.8125742673873901, 0.813498854637146, 0.8164047002792358, 0.8286884427070618, 0.8274996876716614, 0.829216718673706, 0.8333113193511963, 0.8302733898162842, 0.8413683772087097, 0.8429533839225769, 0.8491612672805786, 0.8487650156021118, 0.8512746095657349, 0.8508783578872681, 0.8581429123878479, 0.8570862412452698, 0.8562937378883362, 0.863029956817627, 0.8610487580299377, 0.8706908226013184, 0.8665962219238281, 0.8677849769592285, 0.8683133125305176, 0.8688416481018066, 0.8710870146751404, 0.8771628737449646, 0.8761062026023865, 0.8735966086387634, 0.8804649114608765, 0.8828424215316772, 0.8853520154953003, 0.8873332738876343, 0.8865407705307007, 0.886672854423523], "val_loss": [2.0412049293518066, 1.510891318321228, 1.0347864627838135, 0.8200640678405762, 0.7302050590515137, 0.6702723503112793, 0.6265889406204224, 0.5906607508659363, 0.5642041563987732, 0.5540236234664917, 0.5241202712059021, 0.5090433955192566, 0.498131662607193, 0.48710477352142334, 0.4729142189025879, 0.4653729796409607, 0.4574607014656067, 0.44973355531692505, 0.4421403110027313, 0.43357905745506287, 0.4239532947540283, 0.41877511143684387, 0.41616806387901306, 0.41209590435028076, 0.4063052535057068, 0.3991875946521759, 0.39759591221809387, 0.39436328411102295, 0.39123469591140747, 0.3846084475517273, 0.3829755187034607, 0.3788833022117615, 0.3759811222553253, 0.37404105067253113, 0.36793529987335205, 0.3674026429653168, 0.36463940143585205, 0.3669533431529999, 0.359131395816803, 0.3574925661087036, 0.3546719253063202, 0.35696887969970703, 0.3533236086368561, 0.35330337285995483, 0.3500608205795288, 0.34486323595046997, 0.3437809944152832, 0.34518250823020935, 0.342316210269928, 0.34209349751472473, 0.3380948603153229], "val_accuracy": [0.5333333611488342, 0.6773333549499512, 0.6883333325386047, 0.7166666388511658, 0.7403333187103271, 0.7613333463668823, 0.7680000066757202, 0.781000018119812, 0.7940000295639038, 0.793666660785675, 0.8056666851043701, 0.8086666464805603, 0.8173333406448364, 0.8186666369438171, 0.8273333311080933, 0.8273333311080933, 0.8293333053588867, 0.831333339214325, 0.840666651725769, 0.8473333120346069, 0.8473333120346069, 0.8503333330154419, 0.8473333120346069, 0.8489999771118164, 0.8536666631698608, 0.859333336353302, 0.8560000061988831, 0.8543333411216736, 0.8550000190734863, 0.8613333106040955, 0.8613333106040955, 0.8613333106040955, 0.8656666874885559, 0.8673333525657654, 0.8616666793823242, 0.8679999709129333, 0.8673333525657654, 0.8676666617393494, 0.8709999918937683, 0.8693333268165588, 0.8713333606719971, 0.8709999918937683, 0.871666669845581, 0.8733333349227905, 0.871999979019165, 0.8776666522026062, 0.8763333559036255, 0.875, 0.8769999742507935, 0.8756666779518127, 0.8763333559036255]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 4, 3, 2, 2, 7, 9, 3, 7, 5, 3, 1, 6, 2, 0], [0, 1, 0, 2, 2, 0, 2, 1, 2, 3, 1, 0, 1], [87, 39, 13, 60, 41], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 0, 0, 3, 5], [0, 2, 1, 3], [16, 16], [0, 1], [5], [0], [81], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 8, 4, 1, 4, 2, 8, 3], [0, 0, 2, 3, 0, 0, 1, 1, 2, 0], [16, 99, 68, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 17, 13, 5, 6, 4, 2, 1, 2, 1, 1, 1, 22, 12, 10, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)), tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.subtract(grad, grad), tf.math.divide_no_nan(alpha, tf.math.add(tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(beta))), tf.math.sqrt(tf.math.pow(sigma, tf.math.subtract(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(alpha, beta)))))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [20, 16], [0, 1, 1], [6], [0, 3], [99], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 3, 1, 2, 1, 10, 5, 5, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 6, 0, 3, 3, 2, 2, 2, 5, 2, 8, 8, 4, 5, 4, 6], [0, 1, 0, 2, 2, 1, 1, 2, 3, 2, 2, 0], [39, 39, 33], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [8, 2, 3, 0, 3, 9], [0, 2, 0, 3], [16, 16, 3], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 3, 0, 3, 0, 4, 3, 1, 3, 0], [16, 44, 96, 72, 54, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 17, 12, 3, 9, 6, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.add(tf.math.square(tf.math.add(grad, tf.math.sqrt(grad))), tf.math.sqrt(alpha)), alpha), tf.math.pow(grad, grad))), tf.math.square(tf.math.pow(grad, tf.math.divide_no_nan(grad, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3034160137176514, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [6, 5, 3, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 0, 3, 5], [0, 2, 0, 3], [83, 16], [0, 0, 0, 1, 1], [0, 8, 7], [0, 1], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 1, 1, 1, 2, 0], [16, 99, 96, 99, 90, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 10, 6, 4, 2, 5, 3, 2, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(alpha, tf.math.subtract(alpha, alpha)))))", "other_info": {"loss": [2.3043911457061768, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}]