[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8768571615219116, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2214174270629883, 1.8642122745513916, 1.3879762887954712, 1.081619381904602, 0.9264236688613892, 0.831436812877655, 0.762763261795044, 0.7172247767448425, 0.6846124529838562, 0.6522107720375061, 0.6247906684875488, 0.6104748249053955, 0.5821636915206909, 0.5642471313476562, 0.5505855679512024, 0.5371728539466858, 0.5208476185798645, 0.5099067091941833, 0.4979138970375061, 0.4927700161933899, 0.48069918155670166, 0.4611058533191681, 0.4607364535331726, 0.4551504850387573, 0.45065081119537354, 0.4370870292186737, 0.41778144240379333, 0.4237518310546875, 0.42135968804359436, 0.40173161029815674, 0.40149784088134766, 0.40177056193351746, 0.3955439329147339, 0.38188329339027405, 0.37735849618911743, 0.37060967087745667, 0.3660736083984375, 0.3604181408882141, 0.35246726870536804, 0.3491456210613251, 0.3426850736141205, 0.3373033106327057, 0.33754298090934753, 0.3376358151435852, 0.3324022889137268, 0.324484258890152, 0.3129538595676422, 0.3126605749130249, 0.3146664500236511, 0.31053218245506287, 0.30828508734703064, 0.2943470776081085, 0.29561349749565125, 0.2957782745361328, 0.2843652069568634, 0.2797892689704895, 0.277103066444397, 0.27397558093070984, 0.274325430393219], "accuracy": [0.28080835938453674, 0.49266940355300903, 0.5688812732696533, 0.6308281421661377, 0.6700568199157715, 0.7059833407402039, 0.7294940948486328, 0.7425703406333923, 0.7560427784919739, 0.7660810947418213, 0.7781006693840027, 0.7866860628128052, 0.7936864495277405, 0.7969884872436523, 0.8054417967796326, 0.8092722296714783, 0.8109893202781677, 0.819442629814148, 0.8236692547798157, 0.8274996876716614, 0.8304054737091064, 0.841500461101532, 0.8426892161369324, 0.8401796221733093, 0.8438779711723328, 0.8498216867446899, 0.8536521196365356, 0.8516708612442017, 0.8549728989601135, 0.8531237840652466, 0.8589354157447815, 0.8614450097084045, 0.8646149635314941, 0.8639545440673828, 0.8639545440673828, 0.8648791313171387, 0.8716153502464294, 0.8716153502464294, 0.8755778670310974, 0.8791441321372986, 0.8805969953536987, 0.8819178342819214, 0.8831065893173218, 0.8812574148178101, 0.8831065893173218, 0.8842953443527222, 0.8893144726753235, 0.8870691061019897, 0.8903711438179016, 0.889578640460968, 0.8920882344245911, 0.8965790271759033, 0.8971073627471924, 0.8906353116035461, 0.897899866104126, 0.9029190540313721, 0.9008057117462158, 0.9022586345672607, 0.9017302989959717], "val_loss": [2.035054922103882, 1.5111093521118164, 1.0355738401412964, 0.8224475979804993, 0.7309706211090088, 0.6778125762939453, 0.6349261403083801, 0.6041879057884216, 0.5744319558143616, 0.554530918598175, 0.5325152277946472, 0.5201390981674194, 0.5052131414413452, 0.4962668716907501, 0.483000248670578, 0.4790175259113312, 0.46333247423171997, 0.4592841863632202, 0.45364922285079956, 0.44792070984840393, 0.44095972180366516, 0.4322637617588043, 0.42580533027648926, 0.4281540811061859, 0.4163760542869568, 0.4142591953277588, 0.4089994728565216, 0.40624484419822693, 0.4052410423755646, 0.39888259768486023, 0.3981385827064514, 0.39254993200302124, 0.3939119875431061, 0.3866395354270935, 0.3874225616455078, 0.3810443580150604, 0.3807889521121979, 0.37770020961761475, 0.3781062960624695, 0.3735532760620117, 0.36836376786231995, 0.37109285593032837, 0.3666297197341919, 0.3669695556163788, 0.3637138605117798, 0.36208516359329224, 0.3611491620540619, 0.35780471563339233, 0.3532140851020813, 0.35970425605773926, 0.3538488745689392, 0.3537590205669403, 0.35362786054611206, 0.3507220447063446, 0.3489834666252136, 0.3461804986000061, 0.34845417737960815, 0.3492479622364044, 0.34893617033958435], "val_accuracy": [0.5396666526794434, 0.652999997138977, 0.6890000104904175, 0.7129999995231628, 0.7319999933242798, 0.7423333525657654, 0.7590000033378601, 0.7689999938011169, 0.7793333530426025, 0.7910000085830688, 0.7986666560173035, 0.8063333630561829, 0.8159999847412109, 0.8173333406448364, 0.8213333487510681, 0.828000009059906, 0.8276666402816772, 0.8326666951179504, 0.8303333520889282, 0.8360000252723694, 0.8376666903495789, 0.8363333344459534, 0.843999981880188, 0.8426666855812073, 0.8423333168029785, 0.8453333377838135, 0.8476666808128357, 0.8479999899864197, 0.8516666889190674, 0.8510000109672546, 0.8489999771118164, 0.8560000061988831, 0.8526666760444641, 0.8579999804496765, 0.8560000061988831, 0.859000027179718, 0.8560000061988831, 0.859666645526886, 0.8629999756813049, 0.8550000190734863, 0.8646666407585144, 0.8659999966621399, 0.8659999966621399, 0.8653333187103271, 0.8633333444595337, 0.8663333058357239, 0.8669999837875366, 0.8673333525657654, 0.8683333396911621, 0.8690000176429749, 0.8669999837875366, 0.8656666874885559, 0.8700000047683716, 0.8713333606719971, 0.8713333606719971, 0.8706666827201843, 0.8690000176429749, 0.8713333606719971, 0.8656666874885559]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 4, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [4, 3, 1, 5, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.304072856903076, 2.3025853633880615, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09813763201236725, 0.09760929644107819, 0.09879804402589798, 0.09826971590518951, 0.09972262382507324, 0.1018359512090683], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025848865509033], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [66, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 1, 8], [0, 2, 0, 3, 0], [16, 16, 28], [0, 1], [0], [4], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [6, 1, 3, 6, 4, 1, 4, 1, 4, 2, 8], [0, 0, 3, 3, 4, 0, 3, 1, 2, 0], [9, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.sqrt(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(sigma, tf.math.subtract(sigma, grad)), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09391097724437714, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}, "mapping_values": [1, 9, 5, 4, 2, 12, 7, 5, 3, 2, 1, 1, 0, 15, 7, 8, 3], "tree_depth": 15}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [78, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 2, 3, 0, 3, 3, 9, 5, 6, 5, 8], [0, 2, 0, 3, 1, 3], [16, 16, 44], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 2, 1, 4, 2, 4, 3, 8, 1], [0, 0, 0, 3, 4, 0, 3, 3, 2, 0, 1, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.0925714299082756, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.divide_no_nan(grad, tf.math.square(alpha))))), tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.add(grad, tf.math.pow(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), sigma))), tf.math.sqrt(beta))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(alpha, alpha))", "other_info": {"loss": [2.310192108154297, 2.3102500438690186, 2.309957981109619, 2.3099594116210938, 2.310398578643799, 2.311077117919922], "accuracy": [0.09179764986038208, 0.0886276587843895, 0.09615638852119446, 0.09153348207473755, 0.09074098616838455, 0.09285431355237961], "val_loss": [2.3076956272125244, 2.3076956272125244, 2.3076956272125244, 2.3076956272125244, 2.3076956272125244, 2.3076956272125244], "val_accuracy": [0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869]}, "mapping_values": [1, 9, 5, 4, 2, 17, 11, 6, 3, 2, 1, 1, 1, 24, 12, 12, 5], "tree_depth": 20}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 8], [0, 2, 0, 3], [16, 16], [0, 1], [9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 1, 3, 4, 3, 2, 1, 7, 4, 2, 5, 3, 6, 9, 0, 4, 0, 0, 1], [0, 0, 0, 0, 0, 0, 4, 1, 2, 0, 1, 6, 7, 7, 3, 6, 5, 6, 2, 0, 6, 7], [97, 99, 96, 99, 61, 1, 63, 51, 69]], "fitness": -0.09142857044935226, "mapping_values": [1, 6, 3, 3, 1, 6, 3, 3, 2, 1, 1, 0, 1, 51, 29, 22, 9], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.subtract(tf.math.multiply(grad, alpha), tf.math.pow(beta, tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(alpha, grad), tf.math.add(tf.math.pow(grad, tf.math.add(grad, tf.math.square(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.negative(tf.math.pow(grad, grad))))))))))), beta)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.negative(tf.math.subtract(grad, grad))))", "other_info": {"loss": [2.3104944229125977, 2.3107731342315674, 2.310328960418701, 2.309706687927246, 2.3106565475463867, 2.3094027042388916], "accuracy": [0.0952318087220192, 0.08981640636920929, 0.09206181764602661, 0.09298639744520187, 0.09219389408826828, 0.09311848133802414], "val_loss": [2.3083441257476807, 2.3083441257476807, 2.3083441257476807, 2.3083441257476807, 2.3083441257476807, 2.3083441257476807], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}]