[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8597142696380615, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2242929935455322, 1.8721773624420166, 1.38692307472229, 1.090463638305664, 0.9370012283325195, 0.8282986879348755, 0.7782752513885498, 0.7259258031845093, 0.6809850931167603, 0.6551566123962402, 0.630409300327301, 0.6068570613861084, 0.5865411162376404, 0.5630447268486023, 0.5476060509681702, 0.5320210456848145, 0.5133221745491028, 0.5063673853874207, 0.4959329068660736, 0.4844370484352112, 0.47805044054985046, 0.4714280962944031, 0.4529385566711426, 0.4516128599643707, 0.44588878750801086, 0.432131826877594, 0.4150267541408539, 0.4147599935531616, 0.404935747385025, 0.40052735805511475, 0.39658764004707336, 0.3897545635700226, 0.38312116265296936, 0.37813645601272583, 0.3739908039569855, 0.36736711859703064, 0.36026501655578613, 0.3532072901725769, 0.35224583745002747, 0.34214964509010315, 0.343338280916214, 0.33745965361595154, 0.33034539222717285, 0.3236536681652069, 0.3225274085998535, 0.31099069118499756, 0.31258633732795715, 0.3141225576400757, 0.3066072463989258, 0.3026462495326996, 0.2969450056552887, 0.28990161418914795, 0.2854198217391968, 0.2823885679244995, 0.2792986035346985, 0.2734885513782501, 0.27096986770629883, 0.26444900035858154, 0.26493316888809204, 0.2543463706970215, 0.2592814564704895, 0.2486695647239685, 0.2411305457353592, 0.24165651202201843, 0.23950812220573425, 0.23579688370227814, 0.23566561937332153, 0.2291915863752365, 0.22623716294765472, 0.21754105389118195, 0.21357785165309906, 0.20969258248806, 0.21683257818222046, 0.20929059386253357], "accuracy": [0.2670717239379883, 0.4909523129463196, 0.5715228915214539, 0.6221106648445129, 0.6656980514526367, 0.7102100253105164, 0.7211728692054749, 0.7363624572753906, 0.750231146812439, 0.7635715007781982, 0.7692511081695557, 0.7786290049552917, 0.7905164361000061, 0.7951393723487854, 0.8018755912780762, 0.8099326491355896, 0.8156121969223022, 0.8186501264572144, 0.8234050869941711, 0.824329674243927, 0.8261788487434387, 0.8342359066009521, 0.8368775844573975, 0.837141752243042, 0.8388587832450867, 0.846387505531311, 0.8487650156021118, 0.8514066934585571, 0.8558974862098694, 0.8577466607093811, 0.8609166741371155, 0.8615770936012268, 0.86553955078125, 0.8643507957458496, 0.8658037185668945, 0.8671245574951172, 0.8689737319946289, 0.873860776424408, 0.8739928603172302, 0.8765024542808533, 0.8775591254234314, 0.8779553771018982, 0.8796724081039429, 0.8860124349594116, 0.884691596031189, 0.8879936337471008, 0.887201189994812, 0.887597382068634, 0.8877294659614563, 0.8894465565681458, 0.8923524022102356, 0.8956544995307922, 0.8930128216743469, 0.8973715305328369, 0.8968431949615479, 0.9008057117462158, 0.8997490406036377, 0.9052965044975281, 0.9033153057098389, 0.9080702662467957, 0.9043719172477722, 0.9089948534965515, 0.9101836085319519, 0.909259021282196, 0.9146744012832642, 0.9167877435684204, 0.9169198274612427, 0.9161273241043091, 0.9173160791397095, 0.9210143685340881, 0.9220710396766663, 0.9220710396766663, 0.9185048341751099, 0.9249768853187561], "val_loss": [2.0427346229553223, 1.5212583541870117, 1.052134394645691, 0.8511399626731873, 0.7667763829231262, 0.705402672290802, 0.6636925339698792, 0.6329260468482971, 0.6067115068435669, 0.5843911170959473, 0.5686121582984924, 0.5472723841667175, 0.5344312191009521, 0.5240081548690796, 0.508897602558136, 0.5002959966659546, 0.4906705617904663, 0.4820857644081116, 0.470994234085083, 0.4731847643852234, 0.45486128330230713, 0.45366665720939636, 0.44860872626304626, 0.44232404232025146, 0.4354979991912842, 0.43497395515441895, 0.4273426830768585, 0.41911303997039795, 0.4155429005622864, 0.41743364930152893, 0.40986180305480957, 0.4091051518917084, 0.40399861335754395, 0.40325504541397095, 0.39763811230659485, 0.3930214047431946, 0.39641064405441284, 0.3890071511268616, 0.38624998927116394, 0.3890431225299835, 0.38323286175727844, 0.3822096288204193, 0.3872089982032776, 0.38138651847839355, 0.3779464662075043, 0.3758978545665741, 0.3734585642814636, 0.37149757146835327, 0.37384411692619324, 0.3673436641693115, 0.3620673716068268, 0.3705657124519348, 0.36646607518196106, 0.3637622892856598, 0.3647219240665436, 0.3641188144683838, 0.3566960394382477, 0.3625333607196808, 0.3540642559528351, 0.36098143458366394, 0.35997024178504944, 0.35345080494880676, 0.3592911660671234, 0.35126230120658875, 0.35465970635414124, 0.3542183041572571, 0.3541402220726013, 0.35892996191978455, 0.35534387826919556, 0.35587748885154724, 0.35456714034080505, 0.3598761260509491, 0.3533305525779724, 0.355877161026001], "val_accuracy": [0.5546666383743286, 0.6499999761581421, 0.6816666722297668, 0.6993333101272583, 0.7173333168029785, 0.7436666488647461, 0.7566666603088379, 0.762333333492279, 0.7820000052452087, 0.7940000295639038, 0.800000011920929, 0.8026666641235352, 0.8149999976158142, 0.8203333616256714, 0.8183333277702332, 0.8243333101272583, 0.8263333439826965, 0.8330000042915344, 0.8339999914169312, 0.8383333086967468, 0.8446666598320007, 0.8443333506584167, 0.8446666598320007, 0.8510000109672546, 0.8516666889190674, 0.8513333201408386, 0.8503333330154419, 0.8579999804496765, 0.8606666922569275, 0.859333336353302, 0.8629999756813049, 0.8583333492279053, 0.8646666407585144, 0.862666666507721, 0.8673333525657654, 0.8640000224113464, 0.8653333187103271, 0.8690000176429749, 0.8690000176429749, 0.8706666827201843, 0.8693333268165588, 0.8713333606719971, 0.8679999709129333, 0.8713333606719971, 0.871666669845581, 0.8766666650772095, 0.8766666650772095, 0.8743333220481873, 0.8723333477973938, 0.8759999871253967, 0.8773333430290222, 0.8773333430290222, 0.8736666440963745, 0.8756666779518127, 0.8799999952316284, 0.878333330154419, 0.8773333430290222, 0.8826666474342346, 0.8833333253860474, 0.8823333382606506, 0.8820000290870667, 0.8836666941642761, 0.8843333125114441, 0.8846666812896729, 0.8833333253860474, 0.8806666731834412, 0.8859999775886536, 0.8823333382606506, 0.8866666555404663, 0.8840000033378601, 0.8856666684150696, 0.8856666684150696, 0.8859999775886536, 0.8840000033378601]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [6, 3, 4, 6, 8, 1, 4, 2, 4, 2, 8, 2, 8, 4, 9], [3, 0, 0, 4, 0, 0, 3, 1, 2, 2, 1], [16, 73, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 26, 15, 11, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.sqrt(tf.math.add(tf.math.sqrt(alpha), beta)), beta)), tf.math.pow(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 6, 3], [0, 1, 0, 2, 0], [76, 39, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5, 6, 5], [0, 2, 0, 3, 0], [16, 16, 46], [0, 0], [0, 9], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 5, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [62, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 13, 8, 5, 3, 2, 2, 0, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.square(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [2.7878808975219727, 2.9476091861724854, 2.9476354122161865, 2.9476566314697266, 2.9476730823516846, 2.9476912021636963], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.9752097129821777, 2.975241184234619, 2.9752657413482666, 2.975285530090332, 2.975301504135132, 2.9753148555755615], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 5, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [5], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [7.510156631469727, 59.16289138793945, 203.29949951171875, 492.49346923828125, 1007.586181640625, 1791.936279296875], "accuracy": [0.09998679161071777, 0.09853387624025345, 0.09985470771789551, 0.10289261490106583, 0.09774138033390045, 0.09430722147226334], "val_loss": [20.434112548828125, 95.38512420654297, 263.9480895996094, 574.6095581054688, 1075.491455078125, 1815.1473388671875], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 4, 2, 2, 2], "tree_depth": 15}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 5], [3, 2, 0, 3, 2], [16, 16], [0, 1], [0], [4], [50], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 8, 1, 2, 3, 6, 2, 8, 7, 1, 2, 7, 2, 2, 1, 5, 7, 8, 3, 2, 3, 5, 9, 8, 9, 1], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3, 5, 5, 1, 5, 2, 1, 1, 7, 4, 6, 0], [98, 99, 96, 99, 61, 1, 91, 90, 39]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 1, 2, 1, 1, 0, 54, 32, 22, 9], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(grad, beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.sqrt(tf.math.subtract(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma)))), tf.math.multiply(tf.math.divide_no_nan(alpha, beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.sqrt(sigma), tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(grad, tf.math.add(tf.math.add(tf.math.subtract(grad, alpha), tf.math.square(tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.multiply(grad, beta), alpha), tf.math.square(alpha))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), grad), grad), tf.math.subtract(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09509972482919693, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]