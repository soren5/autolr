[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.852571427822113, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221938133239746, 1.8645769357681274, 1.3794833421707153, 1.0887982845306396, 0.9265953898429871, 0.823965311050415, 0.7760056257247925, 0.7230289578437805, 0.6795939207077026, 0.6535971164703369, 0.6322818994522095, 0.6095209717750549, 0.5869813561439514, 0.5719925761222839, 0.5617292523384094, 0.5426385998725891, 0.5295280814170837, 0.5149602293968201, 0.5050808787345886, 0.48987966775894165, 0.488131046295166, 0.4650285840034485, 0.4623943567276001, 0.45086318254470825, 0.4425596594810486, 0.43561527132987976, 0.42441526055336, 0.42103052139282227, 0.42037320137023926, 0.4153286814689636, 0.4023728668689728, 0.39834877848625183, 0.39294666051864624, 0.3814990520477295, 0.36998429894447327, 0.3681553602218628, 0.3623885214328766, 0.3598329722881317, 0.34717121720314026, 0.34491148591041565, 0.3480087220668793, 0.33851438760757446, 0.3320516347885132, 0.3360731303691864, 0.32287004590034485, 0.3142563998699188, 0.32220855355262756, 0.3104346692562103, 0.313578337430954, 0.29978087544441223, 0.2908230125904083, 0.29945996403694153, 0.2896781861782074, 0.28410804271698, 0.2835157811641693, 0.2719782590866089, 0.2683326005935669, 0.2682971954345703, 0.26627063751220703, 0.26352471113204956, 0.2644101083278656, 0.26174697279930115, 0.25854259729385376, 0.2509971857070923, 0.24657700955867767, 0.24187444150447845, 0.23518837988376617, 0.23706214129924774, 0.23308619856834412, 0.23297089338302612, 0.22155386209487915, 0.23216715455055237, 0.2187664806842804, 0.21448175609111786, 0.2129814624786377, 0.20911791920661926, 0.20944352447986603, 0.20712284743785858, 0.20217204093933105, 0.19765520095825195], "accuracy": [0.2790912687778473, 0.4854048490524292, 0.5653150081634521, 0.6205257177352905, 0.6729626059532166, 0.7117950320243835, 0.724210798740387, 0.7392682433128357, 0.7497028112411499, 0.7625148296356201, 0.7697794437408447, 0.7828556299209595, 0.7861577272415161, 0.7960638999938965, 0.7955356240272522, 0.8100647330284119, 0.8129705190658569, 0.8177255392074585, 0.8181217908859253, 0.8251221776008606, 0.8260467648506165, 0.8372738361358643, 0.8391229510307312, 0.8408400416374207, 0.8446704745292664, 0.8473120927810669, 0.8544445633888245, 0.850350022315979, 0.8545766472816467, 0.8521991968154907, 0.8568220734596252, 0.8557654023170471, 0.8601241707801819, 0.8660678863525391, 0.8710870146751404, 0.8704266548156738, 0.8729361891746521, 0.870030403137207, 0.8780874609947205, 0.8831065893173218, 0.8796724081039429, 0.8838990926742554, 0.8831065893173218, 0.8800686597824097, 0.8864086866378784, 0.8858803510665894, 0.8831065893173218, 0.8928807377815247, 0.8911636471748352, 0.8918240666389465, 0.8965790271759033, 0.8957865834236145, 0.8980319499969482, 0.8977677822113037, 0.9001452922821045, 0.9025228023529053, 0.9038436412811279, 0.9083344340324402, 0.9030511379241943, 0.90423983335495, 0.9062210917472839, 0.9100515246391296, 0.9100515246391296, 0.9089948534965515, 0.9134856462478638, 0.9128252267837524, 0.9158631563186646, 0.913089394569397, 0.9146744012832642, 0.9190331697463989, 0.9189010858535767, 0.9144102334976196, 0.9210143685340881, 0.9216747879981995, 0.9222031235694885, 0.9245806336402893, 0.9253731369972229, 0.9274864792823792, 0.9277506470680237, 0.9277506470680237], "val_loss": [2.0427844524383545, 1.5140514373779297, 1.0453660488128662, 0.8505116105079651, 0.763315737247467, 0.7046700716018677, 0.664270281791687, 0.6320923566818237, 0.6048994660377502, 0.5823900699615479, 0.5692766308784485, 0.5496351718902588, 0.5396712422370911, 0.5227468609809875, 0.5107368230819702, 0.5012335777282715, 0.4954083561897278, 0.4930057227611542, 0.4757865369319916, 0.4725702404975891, 0.4592169225215912, 0.45624691247940063, 0.4480310082435608, 0.4428485035896301, 0.4372807741165161, 0.4307497441768646, 0.4232911467552185, 0.42901989817619324, 0.4264349043369293, 0.42200204730033875, 0.42188000679016113, 0.4065978229045868, 0.4055795967578888, 0.40583837032318115, 0.396304190158844, 0.396440714597702, 0.39492541551589966, 0.3925434648990631, 0.3872961401939392, 0.38522815704345703, 0.3850947320461273, 0.3808312714099884, 0.3769926428794861, 0.3827087879180908, 0.37343499064445496, 0.3738081455230713, 0.3655672073364258, 0.3725410997867584, 0.37208715081214905, 0.3665107488632202, 0.3638378083705902, 0.36461982131004333, 0.3623708188533783, 0.3602173328399658, 0.35859355330467224, 0.3587281107902527, 0.35602259635925293, 0.3583272397518158, 0.3534465432167053, 0.3532281517982483, 0.3547382056713104, 0.35604891180992126, 0.35094141960144043, 0.3547140657901764, 0.3492632508277893, 0.35066282749176025, 0.353553831577301, 0.3475452959537506, 0.34715884923934937, 0.34940803050994873, 0.3505174219608307, 0.3473469913005829, 0.3509116470813751, 0.34801051020622253, 0.3453631103038788, 0.34537631273269653, 0.35241541266441345, 0.34677863121032715, 0.3510249853134155, 0.34577611088752747], "val_accuracy": [0.54666668176651, 0.6596666574478149, 0.671999990940094, 0.6976666450500488, 0.718999981880188, 0.7383333444595337, 0.7416666746139526, 0.7636666893959045, 0.7699999809265137, 0.781333327293396, 0.7776666879653931, 0.7950000166893005, 0.7990000247955322, 0.8090000152587891, 0.8096666932106018, 0.8176666498184204, 0.8169999718666077, 0.8180000185966492, 0.831333339214325, 0.8303333520889282, 0.8379999995231628, 0.8373333215713501, 0.8396666646003723, 0.8389999866485596, 0.8420000076293945, 0.8503333330154419, 0.8493333458900452, 0.8426666855812073, 0.8489999771118164, 0.8513333201408386, 0.8496666550636292, 0.8550000190734863, 0.8543333411216736, 0.8516666889190674, 0.859000027179718, 0.8579999804496765, 0.8606666922569275, 0.8576666712760925, 0.8640000224113464, 0.8640000224113464, 0.8633333444595337, 0.8673333525657654, 0.8679999709129333, 0.8633333444595337, 0.871666669845581, 0.8713333606719971, 0.871999979019165, 0.8690000176429749, 0.871666669845581, 0.875, 0.875, 0.8740000128746033, 0.8759999871253967, 0.875333309173584, 0.8773333430290222, 0.8773333430290222, 0.8769999742507935, 0.8796666860580444, 0.8796666860580444, 0.8790000081062317, 0.8799999952316284, 0.8776666522026062, 0.8833333253860474, 0.878333330154419, 0.8806666731834412, 0.8820000290870667, 0.878000020980835, 0.8836666941642761, 0.8823333382606506, 0.8833333253860474, 0.8826666474342346, 0.8843333125114441, 0.8823333382606506, 0.8830000162124634, 0.8859999775886536, 0.8856666684150696, 0.8833333253860474, 0.8846666812896729, 0.8840000033378601, 0.8856666684150696]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 93], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [1], [60], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 0, 3, 6, 8, 1, 4, 1, 9, 2, 8], [0, 0, 0, 3, 0, 0, 3, 3, 2, 0], [16, 99, 96, 99, 9, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 0, 15, 9, 6, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 9, 1, 0, 3], [0, 1, 0, 2], [93, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 6, 9, 8, 1, 3], [0, 3, 0, 3, 2, 3], [16, 16, 40], [0, 1], [0], [0], [42], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 0, 7], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7], [16, 99, 96, 99, 27, 51]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 0, 1, 17, 11, 6, 3, 2, 1, 1, 1, 24, 13, 11, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(grad), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.subtract(tf.math.multiply(grad, beta), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma)), tf.math.negative(alpha)))), beta), tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 2, 2, 0, 3, 3, 7, 6, 1, 2, 3, 0, 0, 7, 6, 8, 3, 3, 7, 2, 4, 4, 7], [0, 1, 0, 2, 2, 0, 2, 1, 0, 2, 0, 0, 2, 3, 0, 3, 1, 2, 3], [39, 12, 46, 43, 0, 42, 86], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [93], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8, 3, 2], [0, 0, 0, 3, 0, 0, 3, 1, 2, 1, 0, 2], [16, 99, 96, 74, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.multiply(grad, grad), tf.math.negative(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.math.multiply(grad, tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(grad, tf.math.add(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), grad)))), alpha)), grad))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(sigma, alpha), beta)), alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}, "mapping_values": [1, 42, 23, 19, 7, 10, 6, 4, 2, 2, 1, 1, 1, 25, 13, 12, 6], "tree_depth": 30}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 1, 7], [0, 1, 0, 2, 3, 2, 2], [39, 94], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 4, 3, 0, 3, 5], [0, 2, 0, 3], [10, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 4, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 43, 76]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 7, 7, 2, 10, 6, 4, 2, 2, 1, 1, 0, 16, 8, 8, 5], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(grad, tf.math.add(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10355303436517715, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]