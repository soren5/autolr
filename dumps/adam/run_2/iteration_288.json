[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8697142601013184, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2234601974487305, 1.8701601028442383, 1.402533769607544, 1.0979634523391724, 0.9489020705223083, 0.841268002986908, 0.7716432213783264, 0.7278372049331665, 0.6959927678108215, 0.6683927178382874, 0.6364009976387024, 0.6145010590553284, 0.6044347882270813, 0.5901014804840088, 0.5652149319648743, 0.5519068837165833, 0.539875864982605, 0.5294575691223145, 0.5216853618621826, 0.5040405988693237, 0.5021554827690125, 0.4910202622413635, 0.4886716902256012, 0.4833718538284302, 0.4699902832508087, 0.45765048265457153, 0.4526321589946747, 0.43826234340667725, 0.43646302819252014, 0.42453640699386597, 0.42007651925086975, 0.41206854581832886, 0.41255778074264526, 0.41126748919487, 0.4043803811073303, 0.3969292938709259, 0.38620686531066895, 0.3865264058113098, 0.3863689601421356, 0.372496634721756, 0.36972326040267944, 0.36983782052993774, 0.354338139295578, 0.3541161119937897, 0.34886521100997925, 0.33696192502975464, 0.3407544791698456, 0.33629968762397766, 0.3240465521812439, 0.3205791711807251, 0.3258628249168396, 0.3148195743560791, 0.31482380628585815, 0.31574156880378723, 0.312933087348938, 0.30340293049812317, 0.29650387167930603, 0.2932586371898651, 0.2905590832233429, 0.2771884500980377, 0.27730754017829895, 0.2745233178138733, 0.27991023659706116, 0.2657548189163208, 0.2681369483470917, 0.25940757989883423], "accuracy": [0.28080835938453674, 0.48791441321372986, 0.5620129704475403, 0.6193369626998901, 0.6605468392372131, 0.702681303024292, 0.7243428826332092, 0.7359662055969238, 0.7483819723129272, 0.7548540234565735, 0.7733456492424011, 0.7779685854911804, 0.7803460359573364, 0.787082314491272, 0.7981772422790527, 0.8024039268493652, 0.8059701323509216, 0.8108572363853455, 0.8098005652427673, 0.8197067975997925, 0.8235371708869934, 0.8245938420295715, 0.8244617581367493, 0.8286884427070618, 0.8314621448516846, 0.8355567455291748, 0.8409721255302429, 0.8421608805656433, 0.848368763923645, 0.8533879518508911, 0.8488970994949341, 0.8557654023170471, 0.8474441766738892, 0.8576145768165588, 0.8568220734596252, 0.8599920868873596, 0.8585391640663147, 0.8640866279602051, 0.859199583530426, 0.8627657890319824, 0.8671245574951172, 0.8681812286376953, 0.8729361891746521, 0.8704266548156738, 0.8737286925315857, 0.8794082403182983, 0.878351628780365, 0.8802007436752319, 0.885219931602478, 0.8881257176399231, 0.8821820020675659, 0.8848236799240112, 0.884691596031189, 0.8879936337471008, 0.8883898854255676, 0.8905032277107239, 0.8910315632820129, 0.8949940800666809, 0.8953903317451477, 0.8965790271759033, 0.8988244533538818, 0.8986923694610596, 0.89988112449646, 0.9052965044975281, 0.9027869701385498, 0.9074098467826843], "val_loss": [2.0427231788635254, 1.5135020017623901, 1.040738582611084, 0.8273748159408569, 0.7390143871307373, 0.6822252869606018, 0.6438844799995422, 0.6086961030960083, 0.5834637880325317, 0.570339024066925, 0.5427660346031189, 0.5338395237922668, 0.5187284350395203, 0.5066159963607788, 0.4947155714035034, 0.48458048701286316, 0.48068517446517944, 0.4754558801651001, 0.4612691104412079, 0.4532642066478729, 0.44467219710350037, 0.4456154704093933, 0.43594247102737427, 0.43411725759506226, 0.4243665039539337, 0.4219207465648651, 0.41547948122024536, 0.41564035415649414, 0.40492919087409973, 0.4006001055240631, 0.40107083320617676, 0.3970344662666321, 0.4012070298194885, 0.39071208238601685, 0.39063823223114014, 0.3858097791671753, 0.3816629946231842, 0.382912278175354, 0.3807203769683838, 0.3761807382106781, 0.37078142166137695, 0.36835727095603943, 0.36892688274383545, 0.3647248148918152, 0.3672104477882385, 0.36133548617362976, 0.3622978627681732, 0.36019277572631836, 0.35958531498908997, 0.3657073676586151, 0.3546891212463379, 0.3552025556564331, 0.34907445311546326, 0.35254406929016113, 0.35161349177360535, 0.35300585627555847, 0.35035669803619385, 0.35015878081321716, 0.3490978181362152, 0.34830594062805176, 0.3459276258945465, 0.3483734428882599, 0.34438833594322205, 0.3469392955303192, 0.3433871269226074, 0.34772494435310364], "val_accuracy": [0.5336666703224182, 0.6656666398048401, 0.6883333325386047, 0.7149999737739563, 0.7386666536331177, 0.7523333430290222, 0.7699999809265137, 0.7743333578109741, 0.7879999876022339, 0.7916666865348816, 0.7986666560173035, 0.8059999942779541, 0.8090000152587891, 0.8133333325386047, 0.8173333406448364, 0.8233333230018616, 0.8299999833106995, 0.8299999833106995, 0.8336666822433472, 0.8343333601951599, 0.8376666903495789, 0.8363333344459534, 0.8393333554267883, 0.8416666388511658, 0.843999981880188, 0.8460000157356262, 0.8489999771118164, 0.8443333506584167, 0.8536666631698608, 0.8536666631698608, 0.8506666421890259, 0.8529999852180481, 0.8506666421890259, 0.856333315372467, 0.8569999933242798, 0.8629999756813049, 0.8556666374206543, 0.8586666584014893, 0.8606666922569275, 0.8629999756813049, 0.8640000224113464, 0.8693333268165588, 0.8650000095367432, 0.8650000095367432, 0.8679999709129333, 0.8703333139419556, 0.8669999837875366, 0.8706666827201843, 0.871666669845581, 0.8669999837875366, 0.871999979019165, 0.8733333349227905, 0.8726666569709778, 0.8740000128746033, 0.874666690826416, 0.875333309173584, 0.8743333220481873, 0.8769999742507935, 0.875333309173584, 0.8763333559036255, 0.8773333430290222, 0.875, 0.8769999742507935, 0.8759999871253967, 0.8769999742507935, 0.8773333430290222]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 6, 5, 3], [2, 1, 0, 2], [46, 59], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 8, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [6, 3, 0, 6, 8, 1, 4, 1, 4, 2, 8, 8, 4, 3], [2, 4, 0, 3, 2, 4, 3, 1, 2, 0, 6], [16, 99, 96, 99, 61, 17]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 6, 4, 2, 1, 2, 1, 1, 1, 25, 14, 11, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(grad, tf.math.divide_no_nan(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(beta, grad))), sigma)), tf.math.sqrt(tf.math.sqrt(tf.math.pow(alpha, tf.math.multiply(beta, tf.constant(1.0, shape=shape, dtype=tf.float32))))))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 5, 6, 1], [0, 1, 0, 2, 3], [39, 7], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 3], [16, 16, 28], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 1, 6, 2, 1, 3, 3, 5, 5, 8, 3, 5, 6, 6, 8, 8], [0, 0, 0, 2, 0, 0, 3, 1, 2, 0, 4, 4, 3, 2, 6, 3, 7, 7, 1], [16, 99, 96, 99, 39, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 10, 6, 4, 3, 2, 1, 1, 1, 45, 26, 19, 6], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(alpha, tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), grad))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(beta, tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.add(tf.math.sqrt(tf.math.subtract(alpha, beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(grad, tf.math.add(tf.math.subtract(tf.math.multiply(grad, tf.math.multiply(tf.math.square(sigma), tf.math.square(tf.math.sqrt(tf.math.multiply(beta, tf.math.square(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.sqrt(sigma)), tf.math.sqrt(grad)))))))), grad), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 8], [0, 1, 0, 2], [39, 39], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [0, 2, 2, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0], [6, 3, 6, 6, 8, 1, 4, 1, 4, 2, 8, 3, 2, 9, 5, 1, 8, 9], [0, 0, 0, 3, 0, 4, 4, 4, 2, 0, 6], [16, 99, 96, 99, 61, 1, 82]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 2, 2, 1, 1, 1, 2, 1, 1, 1, 29, 18, 11, 7], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.math.add(tf.math.sqrt(sigma), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.add(grad, grad))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), beta)), tf.math.square(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 4, 5, 1, 9, 7, 8, 0], [0, 1, 0, 2, 3, 3], [39, 39, 76], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5, 6, 2, 8, 0, 5, 1, 4, 9, 1, 9, 9], [0, 2, 0, 3, 5, 1], [16, 16, 85, 16, 23], [0, 1], [0], [0], [51], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 38, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 12, 6, 3, 23, 17, 6, 5, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.square(tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(grad), grad))), tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.square(tf.math.subtract(grad, tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}]