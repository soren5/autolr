[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8694285750389099, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222485542297363, 1.8554580211639404, 1.384687900543213, 1.077659010887146, 0.9319342374801636, 0.8380786180496216, 0.7743169069290161, 0.7214440107345581, 0.6738705635070801, 0.6536112427711487, 0.6279636025428772, 0.6043443083763123, 0.5830364227294922, 0.5637738704681396, 0.5506576299667358, 0.5342540144920349, 0.5217106342315674, 0.5040934085845947, 0.49670150876045227, 0.47941845655441284, 0.47666528820991516, 0.47274985909461975, 0.4543954133987427, 0.44245806336402893, 0.4433845281600952, 0.42543962597846985, 0.4283929169178009, 0.4209256172180176, 0.41590383648872375, 0.40595999360084534, 0.3927706778049469, 0.3960602283477783, 0.3944344222545624, 0.37922772765159607, 0.36702466011047363, 0.3663421869277954, 0.3563714027404785, 0.3564280867576599, 0.35022926330566406, 0.35618337988853455, 0.34143850207328796, 0.3353310227394104, 0.32461002469062805, 0.32703131437301636, 0.31847792863845825, 0.3115077614784241, 0.3173876702785492, 0.3069829046726227, 0.3058089017868042, 0.30342450737953186, 0.2984321415424347, 0.2972944378852844, 0.28858378529548645, 0.2876240611076355, 0.2806888520717621, 0.27585187554359436, 0.27231115102767944, 0.27228763699531555, 0.2688848674297333, 0.26339635252952576, 0.25972601771354675], "accuracy": [0.2802800238132477, 0.49412229657173157, 0.5609562993049622, 0.6267336010932922, 0.6672830581665039, 0.6948884129524231, 0.7210407853126526, 0.7357020378112793, 0.7530049085617065, 0.7604015469551086, 0.7711002230644226, 0.7800818681716919, 0.7873464822769165, 0.8000264167785645, 0.8049134612083435, 0.8112534880638123, 0.8145555257797241, 0.8168009519577026, 0.8240655064582825, 0.8255184292793274, 0.8252542614936829, 0.8335754871368408, 0.8341038227081299, 0.8379341959953308, 0.8417646288871765, 0.8471800088882446, 0.8467837572097778, 0.8524633646011353, 0.8510104417800903, 0.8552370667457581, 0.8564258217811584, 0.8601241707801819, 0.8541803956031799, 0.8636903762817383, 0.8676528930664062, 0.8659358024597168, 0.8720116019248962, 0.8705587387084961, 0.8765024542808533, 0.8701624870300293, 0.8787478804588318, 0.8798044919967651, 0.8848236799240112, 0.8828424215316772, 0.8841632604598999, 0.8848236799240112, 0.8865407705307007, 0.8928807377815247, 0.8897107243537903, 0.8906353116035461, 0.8932769894599915, 0.8976356983184814, 0.8963148593902588, 0.8994848728179932, 0.8985602855682373, 0.9013340473175049, 0.9027869701385498, 0.9017302989959717, 0.9022586345672607, 0.9066173434257507, 0.9070135951042175], "val_loss": [2.037170171737671, 1.5004355907440186, 1.037680983543396, 0.8360744714736938, 0.7485975623130798, 0.6947242021560669, 0.6546391844749451, 0.6161983013153076, 0.5914055109024048, 0.5731196999549866, 0.5533580780029297, 0.5334117412567139, 0.523819088935852, 0.5080011487007141, 0.5037242770195007, 0.4910564720630646, 0.4776843190193176, 0.47755566239356995, 0.4714255630970001, 0.4578006863594055, 0.4480475187301636, 0.4482848346233368, 0.44281014800071716, 0.4348744750022888, 0.4332778751850128, 0.4238452613353729, 0.42210373282432556, 0.41980770230293274, 0.41618695855140686, 0.40881651639938354, 0.4266040027141571, 0.40509098768234253, 0.4030580222606659, 0.40032461285591125, 0.3960840106010437, 0.39946648478507996, 0.3914336860179901, 0.39271920919418335, 0.39736658334732056, 0.3888522982597351, 0.3866395652294159, 0.3822174072265625, 0.3813113570213318, 0.3808923065662384, 0.3813626170158386, 0.37613940238952637, 0.37932562828063965, 0.3795212507247925, 0.3768983483314514, 0.3731708228588104, 0.3727855086326599, 0.3735746741294861, 0.3728806972503662, 0.3647342920303345, 0.36854031682014465, 0.36507919430732727, 0.3683817982673645, 0.3686397969722748, 0.37030282616615295, 0.3657049536705017, 0.36989420652389526], "val_accuracy": [0.531000018119812, 0.6623333096504211, 0.6783333420753479, 0.7053333520889282, 0.7276666760444641, 0.7453333139419556, 0.7523333430290222, 0.765333354473114, 0.7720000147819519, 0.793666660785675, 0.7986666560173035, 0.8086666464805603, 0.8073333501815796, 0.8146666884422302, 0.8140000104904175, 0.8190000057220459, 0.824999988079071, 0.8220000267028809, 0.8236666917800903, 0.8323333263397217, 0.8339999914169312, 0.8343333601951599, 0.8333333134651184, 0.8416666388511658, 0.8396666646003723, 0.8410000205039978, 0.8460000157356262, 0.8443333506584167, 0.8476666808128357, 0.8496666550636292, 0.8413333296775818, 0.8483333587646484, 0.8516666889190674, 0.8560000061988831, 0.8569999933242798, 0.8529999852180481, 0.8579999804496765, 0.856333315372467, 0.8510000109672546, 0.859333336353302, 0.859666645526886, 0.8619999885559082, 0.859666645526886, 0.8629999756813049, 0.862666666507721, 0.8629999756813049, 0.8610000014305115, 0.8600000143051147, 0.8669999837875366, 0.8650000095367432, 0.8656666874885559, 0.8646666407585144, 0.8659999966621399, 0.8700000047683716, 0.8696666955947876, 0.871999979019165, 0.8666666746139526, 0.8673333525657654, 0.8696666955947876, 0.8683333396911621, 0.8669999837875366]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 1, 3, 0, 3], [1, 1, 0, 2], [13, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [1, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 1, 9, 2, 4, 3, 8, 9], [0, 0, 0, 3, 0, 0, 3, 4, 2, 1], [16, 99, 96, 99, 61, 1, 95]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 10, 6, 4, 1, 2, 1, 1, 0, 19, 12, 7, 7], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), sigma), tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [41], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 5, 1, 4, 1, 4, 2, 8, 0, 9], [0, 0, 0, 3, 0, 0, 3, 4, 2, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 1, 0, 1, 1, 22, 13, 9, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.sqrt(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), grad), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 2, 3, 0, 3, 3, 5, 5, 4, 6, 9, 1, 8, 7, 9], [0, 1, 0, 2, 2, 2, 3], [39, 39, 53, 24], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 0, 8], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [48], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 8, 4, 2, 5], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 21, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 15, 7, 4, 12, 8, 4, 2, 2, 1, 1, 0, 15, 8, 7, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.square(grad)), tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.sqrt(grad))), tf.math.add(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.negative(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [8, 6, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [1, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 99], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [3, 3, 3, 6, 8, 1, 4, 1, 3, 2, 8, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 1], [72, 99, 96, 99, 61, 1]], "fitness": -0.09142857044935226, "mapping_values": [1, 9, 5, 4, 2, 8, 4, 4, 2, 2, 1, 1, 1, 23, 12, 11, 6], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(beta, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.pow(alpha, beta)))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.3094940185546875, 2.3110909461975098, 2.3108131885528564, 2.308980703353882, 2.3107855319976807, 2.310065269470215], "accuracy": [0.09642054885625839, 0.09021265059709549, 0.09153348207473755, 0.09945846349000931, 0.08902391046285629, 0.09074098616838455], "val_loss": [2.309030771255493, 2.309030771255493, 2.309030771255493, 2.309030771255493, 2.309030771255493, 2.309030771255493], "val_accuracy": [0.08533333241939545, 0.08533333241939545, 0.08533333241939545, 0.08533333241939545, 0.08533333241939545, 0.08533333241939545]}}]