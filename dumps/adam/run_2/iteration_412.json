[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8539999723434448, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222196578979492, 1.8656115531921387, 1.390387773513794, 1.1008790731430054, 0.9283249974250793, 0.8524589538574219, 0.7792012095451355, 0.7410133481025696, 0.6931205987930298, 0.6700500845909119, 0.6366627812385559, 0.6138756275177002, 0.6060037612915039, 0.5752815008163452, 0.5613375902175903, 0.552253246307373, 0.539269208908081, 0.5215029120445251, 0.5134534239768982, 0.5022106766700745, 0.4887095093727112, 0.4844769835472107, 0.4777875244617462, 0.4616267681121826, 0.4510440230369568, 0.45161882042884827, 0.43931838870048523, 0.42939475178718567, 0.42383790016174316, 0.42427533864974976, 0.41657528281211853, 0.4089576005935669, 0.4045199453830719, 0.3957085907459259, 0.3993537425994873, 0.3805958330631256, 0.37332141399383545, 0.36494216322898865, 0.3641955554485321, 0.3599306344985962, 0.35671642422676086, 0.3503253161907196, 0.3467940390110016, 0.33939802646636963, 0.3383762240409851, 0.3340109884738922, 0.3276522159576416, 0.3297542929649353, 0.320260614156723, 0.3196214735507965, 0.3084491491317749, 0.30959588289260864, 0.3041912913322449, 0.29822278022766113, 0.3000374436378479, 0.29101938009262085, 0.286451131105423, 0.2856406569480896, 0.2806542217731476, 0.2817932665348053, 0.27818700671195984, 0.27581092715263367, 0.2704402208328247, 0.2639434039592743, 0.2667560875415802, 0.2566915452480316, 0.2485150396823883, 0.25410932302474976, 0.24693448841571808, 0.23720909655094147, 0.24332772195339203, 0.23227880895137787, 0.23495495319366455, 0.22797079384326935, 0.22628097236156464, 0.22053655982017517, 0.21816816926002502, 0.21717892587184906, 0.2227044552564621, 0.20519886910915375], "accuracy": [0.27341169118881226, 0.48329150676727295, 0.5606921315193176, 0.6172236204147339, 0.6662263870239258, 0.6925109028816223, 0.7205125093460083, 0.7320036888122559, 0.7445515990257263, 0.7549861073493958, 0.7705719470977783, 0.772288978099823, 0.7763835787773132, 0.7891955971717834, 0.7992339134216309, 0.7965922355651855, 0.8005547523498535, 0.8098005652427673, 0.8146876096725464, 0.8219521641731262, 0.8224804997444153, 0.8231409192085266, 0.8293488025665283, 0.832650899887085, 0.8380662798881531, 0.8380662798881531, 0.8428213000297546, 0.8449346423149109, 0.8459912538528442, 0.8449346423149109, 0.8519350290298462, 0.8510104417800903, 0.8519350290298462, 0.8549728989601135, 0.856689989566803, 0.8623695969581604, 0.8642187118530273, 0.8687095642089844, 0.8677849769592285, 0.8693699836730957, 0.8728041052818298, 0.8713511824607849, 0.8733324408531189, 0.8761062026023865, 0.8755778670310974, 0.876370370388031, 0.8809932470321655, 0.8824461698532104, 0.8860124349594116, 0.8833707571029663, 0.8877294659614563, 0.887597382068634, 0.8912957310676575, 0.8911636471748352, 0.8905032277107239, 0.893541157245636, 0.894069492816925, 0.8947299122810364, 0.8957865834236145, 0.8949940800666809, 0.897899866104126, 0.8997490406036377, 0.8992207050323486, 0.9027869701385498, 0.9008057117462158, 0.9085986018180847, 0.9100515246391296, 0.9015982151031494, 0.9100515246391296, 0.9146744012832642, 0.9089948534965515, 0.9152027368545532, 0.9129573106765747, 0.9158631563186646, 0.9207502603530884, 0.9203540086746216, 0.9165235757827759, 0.9192973375320435, 0.9158631563186646, 0.9252410531044006], "val_loss": [2.0389926433563232, 1.514658808708191, 1.0471686124801636, 0.8501449227333069, 0.7603891491889954, 0.7007468938827515, 0.6564462780952454, 0.6239312887191772, 0.5955403447151184, 0.5694882869720459, 0.5521942377090454, 0.533911943435669, 0.5157463550567627, 0.5057364702224731, 0.4954083263874054, 0.48195400834083557, 0.47264355421066284, 0.46146532893180847, 0.45594286918640137, 0.448338121175766, 0.44511473178863525, 0.43472811579704285, 0.4316354990005493, 0.4201580882072449, 0.41823071241378784, 0.42052507400512695, 0.40405216813087463, 0.40482035279273987, 0.3986452519893646, 0.3998004198074341, 0.3923305571079254, 0.39004573225975037, 0.38577136397361755, 0.3832565248012543, 0.38157808780670166, 0.3779037594795227, 0.37567877769470215, 0.3695217967033386, 0.3657667636871338, 0.3679446578025818, 0.3628937900066376, 0.3587836027145386, 0.3577788770198822, 0.3598981201648712, 0.35689568519592285, 0.35197022557258606, 0.35324618220329285, 0.3524179756641388, 0.34684377908706665, 0.3479224741458893, 0.3470035493373871, 0.3487713932991028, 0.33951011300086975, 0.3428598940372467, 0.33541202545166016, 0.3403134047985077, 0.3387732207775116, 0.3393723666667938, 0.3333715796470642, 0.33977967500686646, 0.3276522159576416, 0.3356820344924927, 0.3350057303905487, 0.3338972330093384, 0.3328486382961273, 0.33653122186660767, 0.3297525644302368, 0.3273376524448395, 0.32607775926589966, 0.3275849223136902, 0.3249076008796692, 0.3304145932197571, 0.3196643590927124, 0.326527863740921, 0.32728877663612366, 0.32550156116485596, 0.31989866495132446, 0.32203221321105957, 0.32280194759368896, 0.32359492778778076], "val_accuracy": [0.49566665291786194, 0.6520000100135803, 0.6893333196640015, 0.7110000252723694, 0.7333333492279053, 0.7473333477973938, 0.7570000290870667, 0.7743333578109741, 0.7803333401679993, 0.7903333306312561, 0.7960000038146973, 0.8106666803359985, 0.8173333406448364, 0.8230000138282776, 0.8270000219345093, 0.8323333263397217, 0.8353333473205566, 0.8396666646003723, 0.8383333086967468, 0.8489999771118164, 0.8410000205039978, 0.8496666550636292, 0.8546666502952576, 0.8583333492279053, 0.8576666712760925, 0.8543333411216736, 0.8629999756813049, 0.8650000095367432, 0.8636666536331177, 0.859000027179718, 0.8646666407585144, 0.8650000095367432, 0.8706666827201843, 0.8690000176429749, 0.8600000143051147, 0.871666669845581, 0.8733333349227905, 0.8743333220481873, 0.8773333430290222, 0.874666690826416, 0.8773333430290222, 0.8796666860580444, 0.8766666650772095, 0.875, 0.8763333559036255, 0.8806666731834412, 0.8816666603088379, 0.8796666860580444, 0.8863333463668823, 0.8793333172798157, 0.8806666731834412, 0.8816666603088379, 0.8866666555404663, 0.8833333253860474, 0.8870000243186951, 0.8843333125114441, 0.8843333125114441, 0.8846666812896729, 0.8883333206176758, 0.8849999904632568, 0.8896666765213013, 0.887333333492279, 0.8859999775886536, 0.8870000243186951, 0.8899999856948853, 0.8893333077430725, 0.8899999856948853, 0.8886666893959045, 0.8916666507720947, 0.8913333415985107, 0.8889999985694885, 0.8899999856948853, 0.8926666378974915, 0.8916666507720947, 0.8943333625793457, 0.890999972820282, 0.893666684627533, 0.8913333415985107, 0.8920000195503235, 0.8926666378974915]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 93], [0, 1], [8], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 1, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.math.subtract(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 16, 8, 8, 3], "tree_depth": 13}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 22], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 4, 3, 4, 2, 0], [39, 73, 96, 87, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), grad), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 1, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 4, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 7, 6, 8], [0, 2, 7, 7], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 7, 3, 7, 8, 4, 4, 8, 3, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 6, 2, 2, 4, 7], [16, 99, 96, 76, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 2, 9, 5, 4, 1, 36, 20, 16, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.sqrt(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.sqrt(tf.math.add(alpha, beta)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(grad, grad), tf.math.sqrt(tf.math.pow(beta, tf.math.pow(tf.math.sqrt(tf.math.multiply(beta, tf.math.sqrt(grad))), grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 7, 2, 2, 9, 1], [0, 1, 2, 2, 2, 1, 0], [39, 39, 15], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 3, 4, 2, 6, 9, 4], [0, 2, 0, 3, 2, 2, 1, 1], [16, 16, 11], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 4, 9, 6, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 4], [16, 99, 96, 99, 61, 1, 64]], "fitness": -0.0925714299082756, "mapping_values": [1, 17, 10, 7, 3, 19, 11, 8, 3, 2, 1, 1, 1, 26, 14, 12, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.math.subtract(grad, alpha)))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.pow(tf.math.add(tf.math.divide_no_nan(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), beta), tf.math.pow(alpha, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), beta), tf.math.divide_no_nan(tf.math.pow(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), grad), grad)))", "other_info": {"loss": [2.308985710144043, 2.3079488277435303, 2.3083322048187256, 2.306596040725708, 2.3079984188079834, 2.306410789489746], "accuracy": [0.09509972482919693, 0.09219389408826828, 0.09047681838274002, 0.09972262382507324, 0.0936468094587326, 0.09734513610601425], "val_loss": [2.30635666847229, 2.306342363357544, 2.306314706802368, 2.306274652481079, 2.3062222003936768, 2.3061583042144775], "val_accuracy": [0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918]}}]