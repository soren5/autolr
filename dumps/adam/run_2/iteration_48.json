[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8591428399085999, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222784996032715, 1.8696343898773193, 1.3974473476409912, 1.0844206809997559, 0.9338468909263611, 0.8449205160140991, 0.7684133052825928, 0.72765052318573, 0.6955480575561523, 0.6499308943748474, 0.6349541544914246, 0.6094108819961548, 0.5900970101356506, 0.5645869970321655, 0.5624986886978149, 0.5408746600151062, 0.5315398573875427, 0.5221171975135803, 0.4941450357437134, 0.5014839768409729, 0.48022687435150146, 0.476272851228714, 0.4707005023956299, 0.45814910531044006, 0.4528840482234955, 0.44702211022377014, 0.441459596157074, 0.4421789050102234, 0.42959535121917725, 0.4154980182647705, 0.4130072295665741, 0.41196876764297485, 0.403302937746048, 0.3968864381313324, 0.3796429932117462, 0.38656285405158997, 0.37480783462524414, 0.3752920925617218, 0.36916348338127136, 0.3631401062011719, 0.3501422107219696, 0.3598920404911041, 0.34632399678230286, 0.34976717829704285, 0.3341127038002014, 0.33450058102607727, 0.33196762204170227, 0.33080196380615234, 0.3192206621170044, 0.3203175961971283, 0.3126401901245117, 0.3111822307109833, 0.30080798268318176, 0.2996750473976135, 0.2931739389896393, 0.2906014919281006, 0.2924611270427704, 0.28062114119529724, 0.2808108329772949, 0.27092424035072327, 0.2706775665283203, 0.26572301983833313, 0.25968825817108154, 0.26349425315856934, 0.2620770037174225, 0.2523488402366638, 0.2521357536315918, 0.23502136766910553, 0.24607181549072266, 0.2449869066476822, 0.2355949431657791, 0.22676563262939453, 0.22594422101974487, 0.22572261095046997], "accuracy": [0.2849029302597046, 0.4916127324104309, 0.5744287371635437, 0.6269977688789368, 0.6704530715942383, 0.7046625018119812, 0.7169462442398071, 0.7349095344543457, 0.7425703406333923, 0.7627789974212646, 0.7692511081695557, 0.774270236492157, 0.7847048044204712, 0.7964601516723633, 0.7928939461708069, 0.8024039268493652, 0.8090080618858337, 0.8169330358505249, 0.822348415851593, 0.8182538747787476, 0.8261788487434387, 0.8249900937080383, 0.8302733898162842, 0.834632158279419, 0.8337075710296631, 0.8387266993522644, 0.8418967127799988, 0.8411042094230652, 0.847840428352356, 0.8506141901016235, 0.8514066934585571, 0.8533879518508911, 0.8556333184242249, 0.8581429123878479, 0.8650112152099609, 0.8614450097084045, 0.8676528930664062, 0.8681812286376953, 0.8697662353515625, 0.8735966086387634, 0.874389111995697, 0.8709549307823181, 0.8746532797813416, 0.8775591254234314, 0.8800686597824097, 0.8794082403182983, 0.8828424215316772, 0.8795403242111206, 0.884691596031189, 0.887597382068634, 0.8911636471748352, 0.8894465565681458, 0.8927486538887024, 0.8951261639595032, 0.8953903317451477, 0.8972394466400146, 0.893541157245636, 0.8989565372467041, 0.9010698795318604, 0.9066173434257507, 0.9012019634246826, 0.9075419306755066, 0.9068815112113953, 0.9071456789970398, 0.9059569239616394, 0.9075419306755066, 0.913089394569397, 0.9167877435684204, 0.9121648669242859, 0.9113723635673523, 0.91559898853302, 0.9189010858535767, 0.9198256731033325, 0.9179764986038208], "val_loss": [2.0373730659484863, 1.5165255069732666, 1.0423752069473267, 0.8311334848403931, 0.7421220541000366, 0.6818048357963562, 0.6340619325637817, 0.6045557260513306, 0.5788614749908447, 0.5484985113143921, 0.5328057408332825, 0.5228628516197205, 0.5085196495056152, 0.49359822273254395, 0.4870154559612274, 0.4729745388031006, 0.4643734395503998, 0.4530920386314392, 0.45620450377464294, 0.44352585077285767, 0.4436790645122528, 0.42906278371810913, 0.4302166700363159, 0.4215254783630371, 0.4172602891921997, 0.40874820947647095, 0.4080069065093994, 0.40882375836372375, 0.3980734944343567, 0.4014081358909607, 0.39867526292800903, 0.38792434334754944, 0.3822310268878937, 0.37874728441238403, 0.3795301616191864, 0.3739328682422638, 0.37357935309410095, 0.37031811475753784, 0.368146151304245, 0.36983147263526917, 0.3635692596435547, 0.3613992929458618, 0.3570816218852997, 0.36641764640808105, 0.3567112684249878, 0.35541337728500366, 0.3527311086654663, 0.35197144746780396, 0.34869009256362915, 0.3463447391986847, 0.3453231751918793, 0.3462974727153778, 0.3445371985435486, 0.3516905903816223, 0.3411465585231781, 0.3393867313861847, 0.3475360870361328, 0.3489174544811249, 0.34280186891555786, 0.3341582417488098, 0.33747848868370056, 0.33686432242393494, 0.3419021666049957, 0.3367789685726166, 0.3330051600933075, 0.3359640836715698, 0.33339765667915344, 0.34145107865333557, 0.3292523920536041, 0.3308649957180023, 0.33251726627349854, 0.33300793170928955, 0.33167368173599243, 0.3295866847038269], "val_accuracy": [0.5429999828338623, 0.6613333225250244, 0.6816666722297668, 0.7110000252723694, 0.7350000143051147, 0.749666690826416, 0.765333354473114, 0.7766666412353516, 0.7889999747276306, 0.7953333258628845, 0.8066666722297668, 0.8113333582878113, 0.815666675567627, 0.8180000185966492, 0.8206666707992554, 0.8263333439826965, 0.8266666531562805, 0.8336666822433472, 0.8330000042915344, 0.8336666822433472, 0.8389999866485596, 0.8426666855812073, 0.8393333554267883, 0.847000002861023, 0.843999981880188, 0.8493333458900452, 0.8460000157356262, 0.8486666679382324, 0.8560000061988831, 0.8503333330154419, 0.8526666760444641, 0.8629999756813049, 0.8600000143051147, 0.8610000014305115, 0.8619999885559082, 0.862666666507721, 0.8650000095367432, 0.8633333444595337, 0.8643333315849304, 0.8653333187103271, 0.8690000176429749, 0.8656666874885559, 0.8713333606719971, 0.8653333187103271, 0.871666669845581, 0.8730000257492065, 0.8669999837875366, 0.8706666827201843, 0.8700000047683716, 0.875333309173584, 0.8756666779518127, 0.8790000081062317, 0.875333309173584, 0.8743333220481873, 0.8759999871253967, 0.8809999823570251, 0.874666690826416, 0.8773333430290222, 0.8776666522026062, 0.8820000290870667, 0.8769999742507935, 0.8806666731834412, 0.8809999823570251, 0.878333330154419, 0.8849999904632568, 0.8809999823570251, 0.8833333253860474, 0.8803333044052124, 0.8856666684150696, 0.8849999904632568, 0.8856666684150696, 0.8856666684150696, 0.8843333125114441, 0.8836666941642761]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [54, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 4, 6, 6, 8, 6, 0, 2, 7, 7, 8, 8, 8, 4, 0, 0], [0, 1, 7, 3, 4, 2, 5, 3, 7], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 3, 3, 9, 6, 4, 0, 9, 3, 4], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 6, 6, 6, 0], [16, 99, 96, 99, 61, 1, 87, 81, 25]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 25, 16, 9, 1, 33, 19, 14, 9], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.negative(grad))), sigma)), tf.math.add(tf.math.add(tf.math.add(tf.math.sqrt(grad), tf.math.sqrt(tf.math.sqrt(tf.math.pow(tf.math.negative(tf.math.negative(beta)), grad)))), sigma), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.multiply(tf.math.multiply(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.pow(tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.pow(grad, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 1, 0, 3], [16, 16], [0, 1], [0], [0], [49], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5, 6, 1, 5, 1, 3, 8, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 4, 3, 3, 3, 7], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 34, 19, 15, 6], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma)), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), tf.math.square(tf.math.subtract(alpha, beta))))), tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(sigma)), tf.math.divide_no_nan(sigma, sigma)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 4, 1, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 2], [16, 78, 96, 62, 61, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.subtract(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma), alpha), tf.math.sqrt(beta)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 77], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 3, 3, 5], [0, 2, 0, 3, 4], [16, 16], [1, 1], [9], [0], [55], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 6, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 69, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 10, 5, 5, 2, 1, 0, 1, 1, 10, 5, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [50.112491607666016, 5021.1064453125, 82426.0, 574410.875, 2541119.0, 8376447.0], "accuracy": [0.09576013684272766, 0.09787346422672272, 0.09325055778026581, 0.09589222073554993, 0.0956280529499054, 0.10381719470024109], "val_loss": [383.4451599121094, 17737.560546875, 187613.125, 1018529.375, 3808344.75, 11223086.0], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]