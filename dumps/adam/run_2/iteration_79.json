[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8608571290969849, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2221691608428955, 1.8640450239181519, 1.3839977979660034, 1.0796923637390137, 0.9223722219467163, 0.8281868100166321, 0.7541348338127136, 0.7199984788894653, 0.6869391202926636, 0.6516181826591492, 0.6344113349914551, 0.6055625677108765, 0.587887167930603, 0.5745000243186951, 0.555636465549469, 0.5450829863548279, 0.5359164476394653, 0.5108681321144104, 0.5031526684761047, 0.4924505650997162, 0.48830416798591614, 0.46832266449928284, 0.4705137610435486, 0.45543885231018066, 0.45009246468544006, 0.4375426173210144, 0.43594861030578613, 0.42754262685775757, 0.41510871052742004, 0.41599318385124207, 0.40312808752059937, 0.39385151863098145, 0.38899219036102295, 0.3840954899787903, 0.3734627664089203, 0.3788975775241852, 0.37189367413520813, 0.3634394705295563, 0.3595660328865051, 0.3480148911476135, 0.35185375809669495, 0.3446970582008362, 0.3481440544128418], "accuracy": [0.2619204819202423, 0.4917448163032532, 0.566239595413208, 0.6305639743804932, 0.6687359809875488, 0.7020208835601807, 0.7210407853126526, 0.7372870445251465, 0.7500990629196167, 0.7593448758125305, 0.7658169269561768, 0.7741381525993347, 0.7828556299209595, 0.7853652238845825, 0.7964601516723633, 0.7948752045631409, 0.8058380484580994, 0.8095363974571228, 0.8165367841720581, 0.8181217908859253, 0.8207634687423706, 0.829216718673706, 0.8325188159942627, 0.8366134166717529, 0.8356888294219971, 0.8384625315666199, 0.8432175517082214, 0.8469158411026001, 0.8495575189590454, 0.8498216867446899, 0.8531237840652466, 0.8588033318519592, 0.8615770936012268, 0.8607845902442932, 0.8618412613868713, 0.8623695969581604, 0.8615770936012268, 0.8665962219238281, 0.8688416481018066, 0.8755778670310974, 0.8741249442100525, 0.8776912093162537, 0.8683133125305176], "val_loss": [2.0357131958007812, 1.5140715837478638, 1.042307734489441, 0.8368817567825317, 0.7385779619216919, 0.6823647618293762, 0.6388935446739197, 0.6020601987838745, 0.5810898542404175, 0.5558797717094421, 0.5404024124145508, 0.5227369666099548, 0.5110371112823486, 0.49392715096473694, 0.49204182624816895, 0.4756731688976288, 0.4641469717025757, 0.4575745463371277, 0.44777733087539673, 0.4409988224506378, 0.4374621510505676, 0.4333750009536743, 0.4276858866214752, 0.4201447665691376, 0.4163627028465271, 0.41563883423805237, 0.4038908779621124, 0.3988618850708008, 0.39572879672050476, 0.39576032757759094, 0.3868127465248108, 0.3830697536468506, 0.38344958424568176, 0.3780326843261719, 0.376777708530426, 0.3759731948375702, 0.372673898935318, 0.36783885955810547, 0.36598843336105347, 0.3705553114414215, 0.3661956787109375, 0.3606034219264984, 0.3597944676876068], "val_accuracy": [0.49300000071525574, 0.6439999938011169, 0.6800000071525574, 0.7046666741371155, 0.7289999723434448, 0.749666690826416, 0.7563333511352539, 0.7696666717529297, 0.7786666750907898, 0.7893333435058594, 0.7960000038146973, 0.8076666593551636, 0.8096666932106018, 0.8140000104904175, 0.8146666884422302, 0.824999988079071, 0.8296666741371155, 0.8320000171661377, 0.8363333344459534, 0.8416666388511658, 0.840666651725769, 0.8426666855812073, 0.8463333249092102, 0.8523333072662354, 0.8483333587646484, 0.8476666808128357, 0.8583333492279053, 0.8573333621025085, 0.856333315372467, 0.859000027179718, 0.8613333106040955, 0.8583333492279053, 0.8690000176429749, 0.8640000224113464, 0.8653333187103271, 0.8663333058357239, 0.8646666407585144, 0.8703333139419556, 0.8700000047683716, 0.862333357334137, 0.8673333525657654, 0.8700000047683716, 0.8700000047683716]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 0, 3, 0, 1], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 8, 7], [1, 2, 0, 3, 1], [16, 16], [0, 1], [9], [0], [47], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 4, 3, 6, 8, 1, 4, 1, 4, 1, 8, 8, 7, 2, 6, 8, 6], [0, 0, 3, 3, 0, 0, 4, 1, 4, 0, 0, 7, 7, 3], [16, 99, 96, 98, 77, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.square(alpha), beta)), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma))), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(grad, tf.math.subtract(tf.math.sqrt(alpha), tf.math.sqrt(grad))), tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.divide_no_nan(grad, sigma)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}, "mapping_values": [1, 5, 3, 2, 1, 13, 8, 5, 1, 1, 1, 0, 1, 31, 17, 14, 6], "tree_depth": 17}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 9, 3, 0, 3, 5], [0, 2, 0, 3], [16, 27], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 8, 5, 4, 6, 3, 1, 6, 3, 5, 1, 8, 2, 2, 8, 8, 2, 2, 8, 4, 1, 7], [0, 0, 3, 7, 0, 1, 3, 5, 7, 0, 5, 0, 6, 7, 5, 0], [99, 20, 16, 65, 73, 58], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 3, 3, 1, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 86, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 2, 0, 1, 39, 23, 16, 6, 21, 11, 10, 6], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), sigma), tf.math.subtract(grad, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, sigma))), grad), tf.math.add(grad, tf.math.sqrt(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))), grad), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.subtract(grad, tf.math.add(grad, grad)), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(alpha)))), beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 26], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 6, 5], [0, 0, 0, 3], [8, 86, 24], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 0, 3, 6, 8, 1, 4, 1, 4, 2, 3], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 3, 1, 0, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 2, 3, 0, 3, 2, 9], [0, 2, 0, 2], [39, 24, 37], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 28], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 5, 8, 5, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 4], [16, 99, 69, 99, 61, 1]], "fitness": -0.09114285558462143, "mapping_values": [1, 11, 7, 4, 3, 6, 3, 3, 1, 2, 1, 1, 1, 16, 9, 7, 4], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.square(grad)))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.308878183364868, 2.309272289276123, 2.309628486633301, 2.311063528060913, 2.309535503387451, 2.309565782546997, 2.3109312057495117, 2.3117496967315674, 2.3103902339935303, 2.3102712631225586, 2.3092048168182373, 2.3109664916992188], "accuracy": [0.0936468094587326, 0.09377889335155487, 0.09377889335155487, 0.08928807079792023, 0.09549596905708313, 0.08809932321310043, 0.09457138925790787, 0.09060890227556229, 0.09047681838274002, 0.09113723784685135, 0.09787346422672272, 0.09179764986038208], "val_loss": [2.30894136428833, 2.3090381622314453, 2.30911922454834, 2.3092257976531982, 2.3093082904815674, 2.3093879222869873, 2.30948543548584, 2.309584379196167, 2.309683084487915, 2.3097543716430664, 2.3098199367523193, 2.309905529022217], "val_accuracy": [0.09366666525602341, 0.09333333373069763, 0.09333333373069763, 0.09300000220537186, 0.09399999678134918, 0.09399999678134918, 0.09466666728258133, 0.09433333575725555, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133]}}]