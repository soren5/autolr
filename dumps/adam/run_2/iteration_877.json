[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8602856993675232, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2228260040283203, 1.8685646057128906, 1.3978749513626099, 1.1011052131652832, 0.9339871406555176, 0.8473339676856995, 0.7751882672309875, 0.7191053628921509, 0.6901920437812805, 0.6571451425552368, 0.6291496753692627, 0.6078207492828369, 0.5849847793579102, 0.5661773085594177, 0.5623235702514648, 0.5432809591293335, 0.5322205424308777, 0.5214584469795227, 0.5108658075332642, 0.5068110227584839, 0.4907976984977722, 0.4829605221748352, 0.4752011299133301, 0.4636331796646118, 0.4545976221561432, 0.44707462191581726, 0.4325377643108368, 0.4290259778499603, 0.422186017036438, 0.4218541979789734, 0.41341760754585266, 0.40331315994262695, 0.3992759883403778, 0.39359885454177856, 0.385932058095932, 0.3845808804035187, 0.38132810592651367, 0.3729742467403412, 0.36573198437690735, 0.366667777299881, 0.3582424819469452, 0.35200464725494385, 0.3485383689403534, 0.3394211232662201, 0.3387865722179413, 0.33314061164855957, 0.32474565505981445, 0.3133449852466583, 0.312063992023468, 0.3117601275444031, 0.3079301118850708, 0.298088014125824], "accuracy": [0.270109623670578, 0.48831066489219666, 0.5674283504486084, 0.618280291557312, 0.6674151420593262, 0.7047945857048035, 0.7220974564552307, 0.7432307600975037, 0.7539294958114624, 0.7709681391716003, 0.7744023203849792, 0.7798177003860474, 0.7911768555641174, 0.7972526550292969, 0.7960638999938965, 0.8050455451011658, 0.8108572363853455, 0.8145555257797241, 0.8185180425643921, 0.8202351331710815, 0.8260467648506165, 0.8305375576019287, 0.8352925777435303, 0.837537944316864, 0.8391229510307312, 0.8412362933158875, 0.8490291833877563, 0.8494254350662231, 0.8510104417800903, 0.8495575189590454, 0.8581429123878479, 0.857218325138092, 0.8595958352088928, 0.8601241707801819, 0.8651432991027832, 0.8651432991027832, 0.8623695969581604, 0.8693699836730957, 0.873860776424408, 0.8693699836730957, 0.872407853603363, 0.8766345381736755, 0.873860776424408, 0.8795403242111206, 0.8767666220664978, 0.8833707571029663, 0.8778232932090759, 0.8905032277107239, 0.889050304889679, 0.8877294659614563, 0.887201189994812, 0.8930128216743469], "val_loss": [2.03835391998291, 1.517026662826538, 1.0397415161132812, 0.8215062618255615, 0.7292351722717285, 0.672797679901123, 0.623068630695343, 0.5926544666290283, 0.5627385973930359, 0.5468690395355225, 0.5228209495544434, 0.5106537938117981, 0.49369311332702637, 0.4872184097766876, 0.47041958570480347, 0.4638659656047821, 0.4571019411087036, 0.44567590951919556, 0.44210395216941833, 0.4319414794445038, 0.42422306537628174, 0.4224467873573303, 0.4146078824996948, 0.4112318456172943, 0.4068887531757355, 0.4049493670463562, 0.3976478576660156, 0.3926553428173065, 0.3865374028682709, 0.38502803444862366, 0.37970787286758423, 0.37779751420021057, 0.3751506805419922, 0.3704041838645935, 0.3672350347042084, 0.36820006370544434, 0.3621559143066406, 0.36234408617019653, 0.35697290301322937, 0.35706666111946106, 0.35718071460723877, 0.35160303115844727, 0.35110020637512207, 0.34907668828964233, 0.346965491771698, 0.3491406738758087, 0.344399094581604, 0.34352564811706543, 0.3399750888347626, 0.3419114649295807, 0.33808472752571106, 0.3428299129009247], "val_accuracy": [0.527999997138977, 0.6639999747276306, 0.6890000104904175, 0.7179999947547913, 0.7406666874885559, 0.7583333253860474, 0.7726666927337646, 0.777999997138977, 0.7946666479110718, 0.8080000281333923, 0.8096666932106018, 0.8180000185966492, 0.8256666660308838, 0.8299999833106995, 0.8343333601951599, 0.8363333344459534, 0.8373333215713501, 0.8486666679382324, 0.8450000286102295, 0.8456666469573975, 0.8510000109672546, 0.8550000190734863, 0.8556666374206543, 0.8546666502952576, 0.8613333106040955, 0.8640000224113464, 0.8653333187103271, 0.862333357334137, 0.8659999966621399, 0.8700000047683716, 0.8706666827201843, 0.8693333268165588, 0.8769999742507935, 0.8763333559036255, 0.871999979019165, 0.878333330154419, 0.8796666860580444, 0.8799999952316284, 0.8836666941642761, 0.8806666731834412, 0.8826666474342346, 0.8823333382606506, 0.8830000162124634, 0.887666642665863, 0.8833333253860474, 0.8846666812896729, 0.8889999985694885, 0.8870000243186951, 0.8883333206176758, 0.8886666893959045, 0.8849999904632568, 0.8863333463668823]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 6, 6, 3], [0, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 2, 3, 9, 8, 5], [0, 2, 0, 3], [16, 26, 70], [0, 1], [0], [0], [24], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 3, 4, 1, 2, 2, 4, 8, 1, 3], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5, 0, 0], [16, 99, 96, 99, 61, 1, 85, 76]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 8, 5, 3, 3, 2, 1, 1, 1, 27, 14, 13, 8], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), beta), tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.pow(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(sigma, alpha), tf.math.add(tf.math.pow(beta, tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 0], [1, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [8, 2, 3, 0, 3, 5, 0, 6, 2, 5], [0, 2, 0, 3, 4, 2], [16, 16], [0, 1], [0], [0], [39], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 3, 2, 8, 1, 9, 1, 7, 9, 4, 1, 9, 7, 4], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0, 7, 3, 2, 5], [28, 16, 96, 99, 61, 1, 5, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 16, 10, 6, 2, 2, 1, 1, 1, 35, 21, 14, 8], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(tf.math.square(grad), grad), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha), tf.math.subtract(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), beta), tf.math.pow(tf.math.subtract(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, sigma)))), tf.math.pow(beta, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 8, 3], [0, 1, 0, 2], [37, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 1, 3, 5], [0, 2, 0, 3, 3], [16, 16], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 6, 5, 1, 8, 6, 8, 6, 7, 8, 6, 6, 0, 8, 1, 3, 2, 6, 4, 2, 1, 1, 9, 4, 2, 3, 6, 0, 8, 1, 6, 1, 0, 7, 1, 9], [0, 5, 6, 1, 5, 7, 2, 4, 2, 5, 1, 3, 4, 7, 5, 2, 6, 4, 2, 7, 0, 4, 0], [99, 37, 37, 99, 96], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 9, 3, 6, 8, 9, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 55, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 11, 6, 5, 2, 59, 36, 23, 5, 8, 6, 2, 4], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.sqrt(tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(grad, grad), tf.math.sqrt(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.subtract(alpha, grad))), tf.math.multiply(tf.math.add(grad, tf.math.divide_no_nan(beta, tf.math.pow(tf.math.add(tf.math.subtract(grad, tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.pow(beta, grad))), alpha), tf.math.add(sigma, tf.math.multiply(tf.math.divide_no_nan(grad, grad), tf.math.negative(grad)))))), tf.math.sqrt(tf.math.subtract(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.negative(tf.math.add(grad, grad)), tf.math.subtract(beta, grad)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))), tf.constant(1.0, shape=shape, dtype=tf.float32))))), grad)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.304173469543457, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 1, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 6, 3, 5], [0, 2, 0, 3, 2], [16, 16], [0, 0, 0, 1, 1], [0, 5, 3], [0, 3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 2, 4, 2, 9], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [75, 99, 96, 99, 61, 3]], "fitness": -0.08971428871154785, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)))), alpha), tf.math.add(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3103697299957275, 2.310819149017334, 2.3106765747070312, 2.3097405433654785, 2.309508800506592, 2.309628963470459], "accuracy": [0.08942015469074249, 0.08889182657003403, 0.09245806187391281, 0.09589222073554993, 0.09351472556591034, 0.09457138925790787], "val_loss": [2.3092665672302246, 2.3092665672302246, 2.3092665672302246, 2.3092665672302246, 2.3092665672302246, 2.3092665672302246], "val_accuracy": [0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862]}, "mapping_values": [1, 9, 5, 4, 1, 11, 6, 5, 2, 5, 3, 2, 1, 20, 11, 9, 6], "tree_depth": 18}]