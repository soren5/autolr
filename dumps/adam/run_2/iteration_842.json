[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8694285750389099, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2196245193481445, 1.8543068170547485, 1.3784763813018799, 1.0850164890289307, 0.9369155168533325, 0.8330684304237366, 0.7659224271774292, 0.7183459401130676, 0.6801304221153259, 0.6553618311882019, 0.6309301257133484, 0.6032075881958008, 0.5871025323867798, 0.5663806200027466, 0.5492333769798279, 0.5364913940429688, 0.5180948376655579, 0.5079716444015503, 0.4988240599632263, 0.48577773571014404, 0.4797317683696747, 0.4740232229232788, 0.45526835322380066, 0.4532149136066437, 0.44298818707466125, 0.4399380087852478, 0.4296678304672241, 0.42091110348701477, 0.4206032156944275, 0.4108218848705292, 0.40769267082214355, 0.40078580379486084, 0.39990586042404175, 0.3830448389053345, 0.3807045519351959, 0.3725339472293854, 0.36465319991111755, 0.36663830280303955, 0.35613131523132324, 0.35185450315475464, 0.34768763184547424, 0.3437856435775757, 0.34663885831832886, 0.3284662663936615, 0.3329511284828186, 0.333665668964386, 0.32705777883529663, 0.31344667077064514, 0.31361714005470276, 0.3078843057155609, 0.3058199882507324, 0.30514025688171387, 0.2926039397716522, 0.29522427916526794, 0.2905256450176239, 0.2812206447124481, 0.2782752513885498, 0.2776542007923126, 0.2745201289653778, 0.273072212934494, 0.2653656303882599, 0.26184937357902527, 0.26037833094596863, 0.2606554329395294, 0.25372397899627686, 0.25060412287712097, 0.24435563385486603, 0.2384381741285324, 0.23524980247020721, 0.2379610687494278, 0.23156589269638062, 0.22776231169700623, 0.22320455312728882], "accuracy": [0.2798837721347809, 0.48870691657066345, 0.5670320987701416, 0.6161669492721558, 0.6647734642028809, 0.7017567157745361, 0.7259278893470764, 0.7477215528488159, 0.7594769597053528, 0.7613261342048645, 0.7683265209197998, 0.7858935594558716, 0.7903843522071838, 0.800818920135498, 0.8037247657775879, 0.8054417967796326, 0.8137630224227905, 0.8195747137069702, 0.8156121969223022, 0.8272355198860168, 0.8278959393501282, 0.829216718673706, 0.8339717388153076, 0.8345000743865967, 0.8444063067436218, 0.8433496356010437, 0.8475762605667114, 0.8508783578872681, 0.8481045961380005, 0.850350022315979, 0.8544445633888245, 0.8598600029945374, 0.8584070801734924, 0.8627657890319824, 0.8610487580299377, 0.8664641380310059, 0.8705587387084961, 0.8685774803161621, 0.8705587387084961, 0.8722757697105408, 0.8712190985679626, 0.8754457831382751, 0.8779553771018982, 0.8831065893173218, 0.878879964351654, 0.8792761564254761, 0.8833707571029663, 0.8887861371040344, 0.889050304889679, 0.8891823887825012, 0.889050304889679, 0.8865407705307007, 0.8914278149604797, 0.8914278149604797, 0.8932769894599915, 0.9001452922821045, 0.8976356983184814, 0.900409460067749, 0.9025228023529053, 0.8988244533538818, 0.9017302989959717, 0.9030511379241943, 0.9056927561759949, 0.9045040011405945, 0.9105798602104187, 0.909259021282196, 0.9091269373893738, 0.910711944103241, 0.9152027368545532, 0.9126931428909302, 0.9167877435684204, 0.9162594079971313, 0.9224672913551331], "val_loss": [2.036328077316284, 1.5026311874389648, 1.0342772006988525, 0.8252758979797363, 0.745146632194519, 0.6810075044631958, 0.6383445858955383, 0.6044111847877502, 0.5777336359024048, 0.5578410029411316, 0.536889910697937, 0.5197678804397583, 0.5117262005805969, 0.49627912044525146, 0.4841011166572571, 0.47772741317749023, 0.46260425448417664, 0.4613894522190094, 0.44412821531295776, 0.44358134269714355, 0.4391725957393646, 0.4273970425128937, 0.420212984085083, 0.4148619472980499, 0.4111862778663635, 0.41223371028900146, 0.4042211174964905, 0.39679422974586487, 0.39451858401298523, 0.39107218384742737, 0.3841647803783417, 0.389360636472702, 0.37821027636528015, 0.3848349153995514, 0.3708328306674957, 0.372865229845047, 0.37137308716773987, 0.3687935769557953, 0.3642844557762146, 0.35916438698768616, 0.3555324971675873, 0.3557533323764801, 0.3497675359249115, 0.355785071849823, 0.3493025004863739, 0.3487177789211273, 0.3443235754966736, 0.344635546207428, 0.3400737941265106, 0.3398361802101135, 0.341692179441452, 0.33610308170318604, 0.34172144532203674, 0.33514222502708435, 0.3303605616092682, 0.33175408840179443, 0.3321629762649536, 0.3293100893497467, 0.32682353258132935, 0.3289858400821686, 0.32827216386795044, 0.32705599069595337, 0.32581669092178345, 0.3252633213996887, 0.32522156834602356, 0.32309114933013916, 0.32288849353790283, 0.3194570243358612, 0.3242044746875763, 0.3204689919948578, 0.32133179903030396, 0.3164927065372467, 0.3178507685661316], "val_accuracy": [0.5206666588783264, 0.6579999923706055, 0.684333324432373, 0.7153333425521851, 0.734666645526886, 0.7596666812896729, 0.768666684627533, 0.781000018119812, 0.7910000085830688, 0.7923333048820496, 0.7973333597183228, 0.812666654586792, 0.8180000185966492, 0.8276666402816772, 0.8199999928474426, 0.8296666741371155, 0.8383333086967468, 0.8396666646003723, 0.843999981880188, 0.8410000205039978, 0.8393333554267883, 0.8536666631698608, 0.8529999852180481, 0.8566666841506958, 0.8586666584014893, 0.8539999723434448, 0.8576666712760925, 0.8640000224113464, 0.862333357334137, 0.8583333492279053, 0.8690000176429749, 0.8653333187103271, 0.8666666746139526, 0.8650000095367432, 0.8726666569709778, 0.8686666488647461, 0.8736666440963745, 0.8643333315849304, 0.874666690826416, 0.8756666779518127, 0.8786666393280029, 0.8766666650772095, 0.8790000081062317, 0.8806666731834412, 0.8826666474342346, 0.8813333511352539, 0.8816666603088379, 0.8853333592414856, 0.8853333592414856, 0.8846666812896729, 0.8840000033378601, 0.8859999775886536, 0.8856666684150696, 0.8806666731834412, 0.8859999775886536, 0.8883333206176758, 0.8866666555404663, 0.8883333206176758, 0.8866666555404663, 0.8849999904632568, 0.8899999856948853, 0.890333354473114, 0.8870000243186951, 0.8846666812896729, 0.8923333287239075, 0.8889999985694885, 0.8889999985694885, 0.8946666717529297, 0.8893333077430725, 0.8870000243186951, 0.8933333158493042, 0.8946666717529297, 0.8889999985694885]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 2, 6, 0, 3], [1, 1, 0, 2], [1, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 0], [16, 16], [0, 0, 1, 1], [5, 4], [0, 5], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 95, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 7, 4, 3, 1, 4, 2, 2, 1, 16, 8, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [9, 4, 3, 0, 3], [0, 1, 0, 2], [39, 80], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 0, 3, 4, 9], [0, 2, 0, 3, 0], [16, 16, 4, 76], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 3, 4, 2, 8, 3], [1, 0, 0, 3, 0, 0, 3, 1, 2, 0, 5], [16, 99, 2, 99, 61, 98]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 15, 10, 5, 4, 2, 1, 1, 1, 23, 12, 11, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.multiply(beta, tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))))), grad), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(alpha, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.multiply(alpha, beta))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 5], [1, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [62, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 4, 1, 4, 2, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0, 3], [72, 73, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 6, 3, 3, 2, 1, 0, 1, 1, 22, 11, 11, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, alpha))), tf.math.pow(tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 4, 8, 8, 2, 0, 1], [0, 2, 0, 2, 0, 0, 1], [39, 39, 81, 84], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 3, 3, 0, 3, 5], [0, 2, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 2, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 11, 7, 4, 2, 1, 1, 1, 2, 1, 1, 1, 10, 5, 5, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), alpha))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.3041703701019287, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09708096832036972, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}]