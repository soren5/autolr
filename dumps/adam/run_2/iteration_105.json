[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8714285492897034, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2236549854278564, 1.8677269220352173, 1.3943818807601929, 1.0893582105636597, 0.9363909959793091, 0.8402366042137146, 0.7769249081611633, 0.7286984920501709, 0.6894192695617676, 0.6551332473754883, 0.6330930590629578, 0.6230044364929199, 0.5894445776939392, 0.5685442090034485, 0.5503128170967102, 0.5415642857551575, 0.5345616936683655, 0.5274037718772888, 0.5094505548477173, 0.5081877112388611, 0.49046823382377625, 0.4886833727359772, 0.466601699590683, 0.464950829744339, 0.456428200006485, 0.4440540373325348, 0.4451865553855896, 0.4331768751144409, 0.42327240109443665, 0.4193795621395111, 0.41425222158432007, 0.401738703250885, 0.39789777994155884, 0.3952130973339081, 0.38980886340141296, 0.379955530166626, 0.37359604239463806, 0.37375351786613464, 0.36962029337882996, 0.35998594760894775, 0.35553526878356934, 0.3510069251060486, 0.34188881516456604, 0.3347180187702179, 0.32762235403060913, 0.32334229350090027, 0.3260847330093384, 0.316747784614563, 0.3146553635597229, 0.31719496846199036, 0.30668821930885315, 0.3083299398422241, 0.3017202913761139, 0.29548144340515137], "accuracy": [0.27420419454574585, 0.4842160940170288, 0.5649187564849854, 0.6198652982711792, 0.6649055480957031, 0.700171709060669, 0.7209087014198303, 0.7297582626342773, 0.7515519857406616, 0.7629110813140869, 0.7695152759552002, 0.7771760821342468, 0.7836481332778931, 0.7965922355651855, 0.7968564033508301, 0.8049134612083435, 0.8031964302062988, 0.8064984679222107, 0.8145555257797241, 0.813498854637146, 0.8251221776008606, 0.8208954930305481, 0.833179235458374, 0.8323867321014404, 0.8366134166717529, 0.837141752243042, 0.8396512866020203, 0.8438779711723328, 0.8461233377456665, 0.8491612672805786, 0.8469158411026001, 0.8561616539955139, 0.8532558679580688, 0.8561616539955139, 0.8627657890319824, 0.8638224601745605, 0.8623695969581604, 0.8659358024597168, 0.8685774803161621, 0.871879518032074, 0.870030403137207, 0.8745211958885193, 0.8799365758895874, 0.878879964351654, 0.8825782537460327, 0.8820499181747437, 0.8787478804588318, 0.8828424215316772, 0.8870691061019897, 0.8850878477096558, 0.8887861371040344, 0.8856161832809448, 0.8873332738876343, 0.8927486538887024], "val_loss": [2.0445566177368164, 1.5224138498306274, 1.0518659353256226, 0.8473544716835022, 0.7597925066947937, 0.7082213759422302, 0.6605866551399231, 0.6218162178993225, 0.592491626739502, 0.5738400220870972, 0.5567114949226379, 0.5343427062034607, 0.5180048942565918, 0.505631685256958, 0.4897376298904419, 0.4835229516029358, 0.473981112241745, 0.46563050150871277, 0.46544864773750305, 0.45547500252723694, 0.450461208820343, 0.4396759569644928, 0.42629939317703247, 0.42660146951675415, 0.4179435968399048, 0.41203996539115906, 0.4074706733226776, 0.4020858108997345, 0.40168625116348267, 0.3913024067878723, 0.3916838467121124, 0.38625508546829224, 0.38614630699157715, 0.3859424591064453, 0.37631872296333313, 0.37888211011886597, 0.37180379033088684, 0.3690284490585327, 0.371075838804245, 0.3680743873119354, 0.3650626242160797, 0.362736314535141, 0.3635387420654297, 0.3610246479511261, 0.3573465049266815, 0.3527675271034241, 0.35477083921432495, 0.3527511656284332, 0.3500957787036896, 0.3474845290184021, 0.349414587020874, 0.34860852360725403, 0.34284913539886475, 0.34637361764907837], "val_accuracy": [0.5130000114440918, 0.6460000276565552, 0.6753333210945129, 0.6936666369438171, 0.7166666388511658, 0.7423333525657654, 0.7536666393280029, 0.7670000195503235, 0.781000018119812, 0.7873333096504211, 0.7856666445732117, 0.8029999732971191, 0.8056666851043701, 0.8109999895095825, 0.8256666660308838, 0.8270000219345093, 0.828000009059906, 0.8356666564941406, 0.8263333439826965, 0.8309999704360962, 0.8396666646003723, 0.8393333554267883, 0.8443333506584167, 0.843666672706604, 0.8496666550636292, 0.8476666808128357, 0.8496666550636292, 0.8513333201408386, 0.8546666502952576, 0.8566666841506958, 0.8573333621025085, 0.8573333621025085, 0.8546666502952576, 0.8569999933242798, 0.8610000014305115, 0.8583333492279053, 0.8663333058357239, 0.8636666536331177, 0.8650000095367432, 0.862333357334137, 0.8653333187103271, 0.8686666488647461, 0.8700000047683716, 0.8733333349227905, 0.8693333268165588, 0.8693333268165588, 0.8690000176429749, 0.8706666827201843, 0.8759999871253967, 0.874666690826416, 0.8723333477973938, 0.8736666440963745, 0.875, 0.8743333220481873]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 8, 0, 9], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1], [0, 2, 3, 4, 3, 5, 6, 5, 6, 5, 0], [3, 2, 3, 3, 3, 1, 5], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 3, 6, 8, 1, 2, 1, 4, 0, 8], [0, 0, 1, 3, 0, 0, 3, 1, 2, 0], [16, 69, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 3, 2, 0, 18, 11, 7, 0, 2, 1, 1, 1, 12, 6, 6, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.sqrt(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(grad, beta), tf.math.multiply(grad, tf.math.square(grad))), tf.math.divide_no_nan(grad, tf.math.square(tf.math.divide_no_nan(alpha, tf.math.square(tf.math.negative(grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3033230304718018, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1, 1], [3], [0, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 2, 4, 2, 8, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [6, 99, 96, 99, 61, 47]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 3, 1, 2, 1, 22, 12, 10, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.negative(alpha)))), beta), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [6, 2, 3, 0, 3], [1, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 2, 5], [0, 2, 0, 3, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 6], [0, 0, 4, 3, 0, 0, 3, 1, 0, 0], [33, 61, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 1, 13, 8, 5, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 2, 6, 6, 1, 7, 7], [0, 1, 3, 3, 5, 1, 2, 2, 1, 2], [16, 16], [0, 0, 0, 1], [0, 8, 5], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 8, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 5]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 21, 11, 10, 1, 4, 3, 1, 1, 17, 9, 8, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, tf.math.add(grad, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, beta)), beta), tf.math.add(alpha, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.sqrt(grad))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]