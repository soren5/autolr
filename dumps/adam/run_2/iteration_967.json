[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8631428480148315, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221869468688965, 1.8687037229537964, 1.3899441957473755, 1.087914228439331, 0.9229084253311157, 0.8217806220054626, 0.7695481181144714, 0.71526038646698, 0.6863254904747009, 0.6441205739974976, 0.6260889768600464, 0.599972128868103, 0.5879552364349365, 0.566136360168457, 0.5496694445610046, 0.5349888205528259, 0.5212002992630005, 0.5103794932365417, 0.5000734329223633, 0.4893408715724945, 0.481402724981308, 0.4772292375564575, 0.4610472619533539, 0.45281800627708435, 0.44097429513931274, 0.4397943615913391, 0.4353756010532379, 0.42539840936660767, 0.4136737883090973, 0.42024657130241394, 0.39708200097084045, 0.3945320248603821, 0.38387516140937805, 0.38458961248397827, 0.3777693808078766, 0.37167438864707947, 0.3628609776496887, 0.3580363094806671, 0.35592761635780334, 0.35052967071533203, 0.3457387685775757, 0.3382275402545929, 0.3412858843803406, 0.33106690645217896, 0.33115360140800476, 0.3302907347679138, 0.31430870294570923, 0.31817230582237244, 0.31112566590309143, 0.30643925070762634, 0.30280381441116333, 0.2931406497955322, 0.2923303246498108, 0.2897999882698059, 0.28222572803497314, 0.2809593081474304, 0.2790154814720154, 0.2715543508529663], "accuracy": [0.27420419454574585, 0.49029189348220825, 0.5711266398429871, 0.625148594379425, 0.6670188903808594, 0.7078325152397156, 0.7269845604896545, 0.7416457533836365, 0.7544577717781067, 0.7701756954193115, 0.7779685854911804, 0.7886672616004944, 0.7868181467056274, 0.7993659973144531, 0.8025360107421875, 0.8045172095298767, 0.8133667707443237, 0.8175934553146362, 0.8215559124946594, 0.8274996876716614, 0.829216718673706, 0.83119797706604, 0.8347642421722412, 0.844010055065155, 0.8469158411026001, 0.8467837572097778, 0.845859169960022, 0.8508783578872681, 0.8549728989601135, 0.8541803956031799, 0.8582749962806702, 0.8590674996376038, 0.8689737319946289, 0.863558292388916, 0.8679170608520508, 0.868049144744873, 0.8704266548156738, 0.8704266548156738, 0.8742570281028748, 0.8790120482444763, 0.8775591254234314, 0.8840311765670776, 0.8784837126731873, 0.8820499181747437, 0.8794082403182983, 0.8833707571029663, 0.8878615498542786, 0.8835028409957886, 0.8869370222091675, 0.8907673954963684, 0.8926165699958801, 0.8960506916046143, 0.8924844861030579, 0.8960506916046143, 0.8997490406036377, 0.9014661312103271, 0.8993527889251709, 0.9033153057098389], "val_loss": [2.038726329803467, 1.5126627683639526, 1.0335872173309326, 0.8251665234565735, 0.7361837029457092, 0.6809898018836975, 0.6418497562408447, 0.6100128293037415, 0.5812505483627319, 0.5605008006095886, 0.5467676520347595, 0.5293121337890625, 0.5167669057846069, 0.5034024119377136, 0.495362251996994, 0.4870026111602783, 0.4743732213973999, 0.46493789553642273, 0.4582481384277344, 0.45843765139579773, 0.4530161917209625, 0.44366735219955444, 0.44001471996307373, 0.43022140860557556, 0.4244188368320465, 0.42425963282585144, 0.421947181224823, 0.41044604778289795, 0.4135432243347168, 0.39973706007003784, 0.4011099338531494, 0.39447689056396484, 0.39289700984954834, 0.38905343413352966, 0.3853738307952881, 0.3793785870075226, 0.37785106897354126, 0.3774241805076599, 0.3717954158782959, 0.3718995749950409, 0.3676888942718506, 0.3698297441005707, 0.3646042048931122, 0.364468514919281, 0.36055606603622437, 0.3602873682975769, 0.3581928014755249, 0.36394116282463074, 0.3559606075286865, 0.3535718619823456, 0.3496628403663635, 0.3538036346435547, 0.3476622700691223, 0.34765955805778503, 0.34442293643951416, 0.3453206419944763, 0.3431850075721741, 0.3481690287590027], "val_accuracy": [0.5683333277702332, 0.6620000004768372, 0.6853333115577698, 0.7066666483879089, 0.734000027179718, 0.7486666440963745, 0.7613333463668823, 0.7716666460037231, 0.7833333611488342, 0.7916666865348816, 0.7983333468437195, 0.8086666464805603, 0.809333324432373, 0.8180000185966492, 0.815666675567627, 0.824999988079071, 0.8303333520889282, 0.8320000171661377, 0.8323333263397217, 0.8326666951179504, 0.8330000042915344, 0.843666672706604, 0.8389999866485596, 0.8460000157356262, 0.8476666808128357, 0.8453333377838135, 0.8513333201408386, 0.8529999852180481, 0.8553333282470703, 0.8569999933242798, 0.8556666374206543, 0.8610000014305115, 0.8616666793823242, 0.8619999885559082, 0.8653333187103271, 0.8669999837875366, 0.8646666407585144, 0.8653333187103271, 0.8693333268165588, 0.8653333187103271, 0.8659999966621399, 0.8700000047683716, 0.8709999918937683, 0.8723333477973938, 0.8683333396911621, 0.8743333220481873, 0.8726666569709778, 0.8679999709129333, 0.8726666569709778, 0.8730000257492065, 0.8756666779518127, 0.8693333268165588, 0.8799999952316284, 0.8766666650772095, 0.878000020980835, 0.8763333559036255, 0.8756666779518127, 0.8763333559036255]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 4, 2, 8], [0, 0, 3, 1, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, alpha))))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 9, 5, 4, 1, 11, 7, 4, 2, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 17}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3, 6, 3, 6, 1, 1, 0, 1, 4, 4, 3, 6, 3, 0, 4, 8, 3, 2, 8, 7, 0, 2, 1, 5, 5, 4, 5, 3, 8, 8, 4, 7, 2], [0, 1, 0, 2, 0, 3, 1, 2, 0, 1, 3, 0, 3, 1, 2, 3, 2, 3, 3, 3, 2, 3, 1, 2, 0, 3], [39, 39, 78, 33, 98, 7], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 4, 5], [0, 2, 1, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 4, 4, 8, 4, 9], [4, 0, 0, 3, 0, 0, 0, 1, 2, 0, 4, 4, 4], [16, 99, 96, 99, 61, 1, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 63, 37, 26, 6, 6, 3, 3, 1, 2, 1, 1, 1, 29, 16, 13, 7], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.subtract(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.negative(tf.math.subtract(grad, alpha)), tf.math.pow(grad, tf.math.pow(tf.math.multiply(tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.pow(tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.sqrt(alpha), grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.math.square(grad)))), grad))), tf.math.square(tf.math.pow(tf.math.square(tf.math.multiply(grad, grad)), grad))), tf.math.sqrt(grad)))))), tf.math.sqrt(tf.math.pow(tf.math.add(tf.math.add(grad, alpha), grad), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), alpha), tf.math.add(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.pow(tf.math.sqrt(tf.math.pow(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 2, 3, 6, 3, 6, 7, 5, 0], [0, 1, 0, 2, 3, 3, 2], [39, 39], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 4, 8, 1, 8, 2, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 94, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 2, 10, 6, 4, 2, 2, 1, 1, 1, 13, 7, 6, 5], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.divide_no_nan(tf.math.add(tf.math.square(grad), grad), tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3034920692443848, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 1, 5], [0, 2, 0, 3], [63, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 3, 4, 2, 8, 8, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 30, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), beta), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.math.sqrt(grad)), beta))), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 23, 13, 10, 6], "tree_depth": 18}]