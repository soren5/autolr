[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.850857138633728, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222121238708496, 1.856917142868042, 1.378032922744751, 1.0918216705322266, 0.9369615316390991, 0.8453011512756348, 0.7688472270965576, 0.7247706055641174, 0.6777739524841309, 0.6596412658691406, 0.6339734792709351, 0.6165016293525696, 0.6076294183731079, 0.5712767839431763, 0.5657873749732971, 0.5467261672019958, 0.5269186496734619, 0.5268198251724243, 0.510538637638092, 0.5039806962013245, 0.49171605706214905, 0.4786445200443268, 0.47285762429237366, 0.4660913050174713, 0.4514549672603607, 0.447228342294693, 0.4326971471309662, 0.42570018768310547, 0.42125195264816284, 0.41520822048187256, 0.4073847532272339, 0.40479081869125366, 0.3925526440143585, 0.38242727518081665, 0.38373905420303345, 0.37951841950416565, 0.3794093430042267, 0.3655000925064087, 0.36100274324417114, 0.354186475276947, 0.35242804884910583, 0.3447129726409912, 0.3448452353477478, 0.3333756923675537, 0.33222922682762146, 0.32371821999549866, 0.327096551656723, 0.32219597697257996, 0.3099941909313202, 0.30920323729515076, 0.3065973222255707, 0.300528883934021, 0.2909575402736664, 0.28840452432632446, 0.2865283787250519, 0.2812272608280182, 0.2780988812446594, 0.28397998213768005, 0.2734716236591339, 0.25993812084198, 0.26606303453445435, 0.2621098458766937, 0.25083789229393005, 0.2561354637145996, 0.24649715423583984, 0.2409251630306244, 0.23768791556358337, 0.23584136366844177, 0.23422883450984955, 0.23126903176307678, 0.22971680760383606, 0.21968330442905426, 0.21973823010921478, 0.22403381764888763, 0.2253418266773224, 0.20770345628261566], "accuracy": [0.2763175368309021, 0.49531105160713196, 0.5733720660209656, 0.6161669492721558, 0.6646413803100586, 0.6940959095954895, 0.7220974564552307, 0.7342491149902344, 0.7541936039924622, 0.7602694630622864, 0.7730814814567566, 0.7758552432060242, 0.7821952104568481, 0.7895918488502502, 0.7967243194580078, 0.8072909712791443, 0.8103289008140564, 0.8095363974571228, 0.8195747137069702, 0.8183859586715698, 0.8255184292793274, 0.8253863453865051, 0.8330471515655518, 0.8350284099578857, 0.841500461101532, 0.8417646288871765, 0.8481045961380005, 0.8449346423149109, 0.8486329317092896, 0.8492933511734009, 0.8558974862098694, 0.8562937378883362, 0.8628978729248047, 0.8619733452796936, 0.8696341514587402, 0.8650112152099609, 0.8625016212463379, 0.870030403137207, 0.8697662353515625, 0.8712190985679626, 0.8734645247459412, 0.8746532797813416, 0.8758420348167419, 0.8787478804588318, 0.8802007436752319, 0.8809932470321655, 0.8831065893173218, 0.8848236799240112, 0.8865407705307007, 0.8882578015327454, 0.8874653577804565, 0.8901069760322571, 0.8918240666389465, 0.8943336606025696, 0.8943336606025696, 0.8971073627471924, 0.8982961177825928, 0.8980319499969482, 0.8994848728179932, 0.9095231890678406, 0.9006736278533936, 0.9030511379241943, 0.9062210917472839, 0.9031832218170166, 0.9082023501396179, 0.9125610589981079, 0.9121648669242859, 0.9126931428909302, 0.9125610589981079, 0.9132214784622192, 0.9157310724258423, 0.9215427041053772, 0.9208822846412659, 0.9154669046401978, 0.9146744012832642, 0.9253731369972229], "val_loss": [2.0352272987365723, 1.5035878419876099, 1.0298835039138794, 0.8265628218650818, 0.7388508915901184, 0.6863200068473816, 0.639382541179657, 0.6063873171806335, 0.5799345374107361, 0.5630815625190735, 0.5433772206306458, 0.5289760828018188, 0.513674259185791, 0.5003481507301331, 0.4853508174419403, 0.47454485297203064, 0.4648895561695099, 0.4636246860027313, 0.4471582770347595, 0.4417797029018402, 0.4359959363937378, 0.4314088225364685, 0.4258142113685608, 0.42043229937553406, 0.4113026559352875, 0.4034809470176697, 0.4001278877258301, 0.39468392729759216, 0.3922320008277893, 0.3865348994731903, 0.3833177983760834, 0.38038647174835205, 0.3741586208343506, 0.3700994849205017, 0.37443724274635315, 0.3638254702091217, 0.36438989639282227, 0.36647915840148926, 0.3563291132450104, 0.3549964129924774, 0.35360822081565857, 0.34985411167144775, 0.35045742988586426, 0.35199373960494995, 0.34280622005462646, 0.34077098965644836, 0.34664708375930786, 0.34328803420066833, 0.34154629707336426, 0.3398650884628296, 0.3376672863960266, 0.3341841697692871, 0.33217746019363403, 0.3311651349067688, 0.3259269595146179, 0.3293176591396332, 0.3258107602596283, 0.3317187428474426, 0.3223547339439392, 0.3240618407726288, 0.3322713077068329, 0.32201677560806274, 0.3215162754058838, 0.32287120819091797, 0.32052314281463623, 0.31856584548950195, 0.3212389349937439, 0.3160008490085602, 0.3219020664691925, 0.3216809034347534, 0.31787577271461487, 0.32656267285346985, 0.31988003849983215, 0.3217696249485016, 0.3177037239074707, 0.31847184896469116], "val_accuracy": [0.5493333339691162, 0.6520000100135803, 0.6806666851043701, 0.7076666951179504, 0.7296666502952576, 0.7440000176429749, 0.7583333253860474, 0.7710000276565552, 0.7766666412353516, 0.7883333563804626, 0.7873333096504211, 0.8026666641235352, 0.8036666512489319, 0.8066666722297668, 0.8186666369438171, 0.8216666579246521, 0.8243333101272583, 0.8266666531562805, 0.8333333134651184, 0.8330000042915344, 0.8376666903495789, 0.8383333086967468, 0.840666651725769, 0.8376666903495789, 0.8446666598320007, 0.8506666421890259, 0.8529999852180481, 0.8500000238418579, 0.8529999852180481, 0.8550000190734863, 0.8556666374206543, 0.8569999933242798, 0.8603333234786987, 0.8613333106040955, 0.8659999966621399, 0.862666666507721, 0.8673333525657654, 0.862666666507721, 0.8666666746139526, 0.8663333058357239, 0.8696666955947876, 0.8683333396911621, 0.8706666827201843, 0.8663333058357239, 0.8706666827201843, 0.8730000257492065, 0.8726666569709778, 0.871666669845581, 0.874666690826416, 0.871666669845581, 0.8713333606719971, 0.8759999871253967, 0.8790000081062317, 0.878000020980835, 0.8806666731834412, 0.8799999952316284, 0.8803333044052124, 0.8803333044052124, 0.8806666731834412, 0.8840000033378601, 0.8769999742507935, 0.8820000290870667, 0.8826666474342346, 0.8830000162124634, 0.8866666555404663, 0.8859999775886536, 0.8809999823570251, 0.8880000114440918, 0.8830000162124634, 0.8836666941642761, 0.8899999856948853, 0.8859999775886536, 0.8896666765213013, 0.8826666474342346, 0.8870000243186951, 0.887333333492279]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 5, 1], [0, 2, 0, 3, 4, 1], [16, 16], [0, 1], [8], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [6, 8, 3, 6, 8, 1, 4, 1, 4, 6, 8, 3, 7, 1, 6, 2, 4, 3, 2, 6, 4, 9, 2], [0, 0, 0, 3, 0, 0, 0, 1, 2, 0, 7, 4, 7, 5, 7, 4, 0, 4, 7], [16, 99, 96, 99, 91, 1, 68, 70, 21]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.subtract(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.multiply(alpha, beta)))), tf.math.add(tf.math.subtract(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.add(grad, tf.math.pow(grad, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, tf.math.pow(grad, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), grad))), grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}, "mapping_values": [1, 9, 5, 4, 2, 13, 7, 6, 2, 2, 1, 1, 1, 42, 23, 19, 9], "tree_depth": 22}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 4, 6, 1], [0, 1, 0, 2, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 14, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 2, 9, 5, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), grad), tf.math.subtract(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3035101890563965, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [26, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5, 8, 3, 8, 2, 1, 5, 0], [0, 2, 0, 3, 1, 3, 3], [59, 16], [0, 1], [0], [0], [44], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 8, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [16, 24, 96, 27, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.sqrt(tf.math.add(grad, tf.math.subtract(alpha, tf.math.square(grad)))), tf.math.negative(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303995132446289, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 9, 5, 4, 2, 20, 13, 7, 2, 2, 1, 1, 1, 4, 2, 2, 2], "tree_depth": 19}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 0, 3, 9, 1, 7, 6, 9, 7, 5, 9, 2, 5, 3, 3, 7, 0, 4], [0, 1, 0, 2, 0, 3, 2, 3, 2, 0, 0], [39, 39, 51, 9, 8, 13, 21, 70], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 1], [0, 0, 0, 3, 2], [16, 14, 24], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 4, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 35, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 20, 11, 8, 12, 7, 5, 3, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), grad)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.negative(grad), grad), tf.math.pow(grad, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(grad, sigma), tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]