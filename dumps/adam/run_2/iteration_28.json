[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8748571276664734, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2257304191589355, 1.8795742988586426, 1.4002149105072021, 1.0845156908035278, 0.9352409243583679, 0.8323283195495605, 0.7702773213386536, 0.7239602208137512, 0.6890323162078857, 0.6605302095413208, 0.6405627727508545, 0.618780791759491, 0.5953121185302734, 0.5723647475242615, 0.5688818097114563, 0.5402939915657043, 0.5230716466903687, 0.5185339450836182, 0.5055860877037048, 0.49823811650276184, 0.48530110716819763, 0.4731071889400482, 0.4742107689380646, 0.4618343412876129, 0.45226407051086426, 0.43923208117485046, 0.42923814058303833, 0.4224671423435211, 0.4132537245750427, 0.4171052873134613, 0.40286657214164734, 0.401645690202713, 0.3904517590999603, 0.3879532814025879, 0.3833983242511749, 0.3733660578727722, 0.3682907521724701, 0.3621160089969635, 0.3541252911090851, 0.35348233580589294, 0.34747570753097534, 0.3413771390914917, 0.33653727173805237, 0.3308607339859009, 0.32244059443473816, 0.3230111598968506, 0.31718727946281433, 0.3173046112060547, 0.3139379322528839, 0.3081393241882324, 0.3043934404850006, 0.29838016629219055, 0.28782740235328674, 0.28089746832847595, 0.27577802538871765, 0.27998772263526917, 0.2814391553401947, 0.2731642425060272, 0.2675051689147949, 0.25949910283088684, 0.25661787390708923, 0.2519060969352722, 0.2506949305534363, 0.24650299549102783, 0.24389494955539703, 0.2343333512544632, 0.22960200905799866, 0.2354428470134735, 0.23220930993556976, 0.2245044708251953, 0.22387441992759705, 0.22017037868499756, 0.21408002078533173, 0.20792903006076813, 0.209246426820755, 0.2106911689043045, 0.2036212831735611, 0.1993311047554016], "accuracy": [0.2793554365634918, 0.4865935742855072, 0.5695416927337646, 0.6186765432357788, 0.666358470916748, 0.7003037929534912, 0.7259278893470764, 0.7296261787414551, 0.748778223991394, 0.7600052952766418, 0.7647602558135986, 0.7684586048126221, 0.7815347909927368, 0.7957997918128967, 0.7957997918128967, 0.8035926818847656, 0.8074230551719666, 0.8078193068504333, 0.8131026029586792, 0.8224804997444153, 0.8222163319587708, 0.8245938420295715, 0.8298771381378174, 0.8335754871368408, 0.8360850811004639, 0.844010055065155, 0.8426892161369324, 0.8448025584220886, 0.8471800088882446, 0.8491612672805786, 0.8574824929237366, 0.8543124794960022, 0.858671247959137, 0.859199583530426, 0.858671247959137, 0.8667283058166504, 0.863558292388916, 0.8702945709228516, 0.8681812286376953, 0.8706908226013184, 0.8689737319946289, 0.8739928603172302, 0.8782195448875427, 0.8821820020675659, 0.8841632604598999, 0.8782195448875427, 0.8869370222091675, 0.8794082403182983, 0.8840311765670776, 0.8815215826034546, 0.8944657444953918, 0.8912957310676575, 0.8919561505317688, 0.8926165699958801, 0.8949940800666809, 0.897899866104126, 0.8994848728179932, 0.898428201675415, 0.9041078090667725, 0.9046360850334167, 0.9060890078544617, 0.9095231890678406, 0.9060890078544617, 0.9108440279960632, 0.9080702662467957, 0.9149385690689087, 0.9140139818191528, 0.9083344340324402, 0.915070652961731, 0.915070652961731, 0.9159952402114868, 0.921938955783844, 0.9198256731033325, 0.9210143685340881, 0.9228635430335999, 0.9196935892105103, 0.9269581437110901, 0.926429808139801], "val_loss": [2.045520782470703, 1.521894097328186, 1.045864224433899, 0.8405641317367554, 0.7541571259498596, 0.6997856497764587, 0.6578887701034546, 0.6186016201972961, 0.5940539836883545, 0.5707026124000549, 0.547885000705719, 0.5374830365180969, 0.5198137760162354, 0.5039316415786743, 0.5027194023132324, 0.4843730330467224, 0.4730151891708374, 0.46506747603416443, 0.45391303300857544, 0.454712837934494, 0.44479256868362427, 0.4381479024887085, 0.4374189078807831, 0.43261051177978516, 0.42431265115737915, 0.41918185353279114, 0.41278308629989624, 0.4116319715976715, 0.4080835282802582, 0.4041145443916321, 0.40467435121536255, 0.4004606008529663, 0.39678290486335754, 0.3894149661064148, 0.3937996029853821, 0.3846401274204254, 0.38279345631599426, 0.38769441843032837, 0.3774288296699524, 0.3818838596343994, 0.37320321798324585, 0.3775084614753723, 0.3697284460067749, 0.37272608280181885, 0.3658878207206726, 0.3662434220314026, 0.36805737018585205, 0.36323216557502747, 0.36421117186546326, 0.35865551233291626, 0.3593340516090393, 0.3540715277194977, 0.35871216654777527, 0.35692235827445984, 0.3546740710735321, 0.35243961215019226, 0.349816232919693, 0.35567015409469604, 0.35231485962867737, 0.3486785590648651, 0.35001054406166077, 0.34874990582466125, 0.35194164514541626, 0.3539067804813385, 0.348347544670105, 0.35494935512542725, 0.35152509808540344, 0.34135204553604126, 0.3479156792163849, 0.34889012575149536, 0.3503827452659607, 0.3495117723941803, 0.3451566994190216, 0.34634536504745483, 0.34823745489120483, 0.34743717312812805, 0.35348641872406006, 0.34741130471229553], "val_accuracy": [0.5426666736602783, 0.6576666831970215, 0.6840000152587891, 0.7020000219345093, 0.7226666808128357, 0.737333357334137, 0.750333309173584, 0.7616666555404663, 0.7689999938011169, 0.7879999876022339, 0.7933333516120911, 0.7963333129882812, 0.8073333501815796, 0.8169999718666077, 0.8173333406448364, 0.8223333358764648, 0.8309999704360962, 0.8333333134651184, 0.8413333296775818, 0.8453333377838135, 0.8383333086967468, 0.8453333377838135, 0.8489999771118164, 0.8456666469573975, 0.8539999723434448, 0.8519999980926514, 0.8550000190734863, 0.8566666841506958, 0.859666645526886, 0.8576666712760925, 0.8603333234786987, 0.8579999804496765, 0.8613333106040955, 0.8656666874885559, 0.8640000224113464, 0.8653333187103271, 0.8663333058357239, 0.8640000224113464, 0.8696666955947876, 0.8663333058357239, 0.8700000047683716, 0.8663333058357239, 0.8690000176429749, 0.8690000176429749, 0.8706666827201843, 0.8693333268165588, 0.8690000176429749, 0.871666669845581, 0.875, 0.8740000128746033, 0.8730000257492065, 0.875333309173584, 0.8763333559036255, 0.874666690826416, 0.8769999742507935, 0.8790000081062317, 0.8790000081062317, 0.8793333172798157, 0.878000020980835, 0.8763333559036255, 0.8816666603088379, 0.878333330154419, 0.8813333511352539, 0.8786666393280029, 0.8820000290870667, 0.875, 0.8796666860580444, 0.8826666474342346, 0.8796666860580444, 0.8813333511352539, 0.8793333172798157, 0.8823333382606506, 0.8856666684150696, 0.8840000033378601, 0.8856666684150696, 0.8823333382606506, 0.8820000290870667, 0.8843333125114441]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.847428560256958, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222175121307373, 1.859980583190918, 1.3870488405227661, 1.0765680074691772, 0.9175723791122437, 0.8200685381889343, 0.7590751051902771, 0.7118082642555237, 0.6704365611076355, 0.6418606042861938, 0.6138495802879333, 0.6085615158081055, 0.5835595726966858, 0.5698957443237305, 0.5508109927177429, 0.5389600396156311, 0.5277405977249146, 0.5082886815071106, 0.5008686184883118, 0.48814845085144043, 0.4812415838241577, 0.4734177589416504, 0.4617973566055298, 0.4562075734138489, 0.4465767443180084, 0.42553046345710754, 0.43354180455207825, 0.4273340106010437, 0.41880521178245544, 0.4070475995540619, 0.40741172432899475, 0.39473438262939453, 0.38818123936653137, 0.3894551396369934, 0.37746673822402954, 0.37117239832878113, 0.36788517236709595, 0.3618184030056, 0.35779836773872375, 0.3477914333343506, 0.35312017798423767, 0.3436966836452484, 0.34249627590179443], "accuracy": [0.2661471366882324, 0.49306565523147583, 0.5678246021270752, 0.6302998065948486, 0.6749438643455505, 0.7088891863822937, 0.719852089881897, 0.7387399077415466, 0.7549861073493958, 0.7621186375617981, 0.7777044177055359, 0.7771760821342468, 0.7876105904579163, 0.7895918488502502, 0.8010830879211426, 0.8080834746360779, 0.8063663840293884, 0.8169330358505249, 0.8170651197433472, 0.8264430165290833, 0.8280280232429504, 0.8298771381378174, 0.8347642421722412, 0.8376700282096863, 0.8446704745292664, 0.8508783578872681, 0.844010055065155, 0.8498216867446899, 0.8469158411026001, 0.8569541573524475, 0.8536521196365356, 0.8569541573524475, 0.8588033318519592, 0.8588033318519592, 0.8646149635314941, 0.8687095642089844, 0.872407853603363, 0.8714832663536072, 0.8751816153526306, 0.8796724081039429, 0.874389111995697, 0.8750495314598083, 0.8778232932090759], "val_loss": [2.034533739089966, 1.5046957731246948, 1.0384925603866577, 0.8373276591300964, 0.7453851699829102, 0.6930932402610779, 0.6458109021186829, 0.6136792898178101, 0.5840017199516296, 0.5658043026924133, 0.5501836538314819, 0.54105544090271, 0.5230398178100586, 0.5059229135513306, 0.5004077553749084, 0.48600709438323975, 0.4740965962409973, 0.46311840415000916, 0.45335444808006287, 0.4566332995891571, 0.44152483344078064, 0.43895235657691956, 0.4297908544540405, 0.42714452743530273, 0.4201231598854065, 0.41416487097740173, 0.40721020102500916, 0.40774065256118774, 0.40334001183509827, 0.4016983211040497, 0.3934526741504669, 0.3879386782646179, 0.3882330060005188, 0.38068750500679016, 0.38602912425994873, 0.3773670196533203, 0.3765052855014801, 0.37075507640838623, 0.3696209192276001, 0.3675324618816376, 0.3660188317298889, 0.3624611794948578, 0.36234089732170105], "val_accuracy": [0.5403333306312561, 0.6520000100135803, 0.6833333373069763, 0.7006666660308838, 0.7283333539962769, 0.7480000257492065, 0.7599999904632568, 0.7716666460037231, 0.784333348274231, 0.7883333563804626, 0.7926666736602783, 0.8006666898727417, 0.8116666674613953, 0.8186666369438171, 0.8209999799728394, 0.8270000219345093, 0.8360000252723694, 0.831333339214325, 0.8410000205039978, 0.8370000123977661, 0.843666672706604, 0.8476666808128357, 0.8503333330154419, 0.8476666808128357, 0.8539999723434448, 0.8533333539962769, 0.8533333539962769, 0.8556666374206543, 0.8539999723434448, 0.8610000014305115, 0.8636666536331177, 0.8616666793823242, 0.8643333315849304, 0.8636666536331177, 0.8643333315849304, 0.8686666488647461, 0.8713333606719971, 0.8736666440963745, 0.8676666617393494, 0.8706666827201843, 0.8736666440963745, 0.8700000047683716, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 6, 0, 4], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [3], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0], [6, 3, 3, 6, 8, 9, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.43314287066459656, "mapping_values": [1, 9, 5, 4, 2, 6, 3, 3, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.5215842723846436, 2.2223260402679443, 2.3080315589904785, 2.3034989833831787, 2.3028922080993652, 2.303079605102539, 2.3034589290618896], "accuracy": [0.18650111556053162, 0.16893409192562103, 0.1290450394153595, 0.09919429570436478, 0.09972262382507324, 0.09932637959718704, 0.0956280529499054], "val_loss": [2.303879976272583, 1.7731643915176392, 2.3033864498138428, 2.3027679920196533, 2.3026633262634277, 2.3025472164154053, 2.303006887435913], "val_accuracy": [0.10166666656732559, 0.44066667556762695, 0.09799999743700027, 0.0989999994635582, 0.0989999994635582, 0.10166666656732559, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 2, 3, 5], [0, 2, 0, 3, 3], [37, 16], [1, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 5, 2, 6, 9, 6, 3, 1, 2, 9, 4, 1, 4, 6, 1, 4, 3, 7, 0, 8, 3, 1, 4, 5, 0, 4, 8, 7, 3, 4, 0, 9, 3, 7, 6, 5, 1, 2, 7, 7, 5, 3, 7, 5], [0, 0, 0, 3, 1, 0, 3, 1, 2, 0, 1, 1, 5, 1, 7, 2, 3, 7, 5, 4, 1, 6, 7, 3, 5, 7, 2, 2, 7, 0, 3, 4, 6, 2, 4, 6, 2, 2], [16, 99, 15, 99, 61, 1, 97, 9, 17]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 11, 6, 5, 2, 1, 0, 1, 1, 93, 55, 38, 9], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.math.pow(tf.math.subtract(alpha, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.math.divide_no_nan(alpha, beta))))), tf.math.square(tf.math.add(tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.subtract(alpha, grad), alpha), grad), beta), sigma)), grad)), tf.math.pow(grad, grad)))))), tf.math.multiply(tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.multiply(alpha, tf.math.subtract(tf.math.pow(tf.math.square(grad), tf.math.negative(grad)), tf.math.pow(tf.math.sqrt(tf.math.add(sigma, tf.math.multiply(tf.math.pow(grad, tf.math.negative(grad)), beta))), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.square(beta), tf.math.subtract(grad, tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.add(grad, grad)), tf.math.add(tf.math.square(beta), tf.math.multiply(grad, grad)))), tf.math.add(beta, tf.math.square(beta))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 2, 5, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [80], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [6, 0, 3, 6, 8, 1, 4, 1, 4, 2, 2, 4, 4, 4, 3, 1, 1, 6, 6, 5, 9, 7, 8, 0, 9], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0, 5, 2, 4, 2, 2, 2, 0], [16, 99, 96, 99, 61, 1, 1, 19, 25]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 42, 25, 17, 9], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.math.add(tf.math.add(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.pow(tf.math.pow(sigma, alpha), tf.math.multiply(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.subtract(tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.square(grad), beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(beta)))))), tf.math.negative(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3036324977874756, 2.302722930908203, 2.3123607635498047, 8.815189361572266, 9.841310501098633, 9.814698219299316, 9.780562400817871], "accuracy": [0.09615638852119446, 0.09655263274908066, 0.09734513610601425, 0.09206181764602661, 0.09998679161071777, 0.09576013684272766, 0.09866596013307571], "val_loss": [2.302602767944336, 2.3025858402252197, 2.3326222896575928, 9.728882789611816, 9.704757690429688, 9.669994354248047, 9.637361526489258], "val_accuracy": [0.09733333438634872, 0.10433333367109299, 0.10066666454076767, 0.1003333330154419, 0.10066666454076767, 0.10066666454076767, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2], [39, 76], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 6, 0, 0, 5], [0, 0, 0, 3], [16, 16, 72], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8, 5, 3, 8, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 6], [16, 28, 72, 99, 61, 59]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 6, 3, 3, 3, 1, 0, 1, 1, 26, 15, 11, 6], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.math.square(alpha))))))), tf.math.multiply(tf.math.sqrt(beta), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]