[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8722857236862183, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2201650142669678, 1.8591878414154053, 1.3849608898162842, 1.0759340524673462, 0.9263629913330078, 0.8354954719543457, 0.7618403434753418, 0.7206236720085144, 0.6857308745384216, 0.6579243540763855, 0.6322848200798035, 0.6055998802185059, 0.592705249786377, 0.5728848576545715, 0.5516806244850159, 0.5439508557319641, 0.5354324579238892, 0.5109075307846069, 0.5039274096488953, 0.499575674533844, 0.4817613959312439, 0.4678322672843933, 0.4671807587146759, 0.4597778618335724, 0.4507557153701782, 0.4475730061531067, 0.4368039071559906, 0.42803511023521423, 0.42126697301864624, 0.4097133278846741, 0.40283313393592834, 0.39937007427215576, 0.394843190908432, 0.390062153339386, 0.3753417730331421, 0.3667752742767334, 0.36174485087394714, 0.36239534616470337, 0.35217469930648804, 0.3505552113056183, 0.3485017418861389, 0.3391759693622589, 0.34100469946861267, 0.3377579152584076, 0.3270527720451355, 0.32330796122550964, 0.3200083076953888, 0.3153461217880249, 0.3172978162765503, 0.30762213468551636, 0.3105049431324005, 0.3015543222427368, 0.29079046845436096, 0.28903552889823914, 0.2852705419063568, 0.2789895832538605, 0.28223398327827454, 0.27103111147880554, 0.2633380889892578, 0.26516690850257874], "accuracy": [0.27843084931373596, 0.4967639744281769, 0.5723153948783875, 0.6317527294158936, 0.6687359809875488, 0.6972658634185791, 0.7256637215614319, 0.7423061728477478, 0.7497028112411499, 0.761590301990509, 0.7711002230644226, 0.7828556299209595, 0.7889314293861389, 0.7898560166358948, 0.7951393723487854, 0.8079513907432556, 0.8094043135643005, 0.8158763647079468, 0.8186501264572144, 0.8222163319587708, 0.8267071843147278, 0.8329150676727295, 0.8297450542449951, 0.8363492488861084, 0.8397833704948425, 0.8413683772087097, 0.8502179384231567, 0.8471800088882446, 0.8545766472816467, 0.8558974862098694, 0.8570862412452698, 0.8556333184242249, 0.856689989566803, 0.8584070801734924, 0.8636903762817383, 0.8706908226013184, 0.872407853603363, 0.8735966086387634, 0.874389111995697, 0.8761062026023865, 0.8779553771018982, 0.8813894987106323, 0.8796724081039429, 0.880729079246521, 0.8838990926742554, 0.886672854423523, 0.8848236799240112, 0.8853520154953003, 0.8845595121383667, 0.8853520154953003, 0.8906353116035461, 0.8894465565681458, 0.8980319499969482, 0.8980319499969482, 0.898428201675415, 0.8989565372467041, 0.8967111110687256, 0.9012019634246826, 0.9051644206047058, 0.9055606722831726], "val_loss": [2.035398006439209, 1.5115984678268433, 1.0439687967300415, 0.8432555198669434, 0.7588074803352356, 0.7079262733459473, 0.6577004194259644, 0.6252020001411438, 0.600543737411499, 0.5809819102287292, 0.5615766644477844, 0.5409902930259705, 0.5275496244430542, 0.5106804370880127, 0.5034345984458923, 0.49335530400276184, 0.4824051856994629, 0.4742042124271393, 0.4646131694316864, 0.45689815282821655, 0.4490523636341095, 0.443240225315094, 0.43528255820274353, 0.4298340976238251, 0.42238879203796387, 0.4254263639450073, 0.41479477286338806, 0.40881794691085815, 0.4110504984855652, 0.40118834376335144, 0.3990054428577423, 0.3945816159248352, 0.39964616298675537, 0.39017045497894287, 0.38179999589920044, 0.38394173979759216, 0.3793560266494751, 0.3751847445964813, 0.3748781681060791, 0.37664762139320374, 0.36811038851737976, 0.3683120906352997, 0.3680371642112732, 0.36295321583747864, 0.363241970539093, 0.3614707887172699, 0.362155556678772, 0.3621280789375305, 0.35937297344207764, 0.35452449321746826, 0.3556941747665405, 0.35421109199523926, 0.3578193783760071, 0.3548257648944855, 0.3483418822288513, 0.3511370122432709, 0.35115087032318115, 0.34600239992141724, 0.34869563579559326, 0.3503650426864624], "val_accuracy": [0.5260000228881836, 0.6573333144187927, 0.6836666464805603, 0.70333331823349, 0.7279999852180481, 0.746999979019165, 0.7590000033378601, 0.7670000195503235, 0.7766666412353516, 0.7793333530426025, 0.7896666526794434, 0.7926666736602783, 0.8026666641235352, 0.8043333292007446, 0.8023333549499512, 0.812666654586792, 0.8169999718666077, 0.8236666917800903, 0.8226666450500488, 0.8286666870117188, 0.8330000042915344, 0.8306666612625122, 0.8360000252723694, 0.8376666903495789, 0.8396666646003723, 0.8396666646003723, 0.8423333168029785, 0.8479999899864197, 0.8416666388511658, 0.8536666631698608, 0.8510000109672546, 0.8539999723434448, 0.8566666841506958, 0.856333315372467, 0.859000027179718, 0.859666645526886, 0.8610000014305115, 0.8643333315849304, 0.8633333444595337, 0.8576666712760925, 0.8640000224113464, 0.8663333058357239, 0.862333357334137, 0.8653333187103271, 0.8659999966621399, 0.8679999709129333, 0.8636666536331177, 0.8656666874885559, 0.8679999709129333, 0.8700000047683716, 0.8686666488647461, 0.8696666955947876, 0.8706666827201843, 0.8696666955947876, 0.875333309173584, 0.8713333606719971, 0.8696666955947876, 0.8723333477973938, 0.8736666440963745, 0.8703333139419556]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 6, 3, 0, 3, 5, 0, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 2, 3, 6, 3, 5, 9], [0, 2, 0, 3], [16, 16, 64], [0, 1], [0], [0], [34], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 1, 3, 0, 8, 1, 4, 8, 4, 2, 9], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 4, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 8, 4, 2, 11, 7, 4, 3, 2, 1, 1, 1, 11, 6, 5, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), sigma), grad)", "other_info": {"loss": [4.395143508911133, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0812310129404068, 0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [242016.421875, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [6, 3, 3, 6, 6, 1, 4, 1, 4, 2, 8, 3, 4, 4, 0, 8, 0, 8, 8, 6, 5, 8, 7, 6, 3, 9, 4, 6, 8, 2, 0, 0, 9, 2], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0, 7, 2, 7, 4, 5, 2, 0, 2, 2, 7], [16, 99, 96, 99, 61, 1, 38, 16, 61]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 1, 54, 34, 20, 9], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.pow(sigma, grad), tf.math.pow(tf.math.negative(tf.math.sqrt(beta)), tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(grad, beta)))), tf.math.square(tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad)), tf.math.divide_no_nan(grad, beta)), tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), beta), tf.math.add(tf.math.negative(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 0, 1, 1], [0, 7], [0, 5], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 2, 4, 4, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 6, 3, 3, 1, 4, 2, 2, 1, 12, 6, 6, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09509972482919693, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 8, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 7, 6, 8, 4, 1, 2, 6, 2, 4, 7, 2, 5, 0, 8], [0, 1, 0, 3, 0, 5, 3, 5, 2, 1, 3, 2, 2, 0], [16, 16, 6, 37], [0, 0, 1, 0, 1, 1], [0, 1, 4], [0, 1, 0], [99, 63], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [2, 3, 3, 6, 0, 1, 4, 1, 4, 0, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 71, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 34, 20, 14, 4, 6, 3, 3, 2, 10, 5, 5, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.math.subtract(grad, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), grad), tf.math.pow(tf.math.add(grad, grad), beta)), tf.math.add(alpha, tf.math.square(grad)))), tf.math.negative(beta))), tf.math.sqrt(beta)))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), sigma), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [338983456.0, 4994.66552734375, 15920.287109375, 2.302598237991333, 2.302597999572754, 2.302597999572754, 2.302597761154175, 2.302597999572754], "accuracy": [0.09681680053472519, 0.10130762308835983, 0.09642054885625839, 0.09932637959718704, 0.09853387624025345, 0.09549596905708313, 0.10011887550354004, 0.0948355570435524], "val_loss": [3704.099365234375, 22791.51171875, 2.302560567855835, 2.302560806274414, 2.302560806274414, 2.302560567855835, 2.302560567855835, 2.302560567855835], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.10133333504199982, 0.10133333504199982, 0.0989999994635582, 0.0989999994635582, 0.10133333504199982, 0.0989999994635582]}}]