[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8574285507202148, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2221639156341553, 1.8635731935501099, 1.3884903192520142, 1.0782214403152466, 0.9250427484512329, 0.8270981907844543, 0.768879234790802, 0.714499831199646, 0.6747881174087524, 0.6429923176765442, 0.6242525577545166, 0.5988990664482117, 0.5768933892250061, 0.5669064521789551, 0.5434155464172363, 0.5318059921264648, 0.5205891132354736, 0.5021957159042358, 0.4962434768676758, 0.4825575053691864, 0.4781988561153412, 0.46317532658576965, 0.4553690552711487, 0.44903773069381714, 0.4389325678348541, 0.4309041500091553, 0.4202212989330292, 0.41762247681617737, 0.41254058480262756, 0.408430814743042, 0.40029290318489075, 0.3915068805217743, 0.38823604583740234, 0.3823753297328949, 0.37527593970298767, 0.37550151348114014, 0.3627948462963104, 0.35614195466041565, 0.35339897871017456, 0.3485983610153198, 0.34245699644088745, 0.3363229036331177, 0.3387296199798584, 0.3286065459251404, 0.3264935314655304, 0.3259476125240326, 0.31776294112205505, 0.31495630741119385, 0.30507639050483704, 0.29653429985046387, 0.29239609837532043, 0.29794591665267944, 0.291826993227005, 0.28539445996284485, 0.27712374925613403, 0.27438226342201233, 0.2754395306110382, 0.2695702612400055, 0.2666298449039459, 0.26258695125579834, 0.2575826644897461, 0.25663691759109497, 0.2556723654270172, 0.24819476902484894, 0.23864629864692688, 0.2420213371515274, 0.2429119348526001, 0.23670831322669983, 0.23590989410877228, 0.22534872591495514, 0.22918058931827545, 0.21903829276561737, 0.22149351239204407, 0.21318456530570984, 0.2170814424753189, 0.20916086435317993, 0.20821420848369598, 0.21261802315711975, 0.2076631486415863], "accuracy": [0.27301543951034546, 0.4785365164279938, 0.5732399821281433, 0.62660151720047, 0.6715096831321716, 0.7000396251678467, 0.7234182953834534, 0.7359662055969238, 0.7534011602401733, 0.76542067527771, 0.7670056819915771, 0.7814027070999146, 0.7895918488502502, 0.7915731072425842, 0.8017435073852539, 0.8047813773155212, 0.8119139075279236, 0.8161405324935913, 0.817461371421814, 0.8274996876716614, 0.8280280232429504, 0.8372738361358643, 0.8356888294219971, 0.8341038227081299, 0.8404437899589539, 0.8425571322441101, 0.8498216867446899, 0.8486329317092896, 0.8541803956031799, 0.857218325138092, 0.856689989566803, 0.8564258217811584, 0.860652506351471, 0.8634262084960938, 0.8632941246032715, 0.8648791313171387, 0.8689737319946289, 0.8730682730674744, 0.8755778670310974, 0.8755778670310974, 0.874389111995697, 0.8825782537460327, 0.8733324408531189, 0.8815215826034546, 0.8860124349594116, 0.8821820020675659, 0.8850878477096558, 0.8881257176399231, 0.8918240666389465, 0.8934090733528137, 0.89552241563797, 0.89552241563797, 0.8960506916046143, 0.8957865834236145, 0.9014661312103271, 0.9021265506744385, 0.9002773761749268, 0.9034473896026611, 0.9033153057098389, 0.9046360850334167, 0.9082023501396179, 0.9088627696037292, 0.9085986018180847, 0.9152027368545532, 0.9153348207473755, 0.91559898853302, 0.9138818979263306, 0.9144102334976196, 0.9161273241043091, 0.9173160791397095, 0.917580246925354, 0.9218068718910217, 0.919561505317688, 0.9252410531044006, 0.9202219247817993, 0.9256373047828674, 0.9256373047828674, 0.9220710396766663, 0.9303922653198242], "val_loss": [2.035691499710083, 1.5122848749160767, 1.037530779838562, 0.8284502029418945, 0.7385040521621704, 0.6871337890625, 0.6375219821929932, 0.6079835891723633, 0.5776640176773071, 0.5580539107322693, 0.5358551144599915, 0.521826982498169, 0.512217104434967, 0.49155691266059875, 0.4844057559967041, 0.47235047817230225, 0.46327027678489685, 0.4625229835510254, 0.44258081912994385, 0.44437068700790405, 0.43652108311653137, 0.4275640547275543, 0.4308869540691376, 0.4171482026576996, 0.4098569452762604, 0.4049111604690552, 0.4029960632324219, 0.40089452266693115, 0.39545026421546936, 0.3927147686481476, 0.3904511630535126, 0.39390841126441956, 0.3841555118560791, 0.3827562630176544, 0.3787994086742401, 0.37393879890441895, 0.370480477809906, 0.36973628401756287, 0.36410632729530334, 0.36386555433273315, 0.3626396358013153, 0.3685372769832611, 0.36090800166130066, 0.3529933989048004, 0.3641015589237213, 0.36294451355934143, 0.3534199893474579, 0.3486776053905487, 0.3459748923778534, 0.3482303023338318, 0.34317106008529663, 0.3455944061279297, 0.34486687183380127, 0.3451206386089325, 0.34292683005332947, 0.33791282773017883, 0.34126800298690796, 0.33856338262557983, 0.3377790153026581, 0.3435375988483429, 0.33497175574302673, 0.33316296339035034, 0.33857640624046326, 0.3349129855632782, 0.3372470438480377, 0.342999666929245, 0.3321230411529541, 0.3348609507083893, 0.3332709074020386, 0.3293205499649048, 0.3325149118900299, 0.3417101204395294, 0.32969239354133606, 0.33222055435180664, 0.3300192356109619, 0.34152084589004517, 0.3303074240684509, 0.3257887065410614, 0.3314545750617981], "val_accuracy": [0.5360000133514404, 0.6579999923706055, 0.6846666932106018, 0.7083333134651184, 0.7356666922569275, 0.7486666440963745, 0.7630000114440918, 0.7786666750907898, 0.7803333401679993, 0.7900000214576721, 0.8073333501815796, 0.8149999976158142, 0.8140000104904175, 0.8263333439826965, 0.824999988079071, 0.8299999833106995, 0.8320000171661377, 0.8286666870117188, 0.8416666388511658, 0.840666651725769, 0.8416666388511658, 0.843666672706604, 0.8413333296775818, 0.8503333330154419, 0.8519999980926514, 0.8539999723434448, 0.8539999723434448, 0.8546666502952576, 0.859000027179718, 0.8610000014305115, 0.8606666922569275, 0.8543333411216736, 0.862333357334137, 0.8610000014305115, 0.8616666793823242, 0.8666666746139526, 0.8650000095367432, 0.8706666827201843, 0.8703333139419556, 0.8700000047683716, 0.8743333220481873, 0.8659999966621399, 0.8736666440963745, 0.8759999871253967, 0.871999979019165, 0.8709999918937683, 0.8733333349227905, 0.8803333044052124, 0.8759999871253967, 0.8766666650772095, 0.8809999823570251, 0.878000020980835, 0.878333330154419, 0.878000020980835, 0.8809999823570251, 0.8833333253860474, 0.8773333430290222, 0.8823333382606506, 0.8826666474342346, 0.8806666731834412, 0.8843333125114441, 0.8853333592414856, 0.8859999775886536, 0.8863333463668823, 0.8870000243186951, 0.8836666941642761, 0.8886666893959045, 0.8840000033378601, 0.8859999775886536, 0.8916666507720947, 0.8883333206176758, 0.887333333492279, 0.8866666555404663, 0.8920000195503235, 0.8893333077430725, 0.8849999904632568, 0.890999972820282, 0.8913333415985107, 0.8899999856948853]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 73], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [1, 2, 3, 8, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [8], [0], [99], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [52, 99, 96, 99, 61, 1]], "fitness": -0.4294285774230957, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 1, 5, 2, 3, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.333524703979492, 2.1924502849578857, 2.241170644760132, 2.250582695007324, 2.014005661010742, 2.267678737640381, 2.2125983238220215, 2.1854586601257324, 2.306678295135498, 2.170687198638916], "accuracy": [0.22837141156196594, 0.20538897812366486, 0.21159687638282776, 0.1632545292377472, 0.3063003420829773, 0.24646678566932678, 0.1822744756937027, 0.2040681540966034, 0.10091137140989304, 0.26997753977775574], "val_loss": [2.2556698322296143, 1.7957789897918701, 1.9344748258590698, 2.2906954288482666, 1.6008955240249634, 2.3066296577453613, 2.307039737701416, 2.3121652603149414, 2.2793402671813965, 2.322415351867676], "val_accuracy": [0.2290000021457672, 0.40833333134651184, 0.37299999594688416, 0.14866666495800018, 0.42533332109451294, 0.10066666454076767, 0.10066666454076767, 0.09866666793823242, 0.19633333384990692, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 9, 0, 3, 0], [0, 1, 0, 2], [39, 77], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 6], [0, 1], [0], [0], [99], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 1, 1, 2, 0], [49, 99, 15, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 6, 2, 2, 7, 4, 3, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha))), alpha)), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303717613220215, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 2], [0, 1, 0, 2], [85, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [2, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 53], [0, 1], [9], [0], [53], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8, 4, 5, 8, 3, 6, 8, 8, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0, 2, 0, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 8, 4, 4, 2, 1, 1, 0, 1, 32, 19, 13, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.sqrt(tf.math.pow(alpha, beta)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 6, 3, 9, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [4], [35], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 4, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 60]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 2, 1, 1, 1, 2, 1, 1, 0, 21, 11, 10, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha), tf.math.pow(tf.math.sqrt(beta), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}]