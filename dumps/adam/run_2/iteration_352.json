[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8591428399085999, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2266523838043213, 1.8773987293243408, 1.4135875701904297, 1.1063004732131958, 0.943551778793335, 0.8414949178695679, 0.7726190090179443, 0.724647581577301, 0.696521520614624, 0.6599574089050293, 0.6326472163200378, 0.6121906638145447, 0.5903758406639099, 0.5761622786521912, 0.5476188063621521, 0.5431128144264221, 0.5340270400047302, 0.5132023096084595, 0.49619629979133606, 0.48748332262039185, 0.47905483841896057, 0.4803002178668976, 0.4623660743236542, 0.4600721001625061, 0.4433397352695465, 0.43959304690361023, 0.429653525352478, 0.42290645837783813, 0.4082818031311035, 0.4122583866119385, 0.41051366925239563, 0.40183424949645996, 0.39437276124954224, 0.3838054835796356, 0.3771582245826721, 0.3697647154331207, 0.36389636993408203, 0.3611951172351837, 0.3566383719444275, 0.3531173765659332, 0.3461308181285858, 0.3465022146701813, 0.3364633619785309, 0.32661283016204834, 0.3243665099143982, 0.3190773129463196, 0.32805532217025757, 0.3135335147380829, 0.3135634958744049, 0.2991369068622589, 0.30458661913871765, 0.29856741428375244, 0.29646217823028564, 0.2832847237586975, 0.28811725974082947, 0.2816595435142517, 0.27073901891708374, 0.27206701040267944, 0.26646193861961365, 0.26644638180732727, 0.26357096433639526, 0.2532002031803131], "accuracy": [0.2645621597766876, 0.481838583946228, 0.5638620853424072, 0.6133931875228882, 0.6679434776306152, 0.6999075412750244, 0.7168141603469849, 0.7357020378112793, 0.7415136694908142, 0.7564390301704407, 0.7687227725982666, 0.7749306559562683, 0.7841764688491821, 0.791969358921051, 0.8012151718139648, 0.8030643463134766, 0.8049134612083435, 0.8127063512802124, 0.8182538747787476, 0.8204993009567261, 0.8277638554573059, 0.82683926820755, 0.8338396549224854, 0.8341038227081299, 0.8368775844573975, 0.8393871188163757, 0.8455950617790222, 0.848368763923645, 0.8507462739944458, 0.8502179384231567, 0.8466516733169556, 0.8568220734596252, 0.8590674996376038, 0.8585391640663147, 0.8617091774940491, 0.8663320541381836, 0.8673887252807617, 0.8728041052818298, 0.8709549307823181, 0.872407853603363, 0.8745211958885193, 0.8733324408531189, 0.8741249442100525, 0.8787478804588318, 0.8816536664962769, 0.8842953443527222, 0.8776912093162537, 0.8897107243537903, 0.8841632604598999, 0.8899748921394348, 0.8877294659614563, 0.8927486538887024, 0.8931449055671692, 0.8990886211395264, 0.8942015767097473, 0.8985602855682373, 0.8988244533538818, 0.9038436412811279, 0.9059569239616394, 0.90423983335495, 0.9055606722831726, 0.9075419306755066], "val_loss": [2.0453062057495117, 1.5272184610366821, 1.0433229207992554, 0.8301461338996887, 0.7329325079917908, 0.6757268905639648, 0.626703143119812, 0.5918481945991516, 0.5678310394287109, 0.5408911108970642, 0.5267786383628845, 0.5088717341423035, 0.4958822429180145, 0.48363223671913147, 0.47556233406066895, 0.4641166627407074, 0.45804983377456665, 0.4437674283981323, 0.4361009895801544, 0.4358101487159729, 0.43368303775787354, 0.4201357066631317, 0.4224218726158142, 0.4131403863430023, 0.4062747657299042, 0.40019330382347107, 0.4033898115158081, 0.39224445819854736, 0.39092814922332764, 0.3871634006500244, 0.38559892773628235, 0.38807588815689087, 0.3804546594619751, 0.37730497121810913, 0.3719470202922821, 0.37338724732398987, 0.36875680088996887, 0.36954551935195923, 0.3648446500301361, 0.3685242235660553, 0.360951691865921, 0.3611246347427368, 0.36287716031074524, 0.35700634121894836, 0.3574502766132355, 0.35621216893196106, 0.3540533483028412, 0.35290268063545227, 0.3479782044887543, 0.3513944447040558, 0.35156697034835815, 0.34831419587135315, 0.3451494574546814, 0.3461354970932007, 0.351706862449646, 0.3458159267902374, 0.3457048237323761, 0.3391891419887543, 0.34111639857292175, 0.3435147702693939, 0.3409191370010376, 0.3398401141166687], "val_accuracy": [0.512666642665863, 0.6446666717529297, 0.6859999895095825, 0.7123333215713501, 0.7383333444595337, 0.7513333559036255, 0.765333354473114, 0.7786666750907898, 0.7943333387374878, 0.8003333210945129, 0.8040000200271606, 0.8166666626930237, 0.8173333406448364, 0.8220000267028809, 0.8299999833106995, 0.8346666693687439, 0.8316666483879089, 0.8410000205039978, 0.8410000205039978, 0.8389999866485596, 0.8473333120346069, 0.8519999980926514, 0.8433333039283752, 0.8516666889190674, 0.8550000190734863, 0.8553333282470703, 0.8546666502952576, 0.8640000224113464, 0.8633333444595337, 0.8666666746139526, 0.8643333315849304, 0.8610000014305115, 0.8646666407585144, 0.8696666955947876, 0.8700000047683716, 0.8703333139419556, 0.8736666440963745, 0.871666669845581, 0.8773333430290222, 0.874666690826416, 0.8763333559036255, 0.875, 0.875, 0.8799999952316284, 0.878000020980835, 0.8756666779518127, 0.8796666860580444, 0.8796666860580444, 0.8820000290870667, 0.8786666393280029, 0.8786666393280029, 0.8816666603088379, 0.8806666731834412, 0.8823333382606506, 0.8786666393280029, 0.8826666474342346, 0.8840000033378601, 0.8833333253860474, 0.8823333382606506, 0.8830000162124634, 0.8809999823570251, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 8, 7, 6, 2, 9, 9, 4], [0, 0, 0, 2, 2, 3], [39, 39, 50, 17, 73], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 0, 1], [6, 5], [0, 5], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [6, 3, 3, 6, 1, 1, 4, 1, 4, 2, 8, 4, 2, 2, 9, 9, 2], [0, 0, 0, 3, 4, 0, 2, 1, 2, 4, 7, 5, 7], [50, 99, 96, 99, 75, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 12, 6, 5, 10, 6, 4, 2, 4, 2, 2, 1, 30, 17, 13, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.pow(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), beta))), alpha)))), tf.math.add(tf.math.sqrt(beta), grad)), tf.math.pow(grad, tf.math.add(tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 6, 5], [1, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 3, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}, "mapping_values": [1, 9, 5, 4, 2, 9, 5, 4, 1, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 1, 0, 6], [0, 1, 0, 2, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [71], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 5, 2, 4], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 1, 0, 1, 1, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(grad, grad))))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.subtract(sigma, tf.math.square(alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 5, 3], [0, 1, 1, 2], [39, 60], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 6, 1, 8, 1, 3, 6], [0, 2, 0, 3, 4, 2, 2, 1, 0], [16, 5, 72], [0, 1], [0], [1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6, 4, 4, 5, 1, 0, 3, 2, 0], [0, 0, 0, 3, 0, 0, 3, 1, 1, 0, 3, 0, 4, 4, 1, 1], [16, 99, 96, 99, 61, 1, 63]], "fitness": -0.09371428936719894, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(beta), tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.math.multiply(grad, grad), beta)), tf.math.divide_no_nan(beta, alpha)), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(sigma, alpha), tf.math.pow(tf.math.square(alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.negative(sigma), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.multiply(tf.math.add(grad, alpha), tf.math.negative(alpha)))", "other_info": {"loss": [2.310502529144287, 2.3107783794403076, 2.310783624649048, 2.3107104301452637, 2.3092377185821533, 2.3103139400482178], "accuracy": [0.09351472556591034, 0.09113723784685135, 0.0944393053650856, 0.08836349099874496, 0.09126931428909302, 0.09576013684272766], "val_loss": [2.308605194091797, 2.308605194091797, 2.308605194091797, 2.308605194091797, 2.308605194091797, 2.308605194091797], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}, "mapping_values": [1, 9, 5, 4, 1, 21, 12, 9, 3, 2, 1, 1, 0, 36, 20, 16, 7], "tree_depth": 25}]