[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8659999966621399, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.219835042953491, 1.8650987148284912, 1.3943120241165161, 1.0969440937042236, 0.9390794634819031, 0.8442816734313965, 0.7752373814582825, 0.728236973285675, 0.6941902041435242, 0.6715410351753235, 0.6502966284751892, 0.6205479502677917, 0.5995007753372192, 0.5803764462471008, 0.5688398480415344, 0.5516628623008728, 0.5424646735191345, 0.5341488122940063, 0.5150263905525208, 0.5075398683547974, 0.49522677063941956, 0.4879670739173889, 0.47817155718803406, 0.4649824798107147, 0.4641555845737457, 0.44794774055480957, 0.44048482179641724, 0.4294748902320862, 0.4233686029911041, 0.42290952801704407, 0.41860759258270264, 0.41314736008644104, 0.40949612855911255, 0.400640606880188, 0.3871113657951355, 0.3869706094264984, 0.37951892614364624, 0.37147852778434753, 0.3720143735408783, 0.36261072754859924, 0.35912564396858215, 0.3577679395675659, 0.34825432300567627, 0.34686192870140076, 0.34212157130241394, 0.3335527181625366, 0.3255161643028259, 0.32291942834854126, 0.3149012327194214, 0.31503039598464966, 0.30971992015838623, 0.31163665652275085, 0.3023132383823395, 0.29955920577049255, 0.29718801379203796, 0.29241639375686646, 0.28452110290527344, 0.28184184432029724, 0.278909295797348, 0.2791367769241333, 0.2673274576663971, 0.2663637697696686, 0.2621924579143524, 0.2607230842113495, 0.2530023157596588, 0.2502332031726837, 0.24653294682502747, 0.24687841534614563, 0.24421900510787964, 0.2357272356748581, 0.22910884022712708, 0.2268565595149994, 0.23491649329662323, 0.22301840782165527], "accuracy": [0.2805441915988922, 0.478140264749527, 0.5595033764839172, 0.6083740592002869, 0.6612072587013245, 0.7020208835601807, 0.7160216569900513, 0.7357020378112793, 0.7391361594200134, 0.7531369924545288, 0.759080708026886, 0.7734777331352234, 0.7777044177055359, 0.7874785661697388, 0.7942147850990295, 0.7984414100646973, 0.8033285140991211, 0.805177628993988, 0.8119139075279236, 0.816008448600769, 0.8238013386726379, 0.824329674243927, 0.8276317715644836, 0.8317263126373291, 0.837141752243042, 0.841500461101532, 0.8403117060661316, 0.8473120927810669, 0.8492933511734009, 0.846387505531311, 0.8469158411026001, 0.8485008478164673, 0.8527275323867798, 0.8588033318519592, 0.8619733452796936, 0.8627657890319824, 0.8659358024597168, 0.8665962219238281, 0.863558292388916, 0.8691058158874512, 0.8739928603172302, 0.8716153502464294, 0.8786157965660095, 0.8778232932090759, 0.8798044919967651, 0.8809932470321655, 0.8840311765670776, 0.8848236799240112, 0.887597382068634, 0.8861445188522339, 0.889578640460968, 0.8856161832809448, 0.8939374089241028, 0.8942015767097473, 0.8924844861030579, 0.8928807377815247, 0.9021265506744385, 0.8986923694610596, 0.8985602855682373, 0.9043719172477722, 0.9010698795318604, 0.9030511379241943, 0.9055606722831726, 0.9088627696037292, 0.9072777628898621, 0.9105798602104187, 0.913617730140686, 0.9129573106765747, 0.9113723635673523, 0.9170519113540649, 0.9183727502822876, 0.9177123308181763, 0.9148064851760864, 0.9171839952468872], "val_loss": [2.0382580757141113, 1.518132209777832, 1.0564533472061157, 0.846636950969696, 0.7596072554588318, 0.6948525309562683, 0.6560225486755371, 0.6121180057525635, 0.5899374485015869, 0.5718862414360046, 0.5484231114387512, 0.5304570198059082, 0.5141235589981079, 0.5000706911087036, 0.48963749408721924, 0.4890996813774109, 0.46987679600715637, 0.4643282890319824, 0.45046964287757874, 0.4432995617389679, 0.4376869797706604, 0.4279348850250244, 0.4229262173175812, 0.4224933981895447, 0.4082152843475342, 0.40906810760498047, 0.40064737200737, 0.3969314694404602, 0.39210909605026245, 0.3915005624294281, 0.39366260170936584, 0.3767116665840149, 0.3753317892551422, 0.37582528591156006, 0.37103885412216187, 0.36988797783851624, 0.3648388683795929, 0.3630741238594055, 0.3619726300239563, 0.3533755838871002, 0.35282719135284424, 0.3574729859828949, 0.3479176163673401, 0.357109934091568, 0.34595784544944763, 0.34519580006599426, 0.34328117966651917, 0.3410564064979553, 0.3404732644557953, 0.3402038812637329, 0.3389458954334259, 0.3416935205459595, 0.33658459782600403, 0.33170413970947266, 0.33298417925834656, 0.3314530551433563, 0.33459237217903137, 0.3277902603149414, 0.32757386565208435, 0.3341616094112396, 0.32583338022232056, 0.32793495059013367, 0.3259619176387787, 0.32576003670692444, 0.3258422613143921, 0.32836824655532837, 0.3213343620300293, 0.3266638517379761, 0.31896671652793884, 0.3228508532047272, 0.31801271438598633, 0.3253852427005768, 0.3176235258579254, 0.32698172330856323], "val_accuracy": [0.503000020980835, 0.6426666378974915, 0.6706666946411133, 0.70333331823349, 0.7123333215713501, 0.7396666407585144, 0.7526666522026062, 0.7689999938011169, 0.7693333625793457, 0.7799999713897705, 0.7906666398048401, 0.7990000247955322, 0.8023333549499512, 0.8050000071525574, 0.8056666851043701, 0.8143333196640015, 0.8213333487510681, 0.8216666579246521, 0.8253333568572998, 0.8333333134651184, 0.8393333554267883, 0.8379999995231628, 0.8396666646003723, 0.8429999947547913, 0.8510000109672546, 0.8500000238418579, 0.8543333411216736, 0.8553333282470703, 0.8546666502952576, 0.856333315372467, 0.8579999804496765, 0.8606666922569275, 0.862666666507721, 0.8656666874885559, 0.8686666488647461, 0.8646666407585144, 0.8676666617393494, 0.8669999837875366, 0.8693333268165588, 0.8730000257492065, 0.8730000257492065, 0.8730000257492065, 0.875333309173584, 0.8726666569709778, 0.8763333559036255, 0.8793333172798157, 0.875, 0.878333330154419, 0.8809999823570251, 0.8809999823570251, 0.8833333253860474, 0.8830000162124634, 0.878333330154419, 0.8836666941642761, 0.8833333253860474, 0.8853333592414856, 0.8826666474342346, 0.887666642665863, 0.8856666684150696, 0.8820000290870667, 0.8870000243186951, 0.8880000114440918, 0.8899999856948853, 0.8889999985694885, 0.8883333206176758, 0.8880000114440918, 0.890333354473114, 0.8920000195503235, 0.8923333287239075, 0.8920000195503235, 0.8923333287239075, 0.8856666684150696, 0.8893333077430725, 0.8920000195503235]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2, 3, 5], [0, 1, 0, 2, 3, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 3, 0, 3, 5], [0, 3, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 36]], "fitness": -0.10371428728103638, "mapping_values": [1, 14, 8, 6, 2, 10, 6, 4, 1, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.multiply(grad, tf.math.square(grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))))", "other_info": {"loss": [81496752128.0, 133612584960.0, 138376167424.0, 135102914560.0, 144590077952.0, 131887316992.0, 138713169920.0, 136605900800.0, 165922865152.0], "accuracy": [0.09787346422672272, 0.10936468094587326, 0.11253467202186584, 0.10857218503952026, 0.09866596013307571, 0.10685510188341141, 0.10593052208423615, 0.1072513535618782, 0.10394927859306335], "val_loss": [124184166400.0, 124184666112.0, 124182806528.0, 124325085184.0, 124304482304.0, 124305260544.0, 124306776064.0, 149339848704.0, 149339340800.0], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09700000286102295, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 2], [0, 2, 0, 3], [16, 44], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 4, 0, 1, 2, 2, 2], [3, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 47, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 17, 9, 8, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma)), tf.math.subtract(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.add(sigma, alpha))", "other_info": {"loss": [66000056320.0, 271.40997314453125, 318.3924255371094, 344.13494873046875, 366.74444580078125, 396.7698974609375], "accuracy": [0.09774138033390045, 0.1018359512090683, 0.09760929644107819, 0.09945846349000931, 0.10434553027153015, 0.10606260597705841], "val_loss": [184.2170867919922, 223.83840942382812, 248.906494140625, 267.97882080078125, 286.9537353515625, 319.0411682128906], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [2, 2, 3, 0, 5], [0, 1, 0, 0], [39, 39, 99], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 6, 3, 5], [0, 2, 3, 3, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 1, 7, 0, 9, 3, 9, 7, 8], [4, 0, 3, 4, 0, 0, 3, 1, 1, 0, 2, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 11, 6, 5, 1, 2, 1, 1, 1, 31, 19, 12, 6], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(grad, tf.math.square(grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(sigma, grad))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.math.add(sigma, alpha), alpha))), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 3, 3, 4], [0, 2, 0, 2, 0, 1], [39, 39, 35], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 6, 2, 1], [0, 0, 0, 3, 1, 0, 3, 1, 2, 0, 5, 0, 6], [16, 99, 20, 99, 61, 1]], "fitness": -0.08371428400278091, "mapping_values": [1, 12, 6, 6, 3, 10, 6, 4, 2, 2, 1, 1, 1, 26, 13, 13, 6], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(alpha, tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.divide_no_nan(tf.math.add(alpha, beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))", "other_info": {"loss": [44.26503372192383, 48.29462432861328, 50.55180358886719, 48.17884826660156, 49.512027740478516, 50.22548294067383, 49.442543029785156, 49.70612716674805, 48.41752243041992], "accuracy": [0.08175934851169586, 0.062475234270095825, 0.07145687192678452, 0.07145687192678452, 0.06590939313173294, 0.07409853488206863, 0.0734381154179573, 0.0664377212524414, 0.06577730923891068], "val_loss": [47.3412971496582, 47.312599182128906, 47.32063674926758, 47.315940856933594, 47.31317138671875, 47.31169891357422, 47.31096267700195, 47.310462951660156, 47.31013488769531], "val_accuracy": [0.060333333909511566, 0.06300000101327896, 0.0846666693687439, 0.08500000089406967, 0.08500000089406967, 0.0846666693687439, 0.08500000089406967, 0.08500000089406967, 0.08500000089406967]}}]