[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8582857251167297, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2238688468933105, 1.869124412536621, 1.3933230638504028, 1.0918315649032593, 0.9443257451057434, 0.8390843868255615, 0.7710801959037781, 0.7299362421035767, 0.6935114860534668, 0.6674115657806396, 0.6354038119316101, 0.6152968406677246, 0.5897361636161804, 0.5725855231285095, 0.5638405680656433, 0.5442764759063721, 0.5341598391532898, 0.5241807699203491, 0.503720223903656, 0.5011091232299805, 0.4845660328865051, 0.4789689779281616, 0.47176894545555115, 0.45992276072502136, 0.4481622576713562, 0.44311314821243286, 0.4311206340789795, 0.4249724745750427, 0.419986367225647, 0.4117550253868103, 0.40130385756492615, 0.3995729684829712, 0.4027615785598755, 0.3935754895210266, 0.3794940710067749, 0.3768126368522644, 0.3748249411582947, 0.3640207350254059, 0.3581063151359558, 0.3506311774253845, 0.35563400387763977, 0.34573838114738464, 0.33890894055366516, 0.33294403553009033, 0.33202794194221497, 0.3283413052558899, 0.32399705052375793, 0.3218799829483032, 0.3189593553543091], "accuracy": [0.26363757252693176, 0.4994056224822998, 0.5608242154121399, 0.6116761565208435, 0.6528860330581665, 0.6980583667755127, 0.720380425453186, 0.7372870445251465, 0.7453441023826599, 0.7549861073493958, 0.7668735980987549, 0.7734777331352234, 0.785629391670227, 0.7890635132789612, 0.7993659973144531, 0.802271842956543, 0.8090080618858337, 0.8164047002792358, 0.8231409192085266, 0.821820080280304, 0.8278959393501282, 0.8314621448516846, 0.8370096683502197, 0.8356888294219971, 0.8449346423149109, 0.8425571322441101, 0.8508783578872681, 0.8465195894241333, 0.8494254350662231, 0.8555012345314026, 0.8570862412452698, 0.8533879518508911, 0.8565579056739807, 0.8625016212463379, 0.8661999702453613, 0.8672566413879395, 0.8671245574951172, 0.8709549307823181, 0.8698983192443848, 0.8757099509239197, 0.8754457831382751, 0.8798044919967651, 0.876370370388031, 0.8802007436752319, 0.8786157965660095, 0.8838990926742554, 0.8836349248886108, 0.8831065893173218, 0.8877294659614563], "val_loss": [2.0418519973754883, 1.5177803039550781, 1.0450528860092163, 0.847861647605896, 0.7565494775772095, 0.6986001133918762, 0.652045488357544, 0.6181030869483948, 0.5959762930870056, 0.5670698881149292, 0.5522129535675049, 0.5359354615211487, 0.516867458820343, 0.5021522641181946, 0.49258285760879517, 0.4806593954563141, 0.47290098667144775, 0.46463480591773987, 0.45526960492134094, 0.4495305120944977, 0.4386371374130249, 0.44001805782318115, 0.4308153986930847, 0.43171414732933044, 0.41903138160705566, 0.4133756458759308, 0.41107478737831116, 0.4045385718345642, 0.4037945568561554, 0.3962145447731018, 0.3949414789676666, 0.3912452459335327, 0.3885493576526642, 0.3874322772026062, 0.381256639957428, 0.3847282826900482, 0.3802882432937622, 0.3775063455104828, 0.37328866124153137, 0.36995598673820496, 0.3673643469810486, 0.3709225654602051, 0.3658565580844879, 0.36272695660591125, 0.3598147928714752, 0.3599708378314972, 0.35877278447151184, 0.3585091829299927, 0.3617962598800659], "val_accuracy": [0.515999972820282, 0.6610000133514404, 0.6809999942779541, 0.7006666660308838, 0.7296666502952576, 0.7436666488647461, 0.753000020980835, 0.7633333206176758, 0.7683333158493042, 0.7856666445732117, 0.7933333516120911, 0.7926666736602783, 0.812666654586792, 0.8190000057220459, 0.8226666450500488, 0.8246666789054871, 0.8263333439826965, 0.8343333601951599, 0.8366666436195374, 0.8370000123977661, 0.843999981880188, 0.8396666646003723, 0.8510000109672546, 0.8416666388511658, 0.8506666421890259, 0.8503333330154419, 0.8519999980926514, 0.8539999723434448, 0.8526666760444641, 0.859000027179718, 0.8553333282470703, 0.859666645526886, 0.8610000014305115, 0.8579999804496765, 0.8636666536331177, 0.8600000143051147, 0.8610000014305115, 0.8610000014305115, 0.862666666507721, 0.8653333187103271, 0.8656666874885559, 0.8659999966621399, 0.8640000224113464, 0.8666666746139526, 0.8656666874885559, 0.8656666874885559, 0.8653333187103271, 0.8640000224113464, 0.8619999885559082]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2, 0], [39, 39, 93], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 5, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [2], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 5, 4, 2, 8], [0, 4, 0, 3, 0, 0, 4, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.math.pow(tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}, "mapping_values": [1, 10, 5, 5, 3, 8, 5, 3, 2, 2, 1, 1, 0, 17, 9, 8, 4], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 4], [0, 1, 0, 0, 2], [51, 39, 62], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 5, 0, 6, 6, 7, 9, 1, 8, 8, 4, 1, 4, 7, 6, 6, 7, 4, 9, 6, 4, 6, 0, 2, 2, 7, 6, 1, 4, 9, 9, 7, 3, 6, 7, 2, 7, 9, 8, 6, 5, 4, 5, 1, 0, 7, 9, 4, 8, 3, 1, 1, 0, 6, 6], [0, 3, 0, 3, 4, 5, 0, 3, 3, 4, 4, 2, 4, 3, 5, 1, 0, 4, 4, 2, 4, 1, 0, 5, 1, 1, 4, 2, 2, 1, 4, 2, 2, 5, 2], [16, 16, 16, 96, 59, 29, 91, 99, 58, 71, 93], [0, 0], [0, 9], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 94, 59, 35, 11, 2, 2, 0, 1, 16, 8, 8, 4], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.pow(tf.math.add(grad, tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(grad, grad), tf.math.pow(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), grad)))), grad), beta), tf.math.divide_no_nan(tf.math.pow(tf.math.divide_no_nan(tf.math.negative(tf.math.add(grad, tf.math.add(grad, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.pow(grad, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad)), grad), tf.math.divide_no_nan(tf.math.square(beta), grad)), tf.math.pow(alpha, tf.math.square(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.negative(grad), alpha))))), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, beta)), tf.math.sqrt(beta))))), tf.math.multiply(tf.math.subtract(alpha, tf.math.subtract(tf.math.negative(grad), beta)), tf.math.divide_no_nan(tf.math.divide_no_nan(beta, grad), beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 2, 1, 1, 1, 14, 7, 7, 5], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [6.693093299865723, 4.054249286651611, 3.5075225830078125, 3552.08837890625, 2352.286376953125, 2786.20166015625, 9.621294967834485e+23, 2.304126739501953, 2.303412914276123, 2.3032424449920654, 2.303921937942505, 2.3053550720214844], "accuracy": [0.09866596013307571, 0.10276053100824356, 0.09919429570436478, 0.1010434553027153, 0.10117553919553757, 0.10487385839223862, 0.10579843819141388, 0.09998679161071777, 0.09998679161071777, 0.09298639744520187, 0.09351472556591034, 0.09298639744520187], "val_loss": [3.5036709308624268, 2.306567907333374, 31.612224578857422, 233.5276641845703, 11.2612943649292, 88063.6171875, 2.3044703006744385, 2.303551197052002, 2.3030056953430176, 2.3030455112457275, 2.303422451019287, 2.3116707801818848], "val_accuracy": [0.09966666996479034, 0.0963333323597908, 0.10166666656732559, 0.10133333504199982, 0.1003333330154419, 0.07833333313465118, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.0963333323597908, 0.1003333330154419, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [88, 55], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 1, 3, 0, 3, 5], [0, 3, 0, 3, 3], [16, 16], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 4, 8, 2, 4, 1], [0, 1, 0, 4, 3, 7], [13, 85], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 9, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 11, 6, 5, 2, 12, 6, 6, 2, 8, 5, 3, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(alpha), tf.math.add(tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad), tf.math.subtract(sigma, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3037221431732178, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]