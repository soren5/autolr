[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8740000128746033, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2213852405548096, 1.8610601425170898, 1.3742715120315552, 1.0813798904418945, 0.9156398773193359, 0.8203328847885132, 0.7657813429832458, 0.7114786505699158, 0.6762914061546326, 0.6521446704864502, 0.620150089263916, 0.5977106094360352, 0.5767162442207336, 0.5675912499427795, 0.5464860200881958, 0.5333510041236877, 0.5178043842315674, 0.5133189558982849, 0.5005046725273132, 0.48285213112831116, 0.47368940711021423, 0.4630490839481354, 0.46045640110969543, 0.44487711787223816, 0.4389477074146271, 0.43652838468551636, 0.42336034774780273, 0.4162669777870178, 0.41733840107917786, 0.40461111068725586, 0.39656883478164673, 0.39204853773117065, 0.3870759904384613, 0.38228654861450195, 0.37910154461860657, 0.36743947863578796, 0.370023250579834, 0.36231422424316406, 0.3588427007198334, 0.34800541400909424, 0.34070634841918945, 0.33875924348831177, 0.3292137086391449, 0.331251323223114, 0.31887686252593994, 0.32249343395233154, 0.3110071122646332, 0.3116166591644287, 0.3038220703601837, 0.30060243606567383, 0.29774701595306396, 0.2890012264251709, 0.2897253930568695, 0.2854708433151245, 0.27753785252571106, 0.2751217186450958, 0.27669650316238403, 0.272306352853775, 0.2672070562839508, 0.2623361349105835, 0.26633378863334656, 0.25725334882736206, 0.2547345757484436, 0.2417498081922531, 0.2411588430404663, 0.2352735996246338, 0.23778092861175537, 0.23775601387023926, 0.22994773089885712, 0.2256367802619934, 0.22317573428153992, 0.22677572071552277, 0.21986110508441925, 0.21963968873023987, 0.2086714655160904, 0.20791879296302795, 0.20294161140918732], "accuracy": [0.27737417817115784, 0.48751816153526306, 0.573107898235321, 0.6173557043075562, 0.672698438167572, 0.7037379741668701, 0.7265883088111877, 0.741909921169281, 0.7526086568832397, 0.7642319202423096, 0.769911527633667, 0.7814027070999146, 0.7913089394569397, 0.7911768555641174, 0.7996301651000977, 0.8012151718139648, 0.8099326491355896, 0.8092722296714783, 0.8189142942428589, 0.8202351331710815, 0.8247259259223938, 0.8330471515655518, 0.8370096683502197, 0.8366134166717529, 0.8400475382804871, 0.8411042094230652, 0.8426892161369324, 0.8481045961380005, 0.852859616279602, 0.8539162874221802, 0.8590674996376038, 0.8582749962806702, 0.8621054291725159, 0.8605204224586487, 0.8659358024597168, 0.8654074668884277, 0.8626337051391602, 0.8688416481018066, 0.8677849769592285, 0.8712190985679626, 0.8798044919967651, 0.8772949576377869, 0.8812574148178101, 0.8780874609947205, 0.8841632604598999, 0.8831065893173218, 0.8877294659614563, 0.8828424215316772, 0.8920882344245911, 0.8901069760322571, 0.8893144726753235, 0.89552241563797, 0.8948619961738586, 0.8906353116035461, 0.8963148593902588, 0.8981640338897705, 0.895918607711792, 0.9014661312103271, 0.8982961177825928, 0.9055606722831726, 0.9027869701385498, 0.9096552729606628, 0.9070135951042175, 0.913089394569397, 0.9161273241043091, 0.9132214784622192, 0.9148064851760864, 0.9132214784622192, 0.9153348207473755, 0.9174481630325317, 0.9173160791397095, 0.9177123308181763, 0.9181085824966431, 0.9190331697463989, 0.9231277108192444, 0.924448549747467, 0.9273543953895569], "val_loss": [2.0327441692352295, 1.4943636655807495, 1.0227853059768677, 0.8162760138511658, 0.7256620526313782, 0.6714284420013428, 0.6256005167961121, 0.5936188697814941, 0.5722257494926453, 0.5469256639480591, 0.5253179669380188, 0.5134577751159668, 0.5004082918167114, 0.48468488454818726, 0.47590747475624084, 0.46811026334762573, 0.46391886472702026, 0.44991445541381836, 0.4441480040550232, 0.4354330599308014, 0.4292530119419098, 0.4293818473815918, 0.41969770193099976, 0.4149732291698456, 0.4088709354400635, 0.40740832686424255, 0.40156176686286926, 0.39355549216270447, 0.3892578184604645, 0.39285337924957275, 0.3881807327270508, 0.3853292763233185, 0.37626025080680847, 0.3816140592098236, 0.3797129988670349, 0.3744952380657196, 0.3717482388019562, 0.37312936782836914, 0.3673596680164337, 0.3642014265060425, 0.3605181574821472, 0.3577117621898651, 0.3590872287750244, 0.3516353368759155, 0.35259121656417847, 0.3520922064781189, 0.35222935676574707, 0.34826892614364624, 0.3525976836681366, 0.346233606338501, 0.3429837226867676, 0.3434585630893707, 0.34315669536590576, 0.3405049741268158, 0.338161826133728, 0.3452514111995697, 0.33641427755355835, 0.3376748859882355, 0.3366853892803192, 0.3364165723323822, 0.3374183475971222, 0.33375784754753113, 0.33793342113494873, 0.3409374952316284, 0.3312993347644806, 0.3324161171913147, 0.3298215866088867, 0.3341618776321411, 0.334015429019928, 0.33047595620155334, 0.332964688539505, 0.33068427443504333, 0.3314550518989563, 0.3304772973060608, 0.33010151982307434, 0.33306482434272766, 0.33477747440338135], "val_accuracy": [0.5559999942779541, 0.6660000085830688, 0.6953333616256714, 0.722000002861023, 0.7463333606719971, 0.7633333206176758, 0.7753333449363708, 0.7799999713897705, 0.7896666526794434, 0.8009999990463257, 0.8063333630561829, 0.8090000152587891, 0.8196666836738586, 0.8256666660308838, 0.8276666402816772, 0.8289999961853027, 0.8266666531562805, 0.8360000252723694, 0.8376666903495789, 0.8389999866485596, 0.8426666855812073, 0.8429999947547913, 0.8446666598320007, 0.8463333249092102, 0.8476666808128357, 0.8503333330154419, 0.8506666421890259, 0.8523333072662354, 0.8546666502952576, 0.8569999933242798, 0.8496666550636292, 0.859000027179718, 0.8610000014305115, 0.8550000190734863, 0.8543333411216736, 0.8556666374206543, 0.8600000143051147, 0.8646666407585144, 0.8656666874885559, 0.8653333187103271, 0.8663333058357239, 0.8690000176429749, 0.8656666874885559, 0.871999979019165, 0.8700000047683716, 0.871999979019165, 0.8726666569709778, 0.8709999918937683, 0.871999979019165, 0.8756666779518127, 0.8763333559036255, 0.8786666393280029, 0.8740000128746033, 0.8790000081062317, 0.8769999742507935, 0.875, 0.8796666860580444, 0.8759999871253967, 0.8756666779518127, 0.8816666603088379, 0.8786666393280029, 0.8790000081062317, 0.878000020980835, 0.8799999952316284, 0.8833333253860474, 0.8796666860580444, 0.8809999823570251, 0.8799999952316284, 0.8816666603088379, 0.8846666812896729, 0.8796666860580444, 0.8859999775886536, 0.8853333592414856, 0.8786666393280029, 0.8833333253860474, 0.8843333125114441, 0.8813333511352539]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 2, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 3, 1, 4, 2, 2, 1, 4, 7, 6], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0, 3, 2, 5, 0, 4], [16, 99, 96, 99, 61, 41, 48]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha), tf.math.add(tf.math.add(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.math.divide_no_nan(beta, grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), grad)))", "other_info": {"loss": [2.304457187652588, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09377889335155487, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 1, 2, 1, 1, 1, 30, 15, 15, 7], "tree_depth": 20}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 1], [6, 2, 8, 0, 1], [0, 1, 0, 2], [74, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 4, 2, 5], [0, 2, 1, 3], [16, 14], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [5, 2, 3, 0, 3, 8], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [5, 2, 3, 0, 3, 5], [0, 2, 0, 2], [16, 16], [0, 1], [0], [0], [19], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 2, 5, 4, 2, 1, 3, 3, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 1, 6, 6, 0, 0], [16, 99, 84, 40, 61, 1, 83, 1, 40]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 1, 0, 1, 1, 2, 1, 1, 1, 34, 19, 15, 9], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.add(alpha, beta)))))), tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.multiply(tf.math.multiply(grad, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [6, 2, 3, 0, 3, 7], [0, 0, 0, 2, 1, 2], [36, 39, 56], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 0, 4, 0], [0, 3, 0, 3, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0], [6, 3, 3, 6, 9, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.pow(tf.math.negative(grad), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}, "mapping_values": [1, 12, 6, 6, 3, 14, 9, 5, 2, 2, 1, 1, 1, 17, 9, 8, 6], "tree_depth": 17}]