[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8697142601013184, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222752571105957, 1.8626248836517334, 1.3895354270935059, 1.100533127784729, 0.9338682889938354, 0.8393546342849731, 0.7778358459472656, 0.7242502570152283, 0.6940627694129944, 0.6580742597579956, 0.6305289268493652, 0.6179961562156677, 0.5994884967803955, 0.5764739513397217, 0.5583072304725647, 0.5359014868736267, 0.5257010459899902, 0.5118460059165955, 0.5073885321617126, 0.4930151402950287, 0.47986018657684326, 0.4781254529953003, 0.4692653715610504, 0.4548068642616272, 0.45355579257011414, 0.43722227215766907, 0.4445788264274597, 0.4340456426143646, 0.41973036527633667, 0.4195266664028168, 0.41299134492874146, 0.40542933344841003, 0.3941822946071625, 0.3898262679576874, 0.3808736801147461, 0.3811350464820862, 0.3743512034416199, 0.36902403831481934, 0.3622302711009979, 0.35904359817504883, 0.3535861670970917, 0.3521246910095215, 0.3471061587333679, 0.33772408962249756, 0.3367602825164795, 0.32357802987098694, 0.3174894154071808, 0.31357619166374207, 0.3136815130710602, 0.31222864985466003, 0.3008948266506195, 0.2990569472312927, 0.293068528175354, 0.3015885055065155, 0.2933877408504486, 0.287899374961853, 0.287148654460907, 0.27967748045921326], "accuracy": [0.2670717239379883, 0.4834235906600952, 0.5634658336639404, 0.6120724081993103, 0.6693964004516602, 0.6995112895965576, 0.7210407853126526, 0.7396644949913025, 0.7481178045272827, 0.7630431652069092, 0.7681944370269775, 0.7753269076347351, 0.7848368883132935, 0.7905164361000061, 0.7965922355651855, 0.8037247657775879, 0.8087438941001892, 0.8183859586715698, 0.81548011302948, 0.8228767514228821, 0.8274996876716614, 0.8251221776008606, 0.8342359066009521, 0.8348963260650635, 0.8367455005645752, 0.8446704745292664, 0.8421608805656433, 0.8499537706375122, 0.8494254350662231, 0.852859616279602, 0.8507462739944458, 0.8549728989601135, 0.8578787446022034, 0.8610487580299377, 0.8676528930664062, 0.8658037185668945, 0.8646149635314941, 0.8732003569602966, 0.8721436858177185, 0.8721436858177185, 0.8759741187095642, 0.8728041052818298, 0.8815215826034546, 0.8794082403182983, 0.8775591254234314, 0.8850878477096558, 0.8862766027450562, 0.8879936337471008, 0.887201189994812, 0.8874653577804565, 0.8936732411384583, 0.8942015767097473, 0.8936732411384583, 0.8905032277107239, 0.8963148593902588, 0.8977677822113037, 0.894069492816925, 0.9026548862457275], "val_loss": [2.038573980331421, 1.5117356777191162, 1.0461225509643555, 0.8445162773132324, 0.7489461302757263, 0.6934718489646912, 0.6527172923088074, 0.6161680221557617, 0.5946274399757385, 0.566457211971283, 0.5573484897613525, 0.5393252968788147, 0.5269418954849243, 0.5106072425842285, 0.5024461150169373, 0.49307364225387573, 0.48667725920677185, 0.47480520606040955, 0.47030192613601685, 0.46082666516304016, 0.45758503675460815, 0.4533132314682007, 0.44584402441978455, 0.44335493445396423, 0.4364855885505676, 0.43181556463241577, 0.43290334939956665, 0.4218498468399048, 0.42098096013069153, 0.4152277410030365, 0.4147293269634247, 0.4146344065666199, 0.4058077037334442, 0.4008793234825134, 0.40888410806655884, 0.3966924548149109, 0.3960324823856354, 0.3952946066856384, 0.39536914229393005, 0.39121150970458984, 0.3852328360080719, 0.38656675815582275, 0.38458552956581116, 0.3802489936351776, 0.37755286693573, 0.3786652386188507, 0.37809574604034424, 0.37428441643714905, 0.3713298738002777, 0.37160855531692505, 0.3701266646385193, 0.36996451020240784, 0.3679843246936798, 0.3644338846206665, 0.3695848286151886, 0.37152230739593506, 0.36792001128196716, 0.3624725341796875], "val_accuracy": [0.5293333530426025, 0.6646666526794434, 0.6899999976158142, 0.7026666402816772, 0.7300000190734863, 0.7493333220481873, 0.7516666650772095, 0.765333354473114, 0.7826666831970215, 0.7839999794960022, 0.7926666736602783, 0.8023333549499512, 0.8029999732971191, 0.8176666498184204, 0.8159999847412109, 0.8243333101272583, 0.82833331823349, 0.8286666870117188, 0.8293333053588867, 0.8336666822433472, 0.8349999785423279, 0.8413333296775818, 0.8389999866485596, 0.8433333039283752, 0.8423333168029785, 0.8443333506584167, 0.8389999866485596, 0.8519999980926514, 0.8523333072662354, 0.8510000109672546, 0.8503333330154419, 0.8453333377838135, 0.8539999723434448, 0.8533333539962769, 0.8529999852180481, 0.8569999933242798, 0.859666645526886, 0.8586666584014893, 0.8513333201408386, 0.8579999804496765, 0.8603333234786987, 0.8616666793823242, 0.8606666922569275, 0.8666666746139526, 0.8636666536331177, 0.8629999756813049, 0.8640000224113464, 0.8663333058357239, 0.8690000176429749, 0.8666666746139526, 0.8666666746139526, 0.8696666955947876, 0.871666669845581, 0.8700000047683716, 0.8676666617393494, 0.8640000224113464, 0.8709999918937683, 0.8683333396911621]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 2, 0, 3], [16, 75], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [1, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 49, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 22, 12, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.square(alpha))))), beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3135781288146973, 2.3308522701263428, 2.39542555809021, 2.5408716201782227, 2.78024959564209, 3.1433603763580322], "accuracy": [0.09338264167308807, 0.1018359512090683, 0.1018359512090683, 0.10236428678035736, 0.10302469879388809, 0.1018359512090683], "val_loss": [2.310457944869995, 2.327669382095337, 2.3773298263549805, 2.4752702713012695, 2.6439545154571533, 2.905738592147827], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 1, 8, 3, 0], [0, 0, 0, 2, 0, 3], [39, 39, 82, 97], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 2, 3, 0, 5, 5, 5, 8, 6, 8], [3, 2, 0, 3], [98, 16], [0, 0, 0, 1, 0, 1, 1, 1], [0, 4, 6, 6], [0, 2, 4, 6], [99], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 0, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 9, 6, 4, 14, 10, 4, 1, 8, 4, 4, 1, 13, 7, 6, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad))))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.square(grad)), tf.math.square(beta)), tf.math.square(tf.math.sqrt(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 6, 3], [2, 1, 0, 2, 0, 0], [39, 39, 18], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 8], [0, 3, 3, 3], [16, 16], [1, 1], [8], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [4, 3, 3, 6, 8, 1, 4, 1, 6, 2, 8, 3, 9], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 3, 10, 6, 4, 1, 1, 0, 1, 1, 23, 13, 10, 6], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(grad, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.sqrt(tf.math.multiply(alpha, beta)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 4, 9], [0, 1, 0, 2], [39, 39, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 4, 7], [0, 2, 2, 3, 0, 5], [16, 16], [0, 1], [0], [3], [51], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 6, 8, 1, 4, 5, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 98, 99, 61, 1]], "fitness": -0.09399999678134918, "mapping_values": [1, 11, 7, 4, 3, 14, 8, 6, 2, 2, 1, 1, 0, 15, 8, 7, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.pow(beta, tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.310238838195801, 2.308964252471924, 2.311410903930664, 2.310394048690796, 2.309530735015869, 2.3104665279388428], "accuracy": [0.09113723784685135, 0.09760929644107819, 0.08968432247638702, 0.09008057415485382, 0.09536388516426086, 0.09126931428909302], "val_loss": [2.3091375827789307, 2.3091375827789307, 2.3091375827789307, 2.3091375827789307, 2.3091375827789307, 2.3091375827789307], "val_accuracy": [0.08733333647251129, 0.08733333647251129, 0.08733333647251129, 0.08733333647251129, 0.08733333647251129, 0.08733333647251129]}}]