[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.854285717010498, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2229394912719727, 1.8689308166503906, 1.3893502950668335, 1.080422043800354, 0.9148109555244446, 0.8161072134971619, 0.7626185417175293, 0.7162543535232544, 0.674174427986145, 0.6480891108512878, 0.6207149624824524, 0.6044464707374573, 0.5870298147201538, 0.5647507905960083, 0.548153281211853, 0.5342192649841309, 0.5166134238243103, 0.5108271837234497, 0.49661359190940857, 0.49139705300331116, 0.47918418049812317, 0.4730589985847473, 0.4637223482131958, 0.4555014967918396, 0.44333040714263916, 0.4407161772251129, 0.4314422011375427, 0.42400482296943665, 0.41947925090789795, 0.41127920150756836, 0.4027918577194214, 0.3957884907722473, 0.39254316687583923, 0.3907279372215271, 0.38021042943000793, 0.3727366626262665, 0.3724074065685272, 0.37268099188804626, 0.3612067997455597, 0.35700273513793945, 0.35406196117401123, 0.34591299295425415, 0.3326683044433594, 0.3367520272731781, 0.32891079783439636, 0.32452645897865295, 0.3201453685760498, 0.31679078936576843, 0.3174000680446625, 0.3021484315395355, 0.3048843443393707, 0.29525911808013916, 0.29280391335487366, 0.28894343972206116, 0.29172730445861816, 0.28917810320854187, 0.2834053039550781, 0.2771187722682953], "accuracy": [0.2719587981700897, 0.48910316824913025, 0.5620129704475403, 0.6239598393440247, 0.6692643165588379, 0.7009642124176025, 0.724210798740387, 0.7383436560630798, 0.7541936039924622, 0.7589486241340637, 0.7714964747428894, 0.7798177003860474, 0.7829877138137817, 0.7921014428138733, 0.8010830879211426, 0.7989697456359863, 0.8100647330284119, 0.8145555257797241, 0.8169330358505249, 0.8230088353157043, 0.8253863453865051, 0.8294808864593506, 0.8310658931732178, 0.8325188159942627, 0.8400475382804871, 0.8424250483512878, 0.8469158411026001, 0.8482366800308228, 0.8486329317092896, 0.8527275323867798, 0.8536521196365356, 0.8549728989601135, 0.8617091774940491, 0.8601241707801819, 0.8646149635314941, 0.8648791313171387, 0.8648791313171387, 0.8642187118530273, 0.8663320541381836, 0.8761062026023865, 0.8725399374961853, 0.8771628737449646, 0.8778232932090759, 0.8779553771018982, 0.8823140859603882, 0.883238673210144, 0.8823140859603882, 0.884691596031189, 0.8853520154953003, 0.8922203183174133, 0.8865407705307007, 0.8910315632820129, 0.8934090733528137, 0.8919561505317688, 0.8920882344245911, 0.895918607711792, 0.8936732411384583, 0.8967111110687256], "val_loss": [2.0461599826812744, 1.534070611000061, 1.0670018196105957, 0.861664891242981, 0.7664803266525269, 0.7035238146781921, 0.6647098064422607, 0.6292352080345154, 0.6037164926528931, 0.5898829102516174, 0.5636540651321411, 0.5486724376678467, 0.5460833311080933, 0.5275999903678894, 0.5153279900550842, 0.5076813697814941, 0.4972873628139496, 0.48474860191345215, 0.4783434569835663, 0.47441089153289795, 0.4652407765388489, 0.463341623544693, 0.4615360498428345, 0.4518143832683563, 0.4477788805961609, 0.442290335893631, 0.4341849088668823, 0.431954562664032, 0.4304013252258301, 0.4250478446483612, 0.4220447242259979, 0.4219432473182678, 0.42013102769851685, 0.4149021506309509, 0.40866413712501526, 0.41145142912864685, 0.4118993282318115, 0.4033098518848419, 0.4076032340526581, 0.4038151502609253, 0.3986492455005646, 0.39680972695350647, 0.39914387464523315, 0.39254122972488403, 0.39258354902267456, 0.38888415694236755, 0.38474324345588684, 0.3859916925430298, 0.38470613956451416, 0.38285303115844727, 0.3827850818634033, 0.38333529233932495, 0.3802209794521332, 0.37874746322631836, 0.38097691535949707, 0.3771921396255493, 0.38047948479652405, 0.3748422861099243], "val_accuracy": [0.5339999794960022, 0.6536666750907898, 0.6813333630561829, 0.7013333439826965, 0.7233333587646484, 0.7453333139419556, 0.7573333382606506, 0.7670000195503235, 0.7786666750907898, 0.7776666879653931, 0.7960000038146973, 0.8046666383743286, 0.8053333163261414, 0.8076666593551636, 0.812666654586792, 0.8209999799728394, 0.8163333535194397, 0.824999988079071, 0.8373333215713501, 0.8323333263397217, 0.8370000123977661, 0.8349999785423279, 0.8363333344459534, 0.843666672706604, 0.8393333554267883, 0.8453333377838135, 0.8483333587646484, 0.8500000238418579, 0.8473333120346069, 0.8516666889190674, 0.8523333072662354, 0.847000002861023, 0.8523333072662354, 0.8513333201408386, 0.8533333539962769, 0.8553333282470703, 0.8543333411216736, 0.8539999723434448, 0.859666645526886, 0.8556666374206543, 0.8603333234786987, 0.859000027179718, 0.8566666841506958, 0.859666645526886, 0.8610000014305115, 0.8629999756813049, 0.8636666536331177, 0.8633333444595337, 0.8619999885559082, 0.8619999885559082, 0.8659999966621399, 0.8636666536331177, 0.8683333396911621, 0.8669999837875366, 0.8683333396911621, 0.8659999966621399, 0.8676666617393494, 0.8659999966621399]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [8, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 6], [0, 2, 0, 3, 4], [8, 33], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 3, 5, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 2, 0, 3, 1, 2, 0], [16, 99, 63, 99, 75, 60]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 7, 5, 2, 2, 1, 1, 1, 20, 11, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(beta, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.add(alpha, tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 29], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 9, 8, 1, 4, 1, 4, 2, 8], [0, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 1, 0, 1, 1, 2, 1, 1, 1, 16, 9, 7, 4], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(grad, sigma)))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 1, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 1, 3], [16, 16], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 4, 5, 4, 8, 4, 3, 1, 6, 8, 6, 2, 3, 1, 7, 7, 0, 3, 3, 1, 2, 4, 2, 1, 4, 3, 7, 5, 1, 2, 1, 5, 7, 5, 5, 0, 4, 2, 9, 2, 7, 3, 5, 9], [0, 7, 7, 6, 5, 0, 0, 1, 6, 5, 3, 4, 0, 5, 0, 3, 6, 6, 7, 7, 0, 3, 6, 5, 2, 7, 7, 1, 6, 2], [99, 56, 98, 44, 84, 98, 8, 93], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 8, 9, 4], [0, 3, 0, 3, 0, 0, 3, 1, 2, 0], [16, 21, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 6, 3, 3, 1, 74, 44, 30, 8, 21, 12, 9, 5], "tree_depth": 48, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(tf.math.sqrt(tf.math.pow(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(grad, grad), tf.math.sqrt(grad)), tf.math.divide_no_nan(grad, tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), alpha)), grad), grad), tf.math.negative(sigma)))), grad)), tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), grad), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.pow(grad, tf.math.add(tf.math.subtract(tf.math.pow(grad, tf.math.multiply(tf.math.add(tf.math.square(tf.math.subtract(grad, tf.math.add(grad, tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.square(tf.math.square(tf.math.negative(sigma))), tf.math.pow(tf.math.add(grad, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.square(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))))))))), grad), alpha)), grad), beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(sigma, tf.math.pow(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, beta))", "other_info": {"loss": [262828627853312.0, 5.596006090748723e+16, 5.660306132036485e+17, 1.6433189463187784e+18, 3.0482755914857185e+18, 4.66851427690899e+18], "accuracy": [0.1018359512090683, 0.09800554811954498, 0.09377889335155487, 0.10460969805717468, 0.1010434553027153, 0.10421344637870789], "val_loss": [3246864547708928.0, 1.813459746422784e+17, 8.602824991446139e+17, 1.852882976354861e+18, 3.012352622460928e+18, 4.372767089513988e+18], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 5, 3, 2, 3], [0, 1, 1, 2], [24, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [76, 16], [0, 0, 1, 0, 1, 1], [0, 2, 2], [0, 7, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 1, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09114285558462143, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 6, 3, 3, 1, 21, 11, 10, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(grad, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma))), tf.math.subtract(grad, tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3090431690216064, 2.3101346492767334, 2.3105626106262207, 2.309717893600464, 2.3098196983337402, 2.309983491897583], "accuracy": [0.09708096832036972, 0.08968432247638702, 0.08836349099874496, 0.08849557489156723, 0.08902391046285629, 0.09219389408826828], "val_loss": [2.3087637424468994, 2.3087637424468994, 2.3087637424468994, 2.3087637424468994, 2.3087637424468994, 2.3087637424468994], "val_accuracy": [0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179]}}]