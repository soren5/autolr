[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8648571372032166, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2258198261260986, 1.8741443157196045, 1.3887313604354858, 1.099722981452942, 0.9279040694236755, 0.8381129503250122, 0.7708005905151367, 0.7200850248336792, 0.6903433203697205, 0.6591554284095764, 0.6380264163017273, 0.6110653281211853, 0.5905919671058655, 0.5660240054130554, 0.550103485584259, 0.5352847576141357, 0.5204064846038818, 0.5164684057235718, 0.504604160785675, 0.4938916265964508, 0.4826078712940216, 0.4749329090118408, 0.46567434072494507, 0.45462891459465027, 0.4517197608947754, 0.438758909702301, 0.41918542981147766, 0.41873329877853394, 0.41493791341781616, 0.39724645018577576, 0.4031212031841278, 0.39502400159835815, 0.3850890100002289, 0.3888383209705353, 0.37289971113204956, 0.369423508644104, 0.3658696115016937, 0.35849589109420776, 0.35447826981544495, 0.35353344678878784, 0.34929823875427246, 0.3410452902317047, 0.3266061842441559, 0.3353603184223175, 0.3210497200489044, 0.3231596350669861, 0.31636151671409607, 0.3064209818840027, 0.3042672574520111, 0.30418476462364197, 0.2963971793651581], "accuracy": [0.2662792205810547, 0.4928014874458313, 0.5635979175567627, 0.6207898855209351, 0.6708492636680603, 0.7025492191314697, 0.7288337349891663, 0.7437590956687927, 0.7434949278831482, 0.7644960880279541, 0.7737419009208679, 0.7832518815994263, 0.7885351777076721, 0.8001585006713867, 0.7981772422790527, 0.8064984679222107, 0.8183859586715698, 0.8158763647079468, 0.8191784620285034, 0.8241975903511047, 0.8310658931732178, 0.832650899887085, 0.8354246616363525, 0.8407079577445984, 0.8436138033866882, 0.8432175517082214, 0.8539162874221802, 0.8558974862098694, 0.8524633646011353, 0.8577466607093811, 0.8581429123878479, 0.8609166741371155, 0.8617091774940491, 0.8622375130653381, 0.8702945709228516, 0.8681812286376953, 0.8698983192443848, 0.8751816153526306, 0.8714832663536072, 0.8708229064941406, 0.8728041052818298, 0.8767666220664978, 0.8833707571029663, 0.8802007436752319, 0.8819178342819214, 0.8816536664962769, 0.8862766027450562, 0.8906353116035461, 0.8924844861030579, 0.8927486538887024, 0.8897107243537903], "val_loss": [2.044692277908325, 1.5244247913360596, 1.0461342334747314, 0.8409943580627441, 0.7484026551246643, 0.6877543330192566, 0.6483131051063538, 0.6131230592727661, 0.5904862880706787, 0.5687455534934998, 0.5488060116767883, 0.5304468274116516, 0.5159795880317688, 0.506151556968689, 0.4940400719642639, 0.4833357334136963, 0.47312915325164795, 0.4699991047382355, 0.4566892981529236, 0.4524223506450653, 0.443505197763443, 0.43958061933517456, 0.436183363199234, 0.4277682602405548, 0.42293480038642883, 0.4173007309436798, 0.41227027773857117, 0.4089098274707794, 0.4016546905040741, 0.4049490690231323, 0.40063968300819397, 0.3973604738712311, 0.3919059634208679, 0.3933635354042053, 0.39570873975753784, 0.39101535081863403, 0.3860570192337036, 0.37952694296836853, 0.3814632296562195, 0.3804628849029541, 0.37213727831840515, 0.37218761444091797, 0.3697825074195862, 0.36800843477249146, 0.36633968353271484, 0.3690168559551239, 0.3694310188293457, 0.36284005641937256, 0.3622151017189026, 0.3599427342414856, 0.35922950506210327], "val_accuracy": [0.5636666417121887, 0.6643333435058594, 0.6869999766349792, 0.7006666660308838, 0.734333336353302, 0.7563333511352539, 0.7696666717529297, 0.778333306312561, 0.7896666526794434, 0.7940000295639038, 0.8040000200271606, 0.8086666464805603, 0.8173333406448364, 0.8220000267028809, 0.8236666917800903, 0.8293333053588867, 0.831333339214325, 0.8276666402816772, 0.840666651725769, 0.840666651725769, 0.8493333458900452, 0.8426666855812073, 0.843666672706604, 0.8523333072662354, 0.8526666760444641, 0.8550000190734863, 0.8560000061988831, 0.8583333492279053, 0.859666645526886, 0.8616666793823242, 0.8603333234786987, 0.862666666507721, 0.8613333106040955, 0.8619999885559082, 0.8643333315849304, 0.862666666507721, 0.8646666407585144, 0.8676666617393494, 0.8643333315849304, 0.8659999966621399, 0.871666669845581, 0.8690000176429749, 0.8723333477973938, 0.8679999709129333, 0.8713333606719971, 0.8759999871253967, 0.8713333606719971, 0.8756666779518127, 0.8736666440963745, 0.8730000257492065, 0.8743333220481873]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 8, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [82, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 8, 9, 6, 4, 7, 4], [4, 0, 0, 3, 0, 0, 3, 4, 2, 0, 2, 5, 7, 3], [46, 23, 53, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 6, 3, 3, 2, 2, 1, 1, 1, 31, 17, 14, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.add(tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), beta), grad), grad), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 8, 3, 8, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [0, 2, 3, 5, 3, 5, 8, 3, 9, 9], [0, 2, 0, 2], [16, 16, 43, 48], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 74, 96, 99, 18, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 13, 10, 3, 4, 2, 1, 1, 1, 20, 10, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 3, 0, 9, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 0, 1, 0, 1, 1], [0, 5, 2, 3, 5], [4, 5, 5], [8], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [6, 3, 3, 6, 8, 1, 4, 5, 4, 2, 8], [4, 4, 0, 3, 0, 0, 3, 0, 2, 0], [16, 99, 61, 15, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 8, 5, 3, 0, 15, 8, 7, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.add(tf.math.multiply(grad, tf.math.square(grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 5, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 6, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 5, 1, 4, 1, 4, 3, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 1], [16, 99, 96, 99, 61, 1]], "fitness": -0.09228571504354477, "mapping_values": [1, 2, 1, 1, 1, 6, 3, 3, 2, 2, 1, 1, 1, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), alpha), tf.math.multiply(tf.math.sqrt(beta), alpha))", "other_info": {"loss": [2.311535596847534, 2.3102869987487793, 2.310394763946533, 2.3105976581573486, 2.3114728927612305, 2.3112387657165527, 2.309581756591797, 2.3108527660369873, 2.3112411499023438, 2.3094050884246826, 2.3097920417785645, 2.3099803924560547], "accuracy": [0.09074098616838455, 0.08928807079792023, 0.09179764986038208, 0.09721305221319199, 0.08875974267721176, 0.09377889335155487, 0.08942015469074249, 0.09140139818191528, 0.08889182657003403, 0.09351472556591034, 0.09206181764602661, 0.0878351628780365], "val_loss": [2.308609962463379, 2.3086094856262207, 2.308608055114746, 2.308605432510376, 2.3086020946502686, 2.3085973262786865, 2.308591365814209, 2.308584213256836, 2.3085758686065674, 2.308566093444824, 2.3085548877716064, 2.308542251586914], "val_accuracy": [0.08733333647251129, 0.08733333647251129, 0.08733333647251129, 0.08733333647251129, 0.08733333647251129, 0.08766666799783707, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08733333647251129]}}]