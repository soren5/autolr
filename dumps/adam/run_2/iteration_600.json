[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8537142872810364, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221813678741455, 1.8568272590637207, 1.3811461925506592, 1.089511752128601, 0.9373723268508911, 0.8328507542610168, 0.7769524455070496, 0.732130229473114, 0.6920796632766724, 0.6687995791435242, 0.6355475187301636, 0.6221270561218262, 0.5989153385162354, 0.5800391435623169, 0.5632070302963257, 0.5496851801872253, 0.5400943756103516, 0.5285633206367493, 0.5193172097206116, 0.5057343244552612, 0.49443531036376953, 0.4916498064994812, 0.4836496412754059, 0.46510687470436096, 0.4616985321044922, 0.45188066363334656, 0.4368443489074707, 0.4410790801048279, 0.42162391543388367, 0.4179779291152954, 0.41868704557418823, 0.42119866609573364, 0.41354644298553467, 0.39807379245758057, 0.3873182237148285], "accuracy": [0.27565711736679077, 0.49729230999946594, 0.5658433437347412, 0.6236956715583801, 0.6643772125244141, 0.7033417224884033, 0.7197200059890747, 0.7375511527061462, 0.748249888420105, 0.7557786107063293, 0.7691190242767334, 0.7716285586357117, 0.7825914621353149, 0.7844406366348267, 0.7984414100646973, 0.8038568496704102, 0.8030643463134766, 0.8099326491355896, 0.8115176558494568, 0.8183859586715698, 0.8198388814926147, 0.8249900937080383, 0.8247259259223938, 0.8321225643157959, 0.8347642421722412, 0.8378021121025085, 0.842028796672821, 0.8412362933158875, 0.8485008478164673, 0.8467837572097778, 0.8518029451370239, 0.8481045961380005, 0.8519350290298462, 0.8584070801734924, 0.8625016212463379], "val_loss": [2.0320119857788086, 1.5012805461883545, 1.0390223264694214, 0.8418371677398682, 0.7556899189949036, 0.6961092352867126, 0.6534947156906128, 0.6276958584785461, 0.5911622643470764, 0.5706269145011902, 0.5499305725097656, 0.5385408997535706, 0.5182684063911438, 0.5060207843780518, 0.4973026514053345, 0.48223641514778137, 0.4764963388442993, 0.4665251076221466, 0.457597017288208, 0.45361319184303284, 0.44547736644744873, 0.43977612257003784, 0.4311676323413849, 0.42340242862701416, 0.4199281930923462, 0.42102116346359253, 0.4137309491634369, 0.40502893924713135, 0.4034598767757416, 0.3965472877025604, 0.40210074186325073, 0.3932851552963257, 0.3898051083087921, 0.38663923740386963, 0.38310930132865906], "val_accuracy": [0.5180000066757202, 0.6460000276565552, 0.6773333549499512, 0.703000009059906, 0.722000002861023, 0.7403333187103271, 0.7493333220481873, 0.7673333287239075, 0.7749999761581421, 0.7760000228881836, 0.7883333563804626, 0.7943333387374878, 0.8050000071525574, 0.8053333163261414, 0.8090000152587891, 0.8206666707992554, 0.8173333406448364, 0.8230000138282776, 0.8276666402816772, 0.8289999961853027, 0.8306666612625122, 0.8376666903495789, 0.8426666855812073, 0.8383333086967468, 0.8349999785423279, 0.8450000286102295, 0.8423333168029785, 0.846666693687439, 0.8446666598320007, 0.8556666374206543, 0.8503333330154419, 0.8493333458900452, 0.8533333539962769, 0.8550000190734863, 0.8553333282470703]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 15]], "fitness": -0.19857142865657806, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 0, 16, 8, 8, 5], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [47.968631744384766, 1.4996024686469448e+19, 2.7064670032729473e+19, 2.7635855328242827e+19, 1.5438576153985147e+33, 7.299648377110527e+33, 6.829283155663732e+33, 8.049962596981357e+33, 7.008845120422038e+33], "accuracy": [0.10249637067317963, 0.10276053100824356, 0.09179764986038208, 0.11715757846832275, 0.13393211364746094, 0.1372341811656952, 0.14951789379119873, 0.17738740146160126, 0.16840575635433197], "val_loss": [270.0787658691406, 2.5448401134038286e+19, 2.60663068776391e+19, 2.6067347015638974e+19, 7.863010130188518e+33, 7.863011987098577e+33, 7.863011987098577e+33, 7.863011987098577e+33, 2.3041789531707764], "val_accuracy": [0.11566666513681412, 0.07800000160932541, 0.09233333170413971, 0.2163333296775818, 0.20499999821186066, 0.16066665947437286, 0.13099999725818634, 0.16500000655651093, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 3, 0, 6, 3], [0, 1, 0, 2, 2], [39, 79], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 9, 4, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 1, 1, 4, 1, 4, 2, 8, 3, 6, 3, 0, 8, 6, 1, 4, 9, 7], [0, 0, 3, 3, 0, 0, 3, 1, 2, 0, 5, 6, 5, 3, 7, 3, 0], [16, 99, 96, 99, 61, 1, 48]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 2, 2, 0, 1, 2, 1, 1, 1, 38, 21, 17, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma))), tf.math.sqrt(tf.math.multiply(alpha, beta))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.negative(grad)), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.pow(sigma, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 15], [0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 4, 8, 0, 3, 0], [0, 5, 1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [6, 5, 3, 6, 3, 1, 6, 1, 2, 2, 2, 2, 3, 8, 7, 2, 8, 1], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 4, 4, 1, 6, 1, 0], [0, 99, 84, 99, 61, 1, 21]], "fitness": -0.0925714299082756, "mapping_values": [1, 7, 4, 3, 2, 10, 6, 4, 2, 9, 6, 3, 1, 34, 18, 16, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.sqrt(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.negative(grad), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.add(tf.math.add(alpha, beta), tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)))))), grad))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.sqrt(tf.math.subtract(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [2.3095128536224365, 2.309495687484741, 2.3086440563201904, 2.3098037242889404, 2.310101270675659, 2.309624433517456], "accuracy": [0.08809932321310043, 0.0936468094587326, 0.0952318087220192, 0.09496764093637466, 0.09047681838274002, 0.09377889335155487], "val_loss": [2.3088889122009277, 2.3088889122009277, 2.3088889122009277, 2.3088889122009277, 2.3088889122009277, 2.3088889122009277], "val_accuracy": [0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3, 6, 5], [0, 1, 2, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 2, 3, 0, 6, 5, 3, 7, 3, 3, 6, 2, 5, 4, 7, 0, 6, 5, 6], [0, 3, 3, 3, 5, 0, 3, 3, 5, 3, 3, 5, 3, 0, 0], [16, 16, 13, 28], [0, 1], [0], [0], [99], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 0, 4, 1, 8], [0, 0, 0, 3, 0, 0, 3, 1, 0, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09114285558462143, "mapping_values": [1, 12, 7, 5, 1, 34, 19, 15, 4, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.square(grad), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.divide_no_nan(grad, tf.math.square(tf.math.multiply(grad, tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(grad, tf.math.square(tf.math.pow(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(grad, grad))), grad))), grad), grad), grad), tf.math.square(tf.math.divide_no_nan(grad, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))))), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)), alpha)", "other_info": {"loss": [2.310122489929199, 2.310654401779175, 2.30930233001709, 2.3084182739257812, 2.31144642829895, 2.309980869293213], "accuracy": [0.09259014576673508, 0.08889182657003403, 0.09232597798109055, 0.09457138925790787, 0.08875974267721176, 0.09206181764602661], "val_loss": [2.308772563934326, 2.308772563934326, 2.308772563934326, 2.308772563934326, 2.308772563934326, 2.308772563934326], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}]