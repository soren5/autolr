[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8631428480148315, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2258946895599365, 1.8746371269226074, 1.4139083623886108, 1.0992252826690674, 0.9534434080123901, 0.8413861989974976, 0.7800994515419006, 0.7381956577301025, 0.7032806873321533, 0.6742111444473267, 0.644365131855011, 0.6213172078132629, 0.6055248975753784, 0.5760080218315125, 0.5614896416664124, 0.555978000164032, 0.5432997345924377, 0.5266386866569519, 0.5186425447463989, 0.49984270334243774, 0.49299299716949463, 0.485698401927948, 0.47704002261161804, 0.46339187026023865, 0.4552355110645294, 0.44609180092811584, 0.4369223415851593, 0.44110068678855896, 0.4302563965320587, 0.4262981712818146, 0.4133093059062958, 0.40812399983406067, 0.3961372673511505, 0.39588063955307007, 0.39734891057014465, 0.3803645074367523, 0.37560147047042847, 0.3751949667930603, 0.36559346318244934, 0.3607490658760071, 0.35964202880859375, 0.3480127155780792, 0.34473031759262085, 0.34467023611068726, 0.3358440101146698, 0.3310343325138092, 0.3271176218986511, 0.3208753764629364, 0.32044702768325806, 0.3139563202857971], "accuracy": [0.2739400267601013, 0.4913485646247864, 0.5563333630561829, 0.6170915365219116, 0.663848876953125, 0.6993792057037354, 0.7131158113479614, 0.7331924438476562, 0.7461365461349487, 0.7565711140632629, 0.7652885913848877, 0.7724210619926453, 0.7804781198501587, 0.7938185334205627, 0.7989697456359863, 0.7988376617431641, 0.8031964302062988, 0.81548011302948, 0.8146876096725464, 0.8232730031013489, 0.8216879963874817, 0.828820526599884, 0.8280280232429504, 0.835160493850708, 0.8405758738517761, 0.8392550349235535, 0.8453308939933777, 0.8444063067436218, 0.8454629778862, 0.8531237840652466, 0.8564258217811584, 0.8543124794960022, 0.8622375130653381, 0.8625016212463379, 0.8601241707801819, 0.8603883385658264, 0.8661999702453613, 0.8701624870300293, 0.8733324408531189, 0.8702945709228516, 0.8732003569602966, 0.8728041052818298, 0.8749174475669861, 0.8758420348167419, 0.8798044919967651, 0.8824461698532104, 0.8812574148178101, 0.884691596031189, 0.8893144726753235, 0.8840311765670776], "val_loss": [2.042188882827759, 1.5129894018173218, 1.0413494110107422, 0.8361386656761169, 0.7546293139457703, 0.7038095593452454, 0.6565601825714111, 0.6243496537208557, 0.5996124148368835, 0.5789790749549866, 0.5620265007019043, 0.5462297201156616, 0.5262833833694458, 0.5165033936500549, 0.5080867409706116, 0.49783578515052795, 0.4909067451953888, 0.47513318061828613, 0.4654543995857239, 0.46432438492774963, 0.4514220654964447, 0.44431591033935547, 0.44235754013061523, 0.44413983821868896, 0.4259931147098541, 0.42211365699768066, 0.42190372943878174, 0.4190079867839813, 0.41479915380477905, 0.40425944328308105, 0.41199228167533875, 0.4021071791648865, 0.40083980560302734, 0.40065819025039673, 0.3909386098384857, 0.394096314907074, 0.3833775222301483, 0.38119685649871826, 0.3827052414417267, 0.38250744342803955, 0.38059261441230774, 0.3752831220626831, 0.3724775016307831, 0.3717251121997833, 0.36353132128715515, 0.3633544147014618, 0.3616763651371002, 0.3632678687572479, 0.3557184934616089, 0.3573608696460724], "val_accuracy": [0.5586666464805603, 0.6549999713897705, 0.675000011920929, 0.7023333311080933, 0.7279999852180481, 0.7429999709129333, 0.7593333125114441, 0.7639999985694885, 0.7766666412353516, 0.7870000004768372, 0.7976666688919067, 0.8016666769981384, 0.8106666803359985, 0.812333345413208, 0.8146666884422302, 0.8186666369438171, 0.8216666579246521, 0.8276666402816772, 0.8323333263397217, 0.8270000219345093, 0.8399999737739563, 0.8399999737739563, 0.8386666774749756, 0.8386666774749756, 0.8486666679382324, 0.8443333506584167, 0.8456666469573975, 0.8513333201408386, 0.8556666374206543, 0.8526666760444641, 0.8489999771118164, 0.8586666584014893, 0.8560000061988831, 0.8500000238418579, 0.8600000143051147, 0.8556666374206543, 0.8643333315849304, 0.8606666922569275, 0.8653333187103271, 0.8629999756813049, 0.8573333621025085, 0.8709999918937683, 0.8679999709129333, 0.8653333187103271, 0.875333309173584, 0.8679999709129333, 0.8713333606719971, 0.8706666827201843, 0.8730000257492065, 0.8730000257492065]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3, 9], [0, 1, 0, 2], [25, 82, 81], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 6], [0, 3, 0, 3, 3], [16, 16], [0, 1], [0], [1], [15], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [6, 8, 3, 6, 8, 1, 4, 1, 4, 2, 8, 9], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0], [16, 15, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))))), tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}, "mapping_values": [1, 9, 6, 3, 3, 12, 7, 5, 2, 2, 1, 1, 0, 20, 12, 8, 5], "tree_depth": 17}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 4, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 9, 3, 0, 3, 2], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [8, 3, 0, 6, 8, 1, 4, 1, 4, 2, 8, 8], [0, 0, 0, 3, 3, 0, 4, 1, 2, 0], [16, 99, 96, 99, 66, 97]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 20, 12, 8, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), grad)), tf.math.sqrt(tf.math.sqrt(alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 2, 3, 0, 1, 3], [0, 1, 0, 2, 2, 1], [39, 59], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 2, 3, 0, 3, 3], [0, 2, 0, 3], [23, 74], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 3, 6, 8, 1, 4, 9, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 2, 9, 5, 4, 2, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad))), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [40.668487548828125, 7001.591796875, 136577.109375, 1041989.5625, 4730097.5, 16331285.0], "accuracy": [0.1006472036242485, 0.09721305221319199, 0.10381719470024109, 0.1006472036242485, 0.09972262382507324, 0.09813763201236725], "val_loss": [409.59649658203125, 27836.158203125, 334668.09375, 1935932.875, 7518369.0, 22722398.0], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 6, 0, 2], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [6, 8, 3, 0, 3, 8], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 5, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 4], [61, 99, 96, 99, 61, 9]], "fitness": -0.09914285689592361, "mapping_values": [1, 7, 4, 3, 1, 10, 6, 4, 2, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.math.negative(alpha)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.square(grad))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), alpha)", "other_info": {"loss": [2.569065289672476e+30, 3.2320429292322326e+30, 3.130564184776506e+30, 2.872480282953536e+30, 3.003853042845238e+30, 3.115750914477313e+30], "accuracy": [0.0944393053650856, 0.10276053100824356, 0.10077928751707077, 0.10038304328918457, 0.10289261490106583, 0.10593052208423615], "val_loss": [2.2012896547224996e+30, 2.2012896547224996e+30, 2.2012896547224996e+30, 2.2012896547224996e+30, 2.2012896547224996e+30, 2.2012896547224996e+30], "val_accuracy": [0.10633333027362823, 0.10633333027362823, 0.10633333027362823, 0.10633333027362823, 0.10633333027362823, 0.10599999874830246]}}]