[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8671428561210632, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.219883680343628, 1.8646430969238281, 1.3936896324157715, 1.0893877744674683, 0.9355166554450989, 0.842409610748291, 0.7710077166557312, 0.7305188179016113, 0.6986204385757446, 0.6727396249771118, 0.6498048901557922, 0.6268044114112854, 0.6140111088752747, 0.5887817740440369, 0.578136682510376, 0.5584238767623901, 0.5524672269821167, 0.5343066453933716, 0.5221304893493652, 0.5067646503448486, 0.49799448251724243, 0.49728572368621826, 0.4813750684261322, 0.47350600361824036, 0.46665558218955994, 0.46120086312294006, 0.4508947730064392, 0.4514182507991791, 0.43237996101379395, 0.4303359389305115, 0.42297977209091187, 0.42136141657829285, 0.41076475381851196, 0.4052966833114624, 0.39923855662345886, 0.38885870575904846, 0.3861909806728363, 0.373085081577301, 0.37552767992019653, 0.36961859464645386, 0.3645276427268982, 0.3621616065502167, 0.3508068323135376, 0.3534679412841797, 0.3436737656593323, 0.34320715069770813, 0.3334048390388489, 0.32730600237846375, 0.3194701075553894, 0.3264276683330536, 0.3190784752368927, 0.317353218793869, 0.3047613799571991, 0.3113130033016205, 0.29358038306236267, 0.2904236614704132, 0.29598477482795715, 0.2843449115753174, 0.2814180254936218, 0.2754606008529663, 0.27888524532318115, 0.27082836627960205, 0.26988962292671204, 0.26404473185539246], "accuracy": [0.28503501415252686, 0.4916127324104309, 0.5641262531280518, 0.6206578016281128, 0.6627922058105469, 0.6931713223457336, 0.7180029153823853, 0.7416457533836365, 0.7471932172775269, 0.7552502751350403, 0.76106196641922, 0.770439863204956, 0.7744023203849792, 0.7844406366348267, 0.7880068421363831, 0.8000264167785645, 0.8005547523498535, 0.8061022162437439, 0.8152159452438354, 0.8182538747787476, 0.8171972036361694, 0.8251221776008606, 0.8325188159942627, 0.8300092220306396, 0.8358209133148193, 0.8421608805656433, 0.8393871188163757, 0.8389908671379089, 0.8432175517082214, 0.8498216867446899, 0.8510104417800903, 0.8479725122451782, 0.8552370667457581, 0.8537842035293579, 0.8619733452796936, 0.863029956817627, 0.8654074668884277, 0.8681812286376953, 0.8654074668884277, 0.8712190985679626, 0.870030403137207, 0.8710870146751404, 0.8734645247459412, 0.8689737319946289, 0.8799365758895874, 0.8733324408531189, 0.8833707571029663, 0.8819178342819214, 0.887201189994812, 0.8840311765670776, 0.8848236799240112, 0.8887861371040344, 0.8922203183174133, 0.8862766027450562, 0.8942015767097473, 0.8969752788543701, 0.8914278149604797, 0.8997490406036377, 0.8963148593902588, 0.89988112449646, 0.8990886211395264, 0.8988244533538818, 0.9025228023529053, 0.9056927561759949], "val_loss": [2.0383734703063965, 1.52497136592865, 1.0601259469985962, 0.8562812209129333, 0.7658120393753052, 0.7131959795951843, 0.6649298071861267, 0.6330333948135376, 0.6113543510437012, 0.5844947695732117, 0.5694802403450012, 0.5587157011032104, 0.5405371785163879, 0.5320618748664856, 0.5227773785591125, 0.5067153573036194, 0.5035103559494019, 0.488569974899292, 0.4856756627559662, 0.47375935316085815, 0.46686801314353943, 0.4690234065055847, 0.4562239646911621, 0.45184147357940674, 0.44802647829055786, 0.43765127658843994, 0.44083112478256226, 0.43040087819099426, 0.4233548939228058, 0.4223497211933136, 0.4192502796649933, 0.419228196144104, 0.4093460142612457, 0.40610718727111816, 0.40181079506874084, 0.3973771929740906, 0.40005266666412354, 0.3999347388744354, 0.39140209555625916, 0.39240047335624695, 0.3948496878147125, 0.38875582814216614, 0.3842795789241791, 0.38304319977760315, 0.3777843713760376, 0.37781664729118347, 0.3811173439025879, 0.377654492855072, 0.37773609161376953, 0.37403377890586853, 0.36979779601097107, 0.3724605441093445, 0.36716514825820923, 0.3631788194179535, 0.36722949147224426, 0.36092469096183777, 0.3646883964538574, 0.36131754517555237, 0.3600904941558838, 0.36084359884262085, 0.36253821849823, 0.35693618655204773, 0.3574981689453125, 0.3609990179538727], "val_accuracy": [0.5479999780654907, 0.6539999842643738, 0.6823333501815796, 0.7059999704360962, 0.7303333282470703, 0.7436666488647461, 0.7633333206176758, 0.7706666588783264, 0.7726666927337646, 0.7973333597183228, 0.7950000166893005, 0.7950000166893005, 0.8100000023841858, 0.8083333373069763, 0.8109999895095825, 0.8173333406448364, 0.8136666417121887, 0.8243333101272583, 0.8296666741371155, 0.8286666870117188, 0.8363333344459534, 0.8320000171661377, 0.8363333344459534, 0.8410000205039978, 0.8479999899864197, 0.843666672706604, 0.8433333039283752, 0.8486666679382324, 0.8519999980926514, 0.8536666631698608, 0.8526666760444641, 0.8533333539962769, 0.8603333234786987, 0.8573333621025085, 0.8619999885559082, 0.8606666922569275, 0.8603333234786987, 0.862333357334137, 0.8613333106040955, 0.8640000224113464, 0.8636666536331177, 0.8653333187103271, 0.8659999966621399, 0.8673333525657654, 0.8646666407585144, 0.8683333396911621, 0.8693333268165588, 0.8690000176429749, 0.8690000176429749, 0.8703333139419556, 0.8709999918937683, 0.8693333268165588, 0.8709999918937683, 0.8756666779518127, 0.8736666440963745, 0.871999979019165, 0.875, 0.8769999742507935, 0.8796666860580444, 0.871666669845581, 0.875, 0.8766666650772095, 0.8769999742507935, 0.8786666393280029]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8605714440345764, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.22219181060791, 1.8672136068344116, 1.389519214630127, 1.0800753831863403, 0.9373267889022827, 0.8380354046821594, 0.768776535987854, 0.7125325202941895, 0.7008708119392395, 0.658981204032898, 0.6433741450309753, 0.6093509197235107, 0.5886863470077515, 0.5734511613845825, 0.5619419813156128, 0.5454867482185364, 0.5312830209732056, 0.5229352712631226, 0.5058667659759521, 0.490564227104187, 0.48382052779197693, 0.4749181270599365, 0.4593878388404846, 0.45193028450012207, 0.4457922577857971, 0.44618383049964905, 0.4277505576610565, 0.4294099807739258, 0.425241082906723, 0.4223671555519104, 0.40248119831085205, 0.3981363773345947, 0.40224018692970276, 0.3889615535736084, 0.38731178641319275, 0.37535396218299866, 0.3750566840171814, 0.36672911047935486, 0.3647894859313965, 0.359763503074646, 0.3556000888347626, 0.34255746006965637, 0.34182825684547424, 0.3360745906829834, 0.33355891704559326, 0.3288772404193878, 0.3201936185359955, 0.31486397981643677, 0.3131338953971863, 0.3111254870891571], "accuracy": [0.2802800238132477, 0.4859331548213959, 0.5729758143424988, 0.629507303237915, 0.6732267737388611, 0.7024171352386475, 0.7265883088111877, 0.7420420050621033, 0.7442874312400818, 0.7629110813140869, 0.7700436115264893, 0.7790252566337585, 0.7902522683143616, 0.7968564033508301, 0.7973847389221191, 0.8000264167785645, 0.8131026029586792, 0.8145555257797241, 0.8189142942428589, 0.8231409192085266, 0.8276317715644836, 0.833179235458374, 0.8379341959953308, 0.8403117060661316, 0.8399154543876648, 0.8407079577445984, 0.8470479249954224, 0.8504821062088013, 0.8521991968154907, 0.8500858545303345, 0.8594637513160706, 0.8610487580299377, 0.8574824929237366, 0.8696341514587402, 0.8644828796386719, 0.86553955078125, 0.8677849769592285, 0.8730682730674744, 0.8730682730674744, 0.8720116019248962, 0.8741249442100525, 0.8778232932090759, 0.8792761564254761, 0.8800686597824097, 0.8825782537460327, 0.8837670087814331, 0.8874653577804565, 0.8889182209968567, 0.8902390599250793, 0.8932769894599915], "val_loss": [2.0419411659240723, 1.5221443176269531, 1.0580294132232666, 0.8604124188423157, 0.7691015601158142, 0.712568998336792, 0.6668751835823059, 0.6264570951461792, 0.60418301820755, 0.5802105069160461, 0.5577659606933594, 0.541258692741394, 0.5248669385910034, 0.5104889869689941, 0.5013004541397095, 0.49489185214042664, 0.48589688539505005, 0.47007185220718384, 0.459018349647522, 0.45655587315559387, 0.44807344675064087, 0.4330919682979584, 0.4267236292362213, 0.42236268520355225, 0.42915213108062744, 0.41474103927612305, 0.41194742918014526, 0.4050077199935913, 0.40513965487480164, 0.3978428244590759, 0.39216405153274536, 0.38869038224220276, 0.3879885673522949, 0.3856086730957031, 0.3817366659641266, 0.37771257758140564, 0.37243854999542236, 0.36874616146087646, 0.3731152415275574, 0.36755773425102234, 0.36721065640449524, 0.3615274727344513, 0.36135149002075195, 0.35946202278137207, 0.35572880506515503, 0.3562869727611542, 0.3522098660469055, 0.3505610227584839, 0.351226806640625, 0.3504926860332489], "val_accuracy": [0.503000020980835, 0.6460000276565552, 0.6796666383743286, 0.6953333616256714, 0.7229999899864197, 0.7450000047683716, 0.7556666731834412, 0.7639999985694885, 0.7763333320617676, 0.7883333563804626, 0.8029999732971191, 0.8103333115577698, 0.8100000023841858, 0.8186666369438171, 0.8216666579246521, 0.8183333277702332, 0.8243333101272583, 0.8263333439826965, 0.8346666693687439, 0.8336666822433472, 0.8346666693687439, 0.8403333425521851, 0.8410000205039978, 0.8460000157356262, 0.8373333215713501, 0.846666693687439, 0.8433333039283752, 0.8493333458900452, 0.8450000286102295, 0.8526666760444641, 0.8453333377838135, 0.8510000109672546, 0.8536666631698608, 0.8566666841506958, 0.8603333234786987, 0.8546666502952576, 0.859666645526886, 0.8606666922569275, 0.859333336353302, 0.8643333315849304, 0.8629999756813049, 0.8633333444595337, 0.8646666407585144, 0.8646666407585144, 0.8706666827201843, 0.8659999966621399, 0.8643333315849304, 0.8646666407585144, 0.8690000176429749, 0.8696666955947876]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39, 28], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 9, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 2, 4, 2, 1], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [60, 99, 96, 99, 49, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 2, 1, 1, 1, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, alpha)))", "other_info": {"loss": [2.3038182258605957, 2.3026723861694336, 2.474156618118286, 4165.0166015625, 796968.875, 153605824.0], "accuracy": [0.09179764986038208, 0.09747721254825592, 0.09642054885625839, 0.09932637959718704, 0.09509972482919693, 0.09840179979801178], "val_loss": [2.3025851249694824, 2.3026673793792725, 14.513803482055664, 48847.43359375, 12728446.0, 2549726720.0], "val_accuracy": [0.10366666316986084, 0.09666666388511658, 0.10166666656732559, 0.09933333098888397, 0.09933333098888397, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 8, 3, 0, 4, 0], [0, 1, 0, 2], [80, 72], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1], [2, 2, 3, 0, 3, 5], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [2, 0, 0, 3, 1, 0, 3, 1, 2, 0], [16, 99, 79, 99, 61, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 2, 1, 0, 1, 0, 2, 1, 1, 1, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(alpha), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(alpha, tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2], [0, 0, 0, 2], [39, 39, 90], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 7, 3], [0, 2, 0, 0, 2, 3], [16, 16, 50], [0, 1, 0, 1], [4, 8], [4, 4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 2, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 2, 1, 2, 0], [16, 99, 57, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 14, 8, 6, 3, 4, 2, 2, 0, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), beta), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(grad, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), beta)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 5, 0, 6, 9, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 2], [16, 99, 34, 99, 61, 1]], "fitness": -0.08942857384681702, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))))", "other_info": {"loss": [2.3087048530578613, 2.3083600997924805, 2.308983564376831, 2.309196710586548, 2.3096275329589844, 2.310396671295166, 2.310147523880005], "accuracy": [0.09708096832036972, 0.1018359512090683, 0.09034473448991776, 0.09245806187391281, 0.09192973375320435, 0.09060890227556229, 0.0952318087220192], "val_loss": [2.30918288230896, 2.3091800212860107, 2.3091771602630615, 2.309174060821533, 2.309170961380005, 2.3091681003570557, 2.3091647624969482], "val_accuracy": [0.09066666662693024, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09066666662693024]}, "mapping_values": [1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 11, 7, 4, 3], "tree_depth": 11}]