[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8671428561210632, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2218029499053955, 1.869215488433838, 1.3914955854415894, 1.1006642580032349, 0.9459313154220581, 0.8482301831245422, 0.7812243103981018, 0.739713728427887, 0.6898099780082703, 0.6668124198913574, 0.6402672529220581, 0.6170856356620789, 0.6052126884460449, 0.5820271372795105, 0.5666782855987549, 0.5567426681518555, 0.5429535508155823, 0.5277780890464783, 0.5135100483894348, 0.5050756335258484, 0.4880172908306122, 0.48069924116134644, 0.47876131534576416, 0.47241902351379395, 0.45528459548950195, 0.44288966059684753, 0.4326287508010864, 0.43337151408195496, 0.4266747236251831, 0.41479918360710144, 0.40998250246047974, 0.40697237849235535, 0.4038485288619995, 0.3912682831287384, 0.39110279083251953, 0.385602205991745, 0.3743739724159241, 0.3736444115638733, 0.36261650919914246, 0.36076194047927856, 0.3538500666618347, 0.3535991907119751, 0.3487031161785126, 0.34033599495887756, 0.3370455503463745, 0.3298869729042053, 0.33461374044418335, 0.315212219953537, 0.3176095485687256, 0.3193623423576355, 0.3046934902667999, 0.30349722504615784, 0.2982157766819, 0.2978169620037079, 0.29231008887290955, 0.29012152552604675], "accuracy": [0.2775062620639801, 0.48170650005340576, 0.5641262531280518, 0.6153744459152222, 0.6601505875587463, 0.6927750706672668, 0.7191916704177856, 0.7276449799537659, 0.7449478507041931, 0.7556465268135071, 0.7666094303131104, 0.7730814814567566, 0.7825914621353149, 0.7878747582435608, 0.7968564033508301, 0.800290584564209, 0.8043851256370544, 0.8120459914207458, 0.8132346868515015, 0.8187822103500366, 0.8256505131721497, 0.8305375576019287, 0.8322546482086182, 0.8310658931732178, 0.8362171649932861, 0.8404437899589539, 0.8430854678153992, 0.8470479249954224, 0.8455950617790222, 0.8531237840652466, 0.8494254350662231, 0.8482366800308228, 0.8525954484939575, 0.8602562546730042, 0.8603883385658264, 0.8614450097084045, 0.8613129258155823, 0.8679170608520508, 0.873860776424408, 0.8701624870300293, 0.871879518032074, 0.8742570281028748, 0.8712190985679626, 0.8786157965660095, 0.8762382864952087, 0.8798044919967651, 0.8796724081039429, 0.886672854423523, 0.8879936337471008, 0.884691596031189, 0.8922203183174133, 0.8873332738876343, 0.8902390599250793, 0.8908994793891907, 0.8948619961738586, 0.8939374089241028], "val_loss": [2.037605047225952, 1.5139521360397339, 1.0502992868423462, 0.8485000133514404, 0.7638891339302063, 0.7048658728599548, 0.6608549952507019, 0.6325345039367676, 0.6031443476676941, 0.577865481376648, 0.5581552386283875, 0.5471697449684143, 0.5318618416786194, 0.5214040279388428, 0.5075168609619141, 0.5001186728477478, 0.48670125007629395, 0.48372524976730347, 0.4702671766281128, 0.46580636501312256, 0.4591890573501587, 0.45233210921287537, 0.4465946555137634, 0.44220006465911865, 0.4347482919692993, 0.4287387430667877, 0.4251578748226166, 0.42114415764808655, 0.4123494327068329, 0.41380545496940613, 0.41258472204208374, 0.40498778223991394, 0.404737263917923, 0.39934855699539185, 0.40084919333457947, 0.3927723467350006, 0.38948795199394226, 0.38880160450935364, 0.38389575481414795, 0.38407087326049805, 0.3845491111278534, 0.37856578826904297, 0.37475332617759705, 0.373169869184494, 0.3734000623226166, 0.3690662384033203, 0.3684922754764557, 0.3671903610229492, 0.36171284317970276, 0.36751317977905273, 0.36484596133232117, 0.36405256390571594, 0.3611200749874115, 0.3572903275489807, 0.3618634343147278, 0.358793169260025], "val_accuracy": [0.5550000071525574, 0.6520000100135803, 0.6800000071525574, 0.699999988079071, 0.7289999723434448, 0.7456666827201843, 0.7599999904632568, 0.7706666588783264, 0.7796666622161865, 0.7860000133514404, 0.8013333082199097, 0.8056666851043701, 0.8106666803359985, 0.8163333535194397, 0.8173333406448364, 0.8246666789054871, 0.8289999961853027, 0.8256666660308838, 0.8353333473205566, 0.8349999785423279, 0.8393333554267883, 0.8410000205039978, 0.8389999866485596, 0.8403333425521851, 0.8426666855812073, 0.8489999771118164, 0.846666693687439, 0.846666693687439, 0.8510000109672546, 0.8506666421890259, 0.8500000238418579, 0.8526666760444641, 0.8556666374206543, 0.8560000061988831, 0.8539999723434448, 0.8569999933242798, 0.8573333621025085, 0.8610000014305115, 0.8586666584014893, 0.8579999804496765, 0.8566666841506958, 0.862666666507721, 0.8606666922569275, 0.8640000224113464, 0.8579999804496765, 0.8633333444595337, 0.8640000224113464, 0.8673333525657654, 0.8693333268165588, 0.862666666507721, 0.8700000047683716, 0.8656666874885559, 0.8673333525657654, 0.8673333525657654, 0.8700000047683716, 0.8696666955947876]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], [0, 2, 3, 3, 3, 3, 1, 6, 4, 3, 7, 3, 2, 8, 3, 4, 8, 0], [0, 1, 0, 1, 3, 1, 2, 3, 0, 3, 0, 2, 0, 2, 0], [39, 39, 16, 98, 33, 22], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [3, 2, 3, 5, 3, 5, 8, 0, 9], [0, 2, 0, 3], [16, 87, 82], [0, 1, 1], [3], [0, 1], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 3, 4, 2, 8, 1, 0], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0, 5], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 18, 15, 6, 13, 9, 4, 3, 3, 1, 2, 1, 24, 13, 11, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.subtract(grad, tf.math.divide_no_nan(alpha, grad)))), tf.math.pow(tf.math.multiply(tf.math.add(grad, tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), grad), tf.math.sqrt(tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(tf.math.multiply(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.math.sqrt(tf.math.subtract(alpha, beta))), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 3, 7, 8, 6, 3, 9, 6, 3, 0, 8, 0, 1, 7, 3, 1, 1], [0, 0, 0, 3, 0, 4, 3, 2, 4, 3, 4, 5, 3, 4], [16, 16, 98, 45, 29], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 2, 4], [16, 99, 96, 13, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 36, 22, 14, 5, 2, 1, 1, 0, 21, 11, 10, 4], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(grad), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), grad)), grad)), tf.math.sqrt(tf.math.negative(beta))), tf.math.subtract(tf.math.add(tf.math.multiply(grad, tf.math.subtract(grad, grad)), grad), tf.math.subtract(grad, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [3, 9, 3, 3, 3], [0, 1, 0, 2], [39, 39, 60], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 8, 5, 8, 7, 5, 3, 8, 1, 9, 2, 0, 3, 7, 0, 2, 4, 5, 8, 0], [0, 2, 0, 3, 1, 0, 0, 0, 4, 5], [16, 57, 12, 96, 42, 79], [0, 1], [0], [0], [99], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 3, 5, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 69, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 33, 23, 10, 6, 2, 1, 1, 1, 5, 2, 3, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.square(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), grad))), tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.pow(tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), grad))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09417514503002167, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [33], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 33, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 1, 1, 0, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}]