[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8488571643829346, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2227749824523926, 1.8624969720840454, 1.3848856687545776, 1.0926874876022339, 0.927621603012085, 0.8389173746109009, 0.7734882831573486, 0.7208928465843201, 0.686265230178833, 0.6525724530220032, 0.6356303691864014, 0.6229268908500671, 0.5888100266456604, 0.5780456066131592, 0.5541101098060608, 0.5496249794960022, 0.5361238718032837, 0.5191622376441956, 0.5133537650108337, 0.49553486704826355, 0.48910045623779297, 0.4843365252017975, 0.47798219323158264, 0.4632304608821869, 0.46177637577056885, 0.4479055404663086, 0.43870943784713745, 0.4361313581466675, 0.43000516295433044, 0.42169222235679626, 0.41925933957099915, 0.4114319086074829, 0.399248331785202, 0.4018052816390991, 0.39243564009666443, 0.38587161898612976, 0.38070935010910034, 0.37354159355163574, 0.3688596487045288, 0.364303857088089, 0.3618628978729248, 0.3601776659488678, 0.3446512222290039, 0.34406331181526184, 0.35301458835601807, 0.3332325220108032, 0.32898271083831787, 0.3356954753398895, 0.3223782777786255, 0.3213896155357361, 0.3165878653526306, 0.3096666634082794, 0.2971968352794647, 0.3002820909023285, 0.29749372601509094, 0.29636526107788086, 0.28847283124923706, 0.28896498680114746, 0.28026241064071655, 0.27815353870391846, 0.2712671160697937, 0.27556365728378296, 0.27078139781951904, 0.27092549204826355, 0.26192086935043335, 0.25400280952453613, 0.25372710824012756, 0.2411898821592331, 0.2500840425491333, 0.2393808662891388, 0.235359787940979, 0.23183831572532654, 0.22728487849235535, 0.23143352568149567, 0.22526580095291138, 0.21716521680355072], "accuracy": [0.27777042984962463, 0.49425438046455383, 0.5622771382331848, 0.6196011304855347, 0.6649055480957031, 0.7000396251678467, 0.7194558382034302, 0.7387399077415466, 0.7541936039924622, 0.763967752456665, 0.7705719470977783, 0.7711002230644226, 0.7869502305984497, 0.7960638999938965, 0.7988376617431641, 0.8012151718139648, 0.8067626357078552, 0.8129705190658569, 0.8104609847068787, 0.8228767514228821, 0.82683926820755, 0.8240655064582825, 0.8286884427070618, 0.8335754871368408, 0.8358209133148193, 0.8392550349235535, 0.8421608805656433, 0.8412362933158875, 0.8471800088882446, 0.8465195894241333, 0.8485008478164673, 0.8537842035293579, 0.8570862412452698, 0.8553691506385803, 0.8598600029945374, 0.8628978729248047, 0.8659358024597168, 0.863558292388916, 0.8644828796386719, 0.8671245574951172, 0.8713511824607849, 0.8709549307823181, 0.8779553771018982, 0.8742570281028748, 0.8710870146751404, 0.8784837126731873, 0.878879964351654, 0.8780874609947205, 0.8836349248886108, 0.8840311765670776, 0.8862766027450562, 0.889050304889679, 0.8908994793891907, 0.8902390599250793, 0.8918240666389465, 0.8923524022102356, 0.8949940800666809, 0.8956544995307922, 0.8953903317451477, 0.9052965044975281, 0.8996169567108154, 0.8985602855682373, 0.8990886211395264, 0.9038436412811279, 0.9071456789970398, 0.908730685710907, 0.9066173434257507, 0.9165235757827759, 0.9085986018180847, 0.9154669046401978, 0.9125610589981079, 0.915070652961731, 0.917580246925354, 0.9167877435684204, 0.9210143685340881, 0.9204860925674438], "val_loss": [2.0382540225982666, 1.5133274793624878, 1.0427944660186768, 0.8346880078315735, 0.7421489357948303, 0.686438798904419, 0.642160952091217, 0.6108465194702148, 0.5832648873329163, 0.5580974221229553, 0.544523298740387, 0.5351694226264954, 0.5136430859565735, 0.5014719367027283, 0.4916713833808899, 0.48173269629478455, 0.47606104612350464, 0.4637995660305023, 0.4619293212890625, 0.4528932571411133, 0.4442407190799713, 0.444834440946579, 0.43375900387763977, 0.4361068904399872, 0.4265563488006592, 0.42248088121414185, 0.4224528670310974, 0.418152391910553, 0.4161999225616455, 0.4099903106689453, 0.4103465974330902, 0.40482690930366516, 0.40198129415512085, 0.3981702923774719, 0.392425000667572, 0.39470648765563965, 0.3889770209789276, 0.3886058032512665, 0.38315120339393616, 0.3872726261615753, 0.3805996775627136, 0.38035401701927185, 0.38499704003334045, 0.37412258982658386, 0.3722679018974304, 0.3729923367500305, 0.3730074167251587, 0.3674343228340149, 0.36408931016921997, 0.3736982047557831, 0.36082178354263306, 0.36441344022750854, 0.3631872236728668, 0.3624289631843567, 0.35797974467277527, 0.36357349157333374, 0.36414575576782227, 0.36585673689842224, 0.3615703880786896, 0.35564398765563965, 0.3596537709236145, 0.354653000831604, 0.3513774275779724, 0.35404181480407715, 0.3565502464771271, 0.3496020436286926, 0.3436737358570099, 0.35384345054626465, 0.3638618588447571, 0.3505052924156189, 0.35090336203575134, 0.34677204489707947, 0.3546202778816223, 0.35275402665138245, 0.3496766686439514, 0.3524933159351349], "val_accuracy": [0.5203333497047424, 0.6499999761581421, 0.6846666932106018, 0.7106666564941406, 0.7360000014305115, 0.7523333430290222, 0.7620000243186951, 0.768666684627533, 0.7860000133514404, 0.7950000166893005, 0.8006666898727417, 0.800000011920929, 0.812333345413208, 0.8216666579246521, 0.8233333230018616, 0.8299999833106995, 0.8320000171661377, 0.8360000252723694, 0.8346666693687439, 0.8399999737739563, 0.8389999866485596, 0.8403333425521851, 0.8453333377838135, 0.8446666598320007, 0.8489999771118164, 0.8486666679382324, 0.8460000157356262, 0.8503333330154419, 0.8529999852180481, 0.8553333282470703, 0.8569999933242798, 0.8539999723434448, 0.8553333282470703, 0.862666666507721, 0.8569999933242798, 0.8633333444595337, 0.8643333315849304, 0.8603333234786987, 0.8679999709129333, 0.8656666874885559, 0.8679999709129333, 0.8669999837875366, 0.8600000143051147, 0.8696666955947876, 0.8690000176429749, 0.8709999918937683, 0.8673333525657654, 0.8703333139419556, 0.8730000257492065, 0.8709999918937683, 0.874666690826416, 0.871999979019165, 0.8693333268165588, 0.874666690826416, 0.875333309173584, 0.8686666488647461, 0.8769999742507935, 0.8736666440963745, 0.874666690826416, 0.8736666440963745, 0.8740000128746033, 0.8773333430290222, 0.878000020980835, 0.8813333511352539, 0.8740000128746033, 0.8820000290870667, 0.8826666474342346, 0.8820000290870667, 0.8766666650772095, 0.8793333172798157, 0.8843333125114441, 0.8826666474342346, 0.8759999871253967, 0.8799999952316284, 0.8826666474342346, 0.8816666603088379]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 83], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 1], [16, 16], [0, 1], [0], [0], [63], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 4, 3, 6, 9, 1, 4, 1, 2, 2, 8], [0, 2, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 11, 6, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), beta)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 6, 0, 3], [1, 1, 0, 2], [39, 2], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 0], [0, 2, 3, 3], [16, 99], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 5, 4, 2, 8, 1, 1, 2, 6, 5, 4, 4, 5, 9, 3], [0, 0, 4, 3, 0, 0, 3, 1, 2, 0, 6, 3, 0, 5, 3], [16, 99, 96, 88, 61, 61, 28]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 11, 7, 4, 1, 2, 1, 1, 1, 36, 21, 15, 7], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta)), tf.math.multiply(tf.math.square(tf.math.negative(grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))), tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.add(tf.math.sqrt(tf.math.subtract(alpha, beta)), tf.math.subtract(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.math.pow(grad, tf.math.pow(tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma))), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 3, 4, 1, 4, 2, 8, 6, 2, 3, 4, 7, 4, 3, 8, 8, 2, 7, 9, 2, 7, 2, 2, 8, 5, 9], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0, 6, 4, 0, 0, 1, 4, 2, 1, 0, 2, 3], [34, 50, 96, 99, 61, 1, 79, 87, 25, 37]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 1, 51, 30, 21, 10], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.math.pow(tf.math.add(tf.math.pow(tf.math.multiply(grad, tf.math.sqrt(tf.math.sqrt(grad))), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), alpha), grad), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), beta)), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [8], [0], [54], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 2, 0, 3, 1, 2, 0], [16, 99, 54, 99, 29, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(beta, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]