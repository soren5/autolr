[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8697142601013184, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2238330841064453, 1.8712457418441772, 1.3976837396621704, 1.0916134119033813, 0.9400505423545837, 0.8508108258247375, 0.7853913903236389, 0.7313326001167297, 0.6931220293045044, 0.6723984479904175, 0.6344427466392517, 0.6171846389770508, 0.6046015620231628, 0.5825642943382263, 0.5736128091812134, 0.5550774931907654, 0.5416571497917175, 0.5211960673332214, 0.5148406624794006, 0.5042744874954224, 0.4964444935321808, 0.48758018016815186, 0.4735789895057678, 0.4657767415046692, 0.4574511647224426, 0.4506585896015167, 0.437829852104187, 0.43563881516456604, 0.4266311526298523, 0.42139574885368347, 0.4117252230644226, 0.4044693410396576, 0.4003593325614929, 0.3969147503376007, 0.39646589756011963, 0.37676572799682617, 0.3755696415901184, 0.37117597460746765, 0.370850145816803, 0.3656329810619354, 0.357181191444397, 0.352252721786499, 0.34945905208587646, 0.34188538789749146, 0.338237464427948, 0.32812753319740295, 0.32673323154449463, 0.33032962679862976, 0.3198736906051636, 0.3111681342124939, 0.31740128993988037, 0.30996063351631165, 0.30657529830932617, 0.30320119857788086, 0.2964610755443573, 0.29191818833351135, 0.2830938398838043, 0.28604668378829956, 0.28330889344215393, 0.2729438245296478, 0.2737199366092682, 0.26955732703208923, 0.25751152634620667, 0.2596927285194397, 0.25159549713134766, 0.26195305585861206, 0.2529612183570862, 0.24092437326908112, 0.24789594113826752, 0.23573625087738037, 0.23654255270957947, 0.23603765666484833, 0.22745224833488464, 0.2259078025817871], "accuracy": [0.2806762754917145, 0.4858010709285736, 0.5539559125900269, 0.616299033164978, 0.6547351479530334, 0.6926429867744446, 0.7113987803459167, 0.7331924438476562, 0.7383436560630798, 0.7539294958114624, 0.763439416885376, 0.7728173136711121, 0.7802139520645142, 0.7897239327430725, 0.7928939461708069, 0.8025360107421875, 0.798309326171875, 0.8084797263145447, 0.8120459914207458, 0.8187822103500366, 0.822348415851593, 0.8251221776008606, 0.8277638554573059, 0.8330471515655518, 0.834632158279419, 0.8416325449943542, 0.8450667262077332, 0.8407079577445984, 0.8451988101005554, 0.8477083444595337, 0.8506141901016235, 0.8511425256729126, 0.8573504090309143, 0.8576145768165588, 0.8562937378883362, 0.8619733452796936, 0.8631620407104492, 0.8667283058166504, 0.8644828796386719, 0.8685774803161621, 0.8737286925315857, 0.8734645247459412, 0.8733324408531189, 0.8782195448875427, 0.8794082403182983, 0.8821820020675659, 0.8799365758895874, 0.8795403242111206, 0.884691596031189, 0.8885219693183899, 0.8841632604598999, 0.8845595121383667, 0.8910315632820129, 0.8886540532112122, 0.8924844861030579, 0.8947299122810364, 0.8953903317451477, 0.8961827754974365, 0.896446943283081, 0.9037115573883057, 0.9006736278533936, 0.9043719172477722, 0.9082023501396179, 0.9035794734954834, 0.9088627696037292, 0.9056927561759949, 0.9083344340324402, 0.9113723635673523, 0.9084665179252625, 0.9133535623550415, 0.9120327830314636, 0.9105798602104187, 0.9185048341751099, 0.9148064851760864], "val_loss": [2.0438358783721924, 1.5304365158081055, 1.0605190992355347, 0.8531729578971863, 0.7628664374351501, 0.7104552388191223, 0.6634011268615723, 0.6279085278511047, 0.6014662981033325, 0.5807818174362183, 0.5564559102058411, 0.5431536436080933, 0.532795250415802, 0.525027334690094, 0.5095499753952026, 0.4977114796638489, 0.4881158471107483, 0.47958627343177795, 0.47406452894210815, 0.4644562304019928, 0.467439740896225, 0.455380380153656, 0.44697335362434387, 0.4451935589313507, 0.4380660355091095, 0.43151023983955383, 0.4312678575515747, 0.4257535934448242, 0.4227040708065033, 0.4194682538509369, 0.4142078757286072, 0.4118327498435974, 0.4112088084220886, 0.40522533655166626, 0.40586864948272705, 0.40415453910827637, 0.39991846680641174, 0.39744871854782104, 0.39429163932800293, 0.3945941627025604, 0.3899279236793518, 0.3961949050426483, 0.3901747763156891, 0.38633063435554504, 0.38540202379226685, 0.3828393518924713, 0.3836492598056793, 0.3804507255554199, 0.3904338777065277, 0.3771769106388092, 0.3764316439628601, 0.37532949447631836, 0.3727569580078125, 0.3718944489955902, 0.36818578839302063, 0.3677874803543091, 0.3668338656425476, 0.3718583881855011, 0.369843453168869, 0.3712834417819977, 0.3655320107936859, 0.36156177520751953, 0.36253637075424194, 0.36293840408325195, 0.36427417397499084, 0.36572200059890747, 0.3640423119068146, 0.3649566173553467, 0.3592621982097626, 0.3661258816719055, 0.36360394954681396, 0.3618795573711395, 0.368198961019516, 0.35956713557243347], "val_accuracy": [0.5213333368301392, 0.652999997138977, 0.6753333210945129, 0.7093333601951599, 0.7289999723434448, 0.7443333268165588, 0.7586666941642761, 0.7670000195503235, 0.7760000228881836, 0.7863333225250244, 0.7983333468437195, 0.8033333420753479, 0.8076666593551636, 0.8046666383743286, 0.8103333115577698, 0.8213333487510681, 0.824999988079071, 0.8226666450500488, 0.824999988079071, 0.831333339214325, 0.8339999914169312, 0.8336666822433472, 0.8339999914169312, 0.8410000205039978, 0.843666672706604, 0.8460000157356262, 0.847000002861023, 0.8463333249092102, 0.8493333458900452, 0.8479999899864197, 0.8503333330154419, 0.8483333587646484, 0.8506666421890259, 0.8519999980926514, 0.8500000238418579, 0.8583333492279053, 0.8576666712760925, 0.8576666712760925, 0.859333336353302, 0.8610000014305115, 0.8613333106040955, 0.8583333492279053, 0.859666645526886, 0.862666666507721, 0.8653333187103271, 0.8600000143051147, 0.8640000224113464, 0.8643333315849304, 0.8600000143051147, 0.8659999966621399, 0.8666666746139526, 0.8676666617393494, 0.8663333058357239, 0.8673333525657654, 0.8700000047683716, 0.8690000176429749, 0.8726666569709778, 0.8700000047683716, 0.8713333606719971, 0.8693333268165588, 0.8723333477973938, 0.8736666440963745, 0.8736666440963745, 0.8756666779518127, 0.875333309173584, 0.871666669845581, 0.874666690826416, 0.878000020980835, 0.8803333044052124, 0.8773333430290222, 0.8796666860580444, 0.8773333430290222, 0.8769999742507935, 0.8759999871253967]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 8, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 3], [16, 95, 81], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 0, 1, 8, 1, 4, 2, 8], [0, 0, 0, 0, 0, 0, 3, 1, 2, 0], [16, 99, 96, 28, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 10, 6, 4, 3, 2, 1, 1, 1, 17, 9, 8, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 2, 3, 0, 4, 0, 2, 1, 0, 1, 6, 3, 9], [0, 1, 2, 2, 1, 0, 1, 0], [18, 39, 33, 84], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0], [0, 2, 3, 0, 3, 6, 0, 0, 9], [3, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 0, 6, 8, 1, 4, 2, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 1, 0], [16, 99, 23, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 13, 8, 4, 13, 9, 4, 2, 1, 0, 1, 1, 11, 6, 5, 4], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.pow(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), alpha)), grad), tf.math.negative(tf.math.add(grad, tf.math.subtract(alpha, tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.negative(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.304138422012329, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025848865509033], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 33], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 9, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 6, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 1, 0, 21, 11, 10, 6], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(grad, alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [5, 2, 2, 0, 3], [0, 0, 0, 2], [39, 39, 22], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1, 1], [3], [0, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 8, 4, 1, 4, 2, 8, 6, 2, 4, 6, 9, 5, 6, 1, 0], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 4, 0, 5, 0], [16, 99, 96, 28, 61, 1, 8, 41, 61]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 10, 6, 4, 2, 3, 1, 2, 1, 34, 20, 14, 9], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(sigma, alpha), tf.math.pow(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.subtract(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))), tf.math.negative(grad)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]