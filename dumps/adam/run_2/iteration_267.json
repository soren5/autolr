[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8682857155799866, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221971035003662, 1.8640921115875244, 1.3800371885299683, 1.0899606943130493, 0.9246201515197754, 0.8239096999168396, 0.7667757868766785, 0.7100332975387573, 0.6853335499763489, 0.6621110439300537, 0.625904381275177, 0.6051096320152283, 0.5821326375007629, 0.5682517886161804, 0.5496348738670349, 0.5322674512863159, 0.5244743227958679, 0.5205543637275696, 0.5057375431060791, 0.49233531951904297, 0.47919291257858276, 0.4805063307285309, 0.46075454354286194, 0.4634760320186615, 0.44666147232055664, 0.44225889444351196, 0.4356561601161957, 0.42047029733657837, 0.42315417528152466, 0.41471171379089355, 0.4038452208042145, 0.3962739109992981, 0.389636754989624, 0.3926835060119629, 0.38339290022850037, 0.37573865056037903, 0.36714544892311096, 0.3683418929576874, 0.35734063386917114, 0.34833675622940063, 0.3495207726955414, 0.3398589491844177, 0.3395398259162903, 0.3353639841079712, 0.3256778419017792], "accuracy": [0.2798837721347809, 0.4905560612678528, 0.5675604343414307, 0.6296393871307373, 0.6705851554870605, 0.7062475085258484, 0.7232862114906311, 0.7469290494918823, 0.7473253011703491, 0.7567031979560852, 0.767401933670044, 0.7765156626701355, 0.7882710099220276, 0.7944789528846741, 0.7996301651000977, 0.8068947196006775, 0.8094043135643005, 0.8094043135643005, 0.816008448600769, 0.8211596608161926, 0.8257825970649719, 0.8255184292793274, 0.8309338092803955, 0.83119797706604, 0.8370096683502197, 0.8393871188163757, 0.8411042094230652, 0.8485008478164673, 0.8448025584220886, 0.8473120927810669, 0.8515387773513794, 0.8576145768165588, 0.8564258217811584, 0.8569541573524475, 0.8642187118530273, 0.8618412613868713, 0.8661999702453613, 0.8669924736022949, 0.8729361891746521, 0.8751816153526306, 0.8710870146751404, 0.8778232932090759, 0.8774270415306091, 0.8792761564254761, 0.8861445188522339], "val_loss": [2.0347673892974854, 1.5058757066726685, 1.0355100631713867, 0.8305105566978455, 0.7441654205322266, 0.6925543546676636, 0.6517218351364136, 0.6150587201118469, 0.5919017195701599, 0.572464644908905, 0.5553126335144043, 0.5374167561531067, 0.530571699142456, 0.5149948596954346, 0.49968644976615906, 0.49094751477241516, 0.48376384377479553, 0.4785829186439514, 0.4731687307357788, 0.46531134843826294, 0.45535799860954285, 0.44693952798843384, 0.44671064615249634, 0.4383598566055298, 0.4435884952545166, 0.42671626806259155, 0.4209919571876526, 0.41916120052337646, 0.41417455673217773, 0.41461172699928284, 0.40845295786857605, 0.40088796615600586, 0.4021630883216858, 0.39760035276412964, 0.39257296919822693, 0.3899552822113037, 0.3872881233692169, 0.3821484446525574, 0.3792910873889923, 0.3736813962459564, 0.3856733441352844, 0.3731245994567871, 0.3683452904224396, 0.37754979729652405, 0.3699219524860382], "val_accuracy": [0.5286666750907898, 0.6543333530426025, 0.6896666884422302, 0.7116666436195374, 0.7333333492279053, 0.7513333559036255, 0.7593333125114441, 0.7739999890327454, 0.7850000262260437, 0.7870000004768372, 0.7960000038146973, 0.8050000071525574, 0.809333324432373, 0.8149999976158142, 0.8223333358764648, 0.8243333101272583, 0.8253333568572998, 0.828000009059906, 0.8270000219345093, 0.8339999914169312, 0.8353333473205566, 0.8383333086967468, 0.8389999866485596, 0.8413333296775818, 0.8389999866485596, 0.8456666469573975, 0.8500000238418579, 0.8496666550636292, 0.8503333330154419, 0.8486666679382324, 0.8539999723434448, 0.856333315372467, 0.8543333411216736, 0.859666645526886, 0.8556666374206543, 0.8573333621025085, 0.8566666841506958, 0.859333336353302, 0.8629999756813049, 0.8656666874885559, 0.8586666584014893, 0.862666666507721, 0.8640000224113464, 0.8613333106040955, 0.8629999756813049]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 1], [96, 52], [0, 1, 1], [4], [0, 3], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1], [6, 3, 5, 6, 8, 1, 4, 1, 8, 2, 8], [0, 2, 0, 3, 0, 0, 3, 1, 0, 0], [16, 99, 96, 99, 61, 25]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 3, 1, 2, 1, 16, 9, 7, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.sqrt(sigma))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [4, 0, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 2], [16, 16], [0, 1], [0], [4], [49], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 5, 3, 6, 6, 1, 4, 1, 4, 2, 8], [0, 0, 1, 3, 0, 0, 2, 1, 2, 4], [16, 99, 81, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 0, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma)), tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), beta))), alpha))), tf.math.add(tf.math.sqrt(beta), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 49, 74], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [8, 3, 3, 6, 8, 2, 4, 1, 5, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 80, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 3, 10, 6, 4, 2, 2, 1, 1, 1, 16, 9, 7, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma))", "other_info": {"loss": [2.3033511638641357, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [4, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 0, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 8, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 3, 3, 1, 2, 0], [98, 85, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 9, 5, 4, 2, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}]