[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8628571629524231, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222153663635254, 1.862924337387085, 1.3835840225219727, 1.0930238962173462, 0.938546895980835, 0.8478720188140869, 0.7698636651039124, 0.7222404479980469, 0.6771215200424194, 0.6513985991477966, 0.6306976675987244, 0.6100810170173645, 0.5895751118659973, 0.5692468285560608, 0.5653170347213745, 0.5460343360900879, 0.528486967086792, 0.5197339653968811, 0.504401683807373, 0.4960053563117981, 0.48650944232940674, 0.477446049451828, 0.4637436270713806, 0.45413100719451904, 0.4507433772087097, 0.44524523615837097, 0.44014331698417664, 0.42574191093444824, 0.41782185435295105, 0.4160824120044708, 0.411590576171875, 0.3976280987262726, 0.3987010419368744, 0.39291465282440186, 0.3897891640663147, 0.3810337781906128, 0.37184756994247437, 0.37065765261650085, 0.36252638697624207, 0.355607271194458, 0.3525444567203522, 0.35017138719558716, 0.3418465852737427, 0.34108033776283264, 0.3381030559539795, 0.3275721073150635, 0.3185257315635681, 0.3217194974422455, 0.31763091683387756, 0.311839759349823, 0.30858856439590454, 0.3087640404701233, 0.29535213112831116, 0.296725332736969, 0.28836125135421753, 0.2848837375640869, 0.28383830189704895, 0.2686740756034851, 0.271237313747406, 0.27418848872184753, 0.26816466450691223, 0.26435157656669617, 0.26033589243888855, 0.2586478590965271, 0.250799298286438, 0.24764250218868256, 0.24624066054821014, 0.24149715900421143, 0.2391514629125595, 0.2335498034954071, 0.23332740366458893, 0.22555002570152283], "accuracy": [0.2728833854198456, 0.4916127324104309, 0.5684850215911865, 0.6152423620223999, 0.6662263870239258, 0.6951525807380676, 0.7215691208839417, 0.7360982894897461, 0.7578919529914856, 0.7664773464202881, 0.769911527633667, 0.776251494884491, 0.7877426743507385, 0.7981772422790527, 0.7938185334205627, 0.8029322624206543, 0.8107251524925232, 0.8170651197433472, 0.8201030492782593, 0.8234050869941711, 0.826310932636261, 0.8314621448516846, 0.8337075710296631, 0.8430854678153992, 0.8424250483512878, 0.8442742228507996, 0.8506141901016235, 0.8495575189590454, 0.8549728989601135, 0.8519350290298462, 0.8553691506385803, 0.8589354157447815, 0.8636903762817383, 0.8610487580299377, 0.8642187118530273, 0.8648791313171387, 0.8697662353515625, 0.8693699836730957, 0.8726720213890076, 0.876370370388031, 0.8770307898521423, 0.8765024542808533, 0.8782195448875427, 0.8809932470321655, 0.880729079246521, 0.8821820020675659, 0.8870691061019897, 0.8877294659614563, 0.8856161832809448, 0.8860124349594116, 0.8918240666389465, 0.8916919827461243, 0.8951261639595032, 0.8949940800666809, 0.8993527889251709, 0.8952582478523254, 0.8997490406036377, 0.9009377956390381, 0.8980319499969482, 0.9058248400688171, 0.90423983335495, 0.9091269373893738, 0.9080702662467957, 0.9080702662467957, 0.9099194407463074, 0.9126931428909302, 0.9125610589981079, 0.9115044474601746, 0.9179764986038208, 0.9179764986038208, 0.9173160791397095, 0.9251089692115784], "val_loss": [2.0321226119995117, 1.4998515844345093, 1.0212492942810059, 0.8232956528663635, 0.7321558594703674, 0.6791846752166748, 0.6372042894363403, 0.6028886437416077, 0.5819094181060791, 0.5597537159919739, 0.5442612171173096, 0.528877854347229, 0.5211615562438965, 0.5072492361068726, 0.4936908781528473, 0.4863744378089905, 0.4744615852832794, 0.46482646465301514, 0.4614681303501129, 0.4543619453907013, 0.44947388768196106, 0.4418535828590393, 0.4376976191997528, 0.4367912709712982, 0.429871529340744, 0.42481356859207153, 0.42680156230926514, 0.4214073419570923, 0.40925028920173645, 0.41137129068374634, 0.40918290615081787, 0.4029952883720398, 0.39877399802207947, 0.3949519097805023, 0.39559343457221985, 0.3890138268470764, 0.39164891839027405, 0.3842587172985077, 0.3824951648712158, 0.3902037739753723, 0.3843243420124054, 0.3762960135936737, 0.3767583966255188, 0.3735087811946869, 0.37294429540634155, 0.3691657781600952, 0.36413493752479553, 0.36959725618362427, 0.36352479457855225, 0.36239326000213623, 0.36459508538246155, 0.35829222202301025, 0.3642089068889618, 0.36613038182258606, 0.35656672716140747, 0.35941722989082336, 0.35376715660095215, 0.3577345907688141, 0.3529648780822754, 0.34975939989089966, 0.35376855731010437, 0.351972371339798, 0.35860979557037354, 0.34947794675827026, 0.3520406186580658, 0.352532297372818, 0.3480972945690155, 0.3465598225593567, 0.3458425998687744, 0.35739579796791077, 0.34458833932876587, 0.3510406017303467], "val_accuracy": [0.5583333373069763, 0.6693333387374878, 0.687333345413208, 0.7136666774749756, 0.734333336353302, 0.7576666474342346, 0.7680000066757202, 0.7753333449363708, 0.7870000004768372, 0.7940000295639038, 0.7990000247955322, 0.8080000281333923, 0.8116666674613953, 0.8096666932106018, 0.8216666579246521, 0.8236666917800903, 0.8226666450500488, 0.8299999833106995, 0.8339999914169312, 0.8333333134651184, 0.8336666822433472, 0.840666651725769, 0.8383333086967468, 0.8373333215713501, 0.8410000205039978, 0.8456666469573975, 0.8479999899864197, 0.846666693687439, 0.8510000109672546, 0.8483333587646484, 0.8516666889190674, 0.8516666889190674, 0.8533333539962769, 0.8573333621025085, 0.8556666374206543, 0.8586666584014893, 0.856333315372467, 0.859666645526886, 0.8636666536331177, 0.8579999804496765, 0.8619999885559082, 0.8633333444595337, 0.8603333234786987, 0.8650000095367432, 0.8646666407585144, 0.8650000095367432, 0.8693333268165588, 0.8679999709129333, 0.8679999709129333, 0.8683333396911621, 0.8656666874885559, 0.8700000047683716, 0.8700000047683716, 0.8706666827201843, 0.8730000257492065, 0.8709999918937683, 0.8730000257492065, 0.8726666569709778, 0.8733333349227905, 0.8769999742507935, 0.8726666569709778, 0.8740000128746033, 0.8773333430290222, 0.8773333430290222, 0.8740000128746033, 0.8706666827201843, 0.8799999952316284, 0.875333309173584, 0.8786666393280029, 0.8740000128746033, 0.8786666393280029, 0.875]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39, 26], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 9, 5], [0, 3, 0, 3], [38, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 5, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 1, 3, 4, 0, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.4374285638332367, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.square(sigma)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3050661087036133, 2.113091230392456, 1.7819507122039795, 2.101525068283081, 2.999835729598999, 2.3907759189605713, 2.3036179542541504], "accuracy": [0.09866596013307571, 0.31541407108306885, 0.43468499183654785, 0.2642979919910431, 0.13657376170158386, 0.09774138033390045, 0.09813763201236725], "val_loss": [2.2678020000457764, 1.6488443613052368, 2.2687273025512695, 5.244342803955078, 2.721740484237671, 2.3029062747955322, 2.3031105995178223], "val_accuracy": [0.2746666669845581, 0.42899999022483826, 0.17666666209697723, 0.18533332645893097, 0.09933333098888397, 0.10300000011920929, 0.10300000011920929]}, "mapping_values": [1, 9, 5, 4, 3, 7, 5, 2, 2, 2, 1, 1, 1, 11, 6, 5, 3], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 9], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 0, 4, 3, 5, 8], [0, 2, 0, 3, 3, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0], [6, 3, 3, 6, 6, 1, 4, 1, 4, 2, 5, 1, 5, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 7], [16, 75, 75, 99, 61, 3, 97]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.square(tf.math.sqrt(grad)), grad), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.square(tf.math.subtract(alpha, tf.math.square(beta)))), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), grad), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}, "mapping_values": [1, 6, 3, 3, 2, 17, 11, 6, 2, 2, 1, 1, 1, 25, 14, 11, 7], "tree_depth": 24}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 4, 4, 2, 6, 4, 8, 2], [0, 1, 0, 2, 3, 3, 3, 2, 3, 2], [39, 41], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5, 6], [0, 2, 0, 3, 4, 0], [16, 16, 79], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 2, 1, 4, 2, 8, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 12, 10, 2, 13, 7, 6, 3, 2, 1, 1, 1, 22, 12, 10, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.add(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.sqrt(grad), grad)), grad))), tf.math.add(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(grad, grad)))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)))), tf.math.sqrt(tf.math.sqrt(alpha)))), beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 0, 3], [0, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 4, 0, 0, 0], [16, 99, 96, 99, 61, 1, 1, 82]], "fitness": -0.09057142585515976, "mapping_values": [1, 10, 5, 5, 2, 1, 1, 0, 1, 2, 1, 1, 1, 20, 10, 10, 8], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3091461658477783, 2.3103480339050293, 2.31021785736084, 2.3107547760009766, 2.309166431427002, 2.3099160194396973], "accuracy": [0.09100515395402908, 0.0886276587843895, 0.09166556596755981, 0.09338264167308807, 0.0936468094587326, 0.09113723784685135], "val_loss": [2.308504819869995, 2.308504819869995, 2.308504581451416, 2.308504581451416, 2.308504343032837, 2.308504343032837], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}]