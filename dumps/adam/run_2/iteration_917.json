[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8708571195602417, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2252354621887207, 1.8692518472671509, 1.394280195236206, 1.0959997177124023, 0.9357002377510071, 0.8448265790939331, 0.7838442325592041, 0.7366825342178345, 0.6897346377372742, 0.6717626452445984, 0.6434589624404907, 0.6277650594711304, 0.5920206904411316, 0.5758360624313354, 0.563726544380188, 0.5574417114257812, 0.5338700413703918, 0.5303328633308411, 0.5173437595367432, 0.49782511591911316, 0.5022018551826477, 0.4817212224006653, 0.4792826771736145, 0.47238707542419434, 0.46331825852394104, 0.4555453062057495, 0.4397764205932617, 0.4317408502101898, 0.42778193950653076, 0.4193640351295471, 0.41176262497901917, 0.40247195959091187, 0.4059637486934662, 0.39484500885009766, 0.3948081135749817, 0.3813484311103821, 0.37934890389442444, 0.3717271685600281, 0.3651639223098755, 0.36467260122299194, 0.3661336600780487, 0.3529769480228424, 0.3527733087539673, 0.3510364890098572, 0.3422170579433441, 0.32887113094329834, 0.32982712984085083, 0.3287113904953003, 0.32339319586753845, 0.31171271204948425, 0.31651678681373596, 0.3032636046409607, 0.3036497235298157, 0.29676538705825806, 0.2904713451862335, 0.290427029132843, 0.2830182611942291, 0.2789091169834137, 0.2791159749031067, 0.2813440263271332, 0.27253440022468567, 0.266804963350296], "accuracy": [0.2740721106529236, 0.48870691657066345, 0.5624092221260071, 0.6104874014854431, 0.6617355942726135, 0.6905296444892883, 0.7214370369911194, 0.7283053994178772, 0.7442874312400818, 0.7578919529914856, 0.7664773464202881, 0.774798572063446, 0.7820631265640259, 0.7885351777076721, 0.7931581139564514, 0.7971205711364746, 0.8121780753135681, 0.8096684813499451, 0.8121780753135681, 0.8190463781356812, 0.8177255392074585, 0.8325188159942627, 0.8274996876716614, 0.833179235458374, 0.830669641494751, 0.8329150676727295, 0.8432175517082214, 0.8454629778862, 0.8457271456718445, 0.847840428352356, 0.8560295701026917, 0.8580108284950256, 0.8557654023170471, 0.8610487580299377, 0.8578787446022034, 0.8617091774940491, 0.86553955078125, 0.8687095642089844, 0.868049144744873, 0.8667283058166504, 0.867520809173584, 0.874389111995697, 0.8710870146751404, 0.8755778670310974, 0.880729079246521, 0.880729079246521, 0.8848236799240112, 0.887201189994812, 0.8849557638168335, 0.8885219693183899, 0.8849557638168335, 0.8899748921394348, 0.889050304889679, 0.8942015767097473, 0.89552241563797, 0.898428201675415, 0.9005415439605713, 0.9005415439605713, 0.9012019634246826, 0.8956544995307922, 0.9026548862457275, 0.9017302989959717], "val_loss": [2.0477354526519775, 1.5189694166183472, 1.0516084432601929, 0.8461767435073853, 0.7572460174560547, 0.6985616683959961, 0.6546415090560913, 0.6190152764320374, 0.590345025062561, 0.5717648863792419, 0.5561721920967102, 0.5375750064849854, 0.5201012492179871, 0.5121762156486511, 0.49775731563568115, 0.48481646180152893, 0.48106926679611206, 0.47220560908317566, 0.45892634987831116, 0.46057382225990295, 0.44745877385139465, 0.43773144483566284, 0.43365034461021423, 0.4250427186489105, 0.4264233112335205, 0.4149337708950043, 0.41176676750183105, 0.4061870574951172, 0.4034122824668884, 0.3964240252971649, 0.3951454162597656, 0.39235684275627136, 0.38760319352149963, 0.3887118995189667, 0.3868517279624939, 0.3794003129005432, 0.3786139190196991, 0.3783773183822632, 0.37497973442077637, 0.3745129406452179, 0.37100934982299805, 0.367709755897522, 0.3763929009437561, 0.3711845278739929, 0.3583935499191284, 0.3586624264717102, 0.36013802886009216, 0.3623369634151459, 0.3555392324924469, 0.35502204298973083, 0.35420915484428406, 0.3503245413303375, 0.35126611590385437, 0.3472883403301239, 0.34735533595085144, 0.34904447197914124, 0.3447171747684479, 0.34701618552207947, 0.3452020585536957, 0.34938904643058777, 0.3449382185935974, 0.3435010612010956], "val_accuracy": [0.5673333406448364, 0.6589999794960022, 0.671999990940094, 0.6990000009536743, 0.7246666550636292, 0.7459999918937683, 0.7593333125114441, 0.7766666412353516, 0.784333348274231, 0.7916666865348816, 0.7990000247955322, 0.800000011920929, 0.8096666932106018, 0.8113333582878113, 0.8173333406448364, 0.8253333568572998, 0.8276666402816772, 0.8303333520889282, 0.8343333601951599, 0.8270000219345093, 0.8416666388511658, 0.8416666388511658, 0.847000002861023, 0.8500000238418579, 0.847000002861023, 0.8516666889190674, 0.8483333587646484, 0.8543333411216736, 0.8536666631698608, 0.8560000061988831, 0.859000027179718, 0.8573333621025085, 0.8650000095367432, 0.8600000143051147, 0.8600000143051147, 0.8656666874885559, 0.8616666793823242, 0.8616666793823242, 0.8679999709129333, 0.8640000224113464, 0.8686666488647461, 0.8723333477973938, 0.8656666874885559, 0.8619999885559082, 0.8706666827201843, 0.8690000176429749, 0.875, 0.8679999709129333, 0.8726666569709778, 0.8756666779518127, 0.8706666827201843, 0.8769999742507935, 0.8759999871253967, 0.8763333559036255, 0.8773333430290222, 0.8733333349227905, 0.878333330154419, 0.875, 0.8773333430290222, 0.8776666522026062, 0.8740000128746033, 0.8776666522026062]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3], [1, 0, 0, 2], [39, 82], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 8], [0, 0, 0, 3], [16, 16, 15], [0, 0, 0, 1], [0, 3, 9], [0], [99, 52], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 2, 6, 4, 1, 4, 2, 8, 7, 6, 3, 1, 1, 6, 5, 6, 6, 3, 7, 1], [0, 4, 0, 4, 0, 0, 3, 1, 2, 0, 0, 3, 1, 0, 0, 1, 0, 7, 0, 3, 4, 2], [27, 99, 96, 99, 61, 1, 52, 18, 10, 29]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 10, 6, 4, 3, 4, 3, 1, 2, 45, 23, 22, 10], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.math.pow(alpha, tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma), alpha), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.multiply(tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), grad), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, grad)))), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 2, 8, 0, 2, 6], [0, 1, 0, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 0, 0, 3], [22, 16, 58], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 8, 2, 1, 4, 1, 2, 6, 8], [0, 0, 0, 3, 0, 0, 3, 0, 2, 0], [16, 99, 96, 40, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3035213947296143, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 3, 2, 1, 1, 1, 12, 6, 6, 5], "tree_depth": 14}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [41, 39], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [5, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 0, 2, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09057142585515976, "mapping_values": [1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), grad), alpha)", "other_info": {"loss": [2.3091957569122314, 2.3097920417785645, 2.3101043701171875, 2.309469223022461, 2.309675455093384, 2.3104844093322754], "accuracy": [0.0940430611371994, 0.09166556596755981, 0.09391097724437714, 0.09615638852119446, 0.0952318087220192, 0.08968432247638702], "val_loss": [2.3083126544952393, 2.3083126544952393, 2.3083126544952393, 2.3083126544952393, 2.3083126544952393, 2.3083126544952393], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 2, 5, 9], [0, 1, 0, 2], [69, 39, 47], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 4], [0, 2, 0, 2], [41, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 1, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 46, 64, 61, 1]], "fitness": -0.08228571712970734, "mapping_values": [1, 12, 8, 4, 3, 2, 1, 1, 1, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3104395866394043, 2.3090574741363525, 2.3091185092926025, 2.3080780506134033, 2.3087921142578125, 2.308760643005371], "accuracy": [0.08942015469074249, 0.08717474341392517, 0.08691058307886124, 0.09589222073554993, 0.08717474341392517, 0.09192973375320435], "val_loss": [2.3088388442993164, 2.308727502822876, 2.3086750507354736, 2.3086438179016113, 2.308622121810913, 2.308605909347534], "val_accuracy": [0.08100000023841858, 0.08033332973718643, 0.0806666687130928, 0.08033332973718643, 0.08033332973718643, 0.07999999821186066]}}]