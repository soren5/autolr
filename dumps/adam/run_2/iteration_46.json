[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8614285588264465, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2237308025360107, 1.8680273294448853, 1.395832896232605, 1.1091198921203613, 0.9470789432525635, 0.8510999083518982, 0.783368706703186, 0.7319825887680054, 0.7006700038909912, 0.6753044724464417, 0.6459025144577026, 0.6288986802101135, 0.6097072958946228, 0.5877176523208618, 0.5716360807418823, 0.5550217628479004, 0.5429123044013977, 0.5274976491928101, 0.520840585231781, 0.5099524855613708, 0.49589040875434875, 0.4848717153072357, 0.47285306453704834, 0.4665635824203491, 0.4547938406467438, 0.4536537528038025, 0.4339491128921509, 0.43560516834259033, 0.4266793429851532, 0.42442935705184937, 0.42023319005966187, 0.41305091977119446, 0.3959045112133026, 0.38739529252052307, 0.3874256908893585, 0.38200461864471436, 0.3769921660423279, 0.3686094284057617, 0.3672593832015991, 0.36248674988746643, 0.36541786789894104, 0.3539789617061615, 0.3463599979877472, 0.3447488248348236, 0.34026387333869934, 0.3313556909561157, 0.3263393044471741, 0.32113394141197205, 0.33064329624176025, 0.3146804869174957, 0.3078777492046356, 0.3088059425354004, 0.300131231546402, 0.29780808091163635, 0.288756400346756, 0.28933295607566833, 0.2784889340400696, 0.27874940633773804], "accuracy": [0.27077004313468933, 0.49029189348220825, 0.5595033764839172, 0.6152423620223999, 0.6650376319885254, 0.6988508701324463, 0.7137762308120728, 0.7256637215614319, 0.7408532500267029, 0.7515519857406616, 0.7663452625274658, 0.7714964747428894, 0.7753269076347351, 0.785101056098938, 0.7906485199928284, 0.7998943328857422, 0.7991018295288086, 0.8034605979919434, 0.8098005652427673, 0.8142913579940796, 0.8231409192085266, 0.8260467648506165, 0.8273676037788391, 0.828292191028595, 0.8356888294219971, 0.8385946154594421, 0.8403117060661316, 0.8388587832450867, 0.8429533839225769, 0.8487650156021118, 0.8473120927810669, 0.8471800088882446, 0.8570862412452698, 0.860652506351471, 0.8598600029945374, 0.863558292388916, 0.8618412613868713, 0.8671245574951172, 0.8664641380310059, 0.8712190985679626, 0.869502067565918, 0.8704266548156738, 0.8708229064941406, 0.8754457831382751, 0.8747853636741638, 0.8800686597824097, 0.8838990926742554, 0.8844274282455444, 0.8759741187095642, 0.8870691061019897, 0.8908994793891907, 0.8870691061019897, 0.8936732411384583, 0.8936732411384583, 0.8953903317451477, 0.8971073627471924, 0.8988244533538818, 0.8986923694610596], "val_loss": [2.034043073654175, 1.4991246461868286, 1.0335859060287476, 0.835481584072113, 0.7503721714019775, 0.6931038498878479, 0.6485753059387207, 0.6146196126937866, 0.5879837274551392, 0.5689814686775208, 0.5475074052810669, 0.5399592518806458, 0.5217011570930481, 0.5105558037757874, 0.4959164559841156, 0.4801943302154541, 0.47238290309906006, 0.4655091166496277, 0.45568180084228516, 0.44885286688804626, 0.4405210018157959, 0.4320078194141388, 0.4288063049316406, 0.42493322491645813, 0.4205807149410248, 0.4129311442375183, 0.41113102436065674, 0.40198975801467896, 0.3979159891605377, 0.396548330783844, 0.3959694802761078, 0.3868647813796997, 0.38574883341789246, 0.38128241896629333, 0.3786584138870239, 0.37730976939201355, 0.37305352091789246, 0.37254542112350464, 0.3730347156524658, 0.36853739619255066, 0.37125298380851746, 0.36464983224868774, 0.3654358685016632, 0.3640602231025696, 0.35737210512161255, 0.35412007570266724, 0.3531516194343567, 0.34881868958473206, 0.35129979252815247, 0.3512769341468811, 0.3503333330154419, 0.3487655520439148, 0.3457897901535034, 0.3438047170639038, 0.3431025445461273, 0.34165817499160767, 0.3448210060596466, 0.3430538475513458], "val_accuracy": [0.5726666450500488, 0.6706666946411133, 0.6926666498184204, 0.7110000252723694, 0.7360000014305115, 0.7523333430290222, 0.7630000114440918, 0.7756666541099548, 0.7836666703224182, 0.7926666736602783, 0.7913333177566528, 0.7956666946411133, 0.8050000071525574, 0.8090000152587891, 0.8166666626930237, 0.8193333148956299, 0.824999988079071, 0.8266666531562805, 0.831333339214325, 0.8346666693687439, 0.8366666436195374, 0.8389999866485596, 0.8410000205039978, 0.840666651725769, 0.8456666469573975, 0.8506666421890259, 0.8473333120346069, 0.8576666712760925, 0.8546666502952576, 0.8576666712760925, 0.8583333492279053, 0.8613333106040955, 0.8640000224113464, 0.8646666407585144, 0.8610000014305115, 0.8666666746139526, 0.8690000176429749, 0.8613333106040955, 0.8663333058357239, 0.8669999837875366, 0.871666669845581, 0.8723333477973938, 0.8706666827201843, 0.8676666617393494, 0.8723333477973938, 0.875, 0.874666690826416, 0.875333309173584, 0.8763333559036255, 0.8773333430290222, 0.8733333349227905, 0.8756666779518127, 0.8823333382606506, 0.8786666393280029, 0.8803333044052124, 0.8793333172798157, 0.878333330154419, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [4, 2, 3, 0, 3, 5, 0, 0], [0, 2, 0, 3, 0], [16, 16, 43], [0, 0, 1], [0, 5], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [6, 3, 3, 6, 4, 1, 4, 1, 4, 2, 8, 7, 6, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0, 5, 4, 2], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 13, 8, 5, 3, 3, 2, 1, 1, 27, 14, 13, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.negative(tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.sqrt(tf.math.add(alpha, beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), tf.math.divide_no_nan(grad, tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 4], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 3, 8, 3, 5, 2, 7, 3, 7, 7, 7, 6, 4, 5, 7, 0, 2, 8, 1, 6, 6, 1, 1, 0, 2, 7, 3, 1, 8, 5, 7, 7, 0, 9, 9, 1, 3, 7, 5, 3, 9], [0, 2, 0, 3, 3, 2, 5, 1, 2, 4, 5, 3, 2, 4, 1, 0, 2, 4, 0, 5, 0, 5, 4, 1, 5, 1], [16, 16, 30, 17, 50, 22, 38, 58], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 2, 3, 6, 8, 1, 3, 1, 4, 2, 8], [3, 0, 0, 3, 2, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 68, 42, 26, 8, 1, 0, 1, 1, 16, 8, 8, 3], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(alpha, alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.pow(beta, grad), tf.math.square(tf.math.add(tf.math.negative(grad), grad))), tf.math.add(tf.math.sqrt(beta), tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.subtract(tf.math.negative(tf.math.add(tf.math.add(tf.math.multiply(tf.math.subtract(beta, grad), tf.math.sqrt(tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(grad, tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), grad), tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.square(grad), alpha), grad), tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), alpha)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), beta), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 3, 0, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 5], [0, 1, 0, 3], [16, 16], [0, 1], [0], [0], [37], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2, 8, 1, 7, 6, 3, 7, 7, 3, 3, 2, 2, 4, 5, 8, 6], [0, 0, 3, 3, 0, 0, 4, 1, 2, 0, 0, 3, 6, 0, 7, 0, 0, 5, 7, 4, 1, 1, 0], [16, 65, 96, 99, 61, 17, 27, 66, 49, 44]], "fitness": -0.09200000017881393, "mapping_values": [1, 9, 5, 4, 2, 11, 7, 4, 2, 2, 1, 1, 1, 49, 26, 23, 10], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(alpha))), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.add(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(grad, alpha)))), beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.add(grad, tf.math.multiply(tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(tf.math.pow(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.sqrt(grad))))), grad), alpha)), tf.math.divide_no_nan(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.310917854309082, 2.311068534851074, 2.31001615524292, 2.31022047996521, 2.309232473373413, 2.30900239944458], "accuracy": [0.09576013684272766, 0.09008057415485382, 0.09325055778026581, 0.08994849026203156, 0.08611807972192764, 0.09774138033390045], "val_loss": [2.308615207672119, 2.308615207672119, 2.308615207672119, 2.308615207672119, 2.308615207672119, 2.308615207672119], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 70], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 4, 8], [3, 3, 0, 3, 1], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 5, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 66, 61, 1]], "fitness": -0.08828571438789368, "mapping_values": [1, 9, 5, 4, 2, 12, 7, 5, 1, 2, 1, 1, 1, 15, 8, 7, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.sqrt(alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))))), tf.math.subtract(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.3091416358947754, 2.3096251487731934, 2.309231758117676, 2.3102123737335205, 2.3092563152313232, 2.3105292320251465], "accuracy": [0.09576013684272766, 0.09179764986038208, 0.09325055778026581, 0.08928807079792023, 0.1022322028875351, 0.09140139818191528], "val_loss": [2.3085427284240723, 2.308542251586914, 2.308542013168335, 2.308541774749756, 2.308541774749756, 2.3085412979125977], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}]