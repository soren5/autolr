[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8748571276664734, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2257304191589355, 1.8795742988586426, 1.4002149105072021, 1.0845156908035278, 0.9352409243583679, 0.8323283195495605, 0.7702773213386536, 0.7239602208137512, 0.6890323162078857, 0.6605302095413208, 0.6405627727508545, 0.618780791759491, 0.5953121185302734, 0.5723647475242615, 0.5688818097114563, 0.5402939915657043, 0.5230716466903687, 0.5185339450836182, 0.5055860877037048, 0.49823811650276184, 0.48530110716819763, 0.4731071889400482, 0.4742107689380646, 0.4618343412876129, 0.45226407051086426, 0.43923208117485046, 0.42923814058303833, 0.4224671423435211, 0.4132537245750427, 0.4171052873134613, 0.40286657214164734, 0.401645690202713, 0.3904517590999603, 0.3879532814025879, 0.3833983242511749, 0.3733660578727722, 0.3682907521724701, 0.3621160089969635, 0.3541252911090851, 0.35348233580589294, 0.34747570753097534, 0.3413771390914917, 0.33653727173805237, 0.3308607339859009, 0.32244059443473816, 0.3230111598968506, 0.31718727946281433, 0.3173046112060547, 0.3139379322528839, 0.3081393241882324, 0.3043934404850006, 0.29838016629219055, 0.28782740235328674, 0.28089746832847595, 0.27577802538871765, 0.27998772263526917, 0.2814391553401947, 0.2731642425060272, 0.2675051689147949, 0.25949910283088684, 0.25661787390708923, 0.2519060969352722, 0.2506949305534363, 0.24650299549102783, 0.24389494955539703, 0.2343333512544632, 0.22960200905799866, 0.2354428470134735, 0.23220930993556976, 0.2245044708251953, 0.22387441992759705, 0.22017037868499756, 0.21408002078533173, 0.20792903006076813, 0.209246426820755, 0.2106911689043045, 0.2036212831735611, 0.1993311047554016], "accuracy": [0.2793554365634918, 0.4865935742855072, 0.5695416927337646, 0.6186765432357788, 0.666358470916748, 0.7003037929534912, 0.7259278893470764, 0.7296261787414551, 0.748778223991394, 0.7600052952766418, 0.7647602558135986, 0.7684586048126221, 0.7815347909927368, 0.7957997918128967, 0.7957997918128967, 0.8035926818847656, 0.8074230551719666, 0.8078193068504333, 0.8131026029586792, 0.8224804997444153, 0.8222163319587708, 0.8245938420295715, 0.8298771381378174, 0.8335754871368408, 0.8360850811004639, 0.844010055065155, 0.8426892161369324, 0.8448025584220886, 0.8471800088882446, 0.8491612672805786, 0.8574824929237366, 0.8543124794960022, 0.858671247959137, 0.859199583530426, 0.858671247959137, 0.8667283058166504, 0.863558292388916, 0.8702945709228516, 0.8681812286376953, 0.8706908226013184, 0.8689737319946289, 0.8739928603172302, 0.8782195448875427, 0.8821820020675659, 0.8841632604598999, 0.8782195448875427, 0.8869370222091675, 0.8794082403182983, 0.8840311765670776, 0.8815215826034546, 0.8944657444953918, 0.8912957310676575, 0.8919561505317688, 0.8926165699958801, 0.8949940800666809, 0.897899866104126, 0.8994848728179932, 0.898428201675415, 0.9041078090667725, 0.9046360850334167, 0.9060890078544617, 0.9095231890678406, 0.9060890078544617, 0.9108440279960632, 0.9080702662467957, 0.9149385690689087, 0.9140139818191528, 0.9083344340324402, 0.915070652961731, 0.915070652961731, 0.9159952402114868, 0.921938955783844, 0.9198256731033325, 0.9210143685340881, 0.9228635430335999, 0.9196935892105103, 0.9269581437110901, 0.926429808139801], "val_loss": [2.045520782470703, 1.521894097328186, 1.045864224433899, 0.8405641317367554, 0.7541571259498596, 0.6997856497764587, 0.6578887701034546, 0.6186016201972961, 0.5940539836883545, 0.5707026124000549, 0.547885000705719, 0.5374830365180969, 0.5198137760162354, 0.5039316415786743, 0.5027194023132324, 0.4843730330467224, 0.4730151891708374, 0.46506747603416443, 0.45391303300857544, 0.454712837934494, 0.44479256868362427, 0.4381479024887085, 0.4374189078807831, 0.43261051177978516, 0.42431265115737915, 0.41918185353279114, 0.41278308629989624, 0.4116319715976715, 0.4080835282802582, 0.4041145443916321, 0.40467435121536255, 0.4004606008529663, 0.39678290486335754, 0.3894149661064148, 0.3937996029853821, 0.3846401274204254, 0.38279345631599426, 0.38769441843032837, 0.3774288296699524, 0.3818838596343994, 0.37320321798324585, 0.3775084614753723, 0.3697284460067749, 0.37272608280181885, 0.3658878207206726, 0.3662434220314026, 0.36805737018585205, 0.36323216557502747, 0.36421117186546326, 0.35865551233291626, 0.3593340516090393, 0.3540715277194977, 0.35871216654777527, 0.35692235827445984, 0.3546740710735321, 0.35243961215019226, 0.349816232919693, 0.35567015409469604, 0.35231485962867737, 0.3486785590648651, 0.35001054406166077, 0.34874990582466125, 0.35194164514541626, 0.3539067804813385, 0.348347544670105, 0.35494935512542725, 0.35152509808540344, 0.34135204553604126, 0.3479156792163849, 0.34889012575149536, 0.3503827452659607, 0.3495117723941803, 0.3451566994190216, 0.34634536504745483, 0.34823745489120483, 0.34743717312812805, 0.35348641872406006, 0.34741130471229553], "val_accuracy": [0.5426666736602783, 0.6576666831970215, 0.6840000152587891, 0.7020000219345093, 0.7226666808128357, 0.737333357334137, 0.750333309173584, 0.7616666555404663, 0.7689999938011169, 0.7879999876022339, 0.7933333516120911, 0.7963333129882812, 0.8073333501815796, 0.8169999718666077, 0.8173333406448364, 0.8223333358764648, 0.8309999704360962, 0.8333333134651184, 0.8413333296775818, 0.8453333377838135, 0.8383333086967468, 0.8453333377838135, 0.8489999771118164, 0.8456666469573975, 0.8539999723434448, 0.8519999980926514, 0.8550000190734863, 0.8566666841506958, 0.859666645526886, 0.8576666712760925, 0.8603333234786987, 0.8579999804496765, 0.8613333106040955, 0.8656666874885559, 0.8640000224113464, 0.8653333187103271, 0.8663333058357239, 0.8640000224113464, 0.8696666955947876, 0.8663333058357239, 0.8700000047683716, 0.8663333058357239, 0.8690000176429749, 0.8690000176429749, 0.8706666827201843, 0.8693333268165588, 0.8690000176429749, 0.871666669845581, 0.875, 0.8740000128746033, 0.8730000257492065, 0.875333309173584, 0.8763333559036255, 0.874666690826416, 0.8769999742507935, 0.8790000081062317, 0.8790000081062317, 0.8793333172798157, 0.878000020980835, 0.8763333559036255, 0.8816666603088379, 0.878333330154419, 0.8813333511352539, 0.8786666393280029, 0.8820000290870667, 0.875, 0.8796666860580444, 0.8826666474342346, 0.8796666860580444, 0.8813333511352539, 0.8793333172798157, 0.8823333382606506, 0.8856666684150696, 0.8840000033378601, 0.8856666684150696, 0.8823333382606506, 0.8820000290870667, 0.8843333125114441]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8588571548461914, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.219883441925049, 1.8562836647033691, 1.3873993158340454, 1.0952374935150146, 0.9288573861122131, 0.8375300765037537, 0.7702932357788086, 0.7316043376922607, 0.6842647194862366, 0.6548343896865845, 0.6267665028572083, 0.6157903075218201, 0.5924893021583557, 0.5714070200920105, 0.5569308400154114, 0.548932671546936, 0.5377017855644226, 0.524625837802887, 0.5039219260215759, 0.49655914306640625, 0.4867197871208191, 0.47263407707214355, 0.4735938012599945, 0.45647287368774414, 0.4498281478881836, 0.43508046865463257, 0.4317978024482727, 0.41919898986816406, 0.41529539227485657, 0.41881194710731506, 0.414358526468277, 0.4105541706085205, 0.40479016304016113, 0.39178311824798584, 0.38132810592651367, 0.37642350792884827, 0.3734433948993683, 0.37456461787223816, 0.36520490050315857, 0.3592225909233093, 0.3557874858379364, 0.34804287552833557, 0.33961668610572815, 0.34125828742980957, 0.33643460273742676], "accuracy": [0.2797516882419586, 0.4954431354999542, 0.5638620853424072, 0.6147140264511108, 0.6676793098449707, 0.6983225345611572, 0.7215691208839417, 0.7421740889549255, 0.7544577717781067, 0.7631752490997314, 0.7716285586357117, 0.778761088848114, 0.7906485199928284, 0.7951393723487854, 0.8000264167785645, 0.8012151718139648, 0.8088759779930115, 0.8101968169212341, 0.8201030492782593, 0.8214238286018372, 0.826310932636261, 0.8313300609588623, 0.833179235458374, 0.8380662798881531, 0.8368775844573975, 0.8433496356010437, 0.8487650156021118, 0.850350022315979, 0.8477083444595337, 0.8502179384231567, 0.8482366800308228, 0.8549728989601135, 0.8597279191017151, 0.8589354157447815, 0.863029956817627, 0.8627657890319824, 0.8656716346740723, 0.8632941246032715, 0.8677849769592285, 0.8709549307823181, 0.872407853603363, 0.8721436858177185, 0.878879964351654, 0.874389111995697, 0.878351628780365], "val_loss": [2.0313210487365723, 1.501362681388855, 1.036104679107666, 0.8347347974777222, 0.7415147423744202, 0.6815619468688965, 0.6334761381149292, 0.6029856204986572, 0.5708060264587402, 0.5424270033836365, 0.5221548676490784, 0.516501247882843, 0.4912704527378082, 0.4873139262199402, 0.4691644608974457, 0.4672882556915283, 0.451351523399353, 0.44315752387046814, 0.4319094717502594, 0.42541608214378357, 0.42056944966316223, 0.4110884666442871, 0.4089953601360321, 0.40469613671302795, 0.39885246753692627, 0.3935129940509796, 0.38867685198783875, 0.3868263363838196, 0.38023078441619873, 0.3741368055343628, 0.38256770372390747, 0.37923717498779297, 0.3681768774986267, 0.3695422410964966, 0.3634072244167328, 0.35818490386009216, 0.3578512668609619, 0.3555004894733429, 0.3587273061275482, 0.3492644131183624, 0.34704476594924927, 0.3457811772823334, 0.34753158688545227, 0.3421744108200073, 0.34372007846832275], "val_accuracy": [0.5546666383743286, 0.6536666750907898, 0.6736666560173035, 0.6993333101272583, 0.7306666374206543, 0.7473333477973938, 0.7566666603088379, 0.768666684627533, 0.7756666541099548, 0.7873333096504211, 0.793666660785675, 0.8026666641235352, 0.812666654586792, 0.8113333582878113, 0.8186666369438171, 0.8233333230018616, 0.8293333053588867, 0.8349999785423279, 0.8379999995231628, 0.8423333168029785, 0.8413333296775818, 0.8450000286102295, 0.8446666598320007, 0.8443333506584167, 0.8496666550636292, 0.8516666889190674, 0.8519999980926514, 0.8579999804496765, 0.8556666374206543, 0.859000027179718, 0.859000027179718, 0.8603333234786987, 0.8673333525657654, 0.8663333058357239, 0.8659999966621399, 0.8693333268165588, 0.8700000047683716, 0.8679999709129333, 0.8693333268165588, 0.8759999871253967, 0.874666690826416, 0.8756666779518127, 0.8723333477973938, 0.875333309173584, 0.8740000128746033]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39, 63], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 8, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 6, 4, 2, 1, 1, 0, 1, 1, 16, 8, 8, 5], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))))", "other_info": {"loss": [2.3027963638305664, 2.3026211261749268, 2.3026082515716553, 2.3026249408721924, 2.3026492595672607, 2.302745819091797, 2.3028600215911865, 2.3029677867889404, 2.303926467895508, 2.306370973587036, 2.3101580142974854], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09153348207473755, 0.09642054885625839, 0.09840179979801178, 0.09602430462837219, 0.09998679161071777, 0.09642054885625839, 0.0952318087220192, 0.09734513610601425, 0.09879804402589798], "val_loss": [2.3025786876678467, 2.302584409713745, 2.302595615386963, 2.302590847015381, 2.3026156425476074, 2.3025741577148438, 2.3025546073913574, 2.3029885292053223, 2.3029046058654785, 2.303386688232422, 2.3171939849853516], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09966666996479034, 0.10066666454076767, 0.09799999743700027, 0.10366666316986084, 0.10366666316986084, 0.10300000011920929, 0.09799999743700027, 0.10000000149011612, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 4, 3, 0, 3], [0, 1, 0, 2], [45, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 3, 1, 5, 8], [0, 2, 0, 3, 4], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 3, 1, 4, 2, 8], [0, 0, 0, 3, 0, 3, 4, 1, 2, 0], [16, 99, 78, 52, 0, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 12, 7, 5, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(sigma, tf.math.subtract(grad, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 3, 2, 3, 1, 4], [0, 1, 0, 2, 2, 0, 2, 0], [18, 39, 84, 24], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [46], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 3, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 21, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(grad, tf.math.pow(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)), sigma)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}, "mapping_values": [1, 15, 7, 8, 4, 10, 6, 4, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 16}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 6], [0, 1, 2, 2], [44, 7], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [9], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [8, 3, 3, 6, 8, 1, 4, 1, 6, 2, 8], [1, 0, 0, 3, 0, 0, 3, 1, 2, 0], [73, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 10, 6, 4, 2, 2, 1, 1, 1, 13, 7, 6, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}]