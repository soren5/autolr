[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8591428399085999, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224454402923584, 1.8741521835327148, 1.4006527662277222, 1.1021493673324585, 0.9334308505058289, 0.8489258289337158, 0.7797843813896179, 0.7292625904083252, 0.6955422163009644, 0.6618674993515015, 0.6344736218452454, 0.6147658824920654, 0.5947353839874268, 0.5749788880348206, 0.55999755859375, 0.5441237688064575, 0.5359414219856262, 0.5210749506950378, 0.5165875554084778, 0.4925384223461151, 0.4869140386581421, 0.48171669244766235, 0.46976709365844727, 0.4602603316307068, 0.4560891091823578, 0.44628438353538513, 0.4308849573135376, 0.4331420660018921, 0.42411938309669495, 0.4149593710899353, 0.40823885798454285, 0.4027772843837738, 0.4013042747974396, 0.39284634590148926, 0.3839336335659027, 0.38246092200279236, 0.37010523676872253, 0.36715951561927795, 0.3588578701019287, 0.3586339056491852, 0.35517075657844543, 0.349839448928833, 0.3399486839771271, 0.34177160263061523, 0.33988967537879944, 0.32601773738861084, 0.32853230834007263, 0.3194497227668762, 0.31791001558303833, 0.3082907497882843, 0.30950015783309937, 0.3075311481952667, 0.3012995719909668], "accuracy": [0.27222296595573425, 0.4691586196422577, 0.5595033764839172, 0.617751955986023, 0.6643772125244141, 0.6960771083831787, 0.7165499925613403, 0.7322678565979004, 0.7477215528488159, 0.7572315335273743, 0.7745344042778015, 0.7799497842788696, 0.7808743715286255, 0.7924976944923401, 0.7947431206703186, 0.8009510040283203, 0.8082155585289001, 0.8100647330284119, 0.8123101592063904, 0.8244617581367493, 0.8274996876716614, 0.8272355198860168, 0.8315942287445068, 0.833179235458374, 0.841500461101532, 0.8392550349235535, 0.8451988101005554, 0.8490291833877563, 0.8545766472816467, 0.8527275323867798, 0.8552370667457581, 0.8614450097084045, 0.8605204224586487, 0.8615770936012268, 0.8627657890319824, 0.8613129258155823, 0.8683133125305176, 0.867520809173584, 0.8734645247459412, 0.8734645247459412, 0.8737286925315857, 0.8732003569602966, 0.8812574148178101, 0.8803328275680542, 0.8784837126731873, 0.8831065893173218, 0.8795403242111206, 0.8868049383163452, 0.8865407705307007, 0.8922203183174133, 0.8899748921394348, 0.8924844861030579, 0.8947299122810364], "val_loss": [2.0386598110198975, 1.5159131288528442, 1.0456757545471191, 0.8404015302658081, 0.7543740272521973, 0.6942059993743896, 0.6536396741867065, 0.61428302526474, 0.5926631093025208, 0.5689499974250793, 0.551514208316803, 0.5360684394836426, 0.5199425220489502, 0.5045753717422485, 0.4953813850879669, 0.4858759045600891, 0.47719645500183105, 0.47141769528388977, 0.46200183033943176, 0.45156535506248474, 0.4543185234069824, 0.44311803579330444, 0.4479161500930786, 0.4339054822921753, 0.42751944065093994, 0.422184556722641, 0.41561853885650635, 0.4126189649105072, 0.4129891097545624, 0.40755534172058105, 0.40210792422294617, 0.39935368299484253, 0.39802905917167664, 0.39285826683044434, 0.3917889893054962, 0.3857487440109253, 0.3871678411960602, 0.39096781611442566, 0.3872608244419098, 0.3797142803668976, 0.3752914369106293, 0.3746506869792938, 0.37224146723747253, 0.36995750665664673, 0.37520936131477356, 0.370297372341156, 0.36909180879592896, 0.3646000921726227, 0.36426669359207153, 0.3654293715953827, 0.36320599913597107, 0.3563670217990875, 0.3643251955509186], "val_accuracy": [0.5266666412353516, 0.6650000214576721, 0.687333345413208, 0.7106666564941406, 0.7283333539962769, 0.746999979019165, 0.7616666555404663, 0.7710000276565552, 0.778333306312561, 0.7893333435058594, 0.796999990940094, 0.8023333549499512, 0.8130000233650208, 0.8159999847412109, 0.8223333358764648, 0.8223333358764648, 0.8303333520889282, 0.8233333230018616, 0.8289999961853027, 0.8396666646003723, 0.8383333086967468, 0.8479999899864197, 0.8389999866485596, 0.843666672706604, 0.8489999771118164, 0.8506666421890259, 0.8553333282470703, 0.8533333539962769, 0.8523333072662354, 0.8539999723434448, 0.8586666584014893, 0.8586666584014893, 0.8600000143051147, 0.862333357334137, 0.862333357334137, 0.8656666874885559, 0.862333357334137, 0.8613333106040955, 0.8636666536331177, 0.8659999966621399, 0.8676666617393494, 0.8636666536331177, 0.8690000176429749, 0.8690000176429749, 0.8693333268165588, 0.8673333525657654, 0.8703333139419556, 0.8766666650772095, 0.8733333349227905, 0.875, 0.8733333349227905, 0.8726666569709778, 0.8736666440963745]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 5], [0, 1, 0, 2], [16, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 6, 6, 8, 2, 4, 1, 4, 2, 8, 7, 3, 5], [0, 0, 0, 3, 1, 0, 3, 1, 4, 0, 2, 5], [16, 99, 96, 99, 61, 1]], "fitness": -0.15885713696479797, "mapping_values": [1, 8, 5, 3, 2, 2, 1, 1, 1, 2, 1, 1, 1, 26, 14, 12, 5], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(alpha, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.add(tf.math.multiply(sigma, alpha), grad)), tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))), beta), grad)", "other_info": {"loss": [18575440.0, 21902970.0, 29942954.0, 13932003328.0, 18630424576.0, 18965215232.0, 19509161984.0, 19582572544.0, 19850158080.0], "accuracy": [0.0886276587843895, 0.08545766770839691, 0.10870426893234253, 0.11266675591468811, 0.11927089840173721, 0.11042134463787079, 0.1146479994058609, 0.11398758739233017, 0.11253467202186584], "val_loss": [14030109.0, 21328462.0, 21329458.0, 20179851264.0, 20179851264.0, 20179851264.0, 20179851264.0, 20179851264.0, 20179851264.0], "val_accuracy": [0.0806666687130928, 0.10366666316986084, 0.10366666316986084, 0.15266667306423187, 0.15266667306423187, 0.15266667306423187, 0.15266667306423187, 0.15266667306423187, 0.15266667306423187]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 2, 3, 0, 3, 8, 9], [0, 1, 0, 2], [39, 10, 48], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 6, 3, 5, 7, 8], [0, 2, 0, 3, 5, 5], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8], [0, 3, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 93, 20, 84]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(tf.math.sqrt(grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), tf.math.add(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), sigma)), alpha), tf.math.sqrt(grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}, "mapping_values": [1, 10, 7, 3, 3, 14, 8, 6, 2, 2, 1, 1, 1, 20, 11, 9, 4], "tree_depth": 20}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 1], [5, 2, 3, 0, 3], [1, 1, 0, 2], [3, 39], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 0], [16, 16, 14], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 3, 4, 2, 0], [0, 0, 0, 3, 0, 0, 2, 1, 2, 4, 3, 1, 5], [16, 99, 96, 97, 61, 1]], "fitness": -0.09542857110500336, "mapping_values": [1, 1, 0, 1, 0, 10, 6, 4, 3, 2, 1, 1, 1, 27, 14, 13, 5], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), beta)), tf.math.multiply(tf.math.pow(alpha, beta), tf.math.add(grad, sigma)))), tf.math.negative(alpha)), grad)", "other_info": {"loss": [2.3112449645996094, 2.3093557357788086, 2.309253692626953, 2.3106179237365723, 2.3107383251190186, 2.309919834136963], "accuracy": [0.09232597798109055, 0.09153348207473755, 0.09721305221319199, 0.09430722147226334, 0.08915598690509796, 0.09681680053472519], "val_loss": [2.3094382286071777, 2.3094382286071777, 2.3094382286071777, 2.3094382286071777, 2.3094382286071777, 2.3094382286071777], "val_accuracy": [0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [5, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 2], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [6, 3, 3, 4, 8, 1, 4, 2, 4, 2, 8, 3, 4, 2, 5, 9, 3], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2, 2, 5], [16, 99, 96, 99, 61, 1, 86]], "fitness": -0.0925714299082756, "mapping_values": [1, 9, 5, 4, 2, 4, 2, 2, 1, 2, 1, 1, 1, 30, 17, 13, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(tf.math.multiply(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(tf.math.square(beta), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, grad))))", "other_info": {"loss": [2.3109130859375, 2.3099443912506104, 2.3103458881378174, 2.3090453147888184, 2.310809373855591, 2.31015944480896], "accuracy": [0.08836349099874496, 0.09060890227556229, 0.08942015469074249, 0.09298639744520187, 0.0866464152932167, 0.08915598690509796], "val_loss": [2.3092498779296875, 2.3092498779296875, 2.3092496395111084, 2.3092496395111084, 2.3092496395111084, 2.3092496395111084], "val_accuracy": [0.0860000029206276, 0.0860000029206276, 0.0860000029206276, 0.0860000029206276, 0.0860000029206276, 0.0860000029206276]}}]