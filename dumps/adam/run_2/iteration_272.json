[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8645714521408081, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2213075160980225, 1.8558365106582642, 1.3851295709609985, 1.096879243850708, 0.9347580671310425, 0.8394920825958252, 0.7737805247306824, 0.7195774912834167, 0.6784965395927429, 0.656728208065033, 0.6306470632553101, 0.6095796227455139, 0.5882335901260376, 0.5760699510574341, 0.5571426153182983, 0.5409883856773376, 0.5229041576385498, 0.5119071006774902, 0.5072149634361267, 0.49069124460220337, 0.48530641198158264, 0.47178712487220764, 0.4670354723930359, 0.45280611515045166, 0.4508913457393646, 0.4391145408153534, 0.433587908744812, 0.4255552887916565, 0.4132687449455261, 0.4122229516506195, 0.4077691435813904, 0.3923255503177643, 0.3933292031288147, 0.3807940185070038, 0.38219931721687317, 0.3717588186264038, 0.35963842272758484, 0.3682608902454376, 0.35916516184806824, 0.35607245564460754, 0.3466925323009491, 0.33849281072616577, 0.338389128446579, 0.33742648363113403, 0.3297072947025299, 0.3258078992366791, 0.3218839466571808, 0.30988311767578125, 0.3146163821220398, 0.3091261088848114, 0.29574233293533325, 0.3081986606121063, 0.29837265610694885, 0.29105910658836365, 0.29171621799468994, 0.2772780954837799, 0.28192558884620667, 0.28073522448539734, 0.27204856276512146, 0.26657161116600037, 0.26418164372444153, 0.260283887386322, 0.2576692998409271, 0.2528672516345978, 0.259901225566864, 0.25135040283203125, 0.2520162761211395, 0.2454870045185089, 0.2464016079902649, 0.23220475018024445, 0.23336149752140045, 0.232212096452713, 0.2222139686346054, 0.2235482633113861, 0.21913845837116241, 0.21547260880470276, 0.2096792310476303], "accuracy": [0.27843084931373596, 0.4963677227497101, 0.5703341960906982, 0.6217144131660461, 0.666358470916748, 0.6923788189888, 0.7210407853126526, 0.7358341217041016, 0.7516840696334839, 0.7589486241340637, 0.7700436115264893, 0.7761194109916687, 0.7861577272415161, 0.7906485199928284, 0.7984414100646973, 0.8006868362426758, 0.8099326491355896, 0.8101968169212341, 0.8166688680648804, 0.8232730031013489, 0.8249900937080383, 0.8304054737091064, 0.8322546482086182, 0.8401796221733093, 0.8356888294219971, 0.8441421389579773, 0.8397833704948425, 0.8445383906364441, 0.8525954484939575, 0.8499537706375122, 0.8515387773513794, 0.8532558679580688, 0.8573504090309143, 0.8618412613868713, 0.8626337051391602, 0.8647470474243164, 0.8698983192443848, 0.8697662353515625, 0.8691058158874512, 0.8705587387084961, 0.8732003569602966, 0.8780874609947205, 0.8766345381736755, 0.8794082403182983, 0.8780874609947205, 0.880729079246521, 0.8799365758895874, 0.886672854423523, 0.8874653577804565, 0.8858803510665894, 0.8924844861030579, 0.8854840993881226, 0.8908994793891907, 0.8928807377815247, 0.8931449055671692, 0.8971073627471924, 0.8951261639595032, 0.8976356983184814, 0.8990886211395264, 0.9015982151031494, 0.90423983335495, 0.9022586345672607, 0.9082023501396179, 0.9066173434257507, 0.9072777628898621, 0.9099194407463074, 0.9054285883903503, 0.9111081957817078, 0.9116365313529968, 0.9165235757827759, 0.9163914918899536, 0.9167877435684204, 0.9192973375320435, 0.9182406663894653, 0.9194294214248657, 0.9199577569961548, 0.9247127175331116], "val_loss": [2.0366175174713135, 1.511286735534668, 1.0422446727752686, 0.8319879770278931, 0.7427213788032532, 0.6814357042312622, 0.6323977708816528, 0.6034072041511536, 0.5790204405784607, 0.5507518649101257, 0.5422149896621704, 0.5175099968910217, 0.5049649477005005, 0.4949954152107239, 0.48499274253845215, 0.47310569882392883, 0.463959276676178, 0.45608702301979065, 0.4526258111000061, 0.44206973910331726, 0.43442583084106445, 0.4268200695514679, 0.4256094694137573, 0.4209219515323639, 0.4199051558971405, 0.4135037958621979, 0.4112815856933594, 0.4007335901260376, 0.3953680694103241, 0.39473840594291687, 0.3873574733734131, 0.3882848024368286, 0.38492757081985474, 0.3811231255531311, 0.3798379600048065, 0.37888821959495544, 0.3714275360107422, 0.375590980052948, 0.3705352246761322, 0.365192711353302, 0.36097246408462524, 0.35791274905204773, 0.35659894347190857, 0.3589015305042267, 0.3549763858318329, 0.3510940670967102, 0.352965772151947, 0.3511248826980591, 0.3467676639556885, 0.34736162424087524, 0.35257962346076965, 0.34469401836395264, 0.3418391942977905, 0.34476298093795776, 0.33641865849494934, 0.3400467038154602, 0.33988627791404724, 0.3402968943119049, 0.337554007768631, 0.3336600363254547, 0.3339327871799469, 0.33226072788238525, 0.33215269446372986, 0.3340609669685364, 0.3289729356765747, 0.3310050666332245, 0.3331891596317291, 0.32886481285095215, 0.32463911175727844, 0.32661646604537964, 0.3244404196739197, 0.32697412371635437, 0.32365360856056213, 0.3220849335193634, 0.3252963125705719, 0.32361388206481934, 0.3236764669418335], "val_accuracy": [0.5243333578109741, 0.656333327293396, 0.6759999990463257, 0.7076666951179504, 0.7329999804496765, 0.7483333349227905, 0.7606666684150696, 0.765999972820282, 0.7796666622161865, 0.7913333177566528, 0.8003333210945129, 0.8056666851043701, 0.8090000152587891, 0.812666654586792, 0.8186666369438171, 0.8270000219345093, 0.8289999961853027, 0.8360000252723694, 0.8429999947547913, 0.8386666774749756, 0.8383333086967468, 0.8483333587646484, 0.8410000205039978, 0.8489999771118164, 0.8476666808128357, 0.8460000157356262, 0.8536666631698608, 0.8526666760444641, 0.8576666712760925, 0.8553333282470703, 0.8586666584014893, 0.8579999804496765, 0.859666645526886, 0.859666645526886, 0.8666666746139526, 0.8576666712760925, 0.862666666507721, 0.8586666584014893, 0.8640000224113464, 0.8686666488647461, 0.8666666746139526, 0.8686666488647461, 0.8700000047683716, 0.8669999837875366, 0.8693333268165588, 0.8703333139419556, 0.8663333058357239, 0.8713333606719971, 0.8703333139419556, 0.8736666440963745, 0.8693333268165588, 0.8756666779518127, 0.8730000257492065, 0.8743333220481873, 0.8759999871253967, 0.871666669845581, 0.871999979019165, 0.8769999742507935, 0.8740000128746033, 0.8786666393280029, 0.8756666779518127, 0.8740000128746033, 0.878333330154419, 0.8743333220481873, 0.8796666860580444, 0.8803333044052124, 0.8759999871253967, 0.8793333172798157, 0.8826666474342346, 0.8790000081062317, 0.8776666522026062, 0.8846666812896729, 0.8796666860580444, 0.8776666522026062, 0.8826666474342346, 0.8813333511352539, 0.8806666731834412]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [6, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [46], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 4, 2, 8], [0, 1, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 8, 4, 4, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.3847832679748535, 2.312039375305176, 2.3140130043029785, 2.3211662769317627, 5.980458736419678, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11094967275857925, 0.10077928751707077, 0.10051512718200684, 0.09998679161071777, 0.09721305221319199, 0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3075029850006104, 2.3193323612213135, 2.306666374206543, 2.3100650310516357, 5.778452133646539e+19, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.09600000083446503, 0.09866666793823242, 0.10199999809265137, 0.09233333170413971, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 6, 3, 0, 3, 8, 6, 5, 9, 3, 1, 3, 7, 2, 1, 1, 0, 4, 8, 7, 5, 1, 8, 5, 8], [1, 0, 0, 2, 0, 3, 0, 1, 0, 0, 3, 3, 3, 3], [39, 39, 53, 8, 28, 10, 31], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 88], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 6], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 39, 25, 14, 7, 10, 6, 4, 2, 2, 1, 1, 0, 23, 12, 11, 6], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(alpha), tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(grad, tf.math.multiply(tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.subtract(tf.math.subtract(tf.math.negative(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.math.sqrt(tf.math.add(tf.math.square(tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), grad)))), grad))), tf.math.sqrt(grad))), tf.math.square(tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(alpha, beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 5, 0, 3, 5], [0, 2, 0, 3], [76, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 3, 6, 8, 1, 9, 1, 4, 2, 8, 1], [0, 0, 0, 3, 0, 0, 3, 1, 3, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 21, 12, 9, 6], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), sigma)), tf.math.sqrt(tf.math.subtract(alpha, sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5], [1, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 6, 2, 8], [0, 0, 0, 3, 3, 0, 0, 1, 2, 0], [21, 99, 96, 99, 61, 1]], "fitness": -0.09057142585515976, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(sigma, tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30904483795166, 2.311030387878418, 2.31001877784729, 2.310920238494873, 2.3098666667938232, 2.309217929840088], "accuracy": [0.09549596905708313, 0.08770307898521423, 0.09192973375320435, 0.08836349099874496, 0.09060890227556229, 0.09787346422672272], "val_loss": [2.3075528144836426, 2.3075528144836426, 2.3075528144836426, 2.3075528144836426, 2.3075528144836426, 2.3075528144836426], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 0, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}]