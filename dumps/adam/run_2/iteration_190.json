[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8765714168548584, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224602222442627, 1.8642319440841675, 1.3951302766799927, 1.1053282022476196, 0.9489896297454834, 0.8548135757446289, 0.7764210104942322, 0.7384128570556641, 0.7068759202957153, 0.6714375019073486, 0.6396699547767639, 0.6355044841766357, 0.6136825680732727, 0.5978581309318542, 0.5749205946922302, 0.5629937052726746, 0.545853316783905, 0.5389567017555237, 0.5177372694015503, 0.5090863108634949, 0.503775417804718, 0.4958513081073761, 0.4936602711677551, 0.4808405339717865, 0.47355934977531433, 0.47060295939445496, 0.4550004005432129, 0.448020339012146, 0.43890511989593506, 0.4410875737667084, 0.4278414845466614, 0.4211692810058594, 0.41629019379615784, 0.3997616767883301, 0.40111956000328064, 0.39503198862075806, 0.396010160446167, 0.3801797926425934, 0.3753580152988434, 0.3729526996612549, 0.3732174038887024, 0.36288920044898987, 0.3572086691856384, 0.35158711671829224, 0.3524267077445984, 0.3531392216682434, 0.3358764350414276, 0.3374374806880951, 0.3314227759838104, 0.3281552791595459, 0.3187898099422455, 0.31499239802360535, 0.31059062480926514, 0.3052457571029663, 0.2962649464607239, 0.298775851726532, 0.2968965768814087, 0.287568062543869, 0.2787289321422577, 0.2818432152271271, 0.2807924151420593, 0.27600693702697754, 0.2675209641456604, 0.26592302322387695], "accuracy": [0.2681283950805664, 0.4905560612678528, 0.5576542019844055, 0.6223748326301575, 0.661471426486969, 0.6979262828826904, 0.7210407853126526, 0.7290979027748108, 0.748249888420105, 0.7577598690986633, 0.7680623531341553, 0.7687227725982666, 0.77677983045578, 0.7874785661697388, 0.7931581139564514, 0.7973847389221191, 0.8006868362426758, 0.8132346868515015, 0.8152159452438354, 0.81548011302948, 0.8201030492782593, 0.82683926820755, 0.8286884427070618, 0.8334434032440186, 0.8323867321014404, 0.8339717388153076, 0.8388587832450867, 0.8446704745292664, 0.8445383906364441, 0.8441421389579773, 0.8465195894241333, 0.8520671129226685, 0.8540483713150024, 0.8577466607093811, 0.8581429123878479, 0.8605204224586487, 0.8581429123878479, 0.8664641380310059, 0.8656716346740723, 0.8726720213890076, 0.8720116019248962, 0.8709549307823181, 0.8730682730674744, 0.8750495314598083, 0.8746532797813416, 0.8721436858177185, 0.8780874609947205, 0.8766345381736755, 0.880729079246521, 0.878879964351654, 0.886672854423523, 0.8853520154953003, 0.8877294659614563, 0.8898428082466125, 0.8930128216743469, 0.8879936337471008, 0.8931449055671692, 0.9005415439605713, 0.9014661312103271, 0.8971073627471924, 0.8972394466400146, 0.8976356983184814, 0.904768168926239, 0.9033153057098389], "val_loss": [2.036652088165283, 1.5144915580749512, 1.048824429512024, 0.8417028188705444, 0.7557734251022339, 0.6977823972702026, 0.6510546803474426, 0.6207228302955627, 0.5947343111038208, 0.5734912157058716, 0.5578181743621826, 0.5401352643966675, 0.5255911350250244, 0.5135766863822937, 0.4987029731273651, 0.48660415410995483, 0.48968610167503357, 0.4702998101711273, 0.4699537754058838, 0.4593569040298462, 0.4566163718700409, 0.4391823709011078, 0.4376334547996521, 0.426171213388443, 0.42744767665863037, 0.42548155784606934, 0.415010541677475, 0.41461634635925293, 0.407483845949173, 0.4051109552383423, 0.4039119482040405, 0.3951760232448578, 0.3895275890827179, 0.38926440477371216, 0.38363566994667053, 0.3840709924697876, 0.3764561414718628, 0.37674394249916077, 0.37384000420570374, 0.36685794591903687, 0.36728084087371826, 0.3672794699668884, 0.36373043060302734, 0.36481818556785583, 0.35814324021339417, 0.36248326301574707, 0.35257136821746826, 0.3514441251754761, 0.3510945737361908, 0.35354387760162354, 0.3467006981372833, 0.3446994721889496, 0.35116034746170044, 0.34074947237968445, 0.3406992256641388, 0.33947688341140747, 0.3379005491733551, 0.3376120924949646, 0.33212098479270935, 0.33964094519615173, 0.33602187037467957, 0.33026212453842163, 0.3299251198768616, 0.33921194076538086], "val_accuracy": [0.5246666669845581, 0.6520000100135803, 0.6773333549499512, 0.706333339214325, 0.7266666889190674, 0.7453333139419556, 0.7506666779518127, 0.7716666460037231, 0.7856666445732117, 0.7806666493415833, 0.7883333563804626, 0.8026666641235352, 0.812333345413208, 0.8103333115577698, 0.8169999718666077, 0.8233333230018616, 0.8183333277702332, 0.8293333053588867, 0.8270000219345093, 0.8289999961853027, 0.8330000042915344, 0.8433333039283752, 0.8343333601951599, 0.8493333458900452, 0.8446666598320007, 0.8456666469573975, 0.8493333458900452, 0.8533333539962769, 0.8543333411216736, 0.8533333539962769, 0.8553333282470703, 0.8576666712760925, 0.859333336353302, 0.8583333492279053, 0.8610000014305115, 0.8629999756813049, 0.8656666874885559, 0.8643333315849304, 0.8650000095367432, 0.8669999837875366, 0.8683333396911621, 0.8676666617393494, 0.8683333396911621, 0.8659999966621399, 0.8696666955947876, 0.8686666488647461, 0.8736666440963745, 0.8726666569709778, 0.874666690826416, 0.8693333268165588, 0.8773333430290222, 0.8776666522026062, 0.8743333220481873, 0.878000020980835, 0.878333330154419, 0.878000020980835, 0.8786666393280029, 0.8769999742507935, 0.8796666860580444, 0.8766666650772095, 0.8790000081062317, 0.8793333172798157, 0.8793333172798157, 0.8769999742507935]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [1, 2, 4, 4, 3, 1, 2, 3, 7, 0], [1, 1, 0, 2, 3, 3, 2, 0, 2, 3], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 2, 0, 6, 5], [0, 2, 0, 3], [16, 98], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 6, 4, 7, 4, 8, 0, 2, 9, 9], [0, 0, 5, 7], [81, 63, 64, 18], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8, 9], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [42, 95, 96, 45, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 10, 10, 2, 10, 6, 4, 2, 14, 10, 4, 4, 22, 13, 9, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.pow(tf.math.pow(tf.math.multiply(alpha, tf.math.subtract(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, grad)), grad), tf.math.multiply(tf.math.add(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.pow(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), tf.math.negative(tf.math.add(grad, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad)))), alpha), tf.math.add(tf.math.sqrt(tf.math.sqrt(beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 2, 3, 0, 0, 1, 9], [0, 1, 0, 2], [39, 87, 67], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 5, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 0, 3, 1, 9, 2, 8], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0], [16, 99, 32, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 7, 3, 3, 1, 0, 1, 1, 2, 1, 1, 0, 15, 9, 6, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 2, 2], [39, 39], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [51, 93], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 4, 4, 1, 4, 2, 9], [0, 0, 0, 2, 0, 4, 3, 1, 2, 0], [16, 62, 23, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 18, 9, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 5, 3, 0, 3, 2], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 9, 2, 4, 9, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 0, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 13, 7, 6, 6], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303373098373413, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}]