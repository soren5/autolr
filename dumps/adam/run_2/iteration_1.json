[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8671428561210632, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.219883680343628, 1.8646430969238281, 1.3936896324157715, 1.0893877744674683, 0.9355166554450989, 0.842409610748291, 0.7710077166557312, 0.7305188179016113, 0.6986204385757446, 0.6727396249771118, 0.6498048901557922, 0.6268044114112854, 0.6140111088752747, 0.5887817740440369, 0.578136682510376, 0.5584238767623901, 0.5524672269821167, 0.5343066453933716, 0.5221304893493652, 0.5067646503448486, 0.49799448251724243, 0.49728572368621826, 0.4813750684261322, 0.47350600361824036, 0.46665558218955994, 0.46120086312294006, 0.4508947730064392, 0.4514182507991791, 0.43237996101379395, 0.4303359389305115, 0.42297977209091187, 0.42136141657829285, 0.41076475381851196, 0.4052966833114624, 0.39923855662345886, 0.38885870575904846, 0.3861909806728363, 0.373085081577301, 0.37552767992019653, 0.36961859464645386, 0.3645276427268982, 0.3621616065502167, 0.3508068323135376, 0.3534679412841797, 0.3436737656593323, 0.34320715069770813, 0.3334048390388489, 0.32730600237846375, 0.3194701075553894, 0.3264276683330536, 0.3190784752368927, 0.317353218793869, 0.3047613799571991, 0.3113130033016205, 0.29358038306236267, 0.2904236614704132, 0.29598477482795715, 0.2843449115753174, 0.2814180254936218, 0.2754606008529663, 0.27888524532318115, 0.27082836627960205, 0.26988962292671204, 0.26404473185539246], "accuracy": [0.28503501415252686, 0.4916127324104309, 0.5641262531280518, 0.6206578016281128, 0.6627922058105469, 0.6931713223457336, 0.7180029153823853, 0.7416457533836365, 0.7471932172775269, 0.7552502751350403, 0.76106196641922, 0.770439863204956, 0.7744023203849792, 0.7844406366348267, 0.7880068421363831, 0.8000264167785645, 0.8005547523498535, 0.8061022162437439, 0.8152159452438354, 0.8182538747787476, 0.8171972036361694, 0.8251221776008606, 0.8325188159942627, 0.8300092220306396, 0.8358209133148193, 0.8421608805656433, 0.8393871188163757, 0.8389908671379089, 0.8432175517082214, 0.8498216867446899, 0.8510104417800903, 0.8479725122451782, 0.8552370667457581, 0.8537842035293579, 0.8619733452796936, 0.863029956817627, 0.8654074668884277, 0.8681812286376953, 0.8654074668884277, 0.8712190985679626, 0.870030403137207, 0.8710870146751404, 0.8734645247459412, 0.8689737319946289, 0.8799365758895874, 0.8733324408531189, 0.8833707571029663, 0.8819178342819214, 0.887201189994812, 0.8840311765670776, 0.8848236799240112, 0.8887861371040344, 0.8922203183174133, 0.8862766027450562, 0.8942015767097473, 0.8969752788543701, 0.8914278149604797, 0.8997490406036377, 0.8963148593902588, 0.89988112449646, 0.8990886211395264, 0.8988244533538818, 0.9025228023529053, 0.9056927561759949], "val_loss": [2.0383734703063965, 1.52497136592865, 1.0601259469985962, 0.8562812209129333, 0.7658120393753052, 0.7131959795951843, 0.6649298071861267, 0.6330333948135376, 0.6113543510437012, 0.5844947695732117, 0.5694802403450012, 0.5587157011032104, 0.5405371785163879, 0.5320618748664856, 0.5227773785591125, 0.5067153573036194, 0.5035103559494019, 0.488569974899292, 0.4856756627559662, 0.47375935316085815, 0.46686801314353943, 0.4690234065055847, 0.4562239646911621, 0.45184147357940674, 0.44802647829055786, 0.43765127658843994, 0.44083112478256226, 0.43040087819099426, 0.4233548939228058, 0.4223497211933136, 0.4192502796649933, 0.419228196144104, 0.4093460142612457, 0.40610718727111816, 0.40181079506874084, 0.3973771929740906, 0.40005266666412354, 0.3999347388744354, 0.39140209555625916, 0.39240047335624695, 0.3948496878147125, 0.38875582814216614, 0.3842795789241791, 0.38304319977760315, 0.3777843713760376, 0.37781664729118347, 0.3811173439025879, 0.377654492855072, 0.37773609161376953, 0.37403377890586853, 0.36979779601097107, 0.3724605441093445, 0.36716514825820923, 0.3631788194179535, 0.36722949147224426, 0.36092469096183777, 0.3646883964538574, 0.36131754517555237, 0.3600904941558838, 0.36084359884262085, 0.36253821849823, 0.35693618655204773, 0.3574981689453125, 0.3609990179538727], "val_accuracy": [0.5479999780654907, 0.6539999842643738, 0.6823333501815796, 0.7059999704360962, 0.7303333282470703, 0.7436666488647461, 0.7633333206176758, 0.7706666588783264, 0.7726666927337646, 0.7973333597183228, 0.7950000166893005, 0.7950000166893005, 0.8100000023841858, 0.8083333373069763, 0.8109999895095825, 0.8173333406448364, 0.8136666417121887, 0.8243333101272583, 0.8296666741371155, 0.8286666870117188, 0.8363333344459534, 0.8320000171661377, 0.8363333344459534, 0.8410000205039978, 0.8479999899864197, 0.843666672706604, 0.8433333039283752, 0.8486666679382324, 0.8519999980926514, 0.8536666631698608, 0.8526666760444641, 0.8533333539962769, 0.8603333234786987, 0.8573333621025085, 0.8619999885559082, 0.8606666922569275, 0.8603333234786987, 0.862333357334137, 0.8613333106040955, 0.8640000224113464, 0.8636666536331177, 0.8653333187103271, 0.8659999966621399, 0.8673333525657654, 0.8646666407585144, 0.8683333396911621, 0.8693333268165588, 0.8690000176429749, 0.8690000176429749, 0.8703333139419556, 0.8709999918937683, 0.8693333268165588, 0.8709999918937683, 0.8756666779518127, 0.8736666440963745, 0.871999979019165, 0.875, 0.8769999742507935, 0.8796666860580444, 0.871666669845581, 0.875, 0.8766666650772095, 0.8769999742507935, 0.8786666393280029]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8645714521408081, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.219876766204834, 1.8599904775619507, 1.394732117652893, 1.099008560180664, 0.9374786019325256, 0.8417600393295288, 0.784399151802063, 0.7295583486557007, 0.6896621584892273, 0.6602252125740051, 0.6398678421974182, 0.6108338832855225, 0.593329668045044, 0.5716473460197449, 0.5646020174026489, 0.5468661189079285, 0.532336413860321, 0.5192962884902954, 0.5106239914894104, 0.4903825521469116, 0.4888337254524231, 0.4820922911167145, 0.47941017150878906, 0.46430960297584534, 0.4587491452693939, 0.4471083879470825, 0.43460941314697266, 0.43900009989738464, 0.4228927791118622, 0.4168980121612549, 0.4186072051525116, 0.40967151522636414, 0.40331852436065674, 0.39461076259613037, 0.38583695888519287, 0.37856653332710266, 0.3763662874698639, 0.3757171332836151, 0.36389726400375366, 0.3594784736633301, 0.35581812262535095, 0.351914644241333, 0.3519483208656311, 0.35199135541915894], "accuracy": [0.2810725271701813, 0.4900277256965637, 0.5616167187690735, 0.6164311170578003, 0.6625280380249023, 0.7038700580596924, 0.7213049530982971, 0.739400327205658, 0.7495707273483276, 0.757099449634552, 0.7664773464202881, 0.7765156626701355, 0.7876105904579163, 0.7964601516723633, 0.7955356240272522, 0.8034605979919434, 0.8084797263145447, 0.8185180425643921, 0.8170651197433472, 0.8249900937080383, 0.8264430165290833, 0.8253863453865051, 0.8248580098152161, 0.8341038227081299, 0.8364813327789307, 0.8425571322441101, 0.8418967127799988, 0.8405758738517761, 0.854708731174469, 0.8506141901016235, 0.8486329317092896, 0.8515387773513794, 0.8577466607093811, 0.8574824929237366, 0.8623695969581604, 0.8644828796386719, 0.8688416481018066, 0.8636903762817383, 0.8687095642089844, 0.8701624870300293, 0.8767666220664978, 0.8759741187095642, 0.8733324408531189, 0.8757099509239197], "val_loss": [2.035292625427246, 1.5130810737609863, 1.0552705526351929, 0.8521074056625366, 0.7653596997261047, 0.7041530013084412, 0.6646214127540588, 0.6212676763534546, 0.5959732532501221, 0.5731136202812195, 0.5568464994430542, 0.5429255962371826, 0.5265056490898132, 0.5157795548439026, 0.5025378465652466, 0.49387094378471375, 0.48609381914138794, 0.47406771779060364, 0.4683963656425476, 0.4573516845703125, 0.4557126462459564, 0.44942325353622437, 0.443948894739151, 0.4418465197086334, 0.4312373101711273, 0.4253726899623871, 0.4212954640388489, 0.41598525643348694, 0.4135156571865082, 0.4129463732242584, 0.40529200434684753, 0.40545719861984253, 0.3984415829181671, 0.39823946356773376, 0.3932622969150543, 0.39024618268013, 0.3888434171676636, 0.38209959864616394, 0.38078153133392334, 0.37923985719680786, 0.37986060976982117, 0.3734355568885803, 0.37700048089027405, 0.37376001477241516], "val_accuracy": [0.531333327293396, 0.653333306312561, 0.687333345413208, 0.7126666903495789, 0.7256666421890259, 0.7513333559036255, 0.7566666603088379, 0.7753333449363708, 0.7870000004768372, 0.7900000214576721, 0.7973333597183228, 0.809333324432373, 0.8106666803359985, 0.8130000233650208, 0.8193333148956299, 0.8220000267028809, 0.8339999914169312, 0.8333333134651184, 0.8376666903495789, 0.8420000076293945, 0.8433333039283752, 0.8456666469573975, 0.8446666598320007, 0.843666672706604, 0.8513333201408386, 0.8489999771118164, 0.8529999852180481, 0.8553333282470703, 0.8543333411216736, 0.8533333539962769, 0.8550000190734863, 0.859666645526886, 0.8573333621025085, 0.8613333106040955, 0.8603333234786987, 0.8579999804496765, 0.8653333187103271, 0.8663333058357239, 0.8679999709129333, 0.8679999709129333, 0.8636666536331177, 0.8666666746139526, 0.8656666874885559, 0.8669999837875366]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5, 9, 8], [0, 3, 0, 3], [16, 16, 92], [0, 0, 1], [0, 8], [3], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 3, 2, 8, 9], [4, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 33]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 12, 8, 4, 3, 3, 2, 1, 0, 21, 12, 9, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))))))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 4, 5, 3], [0, 1, 0, 2], [39, 58], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 6, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 4, 3, 4, 0, 3, 1, 4, 0], [16, 22, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 16, 8, 8, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.subtract(sigma, grad))), tf.math.pow(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 6, 1, 4, 6, 4, 1, 0, 5, 0, 2, 8, 1, 0, 6, 9, 3, 8, 1], [0, 1, 0, 2, 0, 3, 2, 0, 0, 1, 0, 1, 2], [39, 39, 97, 36, 12, 12, 32], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 0, 8, 1, 4, 1, 9, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 34, 21, 13, 7, 1, 0, 1, 1, 2, 1, 1, 1, 17, 10, 7, 6], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.square(tf.math.negative(tf.math.add(grad, grad))))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.math.negative(alpha), tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), alpha)), grad))))))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)))), sigma), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 5, 0, 3, 5], [3, 2, 0, 3], [16, 5], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [5, 3, 3, 4, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 88, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 5, 3, 2, 0, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(grad), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}]