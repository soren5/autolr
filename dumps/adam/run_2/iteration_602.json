[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8751428723335266, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2250592708587646, 1.8711906671524048, 1.4025431871414185, 1.0969892740249634, 0.9618372917175293, 0.8536675572395325, 0.7852787971496582, 0.7344921827316284, 0.6984639167785645, 0.6698295474052429, 0.6533645391464233, 0.6280255317687988, 0.6012344360351562, 0.5914516448974609, 0.5626886487007141, 0.5613004565238953, 0.534188449382782, 0.5227000117301941, 0.5177156329154968, 0.5061321258544922, 0.502992570400238, 0.4880099296569824, 0.4831058382987976, 0.4638620913028717, 0.45966821908950806, 0.44781315326690674, 0.4519229233264923, 0.4441227912902832, 0.4230244755744934, 0.4306792914867401, 0.4173871874809265, 0.41273996233940125, 0.4062979519367218, 0.40875500440597534, 0.39078572392463684, 0.3901970386505127, 0.38590940833091736, 0.37828344106674194, 0.37629377841949463, 0.36618369817733765, 0.3619602620601654, 0.3692450225353241, 0.3562493622303009, 0.3571900725364685, 0.34957820177078247, 0.33428922295570374, 0.3360724449157715, 0.33811044692993164, 0.33017876744270325, 0.32163259387016296, 0.31894007325172424, 0.32039135694503784, 0.3131481111049652, 0.31178557872772217, 0.30808794498443604, 0.2996602952480316, 0.3000776469707489], "accuracy": [0.2685246467590332, 0.48144233226776123, 0.5666358470916748, 0.6207898855209351, 0.6637167930603027, 0.7028133869171143, 0.7226257920265198, 0.7341170310974121, 0.7500990629196167, 0.7629110813140869, 0.7683265209197998, 0.7734777331352234, 0.7853652238845825, 0.789988100528717, 0.8005547523498535, 0.7969884872436523, 0.8067626357078552, 0.81548011302948, 0.822348415851593, 0.8208954930305481, 0.8228767514228821, 0.8289526104927063, 0.8309338092803955, 0.837141752243042, 0.8392550349235535, 0.8441421389579773, 0.8442742228507996, 0.8449346423149109, 0.8527275323867798, 0.8474441766738892, 0.854708731174469, 0.8562937378883362, 0.8618412613868713, 0.8555012345314026, 0.8660678863525391, 0.8622375130653381, 0.8625016212463379, 0.8697662353515625, 0.8654074668884277, 0.8696341514587402, 0.8737286925315857, 0.8708229064941406, 0.8753136992454529, 0.8754457831382751, 0.8767666220664978, 0.8849557638168335, 0.8823140859603882, 0.880729079246521, 0.8805969953536987, 0.8869370222091675, 0.8874653577804565, 0.8886540532112122, 0.8911636471748352, 0.8850878477096558, 0.8934090733528137, 0.889578640460968, 0.8952582478523254], "val_loss": [2.043058395385742, 1.5251370668411255, 1.0469334125518799, 0.8302614688873291, 0.7426144480705261, 0.689240574836731, 0.6366193294525146, 0.6047167778015137, 0.579582929611206, 0.5634516477584839, 0.541938066482544, 0.5248761177062988, 0.5115456581115723, 0.5011467933654785, 0.49510350823402405, 0.4833073019981384, 0.47195449471473694, 0.4708709418773651, 0.45853787660598755, 0.4546333849430084, 0.44313183426856995, 0.4357438087463379, 0.4315469563007355, 0.4274021089076996, 0.4192078709602356, 0.4159908890724182, 0.41876333951950073, 0.4062511920928955, 0.4074864983558655, 0.40119585394859314, 0.39932507276535034, 0.3959886133670807, 0.39230647683143616, 0.3876916766166687, 0.3863966166973114, 0.3826465308666229, 0.3755825161933899, 0.3792920410633087, 0.3768638074398041, 0.37302449345588684, 0.3701993525028229, 0.36710408329963684, 0.3661280870437622, 0.36203259229660034, 0.36038103699684143, 0.3625653386116028, 0.35716426372528076, 0.355807363986969, 0.353659451007843, 0.35337239503860474, 0.3547045588493347, 0.3509185016155243, 0.3507935404777527, 0.3532246947288513, 0.347145676612854, 0.3514662981033325, 0.34674328565597534], "val_accuracy": [0.527999997138977, 0.6539999842643738, 0.6833333373069763, 0.7116666436195374, 0.7366666793823242, 0.7473333477973938, 0.7696666717529297, 0.7796666622161865, 0.7873333096504211, 0.7933333516120911, 0.8026666641235352, 0.8076666593551636, 0.8103333115577698, 0.8183333277702332, 0.8163333535194397, 0.8273333311080933, 0.8316666483879089, 0.8286666870117188, 0.8360000252723694, 0.8360000252723694, 0.8420000076293945, 0.843666672706604, 0.8446666598320007, 0.8473333120346069, 0.8456666469573975, 0.8503333330154419, 0.8489999771118164, 0.8493333458900452, 0.8503333330154419, 0.8523333072662354, 0.8553333282470703, 0.859000027179718, 0.8576666712760925, 0.8579999804496765, 0.8606666922569275, 0.859000027179718, 0.8616666793823242, 0.862666666507721, 0.8646666407585144, 0.8663333058357239, 0.8679999709129333, 0.8659999966621399, 0.862666666507721, 0.8700000047683716, 0.8683333396911621, 0.8666666746139526, 0.8679999709129333, 0.871666669845581, 0.8736666440963745, 0.8726666569709778, 0.871999979019165, 0.875, 0.8733333349227905, 0.8663333058357239, 0.8713333606719971, 0.871666669845581, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [35, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1], [2, 2, 3, 0, 3, 5, 3, 7, 8, 7, 4, 6, 4, 4, 3, 4, 5, 2, 7, 8, 7, 3, 7, 1, 3, 3, 8, 3, 9, 9, 4, 1, 0, 4, 1, 8, 4, 9, 1, 9], [0, 2, 0, 3, 2, 1, 4, 0, 4, 0, 4, 3, 2, 1, 1, 2, 2, 3, 0, 0, 3, 4, 4, 1, 4], [52, 16, 23, 86, 92, 52, 4, 40, 44, 72], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 9, 8, 6, 4, 1, 4, 2, 8], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 65, 40, 25, 10, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.pow(tf.math.multiply(beta, tf.math.pow(alpha, tf.math.square(tf.math.add(grad, tf.math.add(tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.subtract(tf.math.negative(tf.math.pow(grad, tf.math.subtract(beta, alpha))), alpha), beta))), beta)), grad))))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)), grad), grad)), alpha), tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3441460132598877, 2.4336276054382324, 2.3110544681549072, 2.305344343185425, 2.3032608032226562, 2.306490898132324, 2.302839517593384, 2.302852153778076, 2.3029568195343018, 2.3029730319976807, 2.302917242050171, 2.30293869972229, 2.302922010421753, 2.3028724193573], "accuracy": [0.22018226981163025, 0.14251750707626343, 0.1006472036242485, 0.09879804402589798, 0.09787346422672272, 0.10011887550354004, 0.09192973375320435, 0.09945846349000931, 0.09391097724437714, 0.09232597798109055, 0.09338264167308807, 0.09549596905708313, 0.09694888442754745, 0.09813763201236725], "val_loss": [2.2796149253845215, 2.310539722442627, 2.3080942630767822, 2.302992582321167, 2.3025951385498047, 2.3026788234710693, 2.302591562271118, 2.3025543689727783, 2.3026022911071777, 2.3027453422546387, 2.3025929927825928, 2.302535057067871, 2.30259108543396, 2.3027050495147705], "val_accuracy": [0.0989999994635582, 0.09866666793823242, 0.09666666388511658, 0.09933333098888397, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.10100000351667404, 0.10400000214576721, 0.0976666659116745, 0.10400000214576721, 0.10300000011920929, 0.10266666859388351, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [5, 0, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 0, 3, 5, 7, 6, 1, 4, 6, 8, 6, 7, 2, 3, 3, 9, 1, 3, 2, 7, 7, 2, 2, 2, 7, 5, 9, 4, 2, 4, 7, 9, 7, 7, 4, 0, 8, 3, 1, 0], [0, 2, 0, 3, 4, 5, 5, 5, 0, 3, 1, 0, 3, 1, 4, 3, 2, 3, 4, 2, 3, 3, 1, 0, 1, 3, 0, 1, 5, 3], [16, 86, 81, 45, 36, 88, 27, 30, 66], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 44, 96, 99, 91, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 72, 42, 30, 9, 2, 1, 1, 1, 22, 13, 9, 6], "tree_depth": 39, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(grad, tf.math.sqrt(grad)), grad), tf.math.divide_no_nan(grad, tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), grad))), alpha), tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(grad, tf.math.add(tf.math.add(tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(beta, grad), grad), beta), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), grad))), grad)), tf.math.add(tf.math.add(tf.math.pow(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.negative(alpha)), tf.math.sqrt(tf.math.multiply(tf.math.subtract(grad, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.negative(alpha))))), grad))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), sigma))), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 0, 0, 3, 8], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [8, 2, 3, 0, 3, 5], [0, 2, 0, 0], [16, 16, 70], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [2, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 13, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 2, 10, 6, 4, 3, 2, 1, 1, 1, 10, 5, 5, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.math.sqrt(grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [29, 9], [0, 0, 1], [0, 0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 4], [16, 99, 96, 99, 49, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 3, 2, 1, 1, 14, 7, 7, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, grad)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [11335.37890625, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.10685510188341141, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [99167992.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}]