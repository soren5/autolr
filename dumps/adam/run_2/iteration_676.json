[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8717142939567566, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2179689407348633, 1.8498320579528809, 1.3794742822647095, 1.0716650485992432, 0.9344843626022339, 0.8246361017227173, 0.7564767003059387, 0.7175848484039307, 0.6744690537452698, 0.656673014163971, 0.6303853988647461, 0.6028704047203064, 0.5854300260543823, 0.5712598562240601, 0.5493738055229187, 0.5371882319450378, 0.5228213667869568, 0.5053873062133789, 0.49918222427368164, 0.49042779207229614, 0.4798254668712616, 0.46567195653915405, 0.45655736327171326, 0.4478549659252167, 0.4380955398082733, 0.43162426352500916, 0.4243253767490387, 0.42260101437568665, 0.4161994755268097, 0.4046199321746826, 0.40071508288383484, 0.3943677544593811, 0.386508047580719, 0.3859599828720093, 0.37830138206481934, 0.3608247935771942, 0.35879597067832947, 0.35957789421081543, 0.3523263931274414, 0.3509102165699005, 0.34130600094795227, 0.33236682415008545, 0.33607473969459534, 0.3172357380390167, 0.3199557960033417, 0.32375356554985046, 0.3188312351703644, 0.31385672092437744], "accuracy": [0.2805441915988922, 0.5037643909454346, 0.5591071248054504, 0.6256769299507141, 0.6608110070228577, 0.7009642124176025, 0.724739134311676, 0.7321357727050781, 0.7556465268135071, 0.7613261342048645, 0.769911527633667, 0.7800818681716919, 0.7864218950271606, 0.7969884872436523, 0.7957997918128967, 0.8021397590637207, 0.8137630224227905, 0.8183859586715698, 0.8193105459213257, 0.8203672170639038, 0.8240655064582825, 0.8339717388153076, 0.8416325449943542, 0.8396512866020203, 0.8424250483512878, 0.8446704745292664, 0.8491612672805786, 0.8498216867446899, 0.8498216867446899, 0.857218325138092, 0.854708731174469, 0.8619733452796936, 0.8618412613868713, 0.8617091774940491, 0.8708229064941406, 0.8725399374961853, 0.8742570281028748, 0.8706908226013184, 0.8768987059593201, 0.8761062026023865, 0.8767666220664978, 0.8816536664962769, 0.8833707571029663, 0.8879936337471008, 0.8864086866378784, 0.8837670087814331, 0.8869370222091675, 0.8845595121383667], "val_loss": [2.0311315059661865, 1.5038038492202759, 1.041060447692871, 0.8412705063819885, 0.7483751773834229, 0.6952926516532898, 0.6517333984375, 0.6161338090896606, 0.5886330008506775, 0.5756419897079468, 0.553046703338623, 0.5355454087257385, 0.5228815674781799, 0.5095658302307129, 0.5004177093505859, 0.49205878376960754, 0.48182541131973267, 0.481414794921875, 0.4664815366268158, 0.46423014998435974, 0.4499891698360443, 0.44791722297668457, 0.4359965920448303, 0.42991697788238525, 0.42823803424835205, 0.41941967606544495, 0.4219692349433899, 0.42334723472595215, 0.4131917655467987, 0.40680742263793945, 0.40303492546081543, 0.4015776813030243, 0.4029861390590668, 0.3901444375514984, 0.39106690883636475, 0.3916412889957428, 0.39005595445632935, 0.37970268726348877, 0.38928642868995667, 0.3816083073616028, 0.3792269229888916, 0.3722410500049591, 0.3683551549911499, 0.36832356452941895, 0.3671248257160187, 0.37181583046913147, 0.35874149203300476, 0.3685591518878937], "val_accuracy": [0.5483333468437195, 0.6333333253860474, 0.6713333129882812, 0.6903333067893982, 0.7179999947547913, 0.7386666536331177, 0.7490000128746033, 0.762666642665863, 0.778333306312561, 0.7789999842643738, 0.7926666736602783, 0.8009999990463257, 0.8130000233650208, 0.8100000023841858, 0.8163333535194397, 0.8203333616256714, 0.8233333230018616, 0.8243333101272583, 0.8276666402816772, 0.8306666612625122, 0.8349999785423279, 0.8330000042915344, 0.8399999737739563, 0.8443333506584167, 0.8433333039283752, 0.843999981880188, 0.843666672706604, 0.8389999866485596, 0.8456666469573975, 0.8486666679382324, 0.8496666550636292, 0.8536666631698608, 0.8496666550636292, 0.8533333539962769, 0.8523333072662354, 0.8533333539962769, 0.8546666502952576, 0.8600000143051147, 0.8569999933242798, 0.8573333621025085, 0.8586666584014893, 0.8629999756813049, 0.8669999837875366, 0.8629999756813049, 0.8629999756813049, 0.8606666922569275, 0.8669999837875366, 0.8663333058357239]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [4, 2, 3, 0, 3], [0, 1, 0, 2, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 9, 3, 0, 3, 5], [0, 2, 0, 3], [16, 66], [0, 1], [0], [0], [40], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 3, 1, 2, 8], [0, 0, 0, 3, 3, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 2, 2, 0, 1, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, sigma)))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5, 1, 7, 3, 3, 2, 2, 7, 6, 9, 0, 0, 7, 6, 9, 3, 8, 7, 1, 1, 3, 6, 9, 7, 9], [0, 2, 0, 3, 4, 2, 4, 2, 2, 0, 2, 2, 4, 1, 3, 5, 1], [16, 16, 37, 3, 43, 5, 14], [0, 0, 0, 0, 1, 0, 1, 1], [0, 6, 1, 0, 8], [0, 1, 3], [27], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 1, 2, 8], [0, 0, 0, 3, 0, 1, 3, 1, 2, 3], [20, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 47, 30, 17, 7, 8, 5, 3, 1, 12, 6, 6, 4], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.add(grad, tf.math.multiply(tf.math.multiply(grad, beta), grad)), tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), beta))))), tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), beta), grad), alpha), tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), grad)), grad)), alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))), alpha)", "other_info": {"loss": [7820.5537109375, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [66549.5390625, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 6, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 8, 9, 0, 3, 5], [0, 3, 3, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 0, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [13, 99, 96, 99, 61, 1]], "fitness": -0.0925714299082756, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [2.30883526802063, 2.31003475189209, 2.309511184692383, 2.3099684715270996, 2.3109397888183594, 2.309060573577881], "accuracy": [0.0944393053650856, 0.09377889335155487, 0.09470347315073013, 0.09509972482919693, 0.09298639744520187, 0.09074098616838455], "val_loss": [2.3086280822753906, 2.3086280822753906, 2.3086280822753906, 2.3086280822753906, 2.3086280822753906, 2.3086280822753906], "val_accuracy": [0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918]}, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 2, 1, 1, 0, 17, 9, 8, 5], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 6, 3, 5], [0, 2, 0, 3, 2], [16, 16], [1, 1], [0], [2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 3, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09228571504354477, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 2, 1, 0, 1, 0, 20, 10, 10, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), beta)), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma)))), alpha), tf.math.add(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.310197353363037, 2.3100790977478027, 2.3092153072357178, 2.309316396713257, 2.3092126846313477, 2.310112237930298], "accuracy": [0.09338264167308807, 0.09470347315073013, 0.09615638852119446, 0.0952318087220192, 0.09351472556591034, 0.09615638852119446], "val_loss": [2.3081774711608887, 2.3081774711608887, 2.3081774711608887, 2.3081774711608887, 2.3081774711608887, 2.3081774711608887], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}]