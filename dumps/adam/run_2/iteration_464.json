[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8488571643829346, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.223740816116333, 1.8669830560684204, 1.4016202688217163, 1.1039786338806152, 0.9518290162086487, 0.8381263613700867, 0.7772430777549744, 0.7307212352752686, 0.6960356831550598, 0.6738942861557007, 0.6460920572280884, 0.6170341968536377, 0.6016004085540771, 0.5930724740028381, 0.574384868144989, 0.5525866150856018, 0.5418224334716797, 0.528165876865387, 0.5157127976417542, 0.4981556236743927, 0.5040465593338013, 0.48477834463119507, 0.4782145619392395, 0.4660712480545044, 0.45793524384498596, 0.4525038003921509, 0.442632794380188, 0.43791571259498596, 0.4266710877418518, 0.4180562496185303, 0.4170316755771637, 0.41204193234443665, 0.401452898979187, 0.39403125643730164, 0.39148205518722534, 0.3850859999656677, 0.3909453749656677, 0.37727978825569153, 0.3707461655139923, 0.36355406045913696, 0.3605586588382721, 0.3533570170402527, 0.35656043887138367, 0.34943199157714844, 0.3490796983242035, 0.33552101254463196, 0.3324407935142517, 0.3261643946170807, 0.32101061940193176, 0.32543912529945374, 0.31604433059692383, 0.3129009008407593, 0.30726975202560425, 0.30353111028671265, 0.3025110960006714, 0.29160627722740173, 0.2875330150127411, 0.28597840666770935, 0.2863733768463135, 0.28033262491226196, 0.27637624740600586, 0.2657400965690613, 0.266905814409256], "accuracy": [0.26535463333129883, 0.4802536070346832, 0.5589750409126282, 0.6102232336997986, 0.6659622192382812, 0.6966054439544678, 0.7217012047767639, 0.7284374833106995, 0.744419515132904, 0.7516840696334839, 0.7642319202423096, 0.7734777331352234, 0.7807422876358032, 0.7827235460281372, 0.789459764957428, 0.7997622489929199, 0.8009510040283203, 0.8041210174560547, 0.8138951063156128, 0.8206313848495483, 0.8193105459213257, 0.8245938420295715, 0.8259146809577942, 0.8359529972076416, 0.837141752243042, 0.837537944316864, 0.8409721255302429, 0.8413683772087097, 0.8445383906364441, 0.8490291833877563, 0.8507462739944458, 0.8518029451370239, 0.8560295701026917, 0.8594637513160706, 0.8561616539955139, 0.8614450097084045, 0.8618412613868713, 0.8650112152099609, 0.86553955078125, 0.8679170608520508, 0.8712190985679626, 0.8741249442100525, 0.8726720213890076, 0.8755778670310974, 0.8725399374961853, 0.8784837126731873, 0.8819178342819214, 0.885219931602478, 0.884691596031189, 0.8802007436752319, 0.8889182209968567, 0.8824461698532104, 0.8902390599250793, 0.8932769894599915, 0.8889182209968567, 0.8960506916046143, 0.8953903317451477, 0.8939374089241028, 0.898428201675415, 0.8990886211395264, 0.8965790271759033, 0.9034473896026611, 0.9002773761749268], "val_loss": [2.038303852081299, 1.5054463148117065, 1.0314255952835083, 0.8210861086845398, 0.7307315468788147, 0.6728774309158325, 0.6299063563346863, 0.5932006239891052, 0.5646762847900391, 0.543446958065033, 0.5223223567008972, 0.5031695365905762, 0.49660342931747437, 0.479961097240448, 0.4710756838321686, 0.45715200901031494, 0.45307689905166626, 0.44328585267066956, 0.4300278425216675, 0.4228105843067169, 0.4200012683868408, 0.4090743362903595, 0.404430091381073, 0.40049612522125244, 0.39157557487487793, 0.3893064260482788, 0.38438093662261963, 0.37927359342575073, 0.3725455701351166, 0.3695400357246399, 0.36659181118011475, 0.3667990267276764, 0.3653281629085541, 0.3621872067451477, 0.3542875647544861, 0.35121434926986694, 0.34704363346099854, 0.3444139063358307, 0.3416759967803955, 0.33953455090522766, 0.33605116605758667, 0.3415188491344452, 0.3323090076446533, 0.3346575200557709, 0.3337500989437103, 0.326499879360199, 0.32594865560531616, 0.32307833433151245, 0.32526081800460815, 0.3191375732421875, 0.3190772235393524, 0.3143729269504547, 0.31229716539382935, 0.3166802227497101, 0.310199499130249, 0.31202006340026855, 0.3096553683280945, 0.30766913294792175, 0.3109871745109558, 0.3072544038295746, 0.3058963716030121, 0.305062860250473, 0.3113301694393158], "val_accuracy": [0.5559999942779541, 0.653333306312561, 0.6970000267028809, 0.7206666469573975, 0.7350000143051147, 0.7546666860580444, 0.7616666555404663, 0.7793333530426025, 0.7893333435058594, 0.7950000166893005, 0.8086666464805603, 0.8106666803359985, 0.8086666464805603, 0.8256666660308838, 0.8296666741371155, 0.8353333473205566, 0.8373333215713501, 0.8353333473205566, 0.8423333168029785, 0.8473333120346069, 0.8456666469573975, 0.8460000157356262, 0.8576666712760925, 0.8556666374206543, 0.8569999933242798, 0.8556666374206543, 0.8586666584014893, 0.8633333444595337, 0.8613333106040955, 0.859666645526886, 0.8636666536331177, 0.8643333315849304, 0.8606666922569275, 0.8603333234786987, 0.8653333187103271, 0.8666666746139526, 0.8700000047683716, 0.871666669845581, 0.8679999709129333, 0.8703333139419556, 0.871666669845581, 0.874666690826416, 0.8730000257492065, 0.8706666827201843, 0.874666690826416, 0.8766666650772095, 0.8743333220481873, 0.878333330154419, 0.8763333559036255, 0.8769999742507935, 0.8766666650772095, 0.8803333044052124, 0.8823333382606506, 0.8813333511352539, 0.8826666474342346, 0.8836666941642761, 0.8796666860580444, 0.8846666812896729, 0.8813333511352539, 0.8803333044052124, 0.8843333125114441, 0.8833333253860474, 0.8836666941642761]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 8, 2, 8, 5], [4, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 56, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 1, 21, 12, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.sqrt(tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma))), tf.math.sqrt(tf.math.square(alpha))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 2, 1, 0], [0, 0, 0, 2, 3, 2], [39, 39, 62], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 3, 0, 3, 1, 5, 6, 1, 1, 7, 7, 6, 1, 3, 7, 0, 3, 8, 4, 8, 1, 9], [0, 2, 0, 3, 3, 1, 4, 5, 5, 1, 4, 2, 3, 5, 0, 0], [16, 16, 87, 40, 90], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 3, 4, 1, 4, 3, 8], [0, 0, 0, 3, 0, 2, 3, 1, 2, 0], [30, 99, 96, 99, 64, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 3, 39, 23, 16, 5, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.square(tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.divide_no_nan(alpha, tf.math.subtract(grad, tf.math.multiply(tf.math.add(tf.math.negative(grad), grad), alpha))), tf.math.multiply(tf.math.sqrt(tf.math.pow(grad, tf.math.sqrt(beta))), grad)), tf.math.subtract(grad, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3035459518432617, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 8, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [4, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8, 2, 7, 3, 4, 5, 6, 3, 3, 7, 6, 3, 8, 0, 7, 1, 3, 9, 5, 2, 1, 0, 1, 3, 1, 1, 7, 4, 5, 6, 9, 4, 5, 5, 7, 5, 8, 7, 4, 1, 9, 4, 7, 2, 4, 8, 5, 8, 2, 7, 0, 2, 1, 1, 4, 6, 3, 9, 5, 3, 6, 6, 7, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3, 4, 1, 4, 7, 2, 6, 7, 2, 1, 2, 2, 6, 1, 3, 0, 7, 4, 0, 3, 4, 4, 2, 7, 1, 4, 0, 0, 5, 6, 2, 6, 1, 6, 5, 1, 0, 5, 4], [16, 99, 94, 99, 61, 1, 3, 40, 97, 27, 94, 23, 34, 25, 98]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 6, 4, 2, 1, 2, 1, 1, 1, 123, 74, 49, 15], "tree_depth": 48, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.add(alpha, beta)), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(sigma, tf.math.square(grad)), alpha))), tf.math.divide_no_nan(grad, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.multiply(grad, tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.subtract(tf.math.multiply(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.subtract(alpha, tf.math.negative(beta))))), tf.math.subtract(beta, tf.math.multiply(tf.math.subtract(tf.math.subtract(grad, tf.math.add(tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.pow(tf.math.square(tf.math.square(tf.math.add(sigma, tf.math.square(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.subtract(grad, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(sigma, tf.math.add(grad, tf.math.add(grad, beta))))), grad), tf.math.pow(tf.math.sqrt(alpha), tf.math.square(tf.math.sqrt(grad)))))), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.negative(grad)), tf.math.add(grad, tf.math.subtract(beta, tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), grad), tf.math.square(tf.math.multiply(alpha, tf.math.divide_no_nan(grad, grad)))), alpha), tf.math.divide_no_nan(tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad), tf.math.square(grad))))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3], [0, 0, 0, 2, 1], [39, 39, 2], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 6, 0, 9, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 5], [4, 0, 0, 3, 0, 3, 3, 4, 2, 4], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 7, 5, 2, 2, 2, 1, 1, 1, 16, 8, 8, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.subtract(sigma, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]