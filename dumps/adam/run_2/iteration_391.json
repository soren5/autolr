[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8605714440345764, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2214303016662598, 1.8642264604568481, 1.3890081644058228, 1.0932679176330566, 0.9421177506446838, 0.8432737588882446, 0.7832677960395813, 0.7421927452087402, 0.7019339203834534, 0.6635125279426575, 0.6422343254089355, 0.6119916439056396, 0.5947899222373962, 0.5801639556884766, 0.5703701376914978, 0.5604495406150818, 0.5466911792755127, 0.5343729257583618, 0.5144966840744019, 0.4967593550682068, 0.4994475841522217, 0.48656991124153137, 0.47339120507240295, 0.4683458209037781, 0.46552595496177673, 0.4608538746833801, 0.45165032148361206, 0.4434550702571869, 0.436146080493927, 0.426531046628952, 0.41521885991096497, 0.4057472348213196, 0.4051761031150818, 0.39368200302124023, 0.39220473170280457, 0.3855159878730774, 0.38379353284835815, 0.37329912185668945, 0.3694612681865692, 0.36323869228363037, 0.357651948928833, 0.35994064807891846, 0.3523174226284027, 0.3495553731918335, 0.33849218487739563, 0.34405431151390076, 0.3362702429294586, 0.3311023414134979, 0.3259732723236084, 0.32322633266448975, 0.3188018202781677, 0.30792760848999023, 0.3044986426830292, 0.3050186038017273, 0.296223521232605, 0.2938297986984253, 0.29364097118377686, 0.2870608866214752, 0.2792630195617676, 0.28092342615127563, 0.2719052731990814], "accuracy": [0.275260865688324, 0.47589486837387085, 0.5729758143424988, 0.6188086271286011, 0.668339729309082, 0.7005679607391357, 0.719852089881897, 0.7255316376686096, 0.7442874312400818, 0.752740740776062, 0.7681944370269775, 0.7788931727409363, 0.7835160493850708, 0.7854973077774048, 0.7926297783851624, 0.7938185334205627, 0.8005547523498535, 0.8074230551719666, 0.8137630224227905, 0.8222163319587708, 0.8202351331710815, 0.8256505131721497, 0.8249900937080383, 0.8329150676727295, 0.8342359066009521, 0.833179235458374, 0.8350284099578857, 0.8384625315666199, 0.8442742228507996, 0.8506141901016235, 0.8520671129226685, 0.8515387773513794, 0.854708731174469, 0.856689989566803, 0.8565579056739807, 0.8628978729248047, 0.8621054291725159, 0.8643507957458496, 0.8631620407104492, 0.870030403137207, 0.8732003569602966, 0.8702945709228516, 0.8720116019248962, 0.8759741187095642, 0.8775591254234314, 0.873860776424408, 0.8753136992454529, 0.8776912093162537, 0.8795403242111206, 0.8821820020675659, 0.8805969953536987, 0.8918240666389465, 0.8893144726753235, 0.8894465565681458, 0.8945978283882141, 0.8923524022102356, 0.8910315632820129, 0.8934090733528137, 0.896446943283081, 0.8942015767097473, 0.9021265506744385], "val_loss": [2.0336294174194336, 1.5037891864776611, 1.036936640739441, 0.830899715423584, 0.7407135367393494, 0.684714138507843, 0.6388126015663147, 0.6027889251708984, 0.5781663060188293, 0.5546801686286926, 0.5372918844223022, 0.5205714702606201, 0.5027008652687073, 0.4944602847099304, 0.4841478765010834, 0.4779049754142761, 0.4681762754917145, 0.45549365878105164, 0.4493730366230011, 0.43732813000679016, 0.43391478061676025, 0.4255092442035675, 0.4185733497142792, 0.41759076714515686, 0.40965259075164795, 0.4187796115875244, 0.4040777087211609, 0.3965742886066437, 0.391461580991745, 0.3877332806587219, 0.389975368976593, 0.37969326972961426, 0.376262366771698, 0.3770693242549896, 0.371756374835968, 0.36965516209602356, 0.36590200662612915, 0.3673265874385834, 0.3664597272872925, 0.3599169850349426, 0.36627644300460815, 0.3534846305847168, 0.3545813262462616, 0.35582268238067627, 0.35316747426986694, 0.35266146063804626, 0.3495812714099884, 0.35757413506507874, 0.34286487102508545, 0.34653300046920776, 0.34273070096969604, 0.34292301535606384, 0.3451300859451294, 0.3429735004901886, 0.3365750014781952, 0.3351331651210785, 0.335875928401947, 0.3375549912452698, 0.34588080644607544, 0.3359426259994507, 0.3377085030078888], "val_accuracy": [0.5299999713897705, 0.6499999761581421, 0.6763333082199097, 0.7116666436195374, 0.7333333492279053, 0.7549999952316284, 0.7566666603088379, 0.7793333530426025, 0.7870000004768372, 0.7876666784286499, 0.8023333549499512, 0.8046666383743286, 0.8153333067893982, 0.8153333067893982, 0.8216666579246521, 0.8303333520889282, 0.8306666612625122, 0.8299999833106995, 0.8303333520889282, 0.8433333039283752, 0.840666651725769, 0.8456666469573975, 0.8489999771118164, 0.8539999723434448, 0.8519999980926514, 0.8433333039283752, 0.8583333492279053, 0.859666645526886, 0.859666645526886, 0.8573333621025085, 0.8560000061988831, 0.862666666507721, 0.8636666536331177, 0.8650000095367432, 0.8653333187103271, 0.8669999837875366, 0.8663333058357239, 0.862666666507721, 0.8679999709129333, 0.8666666746139526, 0.8640000224113464, 0.8700000047683716, 0.8700000047683716, 0.8683333396911621, 0.8723333477973938, 0.8700000047683716, 0.8736666440963745, 0.8696666955947876, 0.8773333430290222, 0.8756666779518127, 0.8773333430290222, 0.8790000081062317, 0.8730000257492065, 0.8773333430290222, 0.8786666393280029, 0.8796666860580444, 0.8773333430290222, 0.8759999871253967, 0.8736666440963745, 0.8769999742507935, 0.8769999742507935]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 4, 8, 0, 5], [2, 1, 2, 2, 1], [89, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 2, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8], [4, 0, 0, 3, 1, 0, 3, 1, 2, 0], [88, 99, 43, 12, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 9, 5, 0, 10, 6, 4, 2, 2, 1, 1, 1, 18, 9, 9, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.math.pow(grad, tf.math.sqrt(tf.math.negative(tf.math.square(grad)))), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.add(tf.math.sqrt(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.math.pow(tf.math.subtract(alpha, tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), sigma)), alpha))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 9], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 1, 4, 8, 4, 2, 9, 4], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 60]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 5, 2, 2, 10, 6, 4, 2, 1, 0, 1, 1, 21, 12, 9, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))))))), sigma)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [39, 52, 88], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 9, 0, 1, 4, 2, 2, 2, 8], [1, 0, 0, 3, 3, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.09971428662538528, "mapping_values": [1, 9, 5, 4, 3, 10, 6, 4, 2, 2, 1, 1, 1, 14, 8, 6, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.309621810913086, 2.30997896194458, 2.3095853328704834, 2.3105902671813965, 2.3106296062469482, 2.3100051879882812, 2.309628963470459, 2.3099098205566406, 2.3117287158966064, 2.310776948928833, 2.3102939128875732, 2.312058687210083, 2.311232089996338, 2.3109169006347656, 2.3117196559906006, 2.310488224029541, 2.3123464584350586, 2.308730125427246, 2.31011962890625, 2.3125874996185303, 2.31186842918396, 2.3112123012542725, 2.3118932247161865, 2.31270694732666, 2.311915159225464, 2.3131892681121826, 2.311586618423462, 2.3129382133483887, 2.3126165866851807, 2.311154842376709, 2.3128373622894287], "accuracy": [0.0944393053650856, 0.09602430462837219, 0.09668471664190292, 0.08981640636920929, 0.09219389408826828, 0.09602430462837219, 0.09734513610601425, 0.09840179979801178, 0.09351472556591034, 0.09219389408826828, 0.09496764093637466, 0.09047681838274002, 0.08981640636920929, 0.09166556596755981, 0.09179764986038208, 0.09206181764602661, 0.09325055778026581, 0.10091137140989304, 0.09391097724437714, 0.09060890227556229, 0.09153348207473755, 0.09536388516426086, 0.08875974267721176, 0.09245806187391281, 0.09734513610601425, 0.09192973375320435, 0.09192973375320435, 0.09602430462837219, 0.09298639744520187, 0.0948355570435524, 0.09245806187391281], "val_loss": [2.309417724609375, 2.3094351291656494, 2.3094563484191895, 2.309476852416992, 2.3094987869262695, 2.309521198272705, 2.3095431327819824, 2.3095669746398926, 2.3095905780792236, 2.3096110820770264, 2.309631824493408, 2.3096532821655273, 2.3096752166748047, 2.30969500541687, 2.30971622467041, 2.3097381591796875, 2.3097591400146484, 2.3097801208496094, 2.3097989559173584, 2.309818744659424, 2.3098387718200684, 2.3098573684692383, 2.309877872467041, 2.309899091720581, 2.3099193572998047, 2.3099403381347656, 2.3099606037139893, 2.3099801540374756, 2.3099985122680664, 2.3100173473358154, 2.31003475189209], "val_accuracy": [0.08866667002439499, 0.08966666460037231, 0.09033333510160446, 0.09099999815225601, 0.09133332967758179, 0.09266666322946548, 0.09366666525602341, 0.09399999678134918, 0.09399999678134918, 0.09466666728258133, 0.09399999678134918, 0.09466666728258133, 0.0949999988079071, 0.09533333033323288, 0.09666666388511658, 0.0976666659116745, 0.09833333641290665, 0.09799999743700027, 0.09799999743700027, 0.09833333641290665, 0.09833333641290665, 0.09866666793823242, 0.09833333641290665, 0.09833333641290665, 0.09866666793823242, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 56], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2], [0, 2, 0, 3], [16, 44], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 4, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.08657142519950867, "mapping_values": [1, 6, 3, 3, 2, 6, 3, 3, 2, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, alpha)))", "other_info": {"loss": [2.311183214187622, 2.308462619781494, 2.30765438079834, 2.3076491355895996, 2.3074278831481934, 2.3084933757781982], "accuracy": [0.08796724677085876, 0.08757099509239197, 0.09259014576673508, 0.09166556596755981, 0.08875974267721176, 0.08492933213710785], "val_loss": [2.3077492713928223, 2.3077492713928223, 2.3077492713928223, 2.3077492713928223, 2.3077492713928223, 2.3077492713928223], "val_accuracy": [0.07999999821186066, 0.07999999821186066, 0.07999999821186066, 0.07999999821186066, 0.07999999821186066, 0.07999999821186066]}}]