[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8619999885559082, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.222872257232666, 1.8676587343215942, 1.3915307521820068, 1.088126540184021, 0.9417486190795898, 0.8439165353775024, 0.7720445394515991, 0.7309077978134155, 0.6918043494224548, 0.665969729423523, 0.6454828977584839, 0.6178320646286011, 0.5933493375778198, 0.586044192314148, 0.5688586235046387, 0.5501934289932251, 0.5423616766929626, 0.52769535779953, 0.5225419998168945, 0.5053524971008301, 0.49284178018569946, 0.4896882176399231, 0.47649362683296204, 0.4700438678264618, 0.46988070011138916, 0.44835424423217773, 0.4390312731266022, 0.4352079927921295, 0.42914095520973206, 0.41966530680656433, 0.4121513366699219, 0.4087520241737366, 0.40575987100601196, 0.4019729793071747, 0.39049261808395386, 0.3866635859012604, 0.37271466851234436, 0.37352094054222107, 0.3724555969238281, 0.3653591275215149, 0.3539862036705017, 0.35636550188064575, 0.3463599979877472, 0.34969452023506165, 0.33963197469711304, 0.3346140384674072, 0.3302733898162842, 0.32770004868507385, 0.3198153078556061, 0.3057170808315277, 0.313545823097229, 0.3063853085041046, 0.2995365262031555, 0.2933700382709503, 0.2900962829589844, 0.2867988049983978, 0.2795434892177582, 0.2816561162471771, 0.2737717926502228, 0.2785744369029999, 0.2682358920574188, 0.2645277678966522, 0.25876325368881226, 0.257534384727478, 0.2554091215133667, 0.2441212236881256, 0.250029981136322, 0.2405303418636322, 0.23717588186264038, 0.23674878478050232], "accuracy": [0.28001585602760315, 0.48831066489219666, 0.5608242154121399, 0.6239598393440247, 0.6645092964172363, 0.6934354901313782, 0.7226257920265198, 0.7359662055969238, 0.7471932172775269, 0.7526086568832397, 0.7565711140632629, 0.7749306559562683, 0.7810064554214478, 0.7819310426712036, 0.7902522683143616, 0.8029322624206543, 0.8050455451011658, 0.8095363974571228, 0.8113855719566345, 0.8190463781356812, 0.8201030492782593, 0.822348415851593, 0.8277638554573059, 0.8302733898162842, 0.8296129703521729, 0.8418967127799988, 0.8446704745292664, 0.8422929644584656, 0.8469158411026001, 0.8502179384231567, 0.8508783578872681, 0.8531237840652466, 0.8552370667457581, 0.8595958352088928, 0.8607845902442932, 0.8615770936012268, 0.8687095642089844, 0.8685774803161621, 0.8660678863525391, 0.8745211958885193, 0.8753136992454529, 0.8717474341392517, 0.8761062026023865, 0.8751816153526306, 0.8817857503890991, 0.8784837126731873, 0.8802007436752319, 0.8836349248886108, 0.8870691061019897, 0.8927486538887024, 0.8879936337471008, 0.889050304889679, 0.8967111110687256, 0.8948619961738586, 0.8942015767097473, 0.8988244533538818, 0.9001452922821045, 0.8994848728179932, 0.9000132083892822, 0.8996169567108154, 0.9070135951042175, 0.9055606722831726, 0.908730685710907, 0.9076740145683289, 0.9089948534965515, 0.9091269373893738, 0.9097873568534851, 0.9134856462478638, 0.9141460657119751, 0.9158631563186646], "val_loss": [2.0321245193481445, 1.4947739839553833, 1.0188264846801758, 0.8204624652862549, 0.7378080487251282, 0.6801483035087585, 0.6412069201469421, 0.6066597700119019, 0.5834701657295227, 0.5640820264816284, 0.5494460463523865, 0.5333431959152222, 0.5217186808586121, 0.5137271881103516, 0.5010457038879395, 0.4867725968360901, 0.47909843921661377, 0.47368425130844116, 0.4615930914878845, 0.45622289180755615, 0.4548794627189636, 0.4475959539413452, 0.4354917109012604, 0.43509548902511597, 0.4266268312931061, 0.4203348755836487, 0.42139026522636414, 0.41246822476387024, 0.4087964594364166, 0.40643367171287537, 0.4008665382862091, 0.39316627383232117, 0.39907804131507874, 0.3903408646583557, 0.38313227891921997, 0.3812289535999298, 0.3805069923400879, 0.37899455428123474, 0.3770189583301544, 0.3693864643573761, 0.3709779381752014, 0.3720760941505432, 0.3725470304489136, 0.36551618576049805, 0.3622733950614929, 0.3681985139846802, 0.3582663834095001, 0.36485111713409424, 0.35693037509918213, 0.3578817546367645, 0.35581493377685547, 0.3513108789920807, 0.3579360246658325, 0.34746724367141724, 0.3493790328502655, 0.3492022156715393, 0.35807642340660095, 0.3454945981502533, 0.35108280181884766, 0.34519994258880615, 0.3424227833747864, 0.3465287983417511, 0.34417590498924255, 0.3390445113182068, 0.3439393639564514, 0.3465934991836548, 0.34221920371055603, 0.3413218557834625, 0.3429107367992401, 0.3394698202610016], "val_accuracy": [0.5133333206176758, 0.671999990940094, 0.6923333406448364, 0.7170000076293945, 0.7329999804496765, 0.7563333511352539, 0.7630000114440918, 0.7743333578109741, 0.7916666865348816, 0.7990000247955322, 0.7996666431427002, 0.8113333582878113, 0.8136666417121887, 0.8130000233650208, 0.8226666450500488, 0.82833331823349, 0.8309999704360962, 0.8330000042915344, 0.8373333215713501, 0.8413333296775818, 0.8373333215713501, 0.8410000205039978, 0.8486666679382324, 0.8486666679382324, 0.8516666889190674, 0.8550000190734863, 0.8486666679382324, 0.8569999933242798, 0.8566666841506958, 0.8579999804496765, 0.8543333411216736, 0.8606666922569275, 0.859333336353302, 0.8610000014305115, 0.8656666874885559, 0.8646666407585144, 0.8666666746139526, 0.8666666746139526, 0.8606666922569275, 0.871666669845581, 0.8693333268165588, 0.8676666617393494, 0.8700000047683716, 0.8713333606719971, 0.8726666569709778, 0.8723333477973938, 0.871999979019165, 0.8673333525657654, 0.8763333559036255, 0.8759999871253967, 0.875, 0.8756666779518127, 0.874666690826416, 0.8793333172798157, 0.8799999952316284, 0.8793333172798157, 0.874666690826416, 0.878333330154419, 0.8826666474342346, 0.8786666393280029, 0.8820000290870667, 0.878000020980835, 0.8799999952316284, 0.8830000162124634, 0.8856666684150696, 0.8809999823570251, 0.8856666684150696, 0.8836666941642761, 0.8820000290870667, 0.8830000162124634]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 2, 6, 8], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0], [6, 3, 3, 1, 4, 1, 4, 1, 4, 2, 8, 9, 1, 1, 9], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 1], [16, 99, 96, 18, 61, 1, 44, 6]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 10, 6, 4, 2, 2, 1, 1, 1, 26, 15, 11, 8], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [40, 39], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 1, 0, 2], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 8, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 10, 6, 4, 2, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(grad, alpha), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(alpha))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 4, 0, 5, 4, 4, 3, 0, 6, 0, 1, 5, 4, 5, 5, 8, 4, 0, 7, 1, 4, 0, 0, 8, 3, 0], [2, 1, 0, 2, 2, 0, 0, 1, 3, 2, 1, 2, 1, 1, 3, 0], [39, 39, 15, 89], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 3, 6, 8, 5, 0, 1, 4, 4, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [56, 99, 96, 99, 61, 33]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.square(tf.math.pow(tf.math.pow(tf.math.multiply(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.negative(tf.math.subtract(tf.math.square(tf.math.pow(tf.math.square(tf.math.square(tf.math.sqrt(tf.math.pow(tf.math.negative(grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.subtract(tf.math.pow(alpha, grad), grad), tf.math.negative(alpha)))))), grad), alpha), tf.math.negative(tf.math.sqrt(alpha)))))), tf.math.multiply(grad, tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.math.negative(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(sigma, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma))", "other_info": {"loss": [2.3181440830230713, 2.359598159790039, 2.4914512634277344, 2.766767740249634, 3.2040586471557617, 3.816364049911499], "accuracy": [0.09694888442754745, 0.10540219396352768, 0.10249637067317963, 0.1018359512090683, 0.10236428678035736, 0.10302469879388809], "val_loss": [2.315890312194824, 2.359678268432617, 2.4623427391052246, 2.659430742263794, 2.9876575469970703, 3.474701166152954], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 46, 30, 16, 4, 7, 4, 3, 2, 2, 1, 1, 1, 17, 10, 7, 5], "tree_depth": 43}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 9, 1, 3], [0, 1, 0, 1], [39, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 3, 0], [0, 2, 1, 3, 0], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 5, 9, 1, 4, 2, 8], [3, 0, 4, 0, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.03371428698301315, "mapping_values": [1, 6, 4, 2, 2, 13, 8, 5, 2, 2, 1, 1, 1, 11, 6, 5, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), tf.math.multiply(alpha, tf.math.negative(grad)))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [6.46002388859093e+18, 7.001073219654386e+18, 8.001513352209629e+18, 7.303707747885777e+18, 8.097994398035345e+18, 7.385726367515542e+18], "accuracy": [0.07753269374370575, 0.07938185334205627, 0.07449477910995483, 0.07779685407876968, 0.07238145917654037, 0.080042265355587], "val_loss": [6.932459296034652e+18, 6.932459296034652e+18, 6.932459296034652e+18, 6.932459296034652e+18, 6.932459296034652e+18, 6.932459296034652e+18], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]