[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8677142858505249, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221435546875, 1.8610029220581055, 1.397299885749817, 1.0930746793746948, 0.9347829222679138, 0.8437337279319763, 0.7821229100227356, 0.7280023097991943, 0.6969411373138428, 0.658059298992157, 0.6402644515037537, 0.623816967010498, 0.5966834425926208, 0.5822687745094299, 0.5644749402999878, 0.552204966545105, 0.5349061489105225, 0.5201336741447449, 0.5193760991096497, 0.4996596872806549, 0.49102234840393066, 0.4819418787956238, 0.47285524010658264, 0.4697990119457245, 0.46047940850257874, 0.4479142725467682, 0.4381192922592163, 0.4323498606681824, 0.42568013072013855, 0.4184129238128662, 0.4104730188846588, 0.4051894247531891, 0.39887893199920654, 0.3845924735069275, 0.3851604461669922, 0.3796679973602295, 0.3765171468257904, 0.3704206943511963, 0.3682989776134491, 0.36401602625846863, 0.36199167370796204, 0.3575923442840576, 0.3481321930885315, 0.3444124758243561, 0.3445137143135071, 0.3322344124317169, 0.3234701156616211, 0.32054561376571655, 0.3162088394165039, 0.3133001923561096, 0.3140690326690674, 0.30883631110191345, 0.2997047007083893, 0.290733277797699, 0.29217395186424255, 0.29449892044067383, 0.2886489927768707, 0.2808331549167633, 0.27731284499168396, 0.27387118339538574, 0.27403849363327026, 0.2679494619369507, 0.2596132457256317, 0.2557641565799713, 0.2567600607872009, 0.2543638050556183, 0.24871021509170532, 0.24540647864341736, 0.24238382279872894, 0.23833692073822021, 0.23067402839660645, 0.22720827162265778, 0.22620682418346405, 0.21945372223854065, 0.21737264096736908, 0.221580371260643, 0.21416831016540527, 0.20730318129062653, 0.20501066744327545, 0.1999243199825287, 0.19918525218963623], "accuracy": [0.2813366651535034, 0.48249900341033936, 0.564258337020874, 0.6106194853782654, 0.6664905548095703, 0.6954167485237122, 0.7150970697402954, 0.7351737022399902, 0.7494386434555054, 0.7580240368843079, 0.7631752490997314, 0.7730814814567566, 0.7823272943496704, 0.7901201844215393, 0.7954035401344299, 0.7994980812072754, 0.8058380484580994, 0.8067626357078552, 0.8187822103500366, 0.8197067975997925, 0.8216879963874817, 0.830669641494751, 0.8359529972076416, 0.8335754871368408, 0.8345000743865967, 0.8418967127799988, 0.8416325449943542, 0.8461233377456665, 0.8470479249954224, 0.8508783578872681, 0.8541803956031799, 0.8529917001724243, 0.859199583530426, 0.8601241707801819, 0.8627657890319824, 0.8618412613868713, 0.8651432991027832, 0.8665962219238281, 0.867520809173584, 0.8742570281028748, 0.8710870146751404, 0.874389111995697, 0.8772949576377869, 0.8767666220664978, 0.8753136992454529, 0.8770307898521423, 0.8819178342819214, 0.883238673210144, 0.887597382068634, 0.8869370222091675, 0.884691596031189, 0.8907673954963684, 0.8914278149604797, 0.8930128216743469, 0.8945978283882141, 0.8956544995307922, 0.8926165699958801, 0.8961827754974365, 0.8982961177825928, 0.9022586345672607, 0.9006736278533936, 0.9054285883903503, 0.9050323367118835, 0.9055606722831726, 0.9056927561759949, 0.9085986018180847, 0.909259021282196, 0.910711944103241, 0.9078060984611511, 0.9120327830314636, 0.9154669046401978, 0.9170519113540649, 0.9182406663894653, 0.9235239624977112, 0.9208822846412659, 0.9218068718910217, 0.9206181764602661, 0.924448549747467, 0.9251089692115784, 0.9273543953895569, 0.9277506470680237], "val_loss": [2.034452199935913, 1.5099437236785889, 1.042110562324524, 0.8289656639099121, 0.7367039322853088, 0.6784663200378418, 0.6309863328933716, 0.5906563401222229, 0.565204381942749, 0.5453056693077087, 0.5232915282249451, 0.5127111673355103, 0.499909371137619, 0.48777368664741516, 0.47410765290260315, 0.4678305387496948, 0.4548121690750122, 0.44972315430641174, 0.4399782419204712, 0.4310656189918518, 0.4287257194519043, 0.417686402797699, 0.4132210314273834, 0.41012120246887207, 0.4021074175834656, 0.4043617248535156, 0.39065831899642944, 0.39174380898475647, 0.3827116787433624, 0.37847867608070374, 0.3763720691204071, 0.3750101625919342, 0.37146711349487305, 0.36764273047447205, 0.36649706959724426, 0.3602123260498047, 0.3570552468299866, 0.3548266291618347, 0.3554833233356476, 0.3522369861602783, 0.34861499071121216, 0.3487749695777893, 0.3474172055721283, 0.3458858132362366, 0.34193286299705505, 0.3387543857097626, 0.3363986611366272, 0.338243693113327, 0.33130571246147156, 0.33316341042518616, 0.3321702778339386, 0.32961133122444153, 0.3278464674949646, 0.32551687955856323, 0.32732686400413513, 0.32440561056137085, 0.3228817582130432, 0.32203349471092224, 0.32165974378585815, 0.322742760181427, 0.32128363847732544, 0.3205885887145996, 0.3172849416732788, 0.3137562572956085, 0.316332072019577, 0.3141314685344696, 0.3179445266723633, 0.3124450743198395, 0.3118998110294342, 0.3117941617965698, 0.3133868873119354, 0.3166765868663788, 0.30870404839515686, 0.31079745292663574, 0.3088608980178833, 0.30785009264945984, 0.3115302324295044, 0.30667346715927124, 0.3064231276512146, 0.30571290850639343, 0.3098829984664917], "val_accuracy": [0.5509999990463257, 0.6499999761581421, 0.6773333549499512, 0.7113333344459534, 0.7429999709129333, 0.7563333511352539, 0.7739999890327454, 0.7853333353996277, 0.7913333177566528, 0.8050000071525574, 0.8080000281333923, 0.8149999976158142, 0.8220000267028809, 0.8316666483879089, 0.8343333601951599, 0.8389999866485596, 0.8403333425521851, 0.8453333377838135, 0.8513333201408386, 0.8519999980926514, 0.8486666679382324, 0.856333315372467, 0.859333336353302, 0.8553333282470703, 0.8610000014305115, 0.8560000061988831, 0.8619999885559082, 0.859666645526886, 0.8653333187103271, 0.8693333268165588, 0.8673333525657654, 0.8703333139419556, 0.8683333396911621, 0.871666669845581, 0.8690000176429749, 0.878000020980835, 0.871666669845581, 0.871999979019165, 0.8726666569709778, 0.874666690826416, 0.8793333172798157, 0.8743333220481873, 0.8776666522026062, 0.8809999823570251, 0.8796666860580444, 0.8809999823570251, 0.8799999952316284, 0.8836666941642761, 0.8806666731834412, 0.8790000081062317, 0.8769999742507935, 0.8853333592414856, 0.8846666812896729, 0.8859999775886536, 0.8833333253860474, 0.8870000243186951, 0.8859999775886536, 0.8820000290870667, 0.8843333125114441, 0.8866666555404663, 0.8880000114440918, 0.8853333592414856, 0.8896666765213013, 0.8896666765213013, 0.8889999985694885, 0.890666663646698, 0.890333354473114, 0.8920000195503235, 0.8886666893959045, 0.8913333415985107, 0.890666663646698, 0.8889999985694885, 0.893666684627533, 0.8916666507720947, 0.8930000066757202, 0.8949999809265137, 0.890333354473114, 0.893666684627533, 0.8920000195503235, 0.8913333415985107, 0.8946666717529297]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3], [2, 1, 2, 2, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 5, 7, 5], [0, 2, 0, 3, 2], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0], [6, 3, 4, 6, 1, 1, 4, 1, 4, 2, 8, 3, 2, 6, 2, 0, 7, 0, 4, 5, 0, 8, 6, 3, 0, 0, 7, 5, 1, 1, 9, 4, 6, 4, 6, 0, 7, 6, 9, 8, 7, 6, 0, 0, 1, 9], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0, 5, 1, 5, 4, 5, 5, 1, 2, 0, 3, 2, 5, 0, 5, 6, 1, 2, 3], [16, 99, 96, 53, 61, 59, 38, 41, 62, 6]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 0, 13, 8, 5, 2, 1, 0, 1, 1, 74, 46, 28, 10], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(grad, alpha), tf.math.multiply(grad, grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(tf.math.square(grad), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(grad, tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), sigma)), tf.math.sqrt(tf.math.multiply(alpha, beta))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.negative(grad), tf.math.add(tf.math.negative(alpha), tf.math.pow(grad, grad))), tf.math.square(tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.negative(tf.math.negative(tf.math.add(grad, alpha)))), tf.math.square(tf.math.subtract(tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), beta), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))))), sigma)), tf.math.pow(tf.math.divide_no_nan(beta, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.negative(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(grad, tf.math.divide_no_nan(grad, alpha))))))), beta)), tf.math.negative(tf.math.negative(tf.math.subtract(sigma, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 2, 3, 0, 3, 4, 9], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 3, 3, 0, 6, 2, 7, 8, 6], [0, 2, 0, 3, 3, 3, 5], [16, 16], [0, 1], [0], [0], [66], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 3, 1, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 45, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 7, 4, 2, 16, 9, 7, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(tf.math.sqrt(grad), tf.math.divide_no_nan(grad, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(alpha, tf.math.sqrt(beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [26, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 3, 2, 0, 4, 3, 4, 5, 5], [3, 0, 0, 3, 0, 2, 3, 1, 2, 0, 2, 3, 2, 1, 2], [16, 99, 96, 99, 12, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 34, 19, 15, 4], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(beta, sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.math.multiply(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(tf.math.multiply(beta, tf.math.pow(sigma, tf.math.square(beta))), tf.math.square(alpha)))), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 1], [0, 2, 1, 0, 3], [0, 1, 0, 2], [20, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 1], [0], [1], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 3, 6, 8, 8, 4, 1, 6, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0], [16, 6, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1, 0, 17, 9, 8, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [108709167104.0, 148136263680.0, 148395950080.0, 148030996480.0, 148339752960.0, 148415217664.0], "accuracy": [0.10011887550354004, 0.09813763201236725, 0.09826971590518951, 0.09853387624025345, 0.09972262382507324, 0.0948355570435524], "val_loss": [110275600384.0, 112215613440.0, 112424189952.0, 112396451840.0, 112318873600.0, 112232095744.0], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}]