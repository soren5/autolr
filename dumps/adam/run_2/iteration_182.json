[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.871999979019165, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2237236499786377, 1.8651247024536133, 1.3853436708450317, 1.071122169494629, 0.9319881200790405, 0.8218368887901306, 0.7550387382507324, 0.7060734033584595, 0.6639518141746521, 0.6377840638160706, 0.621767520904541, 0.6051723957061768, 0.5731232762336731, 0.5528555512428284, 0.5486814379692078, 0.529765784740448, 0.5154740214347839, 0.4963342547416687, 0.4914645850658417, 0.48692062497138977, 0.4767116606235504, 0.45653071999549866, 0.4447750747203827, 0.4456261992454529, 0.4387340843677521, 0.42040756344795227, 0.4207809865474701, 0.4132743179798126, 0.41090789437294006, 0.39677464962005615, 0.39241862297058105, 0.38290995359420776, 0.380611389875412, 0.37549278140068054, 0.3704983592033386, 0.3648110330104828, 0.3602445423603058, 0.3531056344509125, 0.3415305018424988, 0.34499090909957886, 0.3401660621166229, 0.33796364068984985, 0.3338302671909332, 0.32873839139938354, 0.3214576542377472, 0.3200203776359558, 0.31266480684280396, 0.30578726530075073], "accuracy": [0.2724871337413788, 0.49332982301712036, 0.5678246021270752, 0.629507303237915, 0.6709813475608826, 0.7091533541679382, 0.722229540348053, 0.7424382567405701, 0.7611940503120422, 0.7687227725982666, 0.770439863204956, 0.7774402499198914, 0.7902522683143616, 0.8009510040283203, 0.8035926818847656, 0.8094043135643005, 0.8153480291366577, 0.8170651197433472, 0.821820080280304, 0.8251221776008606, 0.8285563588142395, 0.8376700282096863, 0.8437458872795105, 0.8387266993522644, 0.8469158411026001, 0.8533879518508911, 0.8465195894241333, 0.8537842035293579, 0.8527275323867798, 0.8574824929237366, 0.8605204224586487, 0.8610487580299377, 0.8639545440673828, 0.8672566413879395, 0.8683133125305176, 0.8683133125305176, 0.8729361891746521, 0.8741249442100525, 0.8778232932090759, 0.876370370388031, 0.8778232932090759, 0.8771628737449646, 0.8805969953536987, 0.8819178342819214, 0.8854840993881226, 0.8910315632820129, 0.8869370222091675, 0.8905032277107239], "val_loss": [2.0339536666870117, 1.5030452013015747, 1.0205025672912598, 0.813233494758606, 0.7334389686584473, 0.676511824131012, 0.6342154145240784, 0.608698844909668, 0.5814569592475891, 0.562214195728302, 0.5544348359107971, 0.5337773561477661, 0.5207536220550537, 0.5069828033447266, 0.5005796551704407, 0.4921005070209503, 0.48464077711105347, 0.4790459871292114, 0.46925657987594604, 0.46002599596977234, 0.45288026332855225, 0.4516909718513489, 0.4439844489097595, 0.4402735233306885, 0.43367674946784973, 0.4280264377593994, 0.42885053157806396, 0.42314258217811584, 0.4179934859275818, 0.41624993085861206, 0.4124409258365631, 0.4118514060974121, 0.40674883127212524, 0.40572798252105713, 0.4039282202720642, 0.3998779356479645, 0.3965934216976166, 0.394611120223999, 0.39229699969291687, 0.39326685667037964, 0.38634219765663147, 0.38530516624450684, 0.38327518105506897, 0.3828698992729187, 0.3791930675506592, 0.37950316071510315, 0.3786534070968628, 0.3777657151222229], "val_accuracy": [0.527999997138977, 0.6653333306312561, 0.6916666626930237, 0.7236666679382324, 0.731333315372467, 0.7630000114440918, 0.7676666378974915, 0.777999997138977, 0.79666668176651, 0.8046666383743286, 0.8029999732971191, 0.8223333358764648, 0.824999988079071, 0.8296666741371155, 0.8276666402816772, 0.8309999704360962, 0.8346666693687439, 0.8346666693687439, 0.8373333215713501, 0.8429999947547913, 0.8460000157356262, 0.8460000157356262, 0.8500000238418579, 0.8446666598320007, 0.8510000109672546, 0.8489999771118164, 0.8566666841506958, 0.8543333411216736, 0.8579999804496765, 0.8539999723434448, 0.8566666841506958, 0.8583333492279053, 0.856333315372467, 0.8560000061988831, 0.8613333106040955, 0.8610000014305115, 0.8586666584014893, 0.8640000224113464, 0.8656666874885559, 0.8600000143051147, 0.8659999966621399, 0.8663333058357239, 0.8723333477973938, 0.8669999837875366, 0.8700000047683716, 0.8683333396911621, 0.871666669845581, 0.8693333268165588]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [4, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 2, 4, 2, 8], [0, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.44428572058677673, "mapping_values": [1, 8, 4, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 10, 5, 5, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), grad), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.309617280960083, 2.308000326156616, 2.306840181350708, 2.304452657699585, 2.3023440837860107, 2.3003082275390625, 2.2984941005706787, 2.297311544418335, 2.29608416557312, 2.2950263023376465, 2.2932217121124268, 2.2910797595977783, 2.2907352447509766, 2.288961410522461, 2.2872886657714844, 2.2851269245147705, 2.2840793132781982, 2.2826619148254395, 2.2815778255462646, 2.280107021331787, 2.2771878242492676, 2.274754762649536, 2.2758538722991943, 2.2718489170074463, 2.270717144012451, 2.2707955837249756, 2.2681267261505127, 2.266753673553467, 2.264570474624634, 2.2636866569519043, 2.261220932006836, 2.2606041431427, 2.258392333984375, 2.257209062576294, 2.2555782794952393, 2.2522494792938232, 2.249910593032837, 2.2497167587280273, 2.247152328491211, 2.2443838119506836, 2.243650197982788, 2.241370916366577, 2.240236520767212, 2.237668037414551, 2.2347567081451416, 2.233931064605713, 2.231194019317627, 2.2277274131774902, 2.227479934692383, 2.223038911819458, 2.22285795211792, 2.220057725906372, 2.2146363258361816, 2.212714433670044, 2.2092201709747314, 2.206589937210083, 2.203988552093506, 2.203763246536255, 2.1993446350097656, 2.19578218460083, 2.1917357444763184, 2.1900393962860107], "accuracy": [0.09338264167308807, 0.09747721254825592, 0.09496764093637466, 0.09800554811954498, 0.10579843819141388, 0.10645885765552521, 0.11200633645057678, 0.11174217611551285, 0.11517632752656937, 0.11689341068267822, 0.11966715008020401, 0.1282525360584259, 0.12891295552253723, 0.1336679458618164, 0.1372341811656952, 0.14330999553203583, 0.14832915365695953, 0.146479994058609, 0.15110288560390472, 0.1526878923177719, 0.16510368883609772, 0.1666886806488037, 0.16814158856868744, 0.18214239180088043, 0.186104878783226, 0.1768590658903122, 0.18584071099758148, 0.19416193664073944, 0.1978602558374405, 0.20895522832870483, 0.2071060687303543, 0.2094835489988327, 0.21555937826633453, 0.21476687490940094, 0.22176727652549744, 0.22533351182937622, 0.2417117953300476, 0.2366926372051239, 0.2413155436515808, 0.2514859437942505, 0.24924051761627197, 0.24976885318756104, 0.2592788338661194, 0.2550521790981293, 0.2715625464916229, 0.26495838165283203, 0.2785629332065582, 0.275260865688324, 0.2793554365634918, 0.28780874609947205, 0.28741249442100525, 0.2847708463668823, 0.3061682879924774, 0.29282790422439575, 0.3032624423503876, 0.31158366799354553, 0.30762118101119995, 0.30999869108200073, 0.3210936486721039, 0.32584863901138306, 0.3263769745826721, 0.322150319814682], "val_loss": [2.3065967559814453, 2.3048031330108643, 2.3030266761779785, 2.3012497425079346, 2.299482822418213, 2.2977547645568848, 2.2960293292999268, 2.294328451156616, 2.292642593383789, 2.2909717559814453, 2.2893118858337402, 2.287662982940674, 2.2860372066497803, 2.2843809127807617, 2.282743215560913, 2.281123161315918, 2.279528856277466, 2.277923107147217, 2.2762906551361084, 2.2746753692626953, 2.273040771484375, 2.2713677883148193, 2.269702911376953, 2.2680246829986572, 2.266324758529663, 2.2646422386169434, 2.2629189491271973, 2.261180877685547, 2.2594141960144043, 2.2576162815093994, 2.2557966709136963, 2.2539479732513428, 2.252072811126709, 2.2501513957977295, 2.248213768005371, 2.2462401390075684, 2.244213581085205, 2.242189407348633, 2.2400951385498047, 2.2379722595214844, 2.2358007431030273, 2.2335848808288574, 2.231343984603882, 2.2290544509887695, 2.2267022132873535, 2.2243213653564453, 2.221872329711914, 2.2193515300750732, 2.216787815093994, 2.2141449451446533, 2.2114763259887695, 2.208737850189209, 2.2059032917022705, 2.202979326248169, 2.199965476989746, 2.196890115737915, 2.193728446960449, 2.19053053855896, 2.1872613430023193, 2.183858633041382, 2.1803648471832275, 2.176809310913086], "val_accuracy": [0.09666666388511658, 0.09833333641290665, 0.09933333098888397, 0.10300000011920929, 0.10499999672174454, 0.11133333295583725, 0.11599999666213989, 0.12166666984558105, 0.13099999725818634, 0.13633333146572113, 0.140666663646698, 0.14499999582767487, 0.1496666669845581, 0.156333327293396, 0.16699999570846558, 0.17166666686534882, 0.179666668176651, 0.1889999955892563, 0.19699999690055847, 0.20800000429153442, 0.21299999952316284, 0.22433333098888397, 0.23733332753181458, 0.24766667187213898, 0.2593333423137665, 0.26866665482521057, 0.28200000524520874, 0.29866665601730347, 0.3109999895095825, 0.3230000138282776, 0.33633333444595337, 0.34833332896232605, 0.36033332347869873, 0.3713333308696747, 0.3773333430290222, 0.3880000114440918, 0.39533331990242004, 0.4026666581630707, 0.41233333945274353, 0.4166666567325592, 0.41999998688697815, 0.4230000078678131, 0.4266666769981384, 0.43299999833106995, 0.4350000023841858, 0.4333333373069763, 0.43700000643730164, 0.4410000145435333, 0.44333332777023315, 0.4463333189487457, 0.4476666748523712, 0.4503333270549774, 0.45100000500679016, 0.45133334398269653, 0.4516666531562805, 0.45266667008399963, 0.453000009059906, 0.45133334398269653, 0.4503333270549774, 0.45100000500679016, 0.4503333270549774, 0.45233333110809326]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 1, 1, 1], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 4, 3, 8, 4, 3, 2], [0, 1, 0, 3, 2, 0, 5, 2, 0], [16, 16, 78, 86], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [1, 4, 0, 3, 0, 0, 3, 1, 2, 0], [53, 99, 81, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 1, 20, 11, 9, 4, 2, 1, 1, 1, 21, 11, 10, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), alpha), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.multiply(tf.math.sqrt(tf.math.pow(beta, tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(alpha, tf.math.subtract(grad, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))))), sigma), alpha), tf.math.sqrt(beta)), tf.constant(1.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 1], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 2, 3, 0, 3, 5], [0, 2, 0, 3, 0], [16, 16, 89], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 8, 2, 8, 0], [0, 0, 0, 3, 0, 4, 3, 1, 2, 0, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 11, 6, 5, 3, 2, 1, 1, 1, 26, 15, 11, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma)))), tf.math.add(tf.math.sqrt(tf.math.sqrt(alpha)), beta)), tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 6, 3, 0, 3, 6, 5, 7, 2, 1, 3, 4, 2, 9, 6, 4], [0, 2, 0, 3, 0, 4, 2, 2, 0, 4, 2, 5], [16, 23, 8, 22, 94], [0, 1], [0], [2], [97], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 1], [0, 0, 0, 3, 0, 0, 4, 3, 2, 0], [16, 57, 9, 99, 61, 91]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 28, 16, 12, 5, 2, 1, 1, 0, 16, 8, 8, 5], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(grad, tf.math.multiply(tf.math.pow(tf.math.add(beta, beta), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad), beta))), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]