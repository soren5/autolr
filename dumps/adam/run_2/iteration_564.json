[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8637142777442932, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2222766876220703, 1.8642282485961914, 1.3943703174591064, 1.0884687900543213, 0.9306917786598206, 0.8292075991630554, 0.7766880989074707, 0.7256375551223755, 0.6921202540397644, 0.6617871522903442, 0.6414850950241089, 0.6097530722618103, 0.5912951827049255, 0.5699908137321472, 0.5583403706550598, 0.5449437499046326, 0.5296881794929504, 0.5257173776626587, 0.5211573839187622, 0.5010063052177429, 0.49689096212387085, 0.47695106267929077, 0.4637501835823059, 0.45379820466041565, 0.4466250240802765, 0.43535494804382324, 0.4335094690322876, 0.4353911578655243, 0.4141053855419159, 0.41352954506874084, 0.41022950410842896, 0.3959214389324188, 0.3956379294395447, 0.3843200206756592, 0.3787727952003479, 0.37401312589645386, 0.3715903162956238, 0.36482033133506775, 0.3643113970756531, 0.3539814054965973, 0.35011187195777893, 0.34681522846221924, 0.3458980619907379, 0.3407925069332123, 0.332276314496994, 0.3274729251861572, 0.3254765272140503, 0.31750616431236267, 0.32303643226623535, 0.31394708156585693, 0.30757662653923035, 0.30784234404563904, 0.29933133721351624, 0.293944776058197, 0.29374822974205017, 0.2907584607601166, 0.2885031998157501, 0.2762851417064667, 0.26888665556907654, 0.2744816839694977, 0.2607608437538147, 0.2630642354488373, 0.2586698830127716, 0.25638118386268616, 0.24845349788665771, 0.25027284026145935, 0.247589573264122, 0.24970336258411407, 0.23415419459342957, 0.23603229224681854, 0.2329445630311966, 0.22672003507614136, 0.22138211131095886, 0.22328780591487885], "accuracy": [0.2728833854198456, 0.47827234864234924, 0.5571258664131165, 0.6211860775947571, 0.6601505875587463, 0.7022850513458252, 0.717870831489563, 0.7363624572753906, 0.7464007139205933, 0.7574957013130188, 0.7605336308479309, 0.774270236492157, 0.7829877138137817, 0.7960638999938965, 0.7961959838867188, 0.8012151718139648, 0.8112534880638123, 0.8088759779930115, 0.8129705190658569, 0.8220842480659485, 0.8234050869941711, 0.8269713521003723, 0.8366134166717529, 0.8425571322441101, 0.8387266993522644, 0.8487650156021118, 0.844010055065155, 0.847840428352356, 0.8527275323867798, 0.8539162874221802, 0.8504821062088013, 0.8589354157447815, 0.8573504090309143, 0.8632941246032715, 0.8656716346740723, 0.8664641380310059, 0.8693699836730957, 0.8683133125305176, 0.8671245574951172, 0.872407853603363, 0.8759741187095642, 0.8747853636741638, 0.8757099509239197, 0.8794082403182983, 0.8833707571029663, 0.886672854423523, 0.8850878477096558, 0.8862766027450562, 0.884691596031189, 0.8901069760322571, 0.8912957310676575, 0.8927486538887024, 0.8916919827461243, 0.8903711438179016, 0.8939374089241028, 0.8989565372467041, 0.8988244533538818, 0.9035794734954834, 0.9039757251739502, 0.9019944667816162, 0.9059569239616394, 0.9076740145683289, 0.9074098467826843, 0.9066173434257507, 0.9134856462478638, 0.9083344340324402, 0.910711944103241, 0.9097873568534851, 0.919561505317688, 0.9120327830314636, 0.9191652536392212, 0.9171839952468872, 0.9187690019607544, 0.9170519113540649], "val_loss": [2.0402793884277344, 1.515871524810791, 1.0410521030426025, 0.8327195644378662, 0.734719455242157, 0.6808516383171082, 0.6372227668762207, 0.6033022403717041, 0.5751946568489075, 0.5588482618331909, 0.5386367440223694, 0.5279707908630371, 0.5086659789085388, 0.49728426337242126, 0.48656487464904785, 0.4731684923171997, 0.47008487582206726, 0.46206456422805786, 0.4596695005893707, 0.44681254029273987, 0.44340014457702637, 0.43084725737571716, 0.42983338236808777, 0.4233127534389496, 0.4150708019733429, 0.4101903438568115, 0.4082382023334503, 0.40284407138824463, 0.39699095487594604, 0.39851436018943787, 0.3894813656806946, 0.38727399706840515, 0.39096561074256897, 0.382800817489624, 0.3777187764644623, 0.3762722909450531, 0.3754650950431824, 0.3724294900894165, 0.370045930147171, 0.36662524938583374, 0.3665662109851837, 0.3689611852169037, 0.36258602142333984, 0.35942593216896057, 0.3566570580005646, 0.3580229580402374, 0.35646694898605347, 0.3479999899864197, 0.35784631967544556, 0.35408875346183777, 0.34725162386894226, 0.3479289412498474, 0.3471771776676178, 0.3451164960861206, 0.34742414951324463, 0.3415011465549469, 0.3385058641433716, 0.3366548418998718, 0.3355252146720886, 0.3390580713748932, 0.3315439820289612, 0.3311155140399933, 0.33062124252319336, 0.3305189907550812, 0.3288138806819916, 0.3252236843109131, 0.32433876395225525, 0.3242891728878021, 0.32586243748664856, 0.3253808915615082, 0.32099685072898865, 0.32597237825393677, 0.32206979393959045, 0.3225768506526947], "val_accuracy": [0.534333348274231, 0.6653333306312561, 0.6883333325386047, 0.7120000123977661, 0.7386666536331177, 0.7473333477973938, 0.7693333625793457, 0.7770000100135803, 0.7916666865348816, 0.7953333258628845, 0.8090000152587891, 0.8086666464805603, 0.8173333406448364, 0.8223333358764648, 0.8176666498184204, 0.8316666483879089, 0.8293333053588867, 0.8346666693687439, 0.8363333344459534, 0.8410000205039978, 0.8376666903495789, 0.847000002861023, 0.847000002861023, 0.8493333458900452, 0.8510000109672546, 0.8506666421890259, 0.8516666889190674, 0.8560000061988831, 0.8550000190734863, 0.8573333621025085, 0.859000027179718, 0.8610000014305115, 0.8586666584014893, 0.862666666507721, 0.862666666507721, 0.8656666874885559, 0.8656666874885559, 0.8650000095367432, 0.8653333187103271, 0.8696666955947876, 0.8713333606719971, 0.8666666746139526, 0.8693333268165588, 0.8686666488647461, 0.8759999871253967, 0.8703333139419556, 0.871666669845581, 0.8763333559036255, 0.8709999918937683, 0.875, 0.8763333559036255, 0.875, 0.8766666650772095, 0.8786666393280029, 0.8816666603088379, 0.8803333044052124, 0.8796666860580444, 0.8820000290870667, 0.8840000033378601, 0.8820000290870667, 0.8843333125114441, 0.8809999823570251, 0.8840000033378601, 0.8859999775886536, 0.8849999904632568, 0.8866666555404663, 0.8840000033378601, 0.8843333125114441, 0.8896666765213013, 0.8849999904632568, 0.887333333492279, 0.8870000243186951, 0.8849999904632568, 0.8889999985694885]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39, 62], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 5, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 8, 6, 1, 4, 1, 4, 2, 8], [4, 0, 4, 1, 0, 0, 4, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 3, 6, 4, 2, 1, 2, 1, 1, 1, 21, 11, 10, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, alpha)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 2, 3, 0, 3, 6, 8, 9], [0, 2, 2, 3], [16, 16], [0, 1], [0], [0], [94], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 6, 1, 6, 8, 1, 4, 4, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 12, 8, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5, 5, 1, 0], [0, 2, 0, 3, 5, 4], [16, 16], [1, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8], [0, 0, 0, 3, 2, 4, 3, 1, 2, 0], [97, 99, 48, 99, 23, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 15, 9, 6, 2, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.square(tf.math.subtract(grad, tf.math.negative(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303628921508789, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 0], [89, 39, 98], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 3, 3], [16, 16], [1, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [6, 3, 3, 6, 6, 1, 4, 1, 4, 2, 8, 7, 5, 7, 4, 9, 5, 5, 7, 3, 1, 5, 7, 9], [0, 0, 0, 3, 0, 0, 3, 2, 2, 0, 0, 5, 4, 6, 5, 6], [98, 99, 96, 99, 61, 1, 7, 70, 76]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 1, 0, 1, 1, 1, 0, 1, 0, 40, 24, 16, 9], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.pow(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.multiply(tf.math.subtract(tf.math.square(tf.math.add(grad, grad)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), grad))), grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918]}}]