[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8679999709129333, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221986770629883, 1.8682671785354614, 1.4022997617721558, 1.111327052116394, 0.9632599353790283, 0.856941282749176, 0.7993430495262146, 0.7401348352432251, 0.7133145928382874, 0.6694294810295105, 0.6560845375061035, 0.625328004360199, 0.600966215133667, 0.5868324041366577, 0.563368022441864, 0.5504137277603149, 0.5385138988494873, 0.5249940156936646, 0.5112345218658447, 0.5029799342155457, 0.49504512548446655, 0.47490182518959045, 0.4711747169494629, 0.4642143249511719, 0.4542402923107147, 0.4428962767124176, 0.4373300075531006, 0.4320591390132904, 0.41541406512260437, 0.41812726855278015, 0.39950883388519287, 0.4038698971271515, 0.3934558629989624, 0.38236528635025024, 0.38664892315864563, 0.3772221803665161, 0.3682476878166199, 0.3682055175304413, 0.35891374945640564, 0.3600592017173767, 0.35055381059646606, 0.3369368016719818, 0.33746248483657837, 0.3370388150215149, 0.3228304386138916, 0.3315502107143402, 0.31836628913879395, 0.31491851806640625, 0.31373539566993713, 0.3035064935684204, 0.30218684673309326, 0.297185480594635, 0.29552674293518066, 0.2914165258407593], "accuracy": [0.26799631118774414, 0.47946110367774963, 0.5497292280197144, 0.6021661758422852, 0.6530181169509888, 0.6942279934883118, 0.7094175219535828, 0.7298903465270996, 0.7433628439903259, 0.7547219395637512, 0.7617223858833313, 0.7732135653495789, 0.7853652238845825, 0.7861577272415161, 0.7971205711364746, 0.8016114234924316, 0.8119139075279236, 0.8132346868515015, 0.8189142942428589, 0.8191784620285034, 0.8248580098152161, 0.8319904804229736, 0.8350284099578857, 0.8342359066009521, 0.8387266993522644, 0.8388587832450867, 0.8457271456718445, 0.8437458872795105, 0.8525954484939575, 0.852331280708313, 0.858671247959137, 0.8543124794960022, 0.8642187118530273, 0.8646149635314941, 0.858671247959137, 0.86553955078125, 0.8698983192443848, 0.8713511824607849, 0.8705587387084961, 0.8726720213890076, 0.8728041052818298, 0.8784837126731873, 0.8817857503890991, 0.8823140859603882, 0.8858803510665894, 0.8820499181747437, 0.8881257176399231, 0.8865407705307007, 0.8905032277107239, 0.8912957310676575, 0.8905032277107239, 0.8926165699958801, 0.8942015767097473, 0.8985602855682373], "val_loss": [2.0391740798950195, 1.510753870010376, 1.0432124137878418, 0.8372498154640198, 0.7461634874343872, 0.6882887482643127, 0.6424277424812317, 0.6087949872016907, 0.5836097002029419, 0.5651426315307617, 0.54409259557724, 0.5335941314697266, 0.5161389708518982, 0.5037609338760376, 0.4896202087402344, 0.4805557131767273, 0.47484028339385986, 0.4652142822742462, 0.4591740369796753, 0.4490681290626526, 0.44174763560295105, 0.4356112480163574, 0.4285014271736145, 0.4274906516075134, 0.4186546504497528, 0.41612598299980164, 0.4122101962566376, 0.40403109788894653, 0.40427327156066895, 0.396192342042923, 0.39754462242126465, 0.3867315351963043, 0.38547858595848083, 0.3842039406299591, 0.3843039572238922, 0.3785587549209595, 0.37597063183784485, 0.3790450394153595, 0.37185075879096985, 0.3702062964439392, 0.36690884828567505, 0.36734747886657715, 0.3588736057281494, 0.3562397062778473, 0.36543455719947815, 0.3546435534954071, 0.35670000314712524, 0.35532617568969727, 0.3538123369216919, 0.3514523208141327, 0.3486373722553253, 0.34954723715782166, 0.34679320454597473, 0.3457901179790497], "val_accuracy": [0.5260000228881836, 0.6556666493415833, 0.6880000233650208, 0.7113333344459534, 0.7323333621025085, 0.7486666440963745, 0.7570000290870667, 0.7733333110809326, 0.7853333353996277, 0.7796666622161865, 0.7946666479110718, 0.8046666383743286, 0.8076666593551636, 0.8113333582878113, 0.8253333568572998, 0.8216666579246521, 0.8246666789054871, 0.8330000042915344, 0.8323333263397217, 0.8366666436195374, 0.843666672706604, 0.847000002861023, 0.8486666679382324, 0.8423333168029785, 0.8546666502952576, 0.8523333072662354, 0.8523333072662354, 0.8519999980926514, 0.8529999852180481, 0.8583333492279053, 0.8546666502952576, 0.8610000014305115, 0.8606666922569275, 0.8643333315849304, 0.8579999804496765, 0.8663333058357239, 0.8640000224113464, 0.8606666922569275, 0.8656666874885559, 0.8653333187103271, 0.8676666617393494, 0.8686666488647461, 0.8713333606719971, 0.8740000128746033, 0.8736666440963745, 0.871999979019165, 0.871666669845581, 0.8726666569709778, 0.8773333430290222, 0.8733333349227905, 0.8759999871253967, 0.871666669845581, 0.875, 0.8763333559036255]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 5, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 2, 2, 0, 6, 5, 4, 8, 0, 0, 6], [0, 2, 0, 3, 5, 4], [16, 12], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 2], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 17, 11, 6, 2, 2, 1, 1, 0, 12, 6, 6, 5], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.pow(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), tf.math.negative(tf.math.negative(tf.math.divide_no_nan(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [4.704278945922852, 2.3478920459747314, 2.3150293827056885, 2.4272077083587646, 2.3477351665496826, 2.3613269329071045, 2.3955976963043213], "accuracy": [0.10117553919553757, 0.10645885765552521, 0.09893012791872025, 0.10527011007070541, 0.10540219396352768, 0.10500594228506088, 0.09959053993225098], "val_loss": [2.3242616653442383, 2.303818464279175, 2.3533780574798584, 2.3622841835021973, 2.3450698852539062, 2.3780641555786133, 2.416064739227295], "val_accuracy": [0.09066666662693024, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 5], [0, 2, 0, 3], [3, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 0, 2, 4, 2, 8], [0, 2, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 50, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 13, 7, 6, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3094141483306885, 2.31174898147583, 2.3288774490356445, 2.511488914489746, 3.729604959487915, 8.39268970489502, 21.517780303955078], "accuracy": [0.0956280529499054, 0.09259014576673508, 0.10381719470024109, 0.10249637067317963, 0.09813763201236725, 0.09787346422672272, 0.09813763201236725], "val_loss": [2.3089792728424072, 2.310253143310547, 2.3362371921539307, 2.6042933464050293, 4.424022674560547, 10.981762886047363, 27.83620834350586], "val_accuracy": [0.09300000220537186, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [10, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 2, 6, 8, 3, 8, 5, 9, 9], [1, 0], [99, 27, 6], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 0, 8, 6, 6, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 3, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 11, 9, 2, 3, 17, 9, 8, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.sqrt(tf.math.square(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 2, 6, 3, 1, 5, 5], [0, 1, 0, 2, 0, 1], [1, 39, 52], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 0, 8, 8], [3, 2, 0, 3], [16, 16], [0, 1], [0], [0], [30], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 6, 3, 8, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 0, 0, 3, 1, 2, 2], [1, 99, 96, 99, 61, 33]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 3, 9, 6, 3, 1, 2, 1, 1, 1, 17, 9, 8, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.math.square(tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.sqrt(grad)), tf.math.sqrt(beta)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, sigma))))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]