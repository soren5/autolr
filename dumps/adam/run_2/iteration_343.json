[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8625714182853699, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.221860647201538, 1.870108962059021, 1.400012493133545, 1.1022450923919678, 0.9582008123397827, 0.8550686836242676, 0.7800350785255432, 0.7318856120109558, 0.6953125596046448, 0.6677705645561218, 0.6344822645187378, 0.610508143901825, 0.591765284538269, 0.5672789216041565, 0.5587354302406311, 0.558173418045044, 0.5319253206253052, 0.5234798192977905, 0.5093371868133545, 0.510028064250946, 0.4971819519996643, 0.48215270042419434, 0.4712543487548828, 0.46660178899765015, 0.456633061170578, 0.4500230848789215, 0.4349673390388489, 0.4385260343551636, 0.430192232131958, 0.4173339903354645, 0.4159252941608429, 0.41401559114456177, 0.40177300572395325, 0.4021834135055542, 0.3911189138889313, 0.3918359875679016, 0.38004228472709656, 0.37361958622932434, 0.37568849325180054, 0.3665892481803894, 0.3613729178905487, 0.3569801151752472, 0.347182035446167, 0.3398212194442749, 0.3390982747077942, 0.3386950194835663, 0.3281364142894745, 0.3251186013221741, 0.31626465916633606, 0.31781160831451416, 0.31213295459747314, 0.30887675285339355, 0.3009214401245117, 0.2958400845527649, 0.2974768280982971, 0.29051777720451355, 0.286454439163208, 0.28367331624031067, 0.28035008907318115, 0.27259156107902527, 0.27392643690109253, 0.26726484298706055, 0.26543113589286804, 0.2541697323322296, 0.2542492151260376, 0.25507107377052307, 0.2433084100484848, 0.2466547191143036, 0.2392299771308899], "accuracy": [0.2767137885093689, 0.4744419455528259, 0.5638620853424072, 0.6193369626998901, 0.6613393425941467, 0.6999075412750244, 0.718399167060852, 0.7269845604896545, 0.7512878179550171, 0.7652885913848877, 0.7675340175628662, 0.7823272943496704, 0.7881389260292053, 0.802800178527832, 0.8016114234924316, 0.800818920135498, 0.8138951063156128, 0.8177255392074585, 0.8210275769233704, 0.8245938420295715, 0.8271034359931946, 0.8327829837799072, 0.834632158279419, 0.8385946154594421, 0.844010055065155, 0.8444063067436218, 0.8500858545303345, 0.8433496356010437, 0.8532558679580688, 0.8570862412452698, 0.8536521196365356, 0.8585391640663147, 0.8651432991027832, 0.86118084192276, 0.8631620407104492, 0.8628978729248047, 0.8676528930664062, 0.8698983192443848, 0.8685774803161621, 0.8716153502464294, 0.8755778670310974, 0.8762382864952087, 0.876370370388031, 0.878351628780365, 0.8831065893173218, 0.8761062026023865, 0.8841632604598999, 0.8824461698532104, 0.8865407705307007, 0.887201189994812, 0.8903711438179016, 0.8885219693183899, 0.8963148593902588, 0.8938053250312805, 0.893541157245636, 0.8996169567108154, 0.8981640338897705, 0.9010698795318604, 0.9010698795318604, 0.9021265506744385, 0.900409460067749, 0.9051644206047058, 0.9062210917472839, 0.9103156924247742, 0.909259021282196, 0.9133535623550415, 0.915070652961731, 0.9148064851760864, 0.9171839952468872], "val_loss": [2.0379650592803955, 1.5188766717910767, 1.052586317062378, 0.8384780287742615, 0.7456989884376526, 0.6877638101577759, 0.6401965022087097, 0.6021509766578674, 0.5713630318641663, 0.5500490069389343, 0.5280255079269409, 0.5129272937774658, 0.49735596776008606, 0.4823262095451355, 0.4770669639110565, 0.46929192543029785, 0.4595372676849365, 0.4486759901046753, 0.44365575909614563, 0.43738093972206116, 0.4352416694164276, 0.42637279629707336, 0.415090411901474, 0.41057926416397095, 0.4057569205760956, 0.39913538098335266, 0.39542821049690247, 0.3886435031890869, 0.38954949378967285, 0.38417211174964905, 0.37727174162864685, 0.3801409900188446, 0.3741346299648285, 0.37240689992904663, 0.36777156591415405, 0.3648097813129425, 0.358956515789032, 0.3589650094509125, 0.3572099208831787, 0.3539929986000061, 0.3476119041442871, 0.3532145917415619, 0.3451276123523712, 0.34424933791160583, 0.34191593527793884, 0.3370336592197418, 0.3369928002357483, 0.33339473605155945, 0.3298363983631134, 0.32986003160476685, 0.3280148506164551, 0.3278079032897949, 0.32211148738861084, 0.32938671112060547, 0.3217878043651581, 0.31931379437446594, 0.32377415895462036, 0.31784382462501526, 0.31692105531692505, 0.3206550180912018, 0.3173489272594452, 0.3234167993068695, 0.31649646162986755, 0.3126429319381714, 0.31189432740211487, 0.31109854578971863, 0.3132178485393524, 0.3089026212692261, 0.31466400623321533], "val_accuracy": [0.5363333225250244, 0.6510000228881836, 0.6853333115577698, 0.715666651725769, 0.7369999885559082, 0.7586666941642761, 0.7633333206176758, 0.7846666574478149, 0.796999990940094, 0.8043333292007446, 0.8140000104904175, 0.8196666836738586, 0.8263333439826965, 0.8299999833106995, 0.831333339214325, 0.8416666388511658, 0.840666651725769, 0.8426666855812073, 0.8413333296775818, 0.843666672706604, 0.8479999899864197, 0.8476666808128357, 0.8506666421890259, 0.856333315372467, 0.8600000143051147, 0.8576666712760925, 0.8619999885559082, 0.862666666507721, 0.8640000224113464, 0.8653333187103271, 0.8646666407585144, 0.8619999885559082, 0.8663333058357239, 0.862333357334137, 0.8646666407585144, 0.8703333139419556, 0.8713333606719971, 0.8693333268165588, 0.8709999918937683, 0.8726666569709778, 0.871999979019165, 0.8703333139419556, 0.8776666522026062, 0.8743333220481873, 0.878333330154419, 0.8799999952316284, 0.8790000081062317, 0.8820000290870667, 0.8776666522026062, 0.8799999952316284, 0.8820000290870667, 0.8823333382606506, 0.8849999904632568, 0.878333330154419, 0.8846666812896729, 0.8843333125114441, 0.8766666650772095, 0.8859999775886536, 0.8870000243186951, 0.8813333511352539, 0.8859999775886536, 0.8813333511352539, 0.8866666555404663, 0.8896666765213013, 0.8886666893959045, 0.8863333463668823, 0.8830000162124634, 0.8883333206176758, 0.8853333592414856]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [4, 2, 3, 5, 3, 5, 9], [0, 1, 0, 0], [16, 16, 40, 7], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 3, 4, 4, 3, 1, 1, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 11, 7, 4, 4, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030290603637695, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454, 0.10499999672174454]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 8, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [2, 2, 3, 3], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1], [6, 1, 3, 6, 9, 6, 4, 1, 4, 2, 8, 2, 1, 8, 9], [0, 0, 2, 3, 0, 0, 3, 4, 2, 0], [22, 99, 96, 99, 61, 1, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 0, 1, 0, 1, 1, 25, 15, 10, 7], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(beta), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.subtract(sigma, tf.math.sqrt(grad)), beta)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3, 3], [0, 2, 0, 3, 0], [16, 16, 89], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [6, 3, 3, 6, 4, 1, 4, 8, 4, 2, 6, 3, 0, 4, 6, 5, 0], [0, 0, 0, 3, 0, 0, 3, 1, 4, 0, 2, 3, 2, 5], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 11, 6, 5, 3, 2, 1, 1, 1, 31, 17, 14, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha), tf.math.add(tf.math.divide_no_nan(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, tf.math.negative(tf.math.pow(tf.math.divide_no_nan(tf.math.square(sigma), beta), tf.math.negative(grad))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 3, 0, 3, 3], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [0, 2, 3, 0, 3, 5, 4, 7, 9], [2, 2, 2, 3, 4], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 3, 6, 8, 1, 4, 1, 5, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 0, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 14, 9, 5, 1, 2, 1, 1, 1, 17, 9, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(beta, tf.math.square(beta))), tf.math.pow(beta, tf.math.add(grad, grad))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma), alpha)", "other_info": {"loss": [2.3055379390716553, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]