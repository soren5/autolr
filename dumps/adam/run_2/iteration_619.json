[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8514285683631897, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2224576473236084, 1.8700008392333984, 1.3977433443069458, 1.108999252319336, 0.9537503123283386, 0.8439744114875793, 0.7838214635848999, 0.7361325621604919, 0.6915951371192932, 0.6676285266876221, 0.6415561437606812, 0.6132422685623169, 0.5963900685310364, 0.5774492621421814, 0.5562741756439209, 0.5423126816749573, 0.5244062542915344, 0.5205031633377075, 0.5021166205406189, 0.4907360374927521, 0.48570922017097473, 0.4765705168247223, 0.46572327613830566, 0.4570733308792114, 0.4426150321960449, 0.4394920766353607, 0.4286762475967407, 0.4206826984882355, 0.42083242535591125, 0.4060215651988983, 0.40026140213012695, 0.3933855891227722, 0.40219253301620483, 0.3876497447490692, 0.380169153213501, 0.37744638323783875, 0.3786047697067261, 0.36632779240608215, 0.35970282554626465, 0.3570481538772583, 0.3487837612628937, 0.35163557529449463, 0.3346567451953888, 0.3323344886302948, 0.33607161045074463, 0.33148303627967834, 0.32674866914749146, 0.32027167081832886, 0.3215550482273102, 0.3217221796512604, 0.29857712984085083, 0.29498186707496643, 0.2977716326713562, 0.28870177268981934, 0.2892884910106659, 0.2864396274089813, 0.28025710582733154], "accuracy": [0.27684587240219116, 0.47893276810646057, 0.5658433437347412, 0.6111478209495544, 0.6671509742736816, 0.6984546184539795, 0.7206445932388306, 0.739928662776947, 0.7515519857406616, 0.7577598690986633, 0.7668735980987549, 0.778232753276825, 0.7857614755630493, 0.7877426743507385, 0.7976489067077637, 0.8062343001365662, 0.8124422430992126, 0.8156121969223022, 0.8186501264572144, 0.8226125836372375, 0.8274996876716614, 0.8269713521003723, 0.8329150676727295, 0.8364813327789307, 0.8426892161369324, 0.8429533839225769, 0.8477083444595337, 0.8461233377456665, 0.8481045961380005, 0.8541803956031799, 0.8541803956031799, 0.8626337051391602, 0.8541803956031799, 0.8626337051391602, 0.8614450097084045, 0.8595958352088928, 0.8669924736022949, 0.8667283058166504, 0.8705587387084961, 0.8721436858177185, 0.874389111995697, 0.873860776424408, 0.8813894987106323, 0.8757099509239197, 0.8761062026023865, 0.8779553771018982, 0.8791441321372986, 0.8840311765670776, 0.8842953443527222, 0.8853520154953003, 0.8924844861030579, 0.8883898854255676, 0.8922203183174133, 0.8943336606025696, 0.894069492816925, 0.8993527889251709, 0.8980319499969482], "val_loss": [2.0395121574401855, 1.5169566869735718, 1.0438251495361328, 0.8283939361572266, 0.7429279088973999, 0.6869012713432312, 0.6406137943267822, 0.6174347400665283, 0.5881403684616089, 0.5735162496566772, 0.5475406646728516, 0.5277033448219299, 0.515855073928833, 0.5081386566162109, 0.4911099374294281, 0.485015332698822, 0.471655935049057, 0.46751880645751953, 0.45998120307922363, 0.4494091868400574, 0.44400614500045776, 0.4446713924407959, 0.4364873170852661, 0.42704248428344727, 0.4257076680660248, 0.4182831943035126, 0.42041507363319397, 0.4104801118373871, 0.40647709369659424, 0.4112231135368347, 0.4015146493911743, 0.39834001660346985, 0.4049379527568817, 0.3956691026687622, 0.3988761901855469, 0.3867970407009125, 0.3862435817718506, 0.3879704177379608, 0.379677951335907, 0.3799337148666382, 0.3815937936306, 0.37249690294265747, 0.3784618377685547, 0.3759091794490814, 0.3706960380077362, 0.36898571252822876, 0.3675493896007538, 0.3678651452064514, 0.37519657611846924, 0.363834023475647, 0.3633078634738922, 0.3590158224105835, 0.3600529730319977, 0.36294129490852356, 0.359358549118042, 0.3582508862018585, 0.3551052510738373], "val_accuracy": [0.5326666831970215, 0.6646666526794434, 0.6779999732971191, 0.7106666564941406, 0.731333315372467, 0.7463333606719971, 0.7599999904632568, 0.7793333530426025, 0.7730000019073486, 0.7879999876022339, 0.7983333468437195, 0.8040000200271606, 0.8130000233650208, 0.8140000104904175, 0.8190000057220459, 0.8206666707992554, 0.8299999833106995, 0.8286666870117188, 0.8360000252723694, 0.8389999866485596, 0.8379999995231628, 0.8370000123977661, 0.847000002861023, 0.8463333249092102, 0.8506666421890259, 0.8533333539962769, 0.8503333330154419, 0.8546666502952576, 0.8556666374206543, 0.8556666374206543, 0.8583333492279053, 0.856333315372467, 0.8579999804496765, 0.8606666922569275, 0.859000027179718, 0.862666666507721, 0.8603333234786987, 0.859000027179718, 0.8659999966621399, 0.8636666536331177, 0.8619999885559082, 0.8650000095367432, 0.862666666507721, 0.8669999837875366, 0.8683333396911621, 0.8676666617393494, 0.8676666617393494, 0.8673333525657654, 0.8643333315849304, 0.8706666827201843, 0.8723333477973938, 0.8730000257492065, 0.871999979019165, 0.8693333268165588, 0.8713333606719971, 0.8696666955947876, 0.8706666827201843]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 1, 8, 3, 6, 1, 3, 7, 6, 0, 8, 7], [0, 1, 0, 2, 2, 1, 1, 2, 0, 1], [39, 39, 55], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 4, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 12, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 13, 10, 3, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 5], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(grad, grad)), tf.math.multiply(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.negative(alpha), grad), tf.math.sqrt(tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(grad, grad))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 1], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 65], [0, 1], [0], [0], [99], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 0, 6], [0, 0, 0, 3, 0, 0, 3, 1, 0, 0], [84, 39, 96, 99, 61, 1, 99]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 7, 4, 3, 2, 2, 1, 1, 1, 21, 11, 10, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), alpha)), tf.math.negative(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39, 27], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [9, 2, 3, 4, 3, 5], [0, 3, 3, 3], [16, 16], [1, 0], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 3, 3, 0, 0, 3, 1, 2, 4], [16, 99, 96, 99, 61, 25]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 1, 0, 1, 1, 1, 0, 1, 1, 21, 11, 10, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(sigma, sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [2, 2, 3, 0, 3], [0, 2, 0, 2], [39, 39], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 2, 8, 0, 3, 5], [0, 3, 0, 3], [16, 8], [0, 1], [0], [0], [38], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 3, 8], [0, 0, 0, 3, 0, 0, 4, 1, 2, 0], [16, 99, 96, 53, 61, 1]], "fitness": -0.08514285832643509, "mapping_values": [1, 8, 4, 4, 2, 5, 3, 2, 1, 2, 1, 1, 1, 16, 8, 8, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, alpha))", "other_info": {"loss": [2.3081934452056885, 2.306222915649414, 2.3059370517730713, 2.305363178253174, 2.304793357849121, 2.304265260696411], "accuracy": [0.09325055778026581, 0.08717474341392517, 0.08585391938686371, 0.08558975160121918, 0.08717474341392517, 0.0874389111995697], "val_loss": [2.3067147731781006, 2.305877447128296, 2.305178642272949, 2.3045778274536133, 2.30410099029541, 2.303738832473755], "val_accuracy": [0.08733333647251129, 0.07466666400432587, 0.06366666406393051, 0.06833333522081375, 0.07533333450555801, 0.08299999684095383]}}]