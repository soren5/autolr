[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8654285669326782, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2211406230926514, 1.8697466850280762, 1.393043041229248, 1.097732424736023, 0.9354612827301025, 0.8316317200660706, 0.7611770629882812, 0.7255428433418274, 0.688811719417572, 0.6579400300979614, 0.6359843015670776, 0.6095554828643799, 0.6001663208007812, 0.5850786566734314, 0.5676636099815369, 0.5465161800384521, 0.5319072604179382, 0.5226654410362244, 0.51434326171875, 0.49789759516716003, 0.4925503432750702, 0.47889068722724915, 0.4739382266998291, 0.4681670069694519, 0.45955365896224976, 0.45321398973464966, 0.4452008306980133, 0.43322980403900146, 0.42760953307151794, 0.42027372121810913, 0.41269949078559875, 0.4083111882209778, 0.3998227119445801, 0.39822718501091003, 0.38908594846725464, 0.3792760670185089, 0.3807726204395294, 0.3767865300178528, 0.36649230122566223, 0.36624619364738464, 0.35763195157051086, 0.3486497402191162, 0.3502672612667084, 0.3361837863922119, 0.34500619769096375, 0.33316144347190857, 0.32316938042640686, 0.3315708637237549, 0.31399640440940857, 0.3161136209964752, 0.30897748470306396], "accuracy": [0.27816668152809143, 0.4823669195175171, 0.5711266398429871, 0.6221106648445129, 0.6715096831321716, 0.7099458575248718, 0.7334566116333008, 0.7445515990257263, 0.746268630027771, 0.7671377658843994, 0.7684586048126221, 0.7839123010635376, 0.7803460359573364, 0.7893276810646057, 0.7922335267066956, 0.8005547523498535, 0.8087438941001892, 0.81548011302948, 0.8156121969223022, 0.8248580098152161, 0.828292191028595, 0.8325188159942627, 0.8347642421722412, 0.8339717388153076, 0.8341038227081299, 0.8374059200286865, 0.8437458872795105, 0.8471800088882446, 0.8519350290298462, 0.8540483713150024, 0.8553691506385803, 0.8602562546730042, 0.8577466607093811, 0.8599920868873596, 0.8644828796386719, 0.8698983192443848, 0.8669924736022949, 0.8663320541381836, 0.8689737319946289, 0.8671245574951172, 0.8735966086387634, 0.8790120482444763, 0.8776912093162537, 0.8805969953536987, 0.8767666220664978, 0.8831065893173218, 0.8893144726753235, 0.8823140859603882, 0.8869370222091675, 0.8881257176399231, 0.8906353116035461], "val_loss": [2.0409164428710938, 1.5213042497634888, 1.0445865392684937, 0.8353699445724487, 0.7497838735580444, 0.6889292001724243, 0.6446812152862549, 0.6132538318634033, 0.5890375375747681, 0.5666330456733704, 0.5475675463676453, 0.5383815765380859, 0.5169068574905396, 0.5124536752700806, 0.5008192658424377, 0.48595568537712097, 0.48094847798347473, 0.4696372449398041, 0.45849886536598206, 0.4496171474456787, 0.44318652153015137, 0.4387502372264862, 0.4278915524482727, 0.4264432489871979, 0.419163316488266, 0.42104142904281616, 0.4065416753292084, 0.4027954041957855, 0.39623764157295227, 0.3945489525794983, 0.3963927924633026, 0.3859374523162842, 0.38466793298721313, 0.38119226694107056, 0.3760870397090912, 0.3720477819442749, 0.3758420944213867, 0.3688197433948517, 0.36835700273513794, 0.36590710282325745, 0.3671937584877014, 0.36125242710113525, 0.36011508107185364, 0.3607077896595001, 0.3545748293399811, 0.35328051447868347, 0.3552694618701935, 0.3496237099170685, 0.356506884098053, 0.35019832849502563, 0.3458741009235382], "val_accuracy": [0.5366666913032532, 0.6589999794960022, 0.6853333115577698, 0.7106666564941406, 0.731333315372467, 0.7440000176429749, 0.7616666555404663, 0.7753333449363708, 0.7766666412353516, 0.7806666493415833, 0.7913333177566528, 0.8013333082199097, 0.8106666803359985, 0.800000011920929, 0.815666675567627, 0.8199999928474426, 0.8243333101272583, 0.8233333230018616, 0.8253333568572998, 0.8323333263397217, 0.8356666564941406, 0.8346666693687439, 0.8426666855812073, 0.8443333506584167, 0.840666651725769, 0.8386666774749756, 0.8486666679382324, 0.8483333587646484, 0.8543333411216736, 0.8516666889190674, 0.8523333072662354, 0.859666645526886, 0.8603333234786987, 0.8576666712760925, 0.8579999804496765, 0.8643333315849304, 0.8629999756813049, 0.8643333315849304, 0.8633333444595337, 0.862333357334137, 0.8683333396911621, 0.8703333139419556, 0.8683333396911621, 0.8663333058357239, 0.8700000047683716, 0.8713333606719971, 0.8693333268165588, 0.8706666827201843, 0.8683333396911621, 0.8703333139419556, 0.8696666955947876]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 5, 0, 3, 7], [0, 1, 0, 2], [90, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 2, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [79], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 1, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 2, 6, 3, 3, 2, 2, 1, 1, 1, 16, 8, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(sigma, alpha)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [2.3031225204467773, 3.874522405826829e+19, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.10038304328918457, 0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025851249694824, 1.970332396117033e+17, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 9, 5], [2, 1, 0, 2], [44, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2], [0, 2, 2, 3], [57, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 9, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 12, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 1, 0, 1, 1, 2, 1, 1, 1, 12, 7, 5, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), grad), alpha)), lambda shape,  alpha, beta, grad: tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 6, 3, 2, 4, 9, 4, 4], [0, 1, 0, 0, 3, 2, 2, 0], [39, 19, 82, 89, 85], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 3, 0, 3, 5], [1, 2, 3, 3], [16, 45], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], [6, 1, 3, 6, 2, 1, 4, 1, 4, 2, 8], [1, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 63, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 10, 8, 5, 1, 0, 1, 0, 2, 1, 1, 1, 17, 8, 9, 4], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.pow(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), grad), tf.math.pow(tf.math.pow(grad, grad), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 2, 0, 3], [0, 1, 0, 2], [78, 39], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 8, 3, 2], [0, 2, 0, 0], [16, 16], [1, 1], [0], [0], [99], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [6, 3, 2, 6, 8, 1, 4, 1, 4, 2, 8], [0, 4, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.07971428334712982, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), alpha), tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [69690328.0, 61675400.0, 187722368.0, 333038368.0, 872556544.0, 511316832.0, 385099104.0, 360031872.0, 495992608.0], "accuracy": [0.09179764986038208, 0.059173159301280975, 0.06498481333255768, 0.07594769448041916, 0.09153348207473755, 0.07713644206523895, 0.06775855273008347, 0.07700435817241669, 0.07885351777076721], "val_loss": [34005892.0, 161489456.0, 227769760.0, 956733696.0, 436076896.0, 282683296.0, 254057200.0, 304787488.0, 347982080.0], "val_accuracy": [0.03500000014901161, 0.0416666679084301, 0.05666666850447655, 0.0846666693687439, 0.070333331823349, 0.06499999761581421, 0.06133333221077919, 0.059333331882953644, 0.057999998331069946]}, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 1, 0, 1, 1, 16, 8, 8, 4], "tree_depth": 12}]