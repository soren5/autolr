[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8488571643829346, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2242143154144287, 1.8701125383377075, 1.4003537893295288, 1.1178812980651855, 0.9569001197814941, 0.8416004180908203, 0.7775127291679382, 0.72713702917099, 0.683707594871521, 0.6586812138557434, 0.6364774703979492, 0.6169705390930176, 0.5949797034263611, 0.5763424634933472, 0.5691534876823425, 0.5415521860122681, 0.5354984998703003, 0.5243604183197021, 0.5046765208244324, 0.4936622381210327, 0.48905277252197266, 0.4754919707775116, 0.4669063091278076, 0.46046122908592224, 0.4547320306301117, 0.450593501329422, 0.43850019574165344, 0.43085381388664246, 0.4271158277988434, 0.41277480125427246, 0.41123250126838684, 0.4058240056037903, 0.3970155715942383, 0.40033477544784546, 0.38799697160720825, 0.3830440044403076, 0.37792980670928955, 0.3700544536113739, 0.36923086643218994, 0.35541120171546936, 0.35440975427627563, 0.3439416289329529, 0.3485214114189148, 0.3394244313240051, 0.3264552056789398, 0.3322719931602478, 0.3286013901233673, 0.325326144695282, 0.32012683153152466, 0.31842491030693054, 0.3053414523601532, 0.3034365773200989, 0.30512481927871704, 0.2961737811565399, 0.2971894145011902, 0.2899389863014221, 0.28280121088027954, 0.2838083505630493, 0.27411898970603943, 0.27017942070961, 0.2714344263076782], "accuracy": [0.270109623670578, 0.483819842338562, 0.5708624720573425, 0.6081098914146423, 0.6547351479530334, 0.7022850513458252, 0.7202483415603638, 0.7363624572753906, 0.7549861073493958, 0.7548540234565735, 0.7613261342048645, 0.7721568942070007, 0.7804781198501587, 0.7910447716712952, 0.7930260300636292, 0.8037247657775879, 0.8090080618858337, 0.8140271902084351, 0.8193105459213257, 0.8232730031013489, 0.8264430165290833, 0.8321225643157959, 0.833179235458374, 0.8367455005645752, 0.834632158279419, 0.8370096683502197, 0.844010055065155, 0.8475762605667114, 0.8474441766738892, 0.8524633646011353, 0.8536521196365356, 0.8582749962806702, 0.8584070801734924, 0.8565579056739807, 0.8607845902442932, 0.8594637513160706, 0.8618412613868713, 0.869502067565918, 0.8681812286376953, 0.8749174475669861, 0.8767666220664978, 0.8768987059593201, 0.8775591254234314, 0.8795403242111206, 0.8823140859603882, 0.8803328275680542, 0.880729079246521, 0.8808611631393433, 0.8836349248886108, 0.8868049383163452, 0.8912957310676575, 0.8912957310676575, 0.8926165699958801, 0.8930128216743469, 0.8926165699958801, 0.89988112449646, 0.8971073627471924, 0.9006736278533936, 0.9046360850334167, 0.8996169567108154, 0.9005415439605713], "val_loss": [2.0390377044677734, 1.5190412998199463, 1.0428712368011475, 0.837760329246521, 0.7375766634941101, 0.6797184944152832, 0.6351578831672668, 0.5968258380889893, 0.5735990405082703, 0.5475063323974609, 0.5567169189453125, 0.5261887907981873, 0.5063623189926147, 0.497903972864151, 0.4862968325614929, 0.4765305519104004, 0.46725019812583923, 0.4663470983505249, 0.4536725580692291, 0.45035749673843384, 0.44193005561828613, 0.4374105930328369, 0.4350695312023163, 0.4290074408054352, 0.42589396238327026, 0.4244873821735382, 0.4141501486301422, 0.415736585855484, 0.4071960747241974, 0.40540799498558044, 0.4060032069683075, 0.40062016248703003, 0.4006604552268982, 0.3991515338420868, 0.39572370052337646, 0.39178231358528137, 0.38682234287261963, 0.3830292224884033, 0.38318943977355957, 0.38142362236976624, 0.38534045219421387, 0.380541056394577, 0.37504085898399353, 0.37315621972084045, 0.3711128234863281, 0.36968740820884705, 0.3786786198616028, 0.3657519221305847, 0.36653396487236023, 0.36686971783638, 0.36336714029312134, 0.36481380462646484, 0.36185383796691895, 0.3609541058540344, 0.3604036569595337, 0.3560590147972107, 0.35743725299835205, 0.3583328127861023, 0.3567122519016266, 0.36141476035118103, 0.35641756653785706], "val_accuracy": [0.5356666445732117, 0.6626666784286499, 0.6890000104904175, 0.7146666646003723, 0.7433333396911621, 0.762666642665863, 0.7799999713897705, 0.7906666398048401, 0.7953333258628845, 0.8100000023841858, 0.8050000071525574, 0.8220000267028809, 0.8303333520889282, 0.8293333053588867, 0.8376666903495789, 0.8393333554267883, 0.843999981880188, 0.8453333377838135, 0.8453333377838135, 0.8483333587646484, 0.8479999899864197, 0.8553333282470703, 0.8526666760444641, 0.8543333411216736, 0.8619999885559082, 0.8556666374206543, 0.8613333106040955, 0.859000027179718, 0.8600000143051147, 0.8646666407585144, 0.8653333187103271, 0.8653333187103271, 0.8646666407585144, 0.8636666536331177, 0.8693333268165588, 0.8690000176429749, 0.8723333477973938, 0.8763333559036255, 0.8713333606719971, 0.8763333559036255, 0.874666690826416, 0.875, 0.8773333430290222, 0.875333309173584, 0.8793333172798157, 0.8763333559036255, 0.8769999742507935, 0.8799999952316284, 0.8816666603088379, 0.8809999823570251, 0.8803333044052124, 0.8820000290870667, 0.8803333044052124, 0.8799999952316284, 0.8830000162124634, 0.8849999904632568, 0.8840000033378601, 0.8840000033378601, 0.8840000033378601, 0.8836666941642761, 0.8843333125114441]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 4, 2, 2, 5], [0, 1, 0, 1, 0, 0], [39, 39, 43, 18], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [4], [99], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 3, 4, 0, 1, 4, 1, 4, 2, 8], [0, 2, 4, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 4, 1, 0, 1, 1, 2, 1, 1, 0, 16, 8, 8, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.math.negative(grad))), tf.math.subtract(sigma, grad)), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 5, 5], [0, 2, 0, 0], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 1, 6, 9], [0, 0, 0, 3, 0, 0, 3, 1, 1, 0, 0], [16, 99, 96, 99, 61, 1, 72, 19]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 8, 5, 3, 2, 2, 1, 1, 1, 25, 14, 11, 8], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.subtract(alpha, alpha))), tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 6, 0, 3, 2, 8, 6, 3, 6, 0, 2, 4, 7], [0, 1, 0, 2, 3, 1, 2, 1, 1, 0, 2], [39, 39, 94], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [3], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 2, 2, 8], [3, 0, 0, 3, 0, 1, 1, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.0908571407198906, "mapping_values": [1, 25, 14, 11, 3, 2, 1, 1, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.divide_no_nan(grad, alpha), grad)))), tf.math.negative(tf.math.add(tf.math.pow(alpha, alpha), tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3107688426971436, 2.3108909130096436, 2.308579444885254, 2.308640480041504, 2.310544013977051, 2.309333086013794], "accuracy": [0.08875974267721176, 0.09047681838274002, 0.09219389408826828, 0.09259014576673508, 0.09259014576673508, 0.09126931428909302], "val_loss": [2.3095483779907227, 2.3095483779907227, 2.3095483779907227, 2.3095483779907227, 2.3095483779907227, 2.3095483779907227], "val_accuracy": [0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 3, 0, 3, 3, 9], [0, 1, 0, 2, 1], [39, 39, 51], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [1, 2, 3, 2, 3, 5, 4, 6, 9], [0, 2, 0, 3, 1, 5, 2], [16, 16, 35], [0, 1, 1], [2], [0, 3], [99], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 3, 0, 1, 4, 2, 8], [3, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 54, 7, 1]], "fitness": -0.09000000357627869, "mapping_values": [1, 12, 7, 5, 3, 16, 9, 7, 3, 3, 1, 2, 1, 17, 9, 8, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(alpha), tf.math.multiply(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), grad))), alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), alpha), tf.math.pow(tf.math.divide_no_nan(grad, beta), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), sigma))), alpha)", "other_info": {"loss": [2.309636116027832, 2.3098342418670654, 2.310215950012207, 2.3106906414031982, 2.3101327419281006, 2.30981183052063], "accuracy": [0.09021265059709549, 0.09668471664190292, 0.09259014576673508, 0.09866596013307571, 0.09245806187391281, 0.08994849026203156], "val_loss": [2.308640241622925, 2.308640241622925, 2.308640241622925, 2.308640241622925, 2.308640241622925, 2.308640241622925], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]