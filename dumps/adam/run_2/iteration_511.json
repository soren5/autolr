[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8842856884002686, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224581241607666, 1.866798996925354, 1.3955726623535156, 1.0934231281280518, 0.9318428635597229, 0.8298172354698181, 0.7639771699905396, 0.7302770018577576, 0.6817464828491211, 0.6497436165809631, 0.6295565962791443, 0.601318895816803, 0.5892459750175476, 0.5623407363891602, 0.5538555383682251, 0.5260912179946899, 0.5217671990394592, 0.5093089938163757, 0.4997814893722534, 0.48389601707458496, 0.4747706353664398, 0.4629616141319275, 0.45725616812705994, 0.45061957836151123, 0.4376509189605713, 0.43018537759780884, 0.42676788568496704, 0.42191842198371887, 0.41274821758270264, 0.39971792697906494, 0.4030381143093109, 0.3929717242717743, 0.3849363625049591, 0.3769908845424652, 0.37414872646331787, 0.3709236681461334, 0.3636323809623718, 0.35525956749916077, 0.34835395216941833, 0.3452734053134918, 0.3441770672798157, 0.3346450924873352, 0.33720672130584717, 0.3263608515262604, 0.3225192725658417, 0.3152485191822052, 0.31546828150749207, 0.3123907148838043, 0.31002792716026306, 0.3026135265827179, 0.2951596975326538, 0.2969729006290436, 0.2890647351741791, 0.28678077459335327, 0.28028127551078796, 0.2732618749141693, 0.2770889401435852, 0.2671794593334198, 0.26861733198165894, 0.2677628695964813, 0.26346921920776367], "accuracy": [0.2735437750816345, 0.49689605832099915, 0.5649187564849854, 0.6194690465927124, 0.670320987701416, 0.7071720957756042, 0.7275128960609436, 0.7339849472045898, 0.7466648817062378, 0.7650244235992432, 0.7741381525993347, 0.7784969210624695, 0.7862898111343384, 0.8010830879211426, 0.8001585006713867, 0.8086118102073669, 0.8084797263145447, 0.8186501264572144, 0.821820080280304, 0.82683926820755, 0.8276317715644836, 0.8363492488861084, 0.8348963260650635, 0.8422929644584656, 0.8437458872795105, 0.8539162874221802, 0.8506141901016235, 0.8521991968154907, 0.854708731174469, 0.8598600029945374, 0.8609166741371155, 0.8636903762817383, 0.8652753829956055, 0.8679170608520508, 0.8709549307823181, 0.872407853603363, 0.8737286925315857, 0.8735966086387634, 0.8767666220664978, 0.8796724081039429, 0.878879964351654, 0.8817857503890991, 0.8782195448875427, 0.8819178342819214, 0.8877294659614563, 0.8874653577804565, 0.8893144726753235, 0.8905032277107239, 0.8865407705307007, 0.8920882344245911, 0.8975036144256592, 0.8948619961738586, 0.8967111110687256, 0.8965790271759033, 0.9009377956390381, 0.9043719172477722, 0.9010698795318604, 0.906749427318573, 0.9037115573883057, 0.90423983335495, 0.9058248400688171], "val_loss": [2.0435290336608887, 1.5189396142959595, 1.0516743659973145, 0.8399912714958191, 0.7416529059410095, 0.678808867931366, 0.6381445527076721, 0.6037681698799133, 0.5782030820846558, 0.5478116869926453, 0.534210205078125, 0.5272560715675354, 0.5000512003898621, 0.49646517634391785, 0.4831455945968628, 0.47435176372528076, 0.45983409881591797, 0.45598259568214417, 0.44453194737434387, 0.43697839975357056, 0.4316769242286682, 0.4337497651576996, 0.4161163866519928, 0.4161047339439392, 0.4154047966003418, 0.40659818053245544, 0.40326008200645447, 0.3993653655052185, 0.3924619257450104, 0.39085569977760315, 0.3860655128955841, 0.38260653614997864, 0.38140758872032166, 0.38606587052345276, 0.37566739320755005, 0.3758164346218109, 0.37075701355934143, 0.3714748024940491, 0.36498233675956726, 0.3646821975708008, 0.36130326986312866, 0.3578786253929138, 0.3612002730369568, 0.356819212436676, 0.3628595471382141, 0.3548620939254761, 0.34863004088401794, 0.3535069227218628, 0.3523302376270294, 0.34950289130210876, 0.34411758184432983, 0.34538933634757996, 0.34687116742134094, 0.3420603573322296, 0.34424352645874023, 0.3475662171840668, 0.338030606508255, 0.33991339802742004, 0.34076616168022156, 0.3372027575969696, 0.3406139612197876], "val_accuracy": [0.5836666822433472, 0.6576666831970215, 0.6836666464805603, 0.7049999833106995, 0.7386666536331177, 0.7559999823570251, 0.7633333206176758, 0.7770000100135803, 0.7933333516120911, 0.8036666512489319, 0.8080000281333923, 0.8033333420753479, 0.8190000057220459, 0.8206666707992554, 0.8303333520889282, 0.8220000267028809, 0.8330000042915344, 0.8353333473205566, 0.8393333554267883, 0.8479999899864197, 0.8486666679382324, 0.8396666646003723, 0.8533333539962769, 0.8550000190734863, 0.8483333587646484, 0.8576666712760925, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8606666922569275, 0.8610000014305115, 0.8663333058357239, 0.8643333315849304, 0.8629999756813049, 0.8673333525657654, 0.8656666874885559, 0.8676666617393494, 0.8683333396911621, 0.871666669845581, 0.8730000257492065, 0.8706666827201843, 0.8733333349227905, 0.8683333396911621, 0.875, 0.8709999918937683, 0.8743333220481873, 0.8793333172798157, 0.8773333430290222, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8809999823570251, 0.878000020980835, 0.8786666393280029, 0.8793333172798157, 0.8830000162124634, 0.8813333511352539, 0.8813333511352539, 0.8799999952316284, 0.8806666731834412, 0.8823333382606506]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8477143049240112, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2253572940826416, 1.8745609521865845, 1.4038842916488647, 1.0908455848693848, 0.9400572180747986, 0.8465982675552368, 0.7716014981269836, 0.7192022204399109, 0.6816285848617554, 0.6558025479316711, 0.6276634931564331, 0.6082890033721924, 0.5802667737007141, 0.5710689425468445, 0.5591999888420105, 0.5414016842842102, 0.5279136300086975, 0.5129250884056091, 0.5009329915046692, 0.4848012626171112, 0.47316497564315796, 0.46626079082489014, 0.45833727717399597, 0.451371431350708, 0.45006847381591797, 0.436157763004303, 0.43025633692741394, 0.41908323764801025, 0.4093829095363617, 0.40312808752059937, 0.39877480268478394, 0.3927614390850067, 0.3909003734588623, 0.3829953670501709, 0.3746771216392517, 0.3756515085697174, 0.36265864968299866, 0.3616136908531189, 0.35504627227783203, 0.3487619161605835, 0.3462912440299988, 0.3349648416042328, 0.3336142599582672, 0.32941561937332153, 0.3217490315437317, 0.32104870676994324, 0.31287121772766113, 0.309060662984848, 0.3089948892593384, 0.30774348974227905, 0.30560246109962463, 0.2892124652862549, 0.2873937785625458, 0.28292757272720337, 0.27924463152885437, 0.2747613191604614, 0.2717953622341156, 0.26941806077957153], "accuracy": [0.2709021270275116, 0.49372607469558716, 0.5550125241279602, 0.6254127621650696, 0.6642451286315918, 0.691850483417511, 0.7217012047767639, 0.7392682433128357, 0.750231146812439, 0.7621186375617981, 0.7703077793121338, 0.7777044177055359, 0.7861577272415161, 0.7921014428138733, 0.7994980812072754, 0.8090080618858337, 0.8095363974571228, 0.8178576231002808, 0.8230088353157043, 0.8298771381378174, 0.8319904804229736, 0.8360850811004639, 0.8359529972076416, 0.8400475382804871, 0.8409721255302429, 0.8465195894241333, 0.8485008478164673, 0.8510104417800903, 0.8549728989601135, 0.8553691506385803, 0.856689989566803, 0.8585391640663147, 0.8623695969581604, 0.8673887252807617, 0.8647470474243164, 0.86553955078125, 0.8688416481018066, 0.8688416481018066, 0.8741249442100525, 0.8778232932090759, 0.8747853636741638, 0.8790120482444763, 0.8792761564254761, 0.8821820020675659, 0.884691596031189, 0.8865407705307007, 0.8862766027450562, 0.8878615498542786, 0.8883898854255676, 0.8923524022102356, 0.8901069760322571, 0.8967111110687256, 0.8961827754974365, 0.8990886211395264, 0.8975036144256592, 0.8986923694610596, 0.9002773761749268, 0.9062210917472839], "val_loss": [2.038867712020874, 1.5158467292785645, 1.035157561302185, 0.8233580589294434, 0.7361802458763123, 0.6887269020080566, 0.6476238965988159, 0.6134818196296692, 0.5949693322181702, 0.5748124718666077, 0.5545363426208496, 0.5395627617835999, 0.5258102416992188, 0.5179215669631958, 0.5069989562034607, 0.5013617277145386, 0.4913277328014374, 0.47978541254997253, 0.47276899218559265, 0.4640478491783142, 0.4567742645740509, 0.45395809412002563, 0.44850361347198486, 0.44796061515808105, 0.446992427110672, 0.43758267164230347, 0.4351344108581543, 0.42980900406837463, 0.4245663583278656, 0.42456987500190735, 0.41747355461120605, 0.4175824522972107, 0.4190205931663513, 0.4129773676395416, 0.4079335629940033, 0.4103991687297821, 0.40801334381103516, 0.4003250300884247, 0.4003157913684845, 0.4004605710506439, 0.39695313572883606, 0.395091712474823, 0.39838680624961853, 0.39675500988960266, 0.3947538137435913, 0.3920140862464905, 0.3886215090751648, 0.394868403673172, 0.3866315186023712, 0.38461124897003174, 0.39085954427719116, 0.38350412249565125, 0.3802008330821991, 0.3829726576805115, 0.37935909628868103, 0.3829740285873413, 0.376863569021225, 0.380872517824173], "val_accuracy": [0.5363333225250244, 0.653333306312561, 0.6866666674613953, 0.7160000205039978, 0.7406666874885559, 0.7519999742507935, 0.7643333077430725, 0.7756666541099548, 0.7900000214576721, 0.7926666736602783, 0.8029999732971191, 0.8119999766349792, 0.8130000233650208, 0.8136666417121887, 0.8209999799728394, 0.8230000138282776, 0.8289999961853027, 0.8330000042915344, 0.8309999704360962, 0.8379999995231628, 0.8376666903495789, 0.8423333168029785, 0.8403333425521851, 0.8420000076293945, 0.8383333086967468, 0.8479999899864197, 0.847000002861023, 0.8513333201408386, 0.8489999771118164, 0.8523333072662354, 0.8529999852180481, 0.8546666502952576, 0.8503333330154419, 0.8576666712760925, 0.8579999804496765, 0.8560000061988831, 0.856333315372467, 0.859333336353302, 0.8606666922569275, 0.8560000061988831, 0.8610000014305115, 0.8616666793823242, 0.8579999804496765, 0.8606666922569275, 0.8566666841506958, 0.8679999709129333, 0.8659999966621399, 0.8603333234786987, 0.8650000095367432, 0.8693333268165588, 0.859333336353302, 0.8686666488647461, 0.8700000047683716, 0.8686666488647461, 0.8700000047683716, 0.8696666955947876, 0.8693333268165588, 0.8673333525657654]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 5], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 3, 0, 5, 5], [1, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 0, 3, 6, 8, 4, 4, 1, 4, 2, 8, 3], [0, 4, 0, 3, 0, 0, 3, 0, 2, 0], [71, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 8, 5, 3, 1, 2, 1, 1, 1, 22, 12, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(alpha), beta), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), sigma), tf.math.sqrt(tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), beta)))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 2, 0, 3, 3, 8], [0, 1, 0, 2, 1], [39, 39], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 5, 4, 4], [0, 2, 0, 3, 0, 5], [16, 16, 78], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 9, 6, 8, 1, 4, 8, 3, 2, 8], [0, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 45, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 2, 14, 8, 6, 3, 2, 1, 1, 1, 12, 7, 5, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 3, 8, 1, 4, 2, 1, 2, 8], [0, 0, 0, 0, 0, 0, 3, 1, 2, 0], [16, 58, 96, 99, 61, 1, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 21, 11, 10, 7], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 3, 3, 0, 3], [0, 1, 1, 2], [10, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [3, 2, 3, 3], [16, 16], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 6, 2, 7, 4, 3, 5, 2, 3, 4, 7, 8, 5, 2, 0, 2, 9, 3, 3], [0, 3, 0, 0, 7, 1, 4, 2, 1, 7, 2, 5, 1], [99, 65, 86, 36], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1], [6, 3, 8, 6, 9, 1, 2, 1, 4, 2, 8], [1, 0, 0, 4, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 96]], "fitness": -0.0925714299082756, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 0, 32, 19, 13, 4, 16, 9, 7, 5], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(grad), beta), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(sigma, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(tf.math.multiply(tf.math.pow(alpha, tf.math.add(tf.math.sqrt(tf.math.square(tf.math.add(tf.math.negative(grad), beta))), alpha)), tf.math.add(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(beta, tf.math.multiply(grad, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(alpha), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), sigma)", "other_info": {"loss": [2.309718608856201, 2.310353994369507, 2.31040620803833, 2.3106131553649902, 2.309126615524292, 2.310889482498169], "accuracy": [0.09140139818191528, 0.09074098616838455, 0.09536388516426086, 0.08889182657003403, 0.09206181764602661, 0.08809932321310043], "val_loss": [2.308119058609009, 2.308119058609009, 2.308119058609009, 2.308119058609009, 2.308119058609009, 2.308119058609009], "val_accuracy": [0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862]}}]