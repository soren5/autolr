[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.224080801010132, 1.8682928085327148, 1.3979066610336304, 1.1041873693466187, 0.9451974034309387, 0.8360878229141235, 0.7751023769378662, 0.729066014289856, 0.6826299428939819, 0.6508670449256897, 0.6238046884536743, 0.6097503304481506, 0.585521399974823, 0.5728465914726257, 0.555942952632904, 0.5316925644874573, 0.5235386490821838, 0.5162447690963745, 0.5020295977592468, 0.5024400353431702, 0.4802166521549225, 0.4755152761936188, 0.46778932213783264, 0.45205312967300415, 0.44790565967559814, 0.4411901831626892, 0.43003571033477783, 0.43001148104667664, 0.4199477732181549, 0.41049253940582275, 0.40412265062332153, 0.39771658182144165, 0.3971492052078247, 0.38809987902641296, 0.38248589634895325, 0.38595423102378845, 0.37272557616233826, 0.37531688809394836, 0.36150768399238586, 0.35245010256767273, 0.3548196852207184, 0.3530884385108948, 0.3393357992172241, 0.3381390869617462, 0.3397563397884369, 0.32853949069976807, 0.32326024770736694, 0.3298868238925934, 0.3192327916622162, 0.3180619180202484, 0.30763912200927734, 0.31001853942871094, 0.3026682436466217, 0.3018588721752167, 0.2947835326194763, 0.29637444019317627, 0.28445982933044434], "accuracy": [0.27143046259880066, 0.4881785809993744, 0.5696737766265869, 0.6123365759849548, 0.6642451286315918, 0.7004358768463135, 0.7214370369911194, 0.7375511527061462, 0.7475894689559937, 0.7614582180976868, 0.7703077793121338, 0.7786290049552917, 0.7866860628128052, 0.7887993454933167, 0.7997622489929199, 0.8078193068504333, 0.8168009519577026, 0.8121780753135681, 0.8228767514228821, 0.8193105459213257, 0.8300092220306396, 0.8296129703521729, 0.829216718673706, 0.8393871188163757, 0.8378021121025085, 0.842028796672821, 0.8467837572097778, 0.8475762605667114, 0.8499537706375122, 0.8514066934585571, 0.8549728989601135, 0.8561616539955139, 0.8553691506385803, 0.86118084192276, 0.86553955078125, 0.8601241707801819, 0.8646149635314941, 0.8621054291725159, 0.8712190985679626, 0.8734645247459412, 0.8710870146751404, 0.8709549307823181, 0.8798044919967651, 0.8798044919967651, 0.8778232932090759, 0.8819178342819214, 0.8828424215316772, 0.8821820020675659, 0.8842953443527222, 0.8848236799240112, 0.8874653577804565, 0.8905032277107239, 0.8906353116035461, 0.8889182209968567, 0.889578640460968, 0.8911636471748352, 0.89552241563797], "val_loss": [2.0380020141601562, 1.51716947555542, 1.0498803853988647, 0.8399129509925842, 0.7418472766876221, 0.6839371919631958, 0.6368310451507568, 0.6072779893875122, 0.5797070860862732, 0.5544748902320862, 0.5407164096832275, 0.5279650688171387, 0.510033905506134, 0.5028560161590576, 0.49011290073394775, 0.47757717967033386, 0.47359147667884827, 0.46203744411468506, 0.4574417173862457, 0.4544040560722351, 0.44401341676712036, 0.44179821014404297, 0.4397037625312805, 0.4303683340549469, 0.4249401390552521, 0.4220227599143982, 0.41809430718421936, 0.41083964705467224, 0.4073309600353241, 0.4034615755081177, 0.4029974639415741, 0.3948487639427185, 0.3979828655719757, 0.39264336228370667, 0.38862287998199463, 0.38609081506729126, 0.3861488401889801, 0.3881515562534332, 0.3769132196903229, 0.38063469529151917, 0.3748309016227722, 0.37731367349624634, 0.3708195090293884, 0.3743346631526947, 0.36984896659851074, 0.3650960624217987, 0.3680661618709564, 0.3657494783401489, 0.3638531565666199, 0.3625354468822479, 0.3651450574398041, 0.3593406677246094, 0.3608526587486267, 0.3578433692455292, 0.359562486410141, 0.35294678807258606, 0.358186274766922], "val_accuracy": [0.5320000052452087, 0.6536666750907898, 0.6790000200271606, 0.7020000219345093, 0.734000027179718, 0.753000020980835, 0.765333354473114, 0.7760000228881836, 0.7879999876022339, 0.7973333597183228, 0.7983333468437195, 0.8019999861717224, 0.812333345413208, 0.8186666369438171, 0.8256666660308838, 0.8273333311080933, 0.8293333053588867, 0.8410000205039978, 0.8399999737739563, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102, 0.8429999947547913, 0.843666672706604, 0.8533333539962769, 0.8546666502952576, 0.8516666889190674, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8583333492279053, 0.8606666922569275, 0.8600000143051147, 0.8636666536331177, 0.8659999966621399, 0.8673333525657654, 0.8650000095367432, 0.8653333187103271, 0.871666669845581, 0.8663333058357239, 0.8693333268165588, 0.8713333606719971, 0.875, 0.8683333396911621, 0.8686666488647461, 0.8733333349227905, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.8733333349227905, 0.8723333477973938, 0.8756666779518127, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8731428384780884, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2231740951538086, 1.8695741891860962, 1.3913359642028809, 1.0922437906265259, 0.937745213508606, 0.8244162201881409, 0.7719298601150513, 0.7126451134681702, 0.6911507248878479, 0.6624366044998169, 0.6380630135536194, 0.6151994466781616, 0.5901545882225037, 0.5836214423179626, 0.5692223906517029, 0.5503207445144653, 0.5414021611213684, 0.5230228900909424, 0.516477644443512, 0.5109028816223145, 0.4975239038467407, 0.48436158895492554, 0.4736367464065552, 0.4640941619873047, 0.4577723443508148, 0.4461696147918701, 0.44210249185562134, 0.431701123714447, 0.4204157590866089, 0.42018643021583557, 0.41309767961502075, 0.4119681715965271, 0.4071284532546997, 0.4024887681007385, 0.3924550414085388, 0.39027348160743713, 0.382760614156723, 0.37211620807647705, 0.3697143495082855, 0.36295974254608154, 0.357781320810318, 0.3500271141529083, 0.35326018929481506, 0.34560203552246094, 0.34445104002952576, 0.34029433131217957, 0.3375086486339569, 0.33024999499320984, 0.3231140971183777, 0.3195367753505707, 0.3125911355018616, 0.30721956491470337, 0.30242592096328735, 0.2974242866039276, 0.30032119154930115, 0.29398033022880554, 0.29062357544898987, 0.2833412289619446, 0.2798818051815033, 0.27832576632499695, 0.2752443253993988, 0.27103909850120544, 0.2670305371284485, 0.260942667722702, 0.25882717967033386, 0.2550704777240753, 0.2486831545829773, 0.25045302510261536, 0.2531064748764038, 0.24307896196842194, 0.2361648976802826, 0.23060131072998047], "accuracy": [0.2896578907966614, 0.49214106798171997, 0.5708624720573425, 0.6123365759849548, 0.6650376319885254, 0.7053229212760925, 0.7197200059890747, 0.7366266250610352, 0.7456082701683044, 0.7594769597053528, 0.7677981853485107, 0.7737419009208679, 0.7884030938148499, 0.7923656105995178, 0.7901201844215393, 0.8031964302062988, 0.8064984679222107, 0.8107251524925232, 0.8150838613510132, 0.8120459914207458, 0.8214238286018372, 0.8230088353157043, 0.8277638554573059, 0.8309338092803955, 0.837141752243042, 0.8416325449943542, 0.8424250483512878, 0.8441421389579773, 0.8516708612442017, 0.8479725122451782, 0.8551049828529358, 0.8506141901016235, 0.8569541573524475, 0.8565579056739807, 0.8598600029945374, 0.8602562546730042, 0.86553955078125, 0.8614450097084045, 0.8658037185668945, 0.871879518032074, 0.874389111995697, 0.872407853603363, 0.8706908226013184, 0.8751816153526306, 0.8739928603172302, 0.8742570281028748, 0.8804649114608765, 0.8804649114608765, 0.8831065893173218, 0.8850878477096558, 0.8879936337471008, 0.8865407705307007, 0.8907673954963684, 0.893541157245636, 0.8901069760322571, 0.8899748921394348, 0.8953903317451477, 0.8993527889251709, 0.8981640338897705, 0.8972394466400146, 0.9019944667816162, 0.9033153057098389, 0.9021265506744385, 0.9045040011405945, 0.9038436412811279, 0.9088627696037292, 0.9085986018180847, 0.9096552729606628, 0.9059569239616394, 0.9115044474601746, 0.913617730140686, 0.9140139818191528], "val_loss": [2.037855386734009, 1.5099642276763916, 1.0310906171798706, 0.8212970495223999, 0.7394106984138489, 0.6887059211730957, 0.6417202949523926, 0.6061356067657471, 0.5852480530738831, 0.5629987120628357, 0.5486302971839905, 0.5351985096931458, 0.5125766396522522, 0.504225492477417, 0.491202175617218, 0.4842938184738159, 0.4748194217681885, 0.46987971663475037, 0.46136701107025146, 0.45886701345443726, 0.4472520351409912, 0.4400466978549957, 0.4331294894218445, 0.4274750053882599, 0.42169100046157837, 0.4219823479652405, 0.41191259026527405, 0.4087396562099457, 0.4063652455806732, 0.4013453722000122, 0.39911210536956787, 0.3983937203884125, 0.3907081186771393, 0.39539799094200134, 0.3855646848678589, 0.3877005875110626, 0.38491877913475037, 0.3784548044204712, 0.3775271773338318, 0.37435588240623474, 0.36972492933273315, 0.37432006001472473, 0.36501315236091614, 0.3654170334339142, 0.3680366575717926, 0.36141902208328247, 0.3626331388950348, 0.3630010485649109, 0.3588908016681671, 0.35875463485717773, 0.36179399490356445, 0.35425981879234314, 0.34853804111480713, 0.35722339153289795, 0.35269513726234436, 0.348916620016098, 0.34925979375839233, 0.34836384654045105, 0.3498489558696747, 0.3466165363788605, 0.34657022356987, 0.3406727612018585, 0.3427298963069916, 0.34097594022750854, 0.3393917381763458, 0.33987411856651306, 0.3381911516189575, 0.3343253433704376, 0.3456871211528778, 0.3404507339000702, 0.33530110120773315, 0.3357144892215729], "val_accuracy": [0.5450000166893005, 0.6660000085830688, 0.6899999976158142, 0.7183333039283752, 0.7383333444595337, 0.7480000257492065, 0.7613333463668823, 0.7736666798591614, 0.7789999842643738, 0.7913333177566528, 0.8013333082199097, 0.8033333420753479, 0.8100000023841858, 0.815666675567627, 0.8256666660308838, 0.8243333101272583, 0.8263333439826965, 0.8306666612625122, 0.8326666951179504, 0.8336666822433472, 0.840666651725769, 0.8416666388511658, 0.843666672706604, 0.846666693687439, 0.8510000109672546, 0.8496666550636292, 0.8533333539962769, 0.8543333411216736, 0.8523333072662354, 0.8539999723434448, 0.8600000143051147, 0.8636666536331177, 0.8633333444595337, 0.8569999933242798, 0.8653333187103271, 0.862666666507721, 0.8666666746139526, 0.8700000047683716, 0.8709999918937683, 0.8690000176429749, 0.8709999918937683, 0.8669999837875366, 0.871999979019165, 0.871666669845581, 0.8723333477973938, 0.871999979019165, 0.8690000176429749, 0.875333309173584, 0.874666690826416, 0.8709999918937683, 0.8706666827201843, 0.8736666440963745, 0.878000020980835, 0.8743333220481873, 0.875333309173584, 0.8763333559036255, 0.874666690826416, 0.878333330154419, 0.8786666393280029, 0.8793333172798157, 0.8809999823570251, 0.8790000081062317, 0.8813333511352539, 0.878333330154419, 0.8799999952316284, 0.8759999871253967, 0.8830000162124634, 0.8809999823570251, 0.8796666860580444, 0.8830000162124634, 0.8826666474342346, 0.8826666474342346]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 2, 9, 0, 5], [0, 1, 0, 2], [39, 39], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [28, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 3, 9, 3, 6, 8, 5, 8, 3, 6, 4, 5, 8, 2, 5, 9], [0, 0, 0, 3, 0, 0, 3, 0, 2, 2, 2, 0, 6, 3, 3], [16, 21, 96, 99, 61, 1, 29, 18, 16]], "fitness": -0.550000011920929, "mapping_values": [1, 6, 5, 1, 2, 6, 3, 3, 2, 2, 1, 1, 1, 41, 26, 15, 9], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(sigma, tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), sigma), tf.math.sqrt(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.math.sqrt(beta))), tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.pow(beta, tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), grad))), tf.math.sqrt(sigma))), tf.math.add(sigma, tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.1482980251312256, 2.036550283432007, 2.018352508544922, 2.01187801361084, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.3082816004753113, 0.3979659080505371, 0.3963809311389923, 0.4010038375854492, 0.22137102484703064, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0334932804107666, 1.9996391534805298, 1.9890224933624268, 1.985347867012024, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.5130000114440918, 0.5376666784286499, 0.5416666865348816, 0.5446666479110718, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 6, 3], [0, 1, 0, 2, 1], [95, 76], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 4, 3, 5, 7], [0, 3, 0, 3, 3, 2], [16, 16], [0, 1], [9], [4], [99], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [6, 3, 4, 6, 8, 1, 4, 1, 4, 2, 8, 9], [4, 0, 0, 4, 0, 1, 3, 1, 2, 0], [16, 99, 96, 99, 48, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 13, 7, 6, 2, 1, 1, 0, 1, 21, 12, 9, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(grad, beta))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.pow(alpha, tf.math.subtract(tf.math.pow(sigma, tf.math.add(tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha)), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 3, 3, 4, 5, 2, 3, 9, 6], [0, 2, 0, 3, 1, 1, 0, 0], [16, 13, 64, 11, 5], [0, 1, 1], [6], [0, 5], [99], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 3, 1, 4, 1, 6, 0, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 4], [98, 67, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 19, 11, 8, 5, 3, 1, 2, 1, 17, 8, 9, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.square(alpha)))), tf.math.add(tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), alpha), tf.math.divide_no_nan(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha))), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09470347315073013, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 0, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 5, 0, 3, 5], [0, 2, 3, 3], [16, 33], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [6, 3, 3, 6, 8, 3, 4, 1, 4, 2, 8, 3, 1, 3, 3, 9, 9, 2], [2, 0, 0, 3, 0, 0, 1, 1, 2, 4, 2, 6, 6], [16, 10, 96, 99, 85, 1]], "fitness": -0.09142857044935226, "mapping_values": [1, 2, 1, 1, 1, 6, 4, 2, 1, 2, 1, 1, 1, 31, 18, 13, 6], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.square(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(tf.math.pow(tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), alpha), alpha)), tf.math.multiply(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(grad, beta))), grad), grad)", "other_info": {"loss": [2.3096225261688232, 2.3087384700775146, 2.3096539974212646, 2.3091001510620117, 2.309011697769165, 2.3093435764312744], "accuracy": [0.08981640636920929, 0.09893012791872025, 0.09457138925790787, 0.0956280529499054, 0.09536388516426086, 0.0936468094587326], "val_loss": [2.3090152740478516, 2.3090152740478516, 2.3090152740478516, 2.3090152740478516, 2.3090152740478516, 2.3090152740478516], "val_accuracy": [0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133]}}]