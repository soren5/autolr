[{"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16], [0, 0, 1, 1], [0, 7], [4, 5], [0], [1], [0], [2], [0]], "fitness": -0.8822857141494751, "mapping_values": [1, 1, 0, 1, 1, 15, 8, 7, 4, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2614424228668213, 1.693049669265747, 1.1181678771972656, 0.8810990452766418, 0.7989403009414673, 0.7442198991775513, 0.6782535910606384, 0.6376402378082275, 0.5909861922264099, 0.5597288608551025, 0.5457926392555237, 0.5217233300209045, 0.4874698519706726, 0.47798842191696167, 0.4680258631706238, 0.4464002251625061, 0.4304366707801819, 0.41943755745887756, 0.3982115387916565, 0.39155638217926025, 0.3587459623813629, 0.35846543312072754, 0.3510901629924774, 0.333347886800766, 0.32424184679985046, 0.31627652049064636, 0.3087024688720703, 0.2993791699409485, 0.2823450565338135, 0.2763814926147461, 0.27009686827659607, 0.2628701329231262, 0.2578688859939575, 0.24349893629550934, 0.24675719439983368, 0.22635503113269806, 0.22536790370941162, 0.21726372838020325, 0.21968580782413483, 0.20078809559345245, 0.2010490447282791, 0.1993924379348755, 0.18142443895339966, 0.19236648082733154], "accuracy": [0.20842689275741577, 0.45951658487319946, 0.6205257177352905, 0.6851142644882202, 0.7063795924186707, 0.7255316376686096, 0.7360982894897461, 0.7564390301704407, 0.7708360552787781, 0.7915731072425842, 0.7869502305984497, 0.8053097128868103, 0.8140271902084351, 0.8182538747787476, 0.819970965385437, 0.8269713521003723, 0.8368775844573975, 0.8411042094230652, 0.8488970994949341, 0.8551049828529358, 0.86118084192276, 0.8597279191017151, 0.8654074668884277, 0.8667283058166504, 0.8775591254234314, 0.8749174475669861, 0.8798044919967651, 0.8848236799240112, 0.8948619961738586, 0.8953903317451477, 0.8977677822113037, 0.8989565372467041, 0.9006736278533936, 0.9049002528190613, 0.9035794734954834, 0.91124027967453, 0.9085986018180847, 0.9119006991386414, 0.9079381823539734, 0.9174481630325317, 0.9170519113540649, 0.9214106202125549, 0.9280148148536682, 0.9248448014259338], "val_loss": [2.0967981815338135, 0.9765368103981018, 0.8291558623313904, 0.6869295239448547, 0.6635818481445312, 0.60366290807724, 0.5659604668617249, 0.5401575565338135, 0.5071874856948853, 0.4996758997440338, 0.47139212489128113, 0.4555804431438446, 0.4663418233394623, 0.4362155795097351, 0.4247021973133087, 0.42111465334892273, 0.4082525372505188, 0.3963467478752136, 0.39586779475212097, 0.3904893696308136, 0.3838195502758026, 0.37752872705459595, 0.3788970410823822, 0.36909252405166626, 0.3622184991836548, 0.3640293776988983, 0.36801984906196594, 0.36465466022491455, 0.371604859828949, 0.36855608224868774, 0.3668927550315857, 0.3822304308414459, 0.3704870939254761, 0.3799261152744293, 0.3877311944961548, 0.3853493928909302, 0.38035181164741516, 0.3818025588989258, 0.39176949858665466, 0.39591076970100403, 0.40516361594200134, 0.39969387650489807, 0.4008403420448303, 0.39525657892227173], "val_accuracy": [0.4560000002384186, 0.6549999713897705, 0.699999988079071, 0.7286666631698608, 0.7606666684150696, 0.7599999904632568, 0.7639999985694885, 0.7760000228881836, 0.8033333420753479, 0.8043333292007446, 0.8209999799728394, 0.8233333230018616, 0.8259999752044678, 0.8416666388511658, 0.8379999995231628, 0.8453333377838135, 0.8456666469573975, 0.8516666889190674, 0.8553333282470703, 0.862666666507721, 0.8640000224113464, 0.862666666507721, 0.8676666617393494, 0.8706666827201843, 0.8669999837875366, 0.875, 0.8706666827201843, 0.8700000047683716, 0.8676666617393494, 0.875333309173584, 0.8733333349227905, 0.874666690826416, 0.878333330154419, 0.8736666440963745, 0.8756666779518127, 0.8769999742507935, 0.8803333044052124, 0.8769999742507935, 0.8840000033378601, 0.8823333382606506, 0.8836666941642761, 0.8799999952316284, 0.8806666731834412, 0.8793333172798157]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8282856941223145, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.587874412536621, 0.890685498714447, 0.7632281184196472, 0.6998955607414246, 0.6917256116867065, 0.6266981363296509, 0.6256287097930908, 0.6503154635429382, 0.6200181245803833, 0.6108609437942505, 0.590164065361023, 0.5894169211387634, 0.5793089866638184, 0.5835602879524231, 0.582268238067627, 0.6202815175056458, 0.5716260671615601, 0.5519019365310669, 0.5600553750991821, 0.5750595927238464, 0.5828894376754761, 0.6068398356437683, 0.5962408185005188, 0.6089270710945129, 0.5588698387145996, 0.5467169880867004, 0.5169702768325806, 0.5118304491043091, 0.5207961797714233, 0.561017632484436, 0.5609403252601624, 0.5849233269691467, 0.5679095387458801, 0.6104637384414673], "accuracy": [0.4826310873031616, 0.7059833407402039, 0.7325320243835449, 0.7458723783493042, 0.7508915662765503, 0.7670056819915771, 0.7672698497772217, 0.7777044177055359, 0.7824593782424927, 0.7868181467056274, 0.787082314491272, 0.7881389260292053, 0.8017435073852539, 0.7918372750282288, 0.8047813773155212, 0.7886672616004944, 0.7944789528846741, 0.7997622489929199, 0.8119139075279236, 0.8095363974571228, 0.8123101592063904, 0.7955356240272522, 0.7935543656349182, 0.8132346868515015, 0.8039889335632324, 0.8171972036361694, 0.8244617581367493, 0.8252542614936829, 0.8195747137069702, 0.8345000743865967, 0.8208954930305481, 0.7804781198501587, 0.8120459914207458, 0.7857614755630493], "val_loss": [0.9940460324287415, 0.6736782789230347, 0.6232128143310547, 0.5581873655319214, 0.5572843551635742, 0.5611011385917664, 0.5604492425918579, 0.553316056728363, 0.5801447033882141, 0.5327133536338806, 0.5386289358139038, 0.554442822933197, 0.5479176044464111, 0.5501750707626343, 0.6052564978599548, 0.5154600739479065, 0.584433376789093, 0.5137345194816589, 0.6043694615364075, 0.5134428143501282, 0.5698900818824768, 0.5511506199836731, 0.6335223913192749, 0.6067511439323425, 0.5425628423690796, 0.566644012928009, 0.5690742135047913, 0.5392225980758667, 0.5864086747169495, 0.614816427230835, 0.571291983127594, 0.6139548420906067, 0.5543677806854248, 0.6942363381385803], "val_accuracy": [0.6899999976158142, 0.765333354473114, 0.7663333415985107, 0.8040000200271606, 0.7923333048820496, 0.8096666932106018, 0.7943333387374878, 0.8106666803359985, 0.8223333358764648, 0.8136666417121887, 0.824999988079071, 0.831333339214325, 0.8209999799728394, 0.8376666903495789, 0.8273333311080933, 0.8256666660308838, 0.8266666531562805, 0.8450000286102295, 0.8423333168029785, 0.8420000076293945, 0.8410000205039978, 0.8056666851043701, 0.8463333249092102, 0.846666693687439, 0.8446666598320007, 0.8486666679382324, 0.8443333506584167, 0.847000002861023, 0.8529999852180481, 0.8383333086967468, 0.831333339214325, 0.8346666693687439, 0.8360000252723694, 0.8209999799728394]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 1, 3, 5], [3, 0, 1, 0, 2], [0, 62, 77], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 9, 8, 2], [0, 0, 2, 0, 4, 1, 0], [0, 27, 16, 2], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 7, 4, 6, 8, 7, 1, 6, 6, 7, 2, 6, 8, 1, 0], [4, 5, 5, 6, 5, 6, 4, 2, 6, 5, 1, 3], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 11, 7, 4, 4, 27, 15, 12, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(beta))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(grad, grad), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.add(grad, tf.math.divide_no_nan(grad, grad)), tf.math.sqrt(grad)), beta), grad), grad), tf.math.subtract(tf.math.negative(alpha), sigma))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 5, 3, 1, 9, 3, 8, 7], [0, 3, 1, 0, 1, 5, 0], [0, 27, 16, 16], [0, 1, 1, 1], [7, 7], [4, 5], [0], [1], [0], [2], [0]], "fitness": -0.09228571504354477, "mapping_values": [1, 1, 0, 1, 1, 5, 3, 2, 1, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(grad, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3101091384887695, 2.309561252593994, 2.3095529079437256, 2.3106656074523926, 2.3093128204345703, 2.30973219871521], "accuracy": [0.09391097724437714, 0.09311848133802414, 0.08955223858356476, 0.09126931428909302, 0.09285431355237961, 0.0956280529499054], "val_loss": [2.308417320251465, 2.308417320251465, 2.308417320251465, 2.308417320251465, 2.308417320251465, 2.308417320251465], "val_accuracy": [0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 3, 3, 1, 0], [35, 27, 16, 16], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 7, 3, 7, 0, 8, 9], [4, 6, 0], [0, 69], [1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 1, 0, 1, 1, 13, 7, 6, 2, 10, 7, 3, 2, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(grad, grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(grad, tf.math.negative(grad)), tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310397148132324, 2.310140371322632, 2.308790445327759, 2.3098273277282715, 2.309436321258545, 2.3104259967803955], "accuracy": [0.09166556596755981, 0.09192973375320435, 0.09576013684272766, 0.09272222965955734, 0.09919429570436478, 0.08387266844511032], "val_loss": [2.3088719844818115, 2.3088719844818115, 2.3088719844818115, 2.3088719844818115, 2.3088719844818115, 2.3088719844818115], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 3, 6, 1, 8, 2], [0, 0, 2, 4, 3, 1, 0], [0, 27, 16, 73], [0, 1, 1, 1], [0, 7], [1, 7], [0], [1], [0], [2], [0]], "fitness": -0.09028571099042892, "mapping_values": [1, 1, 0, 1, 1, 15, 8, 7, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.subtract(grad, grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.30954647064209, 2.310166835784912, 2.309659957885742, 2.310358762741089, 2.3098347187042236, 2.3103034496307373], "accuracy": [0.09721305221319199, 0.09840179979801178, 0.09589222073554993, 0.09245806187391281, 0.09259014576673508, 0.09179764986038208], "val_loss": [2.308234453201294, 2.308234453201294, 2.308234453201294, 2.308234453201294, 2.308234453201294, 2.308234453201294], "val_accuracy": [0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133]}}]