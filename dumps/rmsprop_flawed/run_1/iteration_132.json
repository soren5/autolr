[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16], [0, 0, 1, 1], [0, 7], [0, 7], [0], [1], [0], [2], [0]], "fitness": -0.8691428303718567, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.263667583465576, 1.7699182033538818, 1.2806490659713745, 0.9391272664070129, 0.833174467086792, 0.7627131342887878, 0.7030730247497559, 0.6753454804420471, 0.6495770215988159, 0.5993639230728149, 0.5673115849494934, 0.5554931163787842, 0.5330622792243958, 0.5113481283187866, 0.4948725402355194, 0.4870825707912445, 0.4538663327693939, 0.44422218203544617, 0.43280598521232605, 0.4180435240268707, 0.40807417035102844, 0.39465951919555664, 0.38895300030708313, 0.37016183137893677, 0.35901984572410583, 0.35448911786079407, 0.34295904636383057, 0.340577632188797, 0.3203357756137848, 0.3068925142288208], "accuracy": [0.20063400268554688, 0.43864747881889343, 0.587769091129303, 0.6600185036659241, 0.6905296444892883, 0.7153612375259399, 0.7304186820983887, 0.741909921169281, 0.7515519857406616, 0.7640998363494873, 0.7790252566337585, 0.7817989587783813, 0.7921014428138733, 0.8053097128868103, 0.8138951063156128, 0.8128384351730347, 0.8247259259223938, 0.8322546482086182, 0.8358209133148193, 0.8399154543876648, 0.8473120927810669, 0.8491612672805786, 0.848368763923645, 0.8578787446022034, 0.8609166741371155, 0.8673887252807617, 0.8708229064941406, 0.869502067565918, 0.8770307898521423, 0.8800686597824097], "val_loss": [2.1131086349487305, 1.0185835361480713, 0.7763170599937439, 0.7317901849746704, 0.6597715020179749, 0.6222389340400696, 0.5860831141471863, 0.5587756633758545, 0.5293865203857422, 0.5038555860519409, 0.48604780435562134, 0.4817848205566406, 0.4706636667251587, 0.45862141251564026, 0.4311445355415344, 0.4296719431877136, 0.4097336530685425, 0.40056920051574707, 0.39583903551101685, 0.39528125524520874, 0.3748287856578827, 0.3918174207210541, 0.37213966250419617, 0.38607439398765564, 0.3610917925834656, 0.3729011118412018, 0.35910099744796753, 0.35678234696388245, 0.36579686403274536, 0.34544843435287476], "val_accuracy": [0.43966665863990784, 0.6493333578109741, 0.7136666774749756, 0.7386666536331177, 0.7419999837875366, 0.765999972820282, 0.7663333415985107, 0.7746666669845581, 0.8009999990463257, 0.800000011920929, 0.8076666593551636, 0.8119999766349792, 0.8100000023841858, 0.8286666870117188, 0.847000002861023, 0.8363333344459534, 0.8483333587646484, 0.8550000190734863, 0.859666645526886, 0.8566666841506958, 0.8659999966621399, 0.859000027179718, 0.8666666746139526, 0.8650000095367432, 0.8726666569709778, 0.8673333525657654, 0.8713333606719971, 0.871666669845581, 0.8669999837875366, 0.8686666488647461]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.819428563117981, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6031371355056763, 0.9433114528656006, 0.780246913433075, 0.7069355845451355, 0.6384732723236084, 0.5927899479866028, 0.5841811895370483, 0.5634228587150574, 0.5282835364341736, 0.4973960518836975, 0.5104722380638123, 0.49504411220550537, 0.49470916390419006, 0.49212896823883057], "accuracy": [0.45964866876602173, 0.6861709356307983, 0.7358341217041016, 0.7420420050621033, 0.76106196641922, 0.7832518815994263, 0.7935543656349182, 0.7971205711364746, 0.8156121969223022, 0.8095363974571228, 0.8090080618858337, 0.8224804997444153, 0.8240655064582825, 0.8206313848495483], "val_loss": [1.0136431455612183, 0.7070825099945068, 0.6158374547958374, 0.5477571487426758, 0.5353788137435913, 0.5018640756607056, 0.49972960352897644, 0.47590023279190063, 0.44930407404899597, 0.4686412811279297, 0.4695150852203369, 0.4548259377479553, 0.48528051376342773, 0.490021288394928], "val_accuracy": [0.6786666512489319, 0.7556666731834412, 0.7736666798591614, 0.7889999747276306, 0.8050000071525574, 0.8143333196640015, 0.8209999799728394, 0.8326666951179504, 0.8443333506584167, 0.8363333344459534, 0.8259999752044678, 0.8403333425521851, 0.8339999914169312, 0.8360000252723694]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [8, 2, 3, 1, 9, 5], [0, 0, 2, 0, 3], [68, 39, 77], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 7, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 68, 16], [0, 0, 0, 1, 0, 1, 1], [0, 7, 8, 4], [0, 7, 1], [0], [0, 0, 1, 1], [0, 1], [2, 6], [0]], "fitness": -0.22371429204940796, "mapping_values": [1, 1, 0, 1, 1, 6, 3, 3, 2, 7, 4, 3, 1, 4, 2, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.pow(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(beta, grad))", "other_info": {"loss": [2.4330809116363525, 2.307900905609131, 2.303651809692383, 2.302888870239258, 2.303029775619507, 2.3029346466064453], "accuracy": [0.2114647924900055, 0.11359133571386337, 0.09549596905708313, 0.09338264167308807, 0.10038304328918457, 0.09853387624025345], "val_loss": [2.273703098297119, 2.3033759593963623, 2.3026247024536133, 2.3026018142700195, 2.302521228790283, 2.302577495574951], "val_accuracy": [0.21966665983200073, 0.0989999994635582, 0.09733333438634872, 0.10066666454076767, 0.10400000214576721, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 2, 3, 1, 3, 5], [0, 0, 1, 0, 3], [0, 39, 77], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 2, 3, 8, 2], [5, 0, 1, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [4, 7, 0, 2, 9, 0, 1], [0, 7, 7, 7], [0, 0], [1], [0], [6], [0]], "fitness": -0.20028571784496307, "mapping_values": [1, 7, 3, 4, 3, 13, 7, 6, 2, 11, 7, 4, 2, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), grad), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.negative(tf.math.subtract(grad, grad))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.379424571990967, 2.700620651245117, 2.311876058578491, 2.3032846450805664, 2.3007407188415527, 2.2637853622436523], "accuracy": [0.2102760523557663, 0.19759608805179596, 0.09628847241401672, 0.09708096832036972, 0.10936468094587326, 0.19535067677497864], "val_loss": [2.113845109939575, 2.340702772140503, 2.303527355194092, 2.3017773628234863, 2.293006658554077, 2.3094053268432617], "val_accuracy": [0.19766665995121002, 0.1003333330154419, 0.09966666996479034, 0.1003333330154419, 0.1589999943971634, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [4, 2, 3, 1, 3, 5, 8, 5], [0, 0, 1, 0, 3, 1], [0, 39, 77], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 3, 3, 1, 0], [0, 27, 72, 16], [1, 1, 0, 1], [0, 7], [0, 7], [90], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 3, 15, 8, 7, 3, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(alpha), tf.math.sqrt(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.square(grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.math.sqrt(grad))), tf.math.add(grad, alpha)), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [7, 2, 2, 1, 3, 5, 5, 0], [0, 1, 1, 0, 2, 1], [0, 39, 77], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2, 6, 1, 1, 4, 6, 1, 6, 4, 5, 7, 5, 2, 3, 7, 7, 1, 6], [2, 3, 2, 2, 0, 1, 0, 3, 2, 5, 4, 5, 3, 3, 3, 0, 3, 0, 0, 4, 3, 3], [0, 54, 16, 16, 40], [1, 0, 1, 1], [0, 7], [0, 7], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 8, 6, 2, 47, 25, 22, 5, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), alpha), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(beta, grad), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), beta), tf.math.add(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), tf.math.subtract(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(grad, beta), tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.pow(grad, grad), tf.math.square(tf.math.add(grad, tf.math.square(tf.math.add(grad, grad)))))), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.divide_no_nan(grad, grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]