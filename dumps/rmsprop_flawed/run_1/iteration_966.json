[{"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16], [0, 0, 1, 1], [0, 7], [4, 5], [0], [1], [0], [2], [0]], "fitness": -0.8822857141494751, "mapping_values": [1, 1, 0, 1, 1, 15, 8, 7, 4, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2614424228668213, 1.693049669265747, 1.1181678771972656, 0.8810990452766418, 0.7989403009414673, 0.7442198991775513, 0.6782535910606384, 0.6376402378082275, 0.5909861922264099, 0.5597288608551025, 0.5457926392555237, 0.5217233300209045, 0.4874698519706726, 0.47798842191696167, 0.4680258631706238, 0.4464002251625061, 0.4304366707801819, 0.41943755745887756, 0.3982115387916565, 0.39155638217926025, 0.3587459623813629, 0.35846543312072754, 0.3510901629924774, 0.333347886800766, 0.32424184679985046, 0.31627652049064636, 0.3087024688720703, 0.2993791699409485, 0.2823450565338135, 0.2763814926147461, 0.27009686827659607, 0.2628701329231262, 0.2578688859939575, 0.24349893629550934, 0.24675719439983368, 0.22635503113269806, 0.22536790370941162, 0.21726372838020325, 0.21968580782413483, 0.20078809559345245, 0.2010490447282791, 0.1993924379348755, 0.18142443895339966, 0.19236648082733154], "accuracy": [0.20842689275741577, 0.45951658487319946, 0.6205257177352905, 0.6851142644882202, 0.7063795924186707, 0.7255316376686096, 0.7360982894897461, 0.7564390301704407, 0.7708360552787781, 0.7915731072425842, 0.7869502305984497, 0.8053097128868103, 0.8140271902084351, 0.8182538747787476, 0.819970965385437, 0.8269713521003723, 0.8368775844573975, 0.8411042094230652, 0.8488970994949341, 0.8551049828529358, 0.86118084192276, 0.8597279191017151, 0.8654074668884277, 0.8667283058166504, 0.8775591254234314, 0.8749174475669861, 0.8798044919967651, 0.8848236799240112, 0.8948619961738586, 0.8953903317451477, 0.8977677822113037, 0.8989565372467041, 0.9006736278533936, 0.9049002528190613, 0.9035794734954834, 0.91124027967453, 0.9085986018180847, 0.9119006991386414, 0.9079381823539734, 0.9174481630325317, 0.9170519113540649, 0.9214106202125549, 0.9280148148536682, 0.9248448014259338], "val_loss": [2.0967981815338135, 0.9765368103981018, 0.8291558623313904, 0.6869295239448547, 0.6635818481445312, 0.60366290807724, 0.5659604668617249, 0.5401575565338135, 0.5071874856948853, 0.4996758997440338, 0.47139212489128113, 0.4555804431438446, 0.4663418233394623, 0.4362155795097351, 0.4247021973133087, 0.42111465334892273, 0.4082525372505188, 0.3963467478752136, 0.39586779475212097, 0.3904893696308136, 0.3838195502758026, 0.37752872705459595, 0.3788970410823822, 0.36909252405166626, 0.3622184991836548, 0.3640293776988983, 0.36801984906196594, 0.36465466022491455, 0.371604859828949, 0.36855608224868774, 0.3668927550315857, 0.3822304308414459, 0.3704870939254761, 0.3799261152744293, 0.3877311944961548, 0.3853493928909302, 0.38035181164741516, 0.3818025588989258, 0.39176949858665466, 0.39591076970100403, 0.40516361594200134, 0.39969387650489807, 0.4008403420448303, 0.39525657892227173], "val_accuracy": [0.4560000002384186, 0.6549999713897705, 0.699999988079071, 0.7286666631698608, 0.7606666684150696, 0.7599999904632568, 0.7639999985694885, 0.7760000228881836, 0.8033333420753479, 0.8043333292007446, 0.8209999799728394, 0.8233333230018616, 0.8259999752044678, 0.8416666388511658, 0.8379999995231628, 0.8453333377838135, 0.8456666469573975, 0.8516666889190674, 0.8553333282470703, 0.862666666507721, 0.8640000224113464, 0.862666666507721, 0.8676666617393494, 0.8706666827201843, 0.8669999837875366, 0.875, 0.8706666827201843, 0.8700000047683716, 0.8676666617393494, 0.875333309173584, 0.8733333349227905, 0.874666690826416, 0.878333330154419, 0.8736666440963745, 0.8756666779518127, 0.8769999742507935, 0.8803333044052124, 0.8769999742507935, 0.8840000033378601, 0.8823333382606506, 0.8836666941642761, 0.8799999952316284, 0.8806666731834412, 0.8793333172798157]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8317142724990845, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5596569776535034, 0.8353822231292725, 0.6720771789550781, 0.5983365178108215, 0.5570706725120544, 0.5297452211380005, 0.5106629133224487, 0.5529456734657288, 0.554760754108429, 0.5120884776115417, 0.5151363611221313, 0.5195378661155701, 0.4838353097438812, 0.4667879641056061, 0.5201943516731262, 0.5170139074325562, 0.5054438710212708, 0.48488184809684753, 0.4729817509651184, 0.4605715572834015, 0.5138756036758423, 0.5361840724945068, 0.47403448820114136, 0.5014948844909668, 0.5026970505714417, 0.4900728762149811, 0.49402984976768494, 0.4751494526863098], "accuracy": [0.47087571024894714, 0.7073041796684265, 0.7553823590278625, 0.7751948237419128, 0.7932901978492737, 0.8084797263145447, 0.8131026029586792, 0.7977809906005859, 0.8034605979919434, 0.8166688680648804, 0.8156121969223022, 0.824329674243927, 0.8244617581367493, 0.8330471515655518, 0.8224804997444153, 0.8226125836372375, 0.824329674243927, 0.8445383906364441, 0.8403117060661316, 0.8438779711723328, 0.8284242749214172, 0.8286884427070618, 0.8368775844573975, 0.8366134166717529, 0.8358209133148193, 0.8411042094230652, 0.8388587832450867, 0.839519202709198], "val_loss": [0.8487884402275085, 0.6137511134147644, 0.5376144051551819, 0.4799532890319824, 0.457141637802124, 0.45377352833747864, 0.48421770334243774, 0.5174146890640259, 0.4769667983055115, 0.48985734581947327, 0.4918449819087982, 0.49185290932655334, 0.49038460850715637, 0.5233156085014343, 0.4816579222679138, 0.5470060110092163, 0.502334713935852, 0.4931521713733673, 0.5060549378395081, 0.5266039371490479, 0.5217493772506714, 0.5737500786781311, 0.6132015585899353, 0.5156412720680237, 0.5663941502571106, 0.596688985824585, 0.5473983287811279, 0.566059410572052], "val_accuracy": [0.7083333134651184, 0.7763333320617676, 0.7960000038146973, 0.8216666579246521, 0.8326666951179504, 0.8306666612625122, 0.8270000219345093, 0.8326666951179504, 0.8299999833106995, 0.8330000042915344, 0.8333333134651184, 0.8363333344459534, 0.8426666855812073, 0.8306666612625122, 0.8386666774749756, 0.843999981880188, 0.846666693687439, 0.843666672706604, 0.8483333587646484, 0.843999981880188, 0.8450000286102295, 0.8500000238418579, 0.8529999852180481, 0.8416666388511658, 0.8476666808128357, 0.8443333506584167, 0.8420000076293945, 0.8479999899864197]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 7, 8, 5, 4, 0], [0, 2, 1, 0, 0], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 1, 1, 3, 8, 2, 6, 1, 5, 0, 4, 4], [0, 0, 2, 0, 3, 1, 0, 1, 0, 0, 5], [0, 27, 16, 53, 27, 86], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 7, 1, 5, 8, 7, 6, 3, 8, 0, 5, 4, 4, 1, 1, 0, 2, 9, 9, 7, 4, 0], [0, 6, 5, 1, 4, 6, 5, 4, 5, 0, 5, 6], [0, 99, 75, 67], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 6, 5, 3, 7, 6, 1, 7, 4, 0, 5, 2, 6, 7, 1, 6, 0, 9, 2], [2, 7, 0, 7, 1, 5, 1, 5, 0, 0, 2, 7, 5], [0, 84, 64, 6]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 8, 5, 3, 25, 14, 11, 6, 35, 23, 12, 4, 32, 19, 13, 4], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), tf.math.square(alpha)), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(grad, alpha), tf.math.subtract(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.pow(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.square(grad), tf.math.sqrt(tf.math.add(grad, tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.sqrt(tf.math.negative(grad))), tf.math.square(tf.math.pow(tf.math.pow(tf.math.subtract(tf.math.subtract(grad, grad), tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.pow(grad, tf.math.negative(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))), grad))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(grad, tf.math.pow(tf.math.negative(tf.math.square(alpha)), tf.math.add(grad, tf.math.divide_no_nan(alpha, tf.math.add(tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.negative(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)))), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 5, 2, 5, 8, 4, 0, 1], [0, 4, 4, 0, 3, 1, 0, 4, 1], [0, 35, 16, 16], [1, 1, 1, 1], [0, 7], [4, 4], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 22, 13, 9, 3, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad), tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.sqrt(grad)), tf.math.pow(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.subtract(grad, alpha))))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 7, 1, 6, 3, 8, 2], [3, 0, 2, 0, 3, 1, 1], [0, 27, 16, 16], [0, 0, 1, 1, 0, 1], [7, 7, 0], [4, 7, 0], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 2, 1, 1, 0, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(grad, grad), tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.632607936859131, 2.2469875654418792e+26, 4.2551445960998535, 3.91178297996521, 3.251438617706299, 3.716181516647339, 3.8872454166412354, 3.736316442489624, 3.494661331176758, 3.9456541538238525], "accuracy": [0.21872936189174652, 0.10817593336105347, 0.09721305221319199, 0.10315678268671036, 0.09774138033390045, 0.10289261490106583, 0.10342095047235489, 0.10038304328918457, 0.09945846349000931, 0.09787346422672272], "val_loss": [2.3231887817382812, 3.785325527191162, 4.352759838104248, 3.4475018978118896, 4.013666152954102, 3.9448840618133545, 3.8550543785095215, 3.786868095397949, 3.7199554443359375, 3.232125759124756], "val_accuracy": [0.09933333098888397, 0.10066666454076767, 0.0949999988079071, 0.09933333098888397, 0.10233332961797714, 0.0949999988079071, 0.10233332961797714, 0.09933333098888397, 0.0949999988079071, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 2, 6, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [63, 27, 16, 16], [0, 0, 1, 1], [0, 7], [4, 5], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 6, 3, 3, 2, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3037030696868896, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]