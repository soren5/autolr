[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16], [0, 0, 1, 1], [0, 7], [0, 7], [0], [1], [0], [2], [0]], "fitness": -0.8691428303718567, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.263667583465576, 1.7699182033538818, 1.2806490659713745, 0.9391272664070129, 0.833174467086792, 0.7627131342887878, 0.7030730247497559, 0.6753454804420471, 0.6495770215988159, 0.5993639230728149, 0.5673115849494934, 0.5554931163787842, 0.5330622792243958, 0.5113481283187866, 0.4948725402355194, 0.4870825707912445, 0.4538663327693939, 0.44422218203544617, 0.43280598521232605, 0.4180435240268707, 0.40807417035102844, 0.39465951919555664, 0.38895300030708313, 0.37016183137893677, 0.35901984572410583, 0.35448911786079407, 0.34295904636383057, 0.340577632188797, 0.3203357756137848, 0.3068925142288208], "accuracy": [0.20063400268554688, 0.43864747881889343, 0.587769091129303, 0.6600185036659241, 0.6905296444892883, 0.7153612375259399, 0.7304186820983887, 0.741909921169281, 0.7515519857406616, 0.7640998363494873, 0.7790252566337585, 0.7817989587783813, 0.7921014428138733, 0.8053097128868103, 0.8138951063156128, 0.8128384351730347, 0.8247259259223938, 0.8322546482086182, 0.8358209133148193, 0.8399154543876648, 0.8473120927810669, 0.8491612672805786, 0.848368763923645, 0.8578787446022034, 0.8609166741371155, 0.8673887252807617, 0.8708229064941406, 0.869502067565918, 0.8770307898521423, 0.8800686597824097], "val_loss": [2.1131086349487305, 1.0185835361480713, 0.7763170599937439, 0.7317901849746704, 0.6597715020179749, 0.6222389340400696, 0.5860831141471863, 0.5587756633758545, 0.5293865203857422, 0.5038555860519409, 0.48604780435562134, 0.4817848205566406, 0.4706636667251587, 0.45862141251564026, 0.4311445355415344, 0.4296719431877136, 0.4097336530685425, 0.40056920051574707, 0.39583903551101685, 0.39528125524520874, 0.3748287856578827, 0.3918174207210541, 0.37213966250419617, 0.38607439398765564, 0.3610917925834656, 0.3729011118412018, 0.35910099744796753, 0.35678234696388245, 0.36579686403274536, 0.34544843435287476], "val_accuracy": [0.43966665863990784, 0.6493333578109741, 0.7136666774749756, 0.7386666536331177, 0.7419999837875366, 0.765999972820282, 0.7663333415985107, 0.7746666669845581, 0.8009999990463257, 0.800000011920929, 0.8076666593551636, 0.8119999766349792, 0.8100000023841858, 0.8286666870117188, 0.847000002861023, 0.8363333344459534, 0.8483333587646484, 0.8550000190734863, 0.859666645526886, 0.8566666841506958, 0.8659999966621399, 0.859000027179718, 0.8666666746139526, 0.8650000095367432, 0.8726666569709778, 0.8673333525657654, 0.8713333606719971, 0.871666669845581, 0.8669999837875366, 0.8686666488647461]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8274285793304443, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5076172351837158, 0.8920437097549438, 0.7000365257263184, 0.6431506872177124, 0.6180556416511536, 0.5823244452476501, 0.5649690628051758, 0.5417970418930054, 0.5279000401496887, 0.5044957995414734, 0.5168717503547668, 0.49881187081336975, 0.535584032535553, 0.5271384716033936, 0.5144574642181396, 0.5176532864570618, 0.5166763663291931, 0.5034489631652832, 0.5442452430725098], "accuracy": [0.4687623679637909, 0.7022850513458252, 0.757099449634552, 0.7646281719207764, 0.7741381525993347, 0.7988376617431641, 0.7997622489929199, 0.8000264167785645, 0.8061022162437439, 0.8197067975997925, 0.8185180425643921, 0.8234050869941711, 0.8175934553146362, 0.8185180425643921, 0.8186501264572144, 0.8319904804229736, 0.8362171649932861, 0.8252542614936829, 0.8325188159942627], "val_loss": [0.9537365436553955, 0.5926638245582581, 0.535885751247406, 0.5363370776176453, 0.5058092474937439, 0.5126348733901978, 0.49970465898513794, 0.48506975173950195, 0.5063035488128662, 0.5170162916183472, 0.5114084482192993, 0.5408040285110474, 0.551665186882019, 0.5289519429206848, 0.5494264960289001, 0.6360366940498352, 0.5888408422470093, 0.5948745012283325, 0.6793424487113953], "val_accuracy": [0.6363333463668823, 0.7879999876022339, 0.8050000071525574, 0.796999990940094, 0.8163333535194397, 0.8176666498184204, 0.8309999704360962, 0.8333333134651184, 0.840666651725769, 0.8370000123977661, 0.8373333215713501, 0.8326666951179504, 0.8420000076293945, 0.8500000238418579, 0.8373333215713501, 0.8456666469573975, 0.8306666612625122, 0.8386666774749756, 0.8330000042915344]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5, 1], [3, 0, 1, 0, 2, 3], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 7, 3, 1, 6, 3, 8, 1, 2, 3, 1, 6, 7, 3, 5, 2, 7, 4, 6, 5, 5, 4, 3, 5, 1, 2, 0], [3, 0, 2, 0, 3, 1, 0, 1, 0, 3, 3, 5, 2, 4, 2, 2, 3, 5, 2, 1, 0], [0, 27, 16, 16, 16], [1, 0, 1, 1], [0, 7], [0, 7], [54], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 2, 48, 27, 21, 5, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 39, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(alpha), tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad), tf.math.subtract(alpha, tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.square(alpha), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(grad, grad), tf.math.pow(tf.math.divide_no_nan(grad, tf.math.square(tf.math.square(tf.math.pow(beta, tf.math.multiply(grad, tf.math.square(beta)))))), tf.math.subtract(beta, grad))))))), grad)), tf.math.add(tf.math.negative(beta), alpha)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 1, 3, 5, 4], [0, 0, 1, 3, 1, 1], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2, 6, 1], [0, 1, 2, 0, 0, 1, 0, 3, 5], [0, 27, 16, 16], [0, 0, 1, 1], [0, 7], [0, 7], [53], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 2, 19, 10, 9, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, tf.math.square(tf.math.pow(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 9, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 1, 1, 6, 3, 2, 2], [0, 0, 0, 0, 3, 1, 2], [0, 27, 16, 16], [0, 0, 1, 1], [0, 7], [0, 7], [0], [0, 0], [0, 9], [1], [0]], "fitness": -0.09399999678134918, "mapping_values": [1, 4, 3, 1, 2, 6, 3, 3, 3, 4, 2, 2, 1, 2, 2, 0, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3098833560943604, 2.3106257915496826, 2.3091061115264893, 2.309563636779785, 2.3090782165527344, 2.311908721923828], "accuracy": [0.09074098616838455, 0.08625016361474991, 0.08942015469074249, 0.09576013684272766, 0.09285431355237961, 0.08928807079792023], "val_loss": [2.3088274002075195, 2.3088274002075195, 2.3088274002075195, 2.3088274002075195, 2.3088274002075195, 2.3088274002075195], "val_accuracy": [0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 1, 1, 3, 5], [1, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 8, 3, 1, 6, 4, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 32], [0, 0, 1, 1], [0, 7], [0, 7], [0], [1], [0], [2], [0]], "fitness": -0.09000000357627869, "mapping_values": [1, 10, 5, 5, 2, 12, 7, 5, 3, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.subtract(alpha, tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3095755577087402, 2.3089523315429688, 2.3096628189086914, 2.3089587688446045, 2.3092925548553467, 2.3110504150390625], "accuracy": [0.09708096832036972, 0.09509972482919693, 0.09642054885625839, 0.09840179979801178, 0.09113723784685135, 0.09470347315073013], "val_loss": [2.308499574661255, 2.308499574661255, 2.308499574661255, 2.308499574661255, 2.308499574661255, 2.308499574661255], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]