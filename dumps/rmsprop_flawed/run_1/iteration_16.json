[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8411428332328796, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.612770676612854, 0.8402414321899414, 0.6640145778656006, 0.5947086215019226, 0.5528984665870667, 0.5197133421897888, 0.5190154910087585, 0.5276658535003662, 0.5436517000198364, 0.5228826403617859, 0.4664433002471924, 0.46803736686706543, 0.4673837423324585, 0.4627409875392914, 0.4552652835845947, 0.4437790811061859, 0.4895295798778534], "accuracy": [0.4683661460876465, 0.7025492191314697, 0.7553823590278625, 0.7771760821342468, 0.791441023349762, 0.8035926818847656, 0.802271842956543, 0.8098005652427673, 0.8148196935653687, 0.8105930685997009, 0.8300092220306396, 0.8284242749214172, 0.8318583965301514, 0.8374059200286865, 0.8327829837799072, 0.8392550349235535, 0.8417646288871765], "val_loss": [0.9044021964073181, 0.622227132320404, 0.5520730018615723, 0.5204899907112122, 0.5072714686393738, 0.5338049530982971, 0.5268193483352661, 0.5905352234840393, 0.542130708694458, 0.5504549741744995, 0.5471618175506592, 0.5196759700775146, 0.5677488446235657, 0.5395495295524597, 0.5499519109725952, 0.5810818076133728, 0.5455963611602783], "val_accuracy": [0.6773333549499512, 0.7643333077430725, 0.8059999942779541, 0.8056666851043701, 0.8149999976158142, 0.8159999847412109, 0.8113333582878113, 0.8243333101272583, 0.8159999847412109, 0.828000009059906, 0.8230000138282776, 0.8356666564941406, 0.8316666483879089, 0.8240000009536743, 0.8333333134651184, 0.8346666693687439, 0.8236666917800903]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8277142643928528, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.526976466178894, 0.8371672630310059, 0.6674411296844482, 0.6373446583747864, 0.6169804334640503, 0.5707698464393616, 0.539324164390564, 0.5297951102256775, 0.524397075176239, 0.4900915026664734, 0.4981522560119629, 0.4878707528114319, 0.4680245816707611, 0.467288613319397, 0.47618362307548523, 0.4676584005355835, 0.45616766810417175, 0.5342767238616943, 0.6198930144309998, 0.6517841219902039, 0.5894522666931152, 0.6518049240112305], "accuracy": [0.49491479992866516, 0.7176066637039185, 0.7573636174201965, 0.769911527633667, 0.7823272943496704, 0.7947431206703186, 0.8016114234924316, 0.8035926818847656, 0.8136309385299683, 0.8244617581367493, 0.8211596608161926, 0.8245938420295715, 0.8322546482086182, 0.8360850811004639, 0.8376700282096863, 0.8341038227081299, 0.837141752243042, 0.8485008478164673, 0.8076872229576111, 0.7946110367774963, 0.8075551390647888, 0.8253863453865051], "val_loss": [0.8959597945213318, 0.6426647305488586, 0.598275899887085, 0.5666911005973816, 0.5343517065048218, 0.5134824514389038, 0.5029414296150208, 0.577811598777771, 0.5261338949203491, 0.540045976638794, 0.5220096707344055, 0.5175106525421143, 0.5063000321388245, 0.5074487924575806, 0.5272867679595947, 0.5181768536567688, 0.5930776596069336, 0.6482642292976379, 0.6637179255485535, 0.5792946815490723, 0.7841488718986511, 0.667286217212677], "val_accuracy": [0.7226666808128357, 0.7639999985694885, 0.7820000052452087, 0.7879999876022339, 0.8056666851043701, 0.8149999976158142, 0.8173333406448364, 0.812666654586792, 0.8230000138282776, 0.8193333148956299, 0.8256666660308838, 0.8346666693687439, 0.8379999995231628, 0.8296666741371155, 0.8203333616256714, 0.8330000042915344, 0.8413333296775818, 0.8226666450500488, 0.8053333163261414, 0.8076666593551636, 0.8230000138282776, 0.8050000071525574]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 69], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [8, 2, 3, 1, 6, 3, 8, 9], [0, 0, 2, 0, 3, 4, 0], [0, 27, 16, 54], [1, 0, 1, 1], [7, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 13, 8, 5, 4, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [3, 0, 1, 0, 2], [30, 39, 39], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2, 9, 2, 1, 7], [0, 3, 2, 0, 3, 1, 0, 1, 3], [82, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [81], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 21, 12, 9, 4, 4, 2, 2, 1, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(grad, tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad), tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [4, 1, 3, 8, 3, 5], [0, 0, 1, 1, 2], [0, 39, 46], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 3], [3, 0, 2, 0, 3, 2, 1], [0, 50, 16, 28], [0, 0, 1, 0], [0, 9], [0, 1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 15, 8, 7, 2, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.multiply(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3105154037475586, 2.3109359741210938, 2.303318500518799, 2.3025851249694824, 2.3025851249694824, NaN, NaN, NaN], "accuracy": [0.08994849026203156, 0.09272222965955734, 0.09985470771789551, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.309000015258789, 2.309000015258789, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, NaN, NaN, NaN], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 4, 1, 3, 5], [0, 0, 0, 0, 2], [4, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 6, 3, 1, 6, 9, 8, 9], [0, 0, 2, 0, 3, 1, 0], [0, 74, 16, 96], [0, 0, 1, 1], [0, 7], [0, 3], [0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 2, 8, 1, 2, 8, 1, 9, 1, 0, 1, 6, 7], [6, 4, 6, 6, 3, 2, 0, 5, 1, 5], [0, 39]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 3, 10, 6, 4, 4, 4, 2, 2, 1, 25, 15, 10, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(grad, tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.sqrt(grad), grad), tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.negative(tf.math.subtract(sigma, tf.math.divide_no_nan(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))))))), grad), tf.math.add(alpha, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]