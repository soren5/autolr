[{"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16], [0, 0, 1, 1], [0, 7], [4, 5], [0], [1], [0], [2], [0]], "fitness": -0.8822857141494751, "mapping_values": [1, 1, 0, 1, 1, 15, 8, 7, 4, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2614424228668213, 1.693049669265747, 1.1181678771972656, 0.8810990452766418, 0.7989403009414673, 0.7442198991775513, 0.6782535910606384, 0.6376402378082275, 0.5909861922264099, 0.5597288608551025, 0.5457926392555237, 0.5217233300209045, 0.4874698519706726, 0.47798842191696167, 0.4680258631706238, 0.4464002251625061, 0.4304366707801819, 0.41943755745887756, 0.3982115387916565, 0.39155638217926025, 0.3587459623813629, 0.35846543312072754, 0.3510901629924774, 0.333347886800766, 0.32424184679985046, 0.31627652049064636, 0.3087024688720703, 0.2993791699409485, 0.2823450565338135, 0.2763814926147461, 0.27009686827659607, 0.2628701329231262, 0.2578688859939575, 0.24349893629550934, 0.24675719439983368, 0.22635503113269806, 0.22536790370941162, 0.21726372838020325, 0.21968580782413483, 0.20078809559345245, 0.2010490447282791, 0.1993924379348755, 0.18142443895339966, 0.19236648082733154], "accuracy": [0.20842689275741577, 0.45951658487319946, 0.6205257177352905, 0.6851142644882202, 0.7063795924186707, 0.7255316376686096, 0.7360982894897461, 0.7564390301704407, 0.7708360552787781, 0.7915731072425842, 0.7869502305984497, 0.8053097128868103, 0.8140271902084351, 0.8182538747787476, 0.819970965385437, 0.8269713521003723, 0.8368775844573975, 0.8411042094230652, 0.8488970994949341, 0.8551049828529358, 0.86118084192276, 0.8597279191017151, 0.8654074668884277, 0.8667283058166504, 0.8775591254234314, 0.8749174475669861, 0.8798044919967651, 0.8848236799240112, 0.8948619961738586, 0.8953903317451477, 0.8977677822113037, 0.8989565372467041, 0.9006736278533936, 0.9049002528190613, 0.9035794734954834, 0.91124027967453, 0.9085986018180847, 0.9119006991386414, 0.9079381823539734, 0.9174481630325317, 0.9170519113540649, 0.9214106202125549, 0.9280148148536682, 0.9248448014259338], "val_loss": [2.0967981815338135, 0.9765368103981018, 0.8291558623313904, 0.6869295239448547, 0.6635818481445312, 0.60366290807724, 0.5659604668617249, 0.5401575565338135, 0.5071874856948853, 0.4996758997440338, 0.47139212489128113, 0.4555804431438446, 0.4663418233394623, 0.4362155795097351, 0.4247021973133087, 0.42111465334892273, 0.4082525372505188, 0.3963467478752136, 0.39586779475212097, 0.3904893696308136, 0.3838195502758026, 0.37752872705459595, 0.3788970410823822, 0.36909252405166626, 0.3622184991836548, 0.3640293776988983, 0.36801984906196594, 0.36465466022491455, 0.371604859828949, 0.36855608224868774, 0.3668927550315857, 0.3822304308414459, 0.3704870939254761, 0.3799261152744293, 0.3877311944961548, 0.3853493928909302, 0.38035181164741516, 0.3818025588989258, 0.39176949858665466, 0.39591076970100403, 0.40516361594200134, 0.39969387650489807, 0.4008403420448303, 0.39525657892227173], "val_accuracy": [0.4560000002384186, 0.6549999713897705, 0.699999988079071, 0.7286666631698608, 0.7606666684150696, 0.7599999904632568, 0.7639999985694885, 0.7760000228881836, 0.8033333420753479, 0.8043333292007446, 0.8209999799728394, 0.8233333230018616, 0.8259999752044678, 0.8416666388511658, 0.8379999995231628, 0.8453333377838135, 0.8456666469573975, 0.8516666889190674, 0.8553333282470703, 0.862666666507721, 0.8640000224113464, 0.862666666507721, 0.8676666617393494, 0.8706666827201843, 0.8669999837875366, 0.875, 0.8706666827201843, 0.8700000047683716, 0.8676666617393494, 0.875333309173584, 0.8733333349227905, 0.874666690826416, 0.878333330154419, 0.8736666440963745, 0.8756666779518127, 0.8769999742507935, 0.8803333044052124, 0.8769999742507935, 0.8840000033378601, 0.8823333382606506, 0.8836666941642761, 0.8799999952316284, 0.8806666731834412, 0.8793333172798157]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8277142643928528, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4738194942474365, 0.7667009234428406, 0.6534958481788635, 0.5732522010803223, 0.5431361198425293, 0.5164744257926941, 0.5095644593238831, 0.4814378619194031, 0.4535021483898163, 0.4480830132961273, 0.43326476216316223, 0.43684789538383484, 0.43651914596557617, 0.4783480763435364, 0.44768714904785156, 0.42940235137939453, 0.4801223576068878, 0.4610159695148468, 0.5396209359169006, 0.4890373945236206], "accuracy": [0.4950468838214874, 0.7271166443824768, 0.7588165402412415, 0.7754589915275574, 0.7977809906005859, 0.8049134612083435, 0.8112534880638123, 0.8185180425643921, 0.8280280232429504, 0.8310658931732178, 0.8342359066009521, 0.8425571322441101, 0.8520671129226685, 0.8350284099578857, 0.8379341959953308, 0.8462554216384888, 0.8392550349235535, 0.8408400416374207, 0.8227446675300598, 0.8300092220306396], "val_loss": [0.8273005485534668, 0.628246009349823, 0.5263115167617798, 0.5126616358757019, 0.5199310779571533, 0.5149812698364258, 0.5503904819488525, 0.5089465975761414, 0.5068236589431763, 0.5549695491790771, 0.5371280908584595, 0.6075886487960815, 0.6696285605430603, 0.5762315392494202, 0.6451045870780945, 0.639004647731781, 0.7274109125137329, 0.6471568942070007, 0.7038836479187012, 0.6563019752502441], "val_accuracy": [0.7110000252723694, 0.7546666860580444, 0.8080000281333923, 0.8003333210945129, 0.8233333230018616, 0.8216666579246521, 0.8306666612625122, 0.8316666483879089, 0.8339999914169312, 0.82833331823349, 0.8433333039283752, 0.8429999947547913, 0.8410000205039978, 0.8423333168029785, 0.847000002861023, 0.8396666646003723, 0.8376666903495789, 0.8240000009536743, 0.8333333134651184, 0.8289999961853027]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [3, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 7, 6, 3, 8, 2, 1, 7, 1, 3, 7, 2, 5, 5, 0, 4, 6, 1, 2, 0, 4, 4, 5, 1, 6, 3, 0, 2, 1, 8, 5, 9], [0, 4, 2, 0, 3, 1, 0, 2, 4, 2, 2, 2, 1, 4, 1, 5, 4, 1, 0, 0, 4, 5, 0], [0, 27, 36, 16, 64, 45, 0], [1, 0, 1, 1], [1, 7], [4, 5], [0], [0, 0, 0, 1], [0, 0, 0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 57, 34, 23, 7, 1, 0, 1, 0, 4, 3, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(grad, alpha), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.negative(grad)))), tf.math.pow(tf.math.divide_no_nan(tf.math.subtract(beta, tf.math.add(beta, beta)), alpha), grad)), tf.math.negative(tf.math.pow(tf.math.pow(alpha, tf.math.square(grad)), tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.negative(alpha)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.math.sqrt(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), grad), tf.math.square(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))), grad), tf.constant(0.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 3, 3, 1, 1, 5, 4, 4], [0, 0, 1, 0, 2, 3, 3, 3], [0, 39, 77], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 9, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 87, 49], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 7, 0, 0, 6, 7, 3, 8], [0, 6, 2, 6, 6], [26], [1], [0], [2], [0]], "fitness": -0.09342857450246811, "mapping_values": [1, 5, 2, 3, 2, 11, 7, 4, 4, 13, 8, 5, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(beta), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.divide_no_nan(tf.math.add(grad, tf.math.multiply(beta, grad)), tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310340642929077, 2.3104920387268066, 2.3092429637908936, 2.3112072944641113, 2.3102009296417236, 2.310946226119995], "accuracy": [0.09206181764602661, 0.09206181764602661, 0.0944393053650856, 0.08981640636920929, 0.09338264167308807, 0.09008057415485382], "val_loss": [2.3087098598480225, 2.3087098598480225, 2.3087098598480225, 2.3087098598480225, 2.3087098598480225, 2.3087098598480225], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [3, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 6, 5, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 4], [0, 27, 16, 16], [0, 0, 1, 1, 1], [3, 7], [0, 7, 5], [0], [1], [0], [2], [0]], "fitness": -0.09228571504354477, "mapping_values": [1, 9, 4, 5, 2, 7, 4, 3, 2, 5, 2, 3, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.311617612838745, 2.3092617988586426, 2.310398817062378, 2.3109288215637207, 2.310391426086426, 2.310652494430542], "accuracy": [0.09021265059709549, 0.09536388516426086, 0.09074098616838455, 0.09272222965955734, 0.09232597798109055, 0.09338264167308807], "val_loss": [2.3093137741088867, 2.3093137741088867, 2.3093137741088867, 2.3093137741088867, 2.3093137741088867, 2.3093137741088867], "val_accuracy": [0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 2, 0, 1, 7, 3, 8, 2], [0, 0, 3, 0, 3, 1, 0], [0, 22, 16, 16], [0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 7, 4, 1], [4, 5, 6, 0, 3], [0], [1], [0], [0], [0]], "fitness": -0.09057142585515976, "mapping_values": [1, 1, 0, 1, 1, 2, 1, 1, 1, 9, 4, 5, 1, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.pow(tf.math.subtract(grad, grad), grad), tf.constant(0.0, shape=shape, dtype=tf.float32)), sigma), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.310574769973755, 2.3100435733795166, 2.309910297393799, 2.3105311393737793, 2.31060791015625, 2.3099658489227295], "accuracy": [0.09232597798109055, 0.08809932321310043, 0.08770307898521423, 0.09074098616838455, 0.09034473448991776, 0.08770307898521423], "val_loss": [2.3085999488830566, 2.3085999488830566, 2.3085999488830566, 2.3085999488830566, 2.3085999488830566, 2.3085999488830566], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}]