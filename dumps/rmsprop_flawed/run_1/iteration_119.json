[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16], [0, 0, 1, 1], [0, 7], [0, 7], [0], [1], [0], [2], [0]], "fitness": -0.8691428303718567, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.263667583465576, 1.7699182033538818, 1.2806490659713745, 0.9391272664070129, 0.833174467086792, 0.7627131342887878, 0.7030730247497559, 0.6753454804420471, 0.6495770215988159, 0.5993639230728149, 0.5673115849494934, 0.5554931163787842, 0.5330622792243958, 0.5113481283187866, 0.4948725402355194, 0.4870825707912445, 0.4538663327693939, 0.44422218203544617, 0.43280598521232605, 0.4180435240268707, 0.40807417035102844, 0.39465951919555664, 0.38895300030708313, 0.37016183137893677, 0.35901984572410583, 0.35448911786079407, 0.34295904636383057, 0.340577632188797, 0.3203357756137848, 0.3068925142288208], "accuracy": [0.20063400268554688, 0.43864747881889343, 0.587769091129303, 0.6600185036659241, 0.6905296444892883, 0.7153612375259399, 0.7304186820983887, 0.741909921169281, 0.7515519857406616, 0.7640998363494873, 0.7790252566337585, 0.7817989587783813, 0.7921014428138733, 0.8053097128868103, 0.8138951063156128, 0.8128384351730347, 0.8247259259223938, 0.8322546482086182, 0.8358209133148193, 0.8399154543876648, 0.8473120927810669, 0.8491612672805786, 0.848368763923645, 0.8578787446022034, 0.8609166741371155, 0.8673887252807617, 0.8708229064941406, 0.869502067565918, 0.8770307898521423, 0.8800686597824097], "val_loss": [2.1131086349487305, 1.0185835361480713, 0.7763170599937439, 0.7317901849746704, 0.6597715020179749, 0.6222389340400696, 0.5860831141471863, 0.5587756633758545, 0.5293865203857422, 0.5038555860519409, 0.48604780435562134, 0.4817848205566406, 0.4706636667251587, 0.45862141251564026, 0.4311445355415344, 0.4296719431877136, 0.4097336530685425, 0.40056920051574707, 0.39583903551101685, 0.39528125524520874, 0.3748287856578827, 0.3918174207210541, 0.37213966250419617, 0.38607439398765564, 0.3610917925834656, 0.3729011118412018, 0.35910099744796753, 0.35678234696388245, 0.36579686403274536, 0.34544843435287476], "val_accuracy": [0.43966665863990784, 0.6493333578109741, 0.7136666774749756, 0.7386666536331177, 0.7419999837875366, 0.765999972820282, 0.7663333415985107, 0.7746666669845581, 0.8009999990463257, 0.800000011920929, 0.8076666593551636, 0.8119999766349792, 0.8100000023841858, 0.8286666870117188, 0.847000002861023, 0.8363333344459534, 0.8483333587646484, 0.8550000190734863, 0.859666645526886, 0.8566666841506958, 0.8659999966621399, 0.859000027179718, 0.8666666746139526, 0.8650000095367432, 0.8726666569709778, 0.8673333525657654, 0.8713333606719971, 0.871666669845581, 0.8669999837875366, 0.8686666488647461]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.831428587436676, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5835926532745361, 0.9021795988082886, 0.7019063830375671, 0.6791523694992065, 0.6203484535217285, 0.6587414145469666, 0.60652756690979, 0.5957503318786621, 0.5773918628692627, 0.5625541806221008, 0.5935257077217102, 0.569527804851532, 0.5776931047439575], "accuracy": [0.4861973226070404, 0.7065116763114929, 0.7404569983482361, 0.7594769597053528, 0.7681944370269775, 0.7600052952766418, 0.7766477465629578, 0.7814027070999146, 0.7841764688491821, 0.7940827012062073, 0.7930260300636292, 0.8033285140991211, 0.800290584564209], "val_loss": [1.0751930475234985, 0.6360968947410583, 0.5877682566642761, 0.5307414531707764, 0.5104984641075134, 0.5483955144882202, 0.5217738151550293, 0.48360517621040344, 0.4886573851108551, 0.5215897560119629, 0.515902042388916, 0.5680064558982849, 0.5383355021476746], "val_accuracy": [0.6790000200271606, 0.7713333368301392, 0.7913333177566528, 0.8103333115577698, 0.8113333582878113, 0.8233333230018616, 0.8090000152587891, 0.8353333473205566, 0.8240000009536743, 0.828000009059906, 0.8336666822433472, 0.8130000233650208, 0.8293333053588867]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 2, 3, 1, 3, 5], [0, 1, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 6, 1, 9, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16], [1, 0, 1, 0], [0, 7], [0, 7], [55], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 8, 5, 3, 3, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [476673605632.0, 12763695939584.0, 64565102510080.0, 186005806120960.0, 411486220451840.0, 759985805983744.0], "accuracy": [0.09417514503002167, 0.10421344637870789, 0.09628847241401672, 0.1002509593963623, 0.09668471664190292, 0.10130762308835983], "val_loss": [2664912388096.0, 26143969247232.0, 93962710810624.0, 229360044867584.0, 455341426868224.0, 794516806172672.0], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 3, 1, 3, 5, 3, 2, 9], [0, 0, 1, 0, 2, 1], [0, 39, 77, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 2, 4, 1, 6, 3, 8, 2, 8, 8, 8, 5], [1, 2, 2, 0, 3, 1, 0], [0, 27, 16, 16], [0, 0, 1, 1, 0, 0, 1, 1], [1, 7, 8, 3], [0, 7, 1, 4], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 9, 6, 4, 19, 12, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), alpha)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.subtract(alpha, beta), beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad))), alpha), tf.math.square(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 3, 0, 4, 5], [0, 3, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0], [0, 2, 3, 4, 2, 3, 8, 2, 1, 0, 8, 7, 4, 3, 3, 6, 9, 9], [1, 0, 2, 0, 3, 1, 0, 4, 4, 4, 1], [0, 27, 16, 16, 13], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 7, 6, 1, 3, 4, 4, 2, 7, 7, 5, 1, 4, 4, 1, 0, 5, 6, 6, 8, 7, 4, 7, 4, 9, 3, 0, 7, 6, 7, 7, 5, 2, 2, 3, 2, 1, 8, 8, 9, 2, 6, 7, 4, 7, 3, 6, 1, 0, 6, 5, 6, 8, 9, 1, 5, 9], [0, 4, 5, 2, 2, 4, 4, 7, 3, 2, 6, 7, 2, 1, 7, 3, 5, 0, 1, 1, 6, 5, 6, 2, 1, 3, 4, 1, 1, 3, 0, 7, 5, 2, 0, 0, 5], [0, 8, 73, 8, 46, 20, 19, 3, 64], [1], [0], [3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 29, 18, 11, 5, 94, 57, 37, 9, 1, 0, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.subtract(tf.math.negative(tf.math.sqrt(beta)), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad)), alpha), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.pow(grad, tf.math.multiply(tf.math.multiply(grad, alpha), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.pow(tf.math.pow(grad, grad), beta), tf.math.add(tf.math.add(tf.math.add(tf.math.square(tf.math.subtract(beta, grad)), grad), tf.math.pow(tf.math.pow(tf.math.subtract(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(grad, tf.math.pow(tf.math.add(tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), sigma), beta), grad))), tf.math.multiply(tf.math.negative(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(tf.math.add(tf.math.multiply(sigma, tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), grad), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)), tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.subtract(grad, tf.math.negative(grad))), beta), tf.math.divide_no_nan(tf.math.square(tf.math.divide_no_nan(alpha, tf.math.sqrt(sigma))), grad)), alpha), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), alpha)))), tf.math.subtract(sigma, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), grad))), grad), tf.math.square(beta)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 2, 0, 2], [0, 84, 75], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 1, 7, 3, 8, 2, 4, 2, 2], [0, 0, 2, 0, 3, 1, 4, 1, 3, 1], [0, 27, 59, 16], [0, 0, 1, 1], [0, 7], [0, 7], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 21, 11, 10, 3, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.add(tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.pow(grad, alpha), grad))), tf.math.add(tf.math.add(alpha, grad), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.305511951446533, 2.305680990219116, 2.3075294494628906, 2.3097472190856934, 2.3124496936798096, 2.312770366668701], "accuracy": [0.09338264167308807, 0.10527011007070541, 0.10011887550354004, 0.10038304328918457, 0.09893012791872025, 0.09840179979801178], "val_loss": [2.3029592037200928, 2.304095983505249, 2.3039064407348633, 2.303955316543579, 2.3037097454071045, 2.3032779693603516], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.1003333330154419, 0.10166666656732559]}}]