[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16], [0, 0, 1, 1], [0, 7], [0, 7], [0], [1], [0], [2], [0]], "fitness": -0.8691428303718567, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.263667583465576, 1.7699182033538818, 1.2806490659713745, 0.9391272664070129, 0.833174467086792, 0.7627131342887878, 0.7030730247497559, 0.6753454804420471, 0.6495770215988159, 0.5993639230728149, 0.5673115849494934, 0.5554931163787842, 0.5330622792243958, 0.5113481283187866, 0.4948725402355194, 0.4870825707912445, 0.4538663327693939, 0.44422218203544617, 0.43280598521232605, 0.4180435240268707, 0.40807417035102844, 0.39465951919555664, 0.38895300030708313, 0.37016183137893677, 0.35901984572410583, 0.35448911786079407, 0.34295904636383057, 0.340577632188797, 0.3203357756137848, 0.3068925142288208], "accuracy": [0.20063400268554688, 0.43864747881889343, 0.587769091129303, 0.6600185036659241, 0.6905296444892883, 0.7153612375259399, 0.7304186820983887, 0.741909921169281, 0.7515519857406616, 0.7640998363494873, 0.7790252566337585, 0.7817989587783813, 0.7921014428138733, 0.8053097128868103, 0.8138951063156128, 0.8128384351730347, 0.8247259259223938, 0.8322546482086182, 0.8358209133148193, 0.8399154543876648, 0.8473120927810669, 0.8491612672805786, 0.848368763923645, 0.8578787446022034, 0.8609166741371155, 0.8673887252807617, 0.8708229064941406, 0.869502067565918, 0.8770307898521423, 0.8800686597824097], "val_loss": [2.1131086349487305, 1.0185835361480713, 0.7763170599937439, 0.7317901849746704, 0.6597715020179749, 0.6222389340400696, 0.5860831141471863, 0.5587756633758545, 0.5293865203857422, 0.5038555860519409, 0.48604780435562134, 0.4817848205566406, 0.4706636667251587, 0.45862141251564026, 0.4311445355415344, 0.4296719431877136, 0.4097336530685425, 0.40056920051574707, 0.39583903551101685, 0.39528125524520874, 0.3748287856578827, 0.3918174207210541, 0.37213966250419617, 0.38607439398765564, 0.3610917925834656, 0.3729011118412018, 0.35910099744796753, 0.35678234696388245, 0.36579686403274536, 0.34544843435287476], "val_accuracy": [0.43966665863990784, 0.6493333578109741, 0.7136666774749756, 0.7386666536331177, 0.7419999837875366, 0.765999972820282, 0.7663333415985107, 0.7746666669845581, 0.8009999990463257, 0.800000011920929, 0.8076666593551636, 0.8119999766349792, 0.8100000023841858, 0.8286666870117188, 0.847000002861023, 0.8363333344459534, 0.8483333587646484, 0.8550000190734863, 0.859666645526886, 0.8566666841506958, 0.8659999966621399, 0.859000027179718, 0.8666666746139526, 0.8650000095367432, 0.8726666569709778, 0.8673333525657654, 0.8713333606719971, 0.871666669845581, 0.8669999837875366, 0.8686666488647461]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8379999995231628, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.499143362045288, 0.7784796953201294, 0.6354849338531494, 0.5733984112739563, 0.5310760140419006, 0.5078046321868896, 0.48970818519592285, 0.4887392520904541, 0.5039199590682983, 0.4967281222343445, 0.5495623350143433], "accuracy": [0.48170650005340576, 0.7263241410255432, 0.7640998363494873, 0.780610203742981, 0.8063663840293884, 0.8161405324935913, 0.8224804997444153, 0.8260467648506165, 0.8374059200286865, 0.8240655064582825, 0.8278959393501282], "val_loss": [0.8447149991989136, 0.6019578576087952, 0.5308944582939148, 0.48377376794815063, 0.4738520383834839, 0.4702359139919281, 0.5029659271240234, 0.5538905262947083, 0.47590941190719604, 0.5526971220970154, 0.492276132106781], "val_accuracy": [0.6996666789054871, 0.7743333578109741, 0.7990000247955322, 0.8193333148956299, 0.8256666660308838, 0.840666651725769, 0.8296666741371155, 0.8246666789054871, 0.8376666903495789, 0.8316666483879089, 0.8289999961853027]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 1, 3, 5, 4, 6, 2, 4, 8, 3, 4, 4, 8, 1, 7, 7, 9, 7, 9, 2, 5, 7, 2], [0, 0, 1, 0, 2, 3, 0, 0, 3, 1, 0, 0, 1, 0, 2, 3, 0], [0, 39, 77, 8, 75, 65, 4, 84, 5, 40, 3], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 1, 6, 3, 3, 2, 1], [4, 0, 2, 2, 3, 1, 0, 2, 3], [0, 27, 16, 16], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 7, 3, 6, 5], [0, 7, 1, 3], [0], [0, 0, 0, 1], [0, 7, 9], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 42, 25, 17, 11, 18, 9, 9, 2, 9, 5, 4, 1, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.multiply(tf.math.pow(grad, grad), tf.math.pow(tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), grad), alpha)))), tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.square(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), alpha)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.add(grad, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, tf.math.multiply(tf.math.multiply(beta, tf.math.add(tf.math.subtract(grad, alpha), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), beta))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), alpha), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 8, 3, 5], [0, 0, 1, 0, 2], [44, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 1, 3, 2, 2, 3, 5], [2, 0, 2, 0, 3, 1, 0, 2, 3], [0, 27, 63, 16], [0, 0, 1, 1], [0, 7], [0, 7], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 19, 10, 9, 3, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(beta, tf.constant(0.0, shape=shape, dtype=tf.float32)), beta), tf.math.subtract(tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(beta), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 2, 5, 6, 3, 5, 6, 5, 2, 1, 4, 5, 2, 5, 1, 2, 1, 7, 2, 9, 6, 4, 5, 4, 0, 6, 5, 1, 3, 6, 8, 1, 6, 0, 1, 9, 1, 1, 4, 9, 7, 9, 8, 2, 1, 5, 6, 7, 6, 6, 4, 1, 7, 6, 7, 0, 1, 2, 7, 1, 6, 4, 5, 6, 9, 1, 1, 0, 2, 6, 3, 8, 8, 2, 5, 1, 5, 0, 9], [0, 0, 1, 0, 2, 0, 1, 0, 2, 3, 2, 2, 3, 2, 3, 3, 3, 2, 3, 0, 2, 2, 0, 1, 3, 3, 2, 2, 3, 2, 1, 1, 3, 2, 0, 2, 0, 3, 0, 3, 3, 2, 0, 2, 2, 1, 1], [0, 39, 77, 75, 28, 41, 9, 70, 59, 48, 43, 30, 9, 72, 80, 1, 95], [1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 42], [0, 0, 0, 1, 0, 1, 1, 1], [0, 7, 7, 4], [0, 1, 3, 5], [0], [1], [0], [2], [0]], "fitness": -0.09285714477300644, "mapping_values": [1, 126, 79, 47, 17, 1, 0, 1, 1, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.subtract(tf.math.pow(tf.math.square(grad), tf.math.add(tf.math.square(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), grad), tf.math.divide_no_nan(tf.math.pow(grad, tf.math.square(grad)), tf.math.pow(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.square(tf.math.subtract(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.negative(grad)), tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), grad)))), tf.math.subtract(tf.math.subtract(tf.math.pow(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), grad), tf.math.sqrt(tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.square(grad), tf.math.divide_no_nan(grad, tf.math.add(tf.math.divide_no_nan(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha), grad)))))))))), tf.math.divide_no_nan(grad, tf.math.pow(tf.math.subtract(grad, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(tf.math.negative(grad), grad)), tf.math.subtract(alpha, tf.math.add(tf.math.add(tf.math.subtract(alpha, grad), grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(grad, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.subtract(grad, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), grad), grad))), tf.math.multiply(tf.math.sqrt(grad), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), grad)), grad)), tf.math.add(tf.math.square(tf.math.subtract(tf.math.square(tf.math.negative(alpha)), alpha)), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma)), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3107519149780273, 2.311005115509033, 2.3111894130706787, 2.310014486312866, 2.310609817504883, 2.310879945755005], "accuracy": [0.0948355570435524, 0.08875974267721176, 0.08849557489156723, 0.09351472556591034, 0.09325055778026581, 0.09206181764602661], "val_loss": [2.3093032836914062, 2.3093032836914062, 2.3093032836914062, 2.3093032836914062, 2.3093032836914062, 2.3093032836914062], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 1, 1, 0, 2], [14, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 9, 3, 1, 6, 3, 8, 2], [0, 5, 1, 2, 3, 1, 0], [0, 27, 23, 16], [0, 0, 1, 1], [0, 7], [0, 7], [0], [1], [0], [2], [0]], "fitness": -0.0917142853140831, "mapping_values": [1, 11, 6, 5, 2, 2, 2, 0, 1, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.math.square(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310469150543213, 2.3088529109954834, 2.3105480670928955, 2.3093454837799072, 2.309255361557007, 2.30962872505188], "accuracy": [0.09140139818191528, 0.09430722147226334, 0.09047681838274002, 0.09100515395402908, 0.09245806187391281, 0.09681680053472519], "val_loss": [2.3090145587921143, 2.3090145587921143, 2.3090145587921143, 2.3090145587921143, 2.3090145587921143, 2.3090145587921143], "val_accuracy": [0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763]}}]