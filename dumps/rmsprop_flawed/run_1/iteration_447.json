[{"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16], [0, 0, 1, 1], [0, 7], [4, 5], [0], [1], [0], [2], [0]], "fitness": -0.8822857141494751, "mapping_values": [1, 1, 0, 1, 1, 15, 8, 7, 4, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2614424228668213, 1.693049669265747, 1.1181678771972656, 0.8810990452766418, 0.7989403009414673, 0.7442198991775513, 0.6782535910606384, 0.6376402378082275, 0.5909861922264099, 0.5597288608551025, 0.5457926392555237, 0.5217233300209045, 0.4874698519706726, 0.47798842191696167, 0.4680258631706238, 0.4464002251625061, 0.4304366707801819, 0.41943755745887756, 0.3982115387916565, 0.39155638217926025, 0.3587459623813629, 0.35846543312072754, 0.3510901629924774, 0.333347886800766, 0.32424184679985046, 0.31627652049064636, 0.3087024688720703, 0.2993791699409485, 0.2823450565338135, 0.2763814926147461, 0.27009686827659607, 0.2628701329231262, 0.2578688859939575, 0.24349893629550934, 0.24675719439983368, 0.22635503113269806, 0.22536790370941162, 0.21726372838020325, 0.21968580782413483, 0.20078809559345245, 0.2010490447282791, 0.1993924379348755, 0.18142443895339966, 0.19236648082733154], "accuracy": [0.20842689275741577, 0.45951658487319946, 0.6205257177352905, 0.6851142644882202, 0.7063795924186707, 0.7255316376686096, 0.7360982894897461, 0.7564390301704407, 0.7708360552787781, 0.7915731072425842, 0.7869502305984497, 0.8053097128868103, 0.8140271902084351, 0.8182538747787476, 0.819970965385437, 0.8269713521003723, 0.8368775844573975, 0.8411042094230652, 0.8488970994949341, 0.8551049828529358, 0.86118084192276, 0.8597279191017151, 0.8654074668884277, 0.8667283058166504, 0.8775591254234314, 0.8749174475669861, 0.8798044919967651, 0.8848236799240112, 0.8948619961738586, 0.8953903317451477, 0.8977677822113037, 0.8989565372467041, 0.9006736278533936, 0.9049002528190613, 0.9035794734954834, 0.91124027967453, 0.9085986018180847, 0.9119006991386414, 0.9079381823539734, 0.9174481630325317, 0.9170519113540649, 0.9214106202125549, 0.9280148148536682, 0.9248448014259338], "val_loss": [2.0967981815338135, 0.9765368103981018, 0.8291558623313904, 0.6869295239448547, 0.6635818481445312, 0.60366290807724, 0.5659604668617249, 0.5401575565338135, 0.5071874856948853, 0.4996758997440338, 0.47139212489128113, 0.4555804431438446, 0.4663418233394623, 0.4362155795097351, 0.4247021973133087, 0.42111465334892273, 0.4082525372505188, 0.3963467478752136, 0.39586779475212097, 0.3904893696308136, 0.3838195502758026, 0.37752872705459595, 0.3788970410823822, 0.36909252405166626, 0.3622184991836548, 0.3640293776988983, 0.36801984906196594, 0.36465466022491455, 0.371604859828949, 0.36855608224868774, 0.3668927550315857, 0.3822304308414459, 0.3704870939254761, 0.3799261152744293, 0.3877311944961548, 0.3853493928909302, 0.38035181164741516, 0.3818025588989258, 0.39176949858665466, 0.39591076970100403, 0.40516361594200134, 0.39969387650489807, 0.4008403420448303, 0.39525657892227173], "val_accuracy": [0.4560000002384186, 0.6549999713897705, 0.699999988079071, 0.7286666631698608, 0.7606666684150696, 0.7599999904632568, 0.7639999985694885, 0.7760000228881836, 0.8033333420753479, 0.8043333292007446, 0.8209999799728394, 0.8233333230018616, 0.8259999752044678, 0.8416666388511658, 0.8379999995231628, 0.8453333377838135, 0.8456666469573975, 0.8516666889190674, 0.8553333282470703, 0.862666666507721, 0.8640000224113464, 0.862666666507721, 0.8676666617393494, 0.8706666827201843, 0.8669999837875366, 0.875, 0.8706666827201843, 0.8700000047683716, 0.8676666617393494, 0.875333309173584, 0.8733333349227905, 0.874666690826416, 0.878333330154419, 0.8736666440963745, 0.8756666779518127, 0.8769999742507935, 0.8803333044052124, 0.8769999742507935, 0.8840000033378601, 0.8823333382606506, 0.8836666941642761, 0.8799999952316284, 0.8806666731834412, 0.8793333172798157]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8277142643928528, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.612037181854248, 0.9167912006378174, 0.7326618432998657, 0.6407533288002014, 0.5980366468429565, 0.5555163621902466, 0.5210205912590027, 0.4937768876552582, 0.4701901078224182, 0.4760763347148895, 0.47922566533088684, 0.4719991385936737, 0.4566475450992584, 0.49476829171180725, 0.5155046582221985, 0.5098447799682617], "accuracy": [0.44287413358688354, 0.6893408894538879, 0.7334566116333008, 0.7625148296356201, 0.7688548564910889, 0.7946110367774963, 0.8016114234924316, 0.8149517774581909, 0.829216718673706, 0.828820526599884, 0.8290846943855286, 0.8318583965301514, 0.8333113193511963, 0.8230088353157043, 0.8269713521003723, 0.8304054737091064], "val_loss": [0.8759331703186035, 0.6577183604240417, 0.580471396446228, 0.5513898730278015, 0.5548642873764038, 0.5117083787918091, 0.4878961145877838, 0.4953290522098541, 0.5198451280593872, 0.5184635519981384, 0.5214078426361084, 0.5126776695251465, 0.5919997692108154, 0.6179869174957275, 0.5558963418006897, 0.6406717300415039], "val_accuracy": [0.6909999847412109, 0.7693333625793457, 0.7913333177566528, 0.8006666898727417, 0.7946666479110718, 0.8163333535194397, 0.8253333568572998, 0.8243333101272583, 0.8370000123977661, 0.8263333439826965, 0.8386666774749756, 0.8356666564941406, 0.8266666531562805, 0.8323333263397217, 0.8276666402816772, 0.8386666774749756]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 3, 3, 1, 1, 5, 7, 3, 3, 4, 4, 5, 3], [3, 0, 1, 1, 2, 3, 2, 2, 2, 1, 1, 1], [0, 39, 77], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 4, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 59], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 7, 0, 3, 7, 7, 2, 0, 3, 6, 7, 6, 7, 7, 5, 3, 1, 3, 0, 8, 5, 6, 1, 5, 7, 1, 4, 8, 3, 2, 5, 9, 4, 4, 2, 2, 5, 9, 6, 5], [4, 5, 4, 6, 5, 1, 1, 7, 6, 1, 5, 7, 0, 2, 1, 5, 0, 5, 1, 6, 3, 5, 3, 2, 3], [0, 95, 87, 79], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 13, 12, 1, 6, 3, 3, 2, 65, 40, 25, 4, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.math.subtract(tf.math.square(grad), tf.math.add(tf.math.multiply(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(alpha, alpha), tf.math.square(grad))), grad), grad)), grad), tf.math.multiply(grad, alpha)), alpha), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(grad, tf.math.negative(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.add(alpha, tf.math.add(tf.math.square(alpha), tf.math.multiply(grad, tf.math.subtract(tf.math.multiply(tf.math.negative(tf.math.sqrt(grad)), tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.subtract(tf.math.square(grad), grad), tf.math.add(tf.math.subtract(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(beta, tf.math.add(tf.math.square(alpha), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.pow(grad, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.square(grad), alpha), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(grad, sigma)))))))), tf.math.square(grad))))), sigma), beta), sigma))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3032684326171875, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09721305221319199, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [3, 0, 2, 0, 3, 1, 4], [0, 27, 16, 16], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [6, 7, 6, 3, 0, 9, 3], [0, 6, 0, 3, 6], [0, 6, 75], [0, 0, 0, 0, 1, 1], [0, 8, 5, 3], [2, 4], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 15, 8, 7, 2, 12, 7, 5, 3, 6, 4, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), sigma)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.square(tf.math.multiply(beta, grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 33, 16], [0, 1, 1, 1], [8, 7], [4, 5], [0], [0, 0, 0, 1, 0, 1, 1], [0, 3, 8, 7], [2, 6, 1], [0]], "fitness": -0.09228571504354477, "mapping_values": [1, 9, 4, 5, 3, 2, 1, 1, 1, 2, 1, 1, 0, 7, 4, 3, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.sqrt(beta), tf.math.add(grad, alpha)))", "other_info": {"loss": [2.3104186058044434, 2.3098769187927246, 2.3105814456939697, 2.3101353645324707, 2.310236692428589, 2.3109376430511475], "accuracy": [0.09245806187391281, 0.08942015469074249, 0.08836349099874496, 0.08889182657003403, 0.09259014576673508, 0.09232597798109055], "val_loss": [2.3082103729248047, 2.3082103729248047, 2.3082103729248047, 2.3082103729248047, 2.3082103729248047, 2.3082103729248047], "val_accuracy": [0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 6, 9, 7, 9], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16, 75], [0, 0, 0, 1, 1], [0, 7, 8], [4, 5], [0], [1], [0], [0], [0]], "fitness": -0.0917142853140831, "mapping_values": [1, 1, 0, 1, 1, 16, 10, 6, 5, 5, 3, 2, 0, 1, 0, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), grad))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.sqrt(grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.309464454650879, 2.309879779815674, 2.3090479373931885, 2.3098349571228027, 2.3114681243896484, 2.3106753826141357], "accuracy": [0.09232597798109055, 0.0882314071059227, 0.09509972482919693, 0.09694888442754745, 0.08770307898521423, 0.08638224750757217], "val_loss": [2.3080124855041504, 2.3080124855041504, 2.3080124855041504, 2.3080124855041504, 2.3080124855041504, 2.3080124855041504], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}]