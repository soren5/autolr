[{"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16], [0, 0, 1, 1], [0, 7], [4, 5], [0], [1], [0], [2], [0]], "fitness": -0.8822857141494751, "mapping_values": [1, 1, 0, 1, 1, 15, 8, 7, 4, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2614424228668213, 1.693049669265747, 1.1181678771972656, 0.8810990452766418, 0.7989403009414673, 0.7442198991775513, 0.6782535910606384, 0.6376402378082275, 0.5909861922264099, 0.5597288608551025, 0.5457926392555237, 0.5217233300209045, 0.4874698519706726, 0.47798842191696167, 0.4680258631706238, 0.4464002251625061, 0.4304366707801819, 0.41943755745887756, 0.3982115387916565, 0.39155638217926025, 0.3587459623813629, 0.35846543312072754, 0.3510901629924774, 0.333347886800766, 0.32424184679985046, 0.31627652049064636, 0.3087024688720703, 0.2993791699409485, 0.2823450565338135, 0.2763814926147461, 0.27009686827659607, 0.2628701329231262, 0.2578688859939575, 0.24349893629550934, 0.24675719439983368, 0.22635503113269806, 0.22536790370941162, 0.21726372838020325, 0.21968580782413483, 0.20078809559345245, 0.2010490447282791, 0.1993924379348755, 0.18142443895339966, 0.19236648082733154], "accuracy": [0.20842689275741577, 0.45951658487319946, 0.6205257177352905, 0.6851142644882202, 0.7063795924186707, 0.7255316376686096, 0.7360982894897461, 0.7564390301704407, 0.7708360552787781, 0.7915731072425842, 0.7869502305984497, 0.8053097128868103, 0.8140271902084351, 0.8182538747787476, 0.819970965385437, 0.8269713521003723, 0.8368775844573975, 0.8411042094230652, 0.8488970994949341, 0.8551049828529358, 0.86118084192276, 0.8597279191017151, 0.8654074668884277, 0.8667283058166504, 0.8775591254234314, 0.8749174475669861, 0.8798044919967651, 0.8848236799240112, 0.8948619961738586, 0.8953903317451477, 0.8977677822113037, 0.8989565372467041, 0.9006736278533936, 0.9049002528190613, 0.9035794734954834, 0.91124027967453, 0.9085986018180847, 0.9119006991386414, 0.9079381823539734, 0.9174481630325317, 0.9170519113540649, 0.9214106202125549, 0.9280148148536682, 0.9248448014259338], "val_loss": [2.0967981815338135, 0.9765368103981018, 0.8291558623313904, 0.6869295239448547, 0.6635818481445312, 0.60366290807724, 0.5659604668617249, 0.5401575565338135, 0.5071874856948853, 0.4996758997440338, 0.47139212489128113, 0.4555804431438446, 0.4663418233394623, 0.4362155795097351, 0.4247021973133087, 0.42111465334892273, 0.4082525372505188, 0.3963467478752136, 0.39586779475212097, 0.3904893696308136, 0.3838195502758026, 0.37752872705459595, 0.3788970410823822, 0.36909252405166626, 0.3622184991836548, 0.3640293776988983, 0.36801984906196594, 0.36465466022491455, 0.371604859828949, 0.36855608224868774, 0.3668927550315857, 0.3822304308414459, 0.3704870939254761, 0.3799261152744293, 0.3877311944961548, 0.3853493928909302, 0.38035181164741516, 0.3818025588989258, 0.39176949858665466, 0.39591076970100403, 0.40516361594200134, 0.39969387650489807, 0.4008403420448303, 0.39525657892227173], "val_accuracy": [0.4560000002384186, 0.6549999713897705, 0.699999988079071, 0.7286666631698608, 0.7606666684150696, 0.7599999904632568, 0.7639999985694885, 0.7760000228881836, 0.8033333420753479, 0.8043333292007446, 0.8209999799728394, 0.8233333230018616, 0.8259999752044678, 0.8416666388511658, 0.8379999995231628, 0.8453333377838135, 0.8456666469573975, 0.8516666889190674, 0.8553333282470703, 0.862666666507721, 0.8640000224113464, 0.862666666507721, 0.8676666617393494, 0.8706666827201843, 0.8669999837875366, 0.875, 0.8706666827201843, 0.8700000047683716, 0.8676666617393494, 0.875333309173584, 0.8733333349227905, 0.874666690826416, 0.878333330154419, 0.8736666440963745, 0.8756666779518127, 0.8769999742507935, 0.8803333044052124, 0.8769999742507935, 0.8840000033378601, 0.8823333382606506, 0.8836666941642761, 0.8799999952316284, 0.8806666731834412, 0.8793333172798157]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8225714564323425, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6120070219039917, 0.9600957036018372, 0.733950674533844, 0.7179549932479858, 0.6696948409080505, 0.5974840521812439, 0.5623198747634888, 0.5503136515617371, 0.5281762480735779, 0.5046536922454834, 0.5415841937065125, 0.5291166305541992, 0.5280381441116333, 0.5685417056083679, 0.5107214450836182, 0.5173457264900208, 0.46754172444343567, 0.4916984438896179, 0.5434413552284241, 0.5566291213035583], "accuracy": [0.45370492339134216, 0.6889446377754211, 0.7293620109558105, 0.7316074371337891, 0.7523444890975952, 0.7753269076347351, 0.7906485199928284, 0.8000264167785645, 0.8083476424217224, 0.8100647330284119, 0.8124422430992126, 0.807158887386322, 0.8050455451011658, 0.7997622489929199, 0.8107251524925232, 0.819442629814148, 0.830669641494751, 0.8281601071357727, 0.8168009519577026, 0.8207634687423706], "val_loss": [1.0073964595794678, 0.6357154250144958, 0.6421614289283752, 0.5982045531272888, 0.5527381896972656, 0.5345690846443176, 0.5175438523292542, 0.4901583790779114, 0.5265968441963196, 0.4985591769218445, 0.5158626437187195, 0.5497024059295654, 0.5307300090789795, 0.5430921912193298, 0.5223951935768127, 0.5056483745574951, 0.5270744562149048, 0.5982433557510376, 0.5709444880485535, 0.5802937150001526], "val_accuracy": [0.6553333401679993, 0.7639999985694885, 0.7416666746139526, 0.7570000290870667, 0.7799999713897705, 0.8009999990463257, 0.7983333468437195, 0.8153333067893982, 0.8199999928474426, 0.8109999895095825, 0.8243333101272583, 0.8190000057220459, 0.8193333148956299, 0.8213333487510681, 0.8343333601951599, 0.8263333439826965, 0.8326666951179504, 0.8299999833106995, 0.8259999752044678, 0.8273333311080933]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [96, 39, 39], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 5, 1, 6, 3, 8, 2, 4], [0, 0, 2, 0, 3, 1, 0], [19, 27, 16, 16], [0, 0, 1, 1], [0, 7], [5, 0], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 16, 9, 7, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.pow(grad, alpha), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [3, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 8, 1, 8, 1, 9, 4, 6, 8, 1, 0, 4, 4, 3, 4, 6, 6, 6, 1, 0, 4], [0, 0, 2, 4, 3, 1, 2, 0, 0, 3, 2, 4, 0, 1, 0, 0, 5, 4, 2], [0, 27, 65, 27, 15, 84, 87, 60], [0, 0, 1, 1, 1], [6, 7], [0, 6, 2], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 46, 27, 19, 8, 5, 2, 3, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), beta))), grad)), grad), tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.sqrt(beta), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.pow(grad, tf.math.multiply(tf.math.pow(beta, tf.math.divide_no_nan(grad, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.negative(tf.math.pow(grad, beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 3, 3, 1, 1, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 2, 3, 1, 6, 3, 8, 2, 3, 5, 2, 4, 3, 4, 2, 3, 8, 4, 8, 4, 5, 3, 3, 2, 0, 2, 5, 4, 6, 3, 6, 5, 7, 7, 8, 8, 4, 9, 4, 5, 9, 2, 2, 0, 2, 8, 7, 3, 3, 6, 4, 0, 5, 5, 9], [0, 0, 2, 0, 3, 1, 0, 2, 3, 0, 2, 2, 3, 5, 0, 3, 0, 4, 4, 4, 5, 2, 5, 3, 2, 5, 4, 4, 0, 3, 3, 3, 1], [0, 27, 16, 16, 72, 38, 11, 57, 72, 95, 14], [0, 0, 1, 1], [5, 7], [3, 5], [0], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 88, 55, 33, 11, 4, 2, 2, 0, 2, 1, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(grad, tf.math.square(tf.math.add(tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.pow(tf.math.square(alpha), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(beta), tf.math.pow(tf.math.divide_no_nan(grad, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), beta))), beta), tf.math.multiply(tf.math.divide_no_nan(grad, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(grad, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), grad), grad), grad), grad), tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.pow(beta, grad)))), tf.math.square(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(grad, beta), grad)))), grad)), tf.math.negative(tf.math.add(tf.math.sqrt(grad), tf.math.add(tf.math.multiply(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(grad, grad))), tf.math.pow(tf.math.negative(alpha), tf.math.square(tf.math.square(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.add(sigma, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [5, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 77], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0], [0, 2, 3, 1, 3, 3, 5, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 16], [0, 1, 1, 0], [0, 7], [4, 5], [0], [0, 1], [0], [2], [0]], "fitness": -0.09057142585515976, "mapping_values": [1, 11, 6, 5, 3, 12, 6, 6, 3, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.310474157333374, 2.3087167739868164, 2.309842109680176, 2.3091957569122314, 2.30979061126709, 2.309485673904419], "accuracy": [0.0948355570435524, 0.09509972482919693, 0.09338264167308807, 0.08942015469074249, 0.09179764986038208, 0.09602430462837219], "val_loss": [2.3090481758117676, 2.3090481758117676, 2.3090479373931885, 2.3090479373931885, 2.3090479373931885, 2.3090479373931885], "val_accuracy": [0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601]}}]