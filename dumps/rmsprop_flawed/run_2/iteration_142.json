[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8368571400642395, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.543135166168213, 0.8235073089599609, 0.7082327604293823, 0.6615703105926514, 0.6065121293067932, 0.5648337602615356, 0.5244166851043701, 0.5287197232246399, 0.531404435634613, 0.48629045486450195, 0.5031134486198425, 0.5075057148933411, 0.5024749040603638, 0.4528937041759491, 0.46292799711227417, 0.46800634264945984, 0.5128961205482483, 0.4712860882282257, 0.5341248512268066, 0.4933346211910248, 0.4959423243999481, 0.507518470287323, 0.5045382380485535, 0.543139636516571], "accuracy": [0.4752344489097595, 0.7152291536331177, 0.7494386434555054, 0.7685906887054443, 0.7717606425285339, 0.7923656105995178, 0.8099326491355896, 0.8115176558494568, 0.8068947196006775, 0.8181217908859253, 0.8234050869941711, 0.8222163319587708, 0.8193105459213257, 0.833179235458374, 0.832650899887085, 0.8383304476737976, 0.8274996876716614, 0.8441421389579773, 0.8284242749214172, 0.8343679904937744, 0.8400475382804871, 0.8244617581367493, 0.8457271456718445, 0.8301413059234619], "val_loss": [0.8545159697532654, 0.5752348899841309, 0.5602513551712036, 0.5529500842094421, 0.5112780928611755, 0.5054785013198853, 0.509614109992981, 0.504004716873169, 0.48026004433631897, 0.5003407001495361, 0.5313379764556885, 0.541939914226532, 0.5111197829246521, 0.5650440454483032, 0.6077162027359009, 0.6083052158355713, 0.6118905544281006, 0.6386910676956177, 0.5796390771865845, 0.6451314091682434, 0.5963678359985352, 0.7018537521362305, 0.7033403515815735, 0.6030322909355164], "val_accuracy": [0.7179999947547913, 0.8023333549499512, 0.8056666851043701, 0.8100000023841858, 0.8253333568572998, 0.8223333358764648, 0.8386666774749756, 0.8343333601951599, 0.8336666822433472, 0.8353333473205566, 0.8256666660308838, 0.8399999737739563, 0.8309999704360962, 0.8396666646003723, 0.8416666388511658, 0.8429999947547913, 0.8399999737739563, 0.843666672706604, 0.8460000157356262, 0.8363333344459534, 0.8330000042915344, 0.8446666598320007, 0.8410000205039978, 0.8360000252723694]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [0, 2, 3, 1, 3, 5, 8, 3, 2, 5, 9, 1, 5, 5, 9, 2, 4, 1, 4, 3, 1, 8, 4, 3, 8, 4, 2, 8, 3, 8, 0, 6, 6, 6, 8, 5], [2, 0, 1, 0, 2, 0, 2, 1, 3, 2, 1, 0, 2, 2, 3, 3, 1, 3, 0, 0], [48, 77, 39, 80, 94, 52, 31, 83], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 5, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 6, 5, 8, 8, 0, 2, 2], [0, 6, 1, 0, 3], [0, 46], [0, 1], [0], [3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 56, 36, 20, 8, 2, 1, 1, 1, 14, 9, 5, 2, 2, 1, 1, 0], "tree_depth": 36, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(grad, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(alpha, tf.math.multiply(tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.square(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.square(tf.math.square(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.pow(tf.math.subtract(grad, tf.math.pow(tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(grad), alpha)), tf.math.pow(tf.math.multiply(grad, tf.math.sqrt(grad)), tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), grad)))), tf.math.multiply(tf.math.sqrt(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(grad, alpha))))), grad)), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 6, 3, 1, 3, 2, 2, 8, 0], [0, 0, 1, 1, 2, 3, 1], [27, 83, 39, 79], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8, 5], [3, 1, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 2, 17, 10, 7, 2, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), alpha), tf.math.negative(grad))), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(grad, alpha), tf.math.multiply(tf.math.sqrt(beta), tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.sqrt(grad), tf.math.square(alpha))), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 0, 3, 2], [0, 39, 39, 79], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 2, 2, 1], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.09371428936719894, "mapping_values": [1, 15, 8, 7, 4, 6, 3, 3, 2, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), grad), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3089513778686523, 2.310431718826294, 2.3097259998321533, 2.3093340396881104, 2.308295488357544, 2.309892416000366], "accuracy": [0.09298639744520187, 0.09153348207473755, 0.09655263274908066, 0.09285431355237961, 0.09879804402589798, 0.09219389408826828], "val_loss": [2.3084325790405273, 2.3084325790405273, 2.3084325790405273, 2.3084325790405273, 2.3084325790405273, 2.3084325790405273], "val_accuracy": [0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 0, 3, 2], [61, 39, 39, 4], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2, 7, 5, 4], [0, 0, 2, 0, 3, 1, 0, 5, 4], [51, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.08971428871154785, "mapping_values": [1, 14, 7, 7, 4, 15, 8, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309769868850708, 2.3094024658203125, 2.3096823692321777, 2.309690237045288, 2.3099167346954346, 2.310333728790283], "accuracy": [0.09100515395402908, 0.09140139818191528, 0.0952318087220192, 0.09206181764602661, 0.09219389408826828, 0.09008057415485382], "val_loss": [2.308934211730957, 2.308934211730957, 2.308934211730957, 2.308934211730957, 2.308934211730957, 2.308934211730957], "val_accuracy": [0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341]}}]