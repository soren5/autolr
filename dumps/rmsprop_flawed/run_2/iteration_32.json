[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8605714440345764, "mapping_values": [1, 16, 9, 7, 4, 15, 8, 7, 4, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5848698616027832, 0.8634531497955322, 0.7267534136772156, 0.6388319134712219, 0.5949017405509949, 0.5652888417243958, 0.5312777757644653, 0.5059605240821838, 0.49188661575317383, 0.4750465154647827, 0.4633360207080841, 0.4521574079990387, 0.43985533714294434, 0.4290573298931122, 0.41240397095680237, 0.406855970621109, 0.4072006046772003, 0.3955540359020233, 0.38211870193481445, 0.3747725486755371, 0.3722988963127136, 0.3670109212398529, 0.36135682463645935, 0.3522881865501404, 0.35751911997795105, 0.34448763728141785, 0.3434971272945404, 0.3416890501976013, 0.33151769638061523, 0.3255850076675415, 0.3213435709476471, 0.32207241654396057, 0.3131572902202606], "accuracy": [0.44591203331947327, 0.6925109028816223, 0.7338528633117676, 0.7684586048126221, 0.7825914621353149, 0.7971205711364746, 0.8108572363853455, 0.8162726163864136, 0.8198388814926147, 0.8290846943855286, 0.8397833704948425, 0.8355567455291748, 0.8449346423149109, 0.8466516733169556, 0.8573504090309143, 0.8555012345314026, 0.8562937378883362, 0.8601241707801819, 0.8650112152099609, 0.8692378997802734, 0.8691058158874512, 0.8765024542808533, 0.8673887252807617, 0.8750495314598083, 0.8766345381736755, 0.8786157965660095, 0.8762382864952087, 0.8767666220664978, 0.8864086866378784, 0.8841632604598999, 0.8842953443527222, 0.8908994793891907, 0.8878615498542786], "val_loss": [0.8584741353988647, 0.6581432223320007, 0.6094487309455872, 0.5580034852027893, 0.5117682814598083, 0.5078674554824829, 0.4834854304790497, 0.47689273953437805, 0.45379379391670227, 0.4605327248573303, 0.4379768967628479, 0.45279598236083984, 0.4216359555721283, 0.4329746961593628, 0.4164107143878937, 0.4244106709957123, 0.41172388195991516, 0.40532657504081726, 0.40834710001945496, 0.4001820385456085, 0.3933616578578949, 0.39905664324760437, 0.38959020376205444, 0.4089116156101227, 0.38486355543136597, 0.38582512736320496, 0.38211479783058167, 0.38379165530204773, 0.3860560655593872, 0.3785111904144287, 0.382414847612381, 0.37823498249053955, 0.38005053997039795], "val_accuracy": [0.6946666836738586, 0.7543333172798157, 0.7713333368301392, 0.7986666560173035, 0.8103333115577698, 0.8196666836738586, 0.8256666660308838, 0.8293333053588867, 0.8410000205039978, 0.8336666822433472, 0.8399999737739563, 0.8410000205039978, 0.8510000109672546, 0.8403333425521851, 0.8550000190734863, 0.8500000238418579, 0.8519999980926514, 0.8573333621025085, 0.8543333411216736, 0.8616666793823242, 0.8646666407585144, 0.859000027179718, 0.862333357334137, 0.8479999899864197, 0.8663333058357239, 0.8633333444595337, 0.8663333058357239, 0.8713333606719971, 0.8640000224113464, 0.8676666617393494, 0.8659999966621399, 0.8686666488647461, 0.8656666874885559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8302857279777527, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5321354866027832, 0.8253349661827087, 0.6818668842315674, 0.6383212804794312, 0.5933293104171753, 0.5610043406486511, 0.522729218006134, 0.5113537907600403, 0.5121833682060242, 0.5368015766143799, 0.522120475769043, 0.5309647917747498], "accuracy": [0.4761590361595154, 0.7201162576675415, 0.7569673657417297, 0.7622507214546204, 0.7777044177055359, 0.7897239327430725, 0.8101968169212341, 0.8162726163864136, 0.8050455451011658, 0.8014793395996094, 0.8190463781356812, 0.8129705190658569], "val_loss": [0.8218834400177002, 0.6114018559455872, 0.5465588569641113, 0.538132905960083, 0.5043357610702515, 0.493061363697052, 0.5105860829353333, 0.5078863501548767, 0.5328634977340698, 0.5397870540618896, 0.5414403676986694, 0.5217214226722717], "val_accuracy": [0.7226666808128357, 0.7823333144187927, 0.7976666688919067, 0.7926666736602783, 0.8246666789054871, 0.824999988079071, 0.8316666483879089, 0.8216666579246521, 0.8213333487510681, 0.8293333053588867, 0.812666654586792, 0.8203333616256714]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [6, 6, 3, 1, 3, 2, 0, 8, 0, 6, 3, 0, 6, 7, 8, 7, 5, 6, 1, 7, 8, 5, 2, 6, 3, 4, 3, 7, 8, 1, 2, 1, 3, 1, 8], [0, 1, 1, 0, 2, 1, 1, 0, 0, 2, 3, 0, 1, 2, 2, 1, 0, 0, 3, 1, 1, 3, 2, 2, 0, 0], [0, 39, 39, 91, 18, 71, 8, 86, 85], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 1, 6, 3, 8, 5], [4, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 0, 1], [0], [1], [0], [2], [0]], "fitness": -0.14800000190734863, "mapping_values": [1, 61, 35, 26, 9, 2, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.subtract(alpha, tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.multiply(alpha, alpha))))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.math.add(grad, tf.math.sqrt(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.square(alpha)))), tf.math.add(tf.math.divide_no_nan(grad, tf.math.multiply(grad, tf.math.pow(alpha, tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), grad))))), tf.math.subtract(alpha, tf.math.add(tf.math.subtract(tf.math.multiply(alpha, grad), grad), tf.math.subtract(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [12.004404067993164, 4.841040134429932, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.19270901381969452, 0.10460969805717468, 0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.195648193359375, 1899763.75, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.15333333611488342, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 0, 1, 0], [0, 39, 39, 79, 8], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 3, 4, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 2, 0], [6, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 0, 1], [6], [1], [0], [2], [0]], "fitness": -0.09200000017881393, "mapping_values": [1, 16, 9, 7, 5, 15, 8, 7, 4, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.negative(alpha)), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.subtract(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(beta, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310668706893921, 2.3103392124176025, 2.3106462955474854, 2.3112189769744873, 2.3099112510681152, 2.3106698989868164], "accuracy": [0.08955223858356476, 0.09179764986038208, 0.09113723784685135, 0.09179764986038208, 0.09311848133802414, 0.09338264167308807], "val_loss": [2.309030055999756, 2.309030055999756, 2.309030055999756, 2.309030055999756, 2.309030055999756, 2.309030055999756], "val_accuracy": [0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 1, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 31], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 76, 85, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.09142857044935226, "mapping_values": [1, 15, 8, 7, 4, 15, 8, 7, 4, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(tf.math.subtract(alpha, tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), tf.math.sqrt(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.311203956604004, 2.308598279953003, 2.309959650039673, 2.3104183673858643, 2.310169219970703, 2.3092920780181885], "accuracy": [0.08770307898521423, 0.09642054885625839, 0.09285431355237961, 0.09219389408826828, 0.08955223858356476, 0.09853387624025345], "val_loss": [2.30912446975708, 2.30912446975708, 2.30912446975708, 2.30912446975708, 2.30912446975708, 2.30912446975708], "val_accuracy": [0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 6, 3, 9, 3, 2, 1, 8, 0], [3, 0, 1, 0, 2, 3, 0], [30, 39, 39, 79], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [6, 5, 3, 1, 6, 3, 8, 2], [5, 2, 2, 0, 3, 5, 0], [0, 2, 16, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 2, 8, 4, 8, 7], [0, 6, 1], [99], [1], [0], [2], [0]], "fitness": -0.09142857044935226, "mapping_values": [1, 6, 3, 3, 1, 6, 3, 3, 0, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(grad, tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.square(grad), tf.math.multiply(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310439348220825, 2.3094775676727295, 2.309821367263794, 2.3111722469329834, 2.3101563453674316, 2.309788703918457], "accuracy": [0.08836349099874496, 0.09642054885625839, 0.09338264167308807, 0.09470347315073013, 0.09272222965955734, 0.09509972482919693], "val_loss": [2.3087093830108643, 2.3087093830108643, 2.3087093830108643, 2.3087093830108643, 2.3087093830108643, 2.3087093830108643], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}]