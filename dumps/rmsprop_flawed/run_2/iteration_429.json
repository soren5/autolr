[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8171428442001343, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4661500453948975, 0.7559043169021606, 0.624194324016571, 0.5906469821929932, 0.5637680292129517, 0.5496001243591309, 0.5005117654800415, 0.4988473057746887, 0.4811335504055023, 0.4856402575969696, 0.48767349123954773, 0.491459459066391, 0.5132794976234436, 0.46567562222480774, 0.47067558765411377, 0.46425333619117737, 0.47014057636260986, 0.48243004083633423, 0.4939562976360321, 0.5121343731880188, 0.5369397401809692, 0.5666607618331909, 0.5072452425956726], "accuracy": [0.49465063214302063, 0.7300224304199219, 0.7729493975639343, 0.7783648371696472, 0.7944789528846741, 0.7972526550292969, 0.8131026029586792, 0.8178576231002808, 0.8238013386726379, 0.8197067975997925, 0.8305375576019287, 0.8265751004219055, 0.8445383906364441, 0.8360850811004639, 0.8359529972076416, 0.8397833704948425, 0.8352925777435303, 0.8448025584220886, 0.8387266993522644, 0.8216879963874817, 0.8315942287445068, 0.8189142942428589, 0.8450667262077332], "val_loss": [0.738095760345459, 0.5829828381538391, 0.5254724025726318, 0.5354828834533691, 0.4910399317741394, 0.48034101724624634, 0.46972769498825073, 0.48563119769096375, 0.47591572999954224, 0.49487191438674927, 0.49638211727142334, 0.5240254998207092, 0.5779587626457214, 0.5065470337867737, 0.5309359431266785, 0.5680789351463318, 0.557015597820282, 0.6412337422370911, 0.5728894472122192, 0.531098484992981, 0.5912978649139404, 0.5504425168037415, 0.6049798130989075], "val_accuracy": [0.7310000061988831, 0.7826666831970215, 0.809333324432373, 0.8146666884422302, 0.8153333067893982, 0.8386666774749756, 0.8376666903495789, 0.8386666774749756, 0.8423333168029785, 0.847000002861023, 0.8460000157356262, 0.8399999737739563, 0.8506666421890259, 0.846666693687439, 0.8483333587646484, 0.8496666550636292, 0.8349999785423279, 0.8526666760444641, 0.8506666421890259, 0.8410000205039978, 0.8443333506584167, 0.8500000238418579, 0.8316666483879089]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 0, 1, 3, 2, 3, 8, 3], [0, 0, 1, 0, 2, 3, 0], [0, 1, 39, 79], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 1, 6, 3, 4, 2, 8], [0, 0, 2, 3, 3, 2, 0, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.1348571479320526, "mapping_values": [1, 16, 9, 7, 4, 17, 9, 8, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.multiply(grad, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), beta)), tf.math.divide_no_nan(tf.math.multiply(grad, grad), tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.constant(0.0, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.307643175125122, 2.3030197620391846, 2.301820993423462, 2.302401304244995, 2.3029963970184326, 2.3029987812042236, 2.303163528442383, 2.3034884929656982], "accuracy": [0.09206181764602661, 0.09232597798109055, 0.10315678268671036, 0.10566636174917221, 0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3043649196624756, 2.301487445831299, 2.30206298828125, 2.302687168121338, 2.3027305603027344, 2.3028759956359863, 2.3031342029571533, 2.303511381149292], "val_accuracy": [0.08933333307504654, 0.07900000363588333, 0.13199999928474426, 0.09433333575725555, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 5, 8, 0], [0, 0, 1, 0, 2, 0, 0], [0, 39, 39, 79], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 6, 1, 8, 2, 8, 9, 2], [0, 2, 3, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 4, 18, 11, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), beta), tf.math.subtract(tf.math.sqrt(grad), tf.math.add(tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(grad, alpha)), tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 6, 3, 1, 5, 2, 3, 8, 0], [3, 3, 1, 2, 2, 2, 0], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 2, 2, 0, 0, 1, 0], [0, 27, 16, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 1, 5, 8, 8, 2, 6, 3, 4, 3, 6, 7, 2, 1, 0, 4, 6, 2, 0], [2, 0, 1, 5, 7, 3, 4, 6, 7, 0, 6, 6, 0, 0, 6], [0, 26, 78, 76], [1], [0], [2], [0]], "fitness": -0.09057142585515976, "mapping_values": [1, 9, 5, 4, 0, 15, 8, 7, 4, 35, 20, 15, 4, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(grad, grad), alpha), tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), beta), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.square(tf.math.sqrt(beta)), tf.math.sqrt(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.pow(grad, grad)), tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(sigma, grad), grad), grad), tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad)))))), tf.math.negative(tf.math.pow(grad, tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3083014488220215, 2.310595989227295, 2.3102097511291504, 2.3098952770233154, 2.309527635574341, 2.309194564819336], "accuracy": [0.09259014576673508, 0.09285431355237961, 0.09351472556591034, 0.08955223858356476, 0.09298639744520187, 0.08968432247638702], "val_loss": [2.3081610202789307, 2.3081610202789307, 2.3081610202789307, 2.3081610202789307, 2.3081610202789307, 2.3081610202789307], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0, 2, 1, 4, 1, 3, 2, 3, 6, 3, 5, 2, 2, 5, 1, 6, 0, 6, 7, 8, 8, 7, 7, 2, 2, 9, 6, 0, 0, 8, 9, 1, 9, 8, 9, 1, 0, 6, 3, 7, 2, 1, 0, 3], [0, 1, 1, 0, 2, 3, 0, 3, 1, 0, 3, 2, 0, 3, 2, 3, 0, 0, 3, 1, 2, 3, 3, 1, 1, 2, 0, 1, 0, 3, 1], [0, 39, 39, 79, 52, 89, 29, 83, 48, 35, 99, 19, 94], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 4, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.08885714411735535, "mapping_values": [1, 83, 52, 31, 13, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.negative(alpha)), alpha), tf.math.add(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), tf.math.pow(tf.math.subtract(grad, tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.add(grad, tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), grad)), tf.math.subtract(tf.math.divide_no_nan(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(grad, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.negative(alpha)))), tf.math.sqrt(grad)), grad)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.negative(tf.math.divide_no_nan(grad, alpha)), alpha)), tf.math.multiply(tf.math.add(grad, tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.negative(tf.math.multiply(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), grad))), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309635639190674, 2.3106296062469482, 2.3096632957458496, 2.310464859008789, 2.3103110790252686, 2.311084270477295], "accuracy": [0.09298639744520187, 0.09589222073554993, 0.09338264167308807, 0.09509972482919693, 0.09774138033390045, 0.0882314071059227], "val_loss": [2.3092689514160156, 2.3092689514160156, 2.3092689514160156, 2.3092689514160156, 2.3092689514160156, 2.3092689514160156], "val_accuracy": [0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179]}}]