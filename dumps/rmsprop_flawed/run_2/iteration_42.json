[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8605714440345764, "mapping_values": [1, 16, 9, 7, 4, 15, 8, 7, 4, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5848698616027832, 0.8634531497955322, 0.7267534136772156, 0.6388319134712219, 0.5949017405509949, 0.5652888417243958, 0.5312777757644653, 0.5059605240821838, 0.49188661575317383, 0.4750465154647827, 0.4633360207080841, 0.4521574079990387, 0.43985533714294434, 0.4290573298931122, 0.41240397095680237, 0.406855970621109, 0.4072006046772003, 0.3955540359020233, 0.38211870193481445, 0.3747725486755371, 0.3722988963127136, 0.3670109212398529, 0.36135682463645935, 0.3522881865501404, 0.35751911997795105, 0.34448763728141785, 0.3434971272945404, 0.3416890501976013, 0.33151769638061523, 0.3255850076675415, 0.3213435709476471, 0.32207241654396057, 0.3131572902202606], "accuracy": [0.44591203331947327, 0.6925109028816223, 0.7338528633117676, 0.7684586048126221, 0.7825914621353149, 0.7971205711364746, 0.8108572363853455, 0.8162726163864136, 0.8198388814926147, 0.8290846943855286, 0.8397833704948425, 0.8355567455291748, 0.8449346423149109, 0.8466516733169556, 0.8573504090309143, 0.8555012345314026, 0.8562937378883362, 0.8601241707801819, 0.8650112152099609, 0.8692378997802734, 0.8691058158874512, 0.8765024542808533, 0.8673887252807617, 0.8750495314598083, 0.8766345381736755, 0.8786157965660095, 0.8762382864952087, 0.8767666220664978, 0.8864086866378784, 0.8841632604598999, 0.8842953443527222, 0.8908994793891907, 0.8878615498542786], "val_loss": [0.8584741353988647, 0.6581432223320007, 0.6094487309455872, 0.5580034852027893, 0.5117682814598083, 0.5078674554824829, 0.4834854304790497, 0.47689273953437805, 0.45379379391670227, 0.4605327248573303, 0.4379768967628479, 0.45279598236083984, 0.4216359555721283, 0.4329746961593628, 0.4164107143878937, 0.4244106709957123, 0.41172388195991516, 0.40532657504081726, 0.40834710001945496, 0.4001820385456085, 0.3933616578578949, 0.39905664324760437, 0.38959020376205444, 0.4089116156101227, 0.38486355543136597, 0.38582512736320496, 0.38211479783058167, 0.38379165530204773, 0.3860560655593872, 0.3785111904144287, 0.382414847612381, 0.37823498249053955, 0.38005053997039795], "val_accuracy": [0.6946666836738586, 0.7543333172798157, 0.7713333368301392, 0.7986666560173035, 0.8103333115577698, 0.8196666836738586, 0.8256666660308838, 0.8293333053588867, 0.8410000205039978, 0.8336666822433472, 0.8399999737739563, 0.8410000205039978, 0.8510000109672546, 0.8403333425521851, 0.8550000190734863, 0.8500000238418579, 0.8519999980926514, 0.8573333621025085, 0.8543333411216736, 0.8616666793823242, 0.8646666407585144, 0.859000027179718, 0.862333357334137, 0.8479999899864197, 0.8663333058357239, 0.8633333444595337, 0.8663333058357239, 0.8713333606719971, 0.8640000224113464, 0.8676666617393494, 0.8659999966621399, 0.8686666488647461, 0.8656666874885559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.829714298248291, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.504042387008667, 0.7708191871643066, 0.639817476272583, 0.6066692471504211, 0.561042308807373, 0.5455899834632874, 0.505969226360321, 0.4949532747268677, 0.4754086136817932, 0.508425235748291, 0.532479465007782, 0.5000061392784119, 0.5319451093673706, 0.5074646472930908, 0.4921751618385315, 0.4615664482116699, 0.4672386944293976], "accuracy": [0.47404569387435913, 0.7201162576675415, 0.76106196641922, 0.776251494884491, 0.7943468689918518, 0.8042530417442322, 0.8145555257797241, 0.8285563588142395, 0.8281601071357727, 0.8251221776008606, 0.8197067975997925, 0.8224804997444153, 0.832650899887085, 0.8308017253875732, 0.8319904804229736, 0.8276317715644836, 0.8305375576019287], "val_loss": [0.737400472164154, 0.575346827507019, 0.5627944469451904, 0.5132060050964355, 0.5598040223121643, 0.49601253867149353, 0.4828658401966095, 0.4997529685497284, 0.5308672785758972, 0.5763662457466125, 0.5109266638755798, 0.5450582504272461, 0.5296861529350281, 0.5176174640655518, 0.5809940695762634, 0.5128939747810364, 0.5987831950187683], "val_accuracy": [0.7296666502952576, 0.7756666541099548, 0.7839999794960022, 0.8090000152587891, 0.8183333277702332, 0.8146666884422302, 0.8486666679382324, 0.8339999914169312, 0.8330000042915344, 0.8226666450500488, 0.8153333067893982, 0.8510000109672546, 0.8379999995231628, 0.8443333506584167, 0.828000009059906, 0.8343333601951599, 0.8486666679382324]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 5, 9, 8, 8], [2, 0, 1, 1, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 4, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 3], [0, 76, 49, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 2, 4, 6, 8, 8], [0, 6, 1, 7], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 8, 3, 2, 10, 5, 5, 3, 9, 5, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, alpha)), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0, 2, 0, 6, 2], [3, 0, 1, 0, 1, 0, 2, 3, 2, 0], [77, 30, 39, 67], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 3, 1, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 30, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [3, 2, 1, 7, 8, 8], [0, 6, 1], [43], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0], [0, 7, 2, 2, 7, 1, 6, 2, 6, 3, 6, 6, 7, 9, 6, 7, 1, 9], [2, 7, 6, 0, 1, 3, 4, 7, 5, 5, 2, 7, 1, 1], [0, 84, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 13, 10, 4, 6, 3, 3, 2, 1, 0, 1, 1, 32, 18, 14, 3], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.multiply(grad, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)))), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(grad, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(grad, tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.subtract(alpha, tf.math.divide_no_nan(sigma, tf.math.add(grad, tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(grad, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, grad)), beta), grad), tf.math.add(tf.math.subtract(alpha, alpha), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))))))))", "other_info": {"loss": [1.4899790071985842e+22, 456338702336.0, 1.7399437532898263e+18, 1.6451137253406e+25, 6.289313749681835e+31, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09272222965955734, 0.09959053993225098, 0.10289261490106583, 0.10566636174917221, 0.1010434553027153, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [10090579.0, 34730783277056.0, 2.825708467559208e+20, 1.8177017257603296e+27, 5.784297735451666e+33, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09933333098888397, 0.09600000083446503, 0.09600000083446503, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 4, 3, 1, 3, 5, 7, 8, 1, 4, 9, 4, 8, 8], [0, 0, 1, 0, 2, 0, 0, 3], [0, 81, 39, 40, 92, 48], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 2, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 76, 89, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 0, 1], [43], [0, 1], [0], [2], [0]], "fitness": -0.0908571407198906, "mapping_values": [1, 22, 14, 8, 6, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(grad))))), lambda shape,  alpha, beta, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3091211318969727, 2.3107337951660156, 2.310697078704834, 2.309044361114502, 2.3105432987213135, 2.310439348220825], "accuracy": [0.09628847241401672, 0.09298639744520187, 0.09192973375320435, 0.09325055778026581, 0.08770307898521423, 0.09008057415485382], "val_loss": [2.308760166168213, 2.308760166168213, 2.308760166168213, 2.308760166168213, 2.308760166168213, 2.308760166168213], "val_accuracy": [0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 9, 6, 4, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 10, 54], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 2, 9, 3, 8, 2], [0, 0, 2, 1, 3, 0, 0], [0, 76, 16, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 2, 5, 8, 8], [0, 0, 1], [67, 50], [1], [0], [2], [0]], "fitness": -0.087714284658432, "mapping_values": [1, 15, 9, 6, 4, 8, 4, 4, 2, 6, 3, 3, 2, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))), grad), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3098695278167725, 2.3095743656158447, 2.3095626831054688, 2.3102915287017822, 2.309915542602539, 2.3099682331085205], "accuracy": [0.0940430611371994, 0.0956280529499054, 0.09338264167308807, 0.09325055778026581, 0.09259014576673508, 0.09153348207473755], "val_loss": [2.3088884353637695, 2.3088884353637695, 2.3088884353637695, 2.3088884353637695, 2.3088884353637695, 2.3088884353637695], "val_accuracy": [0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133, 0.09466666728258133]}}]