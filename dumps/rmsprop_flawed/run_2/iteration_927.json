[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 2, 0, 2, 3, 0], [0, 0, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8705714344978333, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5512858629226685, 0.8510552644729614, 0.7016775608062744, 0.6237209439277649, 0.5821314454078674, 0.547208845615387, 0.5340997576713562, 0.4954749047756195, 0.4879302382469177, 0.4750159680843353, 0.464155375957489, 0.43654102087020874, 0.4345057010650635, 0.42416295409202576, 0.4218352735042572, 0.40638378262519836, 0.3975018262863159, 0.38346147537231445, 0.3821600079536438, 0.37754255533218384, 0.36753448843955994, 0.36219143867492676, 0.36691373586654663, 0.35669368505477905, 0.34435534477233887, 0.3470633029937744, 0.342456579208374, 0.3326220214366913, 0.3303578794002533, 0.3239966034889221, 0.32227692008018494, 0.3150063455104828, 0.31437423825263977, 0.31242167949676514, 0.30629801750183105, 0.29891934990882874, 0.2982904314994812, 0.28855302929878235, 0.2884645164012909, 0.2830703854560852, 0.28534382581710815, 0.2851825952529907, 0.2764415442943573, 0.27993178367614746, 0.274874746799469, 0.2680070102214813, 0.26923298835754395, 0.265153706073761, 0.26777806878089905], "accuracy": [0.44868576526641846, 0.6963412761688232, 0.7405890822410583, 0.7765156626701355, 0.7910447716712952, 0.8049134612083435, 0.8074230551719666, 0.8239334225654602, 0.8280280232429504, 0.8352925777435303, 0.8342359066009521, 0.8449346423149109, 0.8506141901016235, 0.8491612672805786, 0.852331280708313, 0.8603883385658264, 0.8593316674232483, 0.8684453964233398, 0.8652753829956055, 0.8661999702453613, 0.871879518032074, 0.8721436858177185, 0.8697662353515625, 0.8765024542808533, 0.8768987059593201, 0.8790120482444763, 0.8825782537460327, 0.883238673210144, 0.8845595121383667, 0.8870691061019897, 0.8844274282455444, 0.8864086866378784, 0.886672854423523, 0.8920882344245911, 0.8938053250312805, 0.8943336606025696, 0.8951261639595032, 0.8997490406036377, 0.9030511379241943, 0.9035794734954834, 0.898428201675415, 0.8980319499969482, 0.9013340473175049, 0.9021265506744385, 0.9027869701385498, 0.90423983335495, 0.904768168926239, 0.9054285883903503, 0.9052965044975281], "val_loss": [0.840986967086792, 0.6267140507698059, 0.574476957321167, 0.5294004678726196, 0.5022740960121155, 0.511115312576294, 0.46744999289512634, 0.45950981974601746, 0.44837090373039246, 0.45240384340286255, 0.4301520586013794, 0.4280205965042114, 0.4285690188407898, 0.4100751578807831, 0.41895177960395813, 0.4022582173347473, 0.397126704454422, 0.3990853726863861, 0.38733285665512085, 0.3857741355895996, 0.38053783774375916, 0.389681875705719, 0.37624555826187134, 0.37723469734191895, 0.37232035398483276, 0.3733031451702118, 0.36915725469589233, 0.36601492762565613, 0.363965779542923, 0.3647385239601135, 0.358620285987854, 0.37234917283058167, 0.3564335107803345, 0.3555355668067932, 0.3561009466648102, 0.35199642181396484, 0.36020857095718384, 0.3490610420703888, 0.35322603583335876, 0.3503186106681824, 0.3550361394882202, 0.3568679988384247, 0.349976122379303, 0.3426620364189148, 0.34771573543548584, 0.34373149275779724, 0.3420546054840088, 0.3522103726863861, 0.34236544370651245], "val_accuracy": [0.7036666870117188, 0.7680000066757202, 0.7770000100135803, 0.8026666641235352, 0.8109999895095825, 0.8100000023841858, 0.8303333520889282, 0.8303333520889282, 0.8339999914169312, 0.8379999995231628, 0.843666672706604, 0.8523333072662354, 0.8456666469573975, 0.8523333072662354, 0.8513333201408386, 0.8500000238418579, 0.862666666507721, 0.8529999852180481, 0.8610000014305115, 0.8629999756813049, 0.8579999804496765, 0.8610000014305115, 0.8616666793823242, 0.862333357334137, 0.8673333525657654, 0.862333357334137, 0.8709999918937683, 0.8683333396911621, 0.8709999918937683, 0.8703333139419556, 0.8736666440963745, 0.871666669845581, 0.8740000128746033, 0.8756666779518127, 0.8663333058357239, 0.8736666440963745, 0.8673333525657654, 0.8763333559036255, 0.8793333172798157, 0.8809999823570251, 0.8713333606719971, 0.8676666617393494, 0.8813333511352539, 0.8820000290870667, 0.8776666522026062, 0.8786666393280029, 0.878333330154419, 0.875333309173584, 0.8799999952316284]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8320000171661377, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6553983688354492, 0.9139101505279541, 0.7040119171142578, 0.6178990006446838, 0.5684298872947693, 0.523925244808197, 0.5119335651397705, 0.5098201036453247, 0.4981231689453125, 0.5093780755996704, 0.536859393119812, 0.5017443299293518, 0.5235190391540527, 0.5284894108772278, 0.5225127935409546, 0.47611796855926514, 0.4946642518043518, 0.47534796595573425, 0.4853350520133972, 0.5476822853088379, 0.5236175060272217, 0.5134116411209106, 0.5637110471725464], "accuracy": [0.47312110662460327, 0.6863030195236206, 0.7461365461349487, 0.7660810947418213, 0.7858935594558716, 0.8063663840293884, 0.8053097128868103, 0.8202351331710815, 0.817989706993103, 0.8193105459213257, 0.8185180425643921, 0.8259146809577942, 0.8252542614936829, 0.8239334225654602, 0.8169330358505249, 0.83119797706604, 0.8290846943855286, 0.8333113193511963, 0.8401796221733093, 0.8277638554573059, 0.8301413059234619, 0.8412362933158875, 0.8247259259223938], "val_loss": [1.0128237009048462, 0.6377403736114502, 0.5801810622215271, 0.5243026614189148, 0.5027228593826294, 0.5000637173652649, 0.50356125831604, 0.47921085357666016, 0.48158934712409973, 0.5185006856918335, 0.5343632698059082, 0.6108846664428711, 0.5335167050361633, 0.5038553476333618, 0.5594159960746765, 0.5735201239585876, 0.587368905544281, 0.5807196497917175, 0.5929286479949951, 0.6107660531997681, 0.6604509949684143, 0.5926244854927063, 0.6172565817832947], "val_accuracy": [0.6993333101272583, 0.7666666507720947, 0.7883333563804626, 0.8149999976158142, 0.8220000267028809, 0.8183333277702332, 0.8209999799728394, 0.8286666870117188, 0.8333333134651184, 0.8303333520889282, 0.8266666531562805, 0.8276666402816772, 0.8370000123977661, 0.8353333473205566, 0.8353333473205566, 0.8336666822433472, 0.8259999752044678, 0.8420000076293945, 0.8370000123977661, 0.8353333473205566, 0.8363333344459534, 0.8353333473205566, 0.8339999914169312]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 3, 2, 0, 2, 3, 0], [0, 39, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [8, 2, 3, 1, 6, 3, 8, 2, 0, 9, 6, 5, 3], [0, 0, 2, 0, 3, 1, 4, 0], [0, 4, 16, 0, 61], [0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8, 9], [0, 6, 1], [0, 99], [1], [0], [6], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 21, 13, 8, 5, 9, 7, 2, 2, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), beta)), tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.constant(0.0, shape=shape, dtype=tf.float32))), grad), tf.math.divide_no_nan(alpha, tf.math.square(tf.math.multiply(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.square(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.959402322769165, 42.35024642944336, 2.305438756942749, 2.3035240173339844, 2.3029706478118896, 2.302971124649048, 2.303058385848999, 2.302968978881836, 2.3029978275299072, 2.303072214126587, 2.3029911518096924, 2.3031601905822754, 2.303044557571411, 2.3029134273529053, 2.3029704093933105], "accuracy": [0.19376568496227264, 0.1018359512090683, 0.09826971590518951, 0.09866596013307571, 0.09457138925790787, 0.1018359512090683, 0.09430722147226334, 0.1006472036242485, 0.09417514503002167, 0.0936468094587326, 0.09959053993225098, 0.09430722147226334, 0.0948355570435524, 0.09615638852119446, 0.09338264167308807], "val_loss": [6.737254619598389, 2.307565689086914, 2.3037168979644775, 2.3027994632720947, 2.302703857421875, 2.302640199661255, 2.3026654720306396, 2.302673578262329, 2.3026304244995117, 2.302628517150879, 2.3026227951049805, 2.3026390075683594, 2.3025920391082764, 2.3026115894317627, 2.3026208877563477], "val_accuracy": [0.09266666322946548, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.1003333330154419, 0.1003333330154419, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.10233332961797714, 0.09799999743700027, 0.10233332961797714, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 3, 1, 3, 2], [0, 39, 39], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [9, 2, 4, 1, 7, 3, 8, 6], [0, 0, 5, 0, 3, 1, 0], [26, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 1, 5, 8, 4], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 1, 1, 0, 1, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [30248.0390625, 4438912.5, 76132216.0, 543088448.0, 2352654848.0, 7699280896.0], "accuracy": [0.10077928751707077, 0.1002509593963623, 0.09708096832036972, 0.09826971590518951, 0.10355303436517715, 0.09919429570436478], "val_loss": [303872.59375, 16291105.0, 174691568.0, 952056320.0, 3565608704.0, 10516630528.0], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 8, 3, 2, 3, 8, 0], [0, 0, 2, 0, 2, 1, 1], [0, 0, 39, 79], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 3, 2, 8, 5, 2, 0, 1, 6, 1, 7, 3, 4, 4, 3, 1, 1, 3, 0, 8, 9], [0, 0, 2, 0, 3, 1, 0, 3, 4, 3, 3, 5, 1, 3, 1, 4, 4, 0, 3], [0, 76, 16, 0, 1, 50], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 45, 26, 19, 6, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.square(tf.math.add(grad, alpha))), tf.constant(0.0, shape=shape, dtype=tf.float32)))), grad), tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.subtract(grad, grad)), tf.math.add(grad, tf.math.multiply(tf.math.pow(tf.math.pow(alpha, grad), tf.math.multiply(alpha, tf.math.subtract(grad, tf.math.subtract(tf.math.multiply(grad, tf.math.negative(tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), grad)))))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15731078386306763, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 5, 1, 3, 8, 3, 8, 0], [0, 0, 2, 0, 2, 1, 0], [0, 0, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 2, 3, 1, 6, 3, 8, 3, 8, 2, 2, 9], [1, 0, 2, 0, 3, 1, 0, 2], [0, 89, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.0925714299082756, "mapping_values": [1, 2, 1, 1, 1, 20, 12, 8, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(tf.math.sqrt(grad), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(0.0, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310168981552124, 2.310192584991455, 2.3102519512176514, 2.309629440307617, 2.3101601600646973, 2.3093936443328857], "accuracy": [0.09192973375320435, 0.0952318087220192, 0.09206181764602661, 0.09642054885625839, 0.09457138925790787, 0.0866464152932167], "val_loss": [2.3097052574157715, 2.3097052574157715, 2.3097052574157715, 2.3097052574157715, 2.3097052574157715, 2.3097052574157715], "val_accuracy": [0.08566666394472122, 0.08566666394472122, 0.08566666394472122, 0.08566666394472122, 0.08566666394472122, 0.08566666394472122]}}]