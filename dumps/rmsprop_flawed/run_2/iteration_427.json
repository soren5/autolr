[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8308571577072144, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.8127952814102173, 1.0416685342788696, 0.797926127910614, 0.7213127017021179, 0.6645563244819641, 0.6300737857818604, 0.5987493991851807, 0.565919816493988, 0.5486623644828796, 0.5277441143989563, 0.5062595009803772, 0.4880537688732147, 0.4789532721042633, 0.5132750868797302, 0.48518699407577515, 0.4677198827266693, 0.4589064121246338, 0.45572856068611145, 0.4330381751060486, 0.4390357434749603, 0.49500563740730286, 0.5245670676231384, 0.5999053716659546, 0.6598871350288391], "accuracy": [0.4579315781593323, 0.6581693291664124, 0.7256637215614319, 0.7302865982055664, 0.7619865536689758, 0.7705719470977783, 0.7835160493850708, 0.7957997918128967, 0.8035926818847656, 0.8123101592063904, 0.8141592741012573, 0.8220842480659485, 0.83119797706604, 0.82683926820755, 0.8207634687423706, 0.8305375576019287, 0.826310932636261, 0.8374059200286865, 0.8383304476737976, 0.844010055065155, 0.8380662798881531, 0.8210275769233704, 0.7936864495277405, 0.8152159452438354], "val_loss": [0.9632113575935364, 0.7173302173614502, 0.6414323449134827, 0.6144124865531921, 0.5534423589706421, 0.5538549423217773, 0.5387192964553833, 0.475673109292984, 0.466830849647522, 0.5027866959571838, 0.5034520626068115, 0.4728166460990906, 0.5671456456184387, 0.5938776135444641, 0.544667661190033, 0.5298978090286255, 0.5186396241188049, 0.5025151968002319, 0.5032344460487366, 0.5076367855072021, 0.49331262707710266, 0.5673694610595703, 0.5775527954101562, 0.5733130574226379], "val_accuracy": [0.7093333601951599, 0.7540000081062317, 0.7753333449363708, 0.7923333048820496, 0.7923333048820496, 0.7973333597183228, 0.8149999976158142, 0.831333339214325, 0.828000009059906, 0.8289999961853027, 0.8366666436195374, 0.8353333473205566, 0.8403333425521851, 0.8323333263397217, 0.8386666774749756, 0.8379999995231628, 0.8433333039283752, 0.847000002861023, 0.8489999771118164, 0.8479999899864197, 0.8429999947547913, 0.8339999914169312, 0.8376666903495789, 0.8289999961853027]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 1, 3, 1], [2, 0, 0, 0, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 6, 4, 0], [0, 0, 2, 3, 3, 3, 2, 2, 1], [0, 76, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [43], [1], [0], [4], [0]], "fitness": -0.5611428618431091, "mapping_values": [1, 7, 4, 3, 2, 8, 4, 4, 2, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [5.664239406585693, 2.3065624237060547, 2.3009629249572754, 2.226870059967041, 2.2073171138763428, 2.307619571685791, 2.2914111614227295, 2.091372489929199, 1.9137541055679321, 1.7500122785568237, 1.5789755582809448, 2.216139793395996, 2.311993360519409, 2.304821491241455, 2.3033299446105957, 2.3028740882873535], "accuracy": [0.19772817194461823, 0.1006472036242485, 0.107647605240345, 0.1962752640247345, 0.23378682136535645, 0.09496764093637466, 0.1216483935713768, 0.26522254943847656, 0.3699643313884735, 0.4084004759788513, 0.47866860032081604, 0.2818650007247925, 0.09826971590518951, 0.09576013684272766, 0.09919429570436478, 0.09470347315073013], "val_loss": [2.3097033500671387, 2.303469657897949, 2.2933249473571777, 2.1180009841918945, 2.309248924255371, 2.302485942840576, 2.1114282608032227, 1.9447389841079712, 1.4991779327392578, 1.353878378868103, 1.3987699747085571, 2.318711042404175, 2.305992603302002, 2.303236246109009, 2.3027403354644775, 2.302570104598999], "val_accuracy": [0.10000000149011612, 0.10300000011920929, 0.140666663646698, 0.32499998807907104, 0.10100000351667404, 0.10100000351667404, 0.3036666810512543, 0.37700000405311584, 0.48366665840148926, 0.5483333468437195, 0.5503333210945129, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 8], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 49], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 2, 1, 6, 3, 8, 2, 2], [3, 0, 2, 0, 3, 1, 0, 1], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 4, 17, 9, 8, 3, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad)), tf.math.sqrt(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha)))))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 2, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 2, 0], [0, 39, 39, 50], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8, 4, 1, 8, 3, 6, 0, 2, 4, 0, 9, 8, 1, 7, 0, 1, 5, 5, 1, 4, 6, 0, 9, 8, 9], [0, 0, 2, 0, 3, 3, 0, 3, 2, 3, 1, 1, 0, 2, 2, 5], [0, 76, 16, 0, 50, 52, 19, 88], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 4, 49, 33, 16, 8, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), tf.math.sqrt(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.subtract(grad, tf.math.sqrt(tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.pow(grad, tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(grad)), beta))), tf.math.subtract(grad, tf.math.add(tf.math.negative(tf.math.subtract(tf.math.square(alpha), tf.math.square(alpha))), tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), beta))))), beta)), grad))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 3, 1, 5, 2, 3, 8, 0], [2, 0, 1, 0, 2, 3, 0], [66, 39, 39, 79], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 3, 2, 1, 6, 3, 8, 2, 8, 6, 5, 7, 3, 8, 3, 5, 1, 1, 4, 1, 8, 9, 6, 6, 9, 6, 6, 7, 4, 8, 7, 4, 4, 0, 2, 4, 2, 4, 7, 4, 3, 4, 4, 1, 9], [0, 0, 3, 0, 2, 1, 0, 2, 5, 0, 5, 2, 1, 0, 3, 1, 3, 4, 5, 0, 2, 3, 5, 0, 5, 4, 0, 0, 3, 1, 1], [0, 76, 17, 0, 29, 40, 76, 27, 98, 90, 33, 97, 59], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.08942857384681702, "mapping_values": [1, 16, 9, 7, 3, 76, 45, 31, 13, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(grad, tf.math.square(tf.math.add(tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.negative(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), beta), tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.square(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), beta), tf.math.sqrt(tf.math.multiply(tf.math.square(grad), tf.math.subtract(tf.math.subtract(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(grad, beta), tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.pow(grad, tf.math.negative(tf.math.add(tf.math.pow(grad, tf.math.add(tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), beta), grad)), grad))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.pow(grad, grad), tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.pow(tf.math.pow(tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), grad), alpha), alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(beta, tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3087522983551025, 2.311375379562378, 2.3102855682373047, 2.3090646266937256, 2.3106818199157715, 2.309103012084961], "accuracy": [0.09311848133802414, 0.09140139818191528, 0.09457138925790787, 0.0948355570435524, 0.09153348207473755, 0.0936468094587326], "val_loss": [2.309279680252075, 2.309279680252075, 2.309279680252075, 2.309279680252075, 2.309279680252075, 2.309279680252075], "val_accuracy": [0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869, 0.09000000357627869]}}]