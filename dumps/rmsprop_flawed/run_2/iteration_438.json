[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.833142876625061, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6204737424850464, 0.9739683866500854, 0.7882639169692993, 0.7149973511695862, 0.6511990427970886, 0.616992712020874, 0.5860093235969543, 0.5410898923873901, 0.5146501660346985, 0.5258815288543701, 0.49628788232803345, 0.4959094822406769, 0.498363196849823, 0.4921875596046448, 0.5013408064842224, 0.47489744424819946, 0.4633525311946869, 0.4674898386001587, 0.4769773781299591, 0.46960586309432983, 0.4554343819618225, 0.4390092194080353, 0.4629724323749542, 0.5046699643135071, 0.4945600926876068, 0.5137939453125, 0.49983489513397217, 0.4715534746646881, 0.4718630611896515, 0.49621960520744324, 0.6591964364051819, 0.6288629770278931], "accuracy": [0.46427157521247864, 0.6769251227378845, 0.7240787148475647, 0.7467969655990601, 0.7633073329925537, 0.7744023203849792, 0.7874785661697388, 0.7969884872436523, 0.8161405324935913, 0.8017435073852539, 0.8100647330284119, 0.8211596608161926, 0.8191784620285034, 0.828292191028595, 0.8193105459213257, 0.8264430165290833, 0.8400475382804871, 0.8368775844573975, 0.8392550349235535, 0.8389908671379089, 0.8471800088882446, 0.8491612672805786, 0.8441421389579773, 0.829216718673706, 0.8385946154594421, 0.8392550349235535, 0.8466516733169556, 0.8380662798881531, 0.8417646288871765, 0.8385946154594421, 0.830669641494751, 0.8230088353157043], "val_loss": [1.0849249362945557, 0.6270136833190918, 0.5587283372879028, 0.5496404767036438, 0.5279202461242676, 0.5218106508255005, 0.49553054571151733, 0.5202733278274536, 0.5162131190299988, 0.5250396132469177, 0.5238949656486511, 0.5196089148521423, 0.5130884051322937, 0.5748937726020813, 0.5477337837219238, 0.5621674656867981, 0.546157717704773, 0.5465346574783325, 0.5715660452842712, 0.520784318447113, 0.5941007137298584, 0.5472543835639954, 0.5586177706718445, 0.5444415807723999, 0.6798519492149353, 0.5803778767585754, 0.6053027510643005, 0.5647909045219421, 0.5551211833953857, 0.6721445322036743, 0.6319890022277832, 0.7219156622886658], "val_accuracy": [0.6269999742507935, 0.7710000276565552, 0.7940000295639038, 0.7976666688919067, 0.8056666851043701, 0.8046666383743286, 0.8103333115577698, 0.8196666836738586, 0.812333345413208, 0.8103333115577698, 0.8220000267028809, 0.8203333616256714, 0.8309999704360962, 0.8176666498184204, 0.8236666917800903, 0.8309999704360962, 0.8336666822433472, 0.8343333601951599, 0.8330000042915344, 0.8356666564941406, 0.8323333263397217, 0.8356666564941406, 0.831333339214325, 0.82833331823349, 0.8396666646003723, 0.8396666646003723, 0.8479999899864197, 0.8366666436195374, 0.8366666436195374, 0.8393333554267883, 0.8330000042915344, 0.8330000042915344]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [2, 3, 1, 0, 2, 3, 1], [0, 39, 51, 79], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 3, 3, 6, 6, 8, 2], [4, 0, 4, 4, 3, 1, 0], [0, 33, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 15, 8, 7, 2, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, grad)), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 4, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 1, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 2, 5], [3, 0, 2, 0, 3, 1, 0, 4], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 3, 18, 10, 8, 3, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10381719470024109, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 6, 8, 0], [1, 0, 1, 0, 2, 3, 0], [0, 39, 39, 10], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 2, 3, 1, 6, 9, 8, 2, 4, 3, 4, 5, 7, 2, 6, 9, 5, 8, 8, 4, 9, 6, 5, 0, 5, 8], [1, 0, 2, 0, 3, 1, 0, 4, 3, 0, 4, 4, 0, 2], [0, 76, 16, 0, 52, 99, 16, 78], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 2, 0, 5, 8, 2, 7, 9], [0, 6, 1], [43, 33], [1], [0], [2], [0]], "fitness": -0.09142857044935226, "mapping_values": [1, 16, 9, 7, 3, 6, 3, 3, 1, 11, 8, 3, 2, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(alpha, tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), tf.math.negative(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.sqrt(tf.math.add(tf.math.add(grad, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), alpha))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3090691566467285, 2.310236692428589, 2.311171054840088, 2.3089799880981445, 2.3101673126220703, 2.3095571994781494], "accuracy": [0.09747721254825592, 0.09391097724437714, 0.09206181764602661, 0.09285431355237961, 0.08717474341392517, 0.09259014576673508], "val_loss": [2.308905601501465, 2.308905601501465, 2.308905601501465, 2.308905601501465, 2.308905601501465, 2.308905601501465], "val_accuracy": [0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 6, 4, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [95, 39, 39, 79], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 6, 3, 8, 2, 8, 6, 3, 5, 4, 0, 1, 3, 3, 0, 9], [0, 0, 2, 0, 1, 1, 0, 4, 0, 5, 4], [0, 76, 10, 0, 76, 19], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [3], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 15, 8, 7, 4, 30, 19, 11, 6, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(alpha), tf.math.divide_no_nan(alpha, tf.math.multiply(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.multiply(grad, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad))), grad))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.309795379638672, 2.309443235397339, 2.3100931644439697, 2.310167074203491, 2.309464931488037, 2.3088157176971436], "accuracy": [0.09074098616838455, 0.09166556596755981, 0.09298639744520187, 0.09272222965955734, 0.09509972482919693, 0.09272222965955734], "val_loss": [2.3096678256988525, 2.3096678256988525, 2.3096678256988525, 2.3096678256988525, 2.3096678256988525, 2.3096678256988525], "val_accuracy": [0.08533333241939545, 0.08533333241939545, 0.08533333241939545, 0.08533333241939545, 0.08533333241939545, 0.08533333241939545]}}]