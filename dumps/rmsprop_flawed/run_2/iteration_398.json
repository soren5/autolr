[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8180000185966492, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.4471923112869263, 0.7614006400108337, 0.6636611819267273, 0.6096653938293457, 0.6135847568511963, 0.5549442768096924, 0.5591902136802673, 0.5190182328224182, 0.5296618342399597, 0.5540212988853455, 0.5673890113830566, 0.5579269528388977, 0.5973711013793945, 0.5972738862037659, 0.6247421503067017], "accuracy": [0.49953770637512207, 0.7236824631690979, 0.7637035846710205, 0.7786290049552917, 0.7947431206703186, 0.7961959838867188, 0.8020076751708984, 0.8061022162437439, 0.8165367841720581, 0.8124422430992126, 0.8100647330284119, 0.8144234418869019, 0.8082155585289001, 0.8112534880638123, 0.8013472557067871], "val_loss": [0.7681097984313965, 0.6227391958236694, 0.5786963701248169, 0.5350908041000366, 0.5297291874885559, 0.5402168035507202, 0.5263312458992004, 0.5523987412452698, 0.5465118885040283, 0.5219443440437317, 0.5662072896957397, 0.6724814772605896, 0.573005735874176, 0.6503615975379944, 0.6509466171264648], "val_accuracy": [0.7196666598320007, 0.7796666622161865, 0.800000011920929, 0.8036666512489319, 0.8303333520889282, 0.8173333406448364, 0.8190000057220459, 0.82833331823349, 0.8236666917800903, 0.831333339214325, 0.8056666851043701, 0.815666675567627, 0.8199999928474426, 0.8253333568572998, 0.8266666531562805]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 5, 8], [2, 0, 1, 2, 2, 3, 2], [0, 39, 24, 94], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 3, 1, 6, 3, 6, 2, 5, 1, 3, 5], [0, 0, 2, 3, 3, 1, 0, 4, 0, 0, 4], [38, 76, 16, 0, 11], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10657142847776413, "mapping_values": [1, 17, 10, 7, 1, 23, 12, 11, 5, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(grad, tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), grad), tf.math.square(tf.math.sqrt(grad)))), grad), grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.subtract(grad, tf.math.multiply(grad, alpha)))), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad), tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [195387608530944.0, 8146244069228544.0, 6.193305045119795e+16, 2.404180958380032e+17, 6.485384124285583e+17, 1.4607497134509916e+18, 2.867296527309603e+18, 5.084743749452431e+18, 8.458145479027327e+18], "accuracy": [0.10962884873151779, 0.10421344637870789, 0.10130762308835983, 0.10328886657953262, 0.10394927859306335, 0.09998679161071777, 0.10315678268671036, 0.10460969805717468, 0.09998679161071777], "val_loss": [1298369284669440.0, 2.0573565510221824e+16, 1.0333944717246464e+17, 3.248497139940065e+17, 7.933732308647936e+17, 1.64659782743176e+18, 3.0486835102996234e+18, 5.189299058916721e+18, 8.299546974034592e+18], "val_accuracy": [0.10599999874830246, 0.10766666382551193, 0.1080000028014183, 0.10833333432674408, 0.10833333432674408, 0.10833333432674408, 0.10833333432674408, 0.10833333432674408, 0.1080000028014183]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 5, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39, 79], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 4, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 1], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [0, 0, 1, 1], [0, 2], [2, 7], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 1, 0, 1, 1, 9, 6, 3, 1, 4, 2, 2, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(beta, tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(beta, grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [6, 2, 3, 1, 6, 3, 3, 2, 8, 9, 5, 7, 8, 4, 1, 5], [0, 3, 2, 3, 3, 1, 0, 4, 4, 4, 2], [11, 76, 24, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [0, 1], [0], [2], [0]], "fitness": -0.09428571164608002, "mapping_values": [1, 15, 8, 7, 4, 27, 16, 11, 3, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), grad), tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), grad), beta), tf.math.divide_no_nan(tf.math.multiply(grad, grad), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad), grad)), tf.math.square(grad)))))), beta), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3103463649749756, 2.3095805644989014, 2.3101980686187744, 2.310007095336914, 2.308527946472168, 2.308760166168213], "accuracy": [0.0952318087220192, 0.08902391046285629, 0.08492933213710785, 0.09285431355237961, 0.0956280529499054, 0.09708096832036972], "val_loss": [2.3083488941192627, 2.3083488941192627, 2.3083488941192627, 2.3083488941192627, 2.3083488941192627, 2.3083488941192627], "val_accuracy": [0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 6, 3, 1, 3, 2, 3, 0, 8, 7, 2, 1, 6, 8, 9, 9], [0, 0, 1, 2, 2, 3, 0, 2, 0], [0, 39, 39, 79, 16, 89], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 1, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 25, 16, 9, 6, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha)), grad), grad)), tf.math.sqrt(grad)), tf.math.add(tf.math.add(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310173749923706, 2.3108508586883545, 2.310786724090576, 2.310350179672241, 2.311943292617798, 2.3106272220611572], "accuracy": [0.09866596013307571, 0.08928807079792023, 0.08915598690509796, 0.0936468094587326, 0.0866464152932167, 0.09126931428909302], "val_loss": [2.308368444442749, 2.308368444442749, 2.308368444442749, 2.308368444442749, 2.308368444442749, 2.308368444442749], "val_accuracy": [0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179]}}]