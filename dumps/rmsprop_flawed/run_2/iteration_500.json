[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 2, 0, 2, 3, 0], [0, 0, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8705714344978333, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5512858629226685, 0.8510552644729614, 0.7016775608062744, 0.6237209439277649, 0.5821314454078674, 0.547208845615387, 0.5340997576713562, 0.4954749047756195, 0.4879302382469177, 0.4750159680843353, 0.464155375957489, 0.43654102087020874, 0.4345057010650635, 0.42416295409202576, 0.4218352735042572, 0.40638378262519836, 0.3975018262863159, 0.38346147537231445, 0.3821600079536438, 0.37754255533218384, 0.36753448843955994, 0.36219143867492676, 0.36691373586654663, 0.35669368505477905, 0.34435534477233887, 0.3470633029937744, 0.342456579208374, 0.3326220214366913, 0.3303578794002533, 0.3239966034889221, 0.32227692008018494, 0.3150063455104828, 0.31437423825263977, 0.31242167949676514, 0.30629801750183105, 0.29891934990882874, 0.2982904314994812, 0.28855302929878235, 0.2884645164012909, 0.2830703854560852, 0.28534382581710815, 0.2851825952529907, 0.2764415442943573, 0.27993178367614746, 0.274874746799469, 0.2680070102214813, 0.26923298835754395, 0.265153706073761, 0.26777806878089905], "accuracy": [0.44868576526641846, 0.6963412761688232, 0.7405890822410583, 0.7765156626701355, 0.7910447716712952, 0.8049134612083435, 0.8074230551719666, 0.8239334225654602, 0.8280280232429504, 0.8352925777435303, 0.8342359066009521, 0.8449346423149109, 0.8506141901016235, 0.8491612672805786, 0.852331280708313, 0.8603883385658264, 0.8593316674232483, 0.8684453964233398, 0.8652753829956055, 0.8661999702453613, 0.871879518032074, 0.8721436858177185, 0.8697662353515625, 0.8765024542808533, 0.8768987059593201, 0.8790120482444763, 0.8825782537460327, 0.883238673210144, 0.8845595121383667, 0.8870691061019897, 0.8844274282455444, 0.8864086866378784, 0.886672854423523, 0.8920882344245911, 0.8938053250312805, 0.8943336606025696, 0.8951261639595032, 0.8997490406036377, 0.9030511379241943, 0.9035794734954834, 0.898428201675415, 0.8980319499969482, 0.9013340473175049, 0.9021265506744385, 0.9027869701385498, 0.90423983335495, 0.904768168926239, 0.9054285883903503, 0.9052965044975281], "val_loss": [0.840986967086792, 0.6267140507698059, 0.574476957321167, 0.5294004678726196, 0.5022740960121155, 0.511115312576294, 0.46744999289512634, 0.45950981974601746, 0.44837090373039246, 0.45240384340286255, 0.4301520586013794, 0.4280205965042114, 0.4285690188407898, 0.4100751578807831, 0.41895177960395813, 0.4022582173347473, 0.397126704454422, 0.3990853726863861, 0.38733285665512085, 0.3857741355895996, 0.38053783774375916, 0.389681875705719, 0.37624555826187134, 0.37723469734191895, 0.37232035398483276, 0.3733031451702118, 0.36915725469589233, 0.36601492762565613, 0.363965779542923, 0.3647385239601135, 0.358620285987854, 0.37234917283058167, 0.3564335107803345, 0.3555355668067932, 0.3561009466648102, 0.35199642181396484, 0.36020857095718384, 0.3490610420703888, 0.35322603583335876, 0.3503186106681824, 0.3550361394882202, 0.3568679988384247, 0.349976122379303, 0.3426620364189148, 0.34771573543548584, 0.34373149275779724, 0.3420546054840088, 0.3522103726863861, 0.34236544370651245], "val_accuracy": [0.7036666870117188, 0.7680000066757202, 0.7770000100135803, 0.8026666641235352, 0.8109999895095825, 0.8100000023841858, 0.8303333520889282, 0.8303333520889282, 0.8339999914169312, 0.8379999995231628, 0.843666672706604, 0.8523333072662354, 0.8456666469573975, 0.8523333072662354, 0.8513333201408386, 0.8500000238418579, 0.862666666507721, 0.8529999852180481, 0.8610000014305115, 0.8629999756813049, 0.8579999804496765, 0.8610000014305115, 0.8616666793823242, 0.862333357334137, 0.8673333525657654, 0.862333357334137, 0.8709999918937683, 0.8683333396911621, 0.8709999918937683, 0.8703333139419556, 0.8736666440963745, 0.871666669845581, 0.8740000128746033, 0.8756666779518127, 0.8663333058357239, 0.8736666440963745, 0.8673333525657654, 0.8763333559036255, 0.8793333172798157, 0.8809999823570251, 0.8713333606719971, 0.8676666617393494, 0.8813333511352539, 0.8820000290870667, 0.8776666522026062, 0.8786666393280029, 0.878333330154419, 0.875333309173584, 0.8799999952316284]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8042857050895691, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.6090072393417358, 0.9414022564888, 0.7336637377738953, 0.6161813139915466, 0.5903698801994324, 0.5511293411254883, 0.5302163362503052, 0.5115745663642883, 0.4875940680503845, 0.463661789894104, 0.4929194152355194, 0.4887465536594391, 0.4593690037727356, 0.46041202545166016, 0.4550337791442871, 0.44287142157554626, 0.42595764994621277, 0.4200640618801117, 0.4280673861503601, 0.41670045256614685, 0.43927323818206787, 0.4468115568161011, 0.44447213411331177, 0.45529958605766296, 0.4543197453022003, 0.44782161712646484, 0.4594607353210449, 0.4456947147846222], "accuracy": [0.481838583946228, 0.6848500967025757, 0.7351737022399902, 0.7643640041351318, 0.7833839654922485, 0.8075551390647888, 0.805177628993988, 0.8127063512802124, 0.8219521641731262, 0.8352925777435303, 0.8338396549224854, 0.8220842480659485, 0.8333113193511963, 0.839519202709198, 0.8335754871368408, 0.847840428352356, 0.8527275323867798, 0.848368763923645, 0.8479725122451782, 0.8481045961380005, 0.8490291833877563, 0.8397833704948425, 0.8499537706375122, 0.8537842035293579, 0.8448025584220886, 0.841500461101532, 0.8376700282096863, 0.8470479249954224], "val_loss": [0.8974061012268066, 0.6855713129043579, 0.59161376953125, 0.5567659735679626, 0.5445614457130432, 0.5115920305252075, 0.5113519430160522, 0.5203489065170288, 0.4986894428730011, 0.5238410830497742, 0.49939167499542236, 0.5339505076408386, 0.5366061925888062, 0.545358419418335, 0.5513966679573059, 0.5398127436637878, 0.584795355796814, 0.5542076230049133, 0.5127743482589722, 0.5131164789199829, 0.4896048903465271, 0.5218243598937988, 0.6185677647590637, 0.549806535243988, 0.5838539004325867, 0.5469589233398438, 0.5314109921455383, 0.6069996953010559], "val_accuracy": [0.7036666870117188, 0.7509999871253967, 0.7733333110809326, 0.8016666769981384, 0.8053333163261414, 0.8059999942779541, 0.8180000185966492, 0.8240000009536743, 0.8356666564941406, 0.8360000252723694, 0.8296666741371155, 0.8360000252723694, 0.8346666693687439, 0.8209999799728394, 0.8399999737739563, 0.843666672706604, 0.8493333458900452, 0.8513333201408386, 0.8349999785423279, 0.8486666679382324, 0.8386666774749756, 0.8413333296775818, 0.8519999980926514, 0.8443333506584167, 0.8376666903495789, 0.8309999704360962, 0.8393333554267883, 0.8370000123977661]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 5, 6, 4, 5, 1, 2, 5, 7, 7, 5, 1, 8, 0, 7, 7, 8, 1], [0, 0, 2, 0, 2, 2, 1, 0, 2, 0, 1, 3, 0, 0, 2, 3, 2], [55, 0, 39, 79, 28, 25, 15], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8, 7], [0, 2, 3, 0, 3, 1, 0, 0], [73, 76, 16, 34], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 42, 25, 17, 7, 18, 10, 8, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, grad))), alpha), tf.math.pow(tf.math.square(tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.sqrt(grad), tf.math.negative(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.subtract(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), beta), grad), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [6.705574093559752e+25, 6.921169281005859, 8.893841743469238, 7.268897533416748, 6.164632320404053, 5.8747239112854], "accuracy": [0.13459251821041107, 0.09708096832036972, 0.09945846349000931, 0.09708096832036972, 0.09945846349000931, 0.09787346422672272], "val_loss": [5.054933071136475, 8.875807762145996, 7.812300682067871, 6.107152938842773, 5.072718143463135, 7.019331932067871], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.0989999994635582, 0.0989999994635582, 0.10000000149011612, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 3, 1, 3, 9, 3, 8, 0, 5], [0, 0, 2, 0, 2, 3, 0], [0, 0, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 4, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 10, 6, 4, 16, 9, 7, 4, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 1], [1, 0, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2, 3, 2, 2, 4, 0, 8, 0, 6, 3, 6, 4, 9, 3, 2, 6, 6, 3, 2, 2, 2, 4, 3, 0, 9, 3, 0, 2, 3, 6, 9, 4, 4, 8, 4, 8, 3, 5, 5, 1, 6, 5, 1, 2, 6, 1, 9, 8], [0, 0, 2, 0, 3, 1, 0, 0, 4, 5, 5, 5, 0, 4, 1, 0, 4, 3, 5, 5, 0, 0, 5, 1, 1, 3, 0, 4, 4, 1, 4, 4, 1, 0, 0], [0, 76, 16, 79, 76, 68, 68, 19, 12, 19, 80, 42, 48, 81, 28, 95], [0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 2, 4, 5], [1, 0, 0], [97], [0, 0, 1], [0, 8], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 3, 90, 55, 35, 16, 2, 1, 1, 0, 3, 2, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha)), tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.pow(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad), grad)), tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(grad, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.add(tf.math.pow(grad, alpha), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.multiply(tf.math.negative(grad), tf.math.add(grad, tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.pow(tf.math.sqrt(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.multiply(tf.math.square(tf.math.square(alpha)), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(tf.math.subtract(alpha, tf.math.add(grad, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.divide_no_nan(grad, tf.math.subtract(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))))))), grad), tf.math.sqrt(grad)), alpha)))), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 3, 1, 3, 5, 8, 3, 4, 0, 4, 3, 1, 3, 1, 7, 0, 7, 7, 7, 6, 2, 4, 4, 4, 5, 2, 5, 8, 1, 6, 9], [0, 0, 1, 1, 2, 0, 0, 2, 2, 2, 0, 2, 3, 3, 0, 2, 0, 0, 2, 2, 1, 0, 1], [0, 39, 39, 19, 74, 39, 40, 4, 87, 53], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 2, 3, 1, 9, 3, 8, 2], [0, 2, 2, 0, 0, 1, 0], [0, 27, 43, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 1, 5, 8, 8], [7, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.09399999678134918, "mapping_values": [1, 55, 32, 23, 10, 2, 1, 1, 1, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 51, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), alpha), tf.math.multiply(tf.math.pow(tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.subtract(grad, tf.math.multiply(tf.math.subtract(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(grad, tf.math.add(grad, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.pow(grad, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.pow(tf.math.square(tf.math.add(grad, tf.math.square(tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(grad, grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), grad))), grad), alpha)), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3100061416625977, 2.31079363822937, 2.310713291168213, 2.3104705810546875, 2.310767889022827, 2.309857130050659], "accuracy": [0.09259014576673508, 0.09008057415485382, 0.09496764093637466, 0.09179764986038208, 0.08611807972192764, 0.09919429570436478], "val_loss": [2.3094465732574463, 2.3094465732574463, 2.3094465732574463, 2.3094465732574463, 2.3094465732574463, 2.3094465732574463], "val_accuracy": [0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918]}}]