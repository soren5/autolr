[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8374285697937012, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5187766551971436, 0.8198185563087463, 0.6691591143608093, 0.6394758820533752, 0.6015036702156067, 0.5564818382263184, 0.5595757961273193, 0.492926687002182, 0.5182998180389404, 0.4962998628616333, 0.47816166281700134, 0.47269749641418457, 0.4958094656467438, 0.47738027572631836, 0.46432289481163025, 0.4685862064361572, 0.4404071867465973, 0.44186651706695557, 0.47843819856643677, 0.4555692970752716, 0.46471092104911804, 0.48906365036964417, 0.47945261001586914, 0.46659398078918457, 0.482112318277359], "accuracy": [0.48606523871421814, 0.7104741930961609, 0.7600052952766418, 0.7677981853485107, 0.7815347909927368, 0.7924976944923401, 0.7957997918128967, 0.817989706993103, 0.8131026029586792, 0.8298771381378174, 0.8389908671379089, 0.8335754871368408, 0.8269713521003723, 0.8276317715644836, 0.8404437899589539, 0.8334434032440186, 0.8486329317092896, 0.8496896028518677, 0.8425571322441101, 0.8433496356010437, 0.848368763923645, 0.8418967127799988, 0.8451988101005554, 0.8393871188163757, 0.8461233377456665], "val_loss": [0.8246490955352783, 0.5919859409332275, 0.5307928919792175, 0.4740552604198456, 0.49503323435783386, 0.4587981700897217, 0.4417165219783783, 0.45472437143325806, 0.432731568813324, 0.45918944478034973, 0.4667407274246216, 0.4883090853691101, 0.45393314957618713, 0.4703723192214966, 0.45736172795295715, 0.4228575825691223, 0.4158366322517395, 0.44931599497795105, 0.4716513752937317, 0.43900296092033386, 0.47960612177848816, 0.4865264594554901, 0.5075021982192993, 0.5170638561248779, 0.5048403143882751], "val_accuracy": [0.718999981880188, 0.7903333306312561, 0.8013333082199097, 0.8236666917800903, 0.8163333535194397, 0.8276666402816772, 0.8413333296775818, 0.8309999704360962, 0.8526666760444641, 0.8460000157356262, 0.8546666502952576, 0.8473333120346069, 0.8453333377838135, 0.856333315372467, 0.8476666808128357, 0.859666645526886, 0.8560000061988831, 0.8616666793823242, 0.8560000061988831, 0.8659999966621399, 0.8560000061988831, 0.8536666631698608, 0.8473333120346069, 0.8503333330154419, 0.8460000157356262]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 3, 7, 3, 2, 3, 8, 0, 1, 0], [0, 0, 1, 2, 2, 2, 0, 3], [38, 58, 89, 41], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 0, 1, 6, 1, 4, 2], [0, 2, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 2, 1, 5, 7, 2, 7, 9], [0, 6, 1, 1, 7], [43, 46], [1], [0], [7], [0]], "fitness": -0.33228570222854614, "mapping_values": [1, 19, 11, 8, 3, 7, 4, 3, 1, 13, 8, 5, 2, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.sqrt(grad)))), tf.math.negative(tf.math.subtract(grad, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), beta)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), alpha)), grad))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.2647171020507812, 2.170452117919922, 2.256892681121826, 2.674389362335205, 2.3531582355499268, 2.3057568073272705, 2.432621955871582, 2.3116018772125244], "accuracy": [0.19918107986450195, 0.19653943181037903, 0.14476291835308075, 0.14159291982650757, 0.2316734939813614, 0.1018359512090683, 0.19944524765014648, 0.1142517477273941], "val_loss": [2.2525408267974854, 2.3067445755004883, 3.628933906555176, 2.2941477298736572, 2.3085405826568604, 2.288564682006836, 2.310117721557617, 2.2879116535186768], "val_accuracy": [0.15133333206176758, 0.10066666454076767, 0.33533334732055664, 0.10133333504199982, 0.10066666454076767, 0.10066666454076767, 0.1003333330154419, 0.13466666638851166]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 0, 3, 2, 3, 2, 0], [2, 0, 1, 0, 2, 2, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 4, 3, 1, 6, 3, 8, 2, 1, 4, 7, 0, 2, 1, 1, 6, 0, 9, 4, 9], [0, 0, 2, 0, 3, 1, 0, 1, 2, 5, 5, 3, 4], [0, 76, 16, 0, 26, 39], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 3, 33, 20, 13, 6, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad), tf.math.negative(grad))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.negative(alpha), tf.math.add(tf.math.subtract(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.negative(grad), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)), grad)), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 1, 1, 3, 5, 8, 9], [0, 0, 2, 0, 2], [0, 77, 39, 69], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [9, 2, 3, 1, 6, 3, 9, 0], [0, 0, 2, 0, 3, 1, 0], [30, 27, 16, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 7, 1, 5, 8, 8, 0, 7, 7], [0, 6, 1, 2, 6], [0], [0, 0, 1, 0, 0], [0, 1, 5, 9], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 8, 4, 4, 1, 1, 0, 1, 14, 9, 5, 1, 5, 4, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.square(grad), tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(beta, tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3038947582244873, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 5, 79], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 3, 2, 3, 3, 1, 0], [77, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 4, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), grad)), grad), tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [44458156032.0, 6799753740288.0, 116732739977216.0, 824654793015296.0, 3664077670842368.0, 1.19168699465728e+16], "accuracy": [0.10487385839223862, 0.1088363528251648, 0.09866596013307571, 0.09959053993225098, 0.09760929644107819, 0.107647605240345], "val_loss": [473169133568.0, 25509643681792.0, 273801732423680.0, 1492756417478656.0, 5590480293199872.0, 1.648844387385344e+16], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]