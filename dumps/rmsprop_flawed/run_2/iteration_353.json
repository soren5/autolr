[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.828000009059906, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5218250751495361, 0.8415813446044922, 0.6713647246360779, 0.6144707798957825, 0.5583673119544983, 0.5269626379013062, 0.5331887006759644, 0.489998996257782, 0.4754404127597809, 0.4704507887363434, 0.4708244502544403, 0.4569108486175537, 0.44065502285957336, 0.428452730178833, 0.40336674451828003, 0.41062673926353455, 0.41932108998298645, 0.4411790072917938, 0.47135981917381287, 0.44472163915634155], "accuracy": [0.4803856909275055, 0.7131158113479614, 0.7490423917770386, 0.7786290049552917, 0.7921014428138733, 0.8067626357078552, 0.8057059645652771, 0.8164047002792358, 0.8274996876716614, 0.8397833704948425, 0.8277638554573059, 0.8322546482086182, 0.8453308939933777, 0.8437458872795105, 0.8518029451370239, 0.8588033318519592, 0.8644828796386719, 0.8496896028518677, 0.8424250483512878, 0.8487650156021118], "val_loss": [0.8382577896118164, 0.6193528175354004, 0.5702164173126221, 0.5030778050422668, 0.5093051791191101, 0.48740094900131226, 0.4724562168121338, 0.5392489433288574, 0.4793583154678345, 0.4927692115306854, 0.49306657910346985, 0.5752830505371094, 0.49307599663734436, 0.5103031396865845, 0.5068926215171814, 0.48569709062576294, 0.5644139051437378, 0.585623025894165, 0.5160607695579529, 0.5710796117782593], "val_accuracy": [0.6953333616256714, 0.762333333492279, 0.7919999957084656, 0.8136666417121887, 0.8190000057220459, 0.8146666884422302, 0.8370000123977661, 0.8303333520889282, 0.8386666774749756, 0.8299999833106995, 0.8236666917800903, 0.8420000076293945, 0.843999981880188, 0.8389999866485596, 0.8536666631698608, 0.8420000076293945, 0.8496666550636292, 0.8450000286102295, 0.8383333086967468, 0.8423333168029785]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 6, 3, 3, 3, 2, 3, 4, 0, 6, 3, 5], [2, 0, 1, 0, 2, 3, 0, 0, 2, 0], [0, 39, 39, 79, 71], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 2, 1, 6, 3, 2, 2, 8, 2, 1, 9], [0, 2, 2, 0, 3, 1, 0, 4, 5], [0, 76, 95, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 12, 10, 5, 21, 12, 9, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.pow(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.multiply(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), grad), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), beta), beta)), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.constant(0.0, shape=shape, dtype=tf.float32))))), grad), grad)), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [4, 2, 3, 1, 3, 5, 9], [0, 2, 1, 0, 2], [0, 64, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0], [2, 2, 3, 1, 6, 7, 8, 2, 3, 8, 9], [5, 1, 4, 0, 3, 1, 0, 2], [0, 27, 16, 0], [0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 2, 1, 0, 8, 8], [0, 6, 5], [37], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 3, 19, 11, 8, 3, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.square(alpha))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.subtract(grad, alpha), grad), tf.math.divide_no_nan(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta))))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 3, 3, 8, 0], [0, 0, 2, 0, 2, 0, 2], [0, 34, 39, 79], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 6], [0, 0, 3, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.09228571504354477, "mapping_values": [1, 2, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3089816570281982, 2.309868097305298, 2.3103268146514893, 2.309211015701294, 2.3101048469543457, 2.309534788131714], "accuracy": [0.09377889335155487, 0.09391097724437714, 0.09430722147226334, 0.09325055778026581, 0.09232597798109055, 0.09140139818191528], "val_loss": [2.3097972869873047, 2.3097972869873047, 2.3097972869873047, 2.3097972869873047, 2.3097972869873047, 2.3097972869873047], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 0, 1, 3, 5, 0], [0, 0, 1, 3, 2], [30, 39, 39, 79], [1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 8, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1], [6, 2, 1, 5, 8, 5], [2, 0, 1, 2], [0], [0, 1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 11, 7, 4, 2, 1, 0, 1, 1, 9, 5, 4, 1, 2, 1, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.subtract(alpha, tf.math.square(tf.math.sqrt(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3095250129699707, 2.309870719909668, 2.310062885284424, 2.309067964553833, 2.310086250305176, 2.310014247894287], "accuracy": [0.09153348207473755, 0.0944393053650856, 0.08809932321310043, 0.09311848133802414, 0.09972262382507324, 0.09047681838274002], "val_loss": [2.3088560104370117, 2.3088560104370117, 2.3088560104370117, 2.3088560104370117, 2.3088560104370117, 2.3088560104370117], "val_accuracy": [0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548, 0.09266666322946548]}}]