[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8357142806053162, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5652683973312378, 0.8168433308601379, 0.6815497279167175, 0.6121798753738403, 0.5619029402732849, 0.5352321863174438, 0.5206936597824097, 0.49244508147239685, 0.4834230840206146, 0.4678216874599457, 0.4429444968700409, 0.46008172631263733, 0.46484375, 0.4759877920150757, 0.4542146325111389, 0.41148439049720764, 0.4356204569339752, 0.44488969445228577, 0.42368465662002563, 0.5069336295127869, 0.47774311900138855, 0.5303429961204529, 0.49871885776519775, 0.46191781759262085, 0.5046950578689575], "accuracy": [0.46546030044555664, 0.71100252866745, 0.7518161535263062, 0.7802139520645142, 0.8025360107421875, 0.7997622489929199, 0.8115176558494568, 0.8198388814926147, 0.8146876096725464, 0.8360850811004639, 0.839519202709198, 0.845859169960022, 0.8385946154594421, 0.8424250483512878, 0.8445383906364441, 0.8510104417800903, 0.8536521196365356, 0.8521991968154907, 0.8556333184242249, 0.837537944316864, 0.8393871188163757, 0.8363492488861084, 0.8412362933158875, 0.8481045961380005, 0.8393871188163757], "val_loss": [0.8205474615097046, 0.6176415085792542, 0.5596274137496948, 0.5273563861846924, 0.49916020035743713, 0.5021270513534546, 0.504687488079071, 0.512673020362854, 0.5163207054138184, 0.5128711462020874, 0.5174384117126465, 0.5582988262176514, 0.5487107038497925, 0.5561631917953491, 0.5143165588378906, 0.602848470211029, 0.5678586959838867, 0.5634987950325012, 0.5747279524803162, 0.5473418235778809, 0.5963068604469299, 0.580047607421875, 0.6324925422668457, 0.6502838134765625, 0.6123093366622925], "val_accuracy": [0.7036666870117188, 0.7746666669845581, 0.7986666560173035, 0.8086666464805603, 0.8220000267028809, 0.8226666450500488, 0.828000009059906, 0.8193333148956299, 0.8349999785423279, 0.8383333086967468, 0.8366666436195374, 0.8376666903495789, 0.8366666436195374, 0.8316666483879089, 0.8423333168029785, 0.8500000238418579, 0.8410000205039978, 0.8476666808128357, 0.8456666469573975, 0.8529999852180481, 0.8356666564941406, 0.8446666598320007, 0.8503333330154419, 0.8493333458900452, 0.8366666436195374]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [2, 6, 3, 1, 3, 2, 3, 8, 0, 4], [0, 0, 1, 0, 2, 3, 0, 0, 1], [0, 95, 4, 79, 18], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 2, 1, 0], [0, 76, 16, 73], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [4], [0]], "fitness": -0.2945714294910431, "mapping_values": [1, 19, 10, 9, 5, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3352572917938232, 2.2006471157073975, 2.2182998657226562, 2.301140069961548, 2.4150776863098145, 2.3091461658477783, 2.3035101890563965, 2.28770112991333, 2.238579273223877, 2.305788993835449, 2.3034446239471436, 2.3032267093658447, 2.303025960922241], "accuracy": [0.17738740146160126, 0.2056531459093094, 0.16431118547916412, 0.14542332291603088, 0.17672698199748993, 0.10276053100824356, 0.09549596905708313, 0.13908334076404572, 0.19574692845344543, 0.0948355570435524, 0.09576013684272766, 0.10342095047235489, 0.09998679161071777], "val_loss": [2.2755606174468994, 2.3156659603118896, 2.2582714557647705, 2.3015007972717285, 2.318927049636841, 2.3033883571624756, 2.300682544708252, 2.154409885406494, 2.307377338409424, 2.3033857345581055, 2.3027567863464355, 2.302670955657959, 2.3025872707366943], "val_accuracy": [0.10333333164453506, 0.10000000149011612, 0.12800000607967377, 0.1003333330154419, 0.08766666799783707, 0.12999999523162842, 0.16733333468437195, 0.28200000524520874, 0.09933333098888397, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 6, 3, 2, 4, 2, 3, 8, 0], [2, 0, 1, 0, 0, 3, 0], [0, 39, 39, 69], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8, 4, 4, 4, 1, 1, 2, 7, 2, 5, 9, 6], [0, 0, 2, 0, 3, 1, 0, 0, 4, 5, 1, 2, 1, 0, 2], [0, 76, 16, 66, 88, 25, 90], [0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [95], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 7, 7, 4, 35, 20, 15, 7, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(grad, tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), grad), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), beta)), tf.math.sqrt(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, alpha)))), tf.math.pow(tf.math.subtract(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), grad)), grad))), tf.math.add(alpha, beta)), tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(beta, tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0, 6, 4, 3, 4, 4, 4, 3, 1, 8, 0, 0, 2, 1, 2, 0, 7, 5, 3], [0, 0, 1, 0, 2, 3, 0, 2, 1, 0, 3, 0, 3, 1, 2, 2, 1, 2, 1, 3], [0, 39, 39, 79, 50, 52], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 2, 2, 1, 6, 0, 8, 2, 8], [0, 0, 2, 2, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.09971428662538528, "mapping_values": [1, 47, 27, 20, 6, 8, 4, 4, 2, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, grad)), tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.math.pow(tf.math.pow(tf.math.pow(tf.math.multiply(tf.math.subtract(tf.math.sqrt(tf.math.negative(tf.math.negative(alpha))), tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(grad, alpha)), grad), grad), alpha), tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.multiply(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), beta)), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [4707013036605440.0, 1.108311905744743e+28, NaN, NaN, NaN, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09721305221319199, 0.10368511080741882, 0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.182645289635283e+18, NaN, NaN, NaN, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], [0, 2, 3, 5, 3, 2, 3, 8, 0], [0, 3, 1, 0, 2, 1], [0, 39, 39], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 1, 3, 4, 6, 0], [0, 0, 2, 0, 3, 1, 0, 4, 0, 3], [0, 5, 16, 0, 69], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [0, 1], [0], [2], [0]], "fitness": -0.09457142651081085, "mapping_values": [1, 2, 1, 1, 1, 22, 12, 10, 5, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), beta)), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(grad, alpha), tf.math.pow(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(grad)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), grad))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.310016632080078, 2.309422016143799, 2.3093974590301514, 2.3094565868377686, 2.311005115509033, 2.3101091384887695], "accuracy": [0.09417514503002167, 0.08955223858356476, 0.09087307006120682, 0.09826971590518951, 0.09259014576673508, 0.0944393053650856], "val_loss": [2.309718370437622, 2.309718370437622, 2.309718370437622, 2.309718370437622, 2.309718370437622, 2.309718370437622], "val_accuracy": [0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284]}}]