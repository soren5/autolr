[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8391428589820862, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5969984531402588, 0.8194854259490967, 0.6843390464782715, 0.6277899146080017, 0.5798689723014832, 0.5796632170677185, 0.5765427350997925, 0.5331125259399414, 0.5221168398857117, 0.535598635673523, 0.5376132130622864, 0.5349094271659851, 0.5379989743232727, 0.5658043026924133, 0.5651450753211975, 0.5129713416099548, 0.5517478585243225, 0.5567328929901123, 0.5445988178253174, 0.539186954498291, 0.5340331792831421, 0.5567834973335266, 0.5988043546676636, 0.5440575480461121, 0.5606318712234497, 0.5846449732780457, 0.5263217091560364, 0.5399211645126343, 0.5255506038665771], "accuracy": [0.4745740294456482, 0.7111346125602722, 0.7528728246688843, 0.7701756954193115, 0.7905164361000061, 0.7812706232070923, 0.7930260300636292, 0.8062343001365662, 0.8124422430992126, 0.8142913579940796, 0.8024039268493652, 0.8132346868515015, 0.8001585006713867, 0.806630551815033, 0.8095363974571228, 0.8150838613510132, 0.8161405324935913, 0.8076872229576111, 0.8128384351730347, 0.8099326491355896, 0.8248580098152161, 0.8191784620285034, 0.811649739742279, 0.7993659973144531, 0.8153480291366577, 0.8035926818847656, 0.822348415851593, 0.8197067975997925, 0.8158763647079468], "val_loss": [0.7593924403190613, 0.629671037197113, 0.5969338417053223, 0.5484837889671326, 0.5319401025772095, 0.5671070218086243, 0.5350510478019714, 0.5312455892562866, 0.5763280987739563, 0.6003761291503906, 0.5648251175880432, 0.5605857968330383, 0.5690355896949768, 0.6136791110038757, 0.5868810415267944, 0.6056995987892151, 0.5496526956558228, 0.6071619391441345, 0.5502002239227295, 0.5864596962928772, 0.6594527959823608, 0.6315154433250427, 0.5449343919754028, 0.5816837549209595, 0.61397385597229, 0.5687023401260376, 0.537750780582428, 0.5352112650871277, 0.552930474281311], "val_accuracy": [0.7246666550636292, 0.7636666893959045, 0.7886666655540466, 0.8083333373069763, 0.8069999814033508, 0.8026666641235352, 0.8133333325386047, 0.8233333230018616, 0.815666675567627, 0.8209999799728394, 0.8266666531562805, 0.8196666836738586, 0.828000009059906, 0.8169999718666077, 0.824999988079071, 0.8270000219345093, 0.8373333215713501, 0.8216666579246521, 0.8233333230018616, 0.8323333263397217, 0.8386666774749756, 0.8370000123977661, 0.8173333406448364, 0.8446666598320007, 0.8083333373069763, 0.8389999866485596, 0.8320000171661377, 0.8356666564941406, 0.8270000219345093]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 6, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 1, 5, 3, 8, 2, 8], [3, 0, 2, 0, 0, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10914285480976105, "mapping_values": [1, 12, 6, 6, 3, 11, 6, 5, 3, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), beta), tf.math.square(tf.math.multiply(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3086354732513428, 2.3083696365356445, 2.305840015411377, 2.3039398193359375, 2.302734613418579, 2.3025898933410645, 2.3025853633880615, 2.3025851249694824, 2.3025853633880615], "accuracy": [0.09668471664190292, 0.09126931428909302, 0.0878351628780365, 0.0936468094587326, 0.1018359512090683, 0.1002509593963623, 0.10117553919553757, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3084118366241455, 2.3069958686828613, 2.3046936988830566, 2.302797317504883, 2.3025853633880615, 2.3025853633880615, 2.3025848865509033, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09133332967758179, 0.08233333379030228, 0.07366666942834854, 0.11633333563804626, 0.09866666793823242, 0.09866666793823242, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 2, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 1, 3, 0], [0, 26, 39, 91], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8, 2, 3, 5, 6, 4, 1, 3, 1, 0, 8, 0, 9, 5, 3, 1, 7, 9, 9, 4, 1, 8], [0, 0, 2, 0, 3, 1, 0, 5, 2, 0, 2, 5, 1, 4, 2, 5], [34, 76, 16, 0, 83, 43, 36, 23], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 4, 46, 30, 16, 8, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), grad), tf.math.sqrt(tf.math.negative(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.add(tf.math.multiply(grad, tf.math.square(alpha)), tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.subtract(tf.math.negative(tf.math.sqrt(tf.math.negative(beta))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.subtract(tf.math.add(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), beta), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), grad)))), tf.math.pow(alpha, grad))), tf.math.subtract(beta, tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [2, 8, 5, 1, 3, 2, 5, 8, 0, 1, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 5], [0, 0, 2, 0, 2, 0, 0], [22, 27, 16, 0, 25], [0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 2, 1, 5, 8, 8], [4, 4, 1], [8], [1], [0], [2], [0]], "fitness": -0.09285714477300644, "mapping_values": [1, 17, 11, 6, 3, 16, 9, 7, 5, 9, 6, 3, 0, 1, 0, 1, 0], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.square(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.negative(tf.math.subtract(alpha, tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))), grad)))), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), tf.math.sqrt(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.square(tf.math.sqrt(grad)), grad), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3090121746063232, 2.3104169368743896, 2.3100574016571045, 2.311044692993164, 2.310706615447998, 2.310209035873413], "accuracy": [0.09655263274908066, 0.09206181764602661, 0.09232597798109055, 0.09417514503002167, 0.08968432247638702, 0.09536388516426086], "val_loss": [2.3086812496185303, 2.3086812496185303, 2.3086812496185303, 2.3086812496185303, 2.3086812496185303, 2.3086812496185303], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 6, 3, 1, 3, 2, 3, 0, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 6, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 2, 1, 1, 1, 12, 6, 6, 3, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310481071472168, 2.309532403945923, 2.3106894493103027, 2.3083434104919434, 2.3110549449920654, 2.3092548847198486], "accuracy": [0.08955223858356476, 0.09034473448991776, 0.09734513610601425, 0.09298639744520187, 0.09153348207473755, 0.08770307898521423], "val_loss": [2.308790922164917, 2.308790922164917, 2.308790922164917, 2.308790922164917, 2.308790922164917, 2.308790922164917], "val_accuracy": [0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341]}}]