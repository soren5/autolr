[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8237142562866211, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5288524627685547, 0.8782118558883667, 0.6936692595481873, 0.6074861884117126, 0.5484310984611511, 0.5416837930679321, 0.5403264164924622, 0.5473051071166992, 0.5322930216789246, 0.49153438210487366, 0.5202571749687195, 0.49447083473205566, 0.49569424986839294, 0.526290774345398, 0.5122077465057373, 0.519220769405365, 0.4919355511665344, 0.48372000455856323, 0.47814977169036865, 0.4826659560203552, 0.5053272843360901], "accuracy": [0.4858010709285736, 0.7057191729545593, 0.7500990629196167, 0.7774402499198914, 0.7938185334205627, 0.7964601516723633, 0.7996301651000977, 0.8197067975997925, 0.800290584564209, 0.824329674243927, 0.8162726163864136, 0.8235371708869934, 0.8240655064582825, 0.8313300609588623, 0.8181217908859253, 0.8264430165290833, 0.8228767514228821, 0.8389908671379089, 0.8436138033866882, 0.8272355198860168, 0.8281601071357727], "val_loss": [0.945762038230896, 0.6123461723327637, 0.554445207118988, 0.5150999426841736, 0.48864513635635376, 0.5147283673286438, 0.4865441620349884, 0.4932343661785126, 0.5062790513038635, 0.5035241842269897, 0.5002104640007019, 0.49415379762649536, 0.5508006811141968, 0.5102353692054749, 0.5018531680107117, 0.5326290726661682, 0.5247107148170471, 0.6464417576789856, 0.527933657169342, 0.5726897120475769, 0.5819271802902222], "val_accuracy": [0.6683333516120911, 0.7760000228881836, 0.7943333387374878, 0.8216666579246521, 0.8230000138282776, 0.8223333358764648, 0.8346666693687439, 0.8246666789054871, 0.8270000219345093, 0.8370000123977661, 0.8256666660308838, 0.8336666822433472, 0.831333339214325, 0.8396666646003723, 0.8360000252723694, 0.8426666855812073, 0.8299999833106995, 0.8379999995231628, 0.8386666774749756, 0.8393333554267883, 0.8353333473205566]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 2, 3, 1, 3, 5, 4, 2, 4, 8, 6, 3, 2, 0, 1, 3, 6, 3, 3, 4, 2, 4, 1], [0, 0, 1, 0, 2, 0, 1, 1, 3, 2, 2, 1, 1, 2, 0, 1, 2, 3, 2, 1], [0, 39, 39, 97, 10], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 9], [0, 0, 2, 0, 3, 1, 0], [0, 52, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 1, 5, 1, 8], [2, 0, 1, 4], [0], [1], [0], [4], [0]], "fitness": -0.2582857012748718, "mapping_values": [1, 43, 23, 20, 5, 6, 3, 3, 2, 10, 6, 4, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.pow(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), alpha), tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.negative(alpha), tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.multiply(grad, grad)), tf.math.multiply(alpha, alpha)), tf.math.pow(tf.math.add(tf.math.pow(grad, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), alpha), grad))), grad), tf.math.subtract(grad, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(beta, tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.sqrt(alpha), grad))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.910769462585449, 2.3065121173858643, 2.303551197052002, 2.3033998012542725, 2.2997524738311768, 2.2816574573516846, 2.3127806186676025, 2.347613573074341, 2.3048551082611084, 2.303394079208374], "accuracy": [0.18214239180088043, 0.09509972482919693, 0.09417514503002167, 0.09615638852119446, 0.12891295552253723, 0.13380002975463867, 0.1344604343175888, 0.11042134463787079, 0.09747721254825592, 0.10038304328918457], "val_loss": [2.308216094970703, 2.3034920692443848, 2.302581310272217, 2.301732063293457, 2.254394292831421, 2.2328574657440186, 2.361910581588745, 2.3056347370147705, 2.3034725189208984, 2.3028311729431152], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.11933333426713943, 0.10066666454076767, 0.2563333213329315, 0.24066667258739471, 0.16599999368190765, 0.10100000351667404, 0.09833333641290665, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 6, 3, 3, 3, 2, 3, 4, 0], [0, 1, 1, 0, 0, 3, 0, 2], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 2, 3, 1, 6, 3, 8, 2, 4, 6, 1, 8, 1, 1, 9, 9], [0, 0, 2, 0, 3, 1, 0, 5, 4, 4], [0, 29, 16, 0, 59, 31], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 9, 8, 4, 26, 16, 10, 6, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(alpha, tf.math.pow(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.subtract(tf.math.sqrt(tf.math.subtract(grad, tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), grad))), grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(beta, tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0, 3, 5, 0], [0, 0, 1, 0, 2, 3, 0, 3], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 8, 6, 3, 4, 2, 8], [0, 0, 2, 0, 3, 1, 3], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.09057142585515976, "mapping_values": [1, 20, 12, 8, 4, 7, 4, 3, 2, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad))), tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309648036956787, 2.309904098510742, 2.3099617958068848, 2.310420274734497, 2.3114821910858154, 2.3092658519744873], "accuracy": [0.08849557489156723, 0.09192973375320435, 0.09655263274908066, 0.08651433140039444, 0.0886276587843895, 0.0956280529499054], "val_loss": [2.3088157176971436, 2.3088157176971436, 2.3088157176971436, 2.3088157176971436, 2.3088157176971436, 2.3088157176971436], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0, 2, 1], [0, 0, 1, 0, 2, 3, 2, 1, 1], [0, 39, 39, 79], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 5, 3, 0, 6, 3, 8, 2, 8], [0, 0, 2, 3, 3, 1, 0], [0, 23, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [0, 0, 0, 1, 1], [0, 3, 5], [2, 0], [0]], "fitness": -0.08942857384681702, "mapping_values": [1, 20, 11, 9, 3, 14, 9, 5, 2, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.negative(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))), grad), tf.math.subtract(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))), tf.math.sqrt(grad))), grad))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.square(beta), tf.constant(0.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3095340728759766, 2.309387683868408, 2.3090875148773193, 2.3104941844940186, 2.3099563121795654, 2.310549020767212], "accuracy": [0.0936468094587326, 0.09615638852119446, 0.08981640636920929, 0.09008057415485382, 0.09245806187391281, 0.08902391046285629], "val_loss": [2.308468818664551, 2.308468818664551, 2.308468818664551, 2.308468818664551, 2.308468818664551, 2.308468818664551], "val_accuracy": [0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186]}}]