[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 2, 0, 2, 3, 0], [0, 0, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8705714344978333, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5512858629226685, 0.8510552644729614, 0.7016775608062744, 0.6237209439277649, 0.5821314454078674, 0.547208845615387, 0.5340997576713562, 0.4954749047756195, 0.4879302382469177, 0.4750159680843353, 0.464155375957489, 0.43654102087020874, 0.4345057010650635, 0.42416295409202576, 0.4218352735042572, 0.40638378262519836, 0.3975018262863159, 0.38346147537231445, 0.3821600079536438, 0.37754255533218384, 0.36753448843955994, 0.36219143867492676, 0.36691373586654663, 0.35669368505477905, 0.34435534477233887, 0.3470633029937744, 0.342456579208374, 0.3326220214366913, 0.3303578794002533, 0.3239966034889221, 0.32227692008018494, 0.3150063455104828, 0.31437423825263977, 0.31242167949676514, 0.30629801750183105, 0.29891934990882874, 0.2982904314994812, 0.28855302929878235, 0.2884645164012909, 0.2830703854560852, 0.28534382581710815, 0.2851825952529907, 0.2764415442943573, 0.27993178367614746, 0.274874746799469, 0.2680070102214813, 0.26923298835754395, 0.265153706073761, 0.26777806878089905], "accuracy": [0.44868576526641846, 0.6963412761688232, 0.7405890822410583, 0.7765156626701355, 0.7910447716712952, 0.8049134612083435, 0.8074230551719666, 0.8239334225654602, 0.8280280232429504, 0.8352925777435303, 0.8342359066009521, 0.8449346423149109, 0.8506141901016235, 0.8491612672805786, 0.852331280708313, 0.8603883385658264, 0.8593316674232483, 0.8684453964233398, 0.8652753829956055, 0.8661999702453613, 0.871879518032074, 0.8721436858177185, 0.8697662353515625, 0.8765024542808533, 0.8768987059593201, 0.8790120482444763, 0.8825782537460327, 0.883238673210144, 0.8845595121383667, 0.8870691061019897, 0.8844274282455444, 0.8864086866378784, 0.886672854423523, 0.8920882344245911, 0.8938053250312805, 0.8943336606025696, 0.8951261639595032, 0.8997490406036377, 0.9030511379241943, 0.9035794734954834, 0.898428201675415, 0.8980319499969482, 0.9013340473175049, 0.9021265506744385, 0.9027869701385498, 0.90423983335495, 0.904768168926239, 0.9054285883903503, 0.9052965044975281], "val_loss": [0.840986967086792, 0.6267140507698059, 0.574476957321167, 0.5294004678726196, 0.5022740960121155, 0.511115312576294, 0.46744999289512634, 0.45950981974601746, 0.44837090373039246, 0.45240384340286255, 0.4301520586013794, 0.4280205965042114, 0.4285690188407898, 0.4100751578807831, 0.41895177960395813, 0.4022582173347473, 0.397126704454422, 0.3990853726863861, 0.38733285665512085, 0.3857741355895996, 0.38053783774375916, 0.389681875705719, 0.37624555826187134, 0.37723469734191895, 0.37232035398483276, 0.3733031451702118, 0.36915725469589233, 0.36601492762565613, 0.363965779542923, 0.3647385239601135, 0.358620285987854, 0.37234917283058167, 0.3564335107803345, 0.3555355668067932, 0.3561009466648102, 0.35199642181396484, 0.36020857095718384, 0.3490610420703888, 0.35322603583335876, 0.3503186106681824, 0.3550361394882202, 0.3568679988384247, 0.349976122379303, 0.3426620364189148, 0.34771573543548584, 0.34373149275779724, 0.3420546054840088, 0.3522103726863861, 0.34236544370651245], "val_accuracy": [0.7036666870117188, 0.7680000066757202, 0.7770000100135803, 0.8026666641235352, 0.8109999895095825, 0.8100000023841858, 0.8303333520889282, 0.8303333520889282, 0.8339999914169312, 0.8379999995231628, 0.843666672706604, 0.8523333072662354, 0.8456666469573975, 0.8523333072662354, 0.8513333201408386, 0.8500000238418579, 0.862666666507721, 0.8529999852180481, 0.8610000014305115, 0.8629999756813049, 0.8579999804496765, 0.8610000014305115, 0.8616666793823242, 0.862333357334137, 0.8673333525657654, 0.862333357334137, 0.8709999918937683, 0.8683333396911621, 0.8709999918937683, 0.8703333139419556, 0.8736666440963745, 0.871666669845581, 0.8740000128746033, 0.8756666779518127, 0.8663333058357239, 0.8736666440963745, 0.8673333525657654, 0.8763333559036255, 0.8793333172798157, 0.8809999823570251, 0.8713333606719971, 0.8676666617393494, 0.8813333511352539, 0.8820000290870667, 0.8776666522026062, 0.8786666393280029, 0.878333330154419, 0.875333309173584, 0.8799999952316284]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.822857141494751, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5969820022583008, 0.8585726618766785, 0.694784939289093, 0.6135885119438171, 0.5755603313446045, 0.5648694038391113, 0.5332576036453247, 0.5131824016571045, 0.48005959391593933, 0.47259894013404846, 0.4699092507362366, 0.5032071471214294, 0.4816848039627075, 0.4919675886631012, 0.51986163854599, 0.496863454580307, 0.48938053846359253, 0.48652905225753784], "accuracy": [0.4679698944091797, 0.6993792057037354, 0.7483819723129272, 0.7799497842788696, 0.7955356240272522, 0.798309326171875, 0.8208954930305481, 0.8136309385299683, 0.8302733898162842, 0.837141752243042, 0.8315942287445068, 0.8323867321014404, 0.8319904804229736, 0.8315942287445068, 0.8385946154594421, 0.842028796672821, 0.8417646288871765, 0.8380662798881531], "val_loss": [0.9156696200370789, 0.6390181183815002, 0.5457825064659119, 0.47313839197158813, 0.49848484992980957, 0.4871096611022949, 0.48161181807518005, 0.46196305751800537, 0.49072423577308655, 0.4732332229614258, 0.48259687423706055, 0.5130183696746826, 0.4717838168144226, 0.512764036655426, 0.5548590421676636, 0.5216659903526306, 0.5114762187004089, 0.5454918742179871], "val_accuracy": [0.6970000267028809, 0.7573333382606506, 0.7960000038146973, 0.8233333230018616, 0.8203333616256714, 0.828000009059906, 0.8273333311080933, 0.8270000219345093, 0.8363333344459534, 0.8336666822433472, 0.8426666855812073, 0.8453333377838135, 0.8506666421890259, 0.8270000219345093, 0.8413333296775818, 0.843666672706604, 0.8443333506584167, 0.8443333506584167]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 4, 0], [0, 0, 2, 0, 2, 3, 0, 2], [0, 0, 28, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 0, 0], [35, 76, 16, 0, 60], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.45085713267326355, "mapping_values": [1, 16, 8, 8, 4, 16, 9, 7, 5, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), grad))), grad), tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3082661628723145, 2.306864023208618, 2.3067095279693604, 2.3037469387054443, 2.3024673461914062, 2.2997515201568604, 2.2989048957824707, 2.296318531036377, 2.295229434967041, 2.292543649673462, 2.2906494140625, 2.2900571823120117, 2.2885825634002686, 2.2862584590911865, 2.2852537631988525, 2.2835302352905273, 2.282757520675659, 2.280618906021118, 2.277111768722534, 2.2769386768341064, 2.2752740383148193, 2.2713756561279297, 2.2703187465667725, 2.2684366703033447, 2.267460584640503, 2.266993999481201, 2.2639522552490234, 2.261544704437256, 2.261542797088623, 2.2595479488372803, 2.2556796073913574, 2.2543957233428955, 2.2519967555999756, 2.2495803833007812, 2.2484567165374756, 2.246377944946289, 2.2430474758148193, 2.2404253482818604, 2.241926670074463, 2.236274003982544, 2.2343621253967285, 2.2341432571411133, 2.2304394245147705, 2.2276408672332764, 2.2255561351776123, 2.225101947784424, 2.2205862998962402, 2.2161989212036133, 2.2137181758880615, 2.20959734916687, 2.2083499431610107, 2.204360246658325, 2.202986240386963, 2.1991257667541504, 2.1949357986450195, 2.191713333129883], "accuracy": [0.09377889335155487, 0.09985470771789551, 0.09615638852119446, 0.1002509593963623, 0.10249637067317963, 0.10579843819141388, 0.11015717685222626, 0.1162329912185669, 0.11861048638820648, 0.1216483935713768, 0.12878087162971497, 0.13089419901371002, 0.13340377807617188, 0.137630432844162, 0.14621582627296448, 0.1468762308359146, 0.15255580842494965, 0.15731078386306763, 0.16563200950622559, 0.1694624274969101, 0.16919825971126556, 0.18742570281028748, 0.18650111556053162, 0.19455818831920624, 0.1850482076406479, 0.19416193664073944, 0.2024831622838974, 0.20895522832870483, 0.20882314443588257, 0.2110685557126999, 0.2250693440437317, 0.21991810202598572, 0.23444722592830658, 0.2339189052581787, 0.23603223264217377, 0.24818386137485504, 0.2565050721168518, 0.261260062456131, 0.2542596757411957, 0.2658829689025879, 0.26799631118774414, 0.26878878474235535, 0.2775062620639801, 0.2810725271701813, 0.280940443277359, 0.28041210770606995, 0.2899220585823059, 0.29797911643981934, 0.30365869402885437, 0.3086778521537781, 0.3151499032974243, 0.31224408745765686, 0.30920618772506714, 0.31039494276046753, 0.3210936486721039, 0.32439571619033813], "val_loss": [2.3065989017486572, 2.304617404937744, 2.3026678562164307, 2.300708055496216, 2.298794746398926, 2.2968828678131104, 2.294980764389038, 2.293135166168213, 2.2913200855255127, 2.2894997596740723, 2.2876627445220947, 2.28584623336792, 2.2840449810028076, 2.282249927520752, 2.280452251434326, 2.2786591053009033, 2.276890516281128, 2.2751004695892334, 2.273282289505005, 2.2714622020721436, 2.269639492034912, 2.267796754837036, 2.265939474105835, 2.2640414237976074, 2.262136697769165, 2.260220766067505, 2.258280038833618, 2.2562718391418457, 2.2542307376861572, 2.252187490463257, 2.2500710487365723, 2.247927188873291, 2.245737075805664, 2.243478775024414, 2.2412045001983643, 2.238879919052124, 2.236487865447998, 2.2340402603149414, 2.231600284576416, 2.22904372215271, 2.2264163494110107, 2.2237725257873535, 2.221050500869751, 2.218263626098633, 2.2154176235198975, 2.2125024795532227, 2.2095112800598145, 2.2064149379730225, 2.2032206058502197, 2.1999104022979736, 2.1965341567993164, 2.1930315494537354, 2.189479112625122, 2.185823917388916, 2.1820740699768066, 2.178194761276245], "val_accuracy": [0.09566666930913925, 0.09666666388511658, 0.09833333641290665, 0.10300000011920929, 0.10633333027362823, 0.1106666699051857, 0.11900000274181366, 0.12700000405311584, 0.13300000131130219, 0.14166666567325592, 0.1509999930858612, 0.15700000524520874, 0.16500000655651093, 0.1743333339691162, 0.18333333730697632, 0.1899999976158142, 0.2006666660308838, 0.2136666625738144, 0.22466666996479034, 0.23866666853427887, 0.24633333086967468, 0.25966668128967285, 0.27266666293144226, 0.2863333225250244, 0.2980000078678131, 0.3113333284854889, 0.3233333230018616, 0.3373333215713501, 0.3503333330154419, 0.36633333563804626, 0.3776666522026062, 0.3916666805744171, 0.3996666669845581, 0.40700000524520874, 0.41200000047683716, 0.41999998688697815, 0.42633333802223206, 0.43166667222976685, 0.43566668033599854, 0.43700000643730164, 0.4413333237171173, 0.4423333406448364, 0.445333331823349, 0.44466665387153625, 0.445333331823349, 0.4476666748523712, 0.4483333230018616, 0.4506666660308838, 0.45100000500679016, 0.45266667008399963, 0.4573333263397217, 0.45500001311302185, 0.4573333263397217, 0.4560000002384186, 0.4560000002384186, 0.4556666612625122]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 6, 2, 3, 8, 0], [0, 0, 2, 0, 2, 3, 1], [0, 0, 39, 79], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 2, 3, 1, 6, 3, 8, 2, 8, 7, 7, 1, 1, 0, 4, 4, 5, 9], [0, 0, 3, 0, 3, 1, 0, 3, 4, 0, 5, 1], [0, 76, 16, 87, 64, 46], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 3, 30, 18, 12, 6, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.sqrt(tf.math.add(grad, tf.math.sqrt(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), alpha)), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.negative(grad), tf.math.pow(grad, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.square(alpha))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 4, 6, 1, 3, 2, 3, 8, 0], [0, 0, 2, 0, 2, 3, 0], [0, 0, 58, 79], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 8, 3, 1, 6, 3, 4, 2, 8, 2, 7, 3, 8], [0, 0, 2, 0, 3, 1, 0, 2, 0, 2], [0, 76, 16, 0, 91], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [1, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 23, 13, 10, 5, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.multiply(tf.math.sqrt(beta), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), beta)))), lambda shape,  alpha, beta, sigma, grad: alpha, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 8, 3, 5, 3, 8, 0], [0, 0, 2, 0, 2, 3, 0], [0, 91, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 3, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 3, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]