[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8345714211463928, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5316277742385864, 0.8537921905517578, 0.6611957550048828, 0.6263105273246765, 0.5712110996246338, 0.5682618021965027, 0.5143433213233948, 0.5088130831718445, 0.5093817114830017, 0.4823790490627289, 0.48490846157073975, 0.5074345469474792, 0.49670884013175964, 0.4962010383605957, 0.5068474411964417, 0.5130851864814758, 0.5116153955459595, 0.4574139416217804, 0.5107133388519287, 0.5185996890068054, 0.49690738320350647, 0.4954240620136261, 0.5129102468490601, 0.5711269974708557, 0.5737621784210205, 0.5855459570884705, 0.5940848588943481], "accuracy": [0.4839519262313843, 0.703209638595581, 0.7534011602401733, 0.767930269241333, 0.7878747582435608, 0.7885351777076721, 0.8136309385299683, 0.8076872229576111, 0.8170651197433472, 0.821820080280304, 0.8271034359931946, 0.8195747137069702, 0.8150838613510132, 0.8392550349235535, 0.8162726163864136, 0.828292191028595, 0.8238013386726379, 0.8462554216384888, 0.8317263126373291, 0.8226125836372375, 0.8271034359931946, 0.8345000743865967, 0.8327829837799072, 0.8157442808151245, 0.8220842480659485, 0.8236692547798157, 0.8181217908859253], "val_loss": [0.823531985282898, 0.6263895034790039, 0.5500750541687012, 0.5166194438934326, 0.5238102078437805, 0.47010838985443115, 0.465969979763031, 0.4803876578807831, 0.4833907186985016, 0.4769699275493622, 0.515984296798706, 0.5267500281333923, 0.5470263957977295, 0.5637879371643066, 0.5416514277458191, 0.5573222637176514, 0.5697140097618103, 0.5700758099555969, 0.5599915385246277, 0.5714818239212036, 0.5252775549888611, 0.5598548054695129, 0.5780342817306519, 0.6294416189193726, 0.5744737982749939, 0.7079852819442749, 0.7151616215705872], "val_accuracy": [0.715666651725769, 0.7753333449363708, 0.7953333258628845, 0.8083333373069763, 0.8209999799728394, 0.8343333601951599, 0.8393333554267883, 0.8370000123977661, 0.8423333168029785, 0.8389999866485596, 0.8389999866485596, 0.8336666822433472, 0.8489999771118164, 0.8483333587646484, 0.8309999704360962, 0.8423333168029785, 0.8450000286102295, 0.8503333330154419, 0.8420000076293945, 0.8353333473205566, 0.8410000205039978, 0.8506666421890259, 0.8220000267028809, 0.8433333039283752, 0.8413333296775818, 0.8396666646003723, 0.8423333168029785]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0, 0, 4], [0, 0, 1, 2, 2, 3, 0, 2], [0, 39, 39, 79], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 6, 5, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [77, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 11, 8, 3, 12, 7, 5, 3, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), grad), grad)), tf.math.negative(grad)), tf.math.negative(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(beta)))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 1, 4, 5, 4, 5, 2], [0, 0, 2, 2, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 5, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 3, 1, 5, 8, 8, 8, 0, 2, 9, 7, 9, 8], [0, 6, 1], [0, 15, 9], [1], [0], [2], [0]], "fitness": -0.09142857044935226, "mapping_values": [1, 16, 9, 7, 3, 11, 6, 5, 3, 16, 13, 3, 3, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.square(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), grad)), grad), tf.math.add(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.add(grad, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.308738946914673, 2.3099238872528076, 2.3101015090942383, 2.3101651668548584, 2.3101179599761963, 2.3091797828674316], "accuracy": [0.09140139818191528, 0.09206181764602661, 0.08942015469074249, 0.08928807079792023, 0.08915598690509796, 0.09470347315073013], "val_loss": [2.309096097946167, 2.309096097946167, 2.309096097946167, 2.309096097946167, 2.309096097946167, 2.309096097946167], "val_accuracy": [0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 0, 1, 3, 2, 3, 5, 0], [0, 1, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 8, 8, 2, 8], [0, 0, 2, 3, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.0908571407198906, "mapping_values": [1, 15, 9, 6, 2, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(alpha, tf.math.square(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309433698654175, 2.309483289718628, 2.3092570304870605, 2.310931444168091, 2.3111627101898193, 2.3094234466552734], "accuracy": [0.09259014576673508, 0.09232597798109055, 0.09496764093637466, 0.09298639744520187, 0.09113723784685135, 0.09694888442754745], "val_loss": [2.3090474605560303, 2.3090474605560303, 2.3090474605560303, 2.3090474605560303, 2.3090474605560303, 2.3090474605560303], "val_accuracy": [0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971, 0.09233333170413971]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 2, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 3, 1, 6, 3, 8, 2, 3], [0, 0, 2, 0, 3, 1, 2, 2, 1], [0, 76, 16, 76], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.08857142925262451, "mapping_values": [1, 1, 0, 1, 1, 18, 9, 9, 3, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(beta, beta))))), alpha), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.308253049850464, 2.3094139099121094, 2.3099491596221924, 2.3089795112609863, 2.3093976974487305, 2.3107125759124756], "accuracy": [0.09232597798109055, 0.0940430611371994, 0.09417514503002167, 0.09602430462837219, 0.09087307006120682, 0.09311848133802414], "val_loss": [2.309053659439087, 2.309053659439087, 2.309053659439087, 2.309053659439087, 2.309053659439087, 2.309053659439087], "val_accuracy": [0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654]}}]