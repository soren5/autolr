[{"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0], [0, 39, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.8645714521408081, "mapping_values": [1, 16, 9, 7, 4, 16, 9, 7, 4, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(grad)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5996499061584473, 0.8963034152984619, 0.7220701575279236, 0.6599181890487671, 0.6117212772369385, 0.5813512802124023, 0.5569454431533813, 0.5365417003631592, 0.5087707042694092, 0.4917945861816406, 0.47812631726264954, 0.4605651795864105, 0.44874972105026245, 0.4400193393230438, 0.43779417872428894, 0.4308006167411804, 0.410349041223526, 0.41637176275253296, 0.4079860746860504, 0.3887026607990265, 0.3867568373680115, 0.38235998153686523, 0.37016916275024414, 0.3759779632091522, 0.36263343691825867, 0.36390671133995056, 0.35775408148765564, 0.3582010567188263, 0.34751665592193604, 0.3454747498035431, 0.33561578392982483, 0.3293773829936981, 0.3330575227737427, 0.33356955647468567, 0.3197841942310333, 0.317922979593277, 0.3141796290874481], "accuracy": [0.4344208240509033, 0.693831741809845, 0.7408532500267029, 0.7621186375617981, 0.7812706232070923, 0.789988100528717, 0.798309326171875, 0.8080834746360779, 0.8190463781356812, 0.8239334225654602, 0.8284242749214172, 0.8381983637809753, 0.8393871188163757, 0.8438779711723328, 0.8424250483512878, 0.8471800088882446, 0.8518029451370239, 0.8551049828529358, 0.8562937378883362, 0.8614450097084045, 0.86118084192276, 0.8648791313171387, 0.8652753829956055, 0.8638224601745605, 0.871879518032074, 0.8706908226013184, 0.8742570281028748, 0.8741249442100525, 0.8770307898521423, 0.8800686597824097, 0.8831065893173218, 0.8820499181747437, 0.8844274282455444, 0.8837670087814331, 0.8854840993881226, 0.8878615498542786, 0.8849557638168335], "val_loss": [0.9074334502220154, 0.6312552690505981, 0.5734075307846069, 0.5567192435264587, 0.5288919806480408, 0.4919843375682831, 0.4923982620239258, 0.45666512846946716, 0.44777172803878784, 0.4637279808521271, 0.4387747347354889, 0.42249178886413574, 0.40985700488090515, 0.4169467091560364, 0.40243181586265564, 0.40890640020370483, 0.4021371603012085, 0.39806509017944336, 0.38484784960746765, 0.3780273497104645, 0.3902437388896942, 0.383583128452301, 0.3724820017814636, 0.37258344888687134, 0.3665012717247009, 0.3681011199951172, 0.3710932731628418, 0.3715391755104065, 0.36342278122901917, 0.36375880241394043, 0.36184266209602356, 0.3562510907649994, 0.3617759048938751, 0.3614536225795746, 0.3587040901184082, 0.35285934805870056, 0.361244261264801], "val_accuracy": [0.6930000185966492, 0.7760000228881836, 0.7873333096504211, 0.793666660785675, 0.8016666769981384, 0.8213333487510681, 0.8230000138282776, 0.8389999866485596, 0.8393333554267883, 0.8336666822433472, 0.8429999947547913, 0.8473333120346069, 0.8560000061988831, 0.8496666550636292, 0.859333336353302, 0.8553333282470703, 0.8576666712760925, 0.8576666712760925, 0.8643333315849304, 0.8669999837875366, 0.862666666507721, 0.8656666874885559, 0.8706666827201843, 0.8703333139419556, 0.8703333139419556, 0.8666666746139526, 0.8693333268165588, 0.8730000257492065, 0.8740000128746033, 0.871666669845581, 0.875333309173584, 0.878000020980835, 0.8740000128746033, 0.8763333559036255, 0.874666690826416, 0.8759999871253967, 0.8700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2], [0, 0, 2, 0, 3, 1, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.834857165813446, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(grad)), tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5413093566894531, 0.7810027599334717, 0.6521272659301758, 0.6010681986808777, 0.5625630617141724, 0.5363020896911621, 0.5219374895095825, 0.5103381872177124, 0.5092034339904785, 0.5030544996261597, 0.5107546448707581, 0.4984109103679657, 0.4949627220630646, 0.4830099046230316, 0.4935261607170105], "accuracy": [0.48064985871315, 0.715889573097229, 0.7539294958114624, 0.7758552432060242, 0.7910447716712952, 0.8012151718139648, 0.8037247657775879, 0.8105930685997009, 0.8121780753135681, 0.8317263126373291, 0.8251221776008606, 0.8191784620285034, 0.8234050869941711, 0.8294808864593506, 0.8222163319587708], "val_loss": [0.7679869532585144, 0.6020063757896423, 0.5611699223518372, 0.5163935422897339, 0.49787792563438416, 0.5198773741722107, 0.4618954360485077, 0.5435816049575806, 0.4796524941921234, 0.5162403583526611, 0.5052216649055481, 0.4940769076347351, 0.538623034954071, 0.47840455174446106, 0.4854835569858551], "val_accuracy": [0.7273333072662354, 0.7743333578109741, 0.8040000200271606, 0.8026666641235352, 0.8216666579246521, 0.8256666660308838, 0.8240000009536743, 0.8226666450500488, 0.8403333425521851, 0.8486666679382324, 0.8256666660308838, 0.8356666564941406, 0.8413333296775818, 0.8453333377838135, 0.8446666598320007]}, "mapping_values": [1, 11, 6, 5, 3, 15, 8, 7, 4, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [7, 6, 3, 1, 3, 2, 3, 8, 0], [0, 0, 1, 0, 2, 3, 0, 2], [11, 39, 39, 60], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [0, 2, 0, 8, 6, 3, 8, 2, 8], [0, 4, 2, 0, 3, 3, 0], [0, 27, 16, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 1, 5, 8, 8, 1, 3, 2, 2, 1, 9, 5, 4, 2], [0, 5, 1, 3, 7, 7, 6, 1, 1], [0, 83], [1], [0], [4], [0]], "fitness": -0.35857143998146057, "mapping_values": [1, 16, 8, 8, 4, 6, 4, 2, 1, 24, 15, 9, 2, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.multiply(tf.math.sqrt(grad), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.math.subtract(grad, tf.math.multiply(tf.math.add(tf.math.add(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), alpha), sigma), tf.math.square(grad)), tf.math.pow(grad, tf.math.add(grad, alpha)))))))), alpha)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.412569999694824, 2.425910234451294, 2.3010408878326416, 2.3016741275787354, 2.2933881282806396, 2.303349733352661], "accuracy": [0.2032756507396698, 0.17593449354171753, 0.2040681540966034, 0.10777968913316727, 0.12230881303548813, 0.09774138033390045], "val_loss": [1.9458528757095337, 2.2027902603149414, 2.3060197830200195, 2.259723424911499, 2.303126335144043, 2.2955007553100586], "val_accuracy": [0.36033332347869873, 0.16899999976158142, 0.10000000149011612, 0.20333333313465118, 0.10300000011920929, 0.1770000010728836]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0], [4, 6, 3, 1, 3, 2, 3, 8, 0, 8, 5, 5, 9], [0, 0, 1, 0, 2, 0, 0], [0, 39, 39, 11, 56, 71], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 9, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [53, 71, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 13, 7, 6, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.square(tf.math.square(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [13682395136.0, 2074473398272.0, 36378041647104.0, 250464155205632.0, 1122669755891712.0, 3646334355636224.0], "accuracy": [0.09840179979801178, 0.10328886657953262, 0.10553427785634995, 0.10196803510189056, 0.09853387624025345, 0.10355303436517715], "val_loss": [143979397120.0, 7762163531776.0, 83314975178752.0, 454236580085760.0, 1701414384435200.0, 5018231198711808.0], "val_accuracy": [0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876, 0.10466666519641876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 8, 2, 2, 3, 8, 9], [0, 0, 1, 2, 2, 3, 0], [0, 11, 39, 79], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8, 0, 3, 7, 6, 8, 3, 9, 5, 0, 4, 4, 1, 9, 2, 3, 6], [0, 0, 2, 0, 2, 1, 0, 4, 0, 1, 4, 4, 3, 3, 1], [0, 76, 16, 0, 21, 42, 19], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 9, 5, 3, 40, 25, 15, 7, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.multiply(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), grad), grad)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(tf.math.sqrt(beta), tf.math.negative(alpha)))), tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.negative(grad))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.math.pow(tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.multiply(grad, tf.math.divide_no_nan(grad, grad)), alpha))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 6, 3, 1, 8, 2, 3, 8, 0], [1, 0, 1, 0, 2, 3, 0], [0, 39, 39, 80], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3, 8, 2, 8], [0, 0, 2, 0, 3, 1, 0], [0, 76, 16, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 2, 1, 5, 8, 8], [2, 0, 1], [43], [1], [0], [2], [0]], "fitness": -0.08885714411735535, "mapping_values": [1, 13, 7, 6, 2, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(alpha, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), grad)), lambda shape,  alpha, beta, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3102903366088867, 2.3096938133239746, 2.3100459575653076, 2.3103890419006348, 2.3092923164367676, 2.3093953132629395], "accuracy": [0.09008057415485382, 0.09087307006120682, 0.09417514503002167, 0.09166556596755981, 0.09721305221319199, 0.09457138925790787], "val_loss": [2.30905818939209, 2.30905818939209, 2.30905818939209, 2.30905818939209, 2.30905818939209, 2.30905818939209], "val_accuracy": [0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492]}}]