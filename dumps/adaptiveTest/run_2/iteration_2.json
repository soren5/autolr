[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8619999885559082, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.226348876953125, 1.8794918060302734, 1.417793869972229, 1.1052825450897217, 0.9593082070350647, 0.8663129806518555, 0.7892252206802368, 0.7527231574058533, 0.7167013883590698, 0.6855252981185913, 0.6524377465248108, 0.6317535638809204, 0.6140557527542114, 0.5916767716407776, 0.5752793550491333, 0.5591614842414856, 0.5403441786766052, 0.5304502248764038, 0.5286852121353149, 0.5207974910736084, 0.49958497285842896, 0.5010033845901489, 0.48574531078338623, 0.4809221923351288, 0.4685618281364441, 0.4554644525051117, 0.4499361515045166, 0.4439038336277008, 0.4420427083969116, 0.41955462098121643, 0.4230092465877533, 0.412030428647995, 0.4072582721710205, 0.40039676427841187, 0.3976851999759674, 0.3918563723564148, 0.38185927271842957, 0.37996265292167664, 0.3791578412055969, 0.36817070841789246, 0.37058204412460327, 0.3493867814540863, 0.3543159067630768, 0.34348005056381226, 0.3391079604625702, 0.33907392621040344, 0.3294035792350769, 0.3289995789527893, 0.3135201632976532, 0.3127898871898651, 0.3111494779586792, 0.306598037481308, 0.30500975251197815, 0.2976189851760864], "accuracy": [0.2661471366882324, 0.4703473746776581, 0.5525029897689819, 0.6139215230941772, 0.6565843224525452, 0.6944921612739563, 0.7173424959182739, 0.7306828498840332, 0.7411174178123474, 0.7483819723129272, 0.7642319202423096, 0.7733456492424011, 0.7820631265640259, 0.789988100528717, 0.7957997918128967, 0.8000264167785645, 0.809140145778656, 0.8095363974571228, 0.811649739742279, 0.8211596608161926, 0.8216879963874817, 0.8265751004219055, 0.8300092220306396, 0.8338396549224854, 0.8330471515655518, 0.8407079577445984, 0.8444063067436218, 0.8413683772087097, 0.8425571322441101, 0.852859616279602, 0.8488970994949341, 0.8537842035293579, 0.8514066934585571, 0.8564258217811584, 0.859199583530426, 0.8610487580299377, 0.863558292388916, 0.8639545440673828, 0.8650112152099609, 0.8685774803161621, 0.8673887252807617, 0.8741249442100525, 0.8739928603172302, 0.8796724081039429, 0.8815215826034546, 0.8803328275680542, 0.8809932470321655, 0.8824461698532104, 0.8878615498542786, 0.887597382068634, 0.8893144726753235, 0.8899748921394348, 0.8873332738876343, 0.8907673954963684], "val_loss": [2.0458626747131348, 1.5252926349639893, 1.052628517150879, 0.8405277729034424, 0.7562106251716614, 0.7009351253509521, 0.6561484932899475, 0.627610981464386, 0.5985882878303528, 0.5773906111717224, 0.5564173460006714, 0.5499028563499451, 0.5310032367706299, 0.5183689594268799, 0.5061983466148376, 0.4947974383831024, 0.4873294234275818, 0.4778987169265747, 0.47643911838531494, 0.4636084735393524, 0.4534182846546173, 0.452301025390625, 0.443564772605896, 0.43724218010902405, 0.43908748030662537, 0.42712298035621643, 0.42414647340774536, 0.41837114095687866, 0.4150601923465729, 0.4146635830402374, 0.40978679060935974, 0.404580682516098, 0.4008660912513733, 0.39463624358177185, 0.39234936237335205, 0.3874043822288513, 0.38637402653694153, 0.3821287751197815, 0.3819471001625061, 0.37730884552001953, 0.37681838870048523, 0.3726356327533722, 0.3718409836292267, 0.36555907130241394, 0.365915447473526, 0.3645326793193817, 0.36497762799263, 0.362476110458374, 0.3640541732311249, 0.35964512825012207, 0.3545864522457123, 0.3588787317276001, 0.3534260392189026, 0.3523516058921814], "val_accuracy": [0.5196666717529297, 0.6453333497047424, 0.6673333048820496, 0.703000009059906, 0.721666693687439, 0.7429999709129333, 0.7573333382606506, 0.7646666765213013, 0.7763333320617676, 0.7829999923706055, 0.7956666946411133, 0.7896666526794434, 0.8033333420753479, 0.8149999976158142, 0.8153333067893982, 0.8173333406448364, 0.8233333230018616, 0.8276666402816772, 0.8240000009536743, 0.824999988079071, 0.8346666693687439, 0.8366666436195374, 0.8389999866485596, 0.843666672706604, 0.8383333086967468, 0.8463333249092102, 0.8503333330154419, 0.8510000109672546, 0.8486666679382324, 0.8463333249092102, 0.8503333330154419, 0.8523333072662354, 0.8553333282470703, 0.8553333282470703, 0.8566666841506958, 0.859333336353302, 0.856333315372467, 0.862666666507721, 0.856333315372467, 0.8586666584014893, 0.8629999756813049, 0.8619999885559082, 0.862333357334137, 0.8653333187103271, 0.8659999966621399, 0.8676666617393494, 0.8633333444595337, 0.8616666793823242, 0.8696666955947876, 0.8643333315849304, 0.8666666746139526, 0.8696666955947876, 0.8679999709129333, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [84, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [11, 56], [0, 1], [0], [0], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 9, 3, 6, 8, 1, 4, 8, 4, 2, 8], [4, 0, 0, 3, 4, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.40771427750587463, "mapping_values": [1, 6, 3, 3, 2, 10, 6, 4, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.2843666076660156, 2.2407426834106445, 2.2505297660827637, 2.524466037750244, 2.309952974319458, 2.2963454723358154, 3.111053228378296], "accuracy": [0.19931316375732422, 0.2386738806962967, 0.15770703554153442, 0.10830801725387573, 0.09628847241401672, 0.1258750557899475, 0.20776647329330444], "val_loss": [2.1817057132720947, 1.8725676536560059, 2.3031680583953857, 2.3087406158447266, 2.3030548095703125, 2.2160258293151855, 2.30859637260437], "val_accuracy": [0.3713333308696747, 0.40666666626930237, 0.1003333330154419, 0.09933333098888397, 0.09933333098888397, 0.3466666638851166, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 5, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 5, 0, 3, 2], [0, 2, 0, 1], [77, 16], [0, 1], [0], [0], [38], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [6, 4, 3, 6, 2, 1, 4, 1, 4, 2, 8, 8, 0, 8, 5], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 3], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.math.sqrt(tf.math.sqrt(alpha)), beta))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(tf.math.square(sigma))))", "other_info": {"loss": [136155652096.0, 524015403008.0, 838856212480.0, 1107217350656.0, 1338788544512.0, 1520823697408.0], "accuracy": [0.10038304328918457, 0.10434553027153015, 0.10038304328918457, 0.10249637067317963, 0.10170386731624603, 0.0948355570435524], "val_loss": [286306271232.0, 550945751040.0, 767516672000.0, 952860344320.0, 1116224225280.0, 1263155806208.0], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}, "mapping_values": [1, 6, 4, 2, 1, 6, 4, 2, 1, 2, 1, 1, 1, 26, 15, 11, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 4, 3, 0, 3, 3, 7, 7, 4, 0, 0], [0, 1, 0, 0, 3, 3, 1, 2], [39, 39, 32], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 40], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8, 4, 9], [4, 0, 0, 3, 0, 0, 4, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(tf.math.pow(grad, tf.math.negative(alpha)), tf.math.negative(grad))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.sqrt(tf.math.pow(grad, beta))))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}, "mapping_values": [1, 19, 11, 8, 3, 10, 6, 4, 2, 2, 1, 1, 1, 23, 13, 10, 6], "tree_depth": 21}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 2, 0, 3], [0, 2, 0, 2], [48, 39], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 2], [0, 2, 0, 0], [16, 16], [0, 1], [5], [0], [3], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 4, 3, 6, 8, 1, 4, 6, 4, 2, 8, 9], [0, 0, 0, 4, 4, 0, 3, 4, 2, 0], [16, 99, 96, 99, 39, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 21, 12, 9, 5], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad))), tf.math.divide_no_nan(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]