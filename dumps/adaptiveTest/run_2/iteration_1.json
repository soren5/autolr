[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8619999885559082, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.226348876953125, 1.8794918060302734, 1.417793869972229, 1.1052825450897217, 0.9593082070350647, 0.8663129806518555, 0.7892252206802368, 0.7527231574058533, 0.7167013883590698, 0.6855252981185913, 0.6524377465248108, 0.6317535638809204, 0.6140557527542114, 0.5916767716407776, 0.5752793550491333, 0.5591614842414856, 0.5403441786766052, 0.5304502248764038, 0.5286852121353149, 0.5207974910736084, 0.49958497285842896, 0.5010033845901489, 0.48574531078338623, 0.4809221923351288, 0.4685618281364441, 0.4554644525051117, 0.4499361515045166, 0.4439038336277008, 0.4420427083969116, 0.41955462098121643, 0.4230092465877533, 0.412030428647995, 0.4072582721710205, 0.40039676427841187, 0.3976851999759674, 0.3918563723564148, 0.38185927271842957, 0.37996265292167664, 0.3791578412055969, 0.36817070841789246, 0.37058204412460327, 0.3493867814540863, 0.3543159067630768, 0.34348005056381226, 0.3391079604625702, 0.33907392621040344, 0.3294035792350769, 0.3289995789527893, 0.3135201632976532, 0.3127898871898651, 0.3111494779586792, 0.306598037481308, 0.30500975251197815, 0.2976189851760864], "accuracy": [0.2661471366882324, 0.4703473746776581, 0.5525029897689819, 0.6139215230941772, 0.6565843224525452, 0.6944921612739563, 0.7173424959182739, 0.7306828498840332, 0.7411174178123474, 0.7483819723129272, 0.7642319202423096, 0.7733456492424011, 0.7820631265640259, 0.789988100528717, 0.7957997918128967, 0.8000264167785645, 0.809140145778656, 0.8095363974571228, 0.811649739742279, 0.8211596608161926, 0.8216879963874817, 0.8265751004219055, 0.8300092220306396, 0.8338396549224854, 0.8330471515655518, 0.8407079577445984, 0.8444063067436218, 0.8413683772087097, 0.8425571322441101, 0.852859616279602, 0.8488970994949341, 0.8537842035293579, 0.8514066934585571, 0.8564258217811584, 0.859199583530426, 0.8610487580299377, 0.863558292388916, 0.8639545440673828, 0.8650112152099609, 0.8685774803161621, 0.8673887252807617, 0.8741249442100525, 0.8739928603172302, 0.8796724081039429, 0.8815215826034546, 0.8803328275680542, 0.8809932470321655, 0.8824461698532104, 0.8878615498542786, 0.887597382068634, 0.8893144726753235, 0.8899748921394348, 0.8873332738876343, 0.8907673954963684], "val_loss": [2.0458626747131348, 1.5252926349639893, 1.052628517150879, 0.8405277729034424, 0.7562106251716614, 0.7009351253509521, 0.6561484932899475, 0.627610981464386, 0.5985882878303528, 0.5773906111717224, 0.5564173460006714, 0.5499028563499451, 0.5310032367706299, 0.5183689594268799, 0.5061983466148376, 0.4947974383831024, 0.4873294234275818, 0.4778987169265747, 0.47643911838531494, 0.4636084735393524, 0.4534182846546173, 0.452301025390625, 0.443564772605896, 0.43724218010902405, 0.43908748030662537, 0.42712298035621643, 0.42414647340774536, 0.41837114095687866, 0.4150601923465729, 0.4146635830402374, 0.40978679060935974, 0.404580682516098, 0.4008660912513733, 0.39463624358177185, 0.39234936237335205, 0.3874043822288513, 0.38637402653694153, 0.3821287751197815, 0.3819471001625061, 0.37730884552001953, 0.37681838870048523, 0.3726356327533722, 0.3718409836292267, 0.36555907130241394, 0.365915447473526, 0.3645326793193817, 0.36497762799263, 0.362476110458374, 0.3640541732311249, 0.35964512825012207, 0.3545864522457123, 0.3588787317276001, 0.3534260392189026, 0.3523516058921814], "val_accuracy": [0.5196666717529297, 0.6453333497047424, 0.6673333048820496, 0.703000009059906, 0.721666693687439, 0.7429999709129333, 0.7573333382606506, 0.7646666765213013, 0.7763333320617676, 0.7829999923706055, 0.7956666946411133, 0.7896666526794434, 0.8033333420753479, 0.8149999976158142, 0.8153333067893982, 0.8173333406448364, 0.8233333230018616, 0.8276666402816772, 0.8240000009536743, 0.824999988079071, 0.8346666693687439, 0.8366666436195374, 0.8389999866485596, 0.843666672706604, 0.8383333086967468, 0.8463333249092102, 0.8503333330154419, 0.8510000109672546, 0.8486666679382324, 0.8463333249092102, 0.8503333330154419, 0.8523333072662354, 0.8553333282470703, 0.8553333282470703, 0.8566666841506958, 0.859333336353302, 0.856333315372467, 0.862666666507721, 0.856333315372467, 0.8586666584014893, 0.8629999756813049, 0.8619999885559082, 0.862333357334137, 0.8653333187103271, 0.8659999966621399, 0.8676666617393494, 0.8633333444595337, 0.8616666793823242, 0.8696666955947876, 0.8643333315849304, 0.8666666746139526, 0.8696666955947876, 0.8679999709129333, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [25, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 4, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8391428589820862, "mapping_values": [1, 6, 3, 3, 1, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), alpha), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), grad), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.7799261808395386, 1.1112337112426758, 0.9205630421638489, 0.8454266786575317, 0.791360080242157, 0.7271857857704163, 0.6999447345733643, 0.6859723925590515, 0.6561532616615295, 0.6226412057876587, 0.608644425868988, 0.5943652987480164, 0.6049219965934753, 0.5579361319541931, 0.5480987429618835, 0.5283228158950806, 0.5070726871490479, 0.5198155641555786, 0.49443289637565613, 0.4959508180618286, 0.4965868890285492, 0.46694517135620117, 0.45487329363822937, 0.44293564558029175, 0.4454495310783386, 0.44058364629745483, 0.4200584292411804, 0.41332435607910156, 0.4115479290485382, 0.42674633860588074, 0.40152090787887573, 0.39430058002471924, 0.3847317099571228, 0.3835732042789459, 0.37769371271133423, 0.36536478996276855, 0.3721839189529419, 0.3638712763786316, 0.34707677364349365, 0.3564150631427765, 0.3475639522075653, 0.34007084369659424, 0.3383411169052124, 0.32214218378067017, 0.3282383978366852, 0.3235423266887665, 0.3210166096687317, 0.307359904050827], "accuracy": [0.4375908076763153, 0.6151102781295776, 0.68101966381073, 0.6893408894538879, 0.7136441469192505, 0.7452120184898376, 0.7485140562057495, 0.7470611333847046, 0.7593448758125305, 0.7741381525993347, 0.7796856164932251, 0.7800818681716919, 0.7792893648147583, 0.802800178527832, 0.8061022162437439, 0.805177628993988, 0.819970965385437, 0.8092722296714783, 0.8267071843147278, 0.8208954930305481, 0.8210275769233704, 0.83119797706604, 0.8319904804229736, 0.8432175517082214, 0.8393871188163757, 0.8400475382804871, 0.8507462739944458, 0.8504821062088013, 0.8490291833877563, 0.8432175517082214, 0.8561616539955139, 0.86118084192276, 0.8621054291725159, 0.8570862412452698, 0.8659358024597168, 0.8652753829956055, 0.8634262084960938, 0.8656716346740723, 0.8733324408531189, 0.8698983192443848, 0.8775591254234314, 0.8780874609947205, 0.8765024542808533, 0.8858803510665894, 0.8805969953536987, 0.8794082403182983, 0.8842953443527222, 0.8891823887825012], "val_loss": [1.145461082458496, 0.8411040306091309, 0.7637057304382324, 0.7048782706260681, 0.6504465937614441, 0.6269447803497314, 0.640635073184967, 0.5985923409461975, 0.5703808665275574, 0.565990149974823, 0.5316600203514099, 0.5633200407028198, 0.503078818321228, 0.510414719581604, 0.49350595474243164, 0.4734897315502167, 0.49113863706588745, 0.48168155550956726, 0.4665358066558838, 0.4470803141593933, 0.4345564842224121, 0.4290669858455658, 0.42262402176856995, 0.41705185174942017, 0.4597206711769104, 0.411309152841568, 0.41108080744743347, 0.42988210916519165, 0.4206283688545227, 0.3995574414730072, 0.4580461382865906, 0.3866519629955292, 0.3882189095020294, 0.39308953285217285, 0.3816385865211487, 0.3852465748786926, 0.3817211985588074, 0.38291510939598083, 0.3813936710357666, 0.3705228567123413, 0.3665890693664551, 0.3977360725402832, 0.35913434624671936, 0.36330121755599976, 0.36709949374198914, 0.3756404519081116, 0.36037197709083557, 0.3483010232448578], "val_accuracy": [0.6140000224113464, 0.7110000252723694, 0.7283333539962769, 0.75, 0.7636666893959045, 0.7763333320617676, 0.7556666731834412, 0.7710000276565552, 0.7713333368301392, 0.79666668176651, 0.79666668176651, 0.7799999713897705, 0.8180000185966492, 0.8113333582878113, 0.8186666369438171, 0.8286666870117188, 0.8193333148956299, 0.8276666402816772, 0.8309999704360962, 0.8356666564941406, 0.8483333587646484, 0.8456666469573975, 0.8510000109672546, 0.8536666631698608, 0.8336666822433472, 0.8529999852180481, 0.8550000190734863, 0.8443333506584167, 0.8510000109672546, 0.8650000095367432, 0.8193333148956299, 0.8583333492279053, 0.8603333234786987, 0.8579999804496765, 0.8659999966621399, 0.8643333315849304, 0.8640000224113464, 0.8633333444595337, 0.8653333187103271, 0.8706666827201843, 0.8676666617393494, 0.8460000157356262, 0.8733333349227905, 0.8703333139419556, 0.8643333315849304, 0.8633333444595337, 0.8653333187103271, 0.8730000257492065]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 2, 3, 0, 3], [0, 1, 0, 2], [92, 39], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 2, 3, 0, 2, 5, 2, 9], [2, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 8, 1, 4, 2, 8, 1, 4, 6, 1, 1, 4, 5, 3, 7, 8, 8, 2, 4, 9, 9, 8, 6, 2, 3, 2, 2, 3, 9, 8, 0, 4, 9, 8, 8, 2, 7, 0, 3], [2, 1, 0, 3, 0, 0, 3, 1, 2, 0, 5, 7, 5, 4, 6, 7, 3, 0, 6, 7, 3, 6, 0, 6, 6], [16, 99, 96, 99, 61, 1, 13, 90, 74, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 12, 8, 4, 2, 2, 1, 1, 1, 69, 44, 25, 10], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(beta), tf.math.add(tf.math.square(beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(alpha, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), sigma)), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.add(tf.math.sqrt(tf.math.subtract(alpha, beta)), tf.math.pow(tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.add(tf.math.sqrt(grad), tf.math.sqrt(tf.math.add(tf.math.pow(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.sqrt(grad)))), grad), grad), grad), tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), grad))), tf.math.sqrt(grad)), tf.math.negative(tf.math.pow(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(sigma, grad), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.math.multiply(grad, grad))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 0, 4, 2, 8, 4, 7, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0, 2], [16, 44, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 1, 10, 6, 4, 2, 2, 1, 1, 1, 25, 14, 11, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.negative(tf.math.pow(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), sigma)))), tf.math.sqrt(tf.math.pow(alpha, tf.math.add(beta, tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [2], [12], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 2, 4, 9, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [89, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 9, 5, 4, 2, 2, 1, 1, 0, 16, 9, 7, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.303588628768921, 2.3026211261749268, 2.302699565887451, 2.302833080291748, 2.303086042404175, 2.3031065464019775, 2.304633617401123, 2.310365676879883, 2.317681312561035], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09813763201236725, 0.10157178342342377, 0.09998679161071777, 0.10157178342342377, 0.10196803510189056, 0.1006472036242485, 0.09998679161071777], "val_loss": [2.302600860595703, 2.3026766777038574, 2.302741289138794, 2.30291748046875, 2.3030171394348145, 2.303417921066284, 2.307147264480591, 2.315323829650879, 2.320185661315918], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09533333033323288, 0.10166666656732559, 0.10166666656732559, 0.0963333323597908, 0.1003333330154419, 0.09833333641290665, 0.09833333641290665]}}]