[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [5, 2, 3, 0, 3, 5, 9], [0, 2, 3, 3], [16, 88], [0, 0, 1, 0, 1, 1], [1, 0, 3], [0, 5, 6], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [1, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.8834285736083984, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), grad), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1156113147735596, 1.1266285181045532, 0.7543179392814636, 0.6674520969390869, 0.594718337059021, 0.5494779348373413, 0.51642906665802, 0.4823608100414276, 0.45740458369255066, 0.43341064453125, 0.42064666748046875, 0.39770862460136414, 0.37768059968948364, 0.36111369729042053, 0.35074546933174133, 0.34457799792289734, 0.33335381746292114, 0.32452669739723206, 0.30748414993286133, 0.30316776037216187, 0.2939970791339874, 0.2862822413444519, 0.2835896909236908, 0.26758840680122375, 0.2618829011917114, 0.25047022104263306, 0.2522719204425812, 0.24194647371768951, 0.22833606600761414, 0.23130740225315094, 0.21273569762706757, 0.21779876947402954, 0.2148962765932083, 0.20656786859035492, 0.20062801241874695, 0.1934412568807602, 0.1893332600593567, 0.18692182004451752, 0.19163726270198822, 0.18172459304332733], "accuracy": [0.29943203926086426, 0.611411988735199, 0.7193237543106079, 0.7491744756698608, 0.776251494884491, 0.7922335267066956, 0.8103289008140564, 0.8198388814926147, 0.8327829837799072, 0.8404437899589539, 0.843481719493866, 0.8506141901016235, 0.8565579056739807, 0.8642187118530273, 0.8687095642089844, 0.8726720213890076, 0.8713511824607849, 0.8745211958885193, 0.8842953443527222, 0.8842953443527222, 0.8877294659614563, 0.8898428082466125, 0.8914278149604797, 0.8965790271759033, 0.9000132083892822, 0.9050323367118835, 0.900409460067749, 0.9088627696037292, 0.9108440279960632, 0.91124027967453, 0.9181085824966431, 0.9152027368545532, 0.9157310724258423, 0.9196935892105103, 0.9196935892105103, 0.9215427041053772, 0.9257693886756897, 0.9286752343177795, 0.923920214176178, 0.9289394021034241], "val_loss": [1.1158771514892578, 0.720619797706604, 0.6438841819763184, 0.5833433270454407, 0.5310829877853394, 0.5047516226768494, 0.46038752794265747, 0.4345139265060425, 0.4191552400588989, 0.40692687034606934, 0.39764681458473206, 0.3792993426322937, 0.37137851119041443, 0.3763577342033386, 0.36554303765296936, 0.37070712447166443, 0.3574792146682739, 0.3483291566371918, 0.35181424021720886, 0.345668226480484, 0.3381510078907013, 0.3481258153915405, 0.3348238468170166, 0.3433367609977722, 0.34518131613731384, 0.3487726151943207, 0.3362666070461273, 0.34566232562065125, 0.33847224712371826, 0.34271329641342163, 0.3436060845851898, 0.34208664298057556, 0.34048113226890564, 0.35149699449539185, 0.3490248918533325, 0.35518592596054077, 0.34679466485977173, 0.3605789840221405, 0.3382059335708618, 0.354250967502594], "val_accuracy": [0.6226666569709778, 0.7246666550636292, 0.7593333125114441, 0.7683333158493042, 0.8009999990463257, 0.8046666383743286, 0.8246666789054871, 0.8426666855812073, 0.847000002861023, 0.8489999771118164, 0.8526666760444641, 0.8619999885559082, 0.8673333525657654, 0.8650000095367432, 0.8683333396911621, 0.8703333139419556, 0.8656666874885559, 0.8786666393280029, 0.878000020980835, 0.8740000128746033, 0.8809999823570251, 0.8726666569709778, 0.8796666860580444, 0.874666690826416, 0.8809999823570251, 0.8820000290870667, 0.8793333172798157, 0.8790000081062317, 0.8833333253860474, 0.8843333125114441, 0.8840000033378601, 0.8830000162124634, 0.8840000033378601, 0.8833333253860474, 0.8846666812896729, 0.8793333172798157, 0.8816666603088379, 0.8836666941642761, 0.8846666812896729, 0.8830000162124634]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 0], [0, 1, 2, 2], [39, 90], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 2, 3, 1, 3, 5, 9], [0, 2, 3, 3, 0, 4], [16, 88], [0, 1, 1, 0, 1, 1], [1, 5, 3], [0, 5, 6], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [2, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.7757142782211304, "mapping_values": [1, 10, 6, 4, 1, 11, 5, 6, 2, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.subtract(beta, grad)), grad), tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.308122396469116, 2.298492908477783, 2.28515625, 2.2635231018066406, 2.2358622550964355, 2.199826717376709, 2.149129867553711, 2.0705158710479736, 1.9416002035140991, 1.7636339664459229, 1.553219199180603, 1.3776158094406128, 1.3186575174331665, 1.340324878692627, 1.3178106546401978, 1.2292650938034058, 1.1057357788085938, 0.9911882281303406, 0.8993947505950928, 0.8879722356796265, 0.9048572778701782, 0.8768606781959534, 0.8364862203598022, 0.7967584133148193, 0.8200280666351318, 0.8218754529953003, 0.7935073971748352, 0.7802527546882629, 0.7504924535751343, 0.7495037317276001, 0.7349034547805786, 0.72777259349823, 0.7293100357055664, 0.708206057548523, 0.700311005115509, 0.691935122013092, 0.6894015669822693, 0.680109441280365], "accuracy": [0.09206181764602661, 0.11451591551303864, 0.1460837423801422, 0.21437062323093414, 0.28384625911712646, 0.33747193217277527, 0.3663980960845947, 0.3941355049610138, 0.41368380188941956, 0.443798691034317, 0.469819039106369, 0.5090476870536804, 0.5309734344482422, 0.5497292280197144, 0.577070415019989, 0.6073173880577087, 0.6369040012359619, 0.6456214785575867, 0.6634526252746582, 0.6752080321311951, 0.6740192770957947, 0.6796988248825073, 0.6890767216682434, 0.6991150379180908, 0.7010962963104248, 0.696209192276001, 0.7100779414176941, 0.7127195596694946, 0.7207766771316528, 0.7219653725624084, 0.7244749665260315, 0.7235503792762756, 0.7136441469192505, 0.7157574892044067, 0.7228899598121643, 0.7346453666687012, 0.7411174178123474, 0.7461365461349487], "val_loss": [2.3039820194244385, 2.2901382446289062, 2.270141839981079, 2.2447962760925293, 2.2118568420410156, 2.165745496749878, 2.095013380050659, 1.981377124786377, 1.801373839378357, 1.5448139905929565, 1.25644850730896, 1.0286461114883423, 0.9222636818885803, 0.8735158443450928, 0.8343305587768555, 0.8042618036270142, 0.760879397392273, 0.7347152233123779, 0.7473106384277344, 0.7827739119529724, 0.7771385312080383, 0.7297728061676025, 0.678010880947113, 0.6701661944389343, 0.6673315167427063, 0.6468318700790405, 0.6393064856529236, 0.6340726613998413, 0.6284354329109192, 0.624867856502533, 0.624020516872406, 0.6207776665687561, 0.6118970513343811, 0.6042376160621643, 0.6055048704147339, 0.6061597466468811, 0.5989300012588501, 0.5904113054275513], "val_accuracy": [0.09666666388511658, 0.1353333294391632, 0.2613333463668823, 0.4313333332538605, 0.4490000009536743, 0.46033334732055664, 0.46833333373069763, 0.48533332347869873, 0.5273333191871643, 0.5976666808128357, 0.6470000147819519, 0.6623333096504211, 0.6679999828338623, 0.6806666851043701, 0.6956666707992554, 0.7170000076293945, 0.715666651725769, 0.7260000109672546, 0.7366666793823242, 0.7243333458900452, 0.7296666502952576, 0.7406666874885559, 0.7480000257492065, 0.7383333444595337, 0.746999979019165, 0.7523333430290222, 0.753000020980835, 0.7646666765213013, 0.765666663646698, 0.7673333287239075, 0.7670000195503235, 0.7643333077430725, 0.7799999713897705, 0.7773333191871643, 0.7706666588783264, 0.7666666507720947, 0.7713333368301392, 0.7749999761581421]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 8, 9], [0, 3, 0, 2], [80, 39], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [5, 2, 3, 0, 3, 5, 9], [0, 0, 3, 4], [16, 88], [0, 0, 1, 0, 1, 1], [1, 0, 3], [0, 5, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [1, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 6, 2, 2, 6, 3, 3, 2, 6, 3, 3, 1, 21, 11, 10, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.add(tf.math.sqrt(tf.math.add(grad, tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.square(beta), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [9, 2, 7, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [5, 7, 3, 0, 3, 5, 9], [3, 2, 3, 3], [71, 88], [0, 0, 1, 1, 0, 1], [1, 0, 3], [0, 5, 2], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [0, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 10, 6, 4, 0, 4, 2, 2, 1, 21, 11, 10, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, beta)), grad), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.add(grad, tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.square(beta), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 3, 0, 3], [1, 1, 0, 2], [39, 39], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [5, 2, 3, 0, 3, 6, 9], [0, 2, 3, 3], [16, 88], [0, 0, 1, 0, 1, 1, 1], [2, 6, 3], [2, 5, 5, 3], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [2, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 1, 2, 1, 1, 1, 7, 3, 4, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(alpha), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.divide_no_nan(beta, tf.math.multiply(grad, grad)), sigma), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3097596168518066, 2.311554193496704, 2.3167357444763184, 2.3316314220428467, 2.3836398124694824, 2.503141164779663, 2.758056640625, 3.235565662384033], "accuracy": [0.09179764986038208, 0.09113723784685135, 0.09747721254825592, 0.09298639744520187, 0.09840179979801178, 0.09721305221319199, 0.10051512718200684, 0.09721305221319199], "val_loss": [2.308328151702881, 2.308668613433838, 2.310594081878662, 2.324021816253662, 2.362588405609131, 2.4554250240325928, 2.6637864112854004, 3.0900957584381104], "val_accuracy": [0.09466666728258133, 0.09700000286102295, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]