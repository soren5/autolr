[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.8619999885559082, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.sqrt(beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.226348876953125, 1.8794918060302734, 1.417793869972229, 1.1052825450897217, 0.9593082070350647, 0.8663129806518555, 0.7892252206802368, 0.7527231574058533, 0.7167013883590698, 0.6855252981185913, 0.6524377465248108, 0.6317535638809204, 0.6140557527542114, 0.5916767716407776, 0.5752793550491333, 0.5591614842414856, 0.5403441786766052, 0.5304502248764038, 0.5286852121353149, 0.5207974910736084, 0.49958497285842896, 0.5010033845901489, 0.48574531078338623, 0.4809221923351288, 0.4685618281364441, 0.4554644525051117, 0.4499361515045166, 0.4439038336277008, 0.4420427083969116, 0.41955462098121643, 0.4230092465877533, 0.412030428647995, 0.4072582721710205, 0.40039676427841187, 0.3976851999759674, 0.3918563723564148, 0.38185927271842957, 0.37996265292167664, 0.3791578412055969, 0.36817070841789246, 0.37058204412460327, 0.3493867814540863, 0.3543159067630768, 0.34348005056381226, 0.3391079604625702, 0.33907392621040344, 0.3294035792350769, 0.3289995789527893, 0.3135201632976532, 0.3127898871898651, 0.3111494779586792, 0.306598037481308, 0.30500975251197815, 0.2976189851760864], "accuracy": [0.2661471366882324, 0.4703473746776581, 0.5525029897689819, 0.6139215230941772, 0.6565843224525452, 0.6944921612739563, 0.7173424959182739, 0.7306828498840332, 0.7411174178123474, 0.7483819723129272, 0.7642319202423096, 0.7733456492424011, 0.7820631265640259, 0.789988100528717, 0.7957997918128967, 0.8000264167785645, 0.809140145778656, 0.8095363974571228, 0.811649739742279, 0.8211596608161926, 0.8216879963874817, 0.8265751004219055, 0.8300092220306396, 0.8338396549224854, 0.8330471515655518, 0.8407079577445984, 0.8444063067436218, 0.8413683772087097, 0.8425571322441101, 0.852859616279602, 0.8488970994949341, 0.8537842035293579, 0.8514066934585571, 0.8564258217811584, 0.859199583530426, 0.8610487580299377, 0.863558292388916, 0.8639545440673828, 0.8650112152099609, 0.8685774803161621, 0.8673887252807617, 0.8741249442100525, 0.8739928603172302, 0.8796724081039429, 0.8815215826034546, 0.8803328275680542, 0.8809932470321655, 0.8824461698532104, 0.8878615498542786, 0.887597382068634, 0.8893144726753235, 0.8899748921394348, 0.8873332738876343, 0.8907673954963684], "val_loss": [2.0458626747131348, 1.5252926349639893, 1.052628517150879, 0.8405277729034424, 0.7562106251716614, 0.7009351253509521, 0.6561484932899475, 0.627610981464386, 0.5985882878303528, 0.5773906111717224, 0.5564173460006714, 0.5499028563499451, 0.5310032367706299, 0.5183689594268799, 0.5061983466148376, 0.4947974383831024, 0.4873294234275818, 0.4778987169265747, 0.47643911838531494, 0.4636084735393524, 0.4534182846546173, 0.452301025390625, 0.443564772605896, 0.43724218010902405, 0.43908748030662537, 0.42712298035621643, 0.42414647340774536, 0.41837114095687866, 0.4150601923465729, 0.4146635830402374, 0.40978679060935974, 0.404580682516098, 0.4008660912513733, 0.39463624358177185, 0.39234936237335205, 0.3874043822288513, 0.38637402653694153, 0.3821287751197815, 0.3819471001625061, 0.37730884552001953, 0.37681838870048523, 0.3726356327533722, 0.3718409836292267, 0.36555907130241394, 0.365915447473526, 0.3645326793193817, 0.36497762799263, 0.362476110458374, 0.3640541732311249, 0.35964512825012207, 0.3545864522457123, 0.3588787317276001, 0.3534260392189026, 0.3523516058921814], "val_accuracy": [0.5196666717529297, 0.6453333497047424, 0.6673333048820496, 0.703000009059906, 0.721666693687439, 0.7429999709129333, 0.7573333382606506, 0.7646666765213013, 0.7763333320617676, 0.7829999923706055, 0.7956666946411133, 0.7896666526794434, 0.8033333420753479, 0.8149999976158142, 0.8153333067893982, 0.8173333406448364, 0.8233333230018616, 0.8276666402816772, 0.8240000009536743, 0.824999988079071, 0.8346666693687439, 0.8366666436195374, 0.8389999866485596, 0.843666672706604, 0.8383333086967468, 0.8463333249092102, 0.8503333330154419, 0.8510000109672546, 0.8486666679382324, 0.8463333249092102, 0.8503333330154419, 0.8523333072662354, 0.8553333282470703, 0.8553333282470703, 0.8566666841506958, 0.859333336353302, 0.856333315372467, 0.862666666507721, 0.856333315372467, 0.8586666584014893, 0.8629999756813049, 0.8619999885559082, 0.862333357334137, 0.8653333187103271, 0.8659999966621399, 0.8676666617393494, 0.8633333444595337, 0.8616666793823242, 0.8696666955947876, 0.8643333315849304, 0.8666666746139526, 0.8696666955947876, 0.8679999709129333, 0.8650000095367432]}, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 2, 2, 1, 1, 1, 21, 11, 10, 6], "tree_depth": 18}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 2, 0, 3], [16, 16], [0, 1], [0], [0], [99], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 4, 1, 2, 1, 4, 2, 8], [0, 4, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 51, 99, 61, 1]], "fitness": -0.4462857246398926, "mapping_values": [1, 1, 0, 1, 1, 10, 6, 4, 2, 2, 1, 1, 1, 11, 5, 6, 4], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.310894250869751, 2.3079729080200195, 2.306201696395874, 2.306673049926758, 2.305757999420166, 2.3033835887908936, 2.303819179534912, 2.3027985095977783, 2.3009347915649414, 2.3005928993225098, 2.2990968227386475, 2.2988669872283936, 2.298635959625244, 2.2974483966827393, 2.2976083755493164, 2.29599928855896, 2.295459032058716, 2.2929179668426514, 2.2929556369781494, 2.292534112930298, 2.2909979820251465, 2.29063081741333, 2.289592742919922, 2.2885847091674805, 2.286146402359009, 2.2875797748565674, 2.28552508354187, 2.2855441570281982, 2.2826426029205322, 2.2828550338745117, 2.2822506427764893, 2.282024621963501, 2.2813878059387207, 2.2796597480773926, 2.279181718826294, 2.2779695987701416, 2.2776541709899902, 2.2760820388793945, 2.2760472297668457, 2.2753243446350098, 2.272794723510742, 2.2734103202819824, 2.271390914916992, 2.270191192626953, 2.2705516815185547, 2.268465280532837, 2.2665598392486572, 2.267510175704956, 2.2652504444122314, 2.2633116245269775, 2.2644805908203125, 2.262272357940674, 2.260699510574341, 2.2613320350646973, 2.259392499923706, 2.260899066925049, 2.258949041366577, 2.256829261779785, 2.257695198059082, 2.2551825046539307, 2.2536935806274414, 2.2531304359436035, 2.252899646759033, 2.250352382659912, 2.2497315406799316, 2.2496986389160156, 2.248087167739868, 2.2466256618499756, 2.2461860179901123, 2.2452495098114014, 2.242588758468628, 2.241755247116089, 2.240265130996704, 2.2392563819885254, 2.2386062145233154, 2.23797869682312, 2.2358381748199463, 2.2352452278137207, 2.2338688373565674, 2.2316391468048096, 2.231806755065918, 2.230017900466919, 2.2276248931884766, 2.226189136505127, 2.225640296936035, 2.226666212081909, 2.223621368408203, 2.2207257747650146, 2.2187490463256836, 2.2194433212280273, 2.2156732082366943, 2.2146682739257812, 2.2156434059143066, 2.211054801940918, 2.2084004878997803, 2.2074527740478516, 2.2090630531311035], "accuracy": [0.09232597798109055, 0.09391097724437714, 0.10051512718200684, 0.09642054885625839, 0.09893012791872025, 0.10289261490106583, 0.09642054885625839, 0.10460969805717468, 0.107647605240345, 0.10896842926740646, 0.10976093262434006, 0.11596883088350296, 0.10962884873151779, 0.11332716792821884, 0.11253467202186584, 0.11596883088350296, 0.11834631860256195, 0.11966715008020401, 0.1286487877368927, 0.1266675442457199, 0.12534672021865845, 0.12891295552253723, 0.13274335861206055, 0.12930920720100403, 0.1394795924425125, 0.13776251673698425, 0.13829085230827332, 0.14000792801380157, 0.14898955821990967, 0.14832915365695953, 0.1484612375497818, 0.1476687341928482, 0.15559370815753937, 0.15757495164871216, 0.15493330359458923, 0.15453705191612244, 0.16457535326480865, 0.16602826118469238, 0.1682736724615097, 0.1732928305864334, 0.17593449354171753, 0.17500990629196167, 0.18412363529205322, 0.1834632158279419, 0.17659489810466766, 0.18980319797992706, 0.19112402200698853, 0.1958790123462677, 0.19733192026615143, 0.20882314443588257, 0.1950865089893341, 0.20657773315906525, 0.20882314443588257, 0.19957733154296875, 0.21172896027565002, 0.21054022014141083, 0.21304979920387268, 0.22295601665973663, 0.2148989588022232, 0.2211068570613861, 0.22533351182937622, 0.22612600028514862, 0.23114515841007233, 0.23523972928524017, 0.23497556149959564, 0.24025888741016388, 0.2362964004278183, 0.23642848432064056, 0.24646678566932678, 0.24607053399085999, 0.25584468245506287, 0.2537313401699066, 0.25782591104507446, 0.2553163468837738, 0.25518426299095154, 0.25584468245506287, 0.2615242302417755, 0.2665433883666992, 0.2641659080982208, 0.27777042984962463, 0.26522254943847656, 0.27539294958114624, 0.28041210770606995, 0.2740721106529236, 0.2779025137424469, 0.27724209427833557, 0.28278958797454834, 0.29058247804641724, 0.2946770489215851, 0.2826575040817261, 0.3016774654388428, 0.3027341067790985, 0.28886541724205017, 0.30722492933273315, 0.311319500207901, 0.31382909417152405, 0.30022454261779785], "val_loss": [2.3081552982330322, 2.307100772857666, 2.306063413619995, 2.305025100708008, 2.3039968013763428, 2.3029844760894775, 2.3019566535949707, 2.3009448051452637, 2.2999401092529297, 2.2989277839660645, 2.2979209423065186, 2.2969167232513428, 2.2959177494049072, 2.2949390411376953, 2.2939693927764893, 2.2929906845092773, 2.292034864425659, 2.291066884994507, 2.290112257003784, 2.289151906967163, 2.2881922721862793, 2.2872495651245117, 2.2863030433654785, 2.285344123840332, 2.284393310546875, 2.283451557159424, 2.2825043201446533, 2.281571388244629, 2.280630350112915, 2.279695749282837, 2.278747320175171, 2.277798652648926, 2.2768607139587402, 2.275920867919922, 2.274970293045044, 2.2740304470062256, 2.273071527481079, 2.272113800048828, 2.271155595779419, 2.2701961994171143, 2.269221067428589, 2.268244981765747, 2.267266035079956, 2.2662765979766846, 2.2653005123138428, 2.2643051147460938, 2.2632973194122314, 2.2622883319854736, 2.261270523071289, 2.2602455615997314, 2.259223699569702, 2.2581794261932373, 2.257126569747925, 2.2560722827911377, 2.25500226020813, 2.2539353370666504, 2.25284743309021, 2.2517447471618652, 2.250653028488159, 2.2495431900024414, 2.248408079147339, 2.2472593784332275, 2.246109962463379, 2.244950294494629, 2.24377179145813, 2.2425832748413086, 2.2413814067840576, 2.2401649951934814, 2.238936424255371, 2.2376997470855713, 2.2364206314086914, 2.2351388931274414, 2.2338438034057617, 2.2325384616851807, 2.231214761734009, 2.229869842529297, 2.2285001277923584, 2.227135181427002, 2.225742816925049, 2.224330425262451, 2.222911834716797, 2.2214560508728027, 2.219977617263794, 2.2184739112854004, 2.216978073120117, 2.2154674530029297, 2.2139132022857666, 2.212343215942383, 2.2107439041137695, 2.209137439727783, 2.207490921020508, 2.205817937850952, 2.2041289806365967, 2.2024149894714355, 2.20064640045166, 2.198866844177246, 2.197085380554199], "val_accuracy": [0.09700000286102295, 0.0976666659116745, 0.09833333641290665, 0.10066666454076767, 0.10233332961797714, 0.10300000011920929, 0.10366666316986084, 0.10533333569765091, 0.10633333027362823, 0.10966666787862778, 0.1106666699051857, 0.11433333158493042, 0.11733333021402359, 0.11999999731779099, 0.12266666442155838, 0.1276666671037674, 0.1303333342075348, 0.1340000033378601, 0.13699999451637268, 0.140666663646698, 0.1446666717529297, 0.15033333003520966, 0.15666666626930237, 0.1589999943971634, 0.16433332860469818, 0.1706666648387909, 0.1770000010728836, 0.18199999630451202, 0.18833333253860474, 0.19300000369548798, 0.1979999989271164, 0.20333333313465118, 0.2083333283662796, 0.21666666865348816, 0.22166666388511658, 0.22733333706855774, 0.23266667127609253, 0.23766666650772095, 0.24033333361148834, 0.2486666738986969, 0.2526666522026062, 0.25999999046325684, 0.2669999897480011, 0.273333340883255, 0.2776666581630707, 0.2840000092983246, 0.28833332657814026, 0.296999990940094, 0.3019999861717224, 0.3089999854564667, 0.3149999976158142, 0.3176666796207428, 0.3233333230018616, 0.3319999873638153, 0.3373333215713501, 0.3476666808128357, 0.3553333282470703, 0.3643333315849304, 0.3713333308696747, 0.37833333015441895, 0.3840000033378601, 0.39100000262260437, 0.39633333683013916, 0.4026666581630707, 0.4050000011920929, 0.4076666533946991, 0.4103333353996277, 0.41366666555404663, 0.41600000858306885, 0.41999998688697815, 0.4233333468437195, 0.4233333468437195, 0.4269999861717224, 0.4273333251476288, 0.42800000309944153, 0.429666668176651, 0.42899999022483826, 0.4320000112056732, 0.4350000023841858, 0.437666654586792, 0.4399999976158142, 0.44433334469795227, 0.4449999928474426, 0.44466665387153625, 0.4466666579246521, 0.4480000138282776, 0.4503333270549774, 0.45233333110809326, 0.45366665720939636, 0.4546666741371155, 0.45399999618530273, 0.45500001311302185, 0.4546666741371155, 0.45399999618530273, 0.45500001311302185, 0.4543333351612091, 0.4546666741371155]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [2, 2, 3, 0, 3, 5, 3, 3, 1, 5, 3, 6, 7, 8, 1, 2, 3, 7, 6, 2, 3], [0, 2, 0, 3, 5, 3, 4, 0, 5, 4, 1, 1, 4, 4, 3, 3, 3, 2], [16, 16, 58], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0], [6, 3, 3, 6, 8, 1, 4, 2, 4, 2, 6], [0, 0, 0, 3, 0, 0, 0, 1, 2, 0], [16, 99, 18, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 39, 21, 18, 3, 2, 1, 1, 1, 16, 8, 8, 6], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.multiply(tf.math.multiply(grad, tf.math.subtract(tf.math.square(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(grad, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))), tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, alpha), alpha), grad), tf.math.add(grad, tf.math.multiply(grad, grad))), grad))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), alpha)", "other_info": {"loss": [3.2760317285981225e+18, 3.573855068824273e+18, 3.6626464052032307e+18, 3.4994920737808056e+18, 3.6131051600347136e+18, 3.571468029080371e+18], "accuracy": [0.09800554811954498, 0.1006472036242485, 0.1010434553027153, 0.09906221181154251, 0.09959053993225098, 0.1014397069811821], "val_loss": [3.206302900187824e+18, 3.20630235043201e+18, 3.2063012509203825e+18, 3.2063009760424755e+18, 3.2063018006761964e+18, 3.20630235043201e+18], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 3, 0, 3, 4, 0, 1, 4, 7, 4, 6, 7, 5, 5], [0, 1, 2, 2, 2, 2, 1, 0, 2, 0, 0], [39, 39, 79, 78], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 9, 6, 3, 5], [0, 2, 0, 3], [26, 16], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 7, 1, 1, 4, 1, 9, 9, 5, 0, 9], [0, 7, 1], [86, 45, 34, 38], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [6, 3, 3, 6, 8, 6, 4, 1, 4, 2, 8, 0], [0, 0, 1, 3, 0, 0, 3, 4, 2, 0], [16, 99, 40, 99, 61, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 15, 11, 4, 4, 3, 1, 2, 14, 11, 3, 4, 22, 12, 10, 5], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.pow(alpha, grad), tf.math.negative(grad))), tf.math.subtract(tf.math.pow(tf.math.add(tf.math.pow(grad, grad), alpha), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.square(tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(grad))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(alpha, sigma))), tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), tf.math.add(grad, tf.math.sqrt(beta))), tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [2, 2, 3, 0, 3, 1, 1, 1, 5, 3, 3, 1, 5, 6, 2, 0, 6, 6], [0, 1, 0, 2, 2, 2, 0, 3, 1, 2, 3, 2, 2, 2, 2], [39, 39, 50], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 3, 0, 3, 5], [0, 3, 3, 3], [16, 16], [0, 1, 1], [3], [0, 2], [82], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 9, 1, 4, 1, 4, 3, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 3], [16, 99, 96, 99, 6, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 18, 15, 3, 10, 6, 4, 1, 3, 1, 2, 1, 1, 0, 1, 1], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.math.subtract(grad, tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.multiply(grad, tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), alpha)), grad)), tf.math.divide_no_nan(grad, tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.304051160812378, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]