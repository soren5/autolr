[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [5, 2, 3, 0, 3, 5, 9], [0, 2, 3, 3], [16, 88], [0, 0, 1, 0, 1, 1], [1, 0, 3], [0, 5, 6], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [1, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.8834285736083984, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), grad), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1156113147735596, 1.1266285181045532, 0.7543179392814636, 0.6674520969390869, 0.594718337059021, 0.5494779348373413, 0.51642906665802, 0.4823608100414276, 0.45740458369255066, 0.43341064453125, 0.42064666748046875, 0.39770862460136414, 0.37768059968948364, 0.36111369729042053, 0.35074546933174133, 0.34457799792289734, 0.33335381746292114, 0.32452669739723206, 0.30748414993286133, 0.30316776037216187, 0.2939970791339874, 0.2862822413444519, 0.2835896909236908, 0.26758840680122375, 0.2618829011917114, 0.25047022104263306, 0.2522719204425812, 0.24194647371768951, 0.22833606600761414, 0.23130740225315094, 0.21273569762706757, 0.21779876947402954, 0.2148962765932083, 0.20656786859035492, 0.20062801241874695, 0.1934412568807602, 0.1893332600593567, 0.18692182004451752, 0.19163726270198822, 0.18172459304332733], "accuracy": [0.29943203926086426, 0.611411988735199, 0.7193237543106079, 0.7491744756698608, 0.776251494884491, 0.7922335267066956, 0.8103289008140564, 0.8198388814926147, 0.8327829837799072, 0.8404437899589539, 0.843481719493866, 0.8506141901016235, 0.8565579056739807, 0.8642187118530273, 0.8687095642089844, 0.8726720213890076, 0.8713511824607849, 0.8745211958885193, 0.8842953443527222, 0.8842953443527222, 0.8877294659614563, 0.8898428082466125, 0.8914278149604797, 0.8965790271759033, 0.9000132083892822, 0.9050323367118835, 0.900409460067749, 0.9088627696037292, 0.9108440279960632, 0.91124027967453, 0.9181085824966431, 0.9152027368545532, 0.9157310724258423, 0.9196935892105103, 0.9196935892105103, 0.9215427041053772, 0.9257693886756897, 0.9286752343177795, 0.923920214176178, 0.9289394021034241], "val_loss": [1.1158771514892578, 0.720619797706604, 0.6438841819763184, 0.5833433270454407, 0.5310829877853394, 0.5047516226768494, 0.46038752794265747, 0.4345139265060425, 0.4191552400588989, 0.40692687034606934, 0.39764681458473206, 0.3792993426322937, 0.37137851119041443, 0.3763577342033386, 0.36554303765296936, 0.37070712447166443, 0.3574792146682739, 0.3483291566371918, 0.35181424021720886, 0.345668226480484, 0.3381510078907013, 0.3481258153915405, 0.3348238468170166, 0.3433367609977722, 0.34518131613731384, 0.3487726151943207, 0.3362666070461273, 0.34566232562065125, 0.33847224712371826, 0.34271329641342163, 0.3436060845851898, 0.34208664298057556, 0.34048113226890564, 0.35149699449539185, 0.3490248918533325, 0.35518592596054077, 0.34679466485977173, 0.3605789840221405, 0.3382059335708618, 0.354250967502594], "val_accuracy": [0.6226666569709778, 0.7246666550636292, 0.7593333125114441, 0.7683333158493042, 0.8009999990463257, 0.8046666383743286, 0.8246666789054871, 0.8426666855812073, 0.847000002861023, 0.8489999771118164, 0.8526666760444641, 0.8619999885559082, 0.8673333525657654, 0.8650000095367432, 0.8683333396911621, 0.8703333139419556, 0.8656666874885559, 0.8786666393280029, 0.878000020980835, 0.8740000128746033, 0.8809999823570251, 0.8726666569709778, 0.8796666860580444, 0.874666690826416, 0.8809999823570251, 0.8820000290870667, 0.8793333172798157, 0.8790000081062317, 0.8833333253860474, 0.8843333125114441, 0.8840000033378601, 0.8830000162124634, 0.8840000033378601, 0.8833333253860474, 0.8846666812896729, 0.8793333172798157, 0.8816666603088379, 0.8836666941642761, 0.8846666812896729, 0.8830000162124634]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [5, 2, 3, 6, 3, 5, 9], [0, 1, 3, 2], [16, 88], [0, 0, 1, 0, 1, 0], [1, 0, 3, 9], [1, 1, 6], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [1, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.8654285669326782, "mapping_values": [1, 9, 5, 4, 2, 1, 0, 1, 1, 6, 4, 2, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(alpha), tf.math.multiply(alpha, tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1169378757476807, 1.1662715673446655, 0.8117051720619202, 0.6990435719490051, 0.6280636787414551, 0.5741499066352844, 0.5580641031265259, 0.5181131958961487, 0.48877620697021484, 0.46012306213378906, 0.4386020302772522, 0.420161634683609, 0.4111163020133972, 0.39531153440475464, 0.3801123797893524, 0.3643067181110382, 0.35390886664390564, 0.33262187242507935, 0.3266824781894684, 0.3151928782463074, 0.3035200834274292, 0.2879708409309387, 0.2927935719490051, 0.28462424874305725, 0.27766889333724976, 0.28059834241867065, 0.2657822072505951, 0.2578350603580475, 0.24497656524181366, 0.23534224927425385, 0.23156684637069702, 0.2247115820646286, 0.23096875846385956, 0.21902461349964142, 0.21143215894699097, 0.21547411382198334, 0.20406870543956757, 0.19190335273742676, 0.18830201029777527, 0.18848086893558502, 0.1743738204240799, 0.1724734902381897, 0.17143073678016663, 0.16831286251544952, 0.15620680153369904, 0.16671818494796753, 0.15307265520095825], "accuracy": [0.2911108136177063, 0.5975432395935059, 0.696209192276001, 0.7269845604896545, 0.7594769597053528, 0.7783648371696472, 0.7880068421363831, 0.8013472557067871, 0.8208954930305481, 0.8301413059234619, 0.8347642421722412, 0.8441421389579773, 0.848368763923645, 0.8521991968154907, 0.8556333184242249, 0.8621054291725159, 0.8677849769592285, 0.8755778670310974, 0.8790120482444763, 0.8809932470321655, 0.8858803510665894, 0.889578640460968, 0.8877294659614563, 0.8934090733528137, 0.8963148593902588, 0.8906353116035461, 0.8980319499969482, 0.9013340473175049, 0.9046360850334167, 0.9058248400688171, 0.9115044474601746, 0.913089394569397, 0.913617730140686, 0.9159952402114868, 0.9192973375320435, 0.915070652961731, 0.9179764986038208, 0.923920214176178, 0.928411066532135, 0.9273543953895569, 0.9306564331054688, 0.9348831176757812, 0.9306564331054688, 0.9315810203552246, 0.9359397888183594, 0.9354114532470703, 0.9405626654624939], "val_loss": [1.1167203187942505, 0.7348341345787048, 0.651624321937561, 0.574542224407196, 0.5286218523979187, 0.5078498721122742, 0.4739978015422821, 0.4482923150062561, 0.4269973039627075, 0.40619412064552307, 0.4060521721839905, 0.38421133160591125, 0.3784065842628479, 0.37098193168640137, 0.36199405789375305, 0.3557599186897278, 0.3568788170814514, 0.35549402236938477, 0.34736478328704834, 0.3481578230857849, 0.34232211112976074, 0.35323765873908997, 0.3493804633617401, 0.346163809299469, 0.3416801691055298, 0.335002064704895, 0.33798983693122864, 0.34045612812042236, 0.337837815284729, 0.3465111553668976, 0.3478098213672638, 0.3421981930732727, 0.33687907457351685, 0.3584834337234497, 0.35438457131385803, 0.3463139235973358, 0.3660371005535126, 0.35559460520744324, 0.36329060792922974, 0.35140687227249146, 0.35751187801361084, 0.35462650656700134, 0.36814993619918823, 0.361946165561676, 0.4017612040042877, 0.36189916729927063, 0.38062557578086853], "val_accuracy": [0.6290000081062317, 0.7020000219345093, 0.7406666874885559, 0.7543333172798157, 0.7956666946411133, 0.8083333373069763, 0.8209999799728394, 0.8256666660308838, 0.8353333473205566, 0.8546666502952576, 0.8476666808128357, 0.8636666536331177, 0.8629999756813049, 0.871666669845581, 0.8700000047683716, 0.8743333220481873, 0.8776666522026062, 0.8773333430290222, 0.8723333477973938, 0.8773333430290222, 0.8833333253860474, 0.8799999952316284, 0.8769999742507935, 0.8806666731834412, 0.8830000162124634, 0.8849999904632568, 0.8846666812896729, 0.8803333044052124, 0.887666642665863, 0.8840000033378601, 0.8830000162124634, 0.8863333463668823, 0.8880000114440918, 0.8889999985694885, 0.8849999904632568, 0.8893333077430725, 0.8806666731834412, 0.890333354473114, 0.8916666507720947, 0.8916666507720947, 0.8896666765213013, 0.8949999809265137, 0.8883333206176758, 0.890333354473114, 0.887333333492279, 0.8913333415985107, 0.8930000066757202]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3, 6, 3, 6, 7, 4, 8, 9], [0, 1, 0, 2, 3, 2, 1, 2], [39, 39, 17], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0], [5, 2, 3, 0, 4, 6, 9, 9], [0, 2, 3, 3], [16, 88, 77], [0, 0, 1, 0, 1, 1], [1, 0, 3], [0, 5, 6], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [2, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 12, 8, 3, 11, 8, 3, 3, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(alpha, tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.math.pow(tf.math.sqrt(grad), grad)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.pow(beta, tf.math.divide_no_nan(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [7, 2, 3, 2, 3, 1, 2, 1], [0, 1, 0, 2, 0, 0, 0, 2, 1], [78, 39, 34, 48, 2], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [5, 2, 3, 3, 3, 5, 9], [1, 2, 0, 3], [16, 88], [0, 0, 1, 0, 1, 1], [1, 0, 3], [0, 5, 6], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [1, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 8, 9, 5, 2, 1, 1, 0, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), grad))), alpha), lambda shape,  alpha, beta, grad: tf.math.square(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1019271.5625, 2.31404185295105, 2.3054866790771484, 2.303577423095703, 2.303067922592163, 2.3029463291168213], "accuracy": [0.09417514503002167, 0.09298639744520187, 0.09509972482919693, 0.09694888442754745, 0.09298639744520187, 0.09813763201236725], "val_loss": [2.3190085887908936, 2.3060107231140137, 2.303293228149414, 2.302550792694092, 2.3025059700012207, 2.302609920501709], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.09933333098888397, 0.10266666859388351, 0.10266666859388351, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 74], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [5, 2, 3, 0, 3, 5, 9], [0, 2, 3, 2], [16, 88], [0, 0, 1, 1, 1, 1], [1, 0, 5], [0, 5, 6], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [2, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 2, 1, 1, 1, 4, 2, 2, 1, 21, 11, 10, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(beta, tf.math.add(tf.math.sqrt(tf.math.add(grad, tf.math.pow(grad, sigma))), tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), sigma)))), alpha), tf.math.add(tf.math.square(beta), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]