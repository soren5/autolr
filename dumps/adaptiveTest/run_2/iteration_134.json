[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [5, 2, 3, 0, 3, 5, 9], [0, 2, 3, 3], [16, 88], [0, 0, 1, 0, 1, 1], [1, 0, 3], [0, 5, 6], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [1, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.8834285736083984, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), grad), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1156113147735596, 1.1266285181045532, 0.7543179392814636, 0.6674520969390869, 0.594718337059021, 0.5494779348373413, 0.51642906665802, 0.4823608100414276, 0.45740458369255066, 0.43341064453125, 0.42064666748046875, 0.39770862460136414, 0.37768059968948364, 0.36111369729042053, 0.35074546933174133, 0.34457799792289734, 0.33335381746292114, 0.32452669739723206, 0.30748414993286133, 0.30316776037216187, 0.2939970791339874, 0.2862822413444519, 0.2835896909236908, 0.26758840680122375, 0.2618829011917114, 0.25047022104263306, 0.2522719204425812, 0.24194647371768951, 0.22833606600761414, 0.23130740225315094, 0.21273569762706757, 0.21779876947402954, 0.2148962765932083, 0.20656786859035492, 0.20062801241874695, 0.1934412568807602, 0.1893332600593567, 0.18692182004451752, 0.19163726270198822, 0.18172459304332733], "accuracy": [0.29943203926086426, 0.611411988735199, 0.7193237543106079, 0.7491744756698608, 0.776251494884491, 0.7922335267066956, 0.8103289008140564, 0.8198388814926147, 0.8327829837799072, 0.8404437899589539, 0.843481719493866, 0.8506141901016235, 0.8565579056739807, 0.8642187118530273, 0.8687095642089844, 0.8726720213890076, 0.8713511824607849, 0.8745211958885193, 0.8842953443527222, 0.8842953443527222, 0.8877294659614563, 0.8898428082466125, 0.8914278149604797, 0.8965790271759033, 0.9000132083892822, 0.9050323367118835, 0.900409460067749, 0.9088627696037292, 0.9108440279960632, 0.91124027967453, 0.9181085824966431, 0.9152027368545532, 0.9157310724258423, 0.9196935892105103, 0.9196935892105103, 0.9215427041053772, 0.9257693886756897, 0.9286752343177795, 0.923920214176178, 0.9289394021034241], "val_loss": [1.1158771514892578, 0.720619797706604, 0.6438841819763184, 0.5833433270454407, 0.5310829877853394, 0.5047516226768494, 0.46038752794265747, 0.4345139265060425, 0.4191552400588989, 0.40692687034606934, 0.39764681458473206, 0.3792993426322937, 0.37137851119041443, 0.3763577342033386, 0.36554303765296936, 0.37070712447166443, 0.3574792146682739, 0.3483291566371918, 0.35181424021720886, 0.345668226480484, 0.3381510078907013, 0.3481258153915405, 0.3348238468170166, 0.3433367609977722, 0.34518131613731384, 0.3487726151943207, 0.3362666070461273, 0.34566232562065125, 0.33847224712371826, 0.34271329641342163, 0.3436060845851898, 0.34208664298057556, 0.34048113226890564, 0.35149699449539185, 0.3490248918533325, 0.35518592596054077, 0.34679466485977173, 0.3605789840221405, 0.3382059335708618, 0.354250967502594], "val_accuracy": [0.6226666569709778, 0.7246666550636292, 0.7593333125114441, 0.7683333158493042, 0.8009999990463257, 0.8046666383743286, 0.8246666789054871, 0.8426666855812073, 0.847000002861023, 0.8489999771118164, 0.8526666760444641, 0.8619999885559082, 0.8673333525657654, 0.8650000095367432, 0.8683333396911621, 0.8703333139419556, 0.8656666874885559, 0.8786666393280029, 0.878000020980835, 0.8740000128746033, 0.8809999823570251, 0.8726666569709778, 0.8796666860580444, 0.874666690826416, 0.8809999823570251, 0.8820000290870667, 0.8793333172798157, 0.8790000081062317, 0.8833333253860474, 0.8843333125114441, 0.8840000033378601, 0.8830000162124634, 0.8840000033378601, 0.8833333253860474, 0.8846666812896729, 0.8793333172798157, 0.8816666603088379, 0.8836666941642761, 0.8846666812896729, 0.8830000162124634]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [5, 2, 3, 0, 3, 5, 9], [0, 2, 3, 3], [16, 88], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 3, 3, 7, 5, 1, 2], [0, 5, 6, 6, 1, 6, 4], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [1, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.8731428384780884, "mapping_values": [1, 9, 5, 4, 2, 10, 6, 4, 1, 15, 8, 7, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), grad), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.multiply(grad, tf.math.add(tf.math.square(tf.math.subtract(grad, alpha)), tf.math.add(grad, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1121015548706055, 1.1674833297729492, 0.8101349472999573, 0.682154655456543, 0.6088659167289734, 0.5647031664848328, 0.5359506607055664, 0.49851736426353455, 0.4804701507091522, 0.4489997327327728, 0.434103786945343, 0.41692039370536804, 0.40049365162849426, 0.39537662267684937, 0.3858553469181061, 0.3748268485069275, 0.36401647329330444, 0.3630771040916443, 0.33757537603378296, 0.33041954040527344, 0.3142542243003845, 0.3199809491634369, 0.3039701581001282, 0.2813185453414917, 0.2884903848171234, 0.27045997977256775, 0.2647686302661896, 0.26169466972351074, 0.2526664435863495, 0.2520364820957184, 0.24104148149490356, 0.23550081253051758, 0.22505874931812286], "accuracy": [0.2895258367061615, 0.5960903167724609, 0.6952846646308899, 0.7347774505615234, 0.7680623531341553, 0.7816668748855591, 0.7954035401344299, 0.8123101592063904, 0.8228767514228821, 0.8298771381378174, 0.8408400416374207, 0.8459912538528442, 0.8491612672805786, 0.8507462739944458, 0.8553691506385803, 0.8555012345314026, 0.8634262084960938, 0.8661999702453613, 0.8765024542808533, 0.8730682730674744, 0.8795403242111206, 0.8795403242111206, 0.8865407705307007, 0.8924844861030579, 0.8905032277107239, 0.895918607711792, 0.8971073627471924, 0.897899866104126, 0.9015982151031494, 0.9021265506744385, 0.9071456789970398, 0.9095231890678406, 0.9129573106765747], "val_loss": [1.117719054222107, 0.7331525087356567, 0.6515359282493591, 0.5771470665931702, 0.5350081920623779, 0.5219355821609497, 0.49335286021232605, 0.4691050946712494, 0.44263404607772827, 0.43429073691368103, 0.42187848687171936, 0.4086591303348541, 0.4116852283477783, 0.4086841642856598, 0.4104873836040497, 0.3890739381313324, 0.39686763286590576, 0.39798709750175476, 0.37933796644210815, 0.3743049204349518, 0.39873969554901123, 0.3690236806869507, 0.3689803183078766, 0.3657428026199341, 0.37066709995269775, 0.38206690549850464, 0.3662848174571991, 0.3517615497112274, 0.39255258440971375, 0.37743237614631653, 0.36431360244750977, 0.3785848915576935, 0.3581402897834778], "val_accuracy": [0.640666663646698, 0.721666693687439, 0.7483333349227905, 0.7816666960716248, 0.7986666560173035, 0.809333324432373, 0.8199999928474426, 0.8346666693687439, 0.8399999737739563, 0.8429999947547913, 0.8536666631698608, 0.8523333072662354, 0.8513333201408386, 0.8523333072662354, 0.847000002861023, 0.8616666793823242, 0.8579999804496765, 0.8566666841506958, 0.862333357334137, 0.8646666407585144, 0.8519999980926514, 0.8640000224113464, 0.8646666407585144, 0.8686666488647461, 0.8659999966621399, 0.8686666488647461, 0.8690000176429749, 0.8763333559036255, 0.8673333525657654, 0.8656666874885559, 0.8690000176429749, 0.8686666488647461, 0.8740000128746033]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 5, 3], [2, 1, 1, 0], [39, 39], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [5, 2, 3, 0, 3, 5, 9], [0, 2, 3, 3], [16, 88], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 7, 3, 4, 4, 6, 8], [0, 5, 6, 1, 0, 0, 2], [99, 78, 54], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [1, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 10, 6, 4, 1, 14, 7, 7, 3, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), grad), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(grad, grad), tf.math.pow(alpha, tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09219389408826828, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 2, 9, 0, 3], [2, 1, 0, 2], [39, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [5, 2, 3, 0, 3, 5, 9], [0, 2, 3, 4], [16, 88], [0, 0, 1, 0, 0, 1], [1, 0, 9], [0, 1, 6], [99, 77], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [1, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 4, 1, 1, 7, 4, 3, 1, 4, 3, 1, 2, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.304271936416626, 2.4187417030334473, 13.245119094848633, 73.12257385253906, 190.59652709960938, 366.34417724609375], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3104989528656006, 3.3741068840026855, 39.245819091796875, 132.94308471679688, 284.223876953125, 492.90838623046875], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 2, 3, 0, 3, 6, 5, 5, 3, 3, 3, 7, 3, 2, 0, 6], [0, 1, 0, 2, 3, 1, 1, 2, 2, 1, 1, 3, 1], [39, 4], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [5, 0, 3, 0, 3, 5, 9], [4, 2, 3, 3], [6, 88], [0, 0, 1, 1, 1, 0], [1, 0, 3], [0, 5, 6], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 2, 8, 2, 4, 1, 4, 2, 5], [1, 4, 4, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 36, 16, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 16, 13, 2, 8, 5, 3, 0, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.square(grad)), grad), tf.math.square(tf.math.multiply(tf.math.multiply(tf.math.multiply(alpha, alpha), tf.math.add(tf.math.multiply(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, grad)), alpha), alpha), grad)), alpha))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, beta)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09192973375320435, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}]