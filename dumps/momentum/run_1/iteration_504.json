[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0], [0, 8, 9], [0], [0], [0, 0, 0, 1, 1], [0, 5, 6], [0, 5], [0], [0, 1], [0], [1], [0]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2946510314941406, 2.190795660018921, 1.7768285274505615, 1.3570164442062378, 1.0666885375976562, 0.9009688496589661, 0.8290350437164307, 0.8006656765937805, 0.7536357641220093, 0.7433212399482727, 0.698375940322876, 0.6788598299026489, 0.6640545129776001, 0.6202208995819092, 0.6072526574134827, 0.5970173478126526, 0.5821977853775024, 0.5640968680381775, 0.5508893132209778, 0.5373228192329407, 0.5250836610794067, 0.5076481699943542, 0.5122065544128418, 0.49154719710350037, 0.482866495847702, 0.4836457669734955, 0.45789772272109985, 0.45025163888931274, 0.4492928385734558, 0.43762901425361633, 0.431286484003067, 0.4261288642883301, 0.4189686179161072, 0.4137592911720276, 0.3958374857902527, 0.3925909996032715, 0.37699922919273376, 0.3839954733848572, 0.3746383488178253, 0.3653828203678131, 0.36930763721466064, 0.3586994409561157, 0.3476593494415283, 0.34745165705680847, 0.32892096042633057, 0.3288397192955017, 0.33143627643585205, 0.324093222618103, 0.31615379452705383, 0.329397588968277, 0.3142707347869873, 0.3103507459163666, 0.3028823137283325, 0.28942757844924927, 0.28114935755729675, 0.28164634108543396, 0.27952855825424194, 0.2783072292804718, 0.2749811112880707, 0.2713066339492798, 0.2660987973213196, 0.2660115361213684, 0.2597714960575104], "accuracy": [0.12693171203136444, 0.3333773612976074, 0.43389248847961426, 0.5349359512329102, 0.6358473300933838, 0.6655659675598145, 0.6911900639533997, 0.7108704447746277, 0.707568347454071, 0.7058512568473816, 0.7367587089538574, 0.7442874312400818, 0.7409853339195251, 0.7617223858833313, 0.7668735980987549, 0.7660810947418213, 0.7803460359573364, 0.789459764957428, 0.7880068421363831, 0.7973847389221191, 0.802271842956543, 0.8030643463134766, 0.8013472557067871, 0.8109893202781677, 0.817989706993103, 0.816008448600769, 0.8212917447090149, 0.8269713521003723, 0.8327829837799072, 0.8329150676727295, 0.8354246616363525, 0.8397833704948425, 0.8408400416374207, 0.8446704745292664, 0.8486329317092896, 0.8544445633888245, 0.854708731174469, 0.8539162874221802, 0.8582749962806702, 0.859199583530426, 0.8548408150672913, 0.859199583530426, 0.8647470474243164, 0.8672566413879395, 0.8696341514587402, 0.8726720213890076, 0.8720116019248962, 0.8739928603172302, 0.8767666220664978, 0.8732003569602966, 0.8768987059593201, 0.8850878477096558, 0.8811253309249878, 0.8870691061019897, 0.887201189994812, 0.8893144726753235, 0.8903711438179016, 0.8938053250312805, 0.8924844861030579, 0.8952582478523254, 0.896446943283081, 0.893541157245636, 0.895918607711792], "val_loss": [2.247642993927002, 2.0256235599517822, 1.1531846523284912, 0.9228212237358093, 0.7753158211708069, 0.7022358179092407, 0.7061447501182556, 0.6654180288314819, 0.6557761430740356, 0.6215510368347168, 0.5878779888153076, 0.5652053356170654, 0.5429913997650146, 0.5354541540145874, 0.5353842973709106, 0.5264801383018494, 0.5278007388114929, 0.5061509609222412, 0.5034458041191101, 0.49080851674079895, 0.48461660742759705, 0.48604199290275574, 0.47600334882736206, 0.47423678636550903, 0.4669988751411438, 0.4578774869441986, 0.453524649143219, 0.44885674118995667, 0.4507811367511749, 0.44821837544441223, 0.43744999170303345, 0.4464225172996521, 0.45211800932884216, 0.43920907378196716, 0.4492577016353607, 0.4482058882713318, 0.42103034257888794, 0.41921305656433105, 0.4267626106739044, 0.42070040106773376, 0.422837495803833, 0.42995625734329224, 0.42905011773109436, 0.4186403751373291, 0.4212473928928375, 0.43785110116004944, 0.42595478892326355, 0.42608797550201416, 0.42899706959724426, 0.41050344705581665, 0.4152596890926361, 0.4426729381084442, 0.43220117688179016, 0.43091732263565063, 0.4288194477558136, 0.4313293397426605, 0.46079251170158386, 0.49386343359947205, 0.49235352873802185, 0.5102415084838867, 0.48941096663475037, 0.49236905574798584, 0.5078951120376587], "val_accuracy": [0.4333333373069763, 0.4560000002384186, 0.6486666798591614, 0.6803333163261414, 0.7056666612625122, 0.7319999933242798, 0.746666669845581, 0.7639999985694885, 0.7523333430290222, 0.7699999809265137, 0.7746666669845581, 0.7826666831970215, 0.7903333306312561, 0.7913333177566528, 0.7926666736602783, 0.8053333163261414, 0.8023333549499512, 0.8029999732971191, 0.8119999766349792, 0.8159999847412109, 0.8180000185966492, 0.8186666369438171, 0.8230000138282776, 0.8213333487510681, 0.8263333439826965, 0.8333333134651184, 0.8376666903495789, 0.8426666855812073, 0.8416666388511658, 0.8429999947547913, 0.8510000109672546, 0.8483333587646484, 0.8476666808128357, 0.8423333168029785, 0.8476666808128357, 0.8519999980926514, 0.8519999980926514, 0.8576666712760925, 0.8546666502952576, 0.8566666841506958, 0.8613333106040955, 0.8579999804496765, 0.8600000143051147, 0.8640000224113464, 0.8650000095367432, 0.8646666407585144, 0.8650000095367432, 0.8659999966621399, 0.8656666874885559, 0.8679999709129333, 0.8726666569709778, 0.8690000176429749, 0.8743333220481873, 0.8686666488647461, 0.8659999966621399, 0.8709999918937683, 0.8730000257492065, 0.8759999871253967, 0.8740000128746033, 0.8643333315849304, 0.8690000176429749, 0.8690000176429749, 0.8683333396911621]}, "mapping_values": [1, 10, 5, 5, 3, 3, 3, 0, 1, 5, 3, 2, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0], [0, 8, 9], [0], [0], [0, 0, 0, 1, 1], [0, 5, 6], [0, 5], [0], [0, 1], [0], [1], [0]], "fitness": -0.854285717010498, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.294551372528076, 2.190694570541382, 1.7794288396835327, 1.3409048318862915, 1.079740047454834, 0.921308159828186, 0.8490425944328308, 0.8386499881744385, 0.7970395684242249, 0.7592757344245911, 0.7052675485610962, 0.6842617392539978, 0.655329167842865, 0.6232261657714844, 0.6182916164398193, 0.5945931077003479, 0.5832265019416809, 0.5790978670120239, 0.5688140988349915, 0.5529211759567261, 0.5422059893608093, 0.5288713574409485, 0.5138665437698364, 0.5033555030822754, 0.4954228699207306, 0.48608219623565674, 0.488972544670105, 0.47018963098526, 0.4600934386253357, 0.4478846788406372, 0.44039487838745117, 0.42850837111473083, 0.4245830774307251, 0.41802769899368286, 0.41616854071617126, 0.4057386517524719, 0.4044635593891144, 0.39517441391944885, 0.4114985764026642, 0.3861231505870819], "accuracy": [0.12349755316972733, 0.3273015320301056, 0.43930789828300476, 0.5419363379478455, 0.6236956715583801, 0.6609430909156799, 0.6843217611312866, 0.6925109028816223, 0.6948884129524231, 0.7000396251678467, 0.7293620109558105, 0.7322678565979004, 0.7404569983482361, 0.7564390301704407, 0.759609043598175, 0.767401933670044, 0.7729493975639343, 0.7803460359573364, 0.7828556299209595, 0.7890635132789612, 0.789988100528717, 0.8012151718139648, 0.796328067779541, 0.7989697456359863, 0.8034605979919434, 0.8123101592063904, 0.8149517774581909, 0.816008448600769, 0.8230088353157043, 0.8274996876716614, 0.8297450542449951, 0.8322546482086182, 0.8314621448516846, 0.8383304476737976, 0.8387266993522644, 0.8441421389579773, 0.8433496356010437, 0.8449346423149109, 0.8363492488861084, 0.8525954484939575], "val_loss": [2.2473225593566895, 2.026592969894409, 1.1530628204345703, 0.8685746788978577, 0.7714549899101257, 0.7266539931297302, 0.674237847328186, 0.6612306833267212, 0.6555720567703247, 0.6305004358291626, 0.5791253447532654, 0.560861349105835, 0.5415855646133423, 0.5378696322441101, 0.5248193740844727, 0.5183822512626648, 0.510712742805481, 0.4991442859172821, 0.5039271116256714, 0.4954701066017151, 0.4858698844909668, 0.4896095097064972, 0.4720410108566284, 0.4672792851924896, 0.46769624948501587, 0.4511586129665375, 0.4551263153553009, 0.4455777108669281, 0.45283252000808716, 0.44373661279678345, 0.43792057037353516, 0.43098893761634827, 0.43312370777130127, 0.4263697862625122, 0.42554378509521484, 0.4439429044723511, 0.44296443462371826, 0.45093661546707153, 0.4323781728744507, 0.43824154138565063], "val_accuracy": [0.42399999499320984, 0.4476666748523712, 0.6370000243186951, 0.6803333163261414, 0.7126666903495789, 0.7236666679382324, 0.7386666536331177, 0.753333330154419, 0.7326666712760925, 0.762333333492279, 0.7760000228881836, 0.7763333320617676, 0.7879999876022339, 0.7910000085830688, 0.7903333306312561, 0.7910000085830688, 0.793666660785675, 0.8080000281333923, 0.793666660785675, 0.8173333406448364, 0.8103333115577698, 0.8053333163261414, 0.8169999718666077, 0.8263333439826965, 0.8253333568572998, 0.8370000123977661, 0.8270000219345093, 0.8373333215713501, 0.8316666483879089, 0.8389999866485596, 0.8403333425521851, 0.8496666550636292, 0.8516666889190674, 0.8516666889190674, 0.8573333621025085, 0.8516666889190674, 0.8553333282470703, 0.8363333344459534, 0.8453333377838135, 0.8473333120346069]}, "mapping_values": [1, 10, 5, 5, 3, 3, 3, 0, 1, 5, 3, 2, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 6, 3, 1, 3, 4], [0, 0, 1, 0, 2, 3], [64, 99, 27], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [6, 8, 2, 8, 4, 0, 2, 3], [0, 2, 4, 1, 3, 3], [0], [0, 0, 0, 1, 0], [0, 5, 6, 9], [0, 5], [0, 24], [0, 1], [0], [7], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 3, 14, 8, 6, 1, 5, 4, 1, 2, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), grad), grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.pow(beta, tf.math.negative(grad))), tf.math.add(alpha, tf.math.multiply(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09060890227556229, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 1, 3, 1, 3, 6, 5, 6, 6, 2, 8, 4, 9], [0, 0, 1, 1, 0, 2, 3, 3, 3, 0], [83, 87, 96, 35, 7], [0, 0, 0, 0, 0, 0, 1, 1], [0, 8, 6, 9, 5, 6], [0, 0], [0, 59, 49], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 5, 6, 1, 6], [5, 5, 7, 3], [0], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 13, 10, 5, 8, 6, 2, 3, 9, 5, 4, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.divide_no_nan(alpha, tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(grad), grad), tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.subtract(grad, grad), tf.math.divide_no_nan(grad, sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 7, 3, 1, 3], [1, 0, 1, 0, 2], [83, 80, 51], [0, 0, 0], [0, 8, 9], [0], [0], [0, 0, 0, 0, 1, 1], [0, 5, 6, 0], [0, 5], [0], [0, 1], [0], [5], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 3, 3, 0, 1, 6, 4, 2, 1, 2, 1, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09153348207473755, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [41, 99, 27], [0, 0, 0, 0, 0, 1, 1], [0, 8, 0, 8, 6], [0, 3], [0], [0, 0, 0, 1, 1, 0, 1], [7, 2, 6, 9], [4, 5, 5], [0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 5, 0, 3, 8, 3, 8, 7, 2], [1, 3, 1, 6, 6], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 7, 5, 2, 1, 7, 4, 3, 1, 14, 9, 5, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.divide_no_nan(grad, grad), tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.math.sqrt(alpha), tf.math.add(sigma, tf.math.add(alpha, grad)))), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}]