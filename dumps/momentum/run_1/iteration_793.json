[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0], [0, 8, 9], [0], [0], [0, 0, 0, 1, 1], [0, 5, 6], [0, 5], [0], [0, 1], [0], [1], [0]], "fitness": -0.8802857398986816, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2946510314941406, 2.190795660018921, 1.7768285274505615, 1.3570164442062378, 1.0666885375976562, 0.9009688496589661, 0.8290350437164307, 0.8006656765937805, 0.7536357641220093, 0.7433212399482727, 0.698375940322876, 0.6788598299026489, 0.6640545129776001, 0.6202208995819092, 0.6072526574134827, 0.5970173478126526, 0.5821977853775024, 0.5640968680381775, 0.5508893132209778, 0.5373228192329407, 0.5250836610794067, 0.5076481699943542, 0.5122065544128418, 0.49154719710350037, 0.482866495847702, 0.4836457669734955, 0.45789772272109985, 0.45025163888931274, 0.4492928385734558, 0.43762901425361633, 0.431286484003067, 0.4261288642883301, 0.4189686179161072, 0.4137592911720276, 0.3958374857902527, 0.3925909996032715, 0.37699922919273376, 0.3839954733848572, 0.3746383488178253, 0.3653828203678131, 0.36930763721466064, 0.3586994409561157, 0.3476593494415283, 0.34745165705680847, 0.32892096042633057, 0.3288397192955017, 0.33143627643585205, 0.324093222618103, 0.31615379452705383, 0.329397588968277, 0.3142707347869873, 0.3103507459163666, 0.3028823137283325, 0.28942757844924927, 0.28114935755729675, 0.28164634108543396, 0.27952855825424194, 0.2783072292804718, 0.2749811112880707, 0.2713066339492798, 0.2660987973213196, 0.2660115361213684, 0.2597714960575104], "accuracy": [0.12693171203136444, 0.3333773612976074, 0.43389248847961426, 0.5349359512329102, 0.6358473300933838, 0.6655659675598145, 0.6911900639533997, 0.7108704447746277, 0.707568347454071, 0.7058512568473816, 0.7367587089538574, 0.7442874312400818, 0.7409853339195251, 0.7617223858833313, 0.7668735980987549, 0.7660810947418213, 0.7803460359573364, 0.789459764957428, 0.7880068421363831, 0.7973847389221191, 0.802271842956543, 0.8030643463134766, 0.8013472557067871, 0.8109893202781677, 0.817989706993103, 0.816008448600769, 0.8212917447090149, 0.8269713521003723, 0.8327829837799072, 0.8329150676727295, 0.8354246616363525, 0.8397833704948425, 0.8408400416374207, 0.8446704745292664, 0.8486329317092896, 0.8544445633888245, 0.854708731174469, 0.8539162874221802, 0.8582749962806702, 0.859199583530426, 0.8548408150672913, 0.859199583530426, 0.8647470474243164, 0.8672566413879395, 0.8696341514587402, 0.8726720213890076, 0.8720116019248962, 0.8739928603172302, 0.8767666220664978, 0.8732003569602966, 0.8768987059593201, 0.8850878477096558, 0.8811253309249878, 0.8870691061019897, 0.887201189994812, 0.8893144726753235, 0.8903711438179016, 0.8938053250312805, 0.8924844861030579, 0.8952582478523254, 0.896446943283081, 0.893541157245636, 0.895918607711792], "val_loss": [2.247642993927002, 2.0256235599517822, 1.1531846523284912, 0.9228212237358093, 0.7753158211708069, 0.7022358179092407, 0.7061447501182556, 0.6654180288314819, 0.6557761430740356, 0.6215510368347168, 0.5878779888153076, 0.5652053356170654, 0.5429913997650146, 0.5354541540145874, 0.5353842973709106, 0.5264801383018494, 0.5278007388114929, 0.5061509609222412, 0.5034458041191101, 0.49080851674079895, 0.48461660742759705, 0.48604199290275574, 0.47600334882736206, 0.47423678636550903, 0.4669988751411438, 0.4578774869441986, 0.453524649143219, 0.44885674118995667, 0.4507811367511749, 0.44821837544441223, 0.43744999170303345, 0.4464225172996521, 0.45211800932884216, 0.43920907378196716, 0.4492577016353607, 0.4482058882713318, 0.42103034257888794, 0.41921305656433105, 0.4267626106739044, 0.42070040106773376, 0.422837495803833, 0.42995625734329224, 0.42905011773109436, 0.4186403751373291, 0.4212473928928375, 0.43785110116004944, 0.42595478892326355, 0.42608797550201416, 0.42899706959724426, 0.41050344705581665, 0.4152596890926361, 0.4426729381084442, 0.43220117688179016, 0.43091732263565063, 0.4288194477558136, 0.4313293397426605, 0.46079251170158386, 0.49386343359947205, 0.49235352873802185, 0.5102415084838867, 0.48941096663475037, 0.49236905574798584, 0.5078951120376587], "val_accuracy": [0.4333333373069763, 0.4560000002384186, 0.6486666798591614, 0.6803333163261414, 0.7056666612625122, 0.7319999933242798, 0.746666669845581, 0.7639999985694885, 0.7523333430290222, 0.7699999809265137, 0.7746666669845581, 0.7826666831970215, 0.7903333306312561, 0.7913333177566528, 0.7926666736602783, 0.8053333163261414, 0.8023333549499512, 0.8029999732971191, 0.8119999766349792, 0.8159999847412109, 0.8180000185966492, 0.8186666369438171, 0.8230000138282776, 0.8213333487510681, 0.8263333439826965, 0.8333333134651184, 0.8376666903495789, 0.8426666855812073, 0.8416666388511658, 0.8429999947547913, 0.8510000109672546, 0.8483333587646484, 0.8476666808128357, 0.8423333168029785, 0.8476666808128357, 0.8519999980926514, 0.8519999980926514, 0.8576666712760925, 0.8546666502952576, 0.8566666841506958, 0.8613333106040955, 0.8579999804496765, 0.8600000143051147, 0.8640000224113464, 0.8650000095367432, 0.8646666407585144, 0.8650000095367432, 0.8659999966621399, 0.8656666874885559, 0.8679999709129333, 0.8726666569709778, 0.8690000176429749, 0.8743333220481873, 0.8686666488647461, 0.8659999966621399, 0.8709999918937683, 0.8730000257492065, 0.8759999871253967, 0.8740000128746033, 0.8643333315849304, 0.8690000176429749, 0.8690000176429749, 0.8683333396911621]}, "mapping_values": [1, 10, 5, 5, 3, 3, 3, 0, 1, 5, 3, 2, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0], [0, 8, 9], [0], [0], [0, 0, 0, 1, 1], [0, 5, 6], [0, 5], [0], [0, 1], [0], [1], [0]], "fitness": -0.8199999928474426, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.292384147644043, 2.185781478881836, 1.7629215717315674, 1.3176778554916382, 1.0953012704849243, 0.9321832060813904, 0.8581061959266663, 0.8127734661102295, 0.7837021350860596, 0.7438123822212219, 0.7077885866165161, 0.6772522926330566, 0.6589584946632385, 0.6269233822822571, 0.6061627268791199, 0.601184606552124, 0.5929408669471741, 0.5799083113670349, 0.561173677444458, 0.5528863072395325, 0.5504834651947021, 0.5283496975898743, 0.5155634880065918, 0.5088745355606079, 0.4939830005168915, 0.4819481670856476, 0.47096434235572815, 0.4663972854614258, 0.4581774175167084, 0.44315990805625916, 0.4429378807544708, 0.4371218979358673, 0.41742780804634094, 0.41611742973327637, 0.42952674627304077, 0.42048725485801697, 0.4059315323829651, 0.40795645117759705, 0.3957156240940094, 0.3919384777545929, 0.3763035833835602, 0.385418176651001], "accuracy": [0.1302337795495987, 0.33060362935066223, 0.4340245723724365, 0.5543521046638489, 0.6324131488800049, 0.6579051613807678, 0.6852463483810425, 0.7017567157745361, 0.6975300312042236, 0.722757875919342, 0.7281733155250549, 0.7409853339195251, 0.7511557340621948, 0.7648923397064209, 0.7718927264213562, 0.7688548564910889, 0.7792893648147583, 0.7701756954193115, 0.7824593782424927, 0.7889314293861389, 0.7913089394569397, 0.7965922355651855, 0.8045172095298767, 0.8068947196006775, 0.8145555257797241, 0.8168009519577026, 0.8214238286018372, 0.8249900937080383, 0.8278959393501282, 0.830669641494751, 0.8310658931732178, 0.8310658931732178, 0.8446704745292664, 0.8451988101005554, 0.8453308939933777, 0.8397833704948425, 0.8474441766738892, 0.8453308939933777, 0.8506141901016235, 0.852859616279602, 0.8590674996376038, 0.8573504090309143], "val_loss": [2.2454655170440674, 2.0087785720825195, 1.11235511302948, 0.8640050292015076, 0.7715318202972412, 0.6796441674232483, 0.6565728187561035, 0.6383447051048279, 0.6226606369018555, 0.587103009223938, 0.5529181957244873, 0.5362667441368103, 0.5209290981292725, 0.5175095200538635, 0.4960102140903473, 0.49439921975135803, 0.48012328147888184, 0.4645375609397888, 0.4650646150112152, 0.4569958448410034, 0.452174574136734, 0.4351887106895447, 0.4219318926334381, 0.41614681482315063, 0.41365355253219604, 0.4107924699783325, 0.405413419008255, 0.3978450894355774, 0.39296239614486694, 0.3850572109222412, 0.38860106468200684, 0.37902283668518066, 0.372592031955719, 0.3776041567325592, 0.383034884929657, 0.3669692277908325, 0.3671417236328125, 0.3702714741230011, 0.3786194324493408, 0.3559272885322571, 0.3627999722957611, 0.3740544319152832], "val_accuracy": [0.4309999942779541, 0.46666666865348816, 0.656333327293396, 0.7116666436195374, 0.7203333377838135, 0.7459999918937683, 0.7570000290870667, 0.7590000033378601, 0.7730000019073486, 0.7803333401679993, 0.7883333563804626, 0.7943333387374878, 0.7943333387374878, 0.7986666560173035, 0.8076666593551636, 0.8063333630561829, 0.8163333535194397, 0.8206666707992554, 0.8090000152587891, 0.8296666741371155, 0.8309999704360962, 0.8259999752044678, 0.8443333506584167, 0.8500000238418579, 0.8450000286102295, 0.8486666679382324, 0.8513333201408386, 0.8560000061988831, 0.8513333201408386, 0.8566666841506958, 0.859666645526886, 0.859666645526886, 0.8643333315849304, 0.862666666507721, 0.8603333234786987, 0.8690000176429749, 0.8743333220481873, 0.8663333058357239, 0.859333336353302, 0.8676666617393494, 0.8673333525657654, 0.8669999837875366]}, "mapping_values": [1, 10, 5, 5, 3, 3, 3, 0, 1, 5, 3, 2, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 1, 3, 1, 3, 4], [0, 2, 1, 0, 2, 0], [50, 99, 27], [0, 0, 0], [9, 8, 9], [0], [0], [0, 0, 0, 1, 1, 0, 1], [4, 5, 6, 5], [0, 5, 7], [0], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 3, 1, 1, 0, 1, 7, 4, 3, 1, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.pow(alpha, tf.constant(1.0, shape=shape, dtype=tf.float32)))), grad), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3030073642730713, 2.318528175354004, 2.760139226913452, 7.100862979888916, 16.348596572875977, 28.23731231689453], "accuracy": [0.10342095047235489, 0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3052818775177, 2.379380464553833, 4.170497894287109, 12.150453567504883, 22.839759826660156, 36.3951416015625], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [4, 1, 3, 1, 3, 3], [1, 0, 1, 0, 2, 3, 1], [83, 99, 27], [1, 1, 0], [6, 8, 9], [0], [0], [0, 0, 0, 1, 1], [0, 5, 6], [0, 5], [0], [0, 1], [0], [5], [0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.subtract(tf.math.multiply(tf.math.subtract(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(grad, alpha)), lambda shape,  alpha, beta, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}, "mapping_values": [1, 13, 6, 7, 2, 1, 0, 1, 1, 5, 3, 2, 1, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 3, 2, 3, 2, 3, 6, 6, 4, 9, 3], [3, 0, 2, 0, 2, 1, 1, 0, 3, 3], [63, 99, 27, 35], [0, 0, 0], [0, 8, 9], [0], [0], [0, 0, 0, 1, 1], [0, 5, 3], [0, 6], [0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 3, 4, 1, 7, 9, 1, 6, 8, 5, 5], [1, 0, 4, 3, 1, 3], [0, 16]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(grad, tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(1.0, shape=shape, dtype=tf.float32)))), grad), tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), alpha), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.pow(alpha, tf.math.subtract(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, sigma))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(alpha)), tf.math.square(sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}, "mapping_values": [1, 22, 12, 10, 4, 3, 3, 0, 1, 5, 3, 2, 1, 17, 11, 6, 2], "tree_depth": 16}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 3, 1, 3], [2, 3, 1, 1, 2], [67, 99, 27], [0, 0, 0], [0, 8, 9], [0], [0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 3, 6, 3, 1, 4, 0, 7, 0, 6, 3, 4, 7, 9, 0, 4, 5, 6, 1, 6, 8, 8, 4, 8, 1, 8, 1, 9, 4, 1, 9], [0, 5, 0, 4, 1, 3, 2, 0, 6, 4, 2, 2, 3, 5, 0, 6, 7], [0, 30, 24, 44, 25, 44, 47], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 0, 3, 3, 0, 1, 48, 31, 17, 7, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(grad, tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.add(grad, tf.math.negative(tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad), tf.math.negative(alpha)), tf.math.pow(tf.math.square(tf.math.divide_no_nan(sigma, beta)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))))), tf.math.subtract(grad, tf.math.divide_no_nan(grad, beta))), tf.math.sqrt(tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), beta)), sigma)), grad))))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.subtract(grad, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]