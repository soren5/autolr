[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8648571372032166, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2923834323883057, 2.1889407634735107, 1.7645962238311768, 1.3581336736679077, 1.0713711977005005, 0.9324289560317993, 0.8733577728271484, 0.8213781714439392, 0.7735388875007629, 0.7477298974990845, 0.7026875019073486, 0.6956027150154114, 0.6567690968513489, 0.6345532536506653, 0.6202870607376099, 0.5963889360427856, 0.5742583274841309, 0.5828102231025696, 0.5587208271026611, 0.5483556985855103, 0.5339842438697815, 0.5249099135398865, 0.5263219475746155, 0.5094848871231079, 0.5055311918258667, 0.49362626671791077, 0.492054283618927, 0.4717646539211273, 0.46201664209365845, 0.4534401297569275, 0.4354040026664734, 0.43411898612976074, 0.41996026039123535, 0.4101247787475586, 0.41195884346961975, 0.4070257246494293, 0.4060525894165039, 0.38620615005493164, 0.3781440556049347, 0.37892118096351624], "accuracy": [0.13115836679935455, 0.3237352967262268, 0.4465724527835846, 0.5481442213058472, 0.64231938123703, 0.6649055480957031, 0.6822084188461304, 0.6939638257026672, 0.7051908373832703, 0.7223616242408752, 0.7277770638465881, 0.7425703406333923, 0.7458723783493042, 0.7614582180976868, 0.7618544697761536, 0.7707040309906006, 0.7774402499198914, 0.783119797706604, 0.7884030938148499, 0.7891955971717834, 0.7967243194580078, 0.7979130744934082, 0.7968564033508301, 0.8121780753135681, 0.8079513907432556, 0.8101968169212341, 0.8162726163864136, 0.8228767514228821, 0.8269713521003723, 0.8314621448516846, 0.8317263126373291, 0.8343679904937744, 0.8397833704948425, 0.8437458872795105, 0.8465195894241333, 0.8451988101005554, 0.8457271456718445, 0.8539162874221802, 0.8504821062088013, 0.8555012345314026], "val_loss": [2.246166944503784, 2.0171594619750977, 1.132443904876709, 0.8806336522102356, 0.7696613073348999, 0.7301961779594421, 0.6701276898384094, 0.6593276858329773, 0.6416698694229126, 0.6181098818778992, 0.5777679681777954, 0.5553255081176758, 0.54523104429245, 0.5395349264144897, 0.5274631977081299, 0.5157209634780884, 0.5100258588790894, 0.5044673085212708, 0.5140815377235413, 0.5056582689285278, 0.5005766153335571, 0.48797985911369324, 0.49456727504730225, 0.48846670985221863, 0.4840965270996094, 0.4601652920246124, 0.4623236060142517, 0.4541293978691101, 0.45140501856803894, 0.4431198835372925, 0.4481762647628784, 0.4416334927082062, 0.4298308193683624, 0.44409701228141785, 0.4298262596130371, 0.42281460762023926, 0.42649415135383606, 0.41888248920440674, 0.427418977022171, 0.41300126910209656], "val_accuracy": [0.41999998688697815, 0.503000020980835, 0.640333354473114, 0.6853333115577698, 0.7103333473205566, 0.7300000190734863, 0.7363333106040955, 0.7523333430290222, 0.7553333044052124, 0.7696666717529297, 0.7699999809265137, 0.7749999761581421, 0.7946666479110718, 0.7860000133514404, 0.7916666865348816, 0.7976666688919067, 0.8019999861717224, 0.8130000233650208, 0.8116666674613953, 0.8046666383743286, 0.8059999942779541, 0.8209999799728394, 0.8233333230018616, 0.824999988079071, 0.8230000138282776, 0.8296666741371155, 0.8326666951179504, 0.8389999866485596, 0.8460000157356262, 0.8443333506584167, 0.843999981880188, 0.8463333249092102, 0.8516666889190674, 0.8546666502952576, 0.859000027179718, 0.8560000061988831, 0.8486666679382324, 0.8506666421890259, 0.856333315372467, 0.8576666712760925]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8411428332328796, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2940359115600586, 2.193044900894165, 1.786794900894165, 1.364513635635376, 1.1029362678527832, 0.9375282526016235, 0.8648256659507751, 0.8071461319923401, 0.763734757900238, 0.7596974968910217, 0.7051002383232117, 0.6758056879043579, 0.6549323201179504, 0.6357173323631287, 0.6033591032028198, 0.5891515016555786, 0.583780825138092, 0.5858187079429626, 0.5656081438064575, 0.5642802119255066, 0.5570745468139648, 0.5234431624412537, 0.536371111869812, 0.5205839276313782, 0.5089128017425537, 0.4923093020915985, 0.503037691116333, 0.47482025623321533, 0.48200148344039917, 0.47020968794822693, 0.45479241013526917, 0.4457852840423584, 0.44982022047042847, 0.4390377998352051, 0.42688658833503723, 0.4262854754924774, 0.4205520749092102, 0.40651270747184753, 0.3875959515571594, 0.3932075500488281, 0.38341331481933594, 0.37318363785743713, 0.3832692503929138, 0.3834463357925415, 0.37152373790740967, 0.36610519886016846, 0.34780290722846985, 0.34306013584136963, 0.3437996208667755, 0.34817934036254883, 0.3345286250114441, 0.32632479071617126, 0.3197718858718872, 0.31968608498573303, 0.3279222548007965, 0.3075561821460724, 0.3178637623786926, 0.301399827003479, 0.2957793176174164], "accuracy": [0.12891295552253723, 0.3259807229042053, 0.4321753978729248, 0.5363888740539551, 0.6206578016281128, 0.6623960137367249, 0.6859067678451538, 0.6985867023468018, 0.7092854380607605, 0.7082287669181824, 0.7343811988830566, 0.7401928305625916, 0.7540615797042847, 0.7589486241340637, 0.7644960880279541, 0.7759873270988464, 0.7778365015983582, 0.774798572063446, 0.7881389260292053, 0.7860256433486938, 0.7868181467056274, 0.7968564033508301, 0.7971205711364746, 0.8005547523498535, 0.806630551815033, 0.8108572363853455, 0.8153480291366577, 0.819970965385437, 0.8107251524925232, 0.8201030492782593, 0.8271034359931946, 0.8300092220306396, 0.8289526104927063, 0.8381983637809753, 0.8430854678153992, 0.8367455005645752, 0.8424250483512878, 0.8488970994949341, 0.8609166741371155, 0.8570862412452698, 0.8588033318519592, 0.8599920868873596, 0.8593316674232483, 0.8603883385658264, 0.8590674996376038, 0.8585391640663147, 0.8650112152099609, 0.8717474341392517, 0.8710870146751404, 0.8710870146751404, 0.8745211958885193, 0.872407853603363, 0.8817857503890991, 0.882710337638855, 0.8816536664962769, 0.8812574148178101, 0.8767666220664978, 0.8815215826034546, 0.886672854423523], "val_loss": [2.2466139793395996, 2.0239505767822266, 1.1603349447250366, 0.9046375155448914, 0.7661442160606384, 0.7043136358261108, 0.6518574953079224, 0.6397215723991394, 0.6355183124542236, 0.6208910346031189, 0.578833818435669, 0.5466696619987488, 0.5273968577384949, 0.5200647115707397, 0.5146017670631409, 0.5109835863113403, 0.5044834613800049, 0.4961925446987152, 0.506377100944519, 0.49112024903297424, 0.4879705309867859, 0.4750933051109314, 0.4753475785255432, 0.4602176249027252, 0.45038631558418274, 0.4576393961906433, 0.44971179962158203, 0.4353274703025818, 0.43629106879234314, 0.4345709979534149, 0.419718861579895, 0.4204278290271759, 0.4168916344642639, 0.4176948368549347, 0.4084799289703369, 0.3981967866420746, 0.3915805518627167, 0.3934794068336487, 0.40417879819869995, 0.39776375889778137, 0.3893533945083618, 0.39506229758262634, 0.409041166305542, 0.4089433550834656, 0.39089077711105347, 0.39365026354789734, 0.38801440596580505, 0.39431843161582947, 0.4011448919773102, 0.3842976987361908, 0.37408527731895447, 0.38019445538520813, 0.393733412027359, 0.4158695340156555, 0.3986227214336395, 0.3756517767906189, 0.3798616826534271, 0.3958858251571655, 0.4281347393989563], "val_accuracy": [0.4143333435058594, 0.4413333237171173, 0.6423333287239075, 0.6866666674613953, 0.7250000238418579, 0.7383333444595337, 0.7546666860580444, 0.7433333396911621, 0.7543333172798157, 0.7683333158493042, 0.768666684627533, 0.7906666398048401, 0.7933333516120911, 0.8016666769981384, 0.7963333129882812, 0.8026666641235352, 0.8033333420753479, 0.8119999766349792, 0.8053333163261414, 0.8090000152587891, 0.8103333115577698, 0.8190000057220459, 0.8186666369438171, 0.8236666917800903, 0.8323333263397217, 0.8333333134651184, 0.8393333554267883, 0.8383333086967468, 0.8410000205039978, 0.8293333053588867, 0.8423333168029785, 0.8450000286102295, 0.8453333377838135, 0.843666672706604, 0.8476666808128357, 0.8533333539962769, 0.8543333411216736, 0.8566666841506958, 0.8576666712760925, 0.8573333621025085, 0.8556666374206543, 0.8640000224113464, 0.8666666746139526, 0.8636666536331177, 0.8603333234786987, 0.8616666793823242, 0.8696666955947876, 0.8663333058357239, 0.8686666488647461, 0.8709999918937683, 0.871999979019165, 0.8696666955947876, 0.871999979019165, 0.8740000128746033, 0.8703333139419556, 0.8730000257492065, 0.8676666617393494, 0.8693333268165588, 0.8676666617393494]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 3, 6, 3, 8], [0, 2, 1, 0, 2], [83, 99, 27], [0, 0, 1, 1, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [7], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 4, 2, 2, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09417514503002167, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 1, 3, 1, 3, 4], [0, 0, 1, 0, 2, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 4, 2], [0, 1, 3], [0], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3, 0], [3, 0, 4], [0, 58], [0, 0, 1], [0, 8], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 3, 6, 3, 3, 1, 8, 5, 3, 1, 3, 2, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.pow(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.negative(sigma), tf.constant(0.0, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [2, 1, 0, 1, 3], [0, 0, 1, 0, 2], [92, 99, 27], [0, 1, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 1, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 39], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 2, 1, 1, 1, 5, 3, 2, 2, 2, 1, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.math.negative(tf.math.subtract(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3045167922973633, 2.567333459854126, 164.6256103515625, 41512.6640625, 10851575.0, 2792127232.0], "accuracy": [0.09192973375320435, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.302842378616333, 6.989124774932861, 1591.293701171875, 407351.625, 104282000.0, 26696192000.0], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 3, 2], [83, 99, 27], [0, 0, 1, 1, 1, 1], [8, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1, 0, 1], [2, 0, 4, 3, 5], [0, 0, 4, 7], [0, 58], [0, 1], [0], [7], [0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}, "mapping_values": [1, 8, 4, 4, 2, 4, 2, 2, 1, 9, 5, 4, 2, 2, 1, 1, 0], "tree_depth": 12}]