[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8600000143051147, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2943387031555176, 2.1915125846862793, 1.7741496562957764, 1.3209806680679321, 1.0730174779891968, 0.9101482629776001, 0.830523669719696, 0.7813759446144104, 0.7623337507247925, 0.7363372445106506, 0.6962016224861145, 0.6554288864135742, 0.647777259349823, 0.6273936629295349, 0.616849422454834, 0.6056644916534424, 0.5878307819366455, 0.5878937244415283, 0.5578186511993408, 0.568924069404602, 0.5378961563110352, 0.5385779142379761, 0.5224614143371582, 0.5239299535751343, 0.5058999061584473, 0.4979455769062042, 0.48611578345298767, 0.48024100065231323, 0.46804583072662354, 0.45523324608802795, 0.45448166131973267, 0.4394960105419159, 0.4307194948196411, 0.43042176961898804, 0.4359692633152008, 0.4215449392795563, 0.41436654329299927, 0.4002538323402405, 0.4127746522426605, 0.4013531804084778, 0.39340871572494507, 0.3845006823539734, 0.3822396695613861, 0.38247111439704895, 0.35990259051322937, 0.35703107714653015, 0.36499667167663574, 0.3618542551994324, 0.36999446153640747, 0.34711065888404846, 0.34812670946121216, 0.3534882068634033, 0.3403153419494629, 0.3340144157409668], "accuracy": [0.12917712330818176, 0.32941487431526184, 0.44010037183761597, 0.5503896474838257, 0.6365077495574951, 0.6660943031311035, 0.6989829540252686, 0.7132478952407837, 0.7108704447746277, 0.7176066637039185, 0.7367587089538574, 0.7434949278831482, 0.7497028112411499, 0.7617223858833313, 0.7666094303131104, 0.772288978099823, 0.7815347909927368, 0.7746664881706238, 0.7869502305984497, 0.7821952104568481, 0.7922335267066956, 0.7928939461708069, 0.8018755912780762, 0.8013472557067871, 0.8014793395996094, 0.8096684813499451, 0.8173292875289917, 0.8182538747787476, 0.8173292875289917, 0.8271034359931946, 0.8245938420295715, 0.8359529972076416, 0.8348963260650635, 0.837141752243042, 0.8350284099578857, 0.8383304476737976, 0.8426892161369324, 0.8521991968154907, 0.8448025584220886, 0.8457271456718445, 0.8496896028518677, 0.8545766472816467, 0.8537842035293579, 0.8524633646011353, 0.8589354157447815, 0.8593316674232483, 0.8615770936012268, 0.8639545440673828, 0.8537842035293579, 0.8636903762817383, 0.8614450097084045, 0.8650112152099609, 0.8644828796386719, 0.8702945709228516], "val_loss": [2.245863437652588, 2.024540424346924, 1.1221238374710083, 0.8614134192466736, 0.7602570056915283, 0.7221987247467041, 0.6745585203170776, 0.6816837787628174, 0.6419760584831238, 0.6339482665061951, 0.5841988325119019, 0.5680888891220093, 0.5573946833610535, 0.5345464944839478, 0.5235341787338257, 0.5227691531181335, 0.5185906291007996, 0.5051727890968323, 0.5063689947128296, 0.49271005392074585, 0.5032866597175598, 0.493025541305542, 0.49203768372535706, 0.4788620173931122, 0.46258196234703064, 0.45804598927497864, 0.46282461285591125, 0.45864883065223694, 0.4384172260761261, 0.4390996992588043, 0.4306022822856903, 0.4290199875831604, 0.4362034499645233, 0.4455976188182831, 0.44008511304855347, 0.43133285641670227, 0.43484410643577576, 0.4305063486099243, 0.4268089234828949, 0.4230079650878906, 0.42575663328170776, 0.42327481508255005, 0.424775630235672, 0.41568994522094727, 0.40886780619621277, 0.4140435457229614, 0.44143328070640564, 0.4432295262813568, 0.416635662317276, 0.4172598421573639, 0.41609126329421997, 0.42244455218315125, 0.42273542284965515, 0.4343881905078888], "val_accuracy": [0.4336666762828827, 0.48899999260902405, 0.6516666412353516, 0.7043333053588867, 0.7166666388511658, 0.734333336353302, 0.7436666488647461, 0.7516666650772095, 0.7393333315849304, 0.7586666941642761, 0.7773333191871643, 0.7839999794960022, 0.7903333306312561, 0.8046666383743286, 0.8106666803359985, 0.7983333468437195, 0.8069999814033508, 0.812666654586792, 0.8146666884422302, 0.8199999928474426, 0.8236666917800903, 0.8206666707992554, 0.8180000185966492, 0.8320000171661377, 0.8420000076293945, 0.8289999961853027, 0.8389999866485596, 0.8346666693687439, 0.840666651725769, 0.8486666679382324, 0.8533333539962769, 0.8539999723434448, 0.8493333458900452, 0.8513333201408386, 0.8510000109672546, 0.8546666502952576, 0.8583333492279053, 0.8529999852180481, 0.8586666584014893, 0.8556666374206543, 0.859666645526886, 0.859666645526886, 0.8603333234786987, 0.8579999804496765, 0.8629999756813049, 0.8616666793823242, 0.8633333444595337, 0.8606666922569275, 0.8640000224113464, 0.859000027179718, 0.859333336353302, 0.8550000190734863, 0.859666645526886, 0.859333336353302]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8531428575515747, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2924373149871826, 2.187178373336792, 1.7639045715332031, 1.36920964717865, 1.0648868083953857, 0.9463557004928589, 0.849188506603241, 0.8401808142662048, 0.763927698135376, 0.7571220397949219, 0.6967691779136658, 0.7100334763526917, 0.6682009696960449, 0.6403786540031433, 0.6157211065292358, 0.6125738024711609, 0.5870310664176941, 0.5943710803985596, 0.578005313873291, 0.5736858248710632, 0.5652758479118347, 0.5428112745285034, 0.5291714668273926, 0.5149174928665161, 0.5123307108879089, 0.501557469367981, 0.48991578817367554, 0.47253477573394775, 0.462650328874588, 0.4558928906917572, 0.4386575520038605, 0.4396396279335022, 0.419808954000473, 0.4194045066833496, 0.4131676256656647, 0.39921894669532776, 0.39334020018577576, 0.39703500270843506, 0.3925383388996124, 0.39101818203926086, 0.3821945786476135, 0.3746902048587799, 0.37229859828948975, 0.3511926829814911, 0.34261712431907654], "accuracy": [0.1290450394153595, 0.3269053101539612, 0.43970412015914917, 0.54220050573349, 0.639809787273407, 0.6584334969520569, 0.6852463483810425, 0.698190450668335, 0.7041342258453369, 0.7083608508110046, 0.7305507659912109, 0.7364945411682129, 0.7400607466697693, 0.7559106945991516, 0.7604015469551086, 0.7705719470977783, 0.7792893648147583, 0.776251494884491, 0.7816668748855591, 0.7778365015983582, 0.7798177003860474, 0.7946110367774963, 0.7956677079200745, 0.8055738806724548, 0.8062343001365662, 0.8038568496704102, 0.8120459914207458, 0.8230088353157043, 0.8267071843147278, 0.8285563588142395, 0.8315942287445068, 0.8341038227081299, 0.8412362933158875, 0.8454629778862, 0.8389908671379089, 0.8473120927810669, 0.852331280708313, 0.8469158411026001, 0.848368763923645, 0.8539162874221802, 0.8527275323867798, 0.8557654023170471, 0.8564258217811584, 0.863029956817627, 0.8661999702453613], "val_loss": [2.2452354431152344, 2.009789228439331, 1.1016266345977783, 0.84389728307724, 0.7507969737052917, 0.7132588028907776, 0.6769574284553528, 0.6374454498291016, 0.6370287537574768, 0.6082413196563721, 0.5639508366584778, 0.5260565876960754, 0.5253186225891113, 0.5303705930709839, 0.5168919563293457, 0.49538111686706543, 0.4895092248916626, 0.48753872513771057, 0.49440592527389526, 0.47450003027915955, 0.4633958041667938, 0.47727277874946594, 0.45629796385765076, 0.4391232430934906, 0.43452563881874084, 0.4281374514102936, 0.4152376353740692, 0.4136759340763092, 0.40641170740127563, 0.3984811305999756, 0.391661673784256, 0.38559937477111816, 0.381916344165802, 0.3798036575317383, 0.37671029567718506, 0.37292104959487915, 0.37131038308143616, 0.3726077973842621, 0.36987802386283875, 0.36735063791275024, 0.36446231603622437, 0.35908350348472595, 0.3606182932853699, 0.3616383969783783, 0.3702268898487091], "val_accuracy": [0.4323333203792572, 0.4476666748523712, 0.6633333563804626, 0.7106666564941406, 0.7233333587646484, 0.7366666793823242, 0.7516666650772095, 0.7543333172798157, 0.7639999985694885, 0.768666684627533, 0.7816666960716248, 0.7893333435058594, 0.7960000038146973, 0.79666668176651, 0.7996666431427002, 0.8063333630561829, 0.8056666851043701, 0.8069999814033508, 0.8040000200271606, 0.8163333535194397, 0.8266666531562805, 0.8166666626930237, 0.8333333134651184, 0.8420000076293945, 0.843666672706604, 0.8386666774749756, 0.8533333539962769, 0.8560000061988831, 0.8533333539962769, 0.8526666760444641, 0.859000027179718, 0.859000027179718, 0.8659999966621399, 0.8656666874885559, 0.8633333444595337, 0.8690000176429749, 0.8673333525657654, 0.8656666874885559, 0.8743333220481873, 0.8773333430290222, 0.8676666617393494, 0.8730000257492065, 0.875, 0.8736666440963745, 0.871666669845581]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 3, 1, 3, 2, 6, 1, 3, 7, 8, 4, 4, 1, 2, 8, 3, 4, 0, 0, 2, 4, 1, 5, 4, 9, 0, 3, 7, 0, 4, 5, 8, 9, 0, 7, 8, 2, 6, 0, 5, 9, 2], [0, 0, 1, 0, 2, 1, 2, 2, 1, 3, 3, 0, 0, 3, 0, 1, 1, 0, 1, 1, 1, 1, 2, 2], [46, 99, 27, 56, 3, 88, 50, 71, 57, 35], [0, 0, 1, 0, 1, 1], [0, 1, 0], [0, 3, 3], [0], [0, 0, 1, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 67, 43, 24, 10, 5, 3, 2, 1, 3, 2, 1, 1, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(tf.math.pow(grad, tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.multiply(alpha, tf.math.pow(grad, tf.math.negative(tf.math.negative(grad))))), tf.math.add(tf.math.pow(alpha, grad), tf.math.subtract(tf.math.square(tf.math.pow(grad, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.multiply(tf.math.add(grad, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(tf.math.square(tf.math.sqrt(alpha)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))))), alpha)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(alpha, alpha))), tf.math.negative(tf.math.square(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), alpha), tf.math.add(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11570466309785843, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [9, 1, 3, 1, 2], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 4, 3, 8], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3034071922302246, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}, "mapping_values": [1, 1, 1, 0, 1, 6, 3, 3, 1, 8, 5, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 3, 1, 3, 1, 7, 7, 3, 3, 1, 8], [2, 0, 3, 3, 2, 3, 2, 1, 0, 1, 1], [83, 32, 10], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 4, 4], [0, 63], [0, 0, 1, 0, 1], [0, 3, 8], [1, 4], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 12, 11, 2, 6, 3, 3, 1, 7, 4, 3, 1, 5, 3, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.multiply(grad, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, grad)), tf.math.add(tf.math.add(grad, grad), tf.math.multiply(grad, alpha))), tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.sqrt(alpha))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 88, 27], [0, 0, 1, 0, 1, 1], [0, 1, 9], [0, 1, 3], [0, 65], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 0, 4, 3, 5, 8, 6, 1, 4, 6, 7, 2], [3, 0, 4, 5, 1, 0, 3, 2, 4, 0], [0, 58, 98], [0, 1, 0, 1, 0, 1, 0, 0], [4, 6, 4, 8, 9], [1, 7, 7], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 4, 3, 1, 2, 22, 12, 10, 3, 8, 5, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), grad), tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.add(beta, grad))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.divide_no_nan(grad, tf.math.pow(grad, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.304248094558716, 2.303675413131714, 2.3040294647216797, 2.303593873977661, 2.3040928840637207, 2.30407977104187, 2.303840398788452], "accuracy": [0.09219389408826828, 0.09100515395402908, 0.09417514503002167, 0.09747721254825592, 0.09509972482919693, 0.1010434553027153, 0.09840179979801178], "val_loss": [2.302877187728882, 2.3030014038085938, 2.303143262863159, 2.3026211261749268, 2.3034136295318604, 2.303978681564331, 2.3029608726501465], "val_accuracy": [0.1003333330154419, 0.10266666859388351, 0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.09733333438634872, 0.1003333330154419]}}]