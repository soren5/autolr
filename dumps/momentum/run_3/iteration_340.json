[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.87028568983078, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.293152332305908, 2.188211679458618, 1.7608391046524048, 1.3252723217010498, 1.078700065612793, 0.9118653535842896, 0.8385469913482666, 0.8101076483726501, 0.761439859867096, 0.7347464561462402, 0.7123180627822876, 0.6777012944221497, 0.643057107925415, 0.6314175724983215, 0.6165218353271484, 0.5910436511039734, 0.5896372199058533, 0.5740755796432495, 0.5635482668876648, 0.5487987995147705, 0.5324008464813232, 0.5215209126472473, 0.5187078714370728, 0.4956742227077484, 0.4883137345314026, 0.48198309540748596, 0.46235164999961853, 0.45480015873908997, 0.447836309671402, 0.4470028579235077, 0.443393737077713, 0.43302857875823975, 0.41960757970809937, 0.4146021604537964, 0.40606892108917236, 0.4035026431083679, 0.39098310470581055, 0.3869178295135498, 0.3887503743171692, 0.3851431906223297, 0.357649028301239, 0.3731098771095276, 0.36437520384788513, 0.3550907075405121, 0.3465290069580078, 0.3442644476890564, 0.33952003717422485], "accuracy": [0.1302337795495987, 0.3335094451904297, 0.44168537855148315, 0.5506538152694702, 0.6394135355949402, 0.6646413803100586, 0.6939638257026672, 0.6980583667755127, 0.7009642124176025, 0.7201162576675415, 0.7341170310974121, 0.7364945411682129, 0.7518161535263062, 0.761590301990509, 0.7574957013130188, 0.7736098170280457, 0.7821952104568481, 0.7858935594558716, 0.7893276810646057, 0.7922335267066956, 0.7921014428138733, 0.793422281742096, 0.7998943328857422, 0.8062343001365662, 0.8107251524925232, 0.8129705190658569, 0.8227446675300598, 0.8222163319587708, 0.8284242749214172, 0.832650899887085, 0.8330471515655518, 0.8343679904937744, 0.8424250483512878, 0.8404437899589539, 0.8400475382804871, 0.846387505531311, 0.8495575189590454, 0.8515387773513794, 0.8510104417800903, 0.8515387773513794, 0.8625016212463379, 0.8537842035293579, 0.8618412613868713, 0.8614450097084045, 0.8644828796386719, 0.8698983192443848, 0.8636903762817383], "val_loss": [2.246065378189087, 2.014096260070801, 1.1289830207824707, 0.9094581604003906, 0.7623652219772339, 0.7203189134597778, 0.6759260296821594, 0.6583852767944336, 0.651975691318512, 0.626010000705719, 0.6004306674003601, 0.5730299353599548, 0.5544441938400269, 0.5551794171333313, 0.5469516515731812, 0.5399172902107239, 0.5263733863830566, 0.5277446508407593, 0.5256025195121765, 0.5122920870780945, 0.49659955501556396, 0.488593190908432, 0.4861938953399658, 0.47119832038879395, 0.46705958247184753, 0.46457964181900024, 0.45660537481307983, 0.44910457730293274, 0.44522085785865784, 0.4571770429611206, 0.4385019540786743, 0.43823519349098206, 0.4432738423347473, 0.4245140850543976, 0.4158971309661865, 0.4380069971084595, 0.4292415380477905, 0.41092565655708313, 0.4139261543750763, 0.43351006507873535, 0.4235716164112091, 0.4035252332687378, 0.41654446721076965, 0.4090940058231354, 0.43002867698669434, 0.4110669791698456, 0.41546979546546936], "val_accuracy": [0.4156666696071625, 0.46533334255218506, 0.6499999761581421, 0.6859999895095825, 0.7210000157356262, 0.7353333234786987, 0.7459999918937683, 0.7476666569709778, 0.7603333592414856, 0.7573333382606506, 0.762666642665863, 0.7806666493415833, 0.7943333387374878, 0.7906666398048401, 0.7923333048820496, 0.7976666688919067, 0.8040000200271606, 0.8090000152587891, 0.8143333196640015, 0.8109999895095825, 0.8209999799728394, 0.8216666579246521, 0.8180000185966492, 0.8236666917800903, 0.8259999752044678, 0.8286666870117188, 0.8343333601951599, 0.8349999785423279, 0.8343333601951599, 0.8353333473205566, 0.8410000205039978, 0.8433333039283752, 0.8500000238418579, 0.8460000157356262, 0.8489999771118164, 0.8479999899864197, 0.8496666550636292, 0.8556666374206543, 0.8576666712760925, 0.8586666584014893, 0.8576666712760925, 0.8606666922569275, 0.8573333621025085, 0.859666645526886, 0.8539999723434448, 0.859333336353302, 0.8603333234786987]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8482857346534729, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.292344808578491, 2.187809944152832, 1.7722893953323364, 1.3261539936065674, 1.0808942317962646, 0.9208269715309143, 0.8425250053405762, 0.8077157735824585, 0.7554797530174255, 0.7362895607948303, 0.6988277435302734, 0.6760179400444031, 0.65081787109375, 0.6236244440078735, 0.6116713881492615, 0.5912661552429199, 0.571560800075531, 0.5701195597648621, 0.5610257983207703, 0.5338725447654724, 0.5399196147918701, 0.5189324617385864, 0.5152537822723389, 0.5027273893356323, 0.5016968250274658, 0.4828093945980072, 0.48345229029655457, 0.47555574774742126, 0.4557945728302002, 0.4567149877548218, 0.4447084665298462, 0.4339398443698883, 0.43403393030166626, 0.42363283038139343, 0.41374266147613525, 0.40435466170310974, 0.40396976470947266, 0.3956144154071808, 0.39136648178100586, 0.3877054452896118], "accuracy": [0.1282525360584259, 0.32360321283340454, 0.4365341365337372, 0.5476158857345581, 0.6330735683441162, 0.6676793098449707, 0.691850483417511, 0.7000396251678467, 0.7116629481315613, 0.7202483415603638, 0.7317395210266113, 0.7489103078842163, 0.7479857206344604, 0.7688548564910889, 0.767930269241333, 0.7724210619926453, 0.7803460359573364, 0.7860256433486938, 0.7869502305984497, 0.8005547523498535, 0.8010830879211426, 0.8063663840293884, 0.8063663840293884, 0.811649739742279, 0.8127063512802124, 0.8166688680648804, 0.8170651197433472, 0.8198388814926147, 0.8317263126373291, 0.8244617581367493, 0.8310658931732178, 0.8338396549224854, 0.8403117060661316, 0.8446704745292664, 0.8467837572097778, 0.8485008478164673, 0.8474441766738892, 0.8490291833877563, 0.8481045961380005, 0.8466516733169556], "val_loss": [2.245846748352051, 2.017681360244751, 1.1459578275680542, 0.8890587687492371, 0.7757227420806885, 0.7348806858062744, 0.7082989811897278, 0.6559725403785706, 0.6376792788505554, 0.6109628081321716, 0.5812444686889648, 0.5608447194099426, 0.5480268001556396, 0.539930522441864, 0.5292856693267822, 0.5106043815612793, 0.5144414901733398, 0.5028728246688843, 0.49649447202682495, 0.4905838072299957, 0.47923892736434937, 0.47906267642974854, 0.48319336771965027, 0.4678501784801483, 0.4539690315723419, 0.46929991245269775, 0.45390239357948303, 0.4517621397972107, 0.4619031846523285, 0.4512064754962921, 0.44273799657821655, 0.44084620475769043, 0.4271816313266754, 0.4260077178478241, 0.41826900839805603, 0.4328620731830597, 0.43018922209739685, 0.4177740216255188, 0.41760867834091187, 0.41706588864326477], "val_accuracy": [0.406333327293396, 0.4830000102519989, 0.6420000195503235, 0.6923333406448364, 0.7170000076293945, 0.7236666679382324, 0.7416666746139526, 0.7519999742507935, 0.7663333415985107, 0.7710000276565552, 0.7766666412353516, 0.781000018119812, 0.7953333258628845, 0.7953333258628845, 0.7950000166893005, 0.8063333630561829, 0.7990000247955322, 0.8146666884422302, 0.8159999847412109, 0.8180000185966492, 0.8190000057220459, 0.8169999718666077, 0.8236666917800903, 0.8236666917800903, 0.8293333053588867, 0.8326666951179504, 0.8339999914169312, 0.8336666822433472, 0.8343333601951599, 0.8360000252723694, 0.8433333039283752, 0.846666693687439, 0.8516666889190674, 0.8496666550636292, 0.8523333072662354, 0.8513333201408386, 0.8473333120346069, 0.8486666679382324, 0.8503333330154419, 0.8513333201408386]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [58, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 6, 3, 6, 0], [0, 3, 5, 7], [0, 58], [0, 0, 0, 0, 1, 1], [0, 6, 8, 8], [1, 5], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 10, 6, 4, 1, 6, 4, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), sigma), tf.math.divide_no_nan(tf.math.negative(grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(alpha)), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10355303436517715, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 3, 0, 3], [83, 99, 5], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 2, 7, 3, 9, 4, 6, 8, 4, 6, 9, 6, 3, 5, 8, 2, 6, 6, 9, 9, 0, 8], [5, 3, 3, 5, 2, 2, 1, 1, 5, 3], [25, 77, 87, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 4, 3, 0, 1, 0, 3, 6, 9], [6, 0, 4, 1, 2], [0, 58], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [0, 8, 4, 6, 8, 8, 3, 7, 0, 2, 6, 8, 2, 3, 1, 2, 2, 6, 2, 1, 5, 7, 8, 3, 0, 6, 6], [1, 6, 1, 5, 2, 3, 1, 6, 7, 3, 5, 4, 1, 0, 3, 1, 0, 3, 1], [0, 99]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 33, 23, 10, 4, 15, 10, 5, 2, 46, 27, 19, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.multiply(grad, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.pow(tf.math.divide_no_nan(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.sqrt(beta)), alpha)), alpha))))), tf.math.add(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(grad, tf.math.negative(tf.math.subtract(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad))), tf.math.multiply(tf.math.divide_no_nan(alpha, beta), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.pow(tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(grad, tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.math.add(tf.math.multiply(grad, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.square(sigma), alpha), tf.math.add(grad, grad)), tf.math.sqrt(sigma)), grad)), tf.math.multiply(grad, tf.math.negative(alpha)))), tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), sigma))))), tf.math.divide_no_nan(alpha, tf.constant(1.0, shape=shape, dtype=tf.float32))), sigma))), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 6, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 0], [0, 1, 2, 9], [0, 3, 3], [0, 82], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [1, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 6, 4, 2, 2, 7, 4, 3, 2, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10593052208423615, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 2, 1, 3, 1, 0, 8, 0, 2, 9, 7, 3, 5, 2], [2, 3, 3, 5, 2, 2, 1, 3, 0], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [1, 1], [5], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 3, 6, 3, 3, 0, 7, 4, 3, 2, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(beta, tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [54790.2421875, 7801728.0, 138684960.0, 950850688.0, 4192943616.0, 13312116736.0], "accuracy": [0.09774138033390045, 0.09813763201236725, 0.10342095047235489, 0.10196803510189056, 0.1022322028875351, 0.09813763201236725], "val_loss": [558677.1875, 29717020.0, 315819712.0, 1705638528.0, 6330029568.0, 18501019648.0], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]