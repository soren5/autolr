[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.87028568983078, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.293152332305908, 2.188211679458618, 1.7608391046524048, 1.3252723217010498, 1.078700065612793, 0.9118653535842896, 0.8385469913482666, 0.8101076483726501, 0.761439859867096, 0.7347464561462402, 0.7123180627822876, 0.6777012944221497, 0.643057107925415, 0.6314175724983215, 0.6165218353271484, 0.5910436511039734, 0.5896372199058533, 0.5740755796432495, 0.5635482668876648, 0.5487987995147705, 0.5324008464813232, 0.5215209126472473, 0.5187078714370728, 0.4956742227077484, 0.4883137345314026, 0.48198309540748596, 0.46235164999961853, 0.45480015873908997, 0.447836309671402, 0.4470028579235077, 0.443393737077713, 0.43302857875823975, 0.41960757970809937, 0.4146021604537964, 0.40606892108917236, 0.4035026431083679, 0.39098310470581055, 0.3869178295135498, 0.3887503743171692, 0.3851431906223297, 0.357649028301239, 0.3731098771095276, 0.36437520384788513, 0.3550907075405121, 0.3465290069580078, 0.3442644476890564, 0.33952003717422485], "accuracy": [0.1302337795495987, 0.3335094451904297, 0.44168537855148315, 0.5506538152694702, 0.6394135355949402, 0.6646413803100586, 0.6939638257026672, 0.6980583667755127, 0.7009642124176025, 0.7201162576675415, 0.7341170310974121, 0.7364945411682129, 0.7518161535263062, 0.761590301990509, 0.7574957013130188, 0.7736098170280457, 0.7821952104568481, 0.7858935594558716, 0.7893276810646057, 0.7922335267066956, 0.7921014428138733, 0.793422281742096, 0.7998943328857422, 0.8062343001365662, 0.8107251524925232, 0.8129705190658569, 0.8227446675300598, 0.8222163319587708, 0.8284242749214172, 0.832650899887085, 0.8330471515655518, 0.8343679904937744, 0.8424250483512878, 0.8404437899589539, 0.8400475382804871, 0.846387505531311, 0.8495575189590454, 0.8515387773513794, 0.8510104417800903, 0.8515387773513794, 0.8625016212463379, 0.8537842035293579, 0.8618412613868713, 0.8614450097084045, 0.8644828796386719, 0.8698983192443848, 0.8636903762817383], "val_loss": [2.246065378189087, 2.014096260070801, 1.1289830207824707, 0.9094581604003906, 0.7623652219772339, 0.7203189134597778, 0.6759260296821594, 0.6583852767944336, 0.651975691318512, 0.626010000705719, 0.6004306674003601, 0.5730299353599548, 0.5544441938400269, 0.5551794171333313, 0.5469516515731812, 0.5399172902107239, 0.5263733863830566, 0.5277446508407593, 0.5256025195121765, 0.5122920870780945, 0.49659955501556396, 0.488593190908432, 0.4861938953399658, 0.47119832038879395, 0.46705958247184753, 0.46457964181900024, 0.45660537481307983, 0.44910457730293274, 0.44522085785865784, 0.4571770429611206, 0.4385019540786743, 0.43823519349098206, 0.4432738423347473, 0.4245140850543976, 0.4158971309661865, 0.4380069971084595, 0.4292415380477905, 0.41092565655708313, 0.4139261543750763, 0.43351006507873535, 0.4235716164112091, 0.4035252332687378, 0.41654446721076965, 0.4090940058231354, 0.43002867698669434, 0.4110669791698456, 0.41546979546546936], "val_accuracy": [0.4156666696071625, 0.46533334255218506, 0.6499999761581421, 0.6859999895095825, 0.7210000157356262, 0.7353333234786987, 0.7459999918937683, 0.7476666569709778, 0.7603333592414856, 0.7573333382606506, 0.762666642665863, 0.7806666493415833, 0.7943333387374878, 0.7906666398048401, 0.7923333048820496, 0.7976666688919067, 0.8040000200271606, 0.8090000152587891, 0.8143333196640015, 0.8109999895095825, 0.8209999799728394, 0.8216666579246521, 0.8180000185966492, 0.8236666917800903, 0.8259999752044678, 0.8286666870117188, 0.8343333601951599, 0.8349999785423279, 0.8343333601951599, 0.8353333473205566, 0.8410000205039978, 0.8433333039283752, 0.8500000238418579, 0.8460000157356262, 0.8489999771118164, 0.8479999899864197, 0.8496666550636292, 0.8556666374206543, 0.8576666712760925, 0.8586666584014893, 0.8576666712760925, 0.8606666922569275, 0.8573333621025085, 0.859666645526886, 0.8539999723434448, 0.859333336353302, 0.8603333234786987]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8545714020729065, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2938148975372314, 2.1907777786254883, 1.7853670120239258, 1.3604607582092285, 1.0358928442001343, 0.9014521837234497, 0.833681583404541, 0.8111481666564941, 0.7506310939788818, 0.7350143790245056, 0.6960647702217102, 0.6710031628608704, 0.6393111944198608, 0.6209678053855896, 0.6095110774040222, 0.5872222781181335, 0.58565753698349, 0.5601770281791687, 0.5592225790023804, 0.5502495169639587, 0.5384558439254761, 0.5312497615814209, 0.5256183743476868, 0.5098389983177185, 0.49842891097068787, 0.5013079047203064, 0.4725877344608307, 0.467659592628479, 0.47263896465301514, 0.44515880942344666, 0.44454705715179443, 0.4347914755344391, 0.42498579621315, 0.42342373728752136, 0.40563201904296875, 0.41262999176979065, 0.40251559019088745, 0.38913169503211975, 0.3830810785293579, 0.38041985034942627, 0.37234869599342346, 0.36274784803390503, 0.35208815336227417, 0.35580915212631226, 0.343237966299057, 0.3517173230648041, 0.3370925784111023, 0.32048457860946655, 0.32428306341171265], "accuracy": [0.12851670384407043, 0.33324527740478516, 0.4287412464618683, 0.5395588278770447, 0.6445648074150085, 0.667811393737793, 0.6988508701324463, 0.7021529674530029, 0.7168141603469849, 0.7144366502761841, 0.735569953918457, 0.7450799345970154, 0.7514199018478394, 0.7660810947418213, 0.769911527633667, 0.7775723338127136, 0.7800818681716919, 0.785101056098938, 0.7812706232070923, 0.7950072884559631, 0.7913089394569397, 0.793950617313385, 0.7980451583862305, 0.8021397590637207, 0.8064984679222107, 0.8082155585289001, 0.8115176558494568, 0.8185180425643921, 0.8137630224227905, 0.821820080280304, 0.8249900937080383, 0.8322546482086182, 0.8352925777435303, 0.8368775844573975, 0.844010055065155, 0.8453308939933777, 0.8429533839225769, 0.8482366800308228, 0.8532558679580688, 0.8549728989601135, 0.8541803956031799, 0.857218325138092, 0.8617091774940491, 0.8602562546730042, 0.8693699836730957, 0.8626337051391602, 0.8632941246032715, 0.8705587387084961, 0.8725399374961853], "val_loss": [2.248011827468872, 2.030276298522949, 1.1612095832824707, 0.8796987533569336, 0.7608084082603455, 0.713887631893158, 0.6763468980789185, 0.6578757166862488, 0.6290300488471985, 0.6188750267028809, 0.6024080514907837, 0.5855872631072998, 0.5740904808044434, 0.5516998171806335, 0.5551952123641968, 0.5449252724647522, 0.5370578765869141, 0.5308319330215454, 0.5209639668464661, 0.5107492804527283, 0.4964310824871063, 0.5111008882522583, 0.5003218054771423, 0.4866575598716736, 0.47863447666168213, 0.4806464910507202, 0.4623976945877075, 0.45538851618766785, 0.4558682441711426, 0.4565124809741974, 0.4470520317554474, 0.44034647941589355, 0.43885159492492676, 0.44848641753196716, 0.45192790031433105, 0.44024962186813354, 0.433902382850647, 0.44212841987609863, 0.4387006163597107, 0.43772223591804504, 0.4334283471107483, 0.436909943819046, 0.4376698136329651, 0.43897053599357605, 0.4478597939014435, 0.4329492151737213, 0.4242607057094574, 0.42079097032546997, 0.43207478523254395], "val_accuracy": [0.4076666533946991, 0.4546666741371155, 0.6466666460037231, 0.6886666417121887, 0.7113333344459534, 0.7253333330154419, 0.7403333187103271, 0.7423333525657654, 0.7543333172798157, 0.7620000243186951, 0.7643333077430725, 0.7663333415985107, 0.781000018119812, 0.7870000004768372, 0.7963333129882812, 0.7910000085830688, 0.7983333468437195, 0.7993333339691162, 0.8023333549499512, 0.8096666932106018, 0.8240000009536743, 0.8143333196640015, 0.8096666932106018, 0.8349999785423279, 0.8263333439826965, 0.8299999833106995, 0.831333339214325, 0.8346666693687439, 0.8363333344459534, 0.8403333425521851, 0.8450000286102295, 0.8443333506584167, 0.8463333249092102, 0.8426666855812073, 0.8503333330154419, 0.8516666889190674, 0.8473333120346069, 0.8576666712760925, 0.8583333492279053, 0.8489999771118164, 0.8606666922569275, 0.8603333234786987, 0.8633333444595337, 0.8653333187103271, 0.8606666922569275, 0.8566666841506958, 0.8606666922569275, 0.862333357334137, 0.8650000095367432]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [3, 1, 4, 1, 3, 7, 4, 3, 6, 3, 4, 0, 9, 9, 1], [0, 0, 1, 0, 2, 2, 0, 3, 1, 1, 3], [70, 99, 27, 11, 0, 63], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 1, 0, 1, 1, 1], [0, 0, 4, 4], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.subtract(tf.math.pow(tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.pow(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), grad)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(alpha, alpha)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}, "mapping_values": [1, 26, 15, 11, 6, 6, 3, 3, 1, 3, 2, 1, 1, 2, 1, 1, 0], "tree_depth": 22}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 3, 1, 3, 8, 6, 5, 7, 7, 5, 8], [0, 0, 3, 0, 2, 3, 3, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 3], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [10, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 12, 8, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), grad), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(grad, tf.math.add(tf.math.square(tf.math.sqrt(grad)), grad))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3, 8, 4], [0, 0, 3, 2, 2, 3], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [81, 58], [0, 1, 0, 1], [4, 5], [1, 4], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 2, 6, 3, 3, 1, 7, 4, 3, 2, 4, 2, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)), grad), tf.math.pow(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.square(grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 0, 1, 1, 1], [0, 1, 2, 5], [0, 3, 1], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 6, 1, 7, 0, 6, 2, 8, 3, 3, 3, 9], [1, 1, 2, 7, 6, 1, 1, 6], [0]], "fitness": -0.0908571407198906, "mapping_values": [1, 1, 0, 1, 1, 7, 4, 3, 1, 7, 4, 3, 2, 20, 12, 8, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(alpha, alpha), tf.math.add(tf.math.negative(tf.math.divide_no_nan(beta, tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.multiply(grad, tf.math.multiply(grad, alpha)), tf.constant(0.0, shape=shape, dtype=tf.float32))), alpha))), grad)))", "other_info": {"loss": [2.3113698959350586, 2.3092901706695557, 2.3097612857818604, 2.3104805946350098, 2.3089942932128906, 2.309983491897583], "accuracy": [0.0874389111995697, 0.09113723784685135, 0.09245806187391281, 0.09153348207473755, 0.09615638852119446, 0.09153348207473755], "val_loss": [2.3086585998535156, 2.3086585998535156, 2.3086585998535156, 2.3086585998535156, 2.3086585998535156, 2.3086585998535156], "val_accuracy": [0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763]}}]