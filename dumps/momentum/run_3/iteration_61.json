[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8654285669326782, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.294304847717285, 2.192103624343872, 1.7857767343521118, 1.3607056140899658, 1.099927544593811, 0.9389083981513977, 0.8470690846443176, 0.8454976081848145, 0.7741630673408508, 0.7616719007492065, 0.7103725075721741, 0.6974170207977295, 0.6608983278274536, 0.6338894963264465, 0.6045244932174683, 0.6092884540557861, 0.5888407826423645, 0.5741831064224243, 0.563585638999939, 0.5488932132720947, 0.5453349947929382, 0.5305578112602234, 0.5258418321609497, 0.4943788945674896, 0.49320778250694275, 0.48580384254455566, 0.48067429661750793, 0.4796926975250244, 0.46376150846481323, 0.4548250734806061, 0.4405079782009125, 0.44322729110717773, 0.4334387183189392, 0.42063289880752563, 0.4331969618797302, 0.4135703444480896, 0.4118955731391907, 0.401089072227478, 0.40325725078582764, 0.3918025493621826, 0.3675272762775421, 0.3550134301185608], "accuracy": [0.12376172095537186, 0.33139610290527344, 0.4333641529083252, 0.5429930090904236, 0.6304318904876709, 0.6565843224525452, 0.6873596906661987, 0.6959450244903564, 0.7008321285247803, 0.7029454708099365, 0.7243428826332092, 0.7333245277404785, 0.7469290494918823, 0.7605336308479309, 0.7688548564910889, 0.7675340175628662, 0.7836481332778931, 0.7861577272415161, 0.7881389260292053, 0.7940827012062073, 0.7915731072425842, 0.7948752045631409, 0.7977809906005859, 0.809140145778656, 0.8096684813499451, 0.8149517774581909, 0.8144234418869019, 0.8166688680648804, 0.828292191028595, 0.83119797706604, 0.8337075710296631, 0.8339717388153076, 0.8399154543876648, 0.8356888294219971, 0.837141752243042, 0.8437458872795105, 0.8426892161369324, 0.8461233377456665, 0.8475762605667114, 0.8496896028518677, 0.8599920868873596, 0.8654074668884277], "val_loss": [2.246436834335327, 2.0250775814056396, 1.1393718719482422, 0.8497561812400818, 0.7639734148979187, 0.7092989683151245, 0.6813888549804688, 0.6556240916252136, 0.6388952732086182, 0.6047614812850952, 0.5794531106948853, 0.5539135932922363, 0.5436311960220337, 0.5358590483665466, 0.5284149050712585, 0.5143079161643982, 0.5151547193527222, 0.5093623995780945, 0.5067101716995239, 0.49943530559539795, 0.49699893593788147, 0.496021032333374, 0.4861862063407898, 0.47826677560806274, 0.4843396842479706, 0.4685012996196747, 0.456290602684021, 0.45540153980255127, 0.44835788011550903, 0.4463074505329132, 0.4429974853992462, 0.4418887495994568, 0.4285948574542999, 0.42980968952178955, 0.43589335680007935, 0.4238627552986145, 0.4277287721633911, 0.4350525736808777, 0.42249366641044617, 0.42642343044281006, 0.422536164522171, 0.4140663146972656], "val_accuracy": [0.429666668176651, 0.46966665983200073, 0.6463333368301392, 0.7036666870117188, 0.7236666679382324, 0.7260000109672546, 0.7456666827201843, 0.749666690826416, 0.7586666941642761, 0.7710000276565552, 0.7710000276565552, 0.7903333306312561, 0.7860000133514404, 0.7943333387374878, 0.7983333468437195, 0.7973333597183228, 0.8159999847412109, 0.8153333067893982, 0.8083333373069763, 0.8173333406448364, 0.8186666369438171, 0.8136666417121887, 0.8230000138282776, 0.8309999704360962, 0.8230000138282776, 0.8346666693687439, 0.8356666564941406, 0.8413333296775818, 0.8420000076293945, 0.8433333039283752, 0.8446666598320007, 0.843666672706604, 0.8519999980926514, 0.8560000061988831, 0.8539999723434448, 0.859666645526886, 0.8600000143051147, 0.859000027179718, 0.8576666712760925, 0.8560000061988831, 0.8569999933242798, 0.8560000061988831]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8562856912612915, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2925186157226562, 2.1905486583709717, 1.7736546993255615, 1.3544751405715942, 1.076087474822998, 0.9354168772697449, 0.8781831860542297, 0.8176032304763794, 0.7803152799606323, 0.7432578206062317, 0.7094161510467529, 0.6900759935379028, 0.647840142250061, 0.6313815116882324, 0.6079784035682678, 0.5972318649291992, 0.583625853061676, 0.5637941956520081, 0.549860954284668, 0.5524015426635742, 0.5469872951507568, 0.5416138768196106, 0.5114153623580933, 0.5101156234741211, 0.5139674544334412, 0.49286365509033203, 0.49450862407684326, 0.4851714074611664, 0.46766892075538635, 0.47203126549720764, 0.45548030734062195, 0.43961793184280396, 0.4433686435222626, 0.426416277885437, 0.41657862067222595, 0.41065824031829834, 0.4051683843135834, 0.3959433436393738, 0.3917434513568878, 0.3846738040447235, 0.38305771350860596, 0.3809475302696228], "accuracy": [0.1348566859960556, 0.3267732262611389, 0.44208163022994995, 0.5428609251976013, 0.6391493678092957, 0.6523576974868774, 0.6877558827400208, 0.700171709060669, 0.700700044631958, 0.7244749665260315, 0.7316074371337891, 0.7305507659912109, 0.7479857206344604, 0.7580240368843079, 0.7708360552787781, 0.7736098170280457, 0.7792893648147583, 0.7862898111343384, 0.7852331399917603, 0.7886672616004944, 0.7930260300636292, 0.796328067779541, 0.8099326491355896, 0.8075551390647888, 0.8067626357078552, 0.8100647330284119, 0.8131026029586792, 0.8171972036361694, 0.8224804997444153, 0.8255184292793274, 0.8219521641731262, 0.8304054737091064, 0.8347642421722412, 0.8338396549224854, 0.841500461101532, 0.8491612672805786, 0.850350022315979, 0.852331280708313, 0.8535200357437134, 0.852859616279602, 0.8533879518508911, 0.8549728989601135], "val_loss": [2.2469472885131836, 2.0222764015197754, 1.156893253326416, 0.8893392086029053, 0.7948079705238342, 0.7239450812339783, 0.7148923873901367, 0.6712755560874939, 0.6531381607055664, 0.6433759927749634, 0.579349160194397, 0.5548929572105408, 0.5381097793579102, 0.5267670154571533, 0.5319939255714417, 0.5203614830970764, 0.51596599817276, 0.511384904384613, 0.5107476115226746, 0.4947136640548706, 0.5039716958999634, 0.49809154868125916, 0.46498534083366394, 0.4728550910949707, 0.47354111075401306, 0.4734276831150055, 0.46630746126174927, 0.45311668515205383, 0.4478907585144043, 0.4252794682979584, 0.4174075424671173, 0.4318539500236511, 0.43964093923568726, 0.42290014028549194, 0.4017872214317322, 0.40118643641471863, 0.4007495045661926, 0.41019871830940247, 0.41076090931892395, 0.4105619192123413, 0.4119996428489685, 0.4027705788612366], "val_accuracy": [0.4243333339691162, 0.45266667008399963, 0.6336666941642761, 0.6896666884422302, 0.7153333425521851, 0.7243333458900452, 0.7243333458900452, 0.7440000176429749, 0.753333330154419, 0.7583333253860474, 0.7663333415985107, 0.781333327293396, 0.7910000085830688, 0.793666660785675, 0.7886666655540466, 0.7950000166893005, 0.7983333468437195, 0.793666660785675, 0.8036666512489319, 0.809333324432373, 0.8023333549499512, 0.812666654586792, 0.8270000219345093, 0.8263333439826965, 0.8256666660308838, 0.8240000009536743, 0.8243333101272583, 0.8293333053588867, 0.8339999914169312, 0.8413333296775818, 0.8420000076293945, 0.8396666646003723, 0.8450000286102295, 0.8426666855812073, 0.8513333201408386, 0.8510000109672546, 0.8550000190734863, 0.8489999771118164, 0.8493333458900452, 0.8489999771118164, 0.8489999771118164, 0.8500000238418579]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 7, 3, 1, 3, 9], [0, 0, 2, 0, 1], [83, 99, 27, 43], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 1, 1, 0, 1, 1], [0, 0, 4, 3], [0, 0, 3], [0, 41], [0, 1, 1], [6], [2, 2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 4, 6, 3, 3, 1, 3, 2, 1, 1, 3, 1, 2, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, beta)", "other_info": {"loss": [2.303152322769165, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0], [0, 1, 3, 7, 7], [0, 0, 1, 0, 2], [83, 99, 6], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 2, 6, 5, 3, 7, 6], [0, 3, 3, 5, 4, 1, 4], [80], [0, 0, 0, 1, 1, 1, 0], [0, 1, 4, 3], [0, 0, 4], [0, 58], [1, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 15, 8, 7, 1, 6, 3, 3, 2, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.divide_no_nan(tf.math.square(tf.math.multiply(grad, tf.math.add(tf.math.divide_no_nan(grad, grad), alpha))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3032033443450928, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09919429570436478, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 3, 1, 3, 4, 9, 0, 4, 3, 2], [0, 2, 1, 2, 2, 3, 2, 1], [83, 99, 27], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 1, 8, 3, 4, 4, 4, 0, 5, 1, 6, 5, 8, 3, 7, 1, 2, 3, 6, 1, 7, 1, 1, 9, 3, 2, 3, 6, 2, 9, 5, 0, 5, 1, 0, 2, 3, 5, 1, 2, 2, 2, 3, 3, 6, 6, 7, 7, 7, 2, 6, 6, 0, 1, 4, 4, 6, 7, 2, 6, 8, 1, 2, 7, 1, 6, 2, 0, 9, 0, 4, 4, 7, 6, 2, 1, 9, 0], [0, 3, 3, 5, 2, 3, 2, 5, 1, 3, 4, 4, 1, 0, 2, 0, 5, 3, 0, 1, 0, 0, 3, 2, 4, 1, 5, 2, 2, 4, 2, 4, 4, 3, 3, 4, 3, 2, 1, 2, 3, 3, 3, 2, 3, 0, 0, 0, 4, 5, 5, 3, 4, 2, 5, 2, 3, 4], [0, 63, 58, 85, 2, 19, 15, 80, 31, 70, 86, 84, 41], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 9], [0, 0, 4], [0, 58], [0, 1], [0], [4], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 11, 8, 2, 138, 80, 58, 13, 5, 4, 1, 2, 2, 1, 1, 0], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.pow(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), grad), alpha), grad), tf.math.negative(tf.math.pow(grad, tf.math.multiply(grad, tf.math.add(grad, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.multiply(grad, tf.math.pow(tf.math.pow(grad, tf.math.pow(tf.math.negative(grad), tf.math.square(tf.math.subtract(beta, grad)))), tf.math.divide_no_nan(beta, grad)))), alpha), tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(grad, grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(grad, alpha), tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.math.add(tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.add(grad, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.square(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))), alpha), tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.negative(tf.math.add(tf.math.multiply(beta, tf.math.square(tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.add(tf.math.multiply(alpha, tf.math.multiply(tf.math.divide_no_nan(grad, beta), beta)), grad), tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.add(grad, tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.subtract(tf.math.add(tf.math.add(tf.math.subtract(grad, grad), grad), beta), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.pow(tf.math.pow(beta, grad), grad)))))), grad), tf.math.add(tf.math.divide_no_nan(beta, grad), tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad))), grad), grad)), grad), beta), grad)), beta)))), grad))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09470347315073013, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 1, 7, 1, 3], [0, 0, 1, 0, 2], [27, 99, 27], [0, 0, 1, 0, 0, 1, 1, 1], [0, 4, 2, 1], [0, 3, 3, 3], [0], [0, 1, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [0], [0]], "fitness": -0.08971428871154785, "mapping_values": [1, 6, 3, 3, 2, 8, 4, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(grad, grad), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.309967041015625, 2.3102524280548096, 2.308837652206421, 2.3099892139434814, 2.3095831871032715, 2.309767007827759], "accuracy": [0.09140139818191528, 0.09140139818191528, 0.09351472556591034, 0.09417514503002167, 0.09496764093637466, 0.09377889335155487], "val_loss": [2.3080368041992188, 2.3080368041992188, 2.3080368041992188, 2.3080368041992188, 2.3080368041992188, 2.3080368041992188], "val_accuracy": [0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763]}}]