[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8691428303718567, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2925729751586914, 2.187127113342285, 1.7641993761062622, 1.3437129259109497, 1.066947102546692, 0.9399238228797913, 0.83198082447052, 0.8183948993682861, 0.7502648234367371, 0.7335941791534424, 0.6953815221786499, 0.6771264672279358, 0.6458533406257629, 0.631897509098053, 0.6137565970420837, 0.6143407225608826, 0.5831570029258728, 0.5775274634361267, 0.5659123659133911, 0.5445622801780701, 0.5250616073608398, 0.5268460512161255, 0.5136592984199524, 0.5071079730987549, 0.4892207384109497, 0.4756522476673126, 0.4633692502975464, 0.4587489366531372, 0.4412362575531006, 0.43845537304878235, 0.43738627433776855, 0.4113951027393341, 0.40735265612602234, 0.4034321904182434, 0.3907977044582367, 0.3785591423511505, 0.377972811460495, 0.38382214307785034, 0.36559638381004333, 0.35672247409820557, 0.3628215789794922, 0.3511592745780945, 0.33784613013267517], "accuracy": [0.13049794733524323, 0.32901862263679504, 0.436930388212204, 0.5461629629135132, 0.6320168972015381, 0.6583014130592346, 0.6890767216682434, 0.7069079279899597, 0.7117950320243835, 0.7176066637039185, 0.7407211661338806, 0.739928662776947, 0.7531369924545288, 0.7646281719207764, 0.7614582180976868, 0.7609298825263977, 0.7799497842788696, 0.7783648371696472, 0.7895918488502502, 0.7954035401344299, 0.8005547523498535, 0.7951393723487854, 0.8050455451011658, 0.8109893202781677, 0.8108572363853455, 0.8164047002792358, 0.8216879963874817, 0.8216879963874817, 0.8330471515655518, 0.8359529972076416, 0.8364813327789307, 0.843481719493866, 0.8486329317092896, 0.8481045961380005, 0.856689989566803, 0.8578787446022034, 0.8565579056739807, 0.8564258217811584, 0.8594637513160706, 0.8639545440673828, 0.863558292388916, 0.8665962219238281, 0.8685774803161621], "val_loss": [2.24591326713562, 2.0144011974334717, 1.1282657384872437, 0.9047408103942871, 0.7838723063468933, 0.7243306636810303, 0.6873480081558228, 0.6663627028465271, 0.6509034633636475, 0.6413266658782959, 0.6253200769424438, 0.5865140557289124, 0.5787449479103088, 0.5782256126403809, 0.5565901398658752, 0.5439684391021729, 0.5274800062179565, 0.5167201161384583, 0.5248816013336182, 0.5196475982666016, 0.5039010643959045, 0.5016937851905823, 0.5016798973083496, 0.49514147639274597, 0.48202112317085266, 0.4754898250102997, 0.464834064245224, 0.46113210916519165, 0.45827656984329224, 0.4549710154533386, 0.46381810307502747, 0.44992658495903015, 0.4331768751144409, 0.4280094504356384, 0.43140140175819397, 0.4241963326931, 0.418281614780426, 0.41222453117370605, 0.42213916778564453, 0.4112643897533417, 0.4112035036087036, 0.42114537954330444, 0.41954028606414795], "val_accuracy": [0.4283333420753479, 0.47099998593330383, 0.6426666378974915, 0.6863333582878113, 0.7103333473205566, 0.7203333377838135, 0.734000027179718, 0.746666669845581, 0.7490000128746033, 0.7546666860580444, 0.7580000162124634, 0.781000018119812, 0.7796666622161865, 0.781000018119812, 0.7850000262260437, 0.7883333563804626, 0.7990000247955322, 0.8116666674613953, 0.7946666479110718, 0.8050000071525574, 0.8193333148956299, 0.8140000104904175, 0.8203333616256714, 0.8286666870117188, 0.8199999928474426, 0.8236666917800903, 0.8259999752044678, 0.8299999833106995, 0.8379999995231628, 0.8353333473205566, 0.8353333473205566, 0.8403333425521851, 0.8450000286102295, 0.847000002861023, 0.8489999771118164, 0.8513333201408386, 0.8573333621025085, 0.8603333234786987, 0.8553333282470703, 0.8576666712760925, 0.8569999933242798, 0.8526666760444641, 0.8600000143051147]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8537142872810364, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.293588161468506, 2.1892449855804443, 1.7722591161727905, 1.379886269569397, 1.0760436058044434, 0.9552900791168213, 0.8631706833839417, 0.8236426115036011, 0.7712020874023438, 0.7279300689697266, 0.7053987383842468, 0.6852036118507385, 0.6696066856384277, 0.6361163258552551, 0.6185644268989563, 0.5905355215072632, 0.5878938436508179, 0.57108473777771, 0.5579681992530823, 0.5344078540802002, 0.528045654296875, 0.5190309286117554, 0.5006958246231079, 0.5031829476356506, 0.4952317476272583, 0.4806571304798126, 0.46655941009521484, 0.46040982007980347, 0.46333393454551697, 0.44746893644332886, 0.4416019320487976, 0.4323211908340454, 0.41650089621543884, 0.4104452431201935, 0.40964698791503906, 0.39347749948501587, 0.3892603814601898, 0.38337481021881104, 0.3695462644100189, 0.3779813051223755, 0.3604337275028229, 0.3523293733596802], "accuracy": [0.1310262829065323, 0.3257165551185608, 0.43626996874809265, 0.5375775694847107, 0.6283186078071594, 0.6518293619155884, 0.6856426000595093, 0.6911900639533997, 0.7063795924186707, 0.7177387475967407, 0.7362303733825684, 0.7317395210266113, 0.7475894689559937, 0.7609298825263977, 0.7621186375617981, 0.7799497842788696, 0.778232753276825, 0.7821952104568481, 0.7880068421363831, 0.7955356240272522, 0.8005547523498535, 0.8039889335632324, 0.8104609847068787, 0.8104609847068787, 0.8220842480659485, 0.8216879963874817, 0.83119797706604, 0.8289526104927063, 0.8261788487434387, 0.8327829837799072, 0.830669641494751, 0.8355567455291748, 0.8428213000297546, 0.8475762605667114, 0.8455950617790222, 0.8506141901016235, 0.8558974862098694, 0.8588033318519592, 0.8658037185668945, 0.857218325138092, 0.8625016212463379, 0.8614450097084045], "val_loss": [2.2458131313323975, 2.020467519760132, 1.1514954566955566, 0.8967644572257996, 0.7944216132164001, 0.7343239784240723, 0.7012776732444763, 0.6773888468742371, 0.6452118754386902, 0.6185407042503357, 0.5868000388145447, 0.5608780980110168, 0.5450586080551147, 0.5421373844146729, 0.5330051779747009, 0.5133419036865234, 0.4989853799343109, 0.49238041043281555, 0.48419392108917236, 0.48091739416122437, 0.4721301794052124, 0.4694187045097351, 0.44893425703048706, 0.44991445541381836, 0.4469637870788574, 0.4459194242954254, 0.4397313594818115, 0.435975581407547, 0.4263916015625, 0.423684298992157, 0.41421598196029663, 0.42281031608581543, 0.4163154363632202, 0.4087466895580292, 0.4003165662288666, 0.3991847634315491, 0.39684492349624634, 0.3979998826980591, 0.4036473333835602, 0.4102902114391327, 0.40957942605018616, 0.41233962774276733], "val_accuracy": [0.43033334612846375, 0.47833332419395447, 0.6499999761581421, 0.6909999847412109, 0.7223333120346069, 0.7210000157356262, 0.7333333492279053, 0.7476666569709778, 0.7459999918937683, 0.7593333125114441, 0.7666666507720947, 0.7873333096504211, 0.7870000004768372, 0.7923333048820496, 0.7963333129882812, 0.8096666932106018, 0.8206666707992554, 0.8236666917800903, 0.8223333358764648, 0.8183333277702332, 0.8276666402816772, 0.8293333053588867, 0.8366666436195374, 0.8450000286102295, 0.8363333344459534, 0.8393333554267883, 0.8446666598320007, 0.8506666421890259, 0.8489999771118164, 0.8473333120346069, 0.8516666889190674, 0.8526666760444641, 0.8569999933242798, 0.8606666922569275, 0.859333336353302, 0.8603333234786987, 0.8659999966621399, 0.8659999966621399, 0.862666666507721, 0.8619999885559082, 0.8629999756813049, 0.8606666922569275]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 6, 1, 3, 8, 1, 6, 1, 5, 6, 0], [0, 0, 1, 0, 2, 0, 0, 2, 1], [83, 99, 27, 81, 78], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 3, 2, 6, 3, 2, 6, 1, 7, 4, 7, 7, 4, 0, 7, 2, 9, 5, 7, 7, 3, 2, 2, 1, 6, 1, 9, 0, 8, 8, 3, 4, 5, 6, 4, 9, 8, 3, 4, 1, 7, 0, 4, 0, 7, 4, 8, 8, 1, 1, 2, 3, 3, 3, 0, 0, 9, 7, 8, 8, 8, 2, 9, 4, 1, 9, 4, 2, 5, 8, 9, 8, 4, 4, 8, 6, 8, 1, 5, 7, 7, 9, 4, 8, 2, 2, 8, 2, 7, 3, 7], [0, 1, 3, 2, 5, 1, 0, 4, 3, 3, 4, 4, 0, 3, 0, 3, 0, 2, 0, 2, 4, 4, 1, 1, 1, 0, 0, 3, 5, 4, 4, 2, 5, 3, 5, 0, 0, 2, 0, 4, 3, 0, 4, 3, 2, 1, 4, 2, 4, 1, 2, 4], [0, 17, 28, 87, 69, 28, 14, 65, 85, 59, 63, 29, 63, 47, 61, 14, 28, 14, 89, 49], [0, 0, 0, 1, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 12, 9, 5, 144, 92, 52, 20, 5, 3, 2, 2, 2, 1, 1, 0], "tree_depth": 66, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.divide_no_nan(grad, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.square(tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), grad), tf.math.divide_no_nan(tf.math.multiply(beta, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(grad, alpha), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.pow(tf.math.add(tf.math.add(grad, grad), tf.math.pow(tf.math.negative(tf.math.add(tf.math.add(grad, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.square(grad))), tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.subtract(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), grad), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(tf.math.negative(tf.math.pow(beta, tf.math.negative(tf.math.add(grad, tf.math.pow(tf.math.sqrt(grad), tf.math.sqrt(alpha)))))), alpha), tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.multiply(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(tf.math.negative(tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(grad), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), grad)))))), tf.math.pow(grad, tf.math.subtract(grad, beta))), grad))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, grad)))))), tf.math.add(tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), beta), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.math.square(tf.math.add(tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), grad), tf.math.pow(tf.math.sqrt(grad), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.add(grad, beta)))), tf.math.sqrt(tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(beta, grad), alpha))))), beta), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [7, 7, 3, 1, 3, 8], [0, 0, 1, 0, 2, 2], [83, 99, 27], [0, 1, 1, 0, 1, 1], [0, 1, 0], [0, 4, 3], [0], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 4, 3, 4], [0, 0, 4, 5], [0, 58], [1, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 3, 2, 1, 1, 1, 9, 5, 4, 2, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.sqrt(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08440100401639938, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 1, 3, 1, 3, 7, 9], [0, 1, 1, 0, 2], [83, 99, 27], [0, 1, 1, 0, 1, 1], [0, 1, 2], [2, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 6, 4, 1, 6, 2, 7, 7, 8, 2, 0, 4], [6, 0, 6, 6, 1, 6, 4, 4, 7, 0], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 3, 2, 1, 1, 0, 22, 12, 10, 2, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), alpha), tf.math.add(alpha, tf.constant(1.0, shape=shape, dtype=tf.float32))), grad), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.sqrt(tf.math.add(grad, tf.math.negative(grad))), tf.math.pow(grad, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.305366277694702, 2.305591583251953, 2.3047935962677, 2.3067193031311035, 2.3078012466430664, 2.307394504547119, 2.3100290298461914, 2.3076071739196777, 2.307612657546997], "accuracy": [0.09694888442754745, 0.1006472036242485, 0.09853387624025345, 0.10077928751707077, 0.09879804402589798, 0.09853387624025345, 0.09919429570436478, 0.10315678268671036, 0.10091137140989304], "val_loss": [2.3029685020446777, 2.3042054176330566, 2.305588483810425, 2.306208610534668, 2.3061673641204834, 2.3075387477874756, 2.3092408180236816, 2.3119094371795654, 2.308891534805298], "val_accuracy": [0.09933333098888397, 0.09833333641290665, 0.10166666656732559, 0.10199999809265137, 0.10000000149011612, 0.09866666793823242, 0.10199999809265137, 0.10066666454076767, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 8, 3, 8, 3, 5], [0, 0, 1, 1, 2], [83, 99, 27], [0, 0, 1, 1, 1, 1], [0, 1, 4], [0, 3, 3], [0], [0, 1, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 89], [0, 1], [0], [1], [0]], "fitness": -0.087714284658432, "mapping_values": [1, 9, 6, 3, 2, 4, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.square(alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3098771572113037, 2.3105356693267822, 2.3105368614196777, 2.3111112117767334, 2.3116953372955322, 2.3096988201141357], "accuracy": [0.09642054885625839, 0.08677849918603897, 0.09021265059709549, 0.09272222965955734, 0.08968432247638702, 0.09021265059709549], "val_loss": [2.30851149559021, 2.30851149559021, 2.30851149559021, 2.30851149559021, 2.30851149559021, 2.30851149559021], "val_accuracy": [0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555]}}]