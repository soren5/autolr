[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8705714344978333, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.294557809829712, 2.193612813949585, 1.784807562828064, 1.3635449409484863, 1.0810402631759644, 0.9357309937477112, 0.8470022082328796, 0.8286221027374268, 0.7723211050033569, 0.745373010635376, 0.7134280800819397, 0.6982585191726685, 0.6727968454360962, 0.649928092956543, 0.6148405075073242, 0.614366352558136, 0.5764865279197693, 0.5918212532997131, 0.5807986259460449, 0.5550824999809265, 0.550838053226471, 0.5347083806991577, 0.5198450088500977, 0.5115987658500671, 0.5003476142883301, 0.494423508644104, 0.47681480646133423, 0.46733424067497253, 0.46690985560417175, 0.449181467294693, 0.42854180932044983, 0.43669480085372925, 0.4308231472969055, 0.4130571186542511, 0.4089037775993347, 0.39856618642807007, 0.3924001157283783, 0.3888866603374481, 0.37909746170043945, 0.3767796754837036, 0.37004050612449646, 0.3676280677318573, 0.37137067317962646, 0.3548317551612854, 0.32981613278388977, 0.33922669291496277, 0.3348172903060913, 0.33760306239128113, 0.32603001594543457, 0.3256589472293854, 0.31640905141830444, 0.3039408326148987, 0.3034544289112091, 0.3083101511001587, 0.2939431965351105, 0.2951729893684387, 0.2891955077648163, 0.29192620515823364], "accuracy": [0.12310130894184113, 0.3299432098865509, 0.43045833706855774, 0.537709653377533, 0.6302998065948486, 0.650640606880188, 0.687887966632843, 0.7025492191314697, 0.7103421092033386, 0.7206445932388306, 0.7343811988830566, 0.7281733155250549, 0.750759482383728, 0.7519482374191284, 0.7565711140632629, 0.7700436115264893, 0.7781006693840027, 0.7680623531341553, 0.7816668748855591, 0.7877426743507385, 0.7825914621353149, 0.7977809906005859, 0.8037247657775879, 0.8021397590637207, 0.8039889335632324, 0.8088759779930115, 0.8144234418869019, 0.8177255392074585, 0.8165367841720581, 0.8267071843147278, 0.837537944316864, 0.8359529972076416, 0.8330471515655518, 0.8396512866020203, 0.8428213000297546, 0.8477083444595337, 0.8466516733169556, 0.8479725122451782, 0.8573504090309143, 0.8569541573524475, 0.852859616279602, 0.8514066934585571, 0.8565579056739807, 0.8594637513160706, 0.8677849769592285, 0.8676528930664062, 0.8640866279602051, 0.8652753829956055, 0.8664641380310059, 0.8677849769592285, 0.8776912093162537, 0.8837670087814331, 0.8841632604598999, 0.8772949576377869, 0.8804649114608765, 0.8815215826034546, 0.8835028409957886, 0.8803328275680542], "val_loss": [2.246450901031494, 2.024763822555542, 1.1391948461532593, 0.8761961460113525, 0.7571859359741211, 0.700238823890686, 0.6614601016044617, 0.6314088702201843, 0.6291053295135498, 0.6177295446395874, 0.5632996559143066, 0.5438107252120972, 0.5465230345726013, 0.5370399951934814, 0.5201399922370911, 0.5104144811630249, 0.5002843141555786, 0.5024071931838989, 0.5075006484985352, 0.4859510064125061, 0.48503822088241577, 0.4887068271636963, 0.4827807545661926, 0.46761614084243774, 0.4618785083293915, 0.45623546838760376, 0.4477541148662567, 0.45004451274871826, 0.43641921877861023, 0.44630077481269836, 0.4551275372505188, 0.42984095215797424, 0.42031246423721313, 0.4328964948654175, 0.4379987120628357, 0.4219444990158081, 0.4227760136127472, 0.42395246028900146, 0.43413469195365906, 0.42045703530311584, 0.4151044189929962, 0.41649720072746277, 0.4154265820980072, 0.4126054644584656, 0.4174047112464905, 0.4132534861564636, 0.40519437193870544, 0.40441325306892395, 0.4196004569530487, 0.4084586501121521, 0.39875903725624084, 0.40641164779663086, 0.40847843885421753, 0.41223469376564026, 0.4157455265522003, 0.4123656451702118, 0.4061170220375061, 0.4057122468948364], "val_accuracy": [0.42933332920074463, 0.44866666197776794, 0.6620000004768372, 0.6963333487510681, 0.7250000238418579, 0.7476666569709778, 0.746999979019165, 0.7643333077430725, 0.7609999775886536, 0.7703333497047424, 0.7806666493415833, 0.7893333435058594, 0.7896666526794434, 0.7889999747276306, 0.800000011920929, 0.8103333115577698, 0.812333345413208, 0.8113333582878113, 0.8080000281333923, 0.8109999895095825, 0.8173333406448364, 0.8119999766349792, 0.8113333582878113, 0.8256666660308838, 0.82833331823349, 0.8326666951179504, 0.8353333473205566, 0.8309999704360962, 0.8426666855812073, 0.8353333473205566, 0.8443333506584167, 0.843999981880188, 0.843666672706604, 0.8489999771118164, 0.8479999899864197, 0.8500000238418579, 0.8523333072662354, 0.8546666502952576, 0.8573333621025085, 0.8579999804496765, 0.8576666712760925, 0.8529999852180481, 0.8586666584014893, 0.8616666793823242, 0.8633333444595337, 0.8653333187103271, 0.8636666536331177, 0.8659999966621399, 0.8640000224113464, 0.8633333444595337, 0.8676666617393494, 0.8669999837875366, 0.8693333268165588, 0.8690000176429749, 0.8646666407585144, 0.8693333268165588, 0.8673333525657654, 0.8690000176429749]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8268571496009827, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.293217897415161, 2.1888234615325928, 1.7631583213806152, 1.3550429344177246, 1.0685577392578125, 0.9215068817138672, 0.8428962826728821, 0.8131330609321594, 0.7716431617736816, 0.7451871037483215, 0.6981902718544006, 0.687757134437561, 0.6572174429893494, 0.634486734867096, 0.6046972274780273, 0.584154486656189, 0.5822271704673767, 0.5668612718582153, 0.5602895021438599, 0.5412083268165588, 0.5266373157501221, 0.519823431968689, 0.5080955028533936, 0.49409082531929016, 0.4864512085914612, 0.4780450463294983, 0.46503564715385437, 0.4608868360519409, 0.4367144703865051, 0.4383980631828308, 0.4276491403579712, 0.42853155732154846, 0.405550092458725, 0.40556856989860535, 0.39262035489082336, 0.382133424282074, 0.3860805928707123, 0.361979603767395, 0.3582318425178528, 0.3629910945892334, 0.3536716401576996, 0.3510115444660187], "accuracy": [0.13380002975463867, 0.3295469582080841, 0.4461762011051178, 0.5444459319114685, 0.6362435817718506, 0.6708492636680603, 0.6927750706672668, 0.7037379741668701, 0.7113987803459167, 0.7091533541679382, 0.7397965788841248, 0.7452120184898376, 0.752740740776062, 0.7630431652069092, 0.7705719470977783, 0.7740060687065125, 0.7884030938148499, 0.7848368883132935, 0.7828556299209595, 0.7913089394569397, 0.8013472557067871, 0.8045172095298767, 0.8041210174560547, 0.8148196935653687, 0.8153480291366577, 0.8206313848495483, 0.8285563588142395, 0.8238013386726379, 0.8379341959953308, 0.8341038227081299, 0.8372738361358643, 0.8388587832450867, 0.8469158411026001, 0.848368763923645, 0.8525954484939575, 0.852859616279602, 0.8537842035293579, 0.8626337051391602, 0.8601241707801819, 0.8621054291725159, 0.8647470474243164, 0.8663320541381836], "val_loss": [2.246123790740967, 2.0172224044799805, 1.136343240737915, 0.8715606331825256, 0.7483596801757812, 0.7147332429885864, 0.684927761554718, 0.6295182108879089, 0.6297918558120728, 0.613959550857544, 0.5842494368553162, 0.5748988389968872, 0.5466317534446716, 0.5375222563743591, 0.5172283053398132, 0.5163856148719788, 0.5157787799835205, 0.48793840408325195, 0.489857941865921, 0.4805051386356354, 0.48611587285995483, 0.46308040618896484, 0.4652576446533203, 0.4547300636768341, 0.45923367142677307, 0.44694486260414124, 0.44762077927589417, 0.4389961361885071, 0.4410543739795685, 0.4507504999637604, 0.4368916153907776, 0.4294075667858124, 0.428171843290329, 0.4166593551635742, 0.42080241441726685, 0.42442378401756287, 0.41971704363822937, 0.42235735058784485, 0.4208570420742035, 0.41104841232299805, 0.4080020487308502, 0.41509196162223816], "val_accuracy": [0.4099999964237213, 0.4466666579246521, 0.6520000100135803, 0.6990000009536743, 0.734666645526886, 0.7336666584014893, 0.7356666922569275, 0.7596666812896729, 0.7549999952316284, 0.7603333592414856, 0.7730000019073486, 0.7776666879653931, 0.7929999828338623, 0.7983333468437195, 0.7996666431427002, 0.8016666769981384, 0.8046666383743286, 0.8109999895095825, 0.8013333082199097, 0.8063333630561829, 0.8090000152587891, 0.8233333230018616, 0.828000009059906, 0.8293333053588867, 0.828000009059906, 0.840666651725769, 0.8370000123977661, 0.8443333506584167, 0.8416666388511658, 0.8339999914169312, 0.8450000286102295, 0.8519999980926514, 0.8576666712760925, 0.859666645526886, 0.8560000061988831, 0.8613333106040955, 0.8700000047683716, 0.8669999837875366, 0.8600000143051147, 0.8573333621025085, 0.8633333444595337, 0.862666666507721]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 3, 1, 3, 5, 9, 6, 6, 4, 3, 9, 1], [0, 2, 0, 0, 2, 0, 2, 1], [83, 99, 27, 53, 3, 61], [0, 1, 1, 0, 1, 1], [6, 1, 2], [0, 2, 3], [22], [0, 1, 0, 0, 1, 1, 1], [7, 0, 4, 3], [0, 0, 4], [20, 58], [0, 1, 0], [2, 9], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 13, 8, 6, 3, 1, 2, 1, 6, 3, 3, 2, 3, 2, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.pow(tf.math.multiply(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, alpha))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10368511080741882, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 1, 6, 1, 3, 1, 9], [0, 0, 2, 0, 2], [19, 99, 87, 76], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 2, 2, 3, 3], [0, 3, 3, 5, 2, 0], [0, 98], [0, 1, 0, 1, 0, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 4, 12, 6, 6, 2, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(grad, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad)), tf.math.multiply(grad, beta)), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [5, 1, 2, 2, 6, 8, 3, 5, 2, 8, 9], [4, 3, 3, 2, 3, 0], [0, 78], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 4, 4, 4, 3], [1, 0, 4, 1, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 17, 11, 6, 2, 11, 6, 5, 1, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.subtract(tf.math.add(grad, tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(grad, grad)), tf.math.square(beta)), tf.math.add(grad, tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.pow(alpha, tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [46877822976.0, 6860259721216.0, 117433876611072.0, 843513927303168.0, 3733701238194176.0, 1.2294930147835904e+16], "accuracy": [0.09932637959718704, 0.09972262382507324, 0.10170386731624603, 0.09747721254825592, 0.10091137140989304, 0.09457138925790787], "val_loss": [472120426496.0, 25453236584448.0, 273212986359808.0, 1489596932161536.0, 5580937412739072.0, 1.6458103151132672e+16], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 3, 8, 3], [3, 0, 0, 2, 2], [83, 99, 27], [0, 1, 0, 0, 1, 1], [0, 1, 1], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 4, 3, 6, 1, 1, 3, 5, 1, 0, 5, 5, 7, 0, 9, 4, 0], [0, 0, 4, 1, 4, 2, 2, 6, 7, 2], [0, 58, 61], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 5, 3, 7, 1, 5, 3, 7, 6, 7, 4, 4, 6, 1, 3, 9, 7, 9, 6, 7, 6, 2, 2, 5, 9, 2, 0, 7, 5, 6, 7, 6, 8, 1, 4, 6, 4, 7, 8, 3], [1, 1, 5, 0, 7, 5, 6, 2, 5, 3, 5, 7, 4, 4, 6, 2, 2, 2, 7, 1, 0, 1, 5, 4, 6, 4, 2], [0, 71, 47, 94, 93]], "fitness": -0.09485714137554169, "mapping_values": [1, 6, 3, 3, 2, 2, 1, 1, 1, 28, 18, 10, 3, 67, 40, 27, 5], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(grad, tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad), tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.square(tf.math.subtract(grad, tf.math.negative(beta))), beta), tf.math.square(tf.math.square(grad))), tf.math.add(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(grad), beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(alpha, grad)), tf.math.square(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.pow(tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(grad, tf.math.square(beta))), grad), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), sigma))), grad), tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.divide_no_nan(grad, grad)), grad)), grad)), beta), beta), beta)), tf.math.add(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.sqrt(grad)), grad))), tf.math.multiply(grad, beta))))))))", "other_info": {"loss": [2.309567928314209, 2.309440851211548, 2.3101298809051514, 2.310166120529175, 2.3105227947235107, 2.309253692626953], "accuracy": [0.09853387624025345, 0.09417514503002167, 0.09087307006120682, 0.0936468094587326, 0.08757099509239197, 0.09126931428909302], "val_loss": [2.308774709701538, 2.308774709701538, 2.308774709701538, 2.308774709701538, 2.308774709701538, 2.308774709701538], "val_accuracy": [0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024]}}]