[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8751428723335266, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2933504581451416, 2.1909995079040527, 1.7754079103469849, 1.3450111150741577, 1.0845175981521606, 0.9266800284385681, 0.8393142819404602, 0.8101369738578796, 0.7721529603004456, 0.7515595555305481, 0.7164309620857239, 0.6888658404350281, 0.6659083366394043, 0.6251179575920105, 0.6147065162658691, 0.6069039702415466, 0.5959651470184326, 0.5680341720581055, 0.571647584438324, 0.5641142129898071, 0.556872546672821, 0.5389307141304016, 0.5403499007225037, 0.5239837765693665, 0.5120849013328552, 0.4937076270580292, 0.48890915513038635, 0.4771951735019684, 0.4763433635234833, 0.46340212225914, 0.45193687081336975, 0.43418213725090027, 0.4315737187862396, 0.4456259608268738, 0.4241635203361511, 0.4170880913734436, 0.4216986298561096, 0.41405755281448364, 0.41673997044563293, 0.39970728754997253, 0.38857075572013855, 0.38556259870529175, 0.3890761137008667, 0.3887472450733185, 0.3820839822292328, 0.37813788652420044, 0.36640051007270813, 0.366649329662323, 0.3716599941253662, 0.37238967418670654, 0.3547588586807251, 0.3505151569843292, 0.3439939618110657, 0.3398945927619934, 0.34855562448501587, 0.3436882197856903, 0.33583781123161316], "accuracy": [0.12891295552253723, 0.3353586196899414, 0.4422137141227722, 0.5329546928405762, 0.6296393871307373, 0.6612072587013245, 0.6947563290596008, 0.7004358768463135, 0.7112666964530945, 0.7088891863822937, 0.7290979027748108, 0.7436270117759705, 0.748249888420105, 0.7601373791694641, 0.7707040309906006, 0.7716285586357117, 0.7754589915275574, 0.783119797706604, 0.7828556299209595, 0.7835160493850708, 0.7862898111343384, 0.7950072884559631, 0.7942147850990295, 0.7998943328857422, 0.8064984679222107, 0.8138951063156128, 0.8104609847068787, 0.8211596608161926, 0.816008448600769, 0.8210275769233704, 0.8244617581367493, 0.8383304476737976, 0.8360850811004639, 0.833179235458374, 0.8368775844573975, 0.8417646288871765, 0.841500461101532, 0.8436138033866882, 0.8379341959953308, 0.8498216867446899, 0.8527275323867798, 0.8508783578872681, 0.8533879518508911, 0.8532558679580688, 0.8556333184242249, 0.852331280708313, 0.8558974862098694, 0.8564258217811584, 0.8578787446022034, 0.8589354157447815, 0.8644828796386719, 0.8693699836730957, 0.8710870146751404, 0.8638224601745605, 0.8710870146751404, 0.8681812286376953, 0.869502067565918], "val_loss": [2.2467968463897705, 2.0251553058624268, 1.1582398414611816, 0.8884643316268921, 0.7703434824943542, 0.7293754816055298, 0.6898866891860962, 0.681486189365387, 0.6537735462188721, 0.6252081394195557, 0.5928545594215393, 0.5683081150054932, 0.5572694540023804, 0.5410200357437134, 0.5353891849517822, 0.5245903134346008, 0.5063334703445435, 0.5063199996948242, 0.5022578239440918, 0.49087202548980713, 0.4887511730194092, 0.49896377325057983, 0.48697924613952637, 0.47436463832855225, 0.4690796732902527, 0.47217774391174316, 0.4574185311794281, 0.4456326365470886, 0.441571444272995, 0.4423570930957794, 0.4394589960575104, 0.4315498173236847, 0.42569801211357117, 0.4251650273799896, 0.4249386489391327, 0.4293137192726135, 0.42555123567581177, 0.4157761335372925, 0.42215752601623535, 0.41665157675743103, 0.4310242235660553, 0.43199247121810913, 0.4372439384460449, 0.4205200970172882, 0.4082633852958679, 0.4116285741329193, 0.4100372791290283, 0.42931464314460754, 0.42106103897094727, 0.4177834093570709, 0.4261944591999054, 0.42340922355651855, 0.41630762815475464, 0.42779338359832764, 0.4403954744338989, 0.428333044052124, 0.4311327338218689], "val_accuracy": [0.4013333320617676, 0.4673333466053009, 0.6460000276565552, 0.6903333067893982, 0.7200000286102295, 0.721666693687439, 0.746999979019165, 0.7386666536331177, 0.7566666603088379, 0.7666666507720947, 0.7730000019073486, 0.7823333144187927, 0.7889999747276306, 0.7916666865348816, 0.7910000085830688, 0.7993333339691162, 0.8043333292007446, 0.8073333501815796, 0.8086666464805603, 0.8083333373069763, 0.8019999861717224, 0.8073333501815796, 0.8240000009536743, 0.8199999928474426, 0.824999988079071, 0.8339999914169312, 0.8389999866485596, 0.8326666951179504, 0.8343333601951599, 0.8413333296775818, 0.8453333377838135, 0.8433333039283752, 0.8433333039283752, 0.8393333554267883, 0.8463333249092102, 0.8443333506584167, 0.8510000109672546, 0.8546666502952576, 0.8500000238418579, 0.8553333282470703, 0.8476666808128357, 0.8550000190734863, 0.8510000109672546, 0.8513333201408386, 0.8566666841506958, 0.8539999723434448, 0.862333357334137, 0.8573333621025085, 0.8586666584014893, 0.8579999804496765, 0.8603333234786987, 0.8673333525657654, 0.8616666793823242, 0.8636666536331177, 0.8640000224113464, 0.8650000095367432, 0.8603333234786987]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8500000238418579, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.291679620742798, 2.185286521911621, 1.7506145238876343, 1.3378499746322632, 1.0680148601531982, 0.9199842810630798, 0.8420093655586243, 0.8065199851989746, 0.7532287836074829, 0.7367393970489502, 0.6909119486808777, 0.6771105527877808, 0.6458239555358887, 0.6190751194953918, 0.598407506942749, 0.5900142788887024, 0.5748240351676941, 0.5642390847206116, 0.5448600649833679, 0.5548751354217529, 0.5322670936584473, 0.5280618667602539, 0.5171924233436584, 0.5187726616859436, 0.5106491446495056, 0.4829969108104706, 0.4816734194755554, 0.4639195501804352, 0.4534394443035126, 0.4540296196937561, 0.4379592537879944, 0.4455420672893524, 0.42903730273246765, 0.4124866724014282, 0.4010269045829773, 0.40880805253982544, 0.39203691482543945, 0.3940742611885071, 0.3810736835002899, 0.3800462484359741, 0.3750285506248474, 0.36536139249801636, 0.3631720244884491, 0.34728720784187317, 0.3486824333667755, 0.3376416265964508], "accuracy": [0.13010171055793762, 0.3267732262611389, 0.4492141008377075, 0.5585787892341614, 0.6365077495574951, 0.669792652130127, 0.6934354901313782, 0.709549605846405, 0.7132478952407837, 0.7191916704177856, 0.7296261787414551, 0.7423061728477478, 0.7536653280258179, 0.7638356685638428, 0.7705719470977783, 0.7691190242767334, 0.7774402499198914, 0.7885351777076721, 0.789459764957428, 0.7878747582435608, 0.7992339134216309, 0.7957997918128967, 0.7976489067077637, 0.8025360107421875, 0.8070268034934998, 0.8117818236351013, 0.81548011302948, 0.8161405324935913, 0.8267071843147278, 0.8272355198860168, 0.8310658931732178, 0.821820080280304, 0.8289526104927063, 0.835160493850708, 0.844010055065155, 0.8396512866020203, 0.846387505531311, 0.8494254350662231, 0.8494254350662231, 0.8532558679580688, 0.8492933511734009, 0.8647470474243164, 0.8574824929237366, 0.8623695969581604, 0.8617091774940491, 0.8698983192443848], "val_loss": [2.2456412315368652, 2.011638879776001, 1.1212555170059204, 0.8750225305557251, 0.7856146097183228, 0.6987008452415466, 0.6863305568695068, 0.6467105150222778, 0.6442187428474426, 0.6188790798187256, 0.581345796585083, 0.563261866569519, 0.5556909441947937, 0.5338283777236938, 0.5360956788063049, 0.5224208831787109, 0.5099473595619202, 0.5054051876068115, 0.49594393372535706, 0.49916645884513855, 0.49146753549575806, 0.4805257022380829, 0.4705175757408142, 0.4781738221645355, 0.4685443639755249, 0.45378872752189636, 0.4436846971511841, 0.45016583800315857, 0.45719653367996216, 0.43726110458374023, 0.42097461223602295, 0.4185149669647217, 0.41651323437690735, 0.40986368060112, 0.4041573107242584, 0.39646801352500916, 0.4033566415309906, 0.39903271198272705, 0.3954603374004364, 0.3981768786907196, 0.40811216831207275, 0.4003636837005615, 0.40716755390167236, 0.3987475633621216, 0.39767277240753174, 0.40982314944267273], "val_accuracy": [0.4113333225250244, 0.4676666557788849, 0.6449999809265137, 0.6943333148956299, 0.7153333425521851, 0.7366666793823242, 0.7480000257492065, 0.7423333525657654, 0.7483333349227905, 0.7546666860580444, 0.7680000066757202, 0.7720000147819519, 0.7836666703224182, 0.7916666865348816, 0.7873333096504211, 0.7946666479110718, 0.8006666898727417, 0.7946666479110718, 0.8036666512489319, 0.8090000152587891, 0.809333324432373, 0.8169999718666077, 0.8233333230018616, 0.8270000219345093, 0.8273333311080933, 0.8209999799728394, 0.8333333134651184, 0.8299999833106995, 0.8286666870117188, 0.8363333344459534, 0.8429999947547913, 0.8410000205039978, 0.8426666855812073, 0.8493333458900452, 0.846666693687439, 0.8506666421890259, 0.8546666502952576, 0.8539999723434448, 0.8610000014305115, 0.8606666922569275, 0.8646666407585144, 0.8533333539962769, 0.8536666631698608, 0.8576666712760925, 0.8600000143051147, 0.8569999933242798]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [3, 1, 3, 1, 3, 4, 3, 9, 8, 5, 4, 7, 6], [0, 0, 1, 0, 2, 2, 2, 0, 3, 1], [83, 99, 27, 70, 48], [0, 0, 1, 0, 1, 1], [0, 4, 2], [0, 2, 3], [35], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 4, 3, 2, 9, 6, 6, 2, 5, 0], [0, 0, 1, 1, 2, 1], [0, 58, 75], [0, 1], [0], [6], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 13, 10, 5, 6, 3, 3, 1, 17, 11, 6, 3, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.pow(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(grad)), tf.math.square(tf.math.pow(tf.math.add(grad, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.square(alpha), beta)), tf.math.negative(alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09509972482919693, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 1, 3, 1, 3, 0, 8, 2, 1, 7, 3, 7, 2, 0], [0, 0, 1, 0, 2, 3, 2, 0, 1, 1, 2], [83, 99, 27, 46], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 1, 0, 1, 0, 1, 1], [0, 0, 4, 3], [0, 5, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 14, 11, 4, 6, 3, 3, 1, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(tf.math.subtract(grad, grad), tf.math.add(tf.math.multiply(grad, tf.math.add(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(alpha), alpha))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [6, 1, 3, 1, 3, 1, 7, 7, 1, 8, 6, 2], [0, 0, 1, 0, 2, 0, 2, 2, 1, 0, 3, 0], [83, 99, 27, 76, 51, 29], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 2, 2, 1, 9, 8, 4, 5, 2, 5, 4], [3, 3, 3, 2, 3, 1, 0], [0, 89], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 4, 3, 6, 2, 9], [0, 0, 4, 1], [0, 58, 9], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 12, 12, 6, 19, 12, 7, 2, 11, 7, 4, 3, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(grad, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.divide_no_nan(grad, alpha)), tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(grad, grad), tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.pow(tf.math.square(tf.math.add(tf.math.square(beta), grad)), tf.math.pow(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 2, 2, 2, 8, 8, 0], [0, 3, 3, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1, 1], [0, 3, 4, 3], [0, 0, 4, 5], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 13, 8, 5, 1, 8, 4, 4, 2, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), grad), tf.math.add(tf.math.sqrt(grad), tf.math.sqrt(tf.math.negative(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3034510612487793, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10342095047235489, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]