[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8648571372032166, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2923834323883057, 2.1889407634735107, 1.7645962238311768, 1.3581336736679077, 1.0713711977005005, 0.9324289560317993, 0.8733577728271484, 0.8213781714439392, 0.7735388875007629, 0.7477298974990845, 0.7026875019073486, 0.6956027150154114, 0.6567690968513489, 0.6345532536506653, 0.6202870607376099, 0.5963889360427856, 0.5742583274841309, 0.5828102231025696, 0.5587208271026611, 0.5483556985855103, 0.5339842438697815, 0.5249099135398865, 0.5263219475746155, 0.5094848871231079, 0.5055311918258667, 0.49362626671791077, 0.492054283618927, 0.4717646539211273, 0.46201664209365845, 0.4534401297569275, 0.4354040026664734, 0.43411898612976074, 0.41996026039123535, 0.4101247787475586, 0.41195884346961975, 0.4070257246494293, 0.4060525894165039, 0.38620615005493164, 0.3781440556049347, 0.37892118096351624], "accuracy": [0.13115836679935455, 0.3237352967262268, 0.4465724527835846, 0.5481442213058472, 0.64231938123703, 0.6649055480957031, 0.6822084188461304, 0.6939638257026672, 0.7051908373832703, 0.7223616242408752, 0.7277770638465881, 0.7425703406333923, 0.7458723783493042, 0.7614582180976868, 0.7618544697761536, 0.7707040309906006, 0.7774402499198914, 0.783119797706604, 0.7884030938148499, 0.7891955971717834, 0.7967243194580078, 0.7979130744934082, 0.7968564033508301, 0.8121780753135681, 0.8079513907432556, 0.8101968169212341, 0.8162726163864136, 0.8228767514228821, 0.8269713521003723, 0.8314621448516846, 0.8317263126373291, 0.8343679904937744, 0.8397833704948425, 0.8437458872795105, 0.8465195894241333, 0.8451988101005554, 0.8457271456718445, 0.8539162874221802, 0.8504821062088013, 0.8555012345314026], "val_loss": [2.246166944503784, 2.0171594619750977, 1.132443904876709, 0.8806336522102356, 0.7696613073348999, 0.7301961779594421, 0.6701276898384094, 0.6593276858329773, 0.6416698694229126, 0.6181098818778992, 0.5777679681777954, 0.5553255081176758, 0.54523104429245, 0.5395349264144897, 0.5274631977081299, 0.5157209634780884, 0.5100258588790894, 0.5044673085212708, 0.5140815377235413, 0.5056582689285278, 0.5005766153335571, 0.48797985911369324, 0.49456727504730225, 0.48846670985221863, 0.4840965270996094, 0.4601652920246124, 0.4623236060142517, 0.4541293978691101, 0.45140501856803894, 0.4431198835372925, 0.4481762647628784, 0.4416334927082062, 0.4298308193683624, 0.44409701228141785, 0.4298262596130371, 0.42281460762023926, 0.42649415135383606, 0.41888248920440674, 0.427418977022171, 0.41300126910209656], "val_accuracy": [0.41999998688697815, 0.503000020980835, 0.640333354473114, 0.6853333115577698, 0.7103333473205566, 0.7300000190734863, 0.7363333106040955, 0.7523333430290222, 0.7553333044052124, 0.7696666717529297, 0.7699999809265137, 0.7749999761581421, 0.7946666479110718, 0.7860000133514404, 0.7916666865348816, 0.7976666688919067, 0.8019999861717224, 0.8130000233650208, 0.8116666674613953, 0.8046666383743286, 0.8059999942779541, 0.8209999799728394, 0.8233333230018616, 0.824999988079071, 0.8230000138282776, 0.8296666741371155, 0.8326666951179504, 0.8389999866485596, 0.8460000157356262, 0.8443333506584167, 0.843999981880188, 0.8463333249092102, 0.8516666889190674, 0.8546666502952576, 0.859000027179718, 0.8560000061988831, 0.8486666679382324, 0.8506666421890259, 0.856333315372467, 0.8576666712760925]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8479999899864197, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2946109771728516, 2.1925487518310547, 1.7826544046401978, 1.3502569198608398, 1.0604995489120483, 0.8942927718162537, 0.8461042046546936, 0.8087514638900757, 0.7597795724868774, 0.7322357892990112, 0.6988375782966614, 0.6886318922042847, 0.645635724067688, 0.6346697211265564, 0.6070749759674072, 0.5999346375465393, 0.5989772081375122, 0.5776611566543579, 0.5691090226173401, 0.5540294647216797, 0.5337830781936646, 0.5178818106651306, 0.5039567351341248, 0.49571508169174194, 0.5006877183914185, 0.48452863097190857, 0.4759216010570526, 0.45210742950439453, 0.45757630467414856, 0.4565497040748596, 0.4347643554210663, 0.42982572317123413, 0.41929978132247925, 0.41220778226852417, 0.4132133424282074, 0.3932616710662842, 0.39810219407081604, 0.3890928328037262], "accuracy": [0.12534672021865845, 0.3214899003505707, 0.43864747881889343, 0.542728841304779, 0.6388852000236511, 0.6793025732040405, 0.6936996579170227, 0.7066437602043152, 0.707040011882782, 0.7191916704177856, 0.7343811988830566, 0.7339849472045898, 0.7466648817062378, 0.7557786107063293, 0.7652885913848877, 0.7687227725982666, 0.7671377658843994, 0.7777044177055359, 0.7769119143486023, 0.7803460359573364, 0.7936864495277405, 0.8001585006713867, 0.8090080618858337, 0.8105930685997009, 0.8123101592063904, 0.8215559124946594, 0.8239334225654602, 0.8257825970649719, 0.8274996876716614, 0.8300092220306396, 0.8343679904937744, 0.8352925777435303, 0.8449346423149109, 0.8424250483512878, 0.8532558679580688, 0.8467837572097778, 0.8473120927810669, 0.8519350290298462], "val_loss": [2.245879650115967, 2.0260140895843506, 1.1522088050842285, 0.8463952541351318, 0.7598538398742676, 0.6920613050460815, 0.6774685978889465, 0.6433849930763245, 0.6374051570892334, 0.6017909049987793, 0.5639024376869202, 0.5338060259819031, 0.5215460062026978, 0.5205394625663757, 0.5189010500907898, 0.5035036206245422, 0.48715224862098694, 0.4888506233692169, 0.482285737991333, 0.48464545607566833, 0.46901243925094604, 0.4597521126270294, 0.4460906684398651, 0.43457740545272827, 0.4307659864425659, 0.43920662999153137, 0.4321160614490509, 0.42641568183898926, 0.41908785700798035, 0.41800960898399353, 0.4255238473415375, 0.4105373024940491, 0.40436986088752747, 0.4170265793800354, 0.41162991523742676, 0.40139102935791016, 0.3978877067565918, 0.40152132511138916], "val_accuracy": [0.4336666762828827, 0.4620000123977661, 0.6466666460037231, 0.6933333277702332, 0.7123333215713501, 0.7386666536331177, 0.737333357334137, 0.753000020980835, 0.7546666860580444, 0.765666663646698, 0.7693333625793457, 0.7866666913032532, 0.7903333306312561, 0.7946666479110718, 0.793666660785675, 0.79666668176651, 0.8063333630561829, 0.7993333339691162, 0.8040000200271606, 0.8036666512489319, 0.809333324432373, 0.824999988079071, 0.831333339214325, 0.8336666822433472, 0.8389999866485596, 0.8326666951179504, 0.8410000205039978, 0.8410000205039978, 0.8429999947547913, 0.8456666469573975, 0.843999981880188, 0.8513333201408386, 0.8526666760444641, 0.8510000109672546, 0.8506666421890259, 0.8500000238418579, 0.8510000109672546, 0.8476666808128357]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 1, 3, 1, 3, 9], [0, 0, 1, 0, 2], [83, 99, 72, 41], [0, 0, 1, 0, 1, 1], [0, 6, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 5, 4, 3], [5, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 4, 6, 3, 3, 1, 7, 4, 3, 1, 2, 1, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.pow(tf.math.multiply(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3034157752990723, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 5, 1, 3, 5], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 1, 1, 1], [0, 1, 2], [0, 1, 5], [0], [0, 0, 0, 0, 1, 1, 1, 1], [0, 6, 7, 3], [0, 0, 4, 2], [0, 58], [0, 1, 1], [6], [1, 7], [0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.square(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.square(alpha), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, grad)", "other_info": {"loss": [1.6193974903082332e+33, NaN, 2.3077096939086914, 2.3199050426483154, 2.3611385822296143, 2.38539981842041, 2.3844096660614014], "accuracy": [0.07726852595806122, 0.09747721254825592, 0.10011887550354004, 0.10011887550354004, 0.1018359512090683, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, 2.3061952590942383, 2.3093032836914062, 2.323249101638794, 2.3809404373168945, 2.382005214691162, 2.379070997238159], "val_accuracy": [0.08833333104848862, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}, "mapping_values": [1, 10, 6, 4, 3, 4, 2, 2, 1, 8, 4, 4, 2, 3, 1, 2, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 1, 6, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [1, 0, 1, 0, 1, 1], [0, 1, 2], [5, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [1, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 1, 0, 1, 0, 7, 4, 3, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.math.subtract(tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [65, 99, 27], [0, 0, 1, 0, 1, 0, 1], [0, 1, 2, 0], [0, 0, 3], [0, 92], [0, 0, 0, 1, 1, 1, 1], [0, 0, 4, 3], [0, 4, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 7, 4, 3, 2, 5, 3, 2, 1, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09417514503002167, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]