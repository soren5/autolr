[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8579999804496765, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2921688556671143, 2.1871232986450195, 1.767158031463623, 1.339111328125, 1.0591981410980225, 0.9178820848464966, 0.8676952123641968, 0.8195357322692871, 0.7517454028129578, 0.7483966946601868, 0.6955247521400452, 0.6716362833976746, 0.653571367263794, 0.6077138781547546, 0.5996175408363342, 0.5850842595100403, 0.5672115087509155, 0.5584034323692322, 0.5417940616607666, 0.5274802446365356, 0.5180963277816772, 0.5124584436416626, 0.49082985520362854, 0.4957268536090851, 0.47851747274398804, 0.466277539730072, 0.4548349976539612, 0.4367418587207794, 0.4403948187828064, 0.42806339263916016, 0.42312973737716675, 0.41295185685157776, 0.41065582633018494, 0.40480825304985046, 0.3892442584037781, 0.39453816413879395, 0.37496456503868103, 0.3686946630477905, 0.36035630106925964, 0.3637153208255768, 0.36643344163894653, 0.3568895757198334], "accuracy": [0.13142253458499908, 0.32043322920799255, 0.4373266398906708, 0.551050066947937, 0.6432439684867859, 0.6586976647377014, 0.6888125538825989, 0.7046625018119812, 0.7086250185966492, 0.7187954187393188, 0.7368907928466797, 0.7530049085617065, 0.7581561207771301, 0.7701756954193115, 0.7732135653495789, 0.7812706232070923, 0.7876105904579163, 0.7876105904579163, 0.7992339134216309, 0.7981772422790527, 0.7976489067077637, 0.8075551390647888, 0.8161405324935913, 0.8107251524925232, 0.8193105459213257, 0.8238013386726379, 0.8245938420295715, 0.8298771381378174, 0.8333113193511963, 0.8319904804229736, 0.8354246616363525, 0.8426892161369324, 0.8428213000297546, 0.8436138033866882, 0.8467837572097778, 0.8519350290298462, 0.8589354157447815, 0.8623695969581604, 0.8658037185668945, 0.8619733452796936, 0.8597279191017151, 0.8598600029945374], "val_loss": [2.2456846237182617, 2.0144810676574707, 1.1398528814315796, 0.8728670477867126, 0.7673439383506775, 0.7157347202301025, 0.7029848694801331, 0.6555530428886414, 0.6503380537033081, 0.612386167049408, 0.5920800566673279, 0.560941755771637, 0.551986813545227, 0.5371943116188049, 0.51973557472229, 0.5109254717826843, 0.4995070695877075, 0.5060503482818604, 0.48719727993011475, 0.484844446182251, 0.4930354356765747, 0.48331180214881897, 0.4794071316719055, 0.46157267689704895, 0.47501111030578613, 0.4596715569496155, 0.4433145225048065, 0.4340231418609619, 0.43038442730903625, 0.421274870634079, 0.4259709119796753, 0.4316045641899109, 0.4192655384540558, 0.4106827676296234, 0.4025098383426666, 0.39460206031799316, 0.39243748784065247, 0.3854781985282898, 0.3917309641838074, 0.38206005096435547, 0.39244693517684937, 0.40306356549263], "val_accuracy": [0.41999998688697815, 0.43933331966400146, 0.6359999775886536, 0.6786666512489319, 0.7089999914169312, 0.721666693687439, 0.7306666374206543, 0.7483333349227905, 0.7553333044052124, 0.7613333463668823, 0.7716666460037231, 0.7749999761581421, 0.7806666493415833, 0.7960000038146973, 0.796999990940094, 0.7953333258628845, 0.8090000152587891, 0.8066666722297668, 0.8056666851043701, 0.8209999799728394, 0.8159999847412109, 0.8113333582878113, 0.8233333230018616, 0.82833331823349, 0.8276666402816772, 0.8293333053588867, 0.8353333473205566, 0.8386666774749756, 0.8413333296775818, 0.8473333120346069, 0.8453333377838135, 0.8433333039283752, 0.8496666550636292, 0.8473333120346069, 0.8523333072662354, 0.8613333106040955, 0.8646666407585144, 0.8640000224113464, 0.8619999885559082, 0.8646666407585144, 0.8633333444595337, 0.8636666536331177]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 99, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 3], [0, 0, 4], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.8528571724891663, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2923197746276855, 2.188911199569702, 1.7609527111053467, 1.3418333530426025, 1.0697740316390991, 0.9151411652565002, 0.8317863941192627, 0.8007450699806213, 0.7435941100120544, 0.7295188307762146, 0.6903434991836548, 0.6754156351089478, 0.6276097893714905, 0.6105017066001892, 0.6030853986740112, 0.5974944829940796, 0.5679451823234558, 0.5619922280311584, 0.5565524697303772, 0.5343195199966431, 0.5244197845458984, 0.5146905779838562, 0.5003239512443542, 0.49561843276023865, 0.49184632301330566, 0.47731417417526245, 0.4685518443584442, 0.46021315455436707, 0.4506954252719879, 0.4459056258201599, 0.4329816997051239, 0.42376428842544556, 0.4213261306285858, 0.41774502396583557, 0.4119732677936554, 0.41089698672294617, 0.4060937464237213, 0.3968489170074463, 0.3940833508968353, 0.38270556926727295, 0.379721075296402, 0.36479175090789795, 0.3604986071586609, 0.3516489267349243, 0.3412049412727356, 0.33508914709091187, 0.34543684124946594, 0.3486386239528656, 0.3415990173816681, 0.33000436425209045, 0.32433000206947327, 0.3283923864364624, 0.315096914768219, 0.32108479738235474, 0.31533098220825195, 0.31098324060440063, 0.30040642619132996, 0.2900078594684601, 0.29482895135879517, 0.2869199514389038], "accuracy": [0.12508255243301392, 0.3210936486721039, 0.44128912687301636, 0.5435213446617126, 0.6424514651298523, 0.6701889038085938, 0.6999075412750244, 0.7083608508110046, 0.7113987803459167, 0.7107383608818054, 0.7397965788841248, 0.7427024245262146, 0.7582882046699524, 0.769911527633667, 0.7671377658843994, 0.7754589915275574, 0.7843085527420044, 0.7890635132789612, 0.7923656105995178, 0.7984414100646973, 0.802800178527832, 0.800290584564209, 0.8075551390647888, 0.809140145778656, 0.8120459914207458, 0.816008448600769, 0.8169330358505249, 0.8257825970649719, 0.8257825970649719, 0.8259146809577942, 0.83119797706604, 0.8354246616363525, 0.8417646288871765, 0.8352925777435303, 0.8428213000297546, 0.842028796672821, 0.843481719493866, 0.8500858545303345, 0.8524633646011353, 0.8514066934585571, 0.8516708612442017, 0.859199583530426, 0.8613129258155823, 0.8642187118530273, 0.8696341514587402, 0.8660678863525391, 0.8664641380310059, 0.8643507957458496, 0.8658037185668945, 0.8688416481018066, 0.8701624870300293, 0.8706908226013184, 0.8722757697105408, 0.8709549307823181, 0.8813894987106323, 0.8798044919967651, 0.8758420348167419, 0.8828424215316772, 0.8811253309249878, 0.8835028409957886], "val_loss": [2.2449636459350586, 2.013425827026367, 1.12485671043396, 0.8831372857093811, 0.7567968964576721, 0.6878762245178223, 0.6578449010848999, 0.6263729929924011, 0.6230695843696594, 0.5952000617980957, 0.5524922609329224, 0.5580438375473022, 0.5340988039970398, 0.5221964716911316, 0.5218973159790039, 0.5128383636474609, 0.5119901299476624, 0.49108371138572693, 0.4843216836452484, 0.48254314064979553, 0.4828024208545685, 0.4830867648124695, 0.4771279990673065, 0.4684893488883972, 0.4703896939754486, 0.4565543532371521, 0.44725245237350464, 0.44111043214797974, 0.43651121854782104, 0.43333515524864197, 0.43336954712867737, 0.43558236956596375, 0.42556560039520264, 0.4286779761314392, 0.44771480560302734, 0.42958715558052063, 0.4284433126449585, 0.43429744243621826, 0.4220959544181824, 0.41669607162475586, 0.40850797295570374, 0.4329598844051361, 0.4160834550857544, 0.4066735506057739, 0.42155131697654724, 0.42167332768440247, 0.4263068735599518, 0.4028327167034149, 0.38731706142425537, 0.3997381329536438, 0.4225536286830902, 0.3939140737056732, 0.39204972982406616, 0.4054015278816223, 0.4097776710987091, 0.41649001836776733, 0.411156564950943, 0.3983343541622162, 0.3980582654476166, 0.4119560420513153], "val_accuracy": [0.4009999930858612, 0.4573333263397217, 0.6566666960716248, 0.6909999847412109, 0.721666693687439, 0.7423333525657654, 0.746999979019165, 0.7643333077430725, 0.7639999985694885, 0.7670000195503235, 0.781333327293396, 0.7789999842643738, 0.7963333129882812, 0.7953333258628845, 0.7956666946411133, 0.8006666898727417, 0.8063333630561829, 0.8159999847412109, 0.8216666579246521, 0.8196666836738586, 0.812333345413208, 0.8100000023841858, 0.8153333067893982, 0.8230000138282776, 0.8196666836738586, 0.828000009059906, 0.8323333263397217, 0.8386666774749756, 0.8379999995231628, 0.8410000205039978, 0.8420000076293945, 0.8399999737739563, 0.8493333458900452, 0.8519999980926514, 0.8420000076293945, 0.8386666774749756, 0.8373333215713501, 0.8420000076293945, 0.8523333072662354, 0.8483333587646484, 0.8556666374206543, 0.8523333072662354, 0.8569999933242798, 0.8603333234786987, 0.8583333492279053, 0.862666666507721, 0.8600000143051147, 0.8619999885559082, 0.859000027179718, 0.8656666874885559, 0.8643333315849304, 0.8676666617393494, 0.8669999837875366, 0.8686666488647461, 0.871666669845581, 0.8679999709129333, 0.8673333525657654, 0.8686666488647461, 0.8663333058357239, 0.8663333058357239]}, "mapping_values": [1, 10, 5, 5, 3, 6, 3, 3, 1, 7, 4, 3, 2, 2, 1, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 1, 3, 1, 3], [1, 0, 1, 0, 2], [32, 99, 27], [0, 0, 1, 0, 1, 1, 0, 1, 0], [2, 1, 2, 2, 9], [3, 3, 3, 4], [0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 4, 1], [0, 0, 4], [0, 58], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [0, 1, 7, 3, 1], [7, 5, 0, 4, 3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 9, 5, 4, 1, 7, 4, 3, 2, 10, 5, 5, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(grad, tf.math.add(grad, grad)), tf.math.add(grad, tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.add(grad, tf.math.multiply(grad, tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 3, 9, 3], [0, 0, 0, 2, 2], [83, 99, 98], [0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 1, 2, 4, 5], [0, 3, 3, 1], [0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 4, 3, 7, 5, 4, 2, 0, 1, 0, 1], [0, 0, 4, 0, 3, 5, 3, 0], [0, 58, 63, 41], [0, 1, 1], [2], [1, 7], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 9, 5, 4, 1, 20, 12, 8, 4, 3, 1, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.square(grad), grad), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)), tf.math.subtract(tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), sigma))), tf.math.subtract(grad, sigma)), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, grad)", "other_info": {"loss": [37182872.0, 2.3141250610351562, 2.305685520172119, 897276515975168.0, 2.3242151737213135, 2.3093223571777344], "accuracy": [0.09615638852119446, 0.09140139818191528, 0.09549596905708313, 0.09813763201236725, 0.09206181764602661, 0.09879804402589798], "val_loss": [2.3218603134155273, 2.3078925609588623, 2.3039026260375977, 2.3361003398895264, 2.314028263092041, 2.306077480316162], "val_accuracy": [0.10499999672174454, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 8, 3], [0, 0, 1, 0, 2], [83, 65, 59], [1, 0, 1, 1, 1, 1], [0, 1, 0], [5, 3, 3], [0], [0, 0, 1, 0, 1, 0, 1], [5, 0, 4, 3], [0, 0, 6], [0, 58], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 1, 0, 1, 0, 3, 2, 1, 1, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [1197599488.0, 24392542208.0, 112527941632.0, 318026416128.0, 676719558656.0, 1243816132608.0], "accuracy": [0.10342095047235489, 0.09787346422672272, 0.10157178342342377, 0.09642054885625839, 0.0956280529499054, 0.10368511080741882], "val_loss": [5886681088.0, 47476822016.0, 160666025984.0, 381351264256.0, 745437462528.0, 1288796766208.0], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 1, 3, 1, 3], [0, 0, 1, 0, 2], [83, 49, 27], [0, 0, 1, 0, 1, 1], [0, 1, 2], [0, 3, 3], [0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [7, 0, 7, 3, 0, 7, 3, 6, 4, 0, 7, 8, 3], [0, 0, 4, 0, 7, 3, 1, 5, 3, 3], [0, 58, 37], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 6, 3, 3, 1, 23, 13, 10, 3, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, sigma)), tf.math.pow(tf.math.negative(alpha), tf.math.add(tf.math.sqrt(tf.math.multiply(grad, sigma)), sigma))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [5593223168.0, 149689679872.0, 787549978624.0, 2291823017984.0, 5055589122048.0, 9336118050816.0], "accuracy": [0.09655263274908066, 0.10342095047235489, 0.09615638852119446, 0.09826971590518951, 0.10077928751707077, 0.10421344637870789], "val_loss": [31119720448.0, 312929812480.0, 1136502898688.0, 2792745336832.0, 5572596334592.0, 9766880411648.0], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]