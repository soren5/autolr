[{"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 4, 4, 0, 6, 6, 5, 8, 8, 3, 1, 9, 2, 4, 3, 0, 0, 2, 2, 6, 8, 2, 0], [0, 3, 2, 2, 0, 0, 0, 3, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 3, 2, 1, 0, 1, 0, 2, 1, 3, 0, 0, 1, 3, 1, 1], [40, 90, 9, 32, 75, 72, 41, 36, 92, 59, 94, 44, 32, 3, 92], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [8, 6, 1, 9, 9, 2, 9, 2, 5, 6, 2, 6, 2, 0, 2, 9, 4, 0, 6, 8, 0], [3, 1, 3, 3, 2, 0, 1, 3, 3, 3, 3, 4, 4], [56, 23, 80, 41, 8, 43, 2], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [5, 1, 2, 1, 6, 0, 9, 4, 4, 0, 4, 9, 4, 8, 6, 2, 9, 2, 5, 0, 5, 0, 6, 8, 8, 8], [6, 3, 4, 4, 1, 4, 1, 3, 4, 4, 0, 4, 0, 6, 4, 1, 5, 2, 4, 2, 0, 0, 1], [26, 96, 69, 31, 37, 10, 11], [0, 1, 0, 0, 1, 1, 1], [3, 9, 5, 4], [7, 4, 4], [44, 94]], "fitness": -0.836571455001831, "mapping_values": [1, 38, 23, 15, 6, 2, 1, 1, 0, 25, 17, 8, 3, 3, 2, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(grad, tf.math.pow(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.math.multiply(grad, tf.math.subtract(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.divide_no_nan(grad, tf.math.sqrt(grad))))), tf.math.add(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), grad))))))), grad))), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), sigma), tf.math.pow(tf.math.pow(grad, grad), tf.math.negative(tf.math.pow(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(grad, alpha), sigma)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.053544759750366, 1.4485598802566528, 1.0459917783737183, 0.8948510885238647, 0.8337013125419617, 0.7623955011367798, 0.7329530715942383, 0.692961573600769, 0.682184100151062, 0.6389985084533691, 0.6169694066047668, 0.6125375628471375, 0.5949364900588989, 0.5727182626724243, 0.5709196925163269, 0.5392940044403076, 0.5331481695175171, 0.5337285995483398, 0.5238287448883057, 0.5088149905204773, 0.5000421404838562, 0.4871189594268799, 0.48255655169487, 0.48359739780426025, 0.45808857679367065, 0.4632602334022522, 0.4380056858062744, 0.4374856948852539, 0.4324765205383301, 0.4321722388267517, 0.4417993724346161], "accuracy": [0.310130774974823, 0.4943864643573761, 0.6275261044502258, 0.6765288710594177, 0.6808875799179077, 0.7074362635612488, 0.7189275026321411, 0.733588695526123, 0.7405890822410583, 0.7586844563484192, 0.7627789974212646, 0.7605336308479309, 0.7728173136711121, 0.7798177003860474, 0.7872143983840942, 0.798309326171875, 0.7961959838867188, 0.8005547523498535, 0.7991018295288086, 0.8095363974571228, 0.8113855719566345, 0.8156121969223022, 0.8201030492782593, 0.8178576231002808, 0.8298771381378174, 0.8281601071357727, 0.8376700282096863, 0.8384625315666199, 0.8355567455291748, 0.8396512866020203, 0.8347642421722412], "val_loss": [1.5893256664276123, 0.9891709089279175, 0.8144311308860779, 0.8527584671974182, 0.6868306398391724, 0.6801744699478149, 0.6229130029678345, 0.6163037419319153, 0.5913573503494263, 0.566313624382019, 0.6269000768661499, 0.5582507848739624, 0.5262290239334106, 0.5386340022087097, 0.486083447933197, 0.5068565607070923, 0.4664488434791565, 0.4842345714569092, 0.5174497365951538, 0.4489116966724396, 0.4624590575695038, 0.4639573097229004, 0.44786036014556885, 0.4655648469924927, 0.43431299924850464, 0.41272538900375366, 0.42575573921203613, 0.42971691489219666, 0.4222746193408966, 0.41546231508255005, 0.41334202885627747], "val_accuracy": [0.42633333802223206, 0.6566666960716248, 0.6886666417121887, 0.6456666588783264, 0.737333357334137, 0.7226666808128357, 0.7630000114440918, 0.7606666684150696, 0.778333306312561, 0.7860000133514404, 0.7229999899864197, 0.7703333497047424, 0.7853333353996277, 0.7773333191871643, 0.8183333277702332, 0.7916666865348816, 0.8206666707992554, 0.8033333420753479, 0.7889999747276306, 0.831333339214325, 0.8186666369438171, 0.8206666707992554, 0.8240000009536743, 0.8173333406448364, 0.8326666951179504, 0.8463333249092102, 0.8346666693687439, 0.8346666693687439, 0.8443333506584167, 0.8370000123977661, 0.8453333377838135]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 6, 4, 4, 0, 6, 6, 5, 8, 8, 3, 1, 9, 2, 4, 3, 0, 0, 2, 2, 6, 8, 2, 0], [3, 2, 1, 2, 2, 0, 1, 2, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 3, 2, 1, 0, 1, 0, 2, 1, 3, 0, 0, 1, 3, 1, 1], [40, 90, 9, 32, 75, 72, 41, 36, 92, 59, 94, 44, 32, 3, 92], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [8, 6, 8, 9, 9, 0, 9, 2, 5, 6, 2, 6, 2, 0, 2, 9, 4, 0, 6, 8, 0], [3, 1, 3, 3, 2, 0, 1, 3, 3, 3, 3, 4, 4], [56, 23, 80, 41, 8, 43, 2], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 9, 2, 5, 6, 4, 5, 3, 6, 0, 4, 2, 6, 8, 6, 2, 2, 2, 5, 0, 5, 0, 6, 8, 8, 8], [6, 4, 4, 4, 1, 4, 1, 3, 4, 3, 0, 4, 0, 6, 4, 1, 5, 2, 4, 2, 0, 0, 1], [26, 68, 60, 31, 37, 10, 11], [0, 1, 1, 0, 1, 1, 1], [3, 9, 5, 4], [4, 0, 4], [44, 94]], "fitness": -0.828000009059906, "mapping_values": [1, 17, 10, 7, 1, 5, 4, 1, 1, 35, 22, 13, 3, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, tf.math.divide_no_nan(grad, tf.math.pow(tf.math.pow(tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.square(tf.math.sqrt(alpha)), tf.math.sqrt(grad)), grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.square(grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(grad), tf.math.pow(tf.math.add(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), alpha), sigma)), grad)), sigma)), tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.square(tf.math.negative(tf.math.square(tf.math.negative(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.0519790649414062, 1.442220687866211, 0.9934060573577881, 0.8838527202606201, 0.8361436128616333, 0.7553901076316833, 0.7173487544059753, 0.6950214505195618, 0.6507135033607483, 0.6458842158317566, 0.6158387064933777, 0.5878646969795227, 0.5804744362831116, 0.5838915109634399, 0.547622799873352, 0.5403628349304199, 0.5529305934906006, 0.5083616971969604, 0.528049111366272, 0.5076294541358948, 0.4945065379142761, 0.47494015097618103, 0.49685806035995483, 0.4726329743862152, 0.46432819962501526, 0.46794748306274414, 0.4451354146003723, 0.4357578456401825, 0.4555695056915283, 0.42184147238731384, 0.42846235632896423, 0.41927987337112427, 0.41624361276626587, 0.41447001695632935, 0.4073833227157593, 0.4180576205253601, 0.38462188839912415, 0.3840528130531311, 0.38448697328567505, 0.38814106583595276, 0.3937777578830719, 0.36028170585632324, 0.3605170249938965, 0.3647858500480652, 0.36755070090293884, 0.3591826558113098, 0.3601239025592804, 0.35143908858299255, 0.37044471502304077, 0.33274057507514954], "accuracy": [0.3139611780643463, 0.48949941992759705, 0.6407343745231628, 0.6630563735961914, 0.6860388517379761, 0.7120591998100281, 0.7349095344543457, 0.7405890822410583, 0.7508915662765503, 0.7497028112411499, 0.7629110813140869, 0.7759873270988464, 0.7810064554214478, 0.7769119143486023, 0.7874785661697388, 0.7895918488502502, 0.7891955971717834, 0.8075551390647888, 0.7951393723487854, 0.8062343001365662, 0.8094043135643005, 0.8235371708869934, 0.8100647330284119, 0.8214238286018372, 0.8230088353157043, 0.8222163319587708, 0.8286884427070618, 0.8343679904937744, 0.8203672170639038, 0.8370096683502197, 0.8378021121025085, 0.8416325449943542, 0.8421608805656433, 0.8445383906364441, 0.8438779711723328, 0.8416325449943542, 0.8500858545303345, 0.8551049828529358, 0.8576145768165588, 0.8490291833877563, 0.8491612672805786, 0.8667283058166504, 0.8644828796386719, 0.8640866279602051, 0.8622375130653381, 0.8598600029945374, 0.8618412613868713, 0.8658037185668945, 0.857218325138092, 0.8750495314598083], "val_loss": [1.5435595512390137, 0.8757615685462952, 0.8577834367752075, 0.8194684386253357, 0.640462338924408, 0.6498898863792419, 0.6510079503059387, 0.5961953401565552, 0.5707681775093079, 0.5938429236412048, 0.5611158013343811, 0.5800879597663879, 0.5440080761909485, 0.5360729098320007, 0.5232895016670227, 0.579198956489563, 0.49929460883140564, 0.4916112422943115, 0.5025148987770081, 0.48930472135543823, 0.4788191616535187, 0.4952491819858551, 0.4893781840801239, 0.47586536407470703, 0.4731626808643341, 0.4528976380825043, 0.4615623354911804, 0.4676249921321869, 0.47327983379364014, 0.4396679699420929, 0.4570510983467102, 0.43078622221946716, 0.4722605049610138, 0.42624223232269287, 0.48655787110328674, 0.42068424820899963, 0.4587840139865875, 0.46572574973106384, 0.4210566282272339, 0.43090465664863586, 0.4039069414138794, 0.4326499104499817, 0.4722342789173126, 0.41857150197029114, 0.3919195830821991, 0.42239832878112793, 0.41938313841819763, 0.48270800709724426, 0.4109515845775604, 0.42533648014068604], "val_accuracy": [0.390666663646698, 0.6793333292007446, 0.6449999809265137, 0.6903333067893982, 0.7540000081062317, 0.7506666779518127, 0.7239999771118164, 0.7680000066757202, 0.7873333096504211, 0.7649999856948853, 0.7799999713897705, 0.7670000195503235, 0.7820000052452087, 0.7876666784286499, 0.7926666736602783, 0.7696666717529297, 0.812333345413208, 0.8133333325386047, 0.8100000023841858, 0.8083333373069763, 0.8169999718666077, 0.8036666512489319, 0.8106666803359985, 0.8176666498184204, 0.8223333358764648, 0.831333339214325, 0.8296666741371155, 0.8230000138282776, 0.8230000138282776, 0.8399999737739563, 0.8296666741371155, 0.8443333506584167, 0.8136666417121887, 0.8426666855812073, 0.8146666884422302, 0.8450000286102295, 0.8299999833106995, 0.8216666579246521, 0.8456666469573975, 0.8399999737739563, 0.8539999723434448, 0.8373333215713501, 0.8186666369438171, 0.8450000286102295, 0.859333336353302, 0.8486666679382324, 0.8443333506584167, 0.8199999928474426, 0.8523333072662354, 0.8433333039283752]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 9, 2, 1, 2, 6, 7, 1, 5, 6, 8, 7, 3, 1, 2, 9, 2, 0, 2, 2, 0, 8, 0], [3, 2, 1, 2, 0, 0, 1, 2, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 3, 2, 1, 0, 1, 0, 2, 1, 3, 0, 0, 1, 3, 1, 1], [40, 90, 9, 32, 75, 72, 41, 36, 92, 59, 94, 44, 32, 3, 92], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [8, 6, 1, 9, 9, 0, 9, 2, 5, 6, 2, 6, 2, 0, 2, 9, 4, 0, 6, 8, 0], [3, 1, 3, 3, 2, 0, 1, 3, 3, 3, 3, 4, 4], [56, 23, 80, 41, 8, 43, 2], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 6, 2, 5, 8, 0, 2, 8, 4, 0, 4, 0, 6, 8, 6, 2, 2, 2, 5, 0, 5, 0, 6, 8, 8, 8], [2, 4, 4, 4, 1, 4, 1, 3, 4, 3, 0, 4, 0, 6, 4, 1, 5, 2, 4, 2, 0, 0, 1], [26, 96, 60, 31, 37, 10, 11], [0, 1, 0, 0, 1, 1, 1], [3, 9, 5, 4], [7, 0, 4], [50, 94]], "fitness": -0.8277142643928528, "mapping_values": [1, 5, 2, 3, 0, 1, 0, 1, 0, 30, 18, 12, 1, 3, 2, 1, 1], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, tf.math.multiply(grad, alpha)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.sqrt(beta)), tf.math.negative(tf.math.add(grad, tf.math.sqrt(tf.math.pow(grad, grad))))), tf.math.negative(tf.math.pow(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(grad, alpha), sigma)), tf.math.add(grad, sigma)))))), tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(grad, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.433290958404541, 1.9084659814834595, 1.688886046409607, 1.2611167430877686, 1.025822639465332, 0.8191363215446472, 0.7992920875549316, 0.7431383728981018, 0.6934244632720947, 0.6905133128166199, 0.6271436810493469, 0.6509900093078613, 0.6022427082061768, 0.5978701114654541, 0.5680052638053894, 0.5661281943321228, 0.5652315616607666, 0.5420602560043335, 0.5091270804405212, 0.4876573383808136, 0.49889111518859863, 0.4780729413032532, 0.4849773645401001, 0.46577295660972595, 0.4579941928386688, 0.45595046877861023, 0.43508127331733704, 0.43769344687461853, 0.4437083601951599, 0.4224841892719269, 0.40656375885009766], "accuracy": [0.25597676634788513, 0.3813234567642212, 0.4415532946586609, 0.5531634092330933, 0.6242240071296692, 0.6939638257026672, 0.6955488324165344, 0.7180029153823853, 0.7363624572753906, 0.7351737022399902, 0.759609043598175, 0.7518161535263062, 0.7681944370269775, 0.7753269076347351, 0.7889314293861389, 0.7865539789199829, 0.7848368883132935, 0.7891955971717834, 0.8074230551719666, 0.8133667707443237, 0.8157442808151245, 0.8177255392074585, 0.8128384351730347, 0.8330471515655518, 0.8234050869941711, 0.8300092220306396, 0.837141752243042, 0.8381983637809753, 0.8319904804229736, 0.8379341959953308, 0.8477083444595337], "val_loss": [1.9411691427230835, 1.4877592325210571, 1.0969821214675903, 0.8664368391036987, 0.761081874370575, 0.7109208703041077, 0.7446540594100952, 0.6275666356086731, 0.5799196362495422, 0.5637848973274231, 0.5474129319190979, 0.5442832708358765, 0.6005886197090149, 0.5224580764770508, 0.5487167835235596, 0.5616633296012878, 0.5073943138122559, 0.48607251048088074, 0.5414121747016907, 0.48160210251808167, 0.5002956986427307, 0.45620372891426086, 0.49127721786499023, 0.49889445304870605, 0.4503194987773895, 0.4403823912143707, 0.5197936296463013, 0.501277506351471, 0.43718862533569336, 0.43658581376075745, 0.43119198083877563], "val_accuracy": [0.45633333921432495, 0.5473333597183228, 0.6026666760444641, 0.6696666479110718, 0.7089999914169312, 0.7253333330154419, 0.7089999914169312, 0.7450000047683716, 0.784333348274231, 0.7923333048820496, 0.7766666412353516, 0.7886666655540466, 0.7746666669845581, 0.7926666736602783, 0.7893333435058594, 0.7863333225250244, 0.8143333196640015, 0.8243333101272583, 0.7850000262260437, 0.8196666836738586, 0.7979999780654907, 0.8289999961853027, 0.824999988079071, 0.8040000200271606, 0.8389999866485596, 0.8473333120346069, 0.8149999976158142, 0.8096666932106018, 0.8473333120346069, 0.8420000076293945, 0.8410000205039978]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 3, 9, 2, 1, 2, 6, 7, 1, 5, 6, 8, 7, 3, 1, 2, 9, 2, 0, 2, 2, 0, 8, 0], [3, 2, 1, 2, 0, 0, 1, 2, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 3, 2, 1, 0, 1, 0, 2, 1, 3, 0, 0, 1, 3, 1, 1], [40, 90, 9, 32, 75, 72, 41, 36, 92, 59, 94, 44, 32, 3, 92], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [8, 6, 1, 9, 9, 0, 9, 2, 5, 6, 2, 6, 2, 0, 2, 9, 4, 0, 6, 8, 0], [3, 1, 3, 3, 2, 0, 1, 3, 3, 3, 3, 4, 4], [56, 23, 80, 41, 8, 43, 2], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [5, 1, 2, 1, 6, 2, 6, 4, 4, 0, 4, 9, 4, 2, 4, 0, 9, 2, 5, 0, 5, 0, 6, 8, 8, 8], [6, 4, 4, 4, 1, 4, 1, 3, 4, 4, 0, 4, 0, 6, 4, 1, 5, 2, 4, 2, 0, 0, 1], [26, 96, 60, 31, 37, 10, 11], [0, 1, 1, 0, 1, 1, 1], [3, 9, 5, 4], [7, 0, 4], [44, 94]], "fitness": -0.8271428346633911, "mapping_values": [1, 5, 3, 2, 1, 6, 5, 1, 2, 37, 24, 13, 4, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, tf.math.multiply(grad, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), grad), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.pow(grad, tf.math.negative(tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad))), tf.math.pow(tf.math.add(tf.math.pow(tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.square(alpha)), sigma))), tf.math.negative(grad))), grad), tf.math.square(tf.math.negative(tf.math.divide_no_nan(tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), grad)))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.0342366695404053, 1.5078731775283813, 1.0619661808013916, 0.9343844056129456, 0.8138722777366638, 0.7786762714385986, 0.7155962586402893, 0.6915530562400818, 0.6617618799209595, 0.6297208666801453, 0.6514320969581604, 0.6335828304290771, 0.5906880497932434, 0.570364236831665, 0.5736308097839355, 0.5514229536056519, 0.5319547653198242, 0.5298635363578796, 0.5268322229385376, 0.5165941119194031, 0.4881165623664856, 0.49767303466796875, 0.4948762357234955, 0.47936949133872986, 0.4771638512611389, 0.46637988090515137, 0.45915359258651733, 0.4534933567047119, 0.4457339942455292], "accuracy": [0.3238673806190491, 0.4744419455528259, 0.6165632009506226, 0.6625280380249023, 0.6973979473114014, 0.7131158113479614, 0.7363624572753906, 0.7428345084190369, 0.7534011602401733, 0.7640998363494873, 0.7512878179550171, 0.7638356685638428, 0.7754589915275574, 0.7891955971717834, 0.7844406366348267, 0.7979130744934082, 0.8014793395996094, 0.8010830879211426, 0.8026680946350098, 0.8053097128868103, 0.8222163319587708, 0.8124422430992126, 0.8123101592063904, 0.8212917447090149, 0.82683926820755, 0.829216718673706, 0.8321225643157959, 0.8314621448516846, 0.8374059200286865], "val_loss": [1.760806679725647, 1.0611706972122192, 0.8156023025512695, 0.7637654542922974, 0.6608132123947144, 0.7310160994529724, 0.614815890789032, 0.5905587673187256, 0.5877398252487183, 0.6329532861709595, 0.5754550099372864, 0.5866304636001587, 0.5340468883514404, 0.5600367188453674, 0.510299801826477, 0.5075732469558716, 0.5133943557739258, 0.48540034890174866, 0.49355390667915344, 0.525816023349762, 0.46276968717575073, 0.4974369704723358, 0.44891324639320374, 0.45557066798210144, 0.4494207501411438, 0.4497871398925781, 0.4442600905895233, 0.44062018394470215, 0.44127312302589417], "val_accuracy": [0.3696666657924652, 0.5986666679382324, 0.6806666851043701, 0.7213333249092102, 0.7519999742507935, 0.7113333344459534, 0.7506666779518127, 0.7723333239555359, 0.7696666717529297, 0.7293333411216736, 0.7693333625793457, 0.7476666569709778, 0.7953333258628845, 0.7776666879653931, 0.8043333292007446, 0.8033333420753479, 0.8009999990463257, 0.8243333101272583, 0.8153333067893982, 0.7913333177566528, 0.8276666402816772, 0.8059999942779541, 0.8346666693687439, 0.8396666646003723, 0.8263333439826965, 0.8270000219345093, 0.8383333086967468, 0.8373333215713501, 0.8393333554267883]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [5, 2, 4, 4, 0, 6, 6, 5, 0, 8, 3, 1, 9, 2, 4, 3, 0, 0, 2, 2, 6, 8, 2, 0], [0, 3, 2, 2, 0, 0, 0, 3, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 3, 2, 1, 0, 1, 0, 2, 1, 3, 0, 0, 1, 3, 1, 1], [11, 57, 63, 32, 48, 15, 41, 36, 92, 59, 94, 44, 32, 3, 92], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [8, 6, 1, 9, 9, 0, 9, 2, 5, 6, 2, 6, 2, 0, 2, 9, 4, 0, 6, 8, 0], [3, 1, 3, 3, 2, 0, 1, 3, 3, 3, 3, 4, 4], [56, 23, 80, 41, 8, 43, 2], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [5, 1, 4, 3, 6, 2, 9, 4, 4, 4, 3, 9, 4, 8, 6, 2, 9, 2, 5, 0, 5, 0, 6, 8, 8, 8], [4, 4, 0, 4, 1, 4, 1, 3, 4, 3, 0, 4, 0, 6, 4, 1, 5, 2, 4, 2, 0, 0, 1], [26, 43, 60, 31, 37, 10, 11], [0, 1, 1, 0, 1, 1, 1], [3, 9, 5, 4], [7, 0, 4], [44, 94]], "fitness": -0.8205714225769043, "mapping_values": [1, 2, 1, 1, 1, 1, 0, 1, 0, 6, 3, 3, 1, 3, 1, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.subtract(tf.math.pow(grad, grad), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.0488967895507812, 1.6116738319396973, 1.0722764730453491, 0.8971134424209595, 0.8589597344398499, 0.7676660418510437, 0.7240678071975708, 0.722323477268219, 0.6677878499031067, 0.6683783531188965, 0.6272375583648682, 0.6131733059883118, 0.6363446116447449, 0.5739001035690308, 0.5818783640861511, 0.5730223059654236, 0.550208568572998, 0.5366294980049133, 0.5234233140945435, 0.5259610414505005, 0.5163782238960266, 0.4945313632488251, 0.49083027243614197, 0.47369858622550964, 0.46953776478767395, 0.466143935918808, 0.4601367712020874, 0.4504798650741577, 0.4376482665538788, 0.4459560513496399, 0.45698943734169006, 0.4164515435695648, 0.41604357957839966, 0.4208212196826935, 0.40461525321006775, 0.400983989238739, 0.4178754389286041, 0.39331793785095215, 0.38911372423171997, 0.37937793135643005, 0.3947809636592865, 0.365008145570755, 0.37338873744010925, 0.36827003955841064, 0.369704931974411, 0.34740135073661804], "accuracy": [0.31382909417152405, 0.47008320689201355, 0.6063928008079529, 0.6725663542747498, 0.6779817938804626, 0.7100779414176941, 0.7260599732398987, 0.7268524765968323, 0.7456082701683044, 0.7411174178123474, 0.7622507214546204, 0.7651565074920654, 0.7593448758125305, 0.7843085527420044, 0.78113853931427, 0.783119797706604, 0.7897239327430725, 0.800290584564209, 0.8029322624206543, 0.7994980812072754, 0.8037247657775879, 0.8169330358505249, 0.8137630224227905, 0.8220842480659485, 0.826310932636261, 0.8224804997444153, 0.8301413059234619, 0.8304054737091064, 0.8359529972076416, 0.8341038227081299, 0.8212917447090149, 0.8448025584220886, 0.8487650156021118, 0.8404437899589539, 0.8482366800308228, 0.8500858545303345, 0.8413683772087097, 0.8540483713150024, 0.8506141901016235, 0.852331280708313, 0.8514066934585571, 0.8632941246032715, 0.860652506351471, 0.8588033318519592, 0.8595958352088928, 0.8685774803161621], "val_loss": [1.795839786529541, 1.0249719619750977, 0.8290910720825195, 0.7693488001823425, 0.7284773588180542, 0.7224057912826538, 0.7430470585823059, 0.6127085089683533, 0.6128957271575928, 0.5845900177955627, 0.6105531454086304, 0.5618252158164978, 0.5559055805206299, 0.5340975522994995, 0.5408728718757629, 0.5541045069694519, 0.494855135679245, 0.48315343260765076, 0.5106570720672607, 0.4820580780506134, 0.48601293563842773, 0.4730263948440552, 0.45296353101730347, 0.4550013840198517, 0.45257237553596497, 0.45238667726516724, 0.43325328826904297, 0.4591808319091797, 0.4526318311691284, 0.4249648451805115, 0.41520264744758606, 0.3993336856365204, 0.3921898305416107, 0.3986700773239136, 0.43101057410240173, 0.4017925560474396, 0.4005800783634186, 0.4230667054653168, 0.38164812326431274, 0.3846580684185028, 0.37760505080223083, 0.3859085738658905, 0.3953246772289276, 0.3893550932407379, 0.38735172152519226, 0.4201628565788269], "val_accuracy": [0.42533332109451294, 0.6613333225250244, 0.7170000076293945, 0.7016666531562805, 0.7080000042915344, 0.7173333168029785, 0.6959999799728394, 0.7556666731834412, 0.7416666746139526, 0.7749999761581421, 0.7603333592414856, 0.7793333530426025, 0.7806666493415833, 0.7950000166893005, 0.7856666445732117, 0.777999997138977, 0.8109999895095825, 0.8190000057220459, 0.8100000023841858, 0.8193333148956299, 0.8236666917800903, 0.824999988079071, 0.831333339214325, 0.8286666870117188, 0.8320000171661377, 0.8259999752044678, 0.8479999899864197, 0.8223333358764648, 0.8346666693687439, 0.8513333201408386, 0.8453333377838135, 0.8523333072662354, 0.8579999804496765, 0.8583333492279053, 0.8410000205039978, 0.8493333458900452, 0.8500000238418579, 0.8460000157356262, 0.859666645526886, 0.8610000014305115, 0.8646666407585144, 0.8573333621025085, 0.859333336353302, 0.859333336353302, 0.859000027179718, 0.8473333120346069]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 3, 9, 2, 1, 2, 6, 7, 1, 5, 6, 8, 7, 3, 1, 2, 9, 2, 0, 2, 2, 0, 8, 0], [0, 3, 2, 2, 0, 0, 0, 3, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 3, 2, 1, 0, 1, 0, 2, 1, 3, 0, 0, 1, 3, 1, 1], [40, 57, 63, 32, 48, 15, 41, 36, 92, 59, 94, 44, 32, 3, 92], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [8, 6, 1, 9, 9, 0, 9, 2, 5, 6, 2, 6, 2, 0, 2, 9, 4, 0, 6, 8, 0], [3, 1, 3, 3, 2, 0, 1, 3, 3, 3, 3, 4, 4], [56, 23, 80, 41, 8, 43, 2], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 6, 2, 5, 8, 0, 2, 8, 4, 0, 4, 0, 6, 8, 6, 2, 9, 2, 5, 0, 5, 0, 6, 8, 8, 8], [6, 4, 7, 4, 3, 4, 1, 3, 4, 3, 0, 4, 0, 6, 4, 1, 5, 2, 4, 2, 0, 0, 1], [26, 96, 60, 31, 37, 10, 11], [0, 1, 1, 0, 1, 1, 1], [3, 9, 5, 4], [4, 0, 4], [44, 94]], "fitness": -0.8157142996788025, "mapping_values": [1, 5, 3, 2, 2, 1, 0, 1, 0, 13, 8, 5, 0, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.sqrt(grad)), grad), tf.math.negative(grad)), tf.math.add(tf.math.sqrt(grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.030479669570923, 1.4992841482162476, 1.0205851793289185, 0.8828041553497314, 0.7951870560646057, 0.732546329498291, 0.7074027061462402, 0.6805555820465088, 0.6473700404167175, 0.6423833966255188, 0.6114751696586609, 0.6025153398513794, 0.5962340235710144, 0.5693139433860779, 0.5796416997909546, 0.5529406070709229, 0.5226502418518066, 0.5258001089096069, 0.5064059495925903, 0.4954627454280853, 0.5020689964294434, 0.4912067651748657, 0.47012946009635925, 0.4759427607059479, 0.4599189758300781], "accuracy": [0.33958524465560913, 0.48064985871315, 0.6217144131660461, 0.6807554960250854, 0.7040021419525146, 0.7218332886695862, 0.7292299270629883, 0.7353057861328125, 0.750231146812439, 0.7576277852058411, 0.767930269241333, 0.7697794437408447, 0.7753269076347351, 0.7845727205276489, 0.7817989587783813, 0.7895918488502502, 0.8070268034934998, 0.7994980812072754, 0.8059701323509216, 0.8115176558494568, 0.8113855719566345, 0.81548011302948, 0.8193105459213257, 0.8224804997444153, 0.83119797706604], "val_loss": [1.8124252557754517, 1.0261856317520142, 0.9320464134216309, 0.836580753326416, 0.6948868036270142, 0.6652874946594238, 0.6422603726387024, 0.6139907836914062, 0.6355203986167908, 0.5801244378089905, 0.5829223990440369, 0.6121903657913208, 0.5650190711021423, 0.5266611576080322, 0.5045210123062134, 0.49706050753593445, 0.508199155330658, 0.47444334626197815, 0.49041983485221863, 0.45465919375419617, 0.4744017422199249, 0.46423763036727905, 0.47222959995269775, 0.4406713843345642, 0.44679397344589233], "val_accuracy": [0.43033334612846375, 0.6076666712760925, 0.6213333606719971, 0.6783333420753479, 0.7316666841506958, 0.7360000014305115, 0.7379999756813049, 0.7580000162124634, 0.7419999837875366, 0.768666684627533, 0.7799999713897705, 0.753000020980835, 0.7853333353996277, 0.8073333501815796, 0.8116666674613953, 0.8166666626930237, 0.793666660785675, 0.8276666402816772, 0.8190000057220459, 0.8336666822433472, 0.8220000267028809, 0.8233333230018616, 0.8143333196640015, 0.8336666822433472, 0.8336666822433472]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 3, 9, 2, 1, 2, 6, 7, 1, 5, 6, 8, 7, 3, 1, 2, 9, 2, 0, 2, 2, 0, 8, 0], [1, 3, 2, 2, 0, 0, 0, 3, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 3, 2, 1, 0, 1, 0, 2, 1, 3, 0, 0, 1, 3, 1, 1], [40, 90, 9, 32, 75, 72, 41, 36, 92, 59, 94, 44, 32, 3, 92], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [8, 6, 1, 9, 9, 0, 9, 2, 5, 6, 2, 6, 2, 0, 2, 9, 4, 0, 6, 8, 0], [3, 1, 3, 3, 2, 0, 1, 3, 3, 3, 3, 4, 4], [56, 23, 80, 41, 8, 43, 2], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [5, 1, 2, 1, 6, 2, 9, 4, 4, 0, 4, 9, 4, 8, 6, 2, 9, 2, 5, 0, 5, 0, 6, 8, 8, 8], [6, 4, 4, 4, 1, 4, 1, 3, 4, 3, 0, 4, 0, 6, 4, 1, 5, 2, 4, 2, 0, 0, 1], [26, 96, 60, 31, 37, 10, 11], [0, 0, 1, 0, 0, 1, 1], [4, 9, 5, 4], [7, 0, 4], [44, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 3, 2, 1, 1, 0, 1, 0, 26, 17, 9, 3, 3, 2, 1, 1], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), alpha), grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad)), tf.math.pow(tf.math.pow(grad, grad), tf.math.negative(tf.math.pow(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(grad, alpha), sigma)), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), grad)", "other_info": {"loss": [2.3031060695648193, 2.302530527114868, 2.305814504623413, 2.3333323001861572, 2.6245408058166504, 5.648352146148682], "accuracy": [0.10381719470024109, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3029251098632812, 2.3044984340667725, 2.315187454223633, 2.401217222213745, 3.542567014694214, 9.174461364746094], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 3, 9, 2, 1, 2, 6, 7, 1, 5, 6, 8, 7, 3, 1, 2, 9, 2, 0, 2, 2, 0, 8, 0], [0, 3, 2, 2, 0, 0, 0, 3, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 3, 2, 1, 0, 1, 0, 2, 1, 3, 0, 0, 1, 3, 1, 1], [40, 90, 9, 32, 75, 72, 41, 36, 92, 59, 94, 44, 32, 3, 92], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [8, 6, 1, 9, 9, 0, 9, 2, 5, 6, 2, 6, 2, 0, 2, 9, 4, 0, 6, 8, 0], [3, 1, 3, 3, 2, 0, 1, 3, 3, 3, 3, 4, 4], [56, 23, 80, 41, 8, 43, 2], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [5, 1, 2, 1, 6, 2, 6, 4, 4, 0, 4, 9, 4, 8, 6, 2, 9, 2, 5, 0, 5, 0, 6, 8, 8, 8], [6, 4, 4, 1, 1, 4, 1, 3, 4, 3, 0, 4, 0, 6, 4, 1, 5, 2, 4, 2, 0, 0, 1], [26, 96, 60, 31, 37, 10, 11], [0, 1, 1, 0, 1, 1, 1], [1, 9, 5, 4], [7, 0, 4], [44, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 1, 2, 1, 7, 6, 1, 2, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [114991.734375, 2.3140275478363037, 2.30566668510437, 2.3035197257995605, 2.303196430206299, 2.3028955459594727, 2.3028976917266846, 2.302928924560547, 2.3030171394348145, 2.3030452728271484, 2.302959680557251, 2.3030035495758057, 2.3029139041900635, 2.3028948307037354, 2.3030080795288086], "accuracy": [0.09338264167308807, 0.09060890227556229, 0.09206181764602661, 0.09642054885625839, 0.09113723784685135, 0.09140139818191528, 0.09259014576673508, 0.09351472556591034, 0.0956280529499054, 0.08994849026203156, 0.09998679161071777, 0.09179764986038208, 0.09259014576673508, 0.09893012791872025, 0.09879804402589798], "val_loss": [2.321510076522827, 2.3074588775634766, 2.3036792278289795, 2.302908182144165, 2.302605390548706, 2.302584409713745, 2.3024868965148926, 2.3025848865509033, 2.30263352394104, 2.302518844604492, 2.302712917327881, 2.302755832672119, 2.30271315574646, 2.302665948867798, 2.3025407791137695], "val_accuracy": [0.10066666454076767, 0.10100000351667404, 0.09600000083446503, 0.09600000083446503, 0.10233332961797714, 0.10066666454076767, 0.10100000351667404, 0.10100000351667404, 0.1003333330154419, 0.10333333164453506, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09600000083446503, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 5, 4, 4, 0, 6, 6, 5, 8, 8, 3, 1, 9, 2, 4, 3, 0, 0, 2, 2, 6, 8, 2, 0], [1, 3, 2, 2, 0, 0, 0, 3, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 3, 2, 1, 0, 1, 0, 2, 1, 3, 0, 0, 1, 3, 1, 1], [40, 57, 63, 32, 48, 15, 41, 36, 92, 59, 94, 44, 32, 3, 92], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [8, 6, 1, 9, 9, 0, 9, 2, 5, 6, 2, 6, 2, 0, 2, 9, 4, 0, 6, 8, 0], [3, 1, 3, 3, 2, 0, 1, 3, 3, 3, 3, 4, 4], [56, 23, 80, 41, 8, 43, 2], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [5, 1, 2, 1, 6, 2, 9, 4, 4, 0, 4, 9, 4, 8, 6, 2, 9, 2, 5, 0, 5, 0, 6, 8, 8, 8], [6, 4, 4, 4, 1, 4, 1, 3, 4, 3, 0, 4, 0, 6, 4, 1, 5, 2, 4, 2, 0, 0, 1], [26, 41, 60, 31, 37, 10, 11], [0, 1, 0, 0, 1, 0, 1, 1], [3, 3, 5, 4], [7, 0, 4, 7], [44, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 2, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 4, 4, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(alpha, tf.math.square(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(grad, tf.math.multiply(tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 3, 6, 2, 1, 2, 6, 7, 1, 5, 6, 8, 7, 3, 1, 2, 9, 2, 0, 2, 2, 0, 8, 0], [0, 3, 2, 2, 0, 0, 0, 3, 2, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 3, 2, 1, 0, 1, 0, 2, 1, 3, 0, 0, 1, 3, 1, 1], [40, 90, 9, 32, 75, 72, 41, 36, 92, 59, 94, 44, 32, 3, 92], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [8, 6, 1, 2, 8, 0, 9, 2, 5, 6, 2, 6, 2, 0, 2, 9, 4, 0, 6, 8, 0], [3, 1, 3, 3, 2, 0, 1, 3, 3, 3, 3, 4, 4], [56, 23, 80, 41, 8, 43, 2], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [5, 2, 2, 1, 6, 2, 9, 4, 4, 0, 4, 9, 4, 8, 6, 2, 2, 2, 5, 0, 5, 0, 6, 8, 8, 8], [6, 4, 4, 4, 1, 4, 1, 3, 4, 3, 0, 4, 0, 6, 4, 1, 5, 2, 4, 2, 0, 0, 1], [26, 96, 60, 31, 37, 10, 11], [0, 1, 1, 0, 1, 1, 1], [9, 9, 5, 4], [7, 0, 4], [44, 94]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 9, 10, 4, 10, 7, 3, 1, 19, 12, 7, 2, 1, 1, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, grad), tf.math.subtract(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), grad), grad), grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.negative(grad)), alpha), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.add(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad)), tf.math.pow(grad, grad)), alpha), tf.math.pow(tf.math.negative(grad), tf.math.pow(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3035972118377686, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]