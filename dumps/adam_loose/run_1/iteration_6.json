[{"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 0, 9, 3, 8, 0], [0, 2, 1], [39, 39, 91, 82], [1], [8, 4, 8, 2, 9, 0, 6, 0, 5, 9, 4, 6, 9, 7, 4, 8, 6, 6, 1, 7, 4, 7, 2, 3, 5, 2, 1, 8, 8, 8, 8, 7, 0, 4, 4, 7, 5, 8, 5], [0, 2, 0, 3], [32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [6, 5, 0, 5, 8, 8, 2, 5, 9, 5], [3, 0, 7, 3, 0, 7, 4], [90, 13, 36, 95], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 6, 9, 6, 8, 1, 4, 1, 4, 2, 0], [5, 3, 1, 7, 3, 7, 6, 0, 2, 0], [86, 63, 1, 7, 46, 35]], "fitness": -0.3805714249610901, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 1, 11, 9, 2, 2, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.negative(tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), sigma)))))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.5518438816070557, 2.2442941665649414, 2.438020944595337, 2.3053793907165527, 2.302899122238159, 2.274021625518799], "accuracy": [0.20472857356071472, 0.1472724825143814, 0.15995244681835175, 0.09985470771789551, 0.09840179979801178, 0.16391493380069733], "val_loss": [2.049572229385376, 2.2446892261505127, 2.3065736293792725, 2.3032824993133545, 2.300286054611206, 1.9143214225769043], "val_accuracy": [0.37400001287460327, 0.12466666847467422, 0.10133333504199982, 0.09933333098888397, 0.11266666650772095, 0.26866665482521057]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [3, 3, 1, 7, 3, 8, 7, 1], [2, 3, 2, 3, 1, 0, 0, 2], [39, 39, 95, 82], [1], [0, 3, 9, 2], [0, 2, 0, 3], [2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 8, 5, 5, 5, 7, 2, 9, 2, 8, 8, 4, 6, 2, 4], [0, 1, 1, 4, 1, 2, 3, 3], [62, 56, 29], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1], [5, 0, 1, 7, 3, 7, 6, 0, 2, 0], [86, 63, 1, 7, 46, 35]], "fitness": -0.3117142915725708, "mapping_values": [1, 16, 8, 8, 2, 1, 0, 1, 1, 12, 9, 3, 2, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.multiply(tf.math.subtract(tf.math.add(tf.math.multiply(grad, tf.math.sqrt(tf.math.add(grad, tf.math.subtract(grad, alpha)))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.square(tf.math.square(tf.math.square(tf.math.add(tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), alpha)), alpha)))))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.4396204948425293, 2.2648420333862305, 2.3039472103118896, 2.249990701675415, 2.5346226692199707, 2.303997755050659, 2.303370714187622, 2.302954912185669, 2.3031342029571533], "accuracy": [0.18702945113182068, 0.18253862857818604, 0.10011887550354004, 0.16840575635433197, 0.12521463632583618, 0.09800554811954498, 0.09496764093637466, 0.10249637067317963, 0.09325055778026581], "val_loss": [2.241835832595825, 2.304421901702881, 2.302388906478882, 3.4510107040405273, 2.304812431335449, 2.3029675483703613, 2.302703380584717, 2.302687406539917, 2.3027002811431885], "val_accuracy": [0.26633334159851074, 0.09933333098888397, 0.09933333098888397, 0.31166666746139526, 0.09966666996479034, 0.09966666996479034, 0.10166666656732559, 0.09966666996479034, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 9], [2, 3, 2, 3], [76], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [1, 4, 7, 2, 9, 0, 6, 0, 5, 9, 4, 6, 9, 7, 4, 8, 6, 6, 1, 7, 4, 7, 2, 3, 5, 2, 1, 8, 8, 8, 8, 7, 0, 4, 4, 7, 5, 8, 5], [1, 3, 2, 5, 3, 4, 3, 3, 5, 5, 1, 5, 2, 4, 5, 3, 4, 1, 3, 5, 3, 0, 2, 4, 4, 5, 0], [31, 4], [1, 1], [0, 3, 9], [0, 6, 0, 4, 5, 1], [62], [1, 1, 0, 0, 1, 0, 0, 1, 1], [6, 2, 9, 6, 8, 1, 4, 1, 4, 2, 0], [7, 7, 3, 5], []], "fitness": -0.28285714983940125, "mapping_values": [1, 1, 0, 1, 0, 3, 1, 2, 0, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(alpha, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.286128044128418, 2.2771382331848145, 2.745145797729492, 2.305137872695923, 2.32747483253479, 2.304503917694092], "accuracy": [0.19957733154296875, 0.18201030790805817, 0.11517632752656937, 0.11966715008020401, 0.11161009222269058, 0.09245806187391281], "val_loss": [2.104313850402832, 2.309345245361328, 2.3318300247192383, 2.1879823207855225, 2.304858446121216, 2.301614284515381], "val_accuracy": [0.2763333320617676, 0.09700000286102295, 0.09700000286102295, 0.2526666522026062, 0.09799999743700027, 0.04399999976158142]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [5, 2, 5, 1, 7, 7], [0, 3, 2, 3], [39, 39, 91, 82], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [8, 9, 8, 2, 9, 0, 6, 0, 5, 9, 4, 6, 9, 7, 4, 8, 6, 6, 1, 7, 4, 7, 2, 3, 5, 2, 1, 8, 8, 8, 8, 7, 0, 4, 4, 7, 5, 8, 5], [1, 3, 5, 3, 3, 4, 3, 3, 5, 5, 1, 5, 2, 4, 5, 3, 4, 1, 3, 5, 3, 0, 2, 4, 4, 5, 0], [74], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 5, 0, 1, 8, 6, 6, 5, 9, 8, 5, 4, 1, 8, 4, 2, 9, 3, 5, 6], [2, 6, 7, 3, 0, 7, 1, 6, 4], [90, 13, 98, 95], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 9, 6, 8, 1, 4, 1, 4, 2, 0], [4, 7, 3, 5], [92]], "fitness": -0.20428571105003357, "mapping_values": [1, 4, 2, 2, 1, 2, 2, 0, 1, 29, 20, 9, 3, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.negative(tf.math.subtract(tf.math.sqrt(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(beta)), grad)), tf.math.square(grad)))), tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.math.pow(sigma, tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad)))), alpha), tf.math.square(tf.math.divide_no_nan(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.add(grad, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3890295028686523, 2.372060537338257, 2.3095409870147705, 2.4707250595092773, 2.3550565242767334, 2.3939430713653564, 2.3024914264678955, 3.0624561309814453, 9396131.0, 5974841.0], "accuracy": [0.1888786107301712, 0.16021661460399628, 0.10196803510189056, 0.15797120332717896, 0.14080041646957397, 0.13512085378170013, 0.10949676483869553, 0.19759608805179596, 0.10394927859306335, 0.08070268481969833], "val_loss": [2.3053841590881348, 2.3345296382904053, 2.2932798862457275, 2.224896192550659, 2.365199327468872, 2.307699203491211, 2.2813918590545654, 2547.069091796875, 6393188.5, 3737780.0], "val_accuracy": [0.18733333051204681, 0.09466666728258133, 0.10300000011920929, 0.10300000011920929, 0.20933333039283752, 0.09466666728258133, 0.13066667318344116, 0.10899999737739563, 0.03566666692495346, 0.06966666877269745]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 2, 8, 1, 7, 7], [0, 2, 1, 0, 3, 3], [76, 3], [1], [0, 3, 9, 2], [3, 2, 0, 3], [15], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [6, 5, 0, 5, 8, 9, 4, 5, 9, 5], [0, 5, 7, 5, 7, 2, 3, 1], [47, 13, 36, 95], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 6, 9, 6, 8, 1, 4, 1, 4, 2, 0], [5, 3, 1, 7, 3, 7, 6, 0, 2, 0], [46, 90]], "fitness": -0.1428571492433548, "mapping_values": [1, 12, 6, 6, 2, 1, 0, 1, 0, 11, 10, 1, 3, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(grad, tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))), tf.math.add(grad, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.negative(tf.math.square(tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.square(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [3.034773111343384, 2.305882692337036, 2.256582021713257, 2.304159641265869, 2.3035356998443604, 2.303035020828247, 2.3029258251190186], "accuracy": [0.1814819723367691, 0.09879804402589798, 0.15031039714813232, 0.09879804402589798, 0.10011887550354004, 0.09893012791872025, 0.09840179979801178], "val_loss": [2.308586359024048, 2.300435781478882, 2.3050050735473633, 2.3030614852905273, 2.303016185760498, 2.3025693893432617, 2.3023335933685303], "val_accuracy": [0.10100000351667404, 0.14900000393390656, 0.09866666793823242, 0.0989999994635582, 0.09866666793823242, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 2, 6, 1, 4, 0, 6, 2, 0, 0, 1, 0, 5, 1], [1, 0, 2, 3, 3], [76], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 4, 8, 2, 9, 0, 6, 0, 5, 9, 4, 6, 9, 7, 4, 8, 6, 6, 1, 7, 4, 7, 2, 3, 5, 2, 1, 8, 8, 8, 8, 7, 0, 4, 4, 7, 5, 8, 5], [1, 3, 5, 5, 3, 4, 3, 3, 5, 5, 1, 5, 2, 4, 5, 3, 4, 1, 3, 5, 3, 0, 2, 4, 4, 5, 0], [73, 74, 9], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 8, 5, 5, 1, 7, 2, 0, 2, 8, 8, 9, 6, 2, 4], [2, 1, 4, 5, 7, 2, 3, 1], [62], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [8], [5, 1, 2, 2, 4, 1, 0, 6, 6, 6], [46, 90]], "fitness": -0.10171428322792053, "mapping_values": [1, 8, 4, 4, 1, 7, 5, 2, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), grad), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(alpha, tf.math.sqrt(tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.340831995010376, 15.363298416137695, 2.313302755355835, 2.305565595626831, 2.304385185241699, 2.3033344745635986], "accuracy": [0.18742570281028748, 0.12442214041948318, 0.10170386731624603, 0.09536388516426086, 0.09628847241401672, 0.09338264167308807], "val_loss": [2.292412042617798, 2.3217508792877197, 2.3053605556488037, 2.3027970790863037, 2.302959442138672, 2.3028669357299805], "val_accuracy": [0.10300000011920929, 0.09933333098888397, 0.09933333098888397, 0.10066666454076767, 0.10066666454076767, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [3, 9], [0, 2, 1], [76], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [8, 4, 7, 2, 9, 0, 6, 0, 5, 9, 4, 6, 9, 7, 4, 8, 6, 6, 1, 7, 4, 7, 2, 3, 5, 2, 1, 8, 8, 8, 8, 7, 0, 4, 4, 7, 5, 8, 5], [0, 2, 0, 3], [80, 4], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [6, 5, 0, 5, 8, 8, 6, 6, 9, 5], [0, 1, 7], [23, 3], [1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 6, 9, 6, 8, 1, 4, 1, 4, 2, 0], [5, 3, 1, 7, 3, 7, 6, 0, 2, 0], [86, 63, 1, 7, 46, 35]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 2, 1, 1, 1, 12, 9, 3, 2, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), alpha), grad)))))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3243794441223145, 2.243788480758667, 2.2855124473571777, 2.3055012226104736, 2.303046226501465, 2.274970293045044, 2.3061256408691406], "accuracy": [0.2106723040342331, 0.1888786107301712, 0.16880200803279877, 0.09906221181154251, 0.09642054885625839, 0.15229164063930511, 0.09377889335155487], "val_loss": [2.2594857215881348, 2.3080317974090576, 2.3091564178466797, 2.302816152572632, 2.3008227348327637, 2.3073363304138184, 2.303187608718872], "val_accuracy": [0.09966666996479034, 0.10133333504199982, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [3, 2, 6, 1, 4, 0, 6, 2, 0, 0, 1, 0, 5, 1], [0, 2, 1, 1, 2, 0, 1, 0, 1, 1], [76, 3, 78, 12], [1], [0, 3, 9, 2], [1, 3, 5, 5, 3, 4, 3, 3, 5, 5, 1, 5, 2, 4, 5, 3, 4, 1, 3, 5, 3, 0, 2, 4, 4, 5, 0], [73, 74, 9], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 8, 5, 5, 1, 7, 2, 2, 2, 8, 8, 9, 6, 2, 4], [2], [62], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 2, 0, 6, 8, 1, 8, 1, 4, 2, 0], [5, 1, 2, 2, 4, 1, 0, 6, 6, 6], [59, 90]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 12, 9, 3, 1, 0, 1, 0, 3, 2, 1, 0, 14, 8, 6, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.pow(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.negative(grad), tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), alpha))), tf.math.subtract(tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.add(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.sqrt(beta), tf.math.subtract(tf.math.sqrt(tf.math.subtract(beta, grad)), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [6, 0, 9, 3, 8, 0], [2, 3, 2, 3], [76], [1], [0, 3, 9, 2], [1, 3, 5, 5, 3, 4, 3, 3, 5, 5, 1, 5, 2, 4, 5, 3, 4, 1, 3, 5, 3, 0, 2, 4, 4, 5, 0], [74], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 5, 5, 5, 9, 7, 2, 2, 2, 8, 8, 9, 6, 2, 4], [2, 4, 4, 5, 7, 2, 4, 1], [62], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 0, 6, 8, 1, 4, 1, 4, 2, 0], [5, 0, 1, 7, 3, 7, 6, 0, 2, 0], [46, 90]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 3, 1, 1, 1, 0, 1, 0, 5, 4, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.negative(grad), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.square(tf.math.square(beta)))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.4512200355529785, 2.304161787033081, 2.303199291229248, 2.303116798400879, 2.3028817176818848, 2.3029448986053467], "accuracy": [0.16761326789855957, 0.09681680053472519, 0.09126931428909302, 0.09628847241401672, 0.09906221181154251, 0.09866596013307571], "val_loss": [2.303990602493286, 2.3027265071868896, 2.3025925159454346, 2.3025970458984375, 2.302638292312622, 2.302640199661255], "val_accuracy": [0.10133333504199982, 0.09966666996479034, 0.09966666996479034, 0.0989999994635582, 0.09966666996479034, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 0, 9, 3, 8, 0], [0, 3, 2, 3], [39, 39, 91, 82], [1], [8, 4, 8, 2, 9, 0, 6, 0, 5, 9, 4, 6, 9, 7, 4, 8, 6, 6, 1, 7, 4, 7, 2, 3, 5, 2, 1, 8, 8, 8, 8, 7, 0, 4, 4, 7, 5, 8, 5], [1, 3, 5, 5, 3, 4, 3, 3, 5, 5, 1, 5, 2, 4, 5, 3, 4, 1, 3, 5, 3, 0, 2, 4, 4, 5, 0], [74], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [6, 5, 0, 1, 8, 6, 6, 5, 9, 0, 4, 4, 1, 8, 4, 5, 9], [2, 6, 7, 3, 0, 7, 4], [90, 13, 63, 95], [1, 1, 0, 0, 1, 0, 0, 1, 1], [6, 2, 9, 6, 8, 1, 4, 1, 4, 2, 0], [4, 7, 3, 5], [86, 63, 1, 7, 46, 35]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 2, 2, 1, 1, 0, 1, 0, 14, 10, 4, 1, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.math.negative(tf.math.subtract(tf.math.sqrt(tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), grad))), grad))), tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [12.411628723144531, 2.312519073486328, 2.3059215545654297, 2.30491042137146, 2.3042280673980713, 2.3034486770629883, 2.3036556243896484, 2.303548812866211], "accuracy": [0.17382116615772247, 0.09549596905708313, 0.09959053993225098, 0.09985470771789551, 0.09113723784685135, 0.10051512718200684, 0.09087307006120682, 0.09311848133802414], "val_loss": [2.3181607723236084, 2.3064749240875244, 2.304150104522705, 2.303253173828125, 2.3028695583343506, 2.3028347492218018, 2.302595376968384, 2.302619457244873], "val_accuracy": [0.09866666793823242, 0.10100000351667404, 0.10133333504199982, 0.09866666793823242, 0.10000000149011612, 0.09866666793823242, 0.10000000149011612, 0.09866666793823242]}}]