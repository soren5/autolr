[{"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 2, 5, 1, 7, 7], [2, 0, 3, 0, 3, 0], [39, 39, 95, 82], [1], [0, 3, 9, 9], [0, 2, 0, 3], [2], [1, 1], [0], [0], [59], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 9, 6, 8, 1, 4, 1, 4, 2, 0], [5, 0, 1, 7, 3, 7, 6, 0, 2, 0], [86, 63, 1, 7, 46, 35]], "fitness": -0.8105714321136475, "mapping_values": [1, 6, 3, 3, 1, 1, 0, 1, 1, 1, 0, 1, 1, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.161626100540161, 1.8323954343795776, 1.937166690826416, 1.4427608251571655, 1.0606744289398193, 0.9519193768501282, 0.8199757933616638, 0.7201428413391113, 0.6821091175079346, 0.6537215709686279, 0.6181542873382568, 0.6230335831642151, 0.5899350047111511, 0.5498010516166687, 0.5506724119186401, 0.5286604762077332, 0.5474339723587036, 0.5039288401603699, 0.4862266778945923, 0.4708396792411804, 0.4980039894580841, 0.4936123490333557, 0.47185367345809937, 0.4402962327003479, 0.451793909072876, 0.42545902729034424, 0.432625949382782, 0.4165709614753723, 0.39822396636009216, 0.41237708926200867, 0.39484381675720215, 0.3857957720756531, 0.3747650384902954, 0.3810175955295563, 0.39035481214523315, 0.3677055239677429, 0.37522751092910767], "accuracy": [0.28820499777793884, 0.38726720213890076, 0.3607185184955597, 0.5215955376625061, 0.6218464970588684, 0.650640606880188, 0.698718786239624, 0.7301545143127441, 0.7430986762046814, 0.7510236501693726, 0.7675340175628662, 0.759609043598175, 0.774270236492157, 0.7866860628128052, 0.7897239327430725, 0.7989697456359863, 0.7902522683143616, 0.8025360107421875, 0.8177255392074585, 0.8185180425643921, 0.8117818236351013, 0.8132346868515015, 0.8204993009567261, 0.8300092220306396, 0.8285563588142395, 0.8360850811004639, 0.8308017253875732, 0.8416325449943542, 0.8469158411026001, 0.8457271456718445, 0.8508783578872681, 0.8584070801734924, 0.8603883385658264, 0.8532558679580688, 0.8541803956031799, 0.8551049828529358, 0.8537842035293579], "val_loss": [2.067119598388672, 2.9662370681762695, 1.5396063327789307, 0.9946385025978088, 1.035682201385498, 0.9099015593528748, 0.6329813599586487, 0.6059814691543579, 0.5887283682823181, 0.5837526917457581, 0.5995794534683228, 0.5420518517494202, 0.4941844344139099, 0.5837548971176147, 0.4871356189250946, 0.5420991778373718, 0.4567433297634125, 0.46455278992652893, 0.4370150864124298, 0.48133841156959534, 0.5222544074058533, 0.4539879560470581, 0.41974130272865295, 0.42133501172065735, 0.4110947549343109, 0.458899587392807, 0.3942582309246063, 0.3997582197189331, 0.4386329650878906, 0.39485228061676025, 0.4193449020385742, 0.36446264386177063, 0.4640156328678131, 0.40159493684768677, 0.3898754417896271, 0.4656135141849518, 0.38206738233566284], "val_accuracy": [0.41866666078567505, 0.10066666454076767, 0.5316666960716248, 0.6356666684150696, 0.6013333201408386, 0.6439999938011169, 0.7666666507720947, 0.7683333158493042, 0.7730000019073486, 0.762333333492279, 0.7526666522026062, 0.7963333129882812, 0.8103333115577698, 0.7720000147819519, 0.8073333501815796, 0.7873333096504211, 0.8303333520889282, 0.8216666579246521, 0.8306666612625122, 0.8193333148956299, 0.8119999766349792, 0.8320000171661377, 0.840666651725769, 0.8450000286102295, 0.8510000109672546, 0.8190000057220459, 0.8539999723434448, 0.8556666374206543, 0.8389999866485596, 0.8546666502952576, 0.8453333377838135, 0.8659999966621399, 0.8209999799728394, 0.8496666550636292, 0.8479999899864197, 0.8246666789054871, 0.8556666374206543]}}, {"genotype": [[0], [1], [3], [3, 0], [39, 39, 91, 82], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 3, 9, 2], [0, 0, 4, 1], [31, 4], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 2, 3, 6, 9, 1, 3, 7, 3, 8, 0, 0, 9], [0, 6, 0, 4, 5, 1], [59, 13, 36, 95], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1], [5, 0, 1, 7, 3, 7, 6, 0, 2, 0], [86, 92, 1, 7, 46, 35]], "fitness": -0.24571429193019867, "mapping_values": [1, 1, 0, 1, 0, 4, 3, 1, 2, 19, 13, 6, 4, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.multiply(grad, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)), tf.math.negative(grad)), tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), alpha))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3959975242614746, 2.9800775051116943, 2.2099690437316895, 2.3053081035614014, 2.671623706817627, 2.3135719299316406, 2.305004596710205], "accuracy": [0.2071060687303543, 0.148064985871315, 0.19865275919437408, 0.11293092370033264, 0.16642451286315918, 0.09932637959718704, 0.09668471664190292], "val_loss": [2.269721269607544, 2.255950927734375, 2.3097822666168213, 2.281893014907837, 2.3220114707946777, 2.3066060543060303, 2.30365252494812], "val_accuracy": [0.09966666996479034, 0.2536666691303253, 0.10400000214576721, 0.19300000369548798, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], [6, 0, 9, 3, 8, 0], [1, 3, 2, 3], [76], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [8, 4, 7, 2, 9, 0, 6, 0, 5, 9, 4, 6, 9, 7, 4, 8, 6, 6, 1, 7, 4, 7, 2, 3, 5, 2, 1, 8, 8, 8, 8, 7, 0, 4, 4, 7, 5, 8, 5], [1, 3, 2, 5, 3, 4, 3, 3, 5, 5, 1, 5, 2, 4, 5, 3, 4, 1, 3, 5, 3, 0, 2, 4, 4, 5, 0], [55, 99, 68], [1], [0], [2], [62], [1, 1, 0, 0, 1, 0, 0, 1, 1], [8], [4, 7, 3, 5], []], "fitness": -0.19057142734527588, "mapping_values": [1, 4, 3, 1, 1, 13, 9, 4, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.negative(alpha), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.pow(tf.math.add(tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), alpha), tf.math.negative(grad)), tf.math.divide_no_nan(tf.math.negative(tf.math.square(beta)), grad))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [879.0130615234375, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.20961563289165497, 0.10910051316022873, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [104840.515625, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1926666647195816, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [3, 2, 6, 1, 6, 0, 7, 2], [0, 2, 1, 2, 3, 0, 1, 2], [39, 39], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 3, 9, 9], [0, 3, 0, 3], [73, 94, 9], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [6, 2, 3, 8, 1, 4], [0, 3, 2, 7, 1, 4], [38], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 3, 6, 2, 8, 2, 5, 1, 9], [5, 1, 2, 2, 6, 4, 0, 6], [16, 99, 17, 0, 61, 1, 69, 75]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 8, 8, 2, 4, 4, 0, 2, 12, 6, 6, 1, 15, 9, 6, 1], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, alpha)), tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.negative(tf.math.add(tf.math.add(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.math.pow(beta, grad))), alpha), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.sqrt(beta), tf.math.add(tf.math.square(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), grad))), grad))", "other_info": {"loss": [7.242575415615103e+26, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09232597798109055, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 0, 3, 8, 2, 7, 6], [2, 1, 0, 2, 1, 0, 2], [68, 41], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 3, 9, 9], [1], [16, 16], [0, 1], [0, 5, 8, 6, 5, 3, 3, 5], [2, 3, 5, 7], [], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 7, 3, 5, 3, 6, 0, 8, 7, 6, 3, 7, 0], [7, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 2, 4, 4, 0, 2, 2, 1, 1, 0, 13, 7, 6, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.sqrt(alpha))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(tf.math.divide_no_nan(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(grad, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.multiply(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.2825396060943604, 2.3040287494659424, 2.303175926208496, 2.3031153678894043, 2.3029510974884033, 2.3030006885528564, 2.3029232025146484, 2.3029415607452393], "accuracy": [0.1372341811656952, 0.09734513610601425, 0.09219389408826828, 0.09668471664190292, 0.09351472556591034, 0.09536388516426086, 0.09325055778026581, 0.09840179979801178], "val_loss": [2.3046391010284424, 2.3030989170074463, 2.302717685699463, 2.302678346633911, 2.3027613162994385, 2.3026273250579834, 2.3026254177093506, 2.30263352394104], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.10133333504199982, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [9, 0, 9, 3, 8, 0], [2, 3, 2, 3], [76], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [8, 4, 7, 2, 6, 8, 6, 0, 5, 9, 4, 6, 6, 7, 4, 8, 6, 6, 1, 7, 4, 7, 2, 3, 5, 2, 1, 8, 8, 8, 8, 7, 0, 4, 4, 7, 5, 8, 5], [1, 3, 2, 3, 3, 4, 3, 3, 5, 5, 1, 5, 2, 4, 5, 3, 4, 1, 3, 5, 3, 0, 2, 4, 4, 5, 0], [55, 99, 68], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 7, 6, 0, 4, 6, 8, 0, 5, 6, 2, 1, 8], [3, 4, 3, 5, 0, 7, 3, 6, 6], [62], [1, 1, 0, 0, 1, 0, 0, 1, 1], [8], [5, 7, 3, 5], []], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 0, 1, 0, 23, 14, 9, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(sigma, tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.pow(tf.math.divide_no_nan(grad, tf.math.sqrt(sigma)), grad)), tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(tf.math.subtract(sigma, tf.math.sqrt(grad)), grad)))))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [388.136962890625, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2044644057750702, 0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3470.234619140625, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 2, 5, 2, 7, 7, 6], [2, 3, 2, 3, 3, 1, 1], [39, 39, 91, 82], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 7, 9, 9], [1, 3, 2, 5, 3, 4, 3, 3, 5, 5, 1, 5, 2, 4, 5, 3, 4, 1, 3, 5, 3, 0, 2, 4, 4, 5, 0], [55, 99, 68], [0, 1], [0], [2], [59], [0, 1, 0, 0, 1, 0, 0, 1, 1], [8], [5, 0, 1, 7, 3, 7, 6, 0, 2, 0], [86, 92, 1, 7, 46, 35]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 4, 3, 1, 1, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [9, 0, 9, 3, 8, 0], [0, 0, 3, 0, 3, 0], [43, 14, 82], [1], [8, 4, 7, 2, 0, 6, 6, 0, 5, 9, 4, 6, 6, 7, 4, 8, 6, 6, 1, 7, 4, 7, 2, 3, 5, 2, 1, 8, 8, 8, 8, 7, 0, 4, 4, 7, 5, 8, 5], [0, 2, 0, 3], [55, 99, 68], [1], [0], [2], [62], [0, 1, 0, 0, 1, 0, 0, 1, 1], [8], [5, 0, 1, 7, 3, 7, 6, 0, 2, 0], []], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 0, 9, 3, 8, 0], [2, 3, 2, 3], [24], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [8, 8, 7, 2, 0, 6, 6, 0, 5, 2, 4, 6, 0, 7, 4, 8, 6, 6, 1, 7, 4, 7, 2, 3, 5, 2, 1, 8, 8, 8, 8, 7, 0, 4, 4, 7, 5, 8, 5], [2, 3, 4, 1, 3, 3, 3, 4], [55, 99, 68, 56], [0, 1], [0], [2], [], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1], [5, 7, 3, 5], [30]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 6, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0, 3, 1, 2, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.sqrt(grad), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(grad, grad)", "other_info": {"loss": [168532768.0, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.16351869702339172, 0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [9.78500750988104e+26, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.016333334147930145, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 9, 3, 4, 9, 7, 1], [0, 3, 2, 3, 0], [45, 97, 14], [1], [], [5, 3, 4], [66], [0, 1], [0], [1], [59], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [3, 7, 3, 5, 3, 6, 0, 8, 9, 2, 3, 7, 0], [7, 0, 0, 3, 0, 2, 3, 1, 2, 0], [86, 92, 1, 7, 46, 35]], "fitness": -0.0917142853140831, "mapping_values": [1, 7, 5, 2, 3, 1, 0, 1, 0, 2, 1, 1, 0, 14, 9, 5, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.square(tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), sigma), tf.math.sqrt(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.309939384460449, 2.3092286586761475, 2.3088555335998535, 2.3096938133239746, 2.3104264736175537, 2.309018850326538], "accuracy": [0.09602430462837219, 0.09721305221319199, 0.09074098616838455, 0.08889182657003403, 0.08677849918603897, 0.08915598690509796], "val_loss": [2.3097083568573, 2.309577465057373, 2.3094403743743896, 2.3093013763427734, 2.309169054031372, 2.3090403079986572], "val_accuracy": [0.08666666597127914, 0.08533333241939545, 0.08533333241939545, 0.08399999886751175, 0.08433333039283752, 0.0833333358168602]}}]