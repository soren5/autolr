[{"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 1, 8, 1, 9, 1, 1, 2, 5, 6, 0, 8, 9, 8, 5, 5, 2, 5, 6, 4, 3, 9], [2, 0, 2, 0, 2, 0, 0, 1, 3], [18, 98, 97, 0, 80], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 8, 9, 3, 5, 8, 0, 5, 0, 6, 6, 1, 2, 2, 0, 1, 8, 5, 3, 4, 5, 8, 3, 4, 0, 2, 0, 8, 6, 2, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 0, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [3, 3, 2, 1, 3, 1, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 2, 0, 3, 5, 1, 3, 3, 0, 2, 3, 0, 5, 0, 3, 3, 3, 3, 1, 1, 1], [99, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [6, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [94, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.3831428587436676, "mapping_values": [1, 7, 5, 2, 2, 4, 3, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), grad)), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.sqrt(tf.constant(1.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.2990620136260986, 2.3828306198120117, 2.295498847961426, 2.3043575286865234, 2.3006064891815186, 2.2627673149108887], "accuracy": [0.20961563289165497, 0.1492537260055542, 0.12772421538829803, 0.10315678268671036, 0.1158367469906807, 0.16497160494327545], "val_loss": [1.9317970275878906, 2.3037803173065186, 2.3000648021698, 2.302079200744629, 2.2874879837036133, 1.9885916709899902], "val_accuracy": [0.3843333423137665, 0.09866666793823242, 0.09966666996479034, 0.16599999368190765, 0.11666666716337204, 0.3499999940395355]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1], [0, 1, 2, 1, 2, 1, 1, 2, 5, 5, 0, 8, 9, 8, 5, 5, 2, 5, 6, 4, 3, 9], [1, 1, 0, 0, 3, 0, 0, 2, 3], [24, 98, 97, 0, 80], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 5, 9, 3, 5, 8, 2, 5, 0, 0, 6, 1, 2, 2, 0, 1, 8, 5, 3, 4, 5, 8, 3, 4, 0, 2, 0, 8, 6, 2, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 0, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [0, 1, 3, 3, 3, 1, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 0, 0, 3, 5, 1, 3, 3, 1, 2, 3, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [99, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [6, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [61, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.2977142930030823, "mapping_values": [1, 2, 1, 1, 0, 4, 3, 1, 2, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.8043060302734375, 2.240389108657837, 2.3125929832458496, 2.2946672439575195, 2.2286248207092285, 2.261782646179199, 2.306429624557495, 2.3031911849975586, 2.3021388053894043], "accuracy": [0.20552106201648712, 0.18319904804229736, 0.17157575488090515, 0.11398758739233017, 0.22533351182937622, 0.1352529376745224, 0.09879804402589798, 0.1010434553027153, 0.10870426893234253], "val_loss": [2.300633430480957, 2.3169968128204346, 2.305293560028076, 2.059730291366577, 2.302371025085449, 2.3100686073303223, 2.3032913208007812, 2.3021810054779053, 2.299057722091675], "val_accuracy": [0.09666666388511658, 0.10966666787862778, 0.10333333164453506, 0.2930000126361847, 0.10333333164453506, 0.10066666454076767, 0.10300000011920929, 0.10000000149011612, 0.12300000339746475]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 2, 8, 1, 2, 1, 1, 9, 5, 8, 0, 6, 9, 8, 5, 5, 2, 5, 6, 4, 3, 9], [2, 0, 2, 0, 2, 0, 0, 1, 3], [85, 5, 58, 77, 3, 46], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [6, 5, 3, 0, 5, 2, 2, 5, 1, 0, 6, 1, 1, 9, 0, 3, 5, 5, 3, 3, 8, 8, 3, 4, 0, 6, 9, 8, 6, 2, 4, 4, 2, 5, 6, 2, 6, 8, 8, 2, 6, 8, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [3, 3, 1, 1, 3, 1, 2, 3, 0, 3, 2, 3, 3, 3, 3, 3, 2, 0, 3, 5, 1, 3, 3, 0, 2, 0, 0, 5, 0, 3, 3, 3, 3, 1, 1, 1], [74, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [6, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [2, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.2822857201099396, "mapping_values": [1, 19, 13, 6, 5, 22, 14, 8, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.subtract(grad, tf.math.subtract(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.sqrt(grad))), tf.math.negative(tf.math.divide_no_nan(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.square(tf.math.multiply(tf.math.negative(grad), tf.math.square(tf.math.add(tf.math.add(tf.math.square(alpha), tf.math.subtract(alpha, grad)), tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(alpha, tf.math.subtract(beta, grad)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.324587106704712, 2.196180820465088, 2.3649611473083496, 2.307751178741455, 2.3036506175994873, 2.3032424449920654], "accuracy": [0.1954827606678009, 0.2207106053829193, 0.14555540680885315, 0.09959053993225098, 0.09972262382507324, 0.0956280529499054], "val_loss": [1.9921303987503052, 2.303058385848999, 2.311655044555664, 2.3041369915008545, 2.3027126789093018, 2.30245304107666], "val_accuracy": [0.28166666626930237, 0.10199999809265137, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 2, 8, 2, 1, 1, 2, 5, 3, 0, 8, 9, 8, 5, 5, 2, 5, 6, 4, 3, 9], [2, 0, 2, 0, 2, 0, 0, 1, 3], [24, 60, 89, 0, 80], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 4, 9, 3, 5, 4, 2, 5, 0, 0, 6, 1, 2, 2, 0, 1, 8, 5, 3, 4, 5, 8, 3, 4, 0, 2, 0, 8, 6, 2, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 0, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [3, 3, 1, 1, 3, 1, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 2, 0, 3, 5, 1, 3, 3, 0, 2, 3, 0, 5, 0, 3, 3, 3, 3, 1, 1, 1], [99, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [5, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [6, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [94, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.24285714328289032, "mapping_values": [1, 20, 12, 8, 4, 5, 3, 2, 1, 5, 3, 2, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(grad, tf.math.square(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.pow(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.add(tf.math.square(grad), grad)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.307302236557007, 4.101275444030762, 2.306248188018799, 2.303776264190674, 2.302966356277466, 2.3032443523406982], "accuracy": [0.19204860925674438, 0.136045441031456, 0.09932637959718704, 0.09998679161071777, 0.10210011899471283, 0.10038304328918457], "val_loss": [2.190371036529541, 2.3091063499450684, 2.303851842880249, 2.3030238151550293, 2.3026604652404785, 2.3025965690612793], "val_accuracy": [0.23133333027362823, 0.09933333098888397, 0.09933333098888397, 0.10100000351667404, 0.09933333098888397, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 3, 8, 1, 2, 1, 2, 9, 5, 0, 0, 6, 1, 8, 5, 5, 2, 5, 6, 4, 3, 9], [2, 0, 2, 0, 0, 2, 0, 1, 3], [85, 5, 81, 3, 3, 46], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 5, 3, 0, 5, 2, 2, 5, 9, 4, 6, 1, 1, 2, 0, 3, 5, 2, 3, 3, 5, 8, 3, 4, 6, 2, 2, 8, 6, 2, 2, 4, 2, 5, 4, 2, 6, 1, 8, 2, 8, 0, 8, 6, 8, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [3, 3, 3, 2, 3, 1, 3, 3, 2, 3, 2, 0, 3, 3, 2, 3, 1, 0, 3, 5, 1, 3, 3, 0, 2, 3, 3, 1, 0, 3, 3, 3, 3, 1, 1, 1], [99, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [6, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [94, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.21771427989006042, "mapping_values": [1, 21, 13, 8, 5, 24, 15, 9, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.subtract(grad, tf.math.add(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.divide_no_nan(grad, tf.math.subtract(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.square(grad)), tf.math.add(tf.math.add(tf.math.square(grad), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.pow(beta, tf.math.divide_no_nan(grad, tf.math.subtract(alpha, tf.math.subtract(grad, tf.math.add(grad, tf.math.negative(beta)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.4054996967315674, 2.299570083618164, 2.491746187210083, 2.3034515380859375, 2.25701642036438, 2.430906057357788, 2.3036160469055176], "accuracy": [0.1806894689798355, 0.12019548565149307, 0.16180160641670227, 0.1014397069811821, 0.16021661460399628, 0.10593052208423615, 0.09866596013307571], "val_loss": [2.3051235675811768, 2.2040622234344482, 2.3041231632232666, 2.3004329204559326, 2.2833962440490723, 2.304042100906372, 2.3024585247039795], "val_accuracy": [0.10166666656732559, 0.22200000286102295, 0.10300000011920929, 0.16866666078567505, 0.15299999713897705, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 1, 2, 1, 2, 1, 1, 2, 5, 5, 0, 5, 9, 8, 5, 5, 2, 5, 6, 4, 3, 9], [2, 0, 2, 0, 2, 2, 0, 1, 3], [85, 5, 81, 3, 3, 46], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [6, 5, 3, 2, 5, 2, 2, 5, 1, 0, 6, 1, 1, 2, 0, 3, 5, 5, 3, 3, 5, 8, 3, 4, 0, 6, 0, 8, 2, 2, 6, 4, 2, 5, 6, 8, 8, 8, 8, 2, 6, 0, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [3, 2, 3, 2, 3, 1, 1, 3, 2, 3, 2, 3, 3, 3, 2, 3, 1, 0, 3, 5, 1, 0, 3, 1, 2, 3, 3, 1, 0, 3, 3, 3, 3, 1, 1, 1], [99, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [6, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [94, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.12628571689128876, "mapping_values": [1, 22, 15, 7, 4, 72, 45, 27, 2, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.add(grad, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad), tf.math.square(tf.math.square(tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.square(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), grad), tf.math.sqrt(tf.math.square(grad))), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.math.add(grad, beta), tf.math.square(tf.math.add(tf.math.add(tf.math.square(grad), tf.math.subtract(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.square(tf.math.square(tf.math.multiply(tf.math.multiply(tf.math.square(alpha), grad), beta))), tf.math.sqrt(tf.math.multiply(tf.math.pow(grad, beta), tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.add(grad, tf.math.square(grad)), grad), tf.math.divide_no_nan(beta, tf.math.sqrt(tf.math.sqrt(tf.math.sqrt(grad))))), tf.math.sqrt(alpha)), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), grad)))), tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(grad)), alpha))))))))), tf.math.divide_no_nan(tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), grad), alpha)), beta))), grad)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.413313150405884, 2.250117778778076, 2.303757429122925, 2.302812337875366, 2.3029959201812744, 2.303102493286133], "accuracy": [0.17778365314006805, 0.17342491447925568, 0.10091137140989304, 0.10249637067317963, 0.09800554811954498, 0.09232597798109055], "val_loss": [2.2892773151397705, 2.3044772148132324, 2.3027706146240234, 2.302485704421997, 2.3025012016296387, 2.3025052547454834], "val_accuracy": [0.12266666442155838, 0.09833333641290665, 0.09833333641290665, 0.10166666656732559, 0.10199999809265137, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 1, 2, 4, 2, 1, 1, 2, 8, 5, 0, 8, 9, 8, 5, 5, 2, 5, 6, 4, 3, 9], [2, 0, 2, 0, 2, 0, 0, 1, 3], [24, 98, 97, 0, 59], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [6, 5, 6, 2, 6, 2, 2, 5, 0, 0, 6, 5, 1, 1, 5, 3, 5, 5, 3, 3, 5, 8, 3, 9, 0, 4, 0, 8, 0, 2, 2, 4, 2, 5, 2, 1, 9, 3, 8, 2, 6, 8, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [3, 3, 3, 2, 3, 1, 3, 3, 2, 3, 2, 3, 3, 3, 3, 3, 1, 0, 3, 3, 1, 3, 3, 1, 2, 3, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [99, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [3, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [94, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 12, 8, 4, 35, 22, 13, 0, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.math.pow(tf.math.add(tf.math.subtract(grad, tf.math.subtract(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad)), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(grad), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)))), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.square(tf.math.divide_no_nan(tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.square(grad), tf.math.negative(tf.math.negative(beta))), tf.math.divide_no_nan(grad, tf.math.square(alpha))), tf.math.subtract(grad, tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.square(tf.math.square(grad)), tf.math.multiply(beta, grad))), beta)))), tf.math.multiply(tf.math.square(tf.math.sqrt(grad)), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [4252.77294921875, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.18319904804229736, 0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [46268.21484375, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1], [2, 6, 4, 7, 5, 5, 0, 2, 8, 8, 0, 4, 9, 8, 5, 5, 2, 5, 6, 4, 3, 9], [3, 0, 2, 0, 0, 0, 0, 1, 3], [85, 5, 81, 3, 3, 46], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 5, 9, 3, 5, 8, 2, 5, 0, 0, 6, 1, 2, 2, 0, 1, 8, 5, 3, 4, 5, 8, 3, 4, 0, 2, 0, 8, 6, 2, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 0, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [3, 3, 3, 2, 3, 1, 3, 3, 2, 3, 2, 3, 3, 3, 2, 3, 1, 0, 3, 5, 1, 3, 3, 1, 2, 3, 3, 1, 0, 3, 3, 3, 3, 1, 1, 1], [99, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [0, 7, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [94, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 9, 6, 4, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(tf.math.square(tf.math.square(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3578269481658936, 2.268388509750366, 2.3092408180236816, 2.303978681564331, 2.3032307624816895, 2.3032631874084473], "accuracy": [0.19944524765014648, 0.1946902722120285, 0.09813763201236725, 0.09721305221319199, 0.09734513610601425, 0.09245806187391281], "val_loss": [2.3013033866882324, 2.320359230041504, 2.303654909133911, 2.302809715270996, 2.302701234817505, 2.3026282787323], "val_accuracy": [0.10133333504199982, 0.09700000286102295, 0.0989999994635582, 0.10133333504199982, 0.10133333504199982, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 3, 8, 1, 2, 2, 8, 9, 5, 0, 0, 6, 9, 8, 5, 5, 2, 5, 6, 4, 3, 9], [2, 0, 2, 0, 0, 0, 0, 1, 3], [85, 5, 43, 3, 3, 46], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [6, 2, 9, 0, 5, 2, 2, 5, 1, 0, 6, 1, 1, 2, 6, 3, 5, 4, 3, 3, 5, 8, 3, 8, 0, 6, 0, 8, 6, 0, 6, 4, 9, 5, 6, 2, 6, 6, 8, 2, 2, 2, 8, 6, 5, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [3, 3, 3, 2, 3, 3, 1, 3, 0, 3, 2, 3, 3, 3, 2, 3, 1, 3, 3, 5, 1, 3, 3, 0, 2, 0, 3, 1, 0, 3, 3, 3, 3, 1, 1, 1], [99, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [6, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [94, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 15, 5, 5, 70, 44, 26, 5, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.add(tf.math.sqrt(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.negative(tf.math.divide_no_nan(grad, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.square(grad))), tf.math.add(tf.math.add(tf.math.square(tf.math.subtract(grad, tf.math.negative(tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.square(tf.math.pow(tf.math.multiply(tf.math.multiply(grad, tf.math.square(alpha)), grad), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.multiply(grad, beta))))), grad), tf.math.sqrt(tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)), grad)), tf.math.divide_no_nan(beta, tf.math.add(grad, tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(grad, tf.math.sqrt(grad)))))))), grad)))))))), tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), beta)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.62622332572937, 2.4941282272338867, 2.30509090423584, 2.3032495975494385, 2.3030195236206055, 2.303520441055298], "accuracy": [0.19218069314956665, 0.11979923397302628, 0.09893012791872025, 0.09866596013307571, 0.09879804402589798, 0.08809932321310043], "val_loss": [2.282759428024292, 2.307647466659546, 2.3034679889678955, 2.3028273582458496, 2.3025660514831543, 2.302562713623047], "val_accuracy": [0.10199999809265137, 0.0963333323597908, 0.0963333323597908, 0.09966666996479034, 0.09966666996479034, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 3, 8, 1, 2, 2, 1, 9, 5, 0, 0, 6, 9, 8, 5, 5, 2, 5, 6, 4, 3, 9], [2, 2, 2, 0, 0, 0, 0, 1, 3], [85, 5, 81, 3, 3, 46], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [6, 2, 3, 0, 5, 2, 2, 5, 1, 0, 6, 1, 1, 2, 0, 3, 5, 5, 3, 3, 5, 8, 2, 9, 0, 6, 0, 4, 6, 2, 6, 4, 2, 5, 6, 2, 6, 8, 8, 2, 6, 0, 8, 6, 5, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [3, 3, 3, 2, 3, 1, 1, 0, 2, 3, 2, 3, 3, 3, 2, 3, 1, 0, 3, 5, 1, 3, 3, 1, 2, 2, 3, 1, 0, 3, 3, 3, 3, 1, 1, 1], [99, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [6, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [93, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 13, 6, 5, 9, 5, 4, 0, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.add(grad, tf.math.subtract(grad, grad)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.negative(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.divide_no_nan(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.add(tf.math.multiply(grad, grad), tf.math.negative(tf.math.square(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [412.46923828125, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.19297318160533905, 0.10830801725387573, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4732171.5, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]