[{"genotype": [[0], [0, 1, 1], [0, 2, 3, 0, 3], [2, 1, 0, 2], [68], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 3, 9, 9], [1], [16, 16], [0, 1], [0], [2], [], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 2, 9, 6, 8, 1, 4, 1, 4, 2, 0], [5, 0, 1, 7, 3, 7, 6, 0, 2, 0], [31, 51, 85]], "fitness": -0.26085713505744934, "mapping_values": [1, 2, 1, 1, 0, 4, 4, 0, 2, 2, 1, 1, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.3371458053588867, 2.2541379928588867, 2.2445929050445557, 2.2876358032226562, 2.122694730758667, 2.2945055961608887, 2.2457475662231445, 2.4387805461883545, 2.3059561252593994, 2.303624153137207], "accuracy": [0.18214239180088043, 0.137630432844162, 0.17831197381019592, 0.12957337498664856, 0.2448817789554596, 0.21304979920387268, 0.19442610442638397, 0.19336943328380585, 0.10157178342342377, 0.09840179979801178], "val_loss": [2.3154780864715576, 2.2862279415130615, 2.3050010204315186, 2.0531320571899414, 2.03731632232666, 2.2926387786865234, 2.283982515335083, 2.3041021823883057, 2.3023858070373535, 2.2998836040496826], "val_accuracy": [0.09700000286102295, 0.11699999868869781, 0.0963333323597908, 0.25866666436195374, 0.2633333206176758, 0.12600000202655792, 0.1313333362340927, 0.10266666859388351, 0.10300000011920929, 0.1066666692495346]}}, {"genotype": [[0], [1], [3], [3, 0], [], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [3, 0, 4, 3, 0, 6, 9], [0, 0, 4, 1], [73, 94, 9], [1], [], [6], [61], [1], [], [5], [30]], "fitness": -0.18228571116924286, "mapping_values": [1, 1, 0, 1, 0, 11, 7, 4, 3, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.negative(tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), grad)))), alpha), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [27.23386573791504, 70.77037048339844, 2.3076319694519043, 2.3040459156036377, 2.3032500743865967, 2.3031599521636963], "accuracy": [0.19799233973026276, 0.10210011899471283, 0.09787346422672272, 0.09642054885625839, 0.09747721254825592, 0.09113723784685135], "val_loss": [66.20622253417969, 2.3085618019104004, 2.3035638332366943, 2.3025848865509033, 2.3024940490722656, 2.302466630935669], "val_accuracy": [0.18299999833106995, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506, 0.10333333164453506]}}, {"genotype": [[0], [0, 1, 0, 1], [6, 0, 9], [3, 0], [79], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [8, 4, 7, 2, 0, 6, 6, 0, 5, 3, 7, 6, 2, 7, 4, 8, 6, 6, 1, 7, 6, 7, 4, 3, 5, 2, 1, 8, 1, 8, 8, 7, 0, 4, 4, 7, 5, 8, 5], [4, 0, 1, 5, 3, 4, 0, 3, 5, 5, 1, 5, 5, 4, 5, 4, 4, 1, 3, 5, 3, 5, 2, 4, 4, 5, 0], [55, 99, 13], [1], [7, 4, 6, 4, 8, 0], [2], [], [0, 1, 0, 0, 1, 0, 0, 1, 1], [7, 2, 0, 5, 6], [5, 7, 3, 5], []], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 2, 2, 1, 66, 39, 27, 3, 1, 0, 1, 0, 9, 5, 4, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(grad, tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.pow(tf.math.add(tf.math.add(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), alpha))), tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, grad), grad), tf.constant(1.0, shape=shape, dtype=tf.float32))), grad)), grad), tf.math.add(tf.math.pow(grad, tf.math.sqrt(alpha)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.multiply(grad, tf.math.square(grad)), tf.math.add(grad, tf.math.subtract(grad, tf.math.sqrt(tf.math.subtract(grad, tf.math.sqrt(tf.math.sqrt(alpha))))))), grad), grad)), grad), tf.math.add(grad, tf.math.negative(beta))), tf.math.pow(tf.math.pow(tf.math.add(tf.math.square(grad), grad), grad), tf.math.sqrt(tf.math.square(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(grad, tf.math.add(tf.math.negative(grad), tf.math.square(tf.math.divide_no_nan(sigma, grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 2, 1, 0, 0, 2, 5], [2, 3, 2, 3], [], [0, 1], [0, 2, 3, 0, 3, 5], [5], [], [1], [0], [0], [62], [0, 1], [8], [7, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 7, 4, 0, 2, 1, 1, 0, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.math.negative(grad)), tf.math.add(grad, grad)), tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [1], [], [0, 1, 0, 2], [70], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [3, 9, 9, 7, 8], [0, 2, 0, 3], [73, 94, 17], [1], [], [0], [61], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 3, 6, 8, 1, 4, 1, 4, 2, 8], [0, 6, 7, 7, 3, 4, 4, 0, 3, 0], [23, 99, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 3, 3, 0, 2, 1, 0, 1, 1, 17, 9, 8, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(grad, tf.math.pow(grad, grad))), tf.math.subtract(sigma, tf.math.pow(grad, grad)))), tf.constant(1.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [6, 9, 3, 0, 3], [0, 1, 0, 2], [39, 49], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 2, 3, 0, 3, 5, 3, 3, 1, 9], [0, 2, 0, 3, 1, 3], [16, 16, 16], [0, 1], [0], [0], [99], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 1, 4, 9, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 80, 96, 99, 61, 1]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 2, 16, 10, 6, 3, 2, 1, 1, 1, 16, 9, 7, 6], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.square(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), tf.math.subtract(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), sigma))), tf.constant(1.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 2, 3, 0, 3], [0, 1, 0, 2], [39, 39], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 4, 3, 0, 3, 5], [0, 3, 0, 3], [16, 16], [0, 0, 1, 0, 1, 1, 1], [6, 2, 3], [0, 3, 2, 7], [99], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 3, 3, 8, 1, 4, 1, 4, 2, 8], [0, 0, 0, 3, 0, 0, 3, 1, 2, 0], [16, 28, 96, 99, 25, 1]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, beta)), grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303224802017212, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}, "mapping_values": [1, 8, 4, 4, 2, 2, 1, 1, 1, 7, 3, 4, 1, 1, 0, 1, 1], "tree_depth": 10}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 3, 0, 3], [0, 2, 1, 2], [39, 39], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 6, 3, 0, 3, 5], [0, 2, 2, 3], [15, 16], [0, 1], [0], [0], [99], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [6, 0, 3, 6, 8, 2, 4, 2, 4, 2, 6, 2, 3, 6, 8, 7, 8, 1, 8], [0, 0, 0, 3, 0, 0, 0, 1, 2, 0, 3, 5, 1, 4, 3], [16, 99, 96, 0, 61, 1, 36]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 10, 6, 4, 1, 2, 1, 1, 1, 34, 19, 15, 7], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), alpha), beta), tf.math.sqrt(tf.math.add(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), sigma))))), tf.math.sqrt(tf.math.subtract(grad, alpha))), tf.math.sqrt(grad))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 2, 5, 2, 7, 7], [0, 0, 3, 0, 3, 0], [39, 39, 91, 82], [1], [], [0, 2, 0, 3], [66], [0, 1], [0], [0], [59], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 3, 6, 8, 3, 4, 1, 4, 2, 8], [3, 4, 0, 3, 0, 3, 3, 4, 2, 0], [86, 92, 1, 7, 46, 35]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 6, 6, 4, 1, 0, 1, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303051710128784, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1], [1], [2, 2], [74], [0, 0, 1, 1], [8, 7], [3, 5], [], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1], [6, 7, 7, 6, 9, 5], [5, 4, 6, 4], [54], [0, 1, 1], [1], [6, 7], []], "fitness": -0.08942857384681702, "mapping_values": [1, 3, 1, 2, 0, 4, 2, 2, 0, 10, 6, 4, 1, 3, 1, 2, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.add(grad, tf.math.add(tf.math.divide_no_nan(grad, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(grad, grad)", "other_info": {"loss": [2.3100554943084717, 2.309882402420044, 2.3095340728759766, 2.3107504844665527, 2.309570550918579, 2.309553861618042], "accuracy": [0.08809932321310043, 0.09192973375320435, 0.08942015469074249, 0.09351472556591034, 0.09549596905708313, 0.0952318087220192], "val_loss": [2.309735059738159, 2.309735059738159, 2.309735059738159, 2.309735059738159, 2.309735059738159, 2.309735059738159], "val_accuracy": [0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186]}}]