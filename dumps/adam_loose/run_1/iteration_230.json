[{"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 2, 5, 8, 8, 6, 9, 7, 8, 2, 2, 4, 9], [2, 0, 1, 1, 0, 0, 0, 2], [20, 23, 97, 49], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 1, 1, 6, 5, 5, 4, 6, 6, 9, 8, 1, 2, 9, 1, 5, 8, 5, 5, 3, 5, 6, 6, 6, 9, 2, 3, 9, 6, 6, 5, 0, 9, 2, 3, 2, 6, 8, 8, 2, 6, 6, 8, 6, 9, 9, 5, 7, 3, 8, 4, 4, 3, 2, 4, 5, 6, 0, 0, 6, 8, 1, 7, 7, 2, 5], [0, 3, 2, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 42, 12, 75, 46, 8, 31, 92, 99, 48, 89, 80, 66], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [2, 7, 5, 3, 6, 2, 3, 1, 1, 5, 1, 3, 1, 9, 6, 3, 1, 3, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 2, 8, 7, 9, 8, 6, 0, 7, 7, 4, 1, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 2, 4, 5, 7, 2, 3, 4, 2, 5, 1, 4, 2, 4, 7, 7, 2, 0, 7, 2, 4, 7, 6, 5, 6, 4, 4, 4, 3, 2, 1], [42, 51, 29, 45, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [5, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.4020000100135803, "mapping_values": [1, 17, 11, 6, 4, 11, 6, 5, 1, 75, 45, 30, 3, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(grad, tf.math.square(tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.divide_no_nan(grad, beta), alpha)), tf.math.square(tf.math.square(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(grad, tf.math.square(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(beta, grad), tf.math.subtract(grad, tf.math.subtract(grad, tf.math.square(tf.math.subtract(beta, tf.math.multiply(tf.math.subtract(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad)))))), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(beta, tf.math.multiply(tf.math.sqrt(tf.math.sqrt(grad)), alpha)), grad), tf.math.square(beta))), tf.math.pow(grad, tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, tf.math.pow(tf.math.pow(tf.math.negative(grad), beta), tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, beta)))), tf.math.sqrt(tf.math.add(grad, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), grad), tf.math.sqrt(tf.math.divide_no_nan(tf.math.negative(grad), grad))), tf.math.add(tf.math.add(tf.math.pow(tf.math.subtract(grad, tf.math.square(grad)), tf.math.negative(grad)), grad), sigma)))))), tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [7.886345863342285, 2.2773029804229736, 2.203869104385376, 2.2709946632385254, 2.3043994903564453, 2.3039238452911377, 2.3035151958465576, 2.3032026290893555], "accuracy": [0.17791573703289032, 0.1414608359336853, 0.2044644057750702, 0.15598995983600616, 0.09919429570436478, 0.0936468094587326, 0.09985470771789551, 0.09734513610601425], "val_loss": [2.302565813064575, 2.0893304347991943, 1.819588541984558, 2.3037447929382324, 2.302726984024048, 2.302621364593506, 2.302537441253662, 2.3025474548339844], "val_accuracy": [0.09866666793823242, 0.3813333213329315, 0.39500001072883606, 0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.10066666454076767, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [9, 5, 5, 0, 5, 0, 9, 3, 8], [2, 0, 1, 1, 0, 0, 0, 2], [20, 5, 97], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 3, 0, 5, 1, 5, 6, 6, 1, 1, 1, 2, 6, 0, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 5, 6, 2, 6, 4, 2, 5, 2, 2, 6, 8, 8, 2, 6, 9, 8, 6, 2, 9, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [4, 4, 2, 1, 0, 3, 0, 1, 3, 5, 2, 0, 1, 3, 1, 3, 0, 3, 2, 3, 1, 2, 5, 5, 2, 0, 3, 3, 0, 5, 0, 0, 3, 3, 1, 1, 3, 0, 3, 5, 4], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 5, 3, 6, 2, 0, 1, 1, 5, 1, 3, 1, 2, 6, 3, 1, 3, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 2, 8, 7, 9, 8, 6, 0, 7, 7, 4, 2, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [2, 6, 4, 5, 7, 2, 3, 1, 2, 5, 1], [78, 51, 29, 63, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [5, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.3382857143878937, "mapping_values": [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3944671154022217, 2.5656509399414062, 2.283254861831665, 2.336768388748169, 2.303565263748169, 2.3033246994018555], "accuracy": [0.20644564926624298, 0.1484612375497818, 0.12098798155784607, 0.12112006545066833, 0.10170386731624603, 0.10130762308835983], "val_loss": [2.095456123352051, 2.3009774684906006, 2.3479161262512207, 2.3038158416748047, 2.3029732704162598, 2.302532196044922], "val_accuracy": [0.35633334517478943, 0.12200000137090683, 0.3319999873638153, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [8, 2, 5, 3, 5, 0, 1, 3, 8], [2, 0, 1, 1, 0, 0, 0, 2], [20, 5, 97], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 1, 0, 5, 1, 5, 6, 6, 1, 1, 1, 2, 6, 1, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 5, 6, 2, 6, 4, 2, 5, 0, 2, 6, 8, 8, 2, 6, 8, 8, 6, 2, 9, 6, 1, 3, 9, 4, 4, 3, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 2, 8, 5, 5, 5, 9], [3, 4, 2, 1, 3, 3, 3, 1, 3, 5, 2, 0, 1, 3, 4, 3, 0, 3, 2, 1, 1, 3, 5, 5, 2, 0, 3, 5, 0, 5, 0, 0, 3, 1, 1, 1, 3, 0, 1, 5, 4], [42, 15, 80, 75, 17, 8, 82, 92, 32, 48, 89, 74], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 7, 1, 1, 6, 2, 0, 1, 1, 6, 1, 3, 1, 5, 6, 3, 8, 3, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 2, 8, 7, 9, 8, 6, 0, 6, 7, 4, 2, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [0, 6, 4, 5, 7, 2, 3, 1, 3, 5, 1, 2, 5, 4, 3, 5, 7, 5, 0, 2, 1, 4, 7, 2, 4, 6, 4, 6, 0, 3, 2], [78, 51, 27, 82, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 6, 1, 7, 9, 5, 9, 6, 2, 9], [5, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.3042857050895691, "mapping_values": [1, 1, 0, 1, 0, 7, 4, 3, 0, 61, 35, 26, 3, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(grad, tf.math.subtract(tf.math.negative(grad), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(grad, grad)), tf.math.negative(grad)), tf.math.subtract(beta, tf.math.subtract(tf.math.divide_no_nan(sigma, tf.math.subtract(alpha, sigma)), tf.math.multiply(grad, tf.math.subtract(tf.math.square(tf.math.divide_no_nan(alpha, tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.math.sqrt(beta), grad)), tf.math.sqrt(grad)))), tf.math.square(sigma))))))), tf.math.pow(tf.math.subtract(tf.math.multiply(grad, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(tf.math.pow(grad, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.pow(beta, tf.math.negative(alpha))), grad))), grad), tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.487323760986328, 4.211670398712158, 2.313206672668457, 2.305377244949341, 2.302955150604248, 2.2826132774353027, 2.3690929412841797, 2.3114194869995117, 2.305305242538452, 2.303100347518921, 2.3031344413757324], "accuracy": [0.21701228618621826, 0.14198917150497437, 0.10038304328918457, 0.09708096832036972, 0.1006472036242485, 0.14370624721050262, 0.2694492042064667, 0.10130762308835983, 0.09866596013307571, 0.10276053100824356, 0.1006472036242485], "val_loss": [2.1737375259399414, 2.3178205490112305, 2.3061485290527344, 2.3028361797332764, 2.3018958568573, 1.8759475946426392, 2.326674699783325, 2.3046159744262695, 2.30275297164917, 2.3028361797332764, 2.301098346710205], "val_accuracy": [0.2993333339691162, 0.10266666859388351, 0.09700000286102295, 0.0963333323597908, 0.10266666859388351, 0.3199999928474426, 0.09700000286102295, 0.09700000286102295, 0.10233332961797714, 0.09700000286102295, 0.11733333021402359]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [2, 2, 8, 5, 3, 1, 2, 7, 8, 0, 1, 4, 9], [2, 0, 1, 1, 0, 0, 0, 2], [20, 5, 97, 88], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 1, 0, 5, 1, 5, 6, 6, 1, 1, 1, 2, 6, 1, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 5, 6, 2, 6, 4, 2, 5, 0, 2, 6, 8, 8, 2, 6, 8, 8, 6, 2, 9, 6, 1, 3, 9, 4, 4, 3, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 2, 8, 5, 5, 5, 9], [0, 4, 2, 3, 3, 3, 3, 1, 3, 3, 2, 2, 1, 3, 4, 3, 0, 3, 2, 1, 1, 3, 5, 5, 2, 0, 3, 5, 0, 5, 0, 3, 3, 1, 1, 1, 3, 0, 1, 5, 4], [42, 15, 80, 75, 17, 8, 82, 92, 32, 48, 89, 74], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [8, 7, 5, 3, 6, 2, 2, 1, 1, 5, 1, 3, 1, 2, 9, 3, 9, 3, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 2, 8, 6, 9, 8, 6, 0, 7, 7, 4, 2, 5, 0, 8, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 4, 4, 4, 7, 4, 3, 1, 2, 5, 1, 4, 7, 4, 7, 7, 2, 0, 7, 2, 4, 7, 6, 5, 6, 4, 7, 0, 3, 2, 0], [78, 51, 29, 63, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.24971428513526917, "mapping_values": [1, 19, 11, 8, 4, 2, 1, 1, 1, 32, 20, 12, 2, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(grad, tf.math.sqrt(tf.math.square(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), tf.math.multiply(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.add(grad, tf.math.square(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(grad, grad), tf.math.subtract(grad, tf.math.subtract(grad, tf.math.square(tf.math.subtract(grad, tf.math.multiply(tf.math.subtract(sigma, tf.math.add(alpha, beta)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), tf.math.multiply(grad, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.sqrt(tf.math.sqrt(alpha)), grad))))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3100838661193848, 2.366931676864624, 2.3038060665130615, 2.3031303882598877, 2.3029942512512207, 2.3030030727386475], "accuracy": [0.20842689275741577, 0.1344604343175888, 0.09496764093637466, 0.0952318087220192, 0.09166556596755981, 0.0952318087220192], "val_loss": [2.069375991821289, 2.304413080215454, 2.3030037879943848, 2.302603244781494, 2.3025729656219482, 2.3025946617126465], "val_accuracy": [0.2460000067949295, 0.09666666388511658, 0.09666666388511658, 0.10166666656732559, 0.09933333098888397, 0.10166666656732559]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [2, 2, 5, 5, 8, 6, 9, 7, 8, 0, 1, 4, 9], [3, 0, 1, 1, 0, 0, 0, 2], [20, 5, 97], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 1, 1, 8, 5, 1, 4, 6, 6, 0, 8, 1, 2, 9, 1, 5, 8, 5, 5, 3, 5, 6, 6, 6, 9, 2, 3, 9, 6, 6, 5, 0, 9, 2, 3, 2, 6, 8, 8, 2, 6, 6, 8, 6, 9, 9, 5, 7, 3, 8, 4, 4, 3, 2, 4, 5, 6, 0, 0, 6, 8, 1, 7, 7, 2, 5], [5, 0, 2, 1, 1, 3, 2, 0, 2, 2, 2, 0, 0, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 42, 12, 75, 46, 8, 31, 92, 99, 48, 89, 80, 66], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 4, 5, 6, 6, 2, 0, 1, 1, 5, 1, 3, 1, 2, 6, 3, 1, 3, 1, 8, 5, 4, 1, 3, 2, 9, 2, 4, 4, 0, 4, 1, 8, 0, 1, 8, 6, 0, 7, 7, 9, 2, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 2, 4, 5, 1, 2, 3, 1, 2, 3, 1, 1, 4, 4, 7, 7, 3, 2, 2, 4, 2, 4, 0, 4, 2, 1, 3, 2, 4, 5, 3], [4, 51, 29, 63, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.2305714339017868, "mapping_values": [1, 1, 0, 1, 0, 7, 3, 4, 1, 20, 11, 9, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(grad, tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), beta)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(grad, tf.math.square(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), tf.math.subtract(grad, alpha)), beta))), tf.math.subtract(tf.math.square(sigma), tf.math.subtract(alpha, beta))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.294410228729248, 2.356757164001465, 2.307246208190918, 2.24363374710083, 2.3830244541168213, 2.2722737789154053], "accuracy": [0.1950865089893341, 0.22123894095420837, 0.10394927859306335, 0.14912164211273193, 0.1644432693719864, 0.1760665625333786], "val_loss": [2.2409398555755615, 2.3230783939361572, 2.284994602203369, 2.300088882446289, 2.293119192123413, 2.318942070007324], "val_accuracy": [0.24033333361148834, 0.09733333438634872, 0.18433333933353424, 0.10266666859388351, 0.11166666448116302, 0.09600000083446503]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [5, 1, 5, 5, 8, 6, 9, 7, 8, 0, 1, 4, 9], [3, 2, 0, 1, 0, 0, 0, 2], [20, 5, 78, 88], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 1, 1, 3, 9, 1, 4, 6, 6, 0, 8, 1, 2, 9, 1, 5, 8, 5, 5, 3, 5, 6, 6, 6, 9, 2, 3, 9, 6, 6, 5, 0, 9, 2, 3, 2, 6, 8, 8, 2, 6, 6, 8, 6, 9, 9, 5, 7, 3, 8, 4, 4, 3, 2, 4, 5, 6, 0, 0, 6, 8, 1, 7, 7, 2, 5], [5, 0, 2, 3, 1, 3, 2, 0, 2, 2, 2, 0, 0, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [77, 42, 12, 75, 46, 8, 31, 92, 99, 48, 89, 80, 66], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [2, 7, 5, 3, 6, 2, 0, 1, 6, 5, 1, 5, 1, 2, 6, 3, 1, 3, 3, 8, 5, 4, 1, 3, 2, 6, 2, 9, 4, 0, 1, 2, 8, 7, 9, 8, 6, 0, 5, 4, 4, 2, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 2, 4, 5, 7, 2, 4, 1, 2, 5, 1, 4, 7, 4, 7, 7, 2, 0, 4, 2, 4, 7, 6, 5, 3, 4, 7, 0, 3, 2, 0], [78, 51, 29, 34, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.2085714340209961, "mapping_values": [1, 2, 1, 1, 0, 75, 51, 24, 13, 62, 37, 25, 3, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(grad), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), beta), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.pow(grad, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), grad))), beta), tf.math.subtract(tf.math.square(tf.math.sqrt(tf.math.square(tf.math.square(tf.math.multiply(tf.math.square(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), beta))))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(beta, beta), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.square(tf.math.negative(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.math.add(grad, tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), beta), tf.math.sqrt(grad))))), tf.math.pow(alpha, grad)), grad))))))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(grad, tf.math.square(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.negative(beta), grad), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(grad), tf.math.subtract(tf.math.square(grad), tf.math.subtract(beta, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(beta, tf.math.multiply(tf.math.multiply(grad, tf.math.sqrt(alpha)), grad)), tf.math.square(grad)), tf.math.pow(grad, tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(grad), beta)), tf.math.subtract(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, beta))), grad), tf.math.sqrt(grad))))))), tf.math.add(grad, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.divide_no_nan(grad, sigma))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [3.071120500564575, 2.310809850692749, 2.3043408393859863, 2.3039894104003906, 2.29982852935791, 2.293315887451172, 2.3050124645233154, 2.303431749343872, 2.3031222820281982, 2.303056478500366], "accuracy": [0.19152027368545532, 0.10170386731624603, 0.09760929644107819, 0.09734513610601425, 0.11781799048185349, 0.15559370815753937, 0.09998679161071777, 0.09919429570436478, 0.09919429570436478, 0.09813763201236725], "val_loss": [2.314958333969116, 2.3039486408233643, 2.302726984024048, 2.3021321296691895, 2.270678758621216, 2.305706024169922, 2.3031978607177734, 2.3026695251464844, 2.302647352218628, 2.302543878555298], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.09833333641290665, 0.09866666793823242, 0.21033333241939545, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.10100000351667404, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [2, 2, 5, 3, 5, 0, 9, 3, 8], [2, 0, 1, 1, 0, 0, 0, 2], [20, 5, 97], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [9, 1, 1, 2, 5, 5, 4, 6, 6, 9, 8, 1, 2, 9, 1, 5, 8, 5, 5, 3, 5, 6, 6, 6, 9, 2, 3, 9, 6, 6, 5, 0, 9, 2, 3, 2, 6, 8, 8, 2, 6, 6, 8, 6, 9, 9, 5, 7, 3, 8, 4, 4, 3, 2, 4, 5, 6, 0, 0, 6, 8, 1, 7, 7, 2, 5], [0, 3, 2, 1, 3, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 42, 12, 75, 46, 8, 31, 92, 99, 48, 89, 80, 66], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 5, 5, 3, 6, 2, 0, 1, 4, 5, 1, 3, 1, 2, 6, 3, 1, 3, 8, 8, 5, 2, 1, 3, 2, 6, 2, 4, 4, 0, 7, 2, 8, 7, 9, 8, 4, 0, 7, 7, 4, 2, 5, 0, 2, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 2, 4, 5, 7, 2, 3, 1, 2, 5, 1, 1, 4, 1, 7, 7, 3, 2, 2, 7, 4, 4, 0, 4, 2, 1, 3, 4, 4, 5, 3], [42, 51, 81, 63, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.18028570711612701, "mapping_values": [1, 1, 0, 1, 0, 1, 1, 0, 1, 17, 10, 7, 0, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(grad), tf.math.square(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.negative(beta), grad), tf.math.subtract(grad, tf.math.pow(grad, beta))), tf.math.square(sigma)))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.397428035736084, 2.3059604167938232, 2.304272174835205, 2.303895950317383, 2.3025734424591064, 2.3034682273864746], "accuracy": [0.19363360106945038, 0.13591335713863373, 0.1010434553027153, 0.09642054885625839, 0.10672302544116974, 0.09615638852119446], "val_loss": [2.197514295578003, 2.3036997318267822, 2.302625894546509, 2.302429437637329, 2.302293539047241, 2.3019492626190186], "val_accuracy": [0.1783333271741867, 0.10133333504199982, 0.10199999809265137, 0.12666666507720947, 0.15166667103767395, 0.09866666793823242]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [8, 2, 5, 3, 5, 0, 1, 3, 8], [2, 0, 1, 1, 0, 0, 0, 2], [20, 5, 97], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [5, 2, 1, 8, 8, 1, 5, 6, 6, 1, 1, 1, 2, 6, 1, 3, 8, 5, 3, 2, 5, 8, 3, 3, 2, 2, 0, 5, 6, 2, 6, 4, 2, 2, 0, 2, 6, 8, 8, 2, 6, 8, 8, 6, 2, 9, 6, 1, 3, 9, 4, 4, 3, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 2, 8, 5, 5, 5, 9], [0, 4, 2, 0, 1, 3, 2, 1, 2, 5, 2, 0, 1, 3, 1, 3, 0, 3, 2, 3, 1, 2, 5, 5, 2, 3, 3, 3, 0, 5, 2, 0, 3, 3, 1, 1, 3, 0, 3, 5, 4], [42, 15, 80, 75, 17, 70, 82, 92, 6, 48, 89, 74], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 5, 3, 6, 2, 0, 1, 1, 5, 1, 3, 1, 2, 6, 3, 1, 3, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 2, 8, 7, 9, 8, 6, 0, 7, 7, 4, 2, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [2, 6, 4, 5, 7, 2, 3, 1, 2, 5, 1], [78, 51, 29, 63, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [5, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 82, 50, 32, 8, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), grad), tf.math.subtract(beta, tf.math.square(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.multiply(beta, tf.math.sqrt(alpha))), tf.math.square(beta)))), tf.math.multiply(grad, beta)), tf.math.add(tf.math.square(tf.math.sqrt(tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.negative(tf.math.square(tf.math.divide_no_nan(alpha, grad))), tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, beta)), tf.math.negative(grad)), tf.math.add(alpha, beta)), tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(grad, tf.math.sqrt(beta)), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), grad)))))))))))), grad)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.subtract(beta, tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [22504.3203125, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17817988991737366, 0.10328886657953262, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [12173304.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0], [2, 2, 5, 3, 1, 0, 9, 3, 8, 4, 5, 4, 3, 6, 9, 3, 4, 1, 4, 9, 0, 9, 4, 5, 6, 9], [2, 0, 1, 1, 1, 2, 0, 2, 3, 1, 3], [20, 5, 97, 24, 96, 96, 58], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 1, 1, 8, 5, 1, 4, 6, 6, 0, 8, 1, 2, 9, 1, 5, 8, 5, 5, 3, 5, 6, 6, 6, 9, 2, 3, 9, 6, 6, 5, 0, 9, 2, 3, 2, 6, 8, 8, 2, 6, 6, 8, 6, 9, 9, 5, 7, 3, 8, 4, 4, 3, 2, 4, 5, 6, 0, 0, 6, 8, 1, 7, 7, 2, 5], [5, 0, 2, 1, 1, 3, 2, 0, 2, 2, 2, 0, 0, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 42, 12, 75, 46, 8, 31, 92, 99, 48, 89, 80, 66], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [5, 7, 5, 3, 6, 2, 5, 1, 3, 5, 1, 3, 1, 2, 6, 3, 1, 9, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 9, 8, 3, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 1, 2, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 2, 4, 5, 7, 2, 3, 1, 2, 5, 1, 3, 1, 4, 7, 3, 2, 0, 7, 2, 4, 1, 6, 5, 6, 4, 7, 0, 4, 2, 0], [78, 48, 29, 63, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 37, 26, 11, 7, 8, 4, 4, 1, 17, 10, 7, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(grad, tf.math.square(tf.math.multiply(tf.math.subtract(tf.math.negative(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.sqrt(tf.math.pow(tf.math.square(tf.math.pow(tf.math.multiply(alpha, tf.math.divide_no_nan(alpha, alpha)), grad)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.pow(tf.math.subtract(tf.math.pow(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), grad), tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), grad), tf.math.pow(tf.math.square(alpha), tf.math.divide_no_nan(grad, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(grad, tf.math.subtract(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), beta)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.add(grad, tf.math.square(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.add(tf.math.square(grad), tf.math.subtract(grad, tf.math.multiply(grad, beta))), tf.math.square(sigma)))))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3041064739227295, 2.2861809730529785, 2.3348281383514404, 2.2652812004089355, 2.3106839656829834, 2.3039915561676025], "accuracy": [0.20340773463249207, 0.16166952252388, 0.1410645842552185, 0.1632545292377472, 0.1010434553027153, 0.09615638852119446], "val_loss": [2.3089942932128906, 2.2947380542755127, 2.301741600036621, 2.327863931655884, 2.3039968013763428, 2.3026812076568604], "val_accuracy": [0.10199999809265137, 0.09933333098888397, 0.10066666454076767, 0.10199999809265137, 0.0976666659116745, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [2, 2, 5, 5, 8, 6, 9, 7, 8, 0, 1, 4, 9], [3, 0, 1, 1, 1, 0, 0, 2], [20, 90, 97, 34], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 1, 1, 8, 5, 5, 4, 6, 6, 9, 8, 1, 2, 9, 1, 5, 8, 5, 5, 3, 5, 6, 6, 6, 9, 2, 3, 9, 6, 6, 5, 0, 9, 2, 3, 2, 6, 8, 8, 2, 6, 6, 8, 6, 9, 9, 5, 7, 3, 8, 4, 4, 3, 2, 4, 5, 6, 0, 0, 6, 8, 1, 7, 7, 2, 5], [0, 3, 2, 1, 0, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 42, 12, 75, 46, 8, 31, 92, 99, 48, 89, 80, 66], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 7, 5, 3, 6, 2, 0, 1, 1, 5, 1, 3, 1, 2, 6, 3, 1, 3, 5, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 6, 2, 2, 8, 0, 9, 8, 6, 0, 7, 7, 4, 2, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [1, 2, 1, 5, 7, 2, 3, 1, 2, 5, 1, 4, 7, 4, 7, 7, 2, 0, 7, 2, 0, 7, 6, 5, 3, 4, 7, 0, 3, 4, 0], [42, 51, 29, 55, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 1, 8, 4, 4, 1, 18, 10, 8, 0, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(grad, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(grad), beta)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.negative(grad))))), tf.math.subtract(beta, tf.math.subtract(tf.math.square(sigma), alpha))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [10.398841857910156, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.19614318013191223, 0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [273.41259765625, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10433333367109299, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}]