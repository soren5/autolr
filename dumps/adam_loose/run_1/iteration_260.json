[{"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 6, 0, 9, 1, 1, 0, 7, 8, 2, 0, 4, 9], [1, 2, 1, 2, 1, 2, 0, 2], [46, 5, 97], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 8, 3, 0, 5, 9, 5, 5, 2, 2, 6, 1, 2, 2, 0, 6, 8, 5, 3, 2, 8, 8, 0, 4, 0, 2, 0, 6, 6, 2, 6, 1, 2, 8, 2, 2, 2, 3, 8, 2, 6, 0, 6, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [5, 0, 2, 1, 1, 1, 2, 0, 3, 3, 0, 3, 3, 3, 3, 1, 0, 0, 2, 5, 1, 5, 5, 1, 2, 3, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [51, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [0, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [42, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [6, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.32742857933044434, "mapping_values": [1, 6, 4, 2, 1, 3, 2, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.negative(grad)), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.337003707885742, 2.294426918029785, 2.5104475021362305, 2.304818868637085, 2.3034005165100098, 2.304281234741211, 2.2878453731536865], "accuracy": [0.21001188457012177, 0.12310130894184113, 0.18174614012241364, 0.10210011899471283, 0.12851670384407043, 0.10738343745470047, 0.13181878626346588], "val_loss": [2.308133840560913, 1.9394233226776123, 2.3076415061950684, 2.2895026206970215, 2.3062870502471924, 2.3014254570007324, 2.140794038772583], "val_accuracy": [0.10066666454076767, 0.32499998807907104, 0.10300000011920929, 0.12033333629369736, 0.1003333330154419, 0.1003333330154419, 0.25866666436195374]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 6, 0, 9, 5, 1, 0, 7, 8, 2, 0, 4, 9], [1, 1, 1, 2, 1, 2, 0, 2], [46, 5, 97], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 3, 0, 5, 2, 2, 5, 0, 0, 6, 1, 2, 2, 0, 3, 8, 5, 3, 3, 5, 8, 3, 4, 0, 2, 0, 8, 6, 2, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 0, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [5, 0, 2, 1, 1, 1, 2, 0, 2, 3, 0, 3, 3, 3, 3, 2, 0, 0, 2, 5, 2, 5, 5, 1, 2, 3, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 31, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [0, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [42, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.26742857694625854, "mapping_values": [1, 1, 0, 1, 0, 69, 43, 26, 5, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.square(grad), tf.math.multiply(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.add(tf.math.square(tf.math.negative(tf.math.negative(tf.math.divide_no_nan(beta, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.multiply(tf.math.sqrt(alpha), beta)), tf.math.square(tf.math.multiply(tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), beta), grad))))))), tf.math.square(tf.math.sqrt(tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.pow(tf.math.negative(tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(grad, tf.math.square(tf.math.add(grad, beta)))), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, grad))), beta))), tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.negative(tf.math.sqrt(alpha)))), beta))), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3040926456451416, 2.2780489921569824, 2.25732421875, 2.259633779525757, 3.065845012664795, 2.309354782104492, 2.3042237758636475, 2.30312442779541, 2.3030636310577393], "accuracy": [0.2044644057750702, 0.14568749070167542, 0.18782195448875427, 0.1422533392906189, 0.175670325756073, 0.09985470771789551, 0.09972262382507324, 0.09959053993225098, 0.1010434553027153], "val_loss": [2.2951996326446533, 2.0381131172180176, 2.3061776161193848, 1.8586186170578003, 2.314927339553833, 2.3047902584075928, 2.3031234741210938, 2.302701234817505, 2.3026649951934814], "val_accuracy": [0.09866666793823242, 0.24066667258739471, 0.1003333330154419, 0.27033331990242004, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 6, 0, 1, 4, 1, 0, 7, 8, 2, 0, 4, 9], [1, 2, 1, 2, 1, 2, 0, 2], [46, 5, 97], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 8, 3, 0, 5, 2, 9, 5, 6, 1, 6, 1, 2, 2, 0, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 8, 6, 2, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 9, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [2, 0, 2, 1, 1, 1, 2, 0, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [2, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [42, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.22200000286102295, "mapping_values": [1, 18, 10, 8, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(alpha, tf.math.pow(tf.math.subtract(tf.math.negative(grad), alpha), grad))), tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.add(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.square(beta), lambda shape,  alpha, beta, sigma, grad: beta, lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.597224235534668, 2.304638385772705, 2.3028666973114014, 2.222113847732544, 2.4266889095306396, 2.3046059608459473, 2.30329966545105, 2.303070068359375, 2.303243637084961], "accuracy": [0.17593449354171753, 0.09602430462837219, 0.1022322028875351, 0.17131158709526062, 0.1368379294872284, 0.10130762308835983, 0.10196803510189056, 0.10236428678035736, 0.09800554811954498], "val_loss": [2.305957078933716, 2.303072452545166, 2.299891710281372, 2.2109177112579346, 2.3054893016815186, 2.3033509254455566, 2.3027732372283936, 2.3027215003967285, 2.302825450897217], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.10000000149011612, 0.22066666185855865, 0.09700000286102295, 0.10100000351667404, 0.10100000351667404, 0.09866666793823242, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 6, 0, 9, 9, 1, 0, 7, 8, 2, 0, 4, 9], [1, 2, 1, 2, 1, 2, 0, 2], [46, 5, 97], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 8, 3, 0, 5, 2, 9, 5, 6, 1, 6, 1, 2, 2, 0, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 8, 6, 2, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 9, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [5, 0, 2, 1, 1, 1, 2, 0, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [5, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [42, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.22114285826683044, "mapping_values": [1, 6, 5, 1, 2, 3, 2, 1, 0, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.negative(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(grad, grad), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.4152181148529053, 2.285276174545288, 2.303938150405884, 2.30312442779541, 2.3029723167419434, 2.302868604660034], "accuracy": [0.18702945113182068, 0.12600713968276978, 0.09655263274908066, 0.10210011899471283, 0.09813763201236725, 0.10302469879388809], "val_loss": [2.2622177600860596, 2.30427885055542, 2.30320143699646, 2.302694082260132, 2.3025965690612793, 2.302067756652832], "val_accuracy": [0.2160000056028366, 0.09933333098888397, 0.09866666793823242, 0.09866666793823242, 0.09700000286102295, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 6, 0, 6, 5, 1, 0, 7, 8, 2, 0, 4, 9], [2, 2, 1, 2, 1, 2, 0, 2], [46, 5, 97], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 8, 3, 0, 5, 2, 2, 5, 6, 0, 6, 1, 2, 2, 0, 3, 8, 5, 3, 2, 5, 8, 3, 4, 0, 2, 0, 8, 6, 2, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 0, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [5, 0, 2, 1, 1, 1, 2, 0, 2, 3, 0, 3, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 3, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [0, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [42, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [6, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.17599999904632568, "mapping_values": [1, 11, 6, 5, 0, 78, 48, 30, 6, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 54, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.negative(tf.math.divide_no_nan(grad, tf.math.square(tf.math.subtract(alpha, grad))))), alpha), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.math.square(grad)), tf.math.add(tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(beta, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.multiply(tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.add(tf.math.square(tf.math.sqrt(alpha)), beta), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.pow(tf.math.negative(beta), grad), tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.square(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad)), tf.math.add(grad, tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(grad), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(beta, grad)))))), tf.math.add(tf.math.square(alpha), grad)), grad), alpha))), tf.math.pow(beta, grad))))), grad))))), grad), tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.325122833251953, 2.490694522857666, 2.306166887283325, 2.303403854370117, 2.3026485443115234, 2.292919158935547, 2.3410162925720215, 2.3037052154541016, 2.3678791522979736, 2.3093068599700928, 2.3034608364105225], "accuracy": [0.19970941543579102, 0.18861444294452667, 0.09734513610601425, 0.09853387624025345, 0.09932637959718704, 0.12230881303548813, 0.10038304328918457, 0.10315678268671036, 0.17250032722949982, 0.09906221181154251, 0.09721305221319199], "val_loss": [2.2981722354888916, 2.3093085289001465, 2.303762197494507, 2.3023951053619385, 2.301276445388794, 2.4237027168273926, 2.3037686347961426, 2.2964000701904297, 2.3178963661193848, 2.30393648147583, 2.302924871444702], "val_accuracy": [0.0989999994635582, 0.09799999743700027, 0.09799999743700027, 0.10233332961797714, 0.10333333164453506, 0.17266666889190674, 0.10166666656732559, 0.16500000655651093, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [4, 9, 7, 9, 5, 1, 0, 7, 8, 2, 2, 4, 9], [1, 2, 1, 2, 1, 2, 0, 2], [46, 5, 97], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 3, 3, 5, 8, 9, 5, 4, 1, 6, 1, 3, 2, 0, 3, 2, 9, 3, 2, 5, 4, 3, 6, 0, 2, 0, 8, 6, 1, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 9, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [5, 0, 5, 3, 1, 1, 2, 0, 2, 3, 2, 3, 1, 3, 3, 2, 0, 0, 3, 5, 1, 5, 5, 1, 2, 3, 3, 1, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 7, 5, 4, 6, 0, 4, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [7, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [42, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 1, 0, 1, 0, 15, 9, 6, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(tf.math.square(tf.math.pow(grad, tf.math.divide_no_nan(tf.math.negative(grad), beta))), tf.math.pow(sigma, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2194.358642578125, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.18134988844394684, 0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [287008736.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09533333033323288, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 6, 0, 9, 5, 1, 0, 7, 8, 2, 0, 4, 9], [1, 2, 1, 2, 1, 2, 0, 2], [46, 5, 97], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 8, 3, 0, 1, 2, 2, 5, 6, 0, 6, 1, 2, 2, 0, 3, 8, 6, 3, 2, 5, 8, 9, 4, 0, 2, 0, 0, 6, 9, 9, 4, 2, 5, 2, 2, 3, 3, 8, 2, 6, 0, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [4, 0, 2, 1, 1, 1, 2, 3, 2, 3, 2, 3, 3, 3, 1, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [0, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [42, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 50, 34, 16, 4, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.divide_no_nan(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), beta)), tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.multiply(tf.math.sqrt(alpha), beta)), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(grad, beta), grad), tf.math.square(tf.math.sqrt(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))))), tf.math.pow(beta, tf.math.negative(tf.math.add(tf.math.negative(tf.math.negative(grad)), tf.math.divide_no_nan(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(grad, tf.math.add(grad, alpha))))), tf.math.square(beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [14.095974922180176, 5.980203151702881, 2.3081626892089844, 2.30391788482666, 2.3032615184783936, 2.3030073642730713, 2.302900791168213, 2.303006887435913, 2.303007125854492, 2.3029158115386963, 2.3031201362609863], "accuracy": [0.17091533541679382, 0.10091137140989304, 0.09998679161071777, 0.09813763201236725, 0.09179764986038208, 0.09642054885625839, 0.0948355570435524, 0.09496764093637466, 0.09470347315073013, 0.09602430462837219, 0.09642054885625839], "val_loss": [9.21203899383545, 2.3123619556427, 2.3045570850372314, 2.3031973838806152, 2.3028128147125244, 2.302752733230591, 2.302684783935547, 2.3026087284088135, 2.3025383949279785, 2.3025920391082764, 2.3025898933410645], "val_accuracy": [0.09933333098888397, 0.0989999994635582, 0.09666666388511658, 0.09666666388511658, 0.09700000286102295, 0.10266666859388351, 0.0989999994635582, 0.09666666388511658, 0.10133333504199982, 0.09700000286102295, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 6, 1, 9, 9, 1, 6, 7, 8, 2, 0, 4, 9], [1, 2, 1, 2, 1, 2, 0, 2], [46, 5, 97], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 8, 3, 0, 5, 2, 9, 5, 6, 1, 6, 1, 2, 2, 0, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 8, 6, 2, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 9, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [5, 0, 2, 1, 1, 1, 2, 0, 2, 3, 0, 3, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 3, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 31, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [0, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [42, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [1, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 5, 2, 2, 1, 0, 1, 0, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.subtract(grad, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.304579734802246, 4231.22216796875, 65346476.0, 975110406144.0, 1.4861291218796544e+16, 2.2363158752163948e+20, 3.2681396075577164e+24], "accuracy": [0.09298639744520187, 0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3049938678741455, 109793.109375, 1641665920.0, 24517296521216.0, 3.664480871634698e+17, 5.465697423316167e+21, 8.147200055641005e+25], "val_accuracy": [0.09833333641290665, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 6, 0, 9, 5, 1, 9, 7, 8, 2, 0, 4, 9], [1, 2, 1, 2, 1, 2, 0, 2], [46, 5, 97], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 8, 3, 0, 3, 2, 9, 5, 6, 1, 6, 1, 3, 2, 0, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 4, 8, 6, 2, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 2, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [0, 0, 2, 1, 1, 1, 2, 0, 2, 3, 2, 3, 3, 3, 3, 3, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 31, 80, 75, 41, 70, 82, 92, 32, 48, 89, 74], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [5, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [42, 1, 29, 45, 84, 13, 74, 53, 87, 59], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 5, 2, 1, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.negative(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.4633872509002686, 2.3018341064453125, 3.3947606086730957, 2.313568353652954, 2.3051466941833496, 2.3033127784729004], "accuracy": [0.17778365314006805, 0.12838461995124817, 0.15519747138023376, 0.09972262382507324, 0.10328886657953262, 0.10077928751707077], "val_loss": [2.304300308227539, 2.3005332946777344, 2.3197197914123535, 2.3058485984802246, 2.3031818866729736, 2.302637815475464], "val_accuracy": [0.10066666454076767, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [9, 7, 0, 7, 5, 9, 0, 7, 8, 2, 0, 4, 9], [1, 2, 1, 2, 1, 2, 0, 2], [46, 5, 97], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 3, 9, 5, 8, 9, 5, 4, 1, 6, 1, 3, 2, 0, 3, 2, 9, 3, 2, 5, 4, 3, 6, 0, 2, 0, 8, 6, 1, 6, 4, 2, 5, 2, 2, 6, 3, 8, 2, 6, 9, 8, 6, 2, 5, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [5, 0, 2, 1, 1, 1, 2, 0, 2, 3, 2, 3, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 2, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 7, 5, 4, 6, 0, 3, 1, 9, 4, 3, 6, 1, 9, 6, 3, 4, 1, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [7, 4, 2, 3, 0, 2, 3, 3, 2, 5, 1, 4, 0, 0, 6, 1, 0, 7, 2, 0, 3, 3, 2, 6, 3, 0, 0, 4, 1, 4, 5, 1, 1], [42, 1, 29, 45, 84, 13, 74, 53, 87, 59], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [3, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 2, 1, 1, 0, 3, 1, 2, 0, 16, 8, 8, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(grad, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(tf.math.add(beta, sigma), tf.math.square(grad)), tf.math.subtract(grad, sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]