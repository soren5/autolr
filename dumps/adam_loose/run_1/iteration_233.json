[{"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 8, 5, 8, 8, 1, 9, 7, 8, 2, 2, 4, 9], [2, 1, 1, 1, 0, 0, 0, 2], [20, 44, 97, 49], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 1, 0, 5, 1, 5, 6, 6, 1, 1, 1, 2, 6, 1, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 5, 6, 2, 6, 4, 2, 5, 0, 2, 6, 8, 8, 2, 6, 8, 8, 6, 2, 9, 6, 1, 3, 9, 4, 4, 3, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 2, 8, 5, 5, 5, 9], [1, 3, 2, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [8, 7, 5, 0, 6, 2, 3, 1, 1, 4, 1, 3, 1, 9, 6, 3, 1, 3, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 2, 4, 1, 7, 2, 3, 4, 2, 5, 1, 4, 2, 4, 7, 7, 4, 0, 7, 4, 4, 4, 6, 5, 6, 1, 4, 3, 3, 2, 1], [42, 51, 29, 45, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [5, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.5037142634391785, "mapping_values": [1, 7, 5, 2, 0, 7, 4, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(grad), tf.math.square(tf.math.sqrt(tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(alpha, tf.math.subtract(tf.math.negative(grad), beta))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.6753411293029785, 2.304535150527954, 2.2596235275268555, 2.1390671730041504, 2.1909961700439453, 2.1446526050567627, 2.396512985229492, 2.303101062774658, 2.2234909534454346, 2.2924017906188965, 1.9860235452651978], "accuracy": [0.21357811987400055, 0.10170386731624603, 0.16510368883609772, 0.2596750855445862, 0.20921939611434937, 0.23154141008853912, 0.14714039862155914, 0.10672302544116974, 0.1666886806488037, 0.1332716941833496, 0.29322415590286255], "val_loss": [2.31264591217041, 2.2896454334259033, 2.1870217323303223, 2.2779502868652344, 2.3011462688446045, 2.8328044414520264, 2.303008794784546, 2.2703499794006348, 2.305659770965576, 2.0556411743164062, 1.9432944059371948], "val_accuracy": [0.10100000351667404, 0.1823333352804184, 0.2750000059604645, 0.11966666579246521, 0.109333336353302, 0.5173333287239075, 0.10300000011920929, 0.3526666760444641, 0.10733333230018616, 0.3423333466053009, 0.3373333215713501]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 8, 5, 8, 5, 1, 9, 7, 8, 2, 2, 4, 9], [1, 2, 1, 2, 1, 2, 0, 2], [20, 5, 97, 21], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 3, 0, 5, 1, 5, 6, 6, 1, 1, 1, 2, 6, 0, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 5, 6, 2, 6, 4, 2, 5, 2, 2, 6, 8, 8, 2, 6, 9, 8, 6, 2, 9, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [0, 3, 2, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [7, 7, 5, 0, 6, 2, 3, 1, 1, 4, 1, 3, 1, 9, 6, 3, 1, 3, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 0, 4, 1, 7, 2, 3, 4, 2, 5, 1, 4, 2, 4, 7, 7, 4, 0, 7, 4, 4, 4, 6, 5, 6, 1, 4, 3, 3, 2, 1], [49, 51, 29, 63, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [5, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.34057143330574036, "mapping_values": [1, 3, 1, 2, 0, 1, 0, 1, 1, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(grad, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.439765691757202, 2.305858612060547, 2.319671869277954, 2.320460319519043, 2.3068082332611084, 2.3027939796447754], "accuracy": [0.1900673657655716, 0.15295206010341644, 0.16431118547916412, 0.1834632158279419, 0.10315678268671036, 0.10051512718200684], "val_loss": [2.2196767330169678, 2.089193105697632, 1.7123020887374878, 2.3095364570617676, 2.303445339202881, 2.300624370574951], "val_accuracy": [0.33266666531562805, 0.3023333251476288, 0.31299999356269836, 0.09600000083446503, 0.09600000083446503, 0.10466666519641876]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 8, 5, 8, 6, 1, 7, 7, 8, 2, 2, 4, 9], [2, 2, 1, 2, 1, 2, 0, 2], [20, 5, 97, 21], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 0, 0, 5, 1, 5, 6, 6, 1, 1, 1, 2, 6, 1, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 5, 6, 2, 6, 4, 2, 5, 0, 2, 6, 8, 8, 2, 6, 8, 8, 6, 2, 9, 6, 1, 3, 9, 4, 4, 3, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 2, 8, 5, 5, 5, 9], [0, 3, 2, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 7, 4, 9, 6, 2, 0, 1, 9, 6, 1, 3, 1, 5, 2, 3, 8, 3, 8, 1, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 2, 8, 7, 4, 8, 6, 0, 6, 7, 4, 2, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 0, 4, 1, 7, 2, 3, 4, 2, 5, 1, 4, 2, 4, 7, 7, 4, 0, 7, 4, 4, 4, 6, 5, 6, 1, 4, 3, 3, 2, 1], [92, 51, 29, 63, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [7, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.3019999861717224, "mapping_values": [1, 4, 2, 2, 0, 1, 0, 1, 1, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(grad), grad), lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(grad, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.2923099994659424, 2.3195958137512207, 2.29699444770813, 2.2962005138397217, 2.300431489944458, 2.681519031524658, 2.3283395767211914, 2.3161566257476807], "accuracy": [0.19759608805179596, 0.17355699837207794, 0.12270505726337433, 0.13393211364746094, 0.11094967275857925, 0.17051908373832703, 0.13591335713863373, 0.14093250036239624], "val_loss": [2.300912380218506, 2.304293155670166, 2.2379138469696045, 2.3027584552764893, 2.2877275943756104, 2.320131540298462, 2.120631456375122, 2.3015522956848145], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.304666668176651, 0.10100000351667404, 0.2303333282470703, 0.10166666656732559, 0.27533334493637085, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 2, 5, 4, 5, 0, 1, 4, 8, 8, 4], [0, 0, 1, 1, 0, 0, 0, 2], [20, 5, 74, 21], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 1, 1, 1, 5, 1, 4, 6, 6, 0, 8, 1, 2, 9, 1, 5, 8, 5, 5, 3, 5, 6, 6, 6, 9, 2, 3, 9, 6, 6, 5, 0, 9, 2, 3, 2, 6, 8, 8, 2, 6, 6, 8, 6, 9, 9, 5, 7, 3, 8, 4, 4, 3, 2, 4, 5, 6, 0, 0, 6, 8, 1, 7, 7, 2, 5], [4, 4, 2, 1, 0, 3, 0, 1, 3, 5, 2, 0, 1, 3, 1, 3, 0, 3, 2, 3, 1, 2, 5, 5, 2, 0, 3, 3, 0, 5, 0, 0, 3, 3, 1, 1, 3, 0, 3, 5, 4], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [8, 7, 5, 0, 6, 2, 3, 1, 1, 4, 1, 3, 1, 9, 6, 3, 1, 3, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 0, 4, 1, 7, 2, 3, 4, 2, 5, 1, 4, 2, 4, 7, 7, 4, 0, 7, 4, 4, 4, 6, 5, 6, 1, 4, 3, 3, 2, 1], [49, 51, 29, 63, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 6, 1, 7, 9, 5, 9, 6, 2, 9], [5, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.2834285795688629, "mapping_values": [1, 15, 10, 5, 3, 1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(tf.math.square(tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.subtract(alpha, tf.math.pow(tf.math.sqrt(alpha), tf.math.sqrt(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.451293468475342, 2.3010435104370117, 2.3050827980041504, 2.2992653846740723, 2.4827232360839844, 2.3044166564941406, 2.303562879562378, 2.3032891750335693, 2.3034443855285645], "accuracy": [0.17831197381019592, 0.16021661460399628, 0.09668471664190292, 0.109232597053051, 0.13155461847782135, 0.10315678268671036, 0.09391097724437714, 0.0948355570435524, 0.09430722147226334], "val_loss": [2.212282657623291, 2.306772232055664, 2.3030037879943848, 2.2582695484161377, 2.3054420948028564, 2.3029556274414062, 2.3028688430786133, 2.302687406539917, 2.302706003189087], "val_accuracy": [0.10633333027362823, 0.09733333438634872, 0.09666666388511658, 0.2903333306312561, 0.10066666454076767, 0.10066666454076767, 0.09933333098888397, 0.09933333098888397, 0.10166666656732559]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [2, 8, 5, 8, 8, 1, 9, 7, 8, 2, 2, 4, 9], [2, 2, 1, 2, 1, 2, 0, 2], [46, 5, 97], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 3, 0, 5, 1, 5, 6, 6, 1, 1, 1, 2, 6, 0, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 5, 6, 2, 6, 4, 2, 5, 2, 2, 6, 8, 8, 2, 6, 9, 8, 6, 2, 9, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [0, 3, 2, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [8, 7, 5, 0, 6, 2, 3, 1, 1, 4, 1, 3, 1, 9, 6, 3, 1, 3, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [2, 2, 2, 2, 4, 2, 3, 1, 2, 5, 1, 1, 0, 3, 6, 0, 0, 7, 2, 0, 3, 3, 5, 6, 3, 0], [78, 32, 27, 75, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [5, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.23714286088943481, "mapping_values": [1, 3, 1, 2, 0, 1, 0, 1, 1, 32, 18, 14, 2, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, grad), lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.add(tf.math.square(tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.multiply(tf.math.subtract(tf.math.subtract(beta, beta), grad), tf.math.pow(tf.math.subtract(beta, tf.math.multiply(sigma, alpha)), tf.math.subtract(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.subtract(alpha, alpha)), tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), sigma)))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.356902837753296, 2.3324549198150635, 2.266618251800537, 2.483689069747925, 2.3035168647766113, 2.3033502101898193, 2.303227424621582, 2.3031253814697266], "accuracy": [0.2008981704711914, 0.148064985871315, 0.1736890822649002, 0.1352529376745224, 0.1014397069811821, 0.10051512718200684, 0.0956280529499054, 0.09998679161071777], "val_loss": [2.257401704788208, 2.256216049194336, 2.1160459518432617, 2.3034043312072754, 2.302659273147583, 2.302596092224121, 2.3027498722076416, 2.302551031112671], "val_accuracy": [0.17933332920074463, 0.22699999809265137, 0.22733333706855774, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10066666454076767, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 8, 5, 8, 8, 1, 9, 7, 8, 2, 2, 4, 9], [3, 0, 1, 1, 0, 0, 0, 2], [21, 5, 97, 21], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 3, 0, 5, 1, 5, 6, 6, 1, 1, 1, 2, 6, 0, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 5, 6, 2, 6, 4, 2, 5, 2, 2, 6, 8, 8, 2, 6, 9, 8, 6, 2, 9, 4, 1, 3, 9, 4, 5, 0, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 1, 3, 1, 5, 0, 9], [3, 3, 2, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [8, 7, 5, 3, 6, 2, 2, 1, 1, 5, 1, 2, 1, 2, 9, 3, 9, 3, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 2, 8, 6, 9, 8, 6, 0, 7, 7, 4, 2, 5, 0, 8, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 0, 4, 1, 7, 2, 3, 4, 2, 5, 1, 4, 2, 4, 7, 7, 4, 0, 7, 4, 4, 4, 6, 5, 6, 1, 4, 3, 3, 2, 1], [42, 51, 29, 45, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.21885713934898376, "mapping_values": [1, 4, 2, 2, 1, 2, 1, 1, 0, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(grad), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [3.226776123046875, 2.2495737075805664, 2.230421781539917, 2.278972625732422, 2.3134994506835938, 2.303929328918457, 2.302924871444702], "accuracy": [0.18372738361358643, 0.14978206157684326, 0.21503104269504547, 0.18901069462299347, 0.09298639744520187, 0.09734513610601425, 0.09959053993225098], "val_loss": [2.3123297691345215, 2.2984163761138916, 2.3032374382019043, 2.338308811187744, 2.3038313388824463, 2.302845001220703, 2.302727460861206], "val_accuracy": [0.09533333033323288, 0.20133332908153534, 0.11100000143051147, 0.10000000149011612, 0.1003333330154419, 0.1003333330154419, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 2, 5, 5, 8, 6, 9, 7, 8, 0, 1, 4, 9], [2, 0, 1, 1, 0, 0, 0, 2], [20, 5, 97, 88], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 1, 0, 5, 1, 5, 6, 6, 1, 1, 1, 2, 6, 1, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 5, 6, 2, 6, 4, 2, 5, 0, 2, 6, 8, 8, 2, 6, 8, 8, 6, 2, 9, 6, 1, 3, 9, 4, 4, 3, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 2, 8, 5, 5, 5, 9], [0, 3, 2, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 8, 82, 92, 32, 48, 89, 74], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 4, 5, 6, 6, 0, 0, 1, 1, 5, 4, 3, 1, 2, 6, 2, 1, 3, 1, 8, 5, 4, 1, 3, 2, 9, 2, 6, 0, 0, 4, 1, 8, 0, 1, 8, 6, 0, 7, 7, 9, 2, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 3, 4, 4, 7, 4, 3, 0, 3, 4, 1, 4, 7, 4, 7, 7, 2, 0, 7, 2, 4, 7, 6, 5, 6, 4, 7, 0, 3, 2, 0], [78, 51, 27, 82, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [5, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 7, 2, 2, 4, 2, 2, 1, 53, 31, 22, 3, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.square(tf.math.sqrt(grad))), tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.pow(tf.math.square(grad), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.negative(sigma)), grad), tf.math.subtract(grad, tf.math.subtract(grad, tf.math.square(tf.math.pow(grad, tf.math.multiply(tf.math.subtract(sigma, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.subtract(sigma, tf.math.sqrt(tf.math.square(grad))), alpha), tf.math.pow(grad, grad)), grad), tf.math.subtract(tf.math.multiply(tf.math.add(grad, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(tf.math.divide_no_nan(tf.math.negative(beta), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.negative(grad)))))), tf.math.pow(beta, grad)))))))), grad), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.5499684810638428, 2.248152732849121, 2.4271299839019775, 2.3648109436035156, 2.3065125942230225, 2.303645610809326, 2.303133964538574], "accuracy": [0.1896711140871048, 0.16642451286315918, 0.10236428678035736, 0.18333113193511963, 0.09998679161071777, 0.09998679161071777, 0.09721305221319199], "val_loss": [2.3025710582733154, 2.971550703048706, 2.2870914936065674, 2.309058904647827, 2.303858757019043, 2.302841901779175, 2.302690267562866], "val_accuracy": [0.09799999743700027, 0.10499999672174454, 0.10100000351667404, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [2, 2, 5, 5, 8, 6, 9, 7, 8, 0, 1, 4, 9], [2, 0, 1, 1, 0, 0, 0, 2], [20, 5, 97], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 1, 0, 5, 1, 5, 6, 6, 1, 1, 1, 2, 6, 1, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 5, 6, 2, 6, 4, 2, 5, 0, 2, 6, 8, 8, 2, 6, 8, 8, 6, 2, 9, 6, 1, 3, 9, 4, 4, 3, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 2, 8, 5, 5, 5, 9], [0, 2, 2, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 70, 82, 92, 32, 48, 89, 74], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 7, 4, 3, 6, 2, 0, 1, 9, 6, 1, 3, 1, 5, 2, 3, 8, 3, 8, 1, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 2, 8, 7, 4, 8, 6, 0, 6, 7, 4, 2, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [2, 2, 2, 2, 0, 2, 3, 1, 2, 5, 1, 1, 0, 3, 6, 0, 0, 7, 2, 0, 3, 3, 5, 6, 3, 0], [49, 51, 29, 63, 84, 13, 74, 53], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [5, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 0, 2, 1, 1, 1, 14, 7, 7, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(beta, tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), beta))), sigma), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [10.696114540100098, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.19416193664073944, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [124.46025085449219, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [2, 8, 5, 8, 8, 1, 9, 7, 8, 2, 2, 4, 9], [2, 0, 1, 1, 0, 0, 0, 2], [12, 5, 97], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 4, 6, 5, 1, 4, 6, 6, 0, 8, 1, 2, 9, 1, 5, 8, 5, 5, 3, 5, 6, 6, 6, 9, 2, 3, 9, 6, 6, 5, 0, 9, 2, 3, 2, 6, 8, 8, 2, 6, 6, 8, 6, 9, 9, 5, 7, 3, 8, 4, 4, 3, 2, 4, 5, 6, 0, 0, 6, 8, 1, 7, 7, 2, 5], [0, 2, 0, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 8, 82, 92, 32, 48, 89, 74], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 7, 4, 9, 6, 2, 0, 1, 9, 6, 1, 3, 1, 5, 2, 3, 8, 3, 8, 1, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 2, 8, 7, 4, 8, 6, 0, 6, 7, 4, 2, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [2, 2, 4, 2, 7, 2, 3, 4, 2, 5, 1, 4, 2, 4, 7, 7, 4, 0, 7, 4, 4, 4, 6, 5, 6, 1, 4, 3, 3, 2, 1], [78, 32, 27, 75, 84, 13, 74, 53], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 3, 6, 1, 7, 9, 5, 9, 6, 2, 9], [5, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 1, 2, 1, 68, 47, 21, 12, 7, 3, 4, 0, 3, 1, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(tf.math.square(beta), tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.subtract(tf.math.square(tf.math.sqrt(tf.math.square(tf.math.square(tf.math.multiply(tf.math.square(beta), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))), beta)), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, beta), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.square(tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))), tf.math.multiply(grad, tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(beta), tf.math.sqrt(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), beta))))))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad)), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(beta, grad)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(grad, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.304142475128174, 2.302914619445801, 2.302888870239258, 2.302887439727783, 2.3030309677124023, 2.302950382232666, 2.302913188934326, 2.3028454780578613, 2.3029699325561523], "accuracy": [0.09470347315073013, 0.0948355570435524, 0.09747721254825592, 0.09972262382507324, 0.09602430462837219, 0.0936468094587326, 0.0944393053650856, 0.09642054885625839, 0.09325055778026581], "val_loss": [2.3026621341705322, 2.3025927543640137, 2.302600622177124, 2.3025898933410645, 2.302659034729004, 2.3027584552764893, 2.3026227951049805, 2.302682876586914, 2.302638292312622], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10000000149011612, 0.10133333504199982, 0.09733333438634872, 0.09733333438634872, 0.1003333330154419, 0.09733333438634872, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 5, 5, 0, 5, 0, 9, 3, 8], [2, 2, 1, 2, 1, 2, 0, 2], [20, 5, 97, 21], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [5, 4, 1, 0, 5, 1, 5, 6, 6, 1, 1, 1, 2, 6, 1, 3, 8, 5, 3, 2, 5, 8, 3, 6, 0, 2, 0, 5, 6, 2, 6, 4, 2, 5, 0, 2, 6, 8, 8, 2, 6, 8, 8, 6, 2, 9, 6, 1, 3, 9, 4, 4, 3, 2, 1, 3, 8, 8, 0, 6, 8, 6, 3, 7, 8, 2, 8, 5, 5, 5, 9], [0, 3, 2, 1, 1, 3, 2, 0, 2, 3, 2, 0, 3, 3, 3, 2, 0, 0, 2, 5, 1, 5, 5, 1, 2, 0, 3, 5, 0, 3, 3, 3, 3, 1, 1, 1], [42, 15, 80, 75, 17, 8, 82, 92, 32, 48, 89, 74], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [8, 5, 5, 0, 6, 2, 3, 1, 1, 4, 1, 2, 1, 9, 6, 0, 1, 4, 8, 8, 5, 4, 1, 3, 2, 6, 2, 4, 4, 0, 7, 3, 2, 7, 9, 8, 6, 0, 7, 7, 4, 8, 5, 0, 0, 3, 5, 9, 6, 8, 3, 3, 1, 0, 6, 8, 0, 1, 2, 9, 8, 8, 2, 8], [4, 3, 4, 4, 7, 4, 3, 0, 3, 5, 1, 4, 7, 4, 7, 7, 2, 0, 7, 2, 4, 7, 6, 5, 6, 4, 7, 0, 3, 2, 0], [72, 51, 29, 45, 84, 13, 74, 53], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [7, 3, 6, 1, 7, 2, 5, 1, 6, 2, 9], [4, 0, 6, 2, 3, 7, 6, 3, 2, 0], [68, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 2, 1, 0, 1, 0, 1, 1, 4, 3, 1, 0, 3, 1, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.square(tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(grad, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3039424419403076, 2.3029122352600098, 2.303013324737549, 2.3030173778533936, 2.3029942512512207, 2.3028879165649414], "accuracy": [0.0866464152932167, 0.09272222965955734, 0.09298639744520187, 0.09219389408826828, 0.09338264167308807, 0.09879804402589798], "val_loss": [2.3026111125946045, 2.302605390548706, 2.3026459217071533, 2.302699327468872, 2.3026645183563232, 2.302615165710449], "val_accuracy": [0.10233332961797714, 0.09966666996479034, 0.0989999994635582, 0.09600000083446503, 0.10233332961797714, 0.09600000083446503]}}]