[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8488571643829346, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.20965838432312, 1.605275273323059, 1.174899697303772, 0.9858217835426331, 0.8854502439498901, 0.8390660285949707, 0.7964760661125183, 0.7493116855621338, 0.7368370890617371, 0.7423945665359497, 0.6912937164306641, 0.652807354927063, 0.6722995042800903, 0.6303475499153137, 0.638758659362793, 0.6335452795028687, 0.6118106245994568, 0.5839931964874268, 0.6074797511100769, 0.5692148208618164, 0.5713926553726196, 0.5606203079223633, 0.5617382526397705, 0.5447259545326233, 0.5329451560974121, 0.5268599390983582, 0.5340890884399414, 0.513875424861908, 0.5041987299919128, 0.5130024552345276, 0.494832307100296, 0.49036717414855957, 0.4784986972808838, 0.4866924583911896, 0.47488248348236084, 0.47904762625694275, 0.46592438220977783, 0.45425689220428467, 0.45789527893066406, 0.4461337625980377, 0.46881693601608276, 0.44601550698280334, 0.44031885266304016, 0.44752898812294006, 0.4237683117389679, 0.4238412082195282, 0.4305957853794098, 0.42562389373779297, 0.4144071340560913, 0.4031882882118225, 0.4081343710422516, 0.40373241901397705, 0.4025316536426544, 0.39863044023513794, 0.4013623595237732, 0.39603057503700256, 0.3858937621116638, 0.37867599725723267, 0.38853347301483154, 0.3791296184062958, 0.38104328513145447], "accuracy": [0.27380794286727905, 0.49848103523254395, 0.5904107689857483, 0.6441685557365417, 0.6736230254173279, 0.6915863156318665, 0.7107383608818054, 0.7235503792762756, 0.7215691208839417, 0.7257958054542542, 0.744419515132904, 0.7537974119186401, 0.7428345084190369, 0.76106196641922, 0.7605336308479309, 0.7605336308479309, 0.7684586048126221, 0.7832518815994263, 0.7713643908500671, 0.7872143983840942, 0.7841764688491821, 0.7869502305984497, 0.785629391670227, 0.7952714562416077, 0.8018755912780762, 0.8061022162437439, 0.7924976944923401, 0.8094043135643005, 0.8152159452438354, 0.809140145778656, 0.8157442808151245, 0.8182538747787476, 0.8231409192085266, 0.8165367841720581, 0.8222163319587708, 0.8197067975997925, 0.8285563588142395, 0.8327829837799072, 0.8318583965301514, 0.8350284099578857, 0.8256505131721497, 0.8327829837799072, 0.8381983637809753, 0.830669641494751, 0.8444063067436218, 0.8425571322441101, 0.8422929644584656, 0.8389908671379089, 0.846387505531311, 0.848368763923645, 0.8449346423149109, 0.8486329317092896, 0.8486329317092896, 0.852331280708313, 0.8451988101005554, 0.8479725122451782, 0.8595958352088928, 0.8597279191017151, 0.8549728989601135, 0.86118084192276, 0.8515387773513794], "val_loss": [1.9230862855911255, 1.0929569005966187, 0.8973206281661987, 0.804622232913971, 0.7767345309257507, 0.6857672333717346, 0.6721967458724976, 0.6734874844551086, 0.6915271878242493, 0.6241103410720825, 0.6087749600410461, 0.5950765609741211, 0.5749830603599548, 0.5841686725616455, 0.5530827641487122, 0.5793383121490479, 0.5353695750236511, 0.5145910382270813, 0.5285325646400452, 0.5221818685531616, 0.5045897364616394, 0.5228636264801025, 0.5050208568572998, 0.492615282535553, 0.5042333006858826, 0.48819345235824585, 0.47438427805900574, 0.4683537483215332, 0.4591546952724457, 0.4624483585357666, 0.45263615250587463, 0.45954930782318115, 0.460252970457077, 0.47306180000305176, 0.44545361399650574, 0.4519936442375183, 0.4357885718345642, 0.4363263249397278, 0.4398147761821747, 0.4561229944229126, 0.43614399433135986, 0.4212207794189453, 0.43167099356651306, 0.4146358370780945, 0.41952022910118103, 0.42774438858032227, 0.4073605239391327, 0.40770068764686584, 0.41299423575401306, 0.40159663558006287, 0.405976265668869, 0.4202680289745331, 0.40908488631248474, 0.4110962748527527, 0.3965720534324646, 0.38916847109794617, 0.3874070346355438, 0.3962351977825165, 0.4036594331264496, 0.39962854981422424, 0.390293687582016], "val_accuracy": [0.4936666786670685, 0.6496666669845581, 0.6783333420753479, 0.690666675567627, 0.7013333439826965, 0.7403333187103271, 0.7459999918937683, 0.7223333120346069, 0.7160000205039978, 0.7713333368301392, 0.7720000147819519, 0.7730000019073486, 0.7853333353996277, 0.7749999761581421, 0.7973333597183228, 0.7603333592414856, 0.79666668176651, 0.8023333549499512, 0.8036666512489319, 0.8069999814033508, 0.8106666803359985, 0.800000011920929, 0.8059999942779541, 0.8190000057220459, 0.8169999718666077, 0.8166666626930237, 0.8213333487510681, 0.8266666531562805, 0.8306666612625122, 0.8299999833106995, 0.8323333263397217, 0.8296666741371155, 0.8230000138282776, 0.8226666450500488, 0.8336666822433472, 0.8286666870117188, 0.8383333086967468, 0.8386666774749756, 0.8343333601951599, 0.8299999833106995, 0.8413333296775818, 0.8443333506584167, 0.8323333263397217, 0.8473333120346069, 0.8423333168029785, 0.8450000286102295, 0.8506666421890259, 0.8526666760444641, 0.8503333330154419, 0.8546666502952576, 0.847000002861023, 0.8426666855812073, 0.8533333539962769, 0.8500000238418579, 0.8579999804496765, 0.8633333444595337, 0.8613333106040955, 0.8573333621025085, 0.8496666550636292, 0.8519999980926514, 0.8603333234786987]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8140000104904175, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.212235450744629, 1.6109169721603394, 1.1617950201034546, 0.9542200565338135, 0.8848848938941956, 0.8193655610084534, 0.7874862551689148, 0.7342014312744141, 0.7328174710273743, 0.6932083964347839, 0.6780978441238403, 0.6699122786521912, 0.6448746919631958, 0.6271476745605469, 0.6120445132255554, 0.6092882752418518, 0.5893311500549316, 0.587572455406189, 0.5707831382751465, 0.560085117816925, 0.5674216151237488, 0.5434473752975464, 0.5355008840560913, 0.5249484777450562, 0.5296154618263245, 0.5158973932266235, 0.4963527023792267, 0.5075798034667969, 0.4971730411052704, 0.49317750334739685, 0.4836850166320801, 0.49353450536727905, 0.47586002945899963, 0.4701675772666931, 0.46280720829963684, 0.45595717430114746, 0.4558548629283905, 0.46605074405670166, 0.45632147789001465, 0.44463419914245605, 0.439561665058136], "accuracy": [0.26443007588386536, 0.49953770637512207, 0.5931845307350159, 0.6666226387023926, 0.6761326193809509, 0.6985867023468018, 0.7127195596694946, 0.7320036888122559, 0.726192057132721, 0.7432307600975037, 0.7470611333847046, 0.7474573850631714, 0.7561748623847961, 0.7675340175628662, 0.7733456492424011, 0.7775723338127136, 0.780610203742981, 0.7827235460281372, 0.791969358921051, 0.7926297783851624, 0.7835160493850708, 0.8009510040283203, 0.8045172095298767, 0.8020076751708984, 0.8033285140991211, 0.8034605979919434, 0.8171972036361694, 0.8100647330284119, 0.8128384351730347, 0.8161405324935913, 0.819970965385437, 0.8186501264572144, 0.8240655064582825, 0.8244617581367493, 0.8296129703521729, 0.833179235458374, 0.8318583965301514, 0.8273676037788391, 0.8356888294219971, 0.8356888294219971, 0.8359529972076416], "val_loss": [1.9258344173431396, 1.1065857410430908, 0.8945437669754028, 0.7818930745124817, 0.7667231559753418, 0.7276134490966797, 0.6883918642997742, 0.677717387676239, 0.6406821012496948, 0.6020367741584778, 0.6001222133636475, 0.5874335765838623, 0.5801979899406433, 0.5537632703781128, 0.5398651361465454, 0.5783262252807617, 0.5874666571617126, 0.5303496718406677, 0.52105712890625, 0.5119099020957947, 0.5211231112480164, 0.5284916758537292, 0.49808773398399353, 0.5061139464378357, 0.49502629041671753, 0.478333979845047, 0.48921263217926025, 0.4652882516384125, 0.46865466237068176, 0.46121373772621155, 0.47689542174339294, 0.4561188220977783, 0.4548022150993347, 0.44084569811820984, 0.4533556401729584, 0.435270220041275, 0.45559588074684143, 0.4487284719944, 0.45077410340309143, 0.4286990165710449, 0.4345433712005615], "val_accuracy": [0.5696666836738586, 0.6673333048820496, 0.7026666402816772, 0.7196666598320007, 0.7143333554267883, 0.7360000014305115, 0.7316666841506958, 0.7456666827201843, 0.7573333382606506, 0.7796666622161865, 0.765999972820282, 0.7856666445732117, 0.7986666560173035, 0.8013333082199097, 0.8083333373069763, 0.7816666960716248, 0.7633333206176758, 0.8009999990463257, 0.8146666884422302, 0.8203333616256714, 0.8043333292007446, 0.796999990940094, 0.8216666579246521, 0.8226666450500488, 0.8240000009536743, 0.8316666483879089, 0.8199999928474426, 0.8366666436195374, 0.8286666870117188, 0.840666651725769, 0.8230000138282776, 0.8370000123977661, 0.8389999866485596, 0.847000002861023, 0.8463333249092102, 0.8479999899864197, 0.8339999914169312, 0.8346666693687439, 0.8363333344459534, 0.8479999899864197, 0.846666693687439]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 3, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 3, 0], [80, 1], [0, 0, 1, 0, 1], [0, 7, 0], [0, 6], [0], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 5, 3, 2, 1, 2, 1, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.square(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 7, 3, 3, 5, 0, 6, 5, 5, 3, 2, 9, 0, 6, 4], [0, 3, 1, 0, 1, 3, 0, 2, 3, 2], [0, 39, 53, 74], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [6, 2, 0, 6, 3, 1, 2], [5, 0, 0, 1, 0], [16, 1], [0, 1, 0, 1], [5, 1], [0, 6], [0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 4, 4, 8], [2, 2, 3, 0, 6], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 17, 10, 4, 5, 2, 3, 2, 2, 1, 1, 1, 11, 6, 5, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.multiply(alpha, tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.divide_no_nan(alpha, tf.math.square(tf.math.square(tf.math.multiply(tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.math.divide_no_nan(grad, tf.math.pow(grad, grad))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.multiply(beta, tf.math.pow(tf.math.pow(sigma, tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [2, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 0, 3, 8, 9], [2, 0, 3, 1, 0], [34, 1], [0, 0, 1, 1], [6, 8], [0, 2], [0], [0, 0, 1], [0, 0], [3], [0]], "fitness": -0.0908571407198906, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.negative(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(sigma))", "other_info": {"loss": [2.3105885982513428, 2.3101303577423096, 2.310786724090576, 2.30985164642334, 2.309563159942627, 2.310755729675293], "accuracy": [0.09087307006120682, 0.09496764093637466, 0.09259014576673508, 0.09245806187391281, 0.08981640636920929, 0.09126931428909302], "val_loss": [2.30853533744812, 2.30853533744812, 2.30853533744812, 2.30853533744812, 2.30853533744812, 2.30853533744812], "val_accuracy": [0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763, 0.09333333373069763]}, "mapping_values": [1, 11, 6, 5, 2, 8, 5, 3, 1, 4, 2, 2, 1, 3, 2, 1, 0], "tree_depth": 12}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 8, 1, 3, 5, 6], [0, 0, 1, 0, 1], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2, 5, 2, 5, 7, 0], [2, 0, 3, 1, 0, 5, 5], [0, 26], [0, 0, 1, 1], [0, 7], [3, 6], [0], [1], [0], [2], [0]], "fitness": -0.08971428871154785, "mapping_values": [1, 12, 7, 5, 3, 19, 12, 7, 2, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.add(grad, tf.math.square(tf.math.add(tf.math.negative(alpha), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3098936080932617, 2.3094284534454346, 2.3088550567626953, 2.309386968612671, 2.31017804145813, 2.310126543045044], "accuracy": [0.09351472556591034, 0.08677849918603897, 0.0944393053650856, 0.0878351628780365, 0.09219389408826828, 0.0878351628780365], "val_loss": [2.3092427253723145, 2.3092427253723145, 2.3092427253723145, 2.3092427253723145, 2.3092427253723145, 2.3092427253723145], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}]