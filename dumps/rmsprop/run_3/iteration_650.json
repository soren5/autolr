[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8808571696281433, "mapping_values": [1, 10, 5, 5, 3, 14, 8, 6, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1058011054992676, 1.1498116254806519, 0.8304385542869568, 0.7203441262245178, 0.6393402218818665, 0.5854113698005676, 0.5511501431465149, 0.5187006592750549, 0.505515992641449, 0.4818469285964966, 0.4484843909740448, 0.43561360239982605, 0.42612436413764954, 0.41596850752830505, 0.39672064781188965, 0.3839366137981415, 0.3636326789855957, 0.3521239161491394, 0.33775001764297485, 0.31625643372535706, 0.31688356399536133, 0.30882248282432556, 0.3001636564731598, 0.2953629493713379, 0.2911835014820099, 0.28392574191093445, 0.2676911950111389, 0.2642957866191864, 0.2519010007381439, 0.2429644614458084, 0.23603840172290802, 0.2455616593360901, 0.23240527510643005], "accuracy": [0.2879408299922943, 0.5983357429504395, 0.6905296444892883, 0.722229540348053, 0.7576277852058411, 0.7792893648147583, 0.7957997918128967, 0.8074230551719666, 0.8117818236351013, 0.8165367841720581, 0.834632158279419, 0.8391229510307312, 0.843481719493866, 0.8438779711723328, 0.8529917001724243, 0.8560295701026917, 0.8659358024597168, 0.869502067565918, 0.873860776424408, 0.8791441321372986, 0.8835028409957886, 0.8838990926742554, 0.8858803510665894, 0.8910315632820129, 0.8918240666389465, 0.8916919827461243, 0.8990886211395264, 0.8993527889251709, 0.9051644206047058, 0.909259021282196, 0.9103156924247742, 0.904768168926239, 0.913089394569397], "val_loss": [1.0690844058990479, 0.7267204523086548, 0.6630074977874756, 0.5851247310638428, 0.5488004684448242, 0.5154633522033691, 0.48644670844078064, 0.4733087122440338, 0.46183642745018005, 0.4481644630432129, 0.4221508502960205, 0.41604873538017273, 0.4122338891029358, 0.4024076461791992, 0.39266952872276306, 0.3885684907436371, 0.38248133659362793, 0.3724929988384247, 0.3723068833351135, 0.36633822321891785, 0.3746758699417114, 0.36198416352272034, 0.3594156801700592, 0.37187516689300537, 0.3668769896030426, 0.34963202476501465, 0.35778117179870605, 0.35199210047721863, 0.35453882813453674, 0.364315927028656, 0.35359829664230347, 0.36456167697906494, 0.36178097128868103], "val_accuracy": [0.6523333191871643, 0.7213333249092102, 0.7549999952316284, 0.7713333368301392, 0.7846666574478149, 0.8059999942779541, 0.812666654586792, 0.8153333067893982, 0.824999988079071, 0.8309999704360962, 0.8420000076293945, 0.840666651725769, 0.8456666469573975, 0.8510000109672546, 0.8556666374206543, 0.859000027179718, 0.8543333411216736, 0.8636666536331177, 0.8653333187103271, 0.8636666536331177, 0.8576666712760925, 0.8669999837875366, 0.8650000095367432, 0.8676666617393494, 0.8683333396911621, 0.8769999742507935, 0.875, 0.8790000081062317, 0.871666669845581, 0.875, 0.8766666650772095, 0.8723333477973938, 0.8743333220481873]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.817714273929596, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2100696563720703, 1.6059213876724243, 1.1589680910110474, 0.9715670347213745, 0.9150730967521667, 0.8346189260482788, 0.7938230037689209, 0.7430117726325989, 0.7254845499992371, 0.7295197248458862, 0.6832572817802429, 0.6722022294998169, 0.6521580815315247, 0.6418372988700867, 0.6339423656463623, 0.6259151697158813, 0.600803792476654, 0.5941218733787537, 0.5852120518684387, 0.5742579698562622, 0.5505115389823914, 0.5684294700622559, 0.5424931645393372, 0.5295127630233765, 0.538746178150177, 0.519611120223999, 0.5173352956771851, 0.5099793076515198, 0.5014104247093201, 0.4950353503227234, 0.4892506003379822, 0.48226749897003174, 0.47951728105545044, 0.479976087808609, 0.4710083603858948, 0.4655793011188507, 0.4620572030544281, 0.45241180062294006, 0.45012176036834717, 0.45290154218673706, 0.43586060404777527, 0.4515519440174103], "accuracy": [0.27578920125961304, 0.5004622936248779, 0.5904107689857483, 0.6539427042007446, 0.6691322326660156, 0.700171709060669, 0.7080966830253601, 0.7248712182044983, 0.7306828498840332, 0.7283053994178772, 0.7479857206344604, 0.7478536367416382, 0.7552502751350403, 0.7617223858833313, 0.7630431652069092, 0.763967752456665, 0.7769119143486023, 0.783119797706604, 0.7804781198501587, 0.7876105904579163, 0.7969884872436523, 0.7868181467056274, 0.7976489067077637, 0.8018755912780762, 0.8013472557067871, 0.8107251524925232, 0.8088759779930115, 0.8152159452438354, 0.8182538747787476, 0.8148196935653687, 0.8191784620285034, 0.8264430165290833, 0.8251221776008606, 0.8235371708869934, 0.8296129703521729, 0.8297450542449951, 0.82683926820755, 0.8339717388153076, 0.8381983637809753, 0.8267071843147278, 0.8359529972076416, 0.8305375576019287], "val_loss": [1.915814757347107, 1.084792137145996, 0.9196785688400269, 0.8120720982551575, 0.7288657426834106, 0.6628122329711914, 0.6491236686706543, 0.6684751510620117, 0.6082324385643005, 0.6027995944023132, 0.5888271927833557, 0.5777783393859863, 0.5602014064788818, 0.5640614628791809, 0.5545679330825806, 0.5548319220542908, 0.5475380420684814, 0.532467782497406, 0.5183352828025818, 0.5174482464790344, 0.5029657483100891, 0.5187696814537048, 0.4895111620426178, 0.5126874446868896, 0.47779905796051025, 0.46767663955688477, 0.4625108540058136, 0.4699651598930359, 0.48122745752334595, 0.44468235969543457, 0.4557790160179138, 0.43991780281066895, 0.4382660388946533, 0.4352078437805176, 0.43083593249320984, 0.44969433546066284, 0.4229689836502075, 0.42908862233161926, 0.42467552423477173, 0.4211885631084442, 0.42728114128112793, 0.42015790939331055], "val_accuracy": [0.5046666860580444, 0.652999997138977, 0.6786666512489319, 0.7020000219345093, 0.7256666421890259, 0.7563333511352539, 0.753000020980835, 0.7473333477973938, 0.765999972820282, 0.7776666879653931, 0.7749999761581421, 0.7746666669845581, 0.7839999794960022, 0.7889999747276306, 0.7816666960716248, 0.7876666784286499, 0.7846666574478149, 0.7933333516120911, 0.8033333420753479, 0.8026666641235352, 0.8083333373069763, 0.7963333129882812, 0.8149999976158142, 0.7996666431427002, 0.8236666917800903, 0.8306666612625122, 0.8233333230018616, 0.8273333311080933, 0.8159999847412109, 0.8376666903495789, 0.831333339214325, 0.8420000076293945, 0.8416666388511658, 0.8416666388511658, 0.8443333506584167, 0.8336666822433472, 0.8496666550636292, 0.8433333039283752, 0.8429999947547913, 0.8453333377838135, 0.8460000157356262, 0.8450000286102295]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 5, 5], [2, 0, 1, 0, 2], [26, 22, 39], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 2, 1], [16, 1], [1, 0, 1, 1, 0, 1, 1, 1], [7, 3, 0, 2], [3, 1, 6, 4], [0], [1], [0], [1], [0]], "fitness": -0.28114286065101624, "mapping_values": [1, 6, 3, 3, 1, 14, 8, 6, 2, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(grad, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(tf.math.pow(tf.math.negative(tf.math.square(tf.math.square(beta))), beta), tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.271644115447998, 10794.16015625, NaN, NaN, NaN, NaN], "accuracy": [0.17421740293502808, 0.2176727056503296, 0.10038304328918457, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [2.1078991889953613, 88066712.0, NaN, NaN, NaN, NaN], "val_accuracy": [0.2800000011920929, 0.10233332961797714, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 6, 8, 1, 3, 5], [0, 0, 1, 2, 2], [26, 39, 39], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [5, 2, 4, 4, 0, 5, 5, 4], [2, 5, 3, 1, 0, 0], [37, 1, 21], [0, 0, 1, 0, 1, 1], [0, 7, 7], [0, 1, 1, 4], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 4, 2, 2, 0, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.sqrt(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3106765747070312, 2.3194985389709473, 2.403477907180786, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09166556596755981, 0.09945846349000931, 0.10289261490106583, 0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3132665157318115, 2.3194665908813477, 6.600794315338135, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.09733333438634872, 0.09733333438634872, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 2, 3, 1, 3, 5], [0, 0, 3, 0, 2], [26, 63, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [2, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 5, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 12, 7, 5, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.square(grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [30810.671875, 4408762.5, 76327800.0, 529381728.0, 2335904256.0, 7880507904.0], "accuracy": [0.1014397069811821, 0.09932637959718704, 0.0952318087220192, 0.09813763201236725, 0.09998679161071777, 0.09945846349000931], "val_loss": [302916.8125, 16240669.0, 174152096.0, 949118592.0, 3554610176.0, 10484206592.0], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 3, 2], [26, 39, 39], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [1, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 6, 5, 3], [0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 6, 2, 1, 6, 3, 8, 0, 3, 6, 6, 2, 4, 8, 5, 8, 9, 3], [2, 7, 6, 5, 2, 6, 7, 4, 7, 3, 0], [0, 31]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 1, 0, 1, 0, 8, 4, 4, 1, 29, 18, 11, 2], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), grad), grad)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad)), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(beta, tf.math.add(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.sqrt(grad), grad)), tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.square(grad)), grad), tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, grad))), sigma))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}]