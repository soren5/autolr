[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8808571696281433, "mapping_values": [1, 10, 5, 5, 3, 14, 8, 6, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1058011054992676, 1.1498116254806519, 0.8304385542869568, 0.7203441262245178, 0.6393402218818665, 0.5854113698005676, 0.5511501431465149, 0.5187006592750549, 0.505515992641449, 0.4818469285964966, 0.4484843909740448, 0.43561360239982605, 0.42612436413764954, 0.41596850752830505, 0.39672064781188965, 0.3839366137981415, 0.3636326789855957, 0.3521239161491394, 0.33775001764297485, 0.31625643372535706, 0.31688356399536133, 0.30882248282432556, 0.3001636564731598, 0.2953629493713379, 0.2911835014820099, 0.28392574191093445, 0.2676911950111389, 0.2642957866191864, 0.2519010007381439, 0.2429644614458084, 0.23603840172290802, 0.2455616593360901, 0.23240527510643005], "accuracy": [0.2879408299922943, 0.5983357429504395, 0.6905296444892883, 0.722229540348053, 0.7576277852058411, 0.7792893648147583, 0.7957997918128967, 0.8074230551719666, 0.8117818236351013, 0.8165367841720581, 0.834632158279419, 0.8391229510307312, 0.843481719493866, 0.8438779711723328, 0.8529917001724243, 0.8560295701026917, 0.8659358024597168, 0.869502067565918, 0.873860776424408, 0.8791441321372986, 0.8835028409957886, 0.8838990926742554, 0.8858803510665894, 0.8910315632820129, 0.8918240666389465, 0.8916919827461243, 0.8990886211395264, 0.8993527889251709, 0.9051644206047058, 0.909259021282196, 0.9103156924247742, 0.904768168926239, 0.913089394569397], "val_loss": [1.0690844058990479, 0.7267204523086548, 0.6630074977874756, 0.5851247310638428, 0.5488004684448242, 0.5154633522033691, 0.48644670844078064, 0.4733087122440338, 0.46183642745018005, 0.4481644630432129, 0.4221508502960205, 0.41604873538017273, 0.4122338891029358, 0.4024076461791992, 0.39266952872276306, 0.3885684907436371, 0.38248133659362793, 0.3724929988384247, 0.3723068833351135, 0.36633822321891785, 0.3746758699417114, 0.36198416352272034, 0.3594156801700592, 0.37187516689300537, 0.3668769896030426, 0.34963202476501465, 0.35778117179870605, 0.35199210047721863, 0.35453882813453674, 0.364315927028656, 0.35359829664230347, 0.36456167697906494, 0.36178097128868103], "val_accuracy": [0.6523333191871643, 0.7213333249092102, 0.7549999952316284, 0.7713333368301392, 0.7846666574478149, 0.8059999942779541, 0.812666654586792, 0.8153333067893982, 0.824999988079071, 0.8309999704360962, 0.8420000076293945, 0.840666651725769, 0.8456666469573975, 0.8510000109672546, 0.8556666374206543, 0.859000027179718, 0.8543333411216736, 0.8636666536331177, 0.8653333187103271, 0.8636666536331177, 0.8576666712760925, 0.8669999837875366, 0.8650000095367432, 0.8676666617393494, 0.8683333396911621, 0.8769999742507935, 0.875, 0.8790000081062317, 0.871666669845581, 0.875, 0.8766666650772095, 0.8723333477973938, 0.8743333220481873]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8159999847412109, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.208627223968506, 1.5931440591812134, 1.135405421257019, 0.9625577330589294, 0.8943241834640503, 0.8250868320465088, 0.7854834794998169, 0.7335243821144104, 0.716440737247467, 0.688369631767273, 0.6743682622909546, 0.6752856373786926, 0.6474798917770386, 0.6365197896957397, 0.6220623850822449, 0.6018694639205933, 0.5884149074554443, 0.5946884751319885, 0.5633667707443237, 0.5597635507583618, 0.5556473135948181, 0.561108410358429, 0.5265488624572754, 0.5285134315490723, 0.5303456783294678, 0.5164769887924194, 0.5056102871894836, 0.505623459815979, 0.5047364830970764, 0.48359695076942444, 0.49027127027511597, 0.4857904314994812, 0.4660034775733948, 0.4714372456073761, 0.46262457966804504, 0.462773859500885, 0.4598411023616791, 0.4480851888656616, 0.42981210350990295], "accuracy": [0.2662792205810547, 0.5131422281265259, 0.6104874014854431, 0.6559239029884338, 0.6798309087753296, 0.698718786239624, 0.715889573097229, 0.7312111854553223, 0.7366266250610352, 0.7461365461349487, 0.7537974119186401, 0.7498348951339722, 0.7594769597053528, 0.7680623531341553, 0.7746664881706238, 0.7800818681716919, 0.7876105904579163, 0.778761088848114, 0.7897239327430725, 0.7928939461708069, 0.7994980812072754, 0.7930260300636292, 0.8054417967796326, 0.8009510040283203, 0.804649293422699, 0.8152159452438354, 0.8142913579940796, 0.8124422430992126, 0.8125742673873901, 0.8293488025665283, 0.8177255392074585, 0.8208954930305481, 0.8300092220306396, 0.8269713521003723, 0.8318583965301514, 0.8301413059234619, 0.833179235458374, 0.8354246616363525, 0.8425571322441101], "val_loss": [1.9212942123413086, 1.1256028413772583, 0.8732630014419556, 0.8652817606925964, 0.7579941153526306, 0.7284579873085022, 0.6521373391151428, 0.6417048573493958, 0.601352870464325, 0.6323515176773071, 0.5959246158599854, 0.6142842769622803, 0.5830490589141846, 0.5458642840385437, 0.5458016395568848, 0.5262078642845154, 0.5230576395988464, 0.5347937941551208, 0.505416214466095, 0.5310619473457336, 0.5228469967842102, 0.4878694713115692, 0.4883952736854553, 0.5078819990158081, 0.5091785192489624, 0.4684714376926422, 0.4905094504356384, 0.4896368682384491, 0.4598139524459839, 0.4783139228820801, 0.4554412364959717, 0.45055705308914185, 0.45896509289741516, 0.4401482045650482, 0.4417402446269989, 0.45792317390441895, 0.4601440131664276, 0.43487271666526794, 0.4514717161655426], "val_accuracy": [0.5946666598320007, 0.6266666650772095, 0.6936666369438171, 0.6853333115577698, 0.7096666693687439, 0.7229999899864197, 0.7599999904632568, 0.7559999823570251, 0.7730000019073486, 0.7620000243186951, 0.777999997138977, 0.768666684627533, 0.7873333096504211, 0.8013333082199097, 0.7903333306312561, 0.8040000200271606, 0.8036666512489319, 0.7993333339691162, 0.8100000023841858, 0.8019999861717224, 0.8019999861717224, 0.824999988079071, 0.8276666402816772, 0.8100000023841858, 0.8183333277702332, 0.8370000123977661, 0.8240000009536743, 0.8173333406448364, 0.8389999866485596, 0.8289999961853027, 0.8379999995231628, 0.8416666388511658, 0.8346666693687439, 0.8476666808128357, 0.8396666646003723, 0.8330000042915344, 0.8309999704360962, 0.847000002861023, 0.8373333215713501]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 1, 3, 5], [0, 0, 1, 0, 2], [26, 9, 39], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 2, 4, 4, 0, 5, 3, 4], [2, 4, 3, 4, 0, 5, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [7, 3, 0, 2, 1, 8], [0, 1, 6, 4, 0], [0, 73], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 13, 7, 6, 1, 11, 6, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.negative(tf.math.square(grad)), grad)), tf.math.multiply(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.subtract(grad, tf.math.sqrt(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [11324660.0, 205152116015104.0, 3.422766679049015e+21, NaN, NaN, NaN], "accuracy": [0.10342095047235489, 0.1014397069811821, 0.09800554811954498, 0.09602430462837219, 0.09998679161071777, 0.09998679161071777], "val_loss": [735354560.0, 1.30774237970432e+16, 2.8290123068384722e+23, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10133333504199982, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 7, 1, 3, 5], [0, 0, 3, 0, 2], [26, 18, 39], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [2, 2, 4, 4, 5, 5, 5, 4], [2, 2, 4, 4, 0, 0, 1], [16, 1], [0, 1, 0, 0, 1, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 3, 1, 7, 8, 0], [1, 7, 5, 5], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 14, 8, 6, 2, 6, 3, 3, 1, 10, 6, 4, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.square(tf.math.square(beta)), grad)), tf.math.square(tf.math.pow(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(alpha), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.subtract(tf.math.add(grad, tf.math.sqrt(grad)), tf.math.negative(grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [9, 2, 6, 1, 4, 5], [0, 0, 1, 0, 2], [26, 74, 39], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 8, 0, 5, 4, 1], [2, 3, 3, 4, 0, 3, 1], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1], [9, 3, 0, 2], [2, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [29561.71484375, 4406293.0, 74398328.0, 534817376.0, 2292136192.0, 7646641152.0], "accuracy": [0.09840179979801178, 0.09642054885625839, 0.10051512718200684, 0.10196803510189056, 0.10315678268671036, 0.09972262382507324], "val_loss": [303485.65625, 16271223.0, 174479840.0, 950905344.0, 3561299712.0, 10503947264.0], "val_accuracy": [0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 2, 3, 6, 3, 5], [2, 1, 1, 0, 2], [26, 39, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [2, 1, 4, 4, 0, 5, 5, 4, 4, 3, 6, 2, 2, 7, 5, 9, 6, 6, 9, 8, 7, 6, 9], [2, 2, 0, 4, 0, 3, 1, 2, 0, 4, 3, 5, 2], [16, 1, 23, 49, 75, 33], [0, 0, 1, 0, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [0, 0, 1], [0, 8], [3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 0, 36, 23, 13, 6, 8, 4, 4, 1, 3, 2, 1, 0], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.pow(tf.math.pow(tf.math.negative(tf.math.square(tf.math.square(tf.math.pow(tf.math.pow(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.square(alpha), beta))))), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), grad))), grad), tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(grad, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, alpha))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}]