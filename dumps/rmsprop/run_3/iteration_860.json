[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [2, 9, 4, 7, 0, 5, 5, 4], [1, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8837142586708069, "mapping_values": [1, 10, 5, 5, 3, 12, 8, 4, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1052942276000977, 1.196382761001587, 0.8314899802207947, 0.7147043943405151, 0.6302909255027771, 0.5692504644393921, 0.5221520066261292, 0.5032613277435303, 0.4807533919811249, 0.4511759579181671, 0.43527787923812866, 0.4096868932247162, 0.397103488445282, 0.3862413465976715, 0.36111611127853394, 0.350818932056427, 0.3486778438091278, 0.3429076075553894, 0.3232230544090271, 0.3090643882751465, 0.31197598576545715, 0.3050714433193207, 0.2870331108570099, 0.282348096370697, 0.27071237564086914, 0.26655495166778564, 0.2668570280075073, 0.2539179027080536, 0.24523289501667023], "accuracy": [0.29837536811828613, 0.5847312211990356, 0.6859067678451538, 0.7273808121681213, 0.7601373791694641, 0.7794214487075806, 0.802271842956543, 0.8067626357078552, 0.8183859586715698, 0.8289526104927063, 0.8388587832450867, 0.8451988101005554, 0.8518029451370239, 0.8578787446022034, 0.8622375130653381, 0.8739928603172302, 0.8697662353515625, 0.8708229064941406, 0.878879964351654, 0.8845595121383667, 0.8802007436752319, 0.8837670087814331, 0.8868049383163452, 0.8952582478523254, 0.9034473896026611, 0.9014661312103271, 0.89552241563797, 0.9021265506744385, 0.9030511379241943], "val_loss": [1.0808992385864258, 0.7787856459617615, 0.688173234462738, 0.6003098487854004, 0.5536212921142578, 0.5124399662017822, 0.49683383107185364, 0.47856128215789795, 0.46877041459083557, 0.4444534480571747, 0.4302023649215698, 0.4150267243385315, 0.4014204144477844, 0.4067032039165497, 0.3947374224662781, 0.4073643088340759, 0.40519216656684875, 0.398570716381073, 0.3763197362422943, 0.3740674555301666, 0.38644686341285706, 0.38683950901031494, 0.3821990489959717, 0.3752228915691376, 0.38204818964004517, 0.3790208399295807, 0.3727281093597412, 0.3777836859226227, 0.3915119767189026], "val_accuracy": [0.6286666393280029, 0.7043333053588867, 0.7336666584014893, 0.7683333158493042, 0.7806666493415833, 0.8009999990463257, 0.8103333115577698, 0.8186666369438171, 0.8256666660308838, 0.8446666598320007, 0.8533333539962769, 0.8516666889190674, 0.8616666793823242, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8610000014305115, 0.8579999804496765, 0.8693333268165588, 0.871666669845581, 0.8700000047683716, 0.8709999918937683, 0.8726666569709778, 0.8776666522026062, 0.8703333139419556, 0.8696666955947876, 0.8723333477973938, 0.8773333430290222, 0.8696666955947876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8257142901420593, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.211928367614746, 1.6122825145721436, 1.1287455558776855, 0.9935644865036011, 0.9132546782493591, 0.8179161548614502, 0.7808176279067993, 0.7548490762710571, 0.7538437843322754, 0.7061204314231873, 0.677251398563385, 0.6668651700019836, 0.6570253372192383, 0.6666665077209473, 0.6279981732368469, 0.6265623569488525, 0.6033489108085632, 0.5946692228317261, 0.5807136297225952, 0.5685558319091797, 0.5587698817253113, 0.5450733304023743, 0.5452821254730225, 0.5340846180915833, 0.5249266624450684, 0.5336123704910278, 0.5174274444580078, 0.5052279233932495, 0.5025241374969482, 0.505305290222168, 0.5048781633377075, 0.5012970566749573, 0.48607364296913147, 0.4803999960422516, 0.4941747486591339, 0.46911343932151794, 0.4689071774482727, 0.46426892280578613, 0.45632824301719666, 0.4563618004322052, 0.45136743783950806, 0.4423498213291168, 0.4401443898677826, 0.4376567602157593, 0.4377075135707855, 0.4374571740627289, 0.4278464913368225, 0.42309293150901794, 0.4190499782562256, 0.41636922955513, 0.41375917196273804, 0.4195367693901062, 0.4031195342540741], "accuracy": [0.2620525658130646, 0.5112931132316589, 0.6073173880577087, 0.648659348487854, 0.6712455153465271, 0.7092854380607605, 0.7239466309547424, 0.728701651096344, 0.7217012047767639, 0.7413815855979919, 0.7581561207771301, 0.7539294958114624, 0.7584202885627747, 0.752212405204773, 0.7688548564910889, 0.7662131786346436, 0.7792893648147583, 0.776251494884491, 0.7832518815994263, 0.7913089394569397, 0.7944789528846741, 0.7951393723487854, 0.7998943328857422, 0.8034605979919434, 0.8054417967796326, 0.8005547523498535, 0.8109893202781677, 0.8169330358505249, 0.8175934553146362, 0.8161405324935913, 0.8087438941001892, 0.8141592741012573, 0.8186501264572144, 0.8239334225654602, 0.8186501264572144, 0.8317263126373291, 0.8253863453865051, 0.8345000743865967, 0.8318583965301514, 0.8313300609588623, 0.8347642421722412, 0.8401796221733093, 0.8385946154594421, 0.8380662798881531, 0.8379341959953308, 0.8359529972076416, 0.8454629778862, 0.8457271456718445, 0.8430854678153992, 0.8473120927810669, 0.8490291833877563, 0.8500858545303345, 0.8533879518508911], "val_loss": [1.9311732053756714, 1.1097861528396606, 0.9364715218544006, 0.8986559510231018, 0.7280837297439575, 0.6869972944259644, 0.7020710706710815, 0.663399338722229, 0.6328038573265076, 0.6034482717514038, 0.601800799369812, 0.5785056352615356, 0.6104163527488708, 0.5537509918212891, 0.5508401393890381, 0.5452402234077454, 0.5232986807823181, 0.5628871321678162, 0.5224399566650391, 0.519611656665802, 0.5127038359642029, 0.5180627107620239, 0.47979435324668884, 0.47796422243118286, 0.4971086382865906, 0.4684986174106598, 0.49405360221862793, 0.4668221175670624, 0.4860089123249054, 0.4760720729827881, 0.4542756676673889, 0.4427550137042999, 0.44293439388275146, 0.4472554624080658, 0.444541335105896, 0.43560054898262024, 0.43925774097442627, 0.43667078018188477, 0.4255830943584442, 0.42854541540145874, 0.42658039927482605, 0.40917837619781494, 0.4121020436286926, 0.4061306118965149, 0.4195963144302368, 0.43897485733032227, 0.4107356667518616, 0.3949834406375885, 0.3899666368961334, 0.3931809961795807, 0.39940112829208374, 0.38808438181877136, 0.38750872015953064], "val_accuracy": [0.5929999947547913, 0.6463333368301392, 0.6800000071525574, 0.6613333225250244, 0.7253333330154419, 0.7283333539962769, 0.7196666598320007, 0.7443333268165588, 0.7483333349227905, 0.753333330154419, 0.7609999775886536, 0.7663333415985107, 0.7613333463668823, 0.7886666655540466, 0.7796666622161865, 0.7953333258628845, 0.7943333387374878, 0.7693333625793457, 0.7996666431427002, 0.7896666526794434, 0.7919999957084656, 0.7929999828338623, 0.8163333535194397, 0.8183333277702332, 0.8053333163261414, 0.8100000023841858, 0.8043333292007446, 0.8206666707992554, 0.8166666626930237, 0.8149999976158142, 0.8240000009536743, 0.8339999914169312, 0.8333333134651184, 0.8273333311080933, 0.8323333263397217, 0.8293333053588867, 0.8353333473205566, 0.831333339214325, 0.8360000252723694, 0.8379999995231628, 0.8383333086967468, 0.8396666646003723, 0.8416666388511658, 0.8486666679382324, 0.8373333215713501, 0.8266666531562805, 0.8433333039283752, 0.8519999980926514, 0.8489999771118164, 0.8513333201408386, 0.8450000286102295, 0.8516666889190674, 0.8496666550636292]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [1, 0, 1, 0, 2], [26, 39, 85], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [2, 9, 4, 7, 0, 5, 5, 7, 2, 9], [1, 3, 0, 4, 0, 3, 1], [16, 1, 47], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [7, 3, 5, 2, 3], [0, 1, 1, 4, 2], [0], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 14, 10, 4, 3, 10, 5, 5, 1, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(tf.math.negative(tf.math.square(grad)), tf.math.square(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(alpha, grad))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [348.3262023925781, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08347642421722412, 0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [14871436288.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [3, 2, 3, 1, 6, 5, 0], [0, 2, 1, 0, 2, 0], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 9, 4, 7, 0, 5, 5, 4, 9, 2, 3], [2, 0, 3, 1, 0], [16, 89, 77, 21], [0, 1, 0, 1], [0, 7], [6, 4], [0], [0, 0, 1], [0, 5], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 3, 16, 11, 5, 4, 2, 1, 1, 0, 3, 2, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha)), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.math.add(tf.math.negative(tf.math.square(tf.math.square(tf.math.pow(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.add(grad, tf.math.multiply(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [60, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 2, 0, 6, 3, 8, 2, 8], [1, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [7, 3, 0, 2, 7, 8, 9], [0, 6, 2, 7], [0, 87], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 12, 7, 5, 2, 11, 7, 4, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.math.add(grad, beta), grad))), tf.math.sqrt(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 1, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [6, 9, 4, 7, 0, 5, 5, 4, 2, 4], [0, 2, 0, 4, 0, 3, 1], [16, 1, 2, 39], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [7, 3, 0, 2, 8, 8], [0, 1, 1, 4], [4], [1], [0], [1], [0]], "fitness": -0.09200000017881393, "mapping_values": [1, 11, 6, 5, 2, 16, 10, 6, 4, 10, 6, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.sqrt(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), alpha)), alpha), tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3109192848205566, 2.3094143867492676, 2.3105850219726562, 2.3104262351989746, 2.3098461627960205, 2.3108270168304443], "accuracy": [0.0870426595211029, 0.08994849026203156, 0.08981640636920929, 0.08915598690509796, 0.09126931428909302, 0.09338264167308807], "val_loss": [2.3093209266662598, 2.3093209266662598, 2.3093209266662598, 2.3093209266662598, 2.3093209266662598, 2.3093209266662598], "val_accuracy": [0.08666666597127914, 0.08666666597127914, 0.08666666597127914, 0.08666666597127914, 0.08666666597127914, 0.08666666597127914]}}]