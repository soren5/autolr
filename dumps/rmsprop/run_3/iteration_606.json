[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.8799999952316284, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1141276359558105, 1.2854799032211304, 0.9006161093711853, 0.7477179765701294, 0.6510568261146545, 0.5984578132629395, 0.5449386835098267, 0.5192564129829407, 0.49348098039627075, 0.47485414147377014, 0.4514867067337036, 0.4315846562385559, 0.41725119948387146, 0.4095759689807892, 0.39079174399375916, 0.37796324491500854, 0.3730018436908722, 0.34559786319732666, 0.3457213044166565, 0.33971261978149414, 0.32669469714164734, 0.33221715688705444, 0.31436437368392944, 0.3045427203178406, 0.2912495732307434, 0.2893770635128021, 0.27459776401519775, 0.2686750888824463, 0.2542434632778168, 0.2549207806587219, 0.2474549114704132, 0.2353166937828064, 0.2352210432291031, 0.22608718276023865, 0.22045324742794037, 0.20817507803440094, 0.2066163569688797], "accuracy": [0.28305375576019287, 0.5893540978431702, 0.6744155287742615, 0.7111346125602722, 0.7512878179550171, 0.7707040309906006, 0.7977809906005859, 0.800290584564209, 0.809140145778656, 0.8215559124946594, 0.8251221776008606, 0.8404437899589539, 0.8430854678153992, 0.8466516733169556, 0.8516708612442017, 0.8599920868873596, 0.8569541573524475, 0.8720116019248962, 0.8710870146751404, 0.8747853636741638, 0.8794082403182983, 0.8767666220664978, 0.8767666220664978, 0.8842953443527222, 0.8881257176399231, 0.8898428082466125, 0.8967111110687256, 0.9005415439605713, 0.9041078090667725, 0.9027869701385498, 0.9063531756401062, 0.9140139818191528, 0.9075419306755066, 0.9121648669242859, 0.9148064851760864, 0.9215427041053772, 0.9204860925674438], "val_loss": [1.0718753337860107, 0.8780998587608337, 0.6786661148071289, 0.5667974352836609, 0.5274632573127747, 0.4778060019016266, 0.45099446177482605, 0.4290582537651062, 0.41114670038223267, 0.3994693160057068, 0.38328856229782104, 0.3767406940460205, 0.36145931482315063, 0.35313984751701355, 0.3477644920349121, 0.34594792127609253, 0.3332073390483856, 0.32470929622650146, 0.33242690563201904, 0.33648940920829773, 0.3233390152454376, 0.32466185092926025, 0.31876254081726074, 0.3112848997116089, 0.3022047281265259, 0.30465394258499146, 0.2995307147502899, 0.30256974697113037, 0.29729926586151123, 0.30382657051086426, 0.2972928583621979, 0.2895248532295227, 0.29739728569984436, 0.29269400238990784, 0.29641813039779663, 0.2925165593624115, 0.30343908071517944], "val_accuracy": [0.6579999923706055, 0.6980000138282776, 0.7276666760444641, 0.7646666765213013, 0.7836666703224182, 0.8066666722297668, 0.8233333230018616, 0.8339999914169312, 0.8450000286102295, 0.8503333330154419, 0.8533333539962769, 0.8576666712760925, 0.8619999885559082, 0.8633333444595337, 0.8700000047683716, 0.871999979019165, 0.871999979019165, 0.8806666731834412, 0.8736666440963745, 0.8786666393280029, 0.8806666731834412, 0.878000020980835, 0.8840000033378601, 0.8853333592414856, 0.8893333077430725, 0.8913333415985107, 0.8896666765213013, 0.8886666893959045, 0.893666684627533, 0.8939999938011169, 0.8966666460037231, 0.8976666927337646, 0.8926666378974915, 0.8946666717529297, 0.8923333287239075, 0.8963333368301392, 0.890333354473114]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8202857375144958, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.214731216430664, 1.607189655303955, 1.1456273794174194, 0.9822655916213989, 0.8701773881912231, 0.8287796974182129, 0.7857332825660706, 0.751655101776123, 0.7081968188285828, 0.70296710729599, 0.667902946472168, 0.6812334656715393, 0.6427242755889893, 0.6256812214851379, 0.6038225293159485, 0.6176523566246033, 0.593884289264679, 0.5801081657409668, 0.5540640354156494, 0.5517746806144714, 0.5564630031585693, 0.5395190715789795, 0.5390177965164185, 0.5252392292022705, 0.5190361142158508, 0.5208132863044739, 0.5082947611808777, 0.4932677447795868, 0.49555665254592896, 0.4807886779308319, 0.4868806004524231, 0.47794413566589355], "accuracy": [0.2646942138671875, 0.5060097575187683, 0.5987319946289062, 0.6494518518447876, 0.6836613416671753, 0.6976621150970459, 0.7168141603469849, 0.7269845604896545, 0.7396644949913025, 0.7395324110984802, 0.7519482374191284, 0.7432307600975037, 0.7598732113838196, 0.7737419009208679, 0.778232753276825, 0.7696473598480225, 0.7824593782424927, 0.7821952104568481, 0.7913089394569397, 0.7987055778503418, 0.7969884872436523, 0.800290584564209, 0.802800178527832, 0.8075551390647888, 0.8064984679222107, 0.8087438941001892, 0.8115176558494568, 0.819970965385437, 0.8183859586715698, 0.8249900937080383, 0.819442629814148, 0.824329674243927], "val_loss": [1.932118535041809, 1.109194040298462, 0.9853156805038452, 0.8048056364059448, 0.7059903740882874, 0.7086079120635986, 0.6401143670082092, 0.6255861520767212, 0.6719456315040588, 0.6078066229820251, 0.5852510929107666, 0.5777770280838013, 0.5615969300270081, 0.5562683343887329, 0.5669368505477905, 0.5329462885856628, 0.5837845802307129, 0.49818822741508484, 0.5021834969520569, 0.4920012950897217, 0.496595174074173, 0.4725436568260193, 0.48103848099708557, 0.46623945236206055, 0.5016884803771973, 0.46311646699905396, 0.4540358781814575, 0.45402035117149353, 0.44943416118621826, 0.4652751386165619, 0.44436711072921753, 0.45201626420021057], "val_accuracy": [0.5893333554267883, 0.6433333158493042, 0.6166666746139526, 0.7039999961853027, 0.7409999966621399, 0.718666672706604, 0.7563333511352539, 0.7713333368301392, 0.7236666679382324, 0.7583333253860474, 0.7799999713897705, 0.7636666893959045, 0.7906666398048401, 0.7846666574478149, 0.7853333353996277, 0.7956666946411133, 0.7670000195503235, 0.8119999766349792, 0.8109999895095825, 0.8183333277702332, 0.8096666932106018, 0.8256666660308838, 0.8193333148956299, 0.8293333053588867, 0.8103333115577698, 0.8276666402816772, 0.8353333473205566, 0.8309999704360962, 0.8339999914169312, 0.824999988079071, 0.8339999914169312, 0.8276666402816772]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [8, 2, 3, 3, 3, 5], [0, 1, 1, 0, 2], [34, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4, 3, 4, 7, 2, 5], [2, 2, 0, 4, 0, 3, 1, 3, 1, 3, 2], [21, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 3, 1, 3, 4], [0, 1, 1, 2, 6, 1], [0], [1], [0], [4], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 2, 24, 13, 11, 2, 11, 5, 6, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.multiply(alpha, alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.pow(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.square(alpha)))), grad)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, alpha)), beta), tf.math.pow(grad, alpha)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [3.5437581539154053, 2.306081771850586, 2.3032007217407227, 2.303095817565918, 2.3031911849975586, 2.303091526031494], "accuracy": [0.18161405622959137, 0.09576013684272766, 0.09272222965955734, 0.09747721254825592, 0.09113723784685135, 0.09760929644107819], "val_loss": [2.305859088897705, 2.303001642227173, 2.302887439727783, 2.302737236022949, 2.302656650543213, 2.3026223182678223], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10000000149011612, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 3, 3, 1, 6, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 0], [16, 1, 41], [0, 0, 0, 1, 0, 1, 1, 1], [2, 3, 0, 3], [0, 2, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.09000000357627869, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 3, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3085193634033203, 2.30997371673584, 2.310642957687378, 2.309495210647583, 2.308335065841675, 2.309919834136963], "accuracy": [0.09576013684272766, 0.09377889335155487, 0.09021265059709549, 0.09021265059709549, 0.09325055778026581, 0.09338264167308807], "val_loss": [2.3089382648468018, 2.3089382648468018, 2.3089382648468018, 2.3089382648468018, 2.3089382648468018, 2.3089382648468018], "val_accuracy": [0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 8, 3, 1, 3, 5], [0, 0, 1, 0, 0], [26, 39, 39], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [2, 2, 8, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 0, 1, 2], [0, 50], [1], [0], [1], [0]], "fitness": -0.08971428871154785, "mapping_values": [1, 6, 3, 3, 2, 12, 7, 5, 2, 8, 4, 4, 2, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.sqrt(beta), beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.310025930404663, 2.3098528385162354, 2.3097469806671143, 2.309978723526001, 2.309668779373169, 2.3093631267547607], "accuracy": [0.09721305221319199, 0.09206181764602661, 0.08981640636920929, 0.09642054885625839, 0.09074098616838455, 0.09391097724437714], "val_loss": [2.309037208557129, 2.309037208557129, 2.309037208557129, 2.309037208557129, 2.309037208557129, 2.309037208557129], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 7, 1, 3, 8, 2], [2, 0, 2, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.08914285898208618, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3105671405792236, 2.309192419052124, 2.310162305831909, 2.309170722961426, 2.3107504844665527, 2.3097083568573], "accuracy": [0.08360850811004639, 0.0948355570435524, 0.09853387624025345, 0.09087307006120682, 0.08545766770839691, 0.09338264167308807], "val_loss": [2.309051752090454, 2.309051752090454, 2.309051752090454, 2.309051752090454, 2.309051752090454, 2.309051752090454], "val_accuracy": [0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179, 0.09133332967758179]}, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 8}]