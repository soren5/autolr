[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.8799999952316284, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1141276359558105, 1.2854799032211304, 0.9006161093711853, 0.7477179765701294, 0.6510568261146545, 0.5984578132629395, 0.5449386835098267, 0.5192564129829407, 0.49348098039627075, 0.47485414147377014, 0.4514867067337036, 0.4315846562385559, 0.41725119948387146, 0.4095759689807892, 0.39079174399375916, 0.37796324491500854, 0.3730018436908722, 0.34559786319732666, 0.3457213044166565, 0.33971261978149414, 0.32669469714164734, 0.33221715688705444, 0.31436437368392944, 0.3045427203178406, 0.2912495732307434, 0.2893770635128021, 0.27459776401519775, 0.2686750888824463, 0.2542434632778168, 0.2549207806587219, 0.2474549114704132, 0.2353166937828064, 0.2352210432291031, 0.22608718276023865, 0.22045324742794037, 0.20817507803440094, 0.2066163569688797], "accuracy": [0.28305375576019287, 0.5893540978431702, 0.6744155287742615, 0.7111346125602722, 0.7512878179550171, 0.7707040309906006, 0.7977809906005859, 0.800290584564209, 0.809140145778656, 0.8215559124946594, 0.8251221776008606, 0.8404437899589539, 0.8430854678153992, 0.8466516733169556, 0.8516708612442017, 0.8599920868873596, 0.8569541573524475, 0.8720116019248962, 0.8710870146751404, 0.8747853636741638, 0.8794082403182983, 0.8767666220664978, 0.8767666220664978, 0.8842953443527222, 0.8881257176399231, 0.8898428082466125, 0.8967111110687256, 0.9005415439605713, 0.9041078090667725, 0.9027869701385498, 0.9063531756401062, 0.9140139818191528, 0.9075419306755066, 0.9121648669242859, 0.9148064851760864, 0.9215427041053772, 0.9204860925674438], "val_loss": [1.0718753337860107, 0.8780998587608337, 0.6786661148071289, 0.5667974352836609, 0.5274632573127747, 0.4778060019016266, 0.45099446177482605, 0.4290582537651062, 0.41114670038223267, 0.3994693160057068, 0.38328856229782104, 0.3767406940460205, 0.36145931482315063, 0.35313984751701355, 0.3477644920349121, 0.34594792127609253, 0.3332073390483856, 0.32470929622650146, 0.33242690563201904, 0.33648940920829773, 0.3233390152454376, 0.32466185092926025, 0.31876254081726074, 0.3112848997116089, 0.3022047281265259, 0.30465394258499146, 0.2995307147502899, 0.30256974697113037, 0.29729926586151123, 0.30382657051086426, 0.2972928583621979, 0.2895248532295227, 0.29739728569984436, 0.29269400238990784, 0.29641813039779663, 0.2925165593624115, 0.30343908071517944], "val_accuracy": [0.6579999923706055, 0.6980000138282776, 0.7276666760444641, 0.7646666765213013, 0.7836666703224182, 0.8066666722297668, 0.8233333230018616, 0.8339999914169312, 0.8450000286102295, 0.8503333330154419, 0.8533333539962769, 0.8576666712760925, 0.8619999885559082, 0.8633333444595337, 0.8700000047683716, 0.871999979019165, 0.871999979019165, 0.8806666731834412, 0.8736666440963745, 0.8786666393280029, 0.8806666731834412, 0.878000020980835, 0.8840000033378601, 0.8853333592414856, 0.8893333077430725, 0.8913333415985107, 0.8896666765213013, 0.8886666893959045, 0.893666684627533, 0.8939999938011169, 0.8966666460037231, 0.8976666927337646, 0.8926666378974915, 0.8946666717529297, 0.8923333287239075, 0.8963333368301392, 0.890333354473114]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8071428537368774, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.212313652038574, 1.612957239151001, 1.150551199913025, 0.9602303504943848, 0.8881424069404602, 0.8115878105163574, 0.7763805985450745, 0.7402947545051575, 0.731810450553894, 0.6934096217155457, 0.6624925136566162, 0.6387814879417419, 0.6405512690544128, 0.6469607353210449, 0.6064243912696838, 0.6063960194587708, 0.5796918272972107, 0.5821152329444885, 0.5796236395835876, 0.5491923093795776, 0.5584631562232971, 0.5449657440185547, 0.5290888547897339, 0.5285892486572266, 0.5151047706604004, 0.5117629170417786, 0.5132551193237305, 0.49949365854263306, 0.4849880635738373, 0.48829880356788635, 0.4825497567653656, 0.4730531573295593, 0.47077810764312744, 0.4733349084854126, 0.45924872159957886, 0.45294034481048584, 0.458660751581192, 0.4429110586643219, 0.4344868063926697, 0.4304044246673584, 0.4209854304790497, 0.4261161983013153, 0.4311019480228424, 0.4171581268310547, 0.4236323833465576, 0.4103033244609833, 0.39948520064353943, 0.3968791961669922, 0.39774248003959656, 0.3966931998729706, 0.3959423899650574, 0.3807162642478943], "accuracy": [0.2631092369556427, 0.5033681392669678, 0.603090763092041, 0.6588297486305237, 0.6777176260948181, 0.7010962963104248, 0.7189275026321411, 0.7264562249183655, 0.7281733155250549, 0.7396644949913025, 0.7544577717781067, 0.7577598690986633, 0.7692511081695557, 0.7597411274909973, 0.7766477465629578, 0.7775723338127136, 0.7843085527420044, 0.7828556299209595, 0.7891955971717834, 0.7927618622779846, 0.7960638999938965, 0.7997622489929199, 0.8050455451011658, 0.8083476424217224, 0.8107251524925232, 0.8105930685997009, 0.8113855719566345, 0.8168009519577026, 0.8244617581367493, 0.8195747137069702, 0.8224804997444153, 0.8272355198860168, 0.8301413059234619, 0.8280280232429504, 0.8343679904937744, 0.8370096683502197, 0.8314621448516846, 0.8368775844573975, 0.8445383906364441, 0.8453308939933777, 0.845859169960022, 0.8416325449943542, 0.8450667262077332, 0.8510104417800903, 0.8446704745292664, 0.8524633646011353, 0.8593316674232483, 0.8565579056739807, 0.8548408150672913, 0.8551049828529358, 0.8574824929237366, 0.8621054291725159], "val_loss": [1.9192039966583252, 1.1348659992218018, 0.8570927977561951, 0.7843810319900513, 0.6787356734275818, 0.6584433317184448, 0.6896681189537048, 0.6195288300514221, 0.5888052582740784, 0.5962453484535217, 0.5930184125900269, 0.6174728870391846, 0.5786181092262268, 0.577652096748352, 0.5670150518417358, 0.545271635055542, 0.5162779092788696, 0.5393379926681519, 0.4994479715824127, 0.49584001302719116, 0.5108675956726074, 0.4759483337402344, 0.47004640102386475, 0.47375375032424927, 0.4993991255760193, 0.4791319668292999, 0.4588143825531006, 0.4585176110267639, 0.4516793489456177, 0.44473469257354736, 0.4373207092285156, 0.4358524680137634, 0.44446492195129395, 0.4668455421924591, 0.4259122610092163, 0.4652004539966583, 0.4370652735233307, 0.4263351261615753, 0.4328218102455139, 0.4186561703681946, 0.41049620509147644, 0.4413343071937561, 0.4323287308216095, 0.40161943435668945, 0.40027594566345215, 0.3984810411930084, 0.3958257734775543, 0.40135133266448975, 0.3948940336704254, 0.40005436539649963, 0.3893509805202484, 0.3933180272579193], "val_accuracy": [0.5603333115577698, 0.656333327293396, 0.6943333148956299, 0.7193333506584167, 0.7450000047683716, 0.7566666603088379, 0.7319999933242798, 0.762333333492279, 0.7816666960716248, 0.7866666913032532, 0.7633333206176758, 0.7570000290870667, 0.7706666588783264, 0.7633333206176758, 0.7886666655540466, 0.7889999747276306, 0.8026666641235352, 0.8069999814033508, 0.8059999942779541, 0.8173333406448364, 0.8203333616256714, 0.8190000057220459, 0.8206666707992554, 0.8256666660308838, 0.8109999895095825, 0.8230000138282776, 0.8393333554267883, 0.8316666483879089, 0.8360000252723694, 0.8399999737739563, 0.8483333587646484, 0.840666651725769, 0.8343333601951599, 0.8169999718666077, 0.8493333458900452, 0.8293333053588867, 0.8460000157356262, 0.8453333377838135, 0.8429999947547913, 0.8523333072662354, 0.8550000190734863, 0.8323333263397217, 0.846666693687439, 0.8583333492279053, 0.856333315372467, 0.859666645526886, 0.8636666536331177, 0.8533333539962769, 0.8576666712760925, 0.8573333621025085, 0.8603333234786987, 0.8616666793823242]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 9, 3, 1, 3, 5], [0, 0, 2, 0, 2], [27, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1], [7, 3, 2, 3], [0, 4, 1, 2, 6], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 0, 1, 15, 8, 7, 2, 9, 4, 5, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha)), beta), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303269863128662, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 5, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [2, 2, 2, 6, 3, 5, 6, 4, 0, 4], [3, 2, 0, 4, 0, 3, 1, 2, 4], [16, 1], [0, 0, 1, 1, 0, 1, 1, 1], [7, 3, 3, 3], [0, 1, 1, 2], [89], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 19, 10, 9, 2, 7, 3, 4, 1, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(grad, tf.math.divide_no_nan(tf.math.multiply(beta, tf.math.square(tf.math.divide_no_nan(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), grad)), tf.math.negative(tf.math.pow(alpha, beta))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(alpha, beta)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [29390.912109375, 4343116.5, 76686440.0, 536314112.0, 2363061760.0, 7797458432.0], "accuracy": [0.10249637067317963, 0.10077928751707077, 0.09549596905708313, 0.09602430462837219, 0.10038304328918457, 0.09774138033390045], "val_loss": [301650.53125, 16171601.0, 173409376.0, 945066240.0, 3539426816.0, 10439390208.0], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 2, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 9, 4, 6, 3, 5, 5, 0], [2, 2, 0, 4, 0, 3, 3], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 3, 12, 8, 4, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3036820888519287, 2.3024415969848633, 2.3026108741760254, 2.3033246994018555, 2.3062288761138916, 2.32163667678833, 2.406419038772583, 2.9260666370391846], "accuracy": [0.1018359512090683, 0.10606260597705841, 0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025500774383545, 2.3025922775268555, 2.302774429321289, 2.303980827331543, 2.310601234436035, 2.3469605445861816, 2.5560145378112793, 3.9341819286346436], "val_accuracy": [0.10000000149011612, 0.10066666454076767, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0], [2, 2, 4, 4, 3, 2, 5, 4, 9, 9], [3, 2, 0, 0, 0, 3, 3], [16, 1, 24, 88, 64], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [7, 3, 0, 3, 1, 6, 8, 0, 5, 5], [0, 0, 1, 2, 3, 0], [3, 19, 17], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 16, 10, 6, 5, 16, 10, 6, 3, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(grad, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), alpha), tf.math.divide_no_nan(tf.math.sqrt(beta), tf.math.negative(sigma)))), tf.math.square(tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [29108.7109375, 4486552.0, 75977848.0, 535253792.0, 2358980864.0, 7733014528.0], "accuracy": [0.10210011899471283, 0.09655263274908066, 0.10130762308835983, 0.10394927859306335, 0.1022322028875351, 0.09589222073554993], "val_loss": [300174.09375, 16092455.0, 172560576.0, 940440832.0, 3522100992.0, 10388307968.0], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]