[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.8799999952316284, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1141276359558105, 1.2854799032211304, 0.9006161093711853, 0.7477179765701294, 0.6510568261146545, 0.5984578132629395, 0.5449386835098267, 0.5192564129829407, 0.49348098039627075, 0.47485414147377014, 0.4514867067337036, 0.4315846562385559, 0.41725119948387146, 0.4095759689807892, 0.39079174399375916, 0.37796324491500854, 0.3730018436908722, 0.34559786319732666, 0.3457213044166565, 0.33971261978149414, 0.32669469714164734, 0.33221715688705444, 0.31436437368392944, 0.3045427203178406, 0.2912495732307434, 0.2893770635128021, 0.27459776401519775, 0.2686750888824463, 0.2542434632778168, 0.2549207806587219, 0.2474549114704132, 0.2353166937828064, 0.2352210432291031, 0.22608718276023865, 0.22045324742794037, 0.20817507803440094, 0.2066163569688797], "accuracy": [0.28305375576019287, 0.5893540978431702, 0.6744155287742615, 0.7111346125602722, 0.7512878179550171, 0.7707040309906006, 0.7977809906005859, 0.800290584564209, 0.809140145778656, 0.8215559124946594, 0.8251221776008606, 0.8404437899589539, 0.8430854678153992, 0.8466516733169556, 0.8516708612442017, 0.8599920868873596, 0.8569541573524475, 0.8720116019248962, 0.8710870146751404, 0.8747853636741638, 0.8794082403182983, 0.8767666220664978, 0.8767666220664978, 0.8842953443527222, 0.8881257176399231, 0.8898428082466125, 0.8967111110687256, 0.9005415439605713, 0.9041078090667725, 0.9027869701385498, 0.9063531756401062, 0.9140139818191528, 0.9075419306755066, 0.9121648669242859, 0.9148064851760864, 0.9215427041053772, 0.9204860925674438], "val_loss": [1.0718753337860107, 0.8780998587608337, 0.6786661148071289, 0.5667974352836609, 0.5274632573127747, 0.4778060019016266, 0.45099446177482605, 0.4290582537651062, 0.41114670038223267, 0.3994693160057068, 0.38328856229782104, 0.3767406940460205, 0.36145931482315063, 0.35313984751701355, 0.3477644920349121, 0.34594792127609253, 0.3332073390483856, 0.32470929622650146, 0.33242690563201904, 0.33648940920829773, 0.3233390152454376, 0.32466185092926025, 0.31876254081726074, 0.3112848997116089, 0.3022047281265259, 0.30465394258499146, 0.2995307147502899, 0.30256974697113037, 0.29729926586151123, 0.30382657051086426, 0.2972928583621979, 0.2895248532295227, 0.29739728569984436, 0.29269400238990784, 0.29641813039779663, 0.2925165593624115, 0.30343908071517944], "val_accuracy": [0.6579999923706055, 0.6980000138282776, 0.7276666760444641, 0.7646666765213013, 0.7836666703224182, 0.8066666722297668, 0.8233333230018616, 0.8339999914169312, 0.8450000286102295, 0.8503333330154419, 0.8533333539962769, 0.8576666712760925, 0.8619999885559082, 0.8633333444595337, 0.8700000047683716, 0.871999979019165, 0.871999979019165, 0.8806666731834412, 0.8736666440963745, 0.8786666393280029, 0.8806666731834412, 0.878000020980835, 0.8840000033378601, 0.8853333592414856, 0.8893333077430725, 0.8913333415985107, 0.8896666765213013, 0.8886666893959045, 0.893666684627533, 0.8939999938011169, 0.8966666460037231, 0.8976666927337646, 0.8926666378974915, 0.8946666717529297, 0.8923333287239075, 0.8963333368301392, 0.890333354473114]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8082857131958008, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2085437774658203, 1.5937132835388184, 1.1345831155776978, 0.960084080696106, 0.8959822654724121, 0.8345776796340942, 0.7645613551139832, 0.739697277545929, 0.7138593792915344, 0.7072725296020508, 0.6771126389503479, 0.6634467840194702, 0.658126950263977, 0.6437754034996033, 0.6298198699951172, 0.5979765057563782, 0.6018427014350891, 0.5752130746841431, 0.5846866965293884, 0.5617360472679138, 0.5550121665000916, 0.5539461970329285, 0.5521935224533081, 0.524404764175415, 0.5251811742782593, 0.5090919137001038, 0.5073063373565674, 0.5123558640480042, 0.49180835485458374, 0.5048378705978394, 0.478129506111145, 0.48780566453933716, 0.47107812762260437, 0.47805485129356384, 0.4696516990661621], "accuracy": [0.2689208686351776, 0.5178972482681274, 0.5989961624145508, 0.656980574131012, 0.6740192770957947, 0.6942279934883118, 0.7121912837028503, 0.7240787148475647, 0.7364945411682129, 0.7392682433128357, 0.752212405204773, 0.7504953145980835, 0.7585523724555969, 0.7622507214546204, 0.7614582180976868, 0.7761194109916687, 0.7804781198501587, 0.7893276810646057, 0.78113853931427, 0.7936864495277405, 0.7959318161010742, 0.7935543656349182, 0.793950617313385, 0.8062343001365662, 0.8086118102073669, 0.8124422430992126, 0.8137630224227905, 0.8123101592063904, 0.8189142942428589, 0.8132346868515015, 0.8244617581367493, 0.8185180425643921, 0.8274996876716614, 0.8264430165290833, 0.8260467648506165], "val_loss": [1.9142457246780396, 1.0935291051864624, 0.9346776604652405, 0.8656914234161377, 0.7250413298606873, 0.6807106733322144, 0.6741244792938232, 0.6424700617790222, 0.6272505521774292, 0.6371157765388489, 0.5952289700508118, 0.5894891023635864, 0.6130173206329346, 0.5398316383361816, 0.5539351105690002, 0.5165135264396667, 0.5326593518257141, 0.539060115814209, 0.4992271363735199, 0.4922066330909729, 0.48914340138435364, 0.5184933543205261, 0.47676584124565125, 0.4780881404876709, 0.4714529514312744, 0.46815723180770874, 0.47212210297584534, 0.46502193808555603, 0.46974804997444153, 0.44671767950057983, 0.4567108452320099, 0.44811224937438965, 0.45865771174430847, 0.4313914477825165, 0.45757752656936646], "val_accuracy": [0.5809999704360962, 0.6446666717529297, 0.6679999828338623, 0.6526666879653931, 0.7203333377838135, 0.7459999918937683, 0.7419999837875366, 0.7639999985694885, 0.7433333396911621, 0.7566666603088379, 0.7706666588783264, 0.7733333110809326, 0.7490000128746033, 0.79666668176651, 0.7886666655540466, 0.7986666560173035, 0.7933333516120911, 0.7889999747276306, 0.8163333535194397, 0.8136666417121887, 0.8233333230018616, 0.8063333630561829, 0.8213333487510681, 0.8109999895095825, 0.8263333439826965, 0.8169999718666077, 0.8206666707992554, 0.824999988079071, 0.8193333148956299, 0.8363333344459534, 0.8306666612625122, 0.8299999833106995, 0.824999988079071, 0.8360000252723694, 0.8186666369438171]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 1, 3, 5], [0, 0, 1, 0, 2], [9, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [8, 6, 4, 6, 3, 5, 5, 4], [3, 2, 1, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 3, 0, 3, 6], [0, 1, 1, 2, 3], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 14, 8, 6, 1, 10, 5, 5, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(alpha, grad))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(alpha, alpha), beta)), sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3035426139831543, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [9, 2, 3, 1, 3, 5], [0, 2, 2, 2, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 1, 1, 0, 1, 1, 1], [7, 3, 0, 4], [1, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 13, 7, 6, 2, 6, 3, 3, 0, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.square(grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(alpha, alpha), tf.math.negative(alpha)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [29770.119140625, 4468805.5, 74427880.0, 544281536.0, 2339102720.0, 7763446784.0], "accuracy": [0.09800554811954498, 0.10210011899471283, 0.1018359512090683, 0.09536388516426086, 0.09708096832036972, 0.10051512718200684], "val_loss": [304103.3125, 16304461.0, 174836432.0, 952847808.0, 3568583168.0, 10525402112.0], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 5, 2, 2, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [2, 2, 4, 6, 3, 5, 5, 4, 8, 6, 0], [2, 2, 0, 4, 0, 3, 1, 2], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 2, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 19, 11, 8, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), grad)), alpha), tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.313060998916626, 2.328887462615967, 2.3678669929504395, 2.4428675174713135, 2.6213788986206055, 3.501771926879883, 32.90045928955078, NaN, NaN, NaN], "accuracy": [0.0878351628780365, 0.07753269374370575, 0.06947562843561172, 0.07211729139089584, 0.08017434924840927, 0.09206181764602661, 0.09959053993225098, 0.10196803510189056, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3190462589263916, 2.3491601943969727, 2.4036805629730225, 2.5149736404418945, 2.855330467224121, 5.8565216064453125, 291.7204284667969, NaN, NaN, NaN], "val_accuracy": [0.09233333170413971, 0.09333333373069763, 0.0976666659116745, 0.10000000149011612, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 2, 0, 2], [0, 39, 39], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 2, 5, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 7, 0, 2, 9, 3], [0, 6, 1], [0, 19], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [6.796475887298584, 36093.5625, 9.138406753540039, 14.723186492919922, 10.285314559936523, 14.1250638961792, 15.59770393371582], "accuracy": [0.07991018146276474, 0.09694888442754745, 0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09694888442754745, 0.09813763201236725], "val_loss": [67.46798706054688, 4.9034624099731445, 18.51465606689453, 7.709878444671631, 11.979645729064941, 14.495526313781738, 25.046716690063477], "val_accuracy": [0.10066666454076767, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}, "mapping_values": [1, 11, 6, 5, 3, 5, 3, 2, 1, 9, 6, 3, 2, 1, 0, 1, 0], "tree_depth": 12}]