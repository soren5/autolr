[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8554285764694214, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.213676929473877, 1.6260327100753784, 1.143683910369873, 0.9742980599403381, 0.905768096446991, 0.8351218104362488, 0.7851074934005737, 0.7412269115447998, 0.7395317554473877, 0.711415708065033, 0.7069402933120728, 0.678230345249176, 0.6367061138153076, 0.6509361267089844, 0.6249479651451111, 0.6181301474571228, 0.596510112285614, 0.5996518135070801, 0.5853984355926514, 0.566254198551178, 0.5746713280677795, 0.5576147437095642, 0.5446452498435974, 0.5396304726600647, 0.5172899961471558, 0.545619010925293, 0.5207965970039368, 0.5165130496025085, 0.5015321969985962, 0.4937669634819031, 0.48441874980926514, 0.4920797646045685, 0.47626858949661255, 0.47793251276016235, 0.4731525182723999, 0.4620440900325775, 0.46651312708854675, 0.45247113704681396, 0.45586317777633667, 0.4512108266353607, 0.44254299998283386, 0.4377943277359009, 0.4450337886810303, 0.433260977268219, 0.4311376214027405, 0.4237311780452728, 0.42902952432632446, 0.4136289060115814, 0.41453227400779724, 0.4130176901817322, 0.39844590425491333, 0.39945289492607117, 0.39990946650505066, 0.39090973138809204, 0.39613914489746094, 0.3962012231349945, 0.3925626873970032, 0.39203161001205444, 0.3823232650756836], "accuracy": [0.2662792205810547, 0.5065380930900574, 0.6066569685935974, 0.659490168094635, 0.6744155287742615, 0.6980583667755127, 0.713908314704895, 0.7283053994178772, 0.7260599732398987, 0.7359662055969238, 0.7403249144554138, 0.7495707273483276, 0.7663452625274658, 0.7577598690986633, 0.7709681391716003, 0.7713643908500671, 0.778761088848114, 0.7790252566337585, 0.7824593782424927, 0.7913089394569397, 0.7848368883132935, 0.7928939461708069, 0.798309326171875, 0.7967243194580078, 0.8094043135643005, 0.800290584564209, 0.811649739742279, 0.8087438941001892, 0.8164047002792358, 0.8144234418869019, 0.8235371708869934, 0.8183859586715698, 0.822348415851593, 0.8281601071357727, 0.8276317715644836, 0.8322546482086182, 0.8293488025665283, 0.8367455005645752, 0.8325188159942627, 0.8381983637809753, 0.8393871188163757, 0.8422929644584656, 0.8403117060661316, 0.844010055065155, 0.8459912538528442, 0.8491612672805786, 0.8459912538528442, 0.8487650156021118, 0.8511425256729126, 0.8516708612442017, 0.8597279191017151, 0.8533879518508911, 0.8537842035293579, 0.8578787446022034, 0.8557654023170471, 0.8599920868873596, 0.8584070801734924, 0.8605204224586487, 0.8598600029945374], "val_loss": [1.9311139583587646, 1.1074284315109253, 0.9771608710289001, 0.7858006358146667, 0.7151148915290833, 0.6789993643760681, 0.6691451072692871, 0.6397503614425659, 0.6217755675315857, 0.637182354927063, 0.5786056518554688, 0.5710426568984985, 0.5599858164787292, 0.5515573024749756, 0.54337477684021, 0.5200293660163879, 0.526112973690033, 0.5345032811164856, 0.5103436708450317, 0.5099934935569763, 0.49562308192253113, 0.5069106221199036, 0.48209962248802185, 0.47433871030807495, 0.4906598627567291, 0.5204798579216003, 0.4671025276184082, 0.4671674370765686, 0.46530061960220337, 0.4500419795513153, 0.446654736995697, 0.43762192130088806, 0.44438207149505615, 0.4439742863178253, 0.44161567091941833, 0.4331801235675812, 0.44725513458251953, 0.4252970814704895, 0.42855703830718994, 0.4254489839076996, 0.4155900180339813, 0.4370979070663452, 0.4190300703048706, 0.4254917800426483, 0.4138663709163666, 0.421396940946579, 0.40383246541023254, 0.39836356043815613, 0.4188055694103241, 0.4012039005756378, 0.4035666882991791, 0.41997474431991577, 0.40390560030937195, 0.38472822308540344, 0.40163907408714294, 0.3912980854511261, 0.3859305679798126, 0.3892076015472412, 0.3987250030040741], "val_accuracy": [0.5730000138282776, 0.6159999966621399, 0.6100000143051147, 0.6980000138282776, 0.7269999980926514, 0.7519999742507935, 0.7483333349227905, 0.7603333592414856, 0.7559999823570251, 0.7463333606719971, 0.7726666927337646, 0.7856666445732117, 0.7846666574478149, 0.79666668176651, 0.7906666398048401, 0.8029999732971191, 0.7990000247955322, 0.7929999828338623, 0.8146666884422302, 0.8116666674613953, 0.8086666464805603, 0.8040000200271606, 0.8196666836738586, 0.8266666531562805, 0.8116666674613953, 0.8046666383743286, 0.8289999961853027, 0.8270000219345093, 0.8266666531562805, 0.8296666741371155, 0.8339999914169312, 0.8396666646003723, 0.8323333263397217, 0.8420000076293945, 0.8383333086967468, 0.8363333344459534, 0.8299999833106995, 0.843666672706604, 0.8416666388511658, 0.8433333039283752, 0.8486666679382324, 0.8370000123977661, 0.8506666421890259, 0.8403333425521851, 0.8506666421890259, 0.8393333554267883, 0.8503333330154419, 0.8526666760444641, 0.8460000157356262, 0.8556666374206543, 0.8536666631698608, 0.8456666469573975, 0.8553333282470703, 0.8600000143051147, 0.8546666502952576, 0.859000027179718, 0.8586666584014893, 0.8569999933242798, 0.8553333282470703]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8031428456306458, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2085440158843994, 1.5967897176742554, 1.1667520999908447, 0.9569648504257202, 0.8806279897689819, 0.8230440616607666, 0.7892496585845947, 0.7272159457206726, 0.7382738590240479, 0.6969079375267029, 0.6881256699562073, 0.6525866389274597, 0.6567763090133667, 0.6400457620620728, 0.6201997995376587, 0.599696695804596, 0.5923592448234558, 0.5849170088768005], "accuracy": [0.2666754722595215, 0.5123497843742371, 0.5962224006652832, 0.6592260003089905, 0.678642213344574, 0.7038700580596924, 0.709021270275116, 0.7374191284179688, 0.7251353859901428, 0.7367587089538574, 0.7475894689559937, 0.7576277852058411, 0.752740740776062, 0.7622507214546204, 0.7662131786346436, 0.7746664881706238, 0.7759873270988464, 0.7825914621353149], "val_loss": [1.9226657152175903, 1.1078699827194214, 0.8896324038505554, 0.8955744504928589, 0.8837805986404419, 0.7469190955162048, 0.711198627948761, 0.6709822416305542, 0.6739633679389954, 0.6334365606307983, 0.6099991202354431, 0.6591624021530151, 0.5778701305389404, 0.5757452845573425, 0.6051596403121948, 0.5631144046783447, 0.5595109462738037, 0.5615341663360596], "val_accuracy": [0.5323333144187927, 0.6430000066757202, 0.687666654586792, 0.6543333530426025, 0.7056666612625122, 0.7246666550636292, 0.7296666502952576, 0.7509999871253967, 0.7540000081062317, 0.765333354473114, 0.7770000100135803, 0.7463333606719971, 0.7910000085830688, 0.7876666784286499, 0.7476666569709778, 0.7856666445732117, 0.7883333563804626, 0.7906666398048401]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [4, 2, 3, 1, 6, 5], [0, 0, 1, 0, 2], [0, 44, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 3], [2, 0, 1, 1, 0], [16, 1], [0, 0, 1, 1, 1], [4, 7], [0, 6, 2], [0], [1], [0], [7], [0]], "fitness": -0.23971427977085114, "mapping_values": [1, 3, 1, 2, 2, 12, 7, 5, 2, 5, 2, 3, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha), tf.math.sqrt(tf.math.multiply(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), beta), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.260052442550659, 2.1582789421081543, 2.312567949295044, 2.304208993911743, 2.3032896518707275, 2.3031599521636963], "accuracy": [0.2094835489988327, 0.24501386284828186, 0.11781799048185349, 0.09760929644107819, 0.09774138033390045, 0.10077928751707077], "val_loss": [2.2666988372802734, 2.2379837036132812, 2.3046836853027344, 2.3025920391082764, 2.3024768829345703, 2.3008358478546143], "val_accuracy": [0.22833333909511566, 0.22366666793823242, 0.09966666996479034, 0.109333336353302, 0.10599999874830246, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 7, 3, 1, 3, 5], [0, 2, 1, 2, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 4, 8, 2], [2, 0, 3, 1, 0], [16, 1], [1, 1, 1, 0], [0, 7], [0, 6], [0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 2, 1, 0, 6, 8, 2, 3], [2, 2, 0, 5, 1, 4, 3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 4, 2, 2, 1, 1, 0, 1, 1, 16, 9, 7, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.math.negative(tf.math.divide_no_nan(beta, beta)), tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)), tf.math.add(tf.math.multiply(alpha, grad), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [4, 7, 0, 6, 3, 8, 2], [5, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 1, 3, 5, 1, 7, 5, 1, 9], [2, 2, 1, 0, 2, 0, 0], [0, 68, 88, 88], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 2, 5, 6, 3, 8, 2, 9], [2, 5, 3, 1, 0], [89, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 7, 5, 4, 7, 2, 8, 6, 1, 6, 4, 9, 2, 1, 4, 4, 6], [7, 6, 4, 1, 4, 2, 4, 4, 5, 4, 6, 4, 1], [13], [1], [0], [0], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 18, 11, 7, 4, 12, 8, 4, 1, 30, 17, 13, 1, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.math.square(grad), tf.math.subtract(tf.math.add(tf.math.square(grad), alpha), tf.constant(0.0, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.math.divide_no_nan(tf.math.multiply(grad, grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(grad), tf.math.pow(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(grad, grad)), alpha), tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.pow(beta, grad), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.subtract(grad, tf.math.pow(tf.math.pow(grad, tf.math.divide_no_nan(grad, grad)), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3101308345794678, 2.309749126434326, 2.3106446266174316, 2.3097121715545654, 2.3102478981018066, 2.3101131916046143], "accuracy": [0.09008057415485382, 0.09615638852119446, 0.09206181764602661, 0.09536388516426086, 0.09153348207473755, 0.09325055778026581], "val_loss": [2.3089237213134766, 2.3089237213134766, 2.3089237213134766, 2.3089237213134766, 2.3089237213134766, 2.3089237213134766], "val_accuracy": [0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231]}}]