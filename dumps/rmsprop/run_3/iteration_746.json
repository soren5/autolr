[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8808571696281433, "mapping_values": [1, 10, 5, 5, 3, 14, 8, 6, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1058011054992676, 1.1498116254806519, 0.8304385542869568, 0.7203441262245178, 0.6393402218818665, 0.5854113698005676, 0.5511501431465149, 0.5187006592750549, 0.505515992641449, 0.4818469285964966, 0.4484843909740448, 0.43561360239982605, 0.42612436413764954, 0.41596850752830505, 0.39672064781188965, 0.3839366137981415, 0.3636326789855957, 0.3521239161491394, 0.33775001764297485, 0.31625643372535706, 0.31688356399536133, 0.30882248282432556, 0.3001636564731598, 0.2953629493713379, 0.2911835014820099, 0.28392574191093445, 0.2676911950111389, 0.2642957866191864, 0.2519010007381439, 0.2429644614458084, 0.23603840172290802, 0.2455616593360901, 0.23240527510643005], "accuracy": [0.2879408299922943, 0.5983357429504395, 0.6905296444892883, 0.722229540348053, 0.7576277852058411, 0.7792893648147583, 0.7957997918128967, 0.8074230551719666, 0.8117818236351013, 0.8165367841720581, 0.834632158279419, 0.8391229510307312, 0.843481719493866, 0.8438779711723328, 0.8529917001724243, 0.8560295701026917, 0.8659358024597168, 0.869502067565918, 0.873860776424408, 0.8791441321372986, 0.8835028409957886, 0.8838990926742554, 0.8858803510665894, 0.8910315632820129, 0.8918240666389465, 0.8916919827461243, 0.8990886211395264, 0.8993527889251709, 0.9051644206047058, 0.909259021282196, 0.9103156924247742, 0.904768168926239, 0.913089394569397], "val_loss": [1.0690844058990479, 0.7267204523086548, 0.6630074977874756, 0.5851247310638428, 0.5488004684448242, 0.5154633522033691, 0.48644670844078064, 0.4733087122440338, 0.46183642745018005, 0.4481644630432129, 0.4221508502960205, 0.41604873538017273, 0.4122338891029358, 0.4024076461791992, 0.39266952872276306, 0.3885684907436371, 0.38248133659362793, 0.3724929988384247, 0.3723068833351135, 0.36633822321891785, 0.3746758699417114, 0.36198416352272034, 0.3594156801700592, 0.37187516689300537, 0.3668769896030426, 0.34963202476501465, 0.35778117179870605, 0.35199210047721863, 0.35453882813453674, 0.364315927028656, 0.35359829664230347, 0.36456167697906494, 0.36178097128868103], "val_accuracy": [0.6523333191871643, 0.7213333249092102, 0.7549999952316284, 0.7713333368301392, 0.7846666574478149, 0.8059999942779541, 0.812666654586792, 0.8153333067893982, 0.824999988079071, 0.8309999704360962, 0.8420000076293945, 0.840666651725769, 0.8456666469573975, 0.8510000109672546, 0.8556666374206543, 0.859000027179718, 0.8543333411216736, 0.8636666536331177, 0.8653333187103271, 0.8636666536331177, 0.8576666712760925, 0.8669999837875366, 0.8650000095367432, 0.8676666617393494, 0.8683333396911621, 0.8769999742507935, 0.875, 0.8790000081062317, 0.871666669845581, 0.875, 0.8766666650772095, 0.8723333477973938, 0.8743333220481873]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.7828571200370789, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.209707021713257, 1.6206940412521362, 1.1507904529571533, 0.9840112924575806, 0.9136282205581665, 0.8393549919128418, 0.8216672539710999, 0.7651510238647461, 0.7209047079086304, 0.7365596294403076, 0.71939617395401, 0.6876139640808105, 0.649390697479248, 0.6520057320594788, 0.6402449011802673, 0.6328136324882507], "accuracy": [0.27460044622421265, 0.5004622936248779, 0.5923920273780823, 0.6514331102371216, 0.6720380187034607, 0.6872276067733765, 0.6960771083831787, 0.7135120630264282, 0.7346453666687012, 0.7294940948486328, 0.7313432693481445, 0.7453441023826599, 0.76106196641922, 0.7597411274909973, 0.7585523724555969, 0.7619865536689758], "val_loss": [1.924346685409546, 1.1383248567581177, 0.9313521385192871, 0.8222531676292419, 0.8094495534896851, 0.6954601407051086, 0.6787415146827698, 0.6285158395767212, 0.6603425145149231, 0.6901730895042419, 0.6046245694160461, 0.5939379930496216, 0.5701242685317993, 0.58185213804245, 0.5675861835479736, 0.5952864289283752], "val_accuracy": [0.5649999976158142, 0.6166666746139526, 0.6660000085830688, 0.6890000104904175, 0.6936666369438171, 0.7303333282470703, 0.7360000014305115, 0.7639999985694885, 0.7490000128746033, 0.731333315372467, 0.7833333611488342, 0.7699999809265137, 0.7796666622161865, 0.7643333077430725, 0.7693333625793457, 0.7833333611488342]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 3, 5], [3, 2, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 0, 1, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.7188571691513062, "mapping_values": [1, 11, 6, 5, 1, 11, 7, 4, 1, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, grad), alpha), tf.math.multiply(tf.math.square(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(beta), tf.math.subtract(beta, tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3095271587371826, 2.3085150718688965, 2.3070623874664307, 2.304887533187866, 2.3015923500061035, 2.296661615371704, 2.2930634021759033, 2.287602424621582, 2.2815744876861572, 2.274057149887085, 2.266397476196289, 2.2590672969818115, 2.2518107891082764, 2.2407073974609375, 2.233438730239868, 2.22452449798584, 2.2102766036987305, 2.198324203491211, 2.1845216751098633, 2.167360305786133, 2.1478111743927, 2.1247291564941406, 2.102726459503174, 2.073329448699951, 2.0336203575134277, 1.9976707696914673, 1.9480661153793335, 1.9024375677108765, 1.838202953338623, 1.7757058143615723, 1.7106659412384033, 1.6393948793411255, 1.5628007650375366, 1.5011684894561768, 1.4445749521255493, 1.3932565450668335, 1.3556287288665771, 1.3319270610809326, 1.3383375406265259, 1.3163601160049438, 1.3077245950698853, 1.3351311683654785, 1.3470548391342163, 1.3545188903808594, 1.3590582609176636, 1.3008344173431396, 1.297310471534729, 1.28397798538208, 1.235924243927002, 1.219491958618164, 1.1502410173416138, 1.1217365264892578, 1.0745033025741577, 1.0252488851547241, 0.9857421517372131, 0.9375025629997253, 0.9131664037704468, 0.8937801718711853, 0.8761492371559143, 0.8770697712898254, 0.8760352730751038, 0.8834618926048279, 0.9055905342102051, 0.9062782526016235, 0.9176198244094849], "accuracy": [0.09311848133802414, 0.09285431355237961, 0.10170386731624603, 0.1014397069811821, 0.1006472036242485, 0.11200633645057678, 0.1228371411561966, 0.13802668452262878, 0.15255580842494965, 0.1768590658903122, 0.19759608805179596, 0.22995641827583313, 0.24541011452674866, 0.2736758589744568, 0.2917712330818176, 0.30062079429626465, 0.32981112599372864, 0.3353586196899414, 0.3494914770126343, 0.3629639446735382, 0.3757759928703308, 0.3774930536746979, 0.37987056374549866, 0.3839651346206665, 0.4105137884616852, 0.3979659080505371, 0.42028793692588806, 0.4154008626937866, 0.4297979176044464, 0.4415532946586609, 0.4451195299625397, 0.452119916677475, 0.46968695521354675, 0.476951539516449, 0.4896314740180969, 0.49993395805358887, 0.5103685259819031, 0.5159159898757935, 0.5275393128395081, 0.5425967574119568, 0.5489367246627808, 0.5482763051986694, 0.5513142347335815, 0.5596354603767395, 0.5729758143424988, 0.5921278595924377, 0.603090763092041, 0.6016378402709961, 0.6095628142356873, 0.6244881749153137, 0.6365077495574951, 0.627129852771759, 0.6435081362724304, 0.6515651941299438, 0.6542068123817444, 0.6670188903808594, 0.6687359809875488, 0.6707172393798828, 0.6686038970947266, 0.6732267737388611, 0.6756042838096619, 0.6729626059532166, 0.6690001487731934, 0.6758684515953064, 0.661471426486969], "val_loss": [2.308422088623047, 2.3069427013397217, 2.304549217224121, 2.3012630939483643, 2.297123670578003, 2.2922472953796387, 2.2867143154144287, 2.280620813369751, 2.2739975452423096, 2.266874313354492, 2.259247303009033, 2.2510454654693604, 2.2421650886535645, 2.232512950897217, 2.221930980682373, 2.21024489402771, 2.197197675704956, 2.182509660720825, 2.165815830230713, 2.146649122238159, 2.1244912147521973, 2.0987346172332764, 2.068708896636963, 2.033677339553833, 1.9928536415100098, 1.9453641176223755, 1.8904130458831787, 1.8273768424987793, 1.756040334701538, 1.676856279373169, 1.5910758972167969, 1.5007166862487793, 1.4085992574691772, 1.3177777528762817, 1.2317965030670166, 1.1539089679718018, 1.0875784158706665, 1.0351572036743164, 0.9966655373573303, 0.9701979160308838, 0.9519970417022705, 0.9382128119468689, 0.9266303777694702, 0.9166005849838257, 0.907732367515564, 0.8985725045204163, 0.8871550559997559, 0.8737295866012573, 0.8596400022506714, 0.845223069190979, 0.8285733461380005, 0.8096972107887268, 0.7894393801689148, 0.7692427039146423, 0.7510752081871033, 0.7372917532920837, 0.7286044955253601, 0.7252740859985352, 0.7273973822593689, 0.7357726097106934, 0.7483873963356018, 0.7630594372749329, 0.7760650515556335, 0.7846688628196716, 0.7867610454559326], "val_accuracy": [0.09266666322946548, 0.09300000220537186, 0.09566666930913925, 0.09966666996479034, 0.11166666448116302, 0.12733332812786102, 0.1483333259820938, 0.18000000715255737, 0.21966665983200073, 0.2876666784286499, 0.35866665840148926, 0.4116666615009308, 0.4363333284854889, 0.453000009059906, 0.46033334732055664, 0.46266666054725647, 0.4623333215713501, 0.46399998664855957, 0.46799999475479126, 0.4650000035762787, 0.4633333384990692, 0.46533334255218506, 0.468666672706604, 0.46966665983200073, 0.47466665506362915, 0.48133334517478943, 0.49133333563804626, 0.5049999952316284, 0.5216666460037231, 0.5463333129882812, 0.5693333148956299, 0.5920000076293945, 0.612333357334137, 0.625333309173584, 0.6420000195503235, 0.6489999890327454, 0.6520000100135803, 0.6523333191871643, 0.6589999794960022, 0.6613333225250244, 0.6676666736602783, 0.6713333129882812, 0.6743333339691162, 0.6746666431427002, 0.6769999861717224, 0.6809999942779541, 0.687333345413208, 0.6903333067893982, 0.6983333230018616, 0.7026666402816772, 0.7066666483879089, 0.7089999914169312, 0.7149999737739563, 0.7183333039283752, 0.7226666808128357, 0.7286666631698608, 0.7316666841506958, 0.731333315372467, 0.7329999804496765, 0.734666645526886, 0.7310000061988831, 0.7239999771118164, 0.7229999899864197, 0.7253333330154419, 0.7303333282470703]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [4, 2, 3, 1, 3, 5, 3, 7, 4, 8, 4], [0, 3, 1, 0, 2, 3, 0, 2, 2, 0], [0, 39, 40, 92], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [9, 2, 0, 6, 3, 8, 4], [2, 0, 3, 1, 2], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 4], [0, 6, 1, 1], [29], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 11, 10, 4, 1, 1, 0, 1, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.multiply(tf.math.add(tf.math.pow(grad, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)), tf.math.pow(grad, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.pow(grad, alpha)), alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 1, 3, 0, 7, 1, 5], [3, 0, 1, 0, 2, 2, 1], [26, 39, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [7, 2, 0, 6, 3, 8, 2], [1, 2, 0, 4, 0, 3, 1], [16, 1], [1, 0, 0, 1, 1, 0, 1, 1], [0, 7, 6, 9], [0, 1, 1, 4], [0, 85], [0, 0, 0, 0, 1, 1], [0, 7, 9, 2], [2, 2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 9, 7, 2, 8, 4, 4, 1, 1, 0, 1, 1, 6, 4, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.math.subtract(tf.math.square(grad), grad), alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(alpha), tf.math.divide_no_nan(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10936468094587326, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 1, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [4, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 1, 1, 0, 1, 1, 1], [0, 6, 2, 9], [0, 1, 1, 4], [0, 75], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 14, 8, 6, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.pow(beta, tf.math.pow(beta, tf.math.negative(tf.math.square(tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}]