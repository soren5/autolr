[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [2, 9, 4, 7, 0, 5, 5, 4], [1, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8837142586708069, "mapping_values": [1, 10, 5, 5, 3, 12, 8, 4, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1052942276000977, 1.196382761001587, 0.8314899802207947, 0.7147043943405151, 0.6302909255027771, 0.5692504644393921, 0.5221520066261292, 0.5032613277435303, 0.4807533919811249, 0.4511759579181671, 0.43527787923812866, 0.4096868932247162, 0.397103488445282, 0.3862413465976715, 0.36111611127853394, 0.350818932056427, 0.3486778438091278, 0.3429076075553894, 0.3232230544090271, 0.3090643882751465, 0.31197598576545715, 0.3050714433193207, 0.2870331108570099, 0.282348096370697, 0.27071237564086914, 0.26655495166778564, 0.2668570280075073, 0.2539179027080536, 0.24523289501667023], "accuracy": [0.29837536811828613, 0.5847312211990356, 0.6859067678451538, 0.7273808121681213, 0.7601373791694641, 0.7794214487075806, 0.802271842956543, 0.8067626357078552, 0.8183859586715698, 0.8289526104927063, 0.8388587832450867, 0.8451988101005554, 0.8518029451370239, 0.8578787446022034, 0.8622375130653381, 0.8739928603172302, 0.8697662353515625, 0.8708229064941406, 0.878879964351654, 0.8845595121383667, 0.8802007436752319, 0.8837670087814331, 0.8868049383163452, 0.8952582478523254, 0.9034473896026611, 0.9014661312103271, 0.89552241563797, 0.9021265506744385, 0.9030511379241943], "val_loss": [1.0808992385864258, 0.7787856459617615, 0.688173234462738, 0.6003098487854004, 0.5536212921142578, 0.5124399662017822, 0.49683383107185364, 0.47856128215789795, 0.46877041459083557, 0.4444534480571747, 0.4302023649215698, 0.4150267243385315, 0.4014204144477844, 0.4067032039165497, 0.3947374224662781, 0.4073643088340759, 0.40519216656684875, 0.398570716381073, 0.3763197362422943, 0.3740674555301666, 0.38644686341285706, 0.38683950901031494, 0.3821990489959717, 0.3752228915691376, 0.38204818964004517, 0.3790208399295807, 0.3727281093597412, 0.3777836859226227, 0.3915119767189026], "val_accuracy": [0.6286666393280029, 0.7043333053588867, 0.7336666584014893, 0.7683333158493042, 0.7806666493415833, 0.8009999990463257, 0.8103333115577698, 0.8186666369438171, 0.8256666660308838, 0.8446666598320007, 0.8533333539962769, 0.8516666889190674, 0.8616666793823242, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8610000014305115, 0.8579999804496765, 0.8693333268165588, 0.871666669845581, 0.8700000047683716, 0.8709999918937683, 0.8726666569709778, 0.8776666522026062, 0.8703333139419556, 0.8696666955947876, 0.8723333477973938, 0.8773333430290222, 0.8696666955947876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.7960000038146973, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2079429626464844, 1.6102347373962402, 1.1498849391937256, 0.9658108353614807, 0.8753429055213928, 0.8377368450164795, 0.8023931384086609, 0.7520671486854553, 0.7415162920951843, 0.6896011829376221, 0.673338770866394, 0.6991052627563477, 0.6452634930610657, 0.6657311320304871, 0.6300473213195801, 0.622719943523407, 0.6133808493614197, 0.6095367074012756, 0.5824374556541443, 0.578504204750061, 0.5529058575630188, 0.5616234540939331, 0.5677914619445801, 0.5345381498336792], "accuracy": [0.2677321434020996, 0.48831066489219666, 0.6001849174499512, 0.6469422578811646, 0.6808875799179077, 0.6903975605964661, 0.7042662501335144, 0.7231541275978088, 0.722757875919342, 0.7404569983482361, 0.7526086568832397, 0.7392682433128357, 0.759609043598175, 0.7553823590278625, 0.76542067527771, 0.761590301990509, 0.7688548564910889, 0.7708360552787781, 0.7796856164932251, 0.7839123010635376, 0.7967243194580078, 0.7906485199928284, 0.7902522683143616, 0.800818920135498], "val_loss": [1.9128185510635376, 1.1037908792495728, 0.8963691592216492, 0.7831061482429504, 0.7577741742134094, 0.8306450843811035, 0.6654889583587646, 0.6784510016441345, 0.6193377375602722, 0.5987134575843811, 0.6476340889930725, 0.6141191720962524, 0.6469873189926147, 0.5715081691741943, 0.580962061882019, 0.547836422920227, 0.5467007756233215, 0.5473487973213196, 0.5121800899505615, 0.520762026309967, 0.5230075120925903, 0.5232883095741272, 0.5005954504013062, 0.5160169005393982], "val_accuracy": [0.593999981880188, 0.6416666507720947, 0.6826666593551636, 0.7099999785423279, 0.7206666469573975, 0.687333345413208, 0.7426666617393494, 0.7200000286102295, 0.7736666798591614, 0.7760000228881836, 0.7406666874885559, 0.7609999775886536, 0.7603333592414856, 0.7770000100135803, 0.7816666960716248, 0.793666660785675, 0.7846666574478149, 0.7826666831970215, 0.8183333277702332, 0.8069999814033508, 0.8063333630561829, 0.8130000233650208, 0.8133333325386047, 0.8090000152587891]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 3, 1, 3, 5], [0, 0, 1, 0, 1], [26, 39, 82], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [2, 9, 4, 2, 0, 5, 5, 4], [1, 2, 0, 5, 0, 3, 1], [16, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1], [7, 3, 0, 2, 5], [5, 1, 1, 4], [5], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 7, 8, 2, 0, 5, 2, 3, 6, 5, 4], [1, 3, 0, 0, 2, 6, 0, 5], [0, 51, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 9, 6, 3, 2, 9, 5, 4, 0, 20, 12, 8, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.negative(tf.math.square(alpha)), beta), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(grad, alpha)), alpha), tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.negative(alpha), tf.math.square(sigma))), tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), beta), grad), tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [7, 2, 3, 8, 5, 5], [0, 0, 1, 2, 2], [26, 39, 19], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [5, 2, 4, 7, 4, 4, 5, 4, 1, 5, 0, 5], [1, 2, 0, 4, 0, 3, 1, 0], [16, 1, 11], [0, 1, 0, 1, 0, 0, 1, 1], [7, 0, 0, 2], [0, 1, 1, 1], [0], [0, 0, 1, 0, 1], [0, 4, 0], [4, 4], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 2, 20, 12, 8, 3, 4, 2, 2, 1, 5, 3, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.pow(alpha, tf.math.add(tf.math.pow(tf.math.pow(beta, tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, alpha))), tf.math.square(tf.math.negative(tf.math.square(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(grad, tf.math.negative(grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 5, 6, 5], [0, 0, 1, 0, 2], [26, 67, 39], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [1, 9, 4, 7, 0, 5, 5, 9, 7], [1, 2, 0, 4, 0, 3, 1], [71, 1, 89], [0, 0, 0, 1, 0, 1, 1, 1], [4, 3, 0, 3], [0, 5, 1, 5], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 12, 9, 3, 3, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(tf.math.negative(tf.math.square(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3036317825317383, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 5, 3, 1, 3, 5], [2, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 6, 1, 7, 0, 5, 5, 4], [1, 2, 0, 0, 0, 3, 1], [53, 1, 28], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [5, 6, 1, 4], [0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 3, 6, 6, 4, 0, 6], [1, 5, 4, 7, 6, 7], [0]], "fitness": -0.09057142585515976, "mapping_values": [1, 7, 4, 3, 1, 11, 6, 5, 3, 8, 4, 4, 0, 13, 7, 6, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.multiply(tf.math.subtract(grad, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.subtract(alpha, beta), tf.math.add(tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.add(grad, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.negative(grad), tf.math.divide_no_nan(grad, grad)), grad)), grad))", "other_info": {"loss": [2.3098630905151367, 2.3086252212524414, 2.311054229736328, 2.3086657524108887, 2.3091025352478027, 2.309644937515259], "accuracy": [0.09377889335155487, 0.09272222965955734, 0.0874389111995697, 0.09509972482919693, 0.0936468094587326, 0.09747721254825592], "val_loss": [2.3093910217285156, 2.3093910217285156, 2.3093910217285156, 2.3093910217285156, 2.3093910217285156, 2.3093910217285156], "val_accuracy": [0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231, 0.08966666460037231]}}]