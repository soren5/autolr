[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8462857007980347, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2121634483337402, 1.6058064699172974, 1.1659818887710571, 0.9941021800041199, 0.9063270092010498, 0.8297048807144165, 0.7962977290153503, 0.7743044495582581, 0.7478806972503662, 0.7071171998977661, 0.7008904218673706, 0.6833369731903076, 0.6650691032409668, 0.6434076428413391, 0.6271822452545166, 0.6288935542106628, 0.6064124703407288, 0.5978152751922607, 0.5809007883071899, 0.5822957754135132, 0.5893721580505371, 0.5597249865531921, 0.5529299378395081, 0.5494160652160645, 0.5340973138809204, 0.5420736074447632, 0.5246900916099548, 0.5276092886924744, 0.5137577056884766, 0.5151656270027161, 0.4928545653820038, 0.5020949840545654, 0.4790555238723755, 0.47978609800338745, 0.46961838006973267, 0.4763341248035431, 0.4706381559371948, 0.4523278772830963, 0.45741865038871765, 0.46356502175331116, 0.4553202688694, 0.4446670413017273], "accuracy": [0.26997753977775574, 0.5111610293388367, 0.5915995240211487, 0.6464139223098755, 0.6796988248825073, 0.7058512568473816, 0.7129837274551392, 0.7177387475967407, 0.7316074371337891, 0.739400327205658, 0.7461365461349487, 0.7514199018478394, 0.7577598690986633, 0.7689869403839111, 0.770439863204956, 0.7689869403839111, 0.7827235460281372, 0.7840443849563599, 0.7906485199928284, 0.7860256433486938, 0.783119797706604, 0.7979130744934082, 0.8000264167785645, 0.7930260300636292, 0.8055738806724548, 0.8030643463134766, 0.8092722296714783, 0.8101968169212341, 0.813498854637146, 0.8140271902084351, 0.8187822103500366, 0.8140271902084351, 0.8220842480659485, 0.822348415851593, 0.8284242749214172, 0.8224804997444153, 0.8337075710296631, 0.8350284099578857, 0.8362171649932861, 0.8309338092803955, 0.832650899887085, 0.8370096683502197], "val_loss": [1.9213560819625854, 1.071881890296936, 0.893805742263794, 0.8041472434997559, 0.7145781517028809, 0.6732219457626343, 0.6473119854927063, 0.6252617239952087, 0.596006453037262, 0.6401125192642212, 0.5861183404922485, 0.5807040333747864, 0.5798402428627014, 0.5561313629150391, 0.5202479362487793, 0.524763286113739, 0.5242302417755127, 0.5103773474693298, 0.4988647997379303, 0.526773989200592, 0.49443063139915466, 0.5013923048973083, 0.4722113311290741, 0.46836715936660767, 0.49291449785232544, 0.4651646316051483, 0.4602363407611847, 0.44861888885498047, 0.44406720995903015, 0.44070687890052795, 0.4460841417312622, 0.45467883348464966, 0.4378846287727356, 0.42528191208839417, 0.4396457374095917, 0.42497533559799194, 0.41655972599983215, 0.430476576089859, 0.40443533658981323, 0.43046656250953674, 0.40864109992980957, 0.413320392370224], "val_accuracy": [0.6100000143051147, 0.67166668176651, 0.6886666417121887, 0.7043333053588867, 0.734333336353302, 0.7516666650772095, 0.7450000047683716, 0.7639999985694885, 0.778333306312561, 0.7620000243186951, 0.7876666784286499, 0.7853333353996277, 0.7749999761581421, 0.7906666398048401, 0.8100000023841858, 0.8023333549499512, 0.8053333163261414, 0.8083333373069763, 0.8133333325386047, 0.7906666398048401, 0.8106666803359985, 0.8109999895095825, 0.8230000138282776, 0.8206666707992554, 0.8199999928474426, 0.8259999752044678, 0.8216666579246521, 0.8323333263397217, 0.8326666951179504, 0.8353333473205566, 0.8353333473205566, 0.8256666660308838, 0.8383333086967468, 0.8399999737739563, 0.8323333263397217, 0.8383333086967468, 0.8510000109672546, 0.8383333086967468, 0.8496666550636292, 0.8353333473205566, 0.8479999899864197, 0.8413333296775818]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8205714225769043, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2078683376312256, 1.6039009094238281, 1.1620092391967773, 0.9771648645401001, 0.9077660441398621, 0.8257196545600891, 0.8009304404258728, 0.7668758630752563, 0.7735284566879272, 0.7217364311218262, 0.7064878344535828, 0.6936333179473877, 0.6807774305343628, 0.6632494330406189, 0.6388108730316162, 0.621503472328186, 0.6067079901695251, 0.6083142161369324, 0.5928219556808472, 0.5978522896766663, 0.5755799412727356, 0.5689051747322083, 0.5690892934799194, 0.5392544269561768, 0.5608660578727722, 0.5288127064704895, 0.5317859053611755, 0.524600088596344, 0.5272942781448364, 0.49882569909095764], "accuracy": [0.2670717239379883, 0.5020473003387451, 0.5935807824134827, 0.6498481035232544, 0.6744155287742615, 0.6966054439544678, 0.7058512568473816, 0.7154933214187622, 0.7172104120254517, 0.733588695526123, 0.7345132827758789, 0.7436270117759705, 0.7449478507041931, 0.7471932172775269, 0.7614582180976868, 0.770439863204956, 0.7751948237419128, 0.7720248103141785, 0.7802139520645142, 0.7781006693840027, 0.7882710099220276, 0.7903843522071838, 0.7876105904579163, 0.8029322624206543, 0.7913089394569397, 0.802800178527832, 0.7992339134216309, 0.8086118102073669, 0.8014793395996094, 0.8144234418869019], "val_loss": [1.909149408340454, 1.0855547189712524, 0.9461691975593567, 0.7743575572967529, 0.7119041085243225, 0.713583767414093, 0.685702383518219, 0.643851637840271, 0.6398870944976807, 0.5899825096130371, 0.6671483516693115, 0.5921341776847839, 0.5810248851776123, 0.6332108378410339, 0.5423048734664917, 0.5185481905937195, 0.5451202988624573, 0.5191648006439209, 0.5217607021331787, 0.5001043677330017, 0.48542651534080505, 0.479012131690979, 0.48000994324684143, 0.4692222476005554, 0.4552050232887268, 0.4619503915309906, 0.4614126682281494, 0.4759437143802643, 0.449077844619751, 0.4400719404220581], "val_accuracy": [0.609666645526886, 0.6516666412353516, 0.6370000243186951, 0.7170000076293945, 0.7319999933242798, 0.7243333458900452, 0.718666672706604, 0.7493333220481873, 0.7463333606719971, 0.7716666460037231, 0.7296666502952576, 0.765333354473114, 0.768666684627533, 0.7599999904632568, 0.7933333516120911, 0.8013333082199097, 0.7873333096504211, 0.8016666769981384, 0.7916666865348816, 0.8083333373069763, 0.8180000185966492, 0.8149999976158142, 0.8270000219345093, 0.8276666402816772, 0.8373333215713501, 0.8169999718666077, 0.8273333311080933, 0.8056666851043701, 0.8236666917800903, 0.8356666564941406]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 3, 1, 9, 5], [0, 0, 1, 0, 0], [87, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 2, 0, 6, 3, 8, 2, 3, 8], [0, 0, 1, 5, 0, 3], [16, 1, 9], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 7, 2, 0, 7, 7, 2, 6, 2, 6, 8, 4, 1, 8, 6, 2, 8, 3, 2, 4, 7, 8, 7, 1, 0, 4, 3, 5], [0, 3, 6, 6, 6, 2, 1, 2, 4, 6, 1, 5, 2, 3, 0, 3, 3, 2, 7, 5, 2, 5], [0, 77], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 5, 3, 3, 15, 9, 6, 3, 50, 28, 22, 2, 1, 0, 1, 0], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(alpha, grad), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(sigma, grad)), tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, grad), beta), tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(alpha, tf.math.subtract(beta, grad))), tf.math.sqrt(grad))), tf.math.divide_no_nan(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.multiply(tf.math.add(tf.math.pow(beta, tf.math.add(tf.math.sqrt(sigma), tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.pow(tf.math.multiply(sigma, beta), grad)))), tf.math.square(grad)), beta)))))), grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 6, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [0, 2, 0, 6, 4, 8, 2, 1, 0], [2, 1, 3, 1, 0, 5], [96, 1], [0, 0, 1, 1], [0, 7], [4, 6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 15, 9, 6, 1, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.pow(alpha, tf.math.sqrt(tf.math.add(tf.math.subtract(grad, alpha), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 3, 1, 3, 5], [1, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 8], [2, 1, 3, 1, 0], [16, 49], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.09342857450246811, "mapping_values": [1, 2, 1, 1, 0, 11, 7, 4, 0, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(alpha, grad), tf.math.sqrt(tf.math.sqrt(alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310724973678589, 2.3094770908355713, 2.3099496364593506, 2.3098955154418945, 2.3108558654785156, 2.3098204135894775], "accuracy": [0.08875974267721176, 0.09100515395402908, 0.09945846349000931, 0.09576013684272766, 0.08638224750757217, 0.09338264167308807], "val_loss": [2.3082809448242188, 2.3082809448242188, 2.3082809448242188, 2.3082809448242188, 2.3082809448242188, 2.3082809448242188], "val_accuracy": [0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 9, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [4, 6], [77], [1], [0], [2], [0]], "fitness": -0.08971428871154785, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3112289905548096, 2.3097586631774902, 2.3099188804626465, 2.310351848602295, 2.3103702068328857, 2.309922218322754], "accuracy": [0.08928807079792023, 0.08809932321310043, 0.09576013684272766, 0.08796724677085876, 0.08902391046285629, 0.09100515395402908], "val_loss": [2.3086977005004883, 2.3086977005004883, 2.3086977005004883, 2.3086977005004883, 2.3086977005004883, 2.3086977005004883], "val_accuracy": [0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288, 0.09533333033323288]}}]