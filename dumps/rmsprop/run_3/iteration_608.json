[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.8799999952316284, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1141276359558105, 1.2854799032211304, 0.9006161093711853, 0.7477179765701294, 0.6510568261146545, 0.5984578132629395, 0.5449386835098267, 0.5192564129829407, 0.49348098039627075, 0.47485414147377014, 0.4514867067337036, 0.4315846562385559, 0.41725119948387146, 0.4095759689807892, 0.39079174399375916, 0.37796324491500854, 0.3730018436908722, 0.34559786319732666, 0.3457213044166565, 0.33971261978149414, 0.32669469714164734, 0.33221715688705444, 0.31436437368392944, 0.3045427203178406, 0.2912495732307434, 0.2893770635128021, 0.27459776401519775, 0.2686750888824463, 0.2542434632778168, 0.2549207806587219, 0.2474549114704132, 0.2353166937828064, 0.2352210432291031, 0.22608718276023865, 0.22045324742794037, 0.20817507803440094, 0.2066163569688797], "accuracy": [0.28305375576019287, 0.5893540978431702, 0.6744155287742615, 0.7111346125602722, 0.7512878179550171, 0.7707040309906006, 0.7977809906005859, 0.800290584564209, 0.809140145778656, 0.8215559124946594, 0.8251221776008606, 0.8404437899589539, 0.8430854678153992, 0.8466516733169556, 0.8516708612442017, 0.8599920868873596, 0.8569541573524475, 0.8720116019248962, 0.8710870146751404, 0.8747853636741638, 0.8794082403182983, 0.8767666220664978, 0.8767666220664978, 0.8842953443527222, 0.8881257176399231, 0.8898428082466125, 0.8967111110687256, 0.9005415439605713, 0.9041078090667725, 0.9027869701385498, 0.9063531756401062, 0.9140139818191528, 0.9075419306755066, 0.9121648669242859, 0.9148064851760864, 0.9215427041053772, 0.9204860925674438], "val_loss": [1.0718753337860107, 0.8780998587608337, 0.6786661148071289, 0.5667974352836609, 0.5274632573127747, 0.4778060019016266, 0.45099446177482605, 0.4290582537651062, 0.41114670038223267, 0.3994693160057068, 0.38328856229782104, 0.3767406940460205, 0.36145931482315063, 0.35313984751701355, 0.3477644920349121, 0.34594792127609253, 0.3332073390483856, 0.32470929622650146, 0.33242690563201904, 0.33648940920829773, 0.3233390152454376, 0.32466185092926025, 0.31876254081726074, 0.3112848997116089, 0.3022047281265259, 0.30465394258499146, 0.2995307147502899, 0.30256974697113037, 0.29729926586151123, 0.30382657051086426, 0.2972928583621979, 0.2895248532295227, 0.29739728569984436, 0.29269400238990784, 0.29641813039779663, 0.2925165593624115, 0.30343908071517944], "val_accuracy": [0.6579999923706055, 0.6980000138282776, 0.7276666760444641, 0.7646666765213013, 0.7836666703224182, 0.8066666722297668, 0.8233333230018616, 0.8339999914169312, 0.8450000286102295, 0.8503333330154419, 0.8533333539962769, 0.8576666712760925, 0.8619999885559082, 0.8633333444595337, 0.8700000047683716, 0.871999979019165, 0.871999979019165, 0.8806666731834412, 0.8736666440963745, 0.8786666393280029, 0.8806666731834412, 0.878000020980835, 0.8840000033378601, 0.8853333592414856, 0.8893333077430725, 0.8913333415985107, 0.8896666765213013, 0.8886666893959045, 0.893666684627533, 0.8939999938011169, 0.8966666460037231, 0.8976666927337646, 0.8926666378974915, 0.8946666717529297, 0.8923333287239075, 0.8963333368301392, 0.890333354473114]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8148571252822876, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2090680599212646, 1.6134672164916992, 1.190840721130371, 1.0205087661743164, 0.8941650390625, 0.8315482139587402, 0.8008050918579102, 0.7661528587341309, 0.7591614723205566, 0.7131519317626953, 0.6969910264015198, 0.6860766410827637, 0.6589468121528625, 0.6518805027008057, 0.6282739043235779, 0.6188275814056396, 0.6036314964294434, 0.6128296256065369, 0.5923206806182861, 0.5774191617965698, 0.5589433312416077, 0.5504803657531738, 0.5504507422447205, 0.5375016331672668, 0.531782865524292, 0.5221518278121948, 0.5077918767929077, 0.5118882656097412, 0.4970199465751648, 0.49696359038352966, 0.49116477370262146, 0.48701611161231995, 0.4828827679157257], "accuracy": [0.26826047897338867, 0.5000660419464111, 0.5823537111282349, 0.6373002529144287, 0.6748117804527283, 0.7004358768463135, 0.709549605846405, 0.7205125093460083, 0.7140403985977173, 0.7396644949913025, 0.7412495017051697, 0.7412495017051697, 0.7543256878852844, 0.7544577717781067, 0.7640998363494873, 0.7670056819915771, 0.7732135653495789, 0.7721568942070007, 0.7817989587783813, 0.7820631265640259, 0.7957997918128967, 0.7951393723487854, 0.7940827012062073, 0.7992339134216309, 0.8039889335632324, 0.8109893202781677, 0.8125742673873901, 0.802800178527832, 0.8124422430992126, 0.8207634687423706, 0.8164047002792358, 0.8161405324935913, 0.819442629814148], "val_loss": [1.9201914072036743, 1.1256544589996338, 0.9536470770835876, 0.798111081123352, 0.7510008215904236, 0.6887270212173462, 0.727790117263794, 0.7301239371299744, 0.6290839314460754, 0.609571099281311, 0.5925856232643127, 0.5962867140769958, 0.5922796130180359, 0.5870603919029236, 0.6137328147888184, 0.5445020794868469, 0.5578510761260986, 0.547880232334137, 0.538561999797821, 0.5269413590431213, 0.5228756070137024, 0.5249524116516113, 0.5146912336349487, 0.523341178894043, 0.4912530481815338, 0.4864916205406189, 0.4807048738002777, 0.47315701842308044, 0.47279560565948486, 0.48572343587875366, 0.4625014662742615, 0.45957309007644653, 0.454698771238327], "val_accuracy": [0.5659999847412109, 0.6480000019073486, 0.6546666622161865, 0.7089999914169312, 0.7300000190734863, 0.7419999837875366, 0.7319999933242798, 0.7049999833106995, 0.7676666378974915, 0.7710000276565552, 0.7733333110809326, 0.7746666669845581, 0.7703333497047424, 0.7649999856948853, 0.7606666684150696, 0.7983333468437195, 0.7873333096504211, 0.8003333210945129, 0.7996666431427002, 0.7983333468437195, 0.8056666851043701, 0.8016666769981384, 0.8106666803359985, 0.7986666560173035, 0.8163333535194397, 0.8166666626930237, 0.8256666660308838, 0.8320000171661377, 0.8276666402816772, 0.8209999799728394, 0.8293333053588867, 0.8316666483879089, 0.8253333568572998]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [2, 8, 4, 6, 2, 5, 5, 4, 4, 0, 3], [2, 2, 0, 4, 0, 3, 1, 3], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [1, 1, 1, 4], [0], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 19, 11, 8, 2, 8, 4, 4, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.add(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), grad))), tf.math.negative(tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(alpha), tf.math.multiply(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [15625.38671875, 282104430592.0, 4.736281576575336e+18, 2.1195117094553908e+26, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.1026284471154213, 0.10196803510189056, 0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1000198.125, 17711742582784.0, 2.9804558451147276e+20, 2.3025853633880615, NaN, NaN, NaN, NaN, 2.3025853633880615], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0976666659116745, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 9, 5], [0, 0, 2, 0, 2], [71, 39, 39], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4, 0, 5, 7, 3, 7, 3], [2, 2, 0, 4, 0, 3, 1, 2, 0, 4, 1], [16, 1, 67], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 6, 3, 3, 25, 14, 11, 3, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.math.square(beta)), tf.math.pow(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), tf.math.square(tf.math.add(tf.math.multiply(alpha, tf.math.add(tf.math.multiply(beta, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), grad)), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303410530090332, 2.3026061058044434, 2.302579641342163, 2.3027052879333496, 2.302828550338745, 2.30303955078125], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.302564859390259, 2.302554130554199, 2.3025760650634766, 2.3026299476623535, 2.302726984024048, 2.3028793334960938], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 9, 4, 6, 3, 5, 5, 5], [2, 2, 0, 2, 0, 3, 1], [16, 1], [0, 0, 1, 1, 0, 0, 1, 1], [5, 3, 0, 3], [0, 1, 1, 2], [0], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 3, 2, 1, 1, 4, 2, 2, 1, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [30451.31640625, 4490086.0, 74298224.0, 540624576.0, 2322063360.0, 7786572800.0], "accuracy": [0.10038304328918457, 0.09734513610601425, 0.10500594228506088, 0.09866596013307571, 0.10011887550354004, 0.1010434553027153], "val_loss": [303337.0, 16262515.0, 174385040.0, 950384960.0, 3559350784.0, 10498162688.0], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [6, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2, 0], [26, 39, 39, 3], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 3, 3, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 5, 6, 4, 15, 8, 7, 1, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), grad)), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]