[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [2, 9, 4, 7, 0, 5, 5, 4], [1, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8837142586708069, "mapping_values": [1, 10, 5, 5, 3, 12, 8, 4, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1052942276000977, 1.196382761001587, 0.8314899802207947, 0.7147043943405151, 0.6302909255027771, 0.5692504644393921, 0.5221520066261292, 0.5032613277435303, 0.4807533919811249, 0.4511759579181671, 0.43527787923812866, 0.4096868932247162, 0.397103488445282, 0.3862413465976715, 0.36111611127853394, 0.350818932056427, 0.3486778438091278, 0.3429076075553894, 0.3232230544090271, 0.3090643882751465, 0.31197598576545715, 0.3050714433193207, 0.2870331108570099, 0.282348096370697, 0.27071237564086914, 0.26655495166778564, 0.2668570280075073, 0.2539179027080536, 0.24523289501667023], "accuracy": [0.29837536811828613, 0.5847312211990356, 0.6859067678451538, 0.7273808121681213, 0.7601373791694641, 0.7794214487075806, 0.802271842956543, 0.8067626357078552, 0.8183859586715698, 0.8289526104927063, 0.8388587832450867, 0.8451988101005554, 0.8518029451370239, 0.8578787446022034, 0.8622375130653381, 0.8739928603172302, 0.8697662353515625, 0.8708229064941406, 0.878879964351654, 0.8845595121383667, 0.8802007436752319, 0.8837670087814331, 0.8868049383163452, 0.8952582478523254, 0.9034473896026611, 0.9014661312103271, 0.89552241563797, 0.9021265506744385, 0.9030511379241943], "val_loss": [1.0808992385864258, 0.7787856459617615, 0.688173234462738, 0.6003098487854004, 0.5536212921142578, 0.5124399662017822, 0.49683383107185364, 0.47856128215789795, 0.46877041459083557, 0.4444534480571747, 0.4302023649215698, 0.4150267243385315, 0.4014204144477844, 0.4067032039165497, 0.3947374224662781, 0.4073643088340759, 0.40519216656684875, 0.398570716381073, 0.3763197362422943, 0.3740674555301666, 0.38644686341285706, 0.38683950901031494, 0.3821990489959717, 0.3752228915691376, 0.38204818964004517, 0.3790208399295807, 0.3727281093597412, 0.3777836859226227, 0.3915119767189026], "val_accuracy": [0.6286666393280029, 0.7043333053588867, 0.7336666584014893, 0.7683333158493042, 0.7806666493415833, 0.8009999990463257, 0.8103333115577698, 0.8186666369438171, 0.8256666660308838, 0.8446666598320007, 0.8533333539962769, 0.8516666889190674, 0.8616666793823242, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8610000014305115, 0.8579999804496765, 0.8693333268165588, 0.871666669845581, 0.8700000047683716, 0.8709999918937683, 0.8726666569709778, 0.8776666522026062, 0.8703333139419556, 0.8696666955947876, 0.8723333477973938, 0.8773333430290222, 0.8696666955947876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.7802857160568237, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2089993953704834, 1.5976423025131226, 1.125024437904358, 0.9647037386894226, 0.905510663986206, 0.8230981826782227, 0.7916868329048157, 0.7517834305763245, 0.7303569316864014, 0.6859157085418701, 0.6751301288604736, 0.6503535509109497, 0.6620241403579712, 0.6435229182243347], "accuracy": [0.26865673065185547, 0.5094439387321472, 0.6098269820213318, 0.6518293619155884, 0.6719059348106384, 0.698190450668335, 0.7091533541679382, 0.7150970697402954, 0.7240787148475647, 0.7429665923118591, 0.7483819723129272, 0.7568352818489075, 0.7483819723129272, 0.7555144429206848], "val_loss": [1.9216399192810059, 1.1114367246627808, 0.9511961340904236, 0.8044811487197876, 0.7460817098617554, 0.7025154829025269, 0.6938316822052002, 0.6553876399993896, 0.6233082413673401, 0.6107864379882812, 0.6072865128517151, 0.5919580459594727, 0.5928689241409302, 0.5955331325531006], "val_accuracy": [0.5616666674613953, 0.6323333382606506, 0.6480000019073486, 0.6933333277702332, 0.7293333411216736, 0.7260000109672546, 0.7329999804496765, 0.7446666955947876, 0.7699999809265137, 0.7683333158493042, 0.7606666684150696, 0.7693333625793457, 0.7696666717529297, 0.753000020980835]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5, 0, 2, 8, 6, 2, 5, 4, 4, 3, 2, 7, 2, 4, 5, 7, 0, 8, 4, 2, 7, 0, 0, 6, 7, 1, 2, 4, 6, 8, 3, 9, 0, 1, 4, 3, 2, 8, 7, 1, 5, 1, 5, 4, 2, 0, 4, 4, 5, 7, 2, 8, 9, 9, 1, 5, 6, 7, 7, 7, 2, 1, 5, 5, 9, 1, 4], [3, 2, 1, 0, 2, 2, 0, 0, 0, 2, 3, 0, 2, 0, 2, 2, 2, 1, 0, 0, 2, 1, 3, 3, 1, 0, 3, 0, 0, 0, 0, 0, 3, 0, 3, 3, 2, 0, 2, 3, 2, 3, 3, 2], [26, 39, 39, 93, 56, 46, 94, 12, 45, 80, 18, 16, 65, 37, 12, 83, 70, 0, 16, 88], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [2, 9, 4, 7, 0, 5, 5, 4, 1, 4, 7, 9], [1, 2, 0, 4, 0, 3, 1], [16, 1, 34, 28], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [7, 3, 3, 2, 5, 8], [7, 1, 1, 3, 4], [35], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 116, 72, 44, 20, 18, 12, 6, 4, 11, 6, 5, 0, 1, 0, 1, 0], "tree_depth": 42, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.multiply(grad, tf.math.square(tf.math.negative(grad))), alpha), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(grad, tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(grad, tf.math.add(tf.math.add(tf.math.pow(tf.math.square(tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.pow(grad, tf.math.add(tf.math.add(tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.divide_no_nan(grad, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), grad)))), tf.math.add(grad, tf.math.subtract(grad, alpha)))), tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(grad, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), alpha))), grad), tf.math.negative(grad))), tf.math.subtract(alpha, tf.math.pow(tf.math.multiply(tf.math.add(tf.math.sqrt(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.square(tf.math.pow(tf.math.add(tf.math.negative(tf.math.pow(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.square(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.sqrt(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.add(grad, grad), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), grad))), tf.math.add(tf.math.add(grad, tf.math.subtract(grad, tf.math.square(tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.pow(grad, grad), grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(tf.math.negative(tf.math.square(tf.math.square(tf.math.pow(tf.math.subtract(tf.math.pow(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), grad)))), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.multiply(grad, tf.math.add(tf.math.square(alpha), alpha)), sigma), tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 4, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [2, 9, 4, 6, 5, 5, 5, 4], [2, 0, 1, 1, 0], [16, 1], [1, 0, 1, 1], [0, 7], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 8, 5, 3, 2, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(beta, tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [5, 6, 3, 1, 3, 5], [0, 0, 3, 1, 2], [24, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [2, 9, 0, 7, 0, 5, 5, 4], [1, 2, 0, 4, 0, 3, 1], [16, 1], [0, 1, 0, 1, 0, 1, 1, 1], [7, 3, 0, 8], [0, 1, 1, 4], [0], [0, 0, 1], [0, 8], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 4, 3, 1, 1, 6, 3, 3, 1, 3, 2, 1, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.negative(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [2, 9, 4, 7, 0, 5, 5, 4], [1, 2, 1, 0, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [0, 7, 3, 8], [0, 1, 1, 4], [0], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 3, 2, 1, 1, 7, 4, 3, 1, 2, 1, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09113723784685135, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]