[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.8799999952316284, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1141276359558105, 1.2854799032211304, 0.9006161093711853, 0.7477179765701294, 0.6510568261146545, 0.5984578132629395, 0.5449386835098267, 0.5192564129829407, 0.49348098039627075, 0.47485414147377014, 0.4514867067337036, 0.4315846562385559, 0.41725119948387146, 0.4095759689807892, 0.39079174399375916, 0.37796324491500854, 0.3730018436908722, 0.34559786319732666, 0.3457213044166565, 0.33971261978149414, 0.32669469714164734, 0.33221715688705444, 0.31436437368392944, 0.3045427203178406, 0.2912495732307434, 0.2893770635128021, 0.27459776401519775, 0.2686750888824463, 0.2542434632778168, 0.2549207806587219, 0.2474549114704132, 0.2353166937828064, 0.2352210432291031, 0.22608718276023865, 0.22045324742794037, 0.20817507803440094, 0.2066163569688797], "accuracy": [0.28305375576019287, 0.5893540978431702, 0.6744155287742615, 0.7111346125602722, 0.7512878179550171, 0.7707040309906006, 0.7977809906005859, 0.800290584564209, 0.809140145778656, 0.8215559124946594, 0.8251221776008606, 0.8404437899589539, 0.8430854678153992, 0.8466516733169556, 0.8516708612442017, 0.8599920868873596, 0.8569541573524475, 0.8720116019248962, 0.8710870146751404, 0.8747853636741638, 0.8794082403182983, 0.8767666220664978, 0.8767666220664978, 0.8842953443527222, 0.8881257176399231, 0.8898428082466125, 0.8967111110687256, 0.9005415439605713, 0.9041078090667725, 0.9027869701385498, 0.9063531756401062, 0.9140139818191528, 0.9075419306755066, 0.9121648669242859, 0.9148064851760864, 0.9215427041053772, 0.9204860925674438], "val_loss": [1.0718753337860107, 0.8780998587608337, 0.6786661148071289, 0.5667974352836609, 0.5274632573127747, 0.4778060019016266, 0.45099446177482605, 0.4290582537651062, 0.41114670038223267, 0.3994693160057068, 0.38328856229782104, 0.3767406940460205, 0.36145931482315063, 0.35313984751701355, 0.3477644920349121, 0.34594792127609253, 0.3332073390483856, 0.32470929622650146, 0.33242690563201904, 0.33648940920829773, 0.3233390152454376, 0.32466185092926025, 0.31876254081726074, 0.3112848997116089, 0.3022047281265259, 0.30465394258499146, 0.2995307147502899, 0.30256974697113037, 0.29729926586151123, 0.30382657051086426, 0.2972928583621979, 0.2895248532295227, 0.29739728569984436, 0.29269400238990784, 0.29641813039779663, 0.2925165593624115, 0.30343908071517944], "val_accuracy": [0.6579999923706055, 0.6980000138282776, 0.7276666760444641, 0.7646666765213013, 0.7836666703224182, 0.8066666722297668, 0.8233333230018616, 0.8339999914169312, 0.8450000286102295, 0.8503333330154419, 0.8533333539962769, 0.8576666712760925, 0.8619999885559082, 0.8633333444595337, 0.8700000047683716, 0.871999979019165, 0.871999979019165, 0.8806666731834412, 0.8736666440963745, 0.8786666393280029, 0.8806666731834412, 0.878000020980835, 0.8840000033378601, 0.8853333592414856, 0.8893333077430725, 0.8913333415985107, 0.8896666765213013, 0.8886666893959045, 0.893666684627533, 0.8939999938011169, 0.8966666460037231, 0.8976666927337646, 0.8926666378974915, 0.8946666717529297, 0.8923333287239075, 0.8963333368301392, 0.890333354473114]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8225714564323425, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2126524448394775, 1.6219286918640137, 1.1506762504577637, 0.9901198148727417, 0.9011209011077881, 0.8576791286468506, 0.784435510635376, 0.7621064186096191, 0.7297672033309937, 0.7134355306625366, 0.7047426700592041, 0.6531396508216858, 0.646628737449646, 0.6418070793151855, 0.6382565498352051, 0.6077085733413696, 0.6123624444007874, 0.5984717011451721, 0.5887093544006348, 0.5740182995796204, 0.5619556903839111, 0.5602798461914062, 0.5483077764511108, 0.5403819680213928, 0.5411627888679504, 0.5308688282966614, 0.5148276686668396, 0.5115434527397156, 0.49372902512550354, 0.4988512098789215, 0.49577072262763977, 0.4901135563850403, 0.48946425318717957, 0.46486029028892517, 0.46637067198753357, 0.4573492407798767, 0.46957793831825256, 0.45669251680374146, 0.44345036149024963, 0.4453439712524414, 0.44372114539146423], "accuracy": [0.2693171203136444, 0.49451854825019836, 0.6001849174499512, 0.6482630968093872, 0.678642213344574, 0.6881521344184875, 0.71100252866745, 0.7205125093460083, 0.7310791015625, 0.737022876739502, 0.7360982894897461, 0.7569673657417297, 0.7581561207771301, 0.76106196641922, 0.7598732113838196, 0.7804781198501587, 0.7738739848136902, 0.7788931727409363, 0.7784969210624695, 0.7877426743507385, 0.7909126877784729, 0.7877426743507385, 0.7913089394569397, 0.7956677079200745, 0.7942147850990295, 0.8039889335632324, 0.8100647330284119, 0.8087438941001892, 0.8195747137069702, 0.8108572363853455, 0.8145555257797241, 0.8193105459213257, 0.8144234418869019, 0.828820526599884, 0.8290846943855286, 0.8278959393501282, 0.829216718673706, 0.8343679904937744, 0.8391229510307312, 0.8352925777435303, 0.8327829837799072], "val_loss": [1.9220976829528809, 1.1060082912445068, 0.8540719151496887, 0.8121230602264404, 0.8128503561019897, 0.7256747484207153, 0.6758954524993896, 0.6228117942810059, 0.6674197316169739, 0.6209204792976379, 0.6037545800209045, 0.5772483944892883, 0.5879458785057068, 0.5894039869308472, 0.551776111125946, 0.5778098702430725, 0.5696839690208435, 0.5510184168815613, 0.540756344795227, 0.5231783390045166, 0.5473710298538208, 0.526189923286438, 0.5169615745544434, 0.5032917261123657, 0.4986145794391632, 0.4996113181114197, 0.504845142364502, 0.4924590289592743, 0.4803491234779358, 0.471717894077301, 0.4615951478481293, 0.4798697531223297, 0.451459139585495, 0.4588467478752136, 0.4528445601463318, 0.4491393268108368, 0.4456787109375, 0.43702009320259094, 0.4391324520111084, 0.4698491096496582, 0.4345492422580719], "val_accuracy": [0.5373333096504211, 0.6513333320617676, 0.6996666789054871, 0.7076666951179504, 0.6923333406448364, 0.7329999804496765, 0.7483333349227905, 0.7706666588783264, 0.746999979019165, 0.7680000066757202, 0.7723333239555359, 0.7816666960716248, 0.7793333530426025, 0.7756666541099548, 0.7963333129882812, 0.7816666960716248, 0.7799999713897705, 0.7946666479110718, 0.8009999990463257, 0.8063333630561829, 0.8023333549499512, 0.7919999957084656, 0.8086666464805603, 0.8163333535194397, 0.8069999814033508, 0.8183333277702332, 0.7990000247955322, 0.8196666836738586, 0.8233333230018616, 0.8339999914169312, 0.8326666951179504, 0.8309999704360962, 0.8373333215713501, 0.8323333263397217, 0.8366666436195374, 0.8426666855812073, 0.8389999866485596, 0.8413333296775818, 0.8330000042915344, 0.8303333520889282, 0.8423333168029785]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 2], [2, 2, 0, 4, 0, 1, 1], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [7, 3, 0, 3, 5, 1, 0], [0, 1, 1, 2, 6], [0], [1], [0], [4], [0]], "fitness": -0.1322857141494751, "mapping_values": [1, 10, 5, 5, 3, 13, 7, 6, 2, 12, 7, 5, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(beta, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(grad))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha)), alpha), tf.math.subtract(beta, tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3085737228393555, 2.3605427742004395, 2.2952005863189697, 2.2934510707855225, 2.3052053451538086, 2.3033785820007324], "accuracy": [0.21423853933811188, 0.17091533541679382, 0.1294412910938263, 0.16761326789855957, 0.10117553919553757, 0.09655263274908066], "val_loss": [2.308187246322632, 2.305539608001709, 2.293682336807251, 2.3070015907287598, 2.303063154220581, 2.3026301860809326], "val_accuracy": [0.13899999856948853, 0.09966666996479034, 0.13600000739097595, 0.1003333330154419, 0.09966666996479034, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [3, 2, 3, 5, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], [2, 2, 4, 6, 3, 5, 5, 4, 4, 1, 6, 0, 8, 0, 8, 3, 1, 5, 4, 9, 1, 1, 4, 3, 1, 0, 1, 3, 0, 4, 1, 6, 2, 8, 7, 8, 4, 0, 9], [2, 2, 0, 4, 0, 3, 1, 1, 5, 2, 3, 0, 1, 3, 2, 2, 4, 0, 1, 0, 4, 1, 5, 2], [16, 1, 70, 92, 51, 70, 65], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 1], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 63, 39, 24, 7, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.square(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.divide_no_nan(grad, alpha), alpha))), tf.math.negative(tf.math.sqrt(tf.math.negative(tf.math.sqrt(grad))))), tf.math.multiply(tf.math.subtract(tf.math.square(tf.math.pow(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.subtract(tf.math.pow(tf.math.multiply(grad, tf.math.subtract(tf.math.negative(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.math.negative(tf.math.pow(tf.math.subtract(alpha, tf.math.divide_no_nan(grad, beta)), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.pow(grad, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(alpha)))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), grad))), alpha), grad), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.subtract(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [393.4445495605469, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07621186226606369, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [21029285888.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 1, 1, 3, 5], [0, 0, 1, 2, 0], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [2, 2, 4, 6, 3, 5, 5, 1, 3, 5, 8, 7, 9, 6, 4, 4, 7, 1, 0, 2, 6, 8, 8, 8, 8, 5, 3, 1, 7, 5, 8], [2, 2, 0, 4, 0, 3, 1, 0, 2, 0, 5, 4, 4, 5, 5, 3, 2, 0], [16, 1, 91, 51, 27, 43], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 49, 31, 18, 6, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(grad, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(alpha, tf.math.pow(tf.math.pow(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.sqrt(grad)), tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.subtract(grad, grad), grad)))))), tf.math.add(grad, tf.math.square(tf.math.sqrt(beta))))))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303847551345825, 2.4003748893737793, 13.27692699432373, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09972262382507324, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.312668800354004, 3.1188695430755615, 76.30180358886719, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [6, 2, 8, 1, 3, 5], [0, 0, 1, 0, 2], [48, 39, 37], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 2, 3, 0, 3, 1], [16, 82], [0, 0, 0, 1, 0, 1, 0, 1, 0], [5, 3, 0, 3, 1, 9], [0, 1, 1, 2], [65, 43], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 1, 9, 6, 3, 2, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha), tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(beta, grad))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.subtract(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [9.601125049930827e+30, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08347642421722412, 0.08228767663240433, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [5.323627673536292e+31, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.05066666752099991, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}]