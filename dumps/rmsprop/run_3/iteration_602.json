[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.8799999952316284, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1141276359558105, 1.2854799032211304, 0.9006161093711853, 0.7477179765701294, 0.6510568261146545, 0.5984578132629395, 0.5449386835098267, 0.5192564129829407, 0.49348098039627075, 0.47485414147377014, 0.4514867067337036, 0.4315846562385559, 0.41725119948387146, 0.4095759689807892, 0.39079174399375916, 0.37796324491500854, 0.3730018436908722, 0.34559786319732666, 0.3457213044166565, 0.33971261978149414, 0.32669469714164734, 0.33221715688705444, 0.31436437368392944, 0.3045427203178406, 0.2912495732307434, 0.2893770635128021, 0.27459776401519775, 0.2686750888824463, 0.2542434632778168, 0.2549207806587219, 0.2474549114704132, 0.2353166937828064, 0.2352210432291031, 0.22608718276023865, 0.22045324742794037, 0.20817507803440094, 0.2066163569688797], "accuracy": [0.28305375576019287, 0.5893540978431702, 0.6744155287742615, 0.7111346125602722, 0.7512878179550171, 0.7707040309906006, 0.7977809906005859, 0.800290584564209, 0.809140145778656, 0.8215559124946594, 0.8251221776008606, 0.8404437899589539, 0.8430854678153992, 0.8466516733169556, 0.8516708612442017, 0.8599920868873596, 0.8569541573524475, 0.8720116019248962, 0.8710870146751404, 0.8747853636741638, 0.8794082403182983, 0.8767666220664978, 0.8767666220664978, 0.8842953443527222, 0.8881257176399231, 0.8898428082466125, 0.8967111110687256, 0.9005415439605713, 0.9041078090667725, 0.9027869701385498, 0.9063531756401062, 0.9140139818191528, 0.9075419306755066, 0.9121648669242859, 0.9148064851760864, 0.9215427041053772, 0.9204860925674438], "val_loss": [1.0718753337860107, 0.8780998587608337, 0.6786661148071289, 0.5667974352836609, 0.5274632573127747, 0.4778060019016266, 0.45099446177482605, 0.4290582537651062, 0.41114670038223267, 0.3994693160057068, 0.38328856229782104, 0.3767406940460205, 0.36145931482315063, 0.35313984751701355, 0.3477644920349121, 0.34594792127609253, 0.3332073390483856, 0.32470929622650146, 0.33242690563201904, 0.33648940920829773, 0.3233390152454376, 0.32466185092926025, 0.31876254081726074, 0.3112848997116089, 0.3022047281265259, 0.30465394258499146, 0.2995307147502899, 0.30256974697113037, 0.29729926586151123, 0.30382657051086426, 0.2972928583621979, 0.2895248532295227, 0.29739728569984436, 0.29269400238990784, 0.29641813039779663, 0.2925165593624115, 0.30343908071517944], "val_accuracy": [0.6579999923706055, 0.6980000138282776, 0.7276666760444641, 0.7646666765213013, 0.7836666703224182, 0.8066666722297668, 0.8233333230018616, 0.8339999914169312, 0.8450000286102295, 0.8503333330154419, 0.8533333539962769, 0.8576666712760925, 0.8619999885559082, 0.8633333444595337, 0.8700000047683716, 0.871999979019165, 0.871999979019165, 0.8806666731834412, 0.8736666440963745, 0.8786666393280029, 0.8806666731834412, 0.878000020980835, 0.8840000033378601, 0.8853333592414856, 0.8893333077430725, 0.8913333415985107, 0.8896666765213013, 0.8886666893959045, 0.893666684627533, 0.8939999938011169, 0.8966666460037231, 0.8976666927337646, 0.8926666378974915, 0.8946666717529297, 0.8923333287239075, 0.8963333368301392, 0.890333354473114]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8222857117652893, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2127387523651123, 1.5996618270874023, 1.1307427883148193, 0.9856141805648804, 0.9201123118400574, 0.8170230388641357, 0.788889467716217, 0.7374140024185181, 0.7302900552749634, 0.7165529131889343, 0.6689599752426147, 0.6728271245956421, 0.6594011783599854, 0.6558896899223328, 0.6431734561920166, 0.6174150109291077, 0.613228440284729, 0.5866498351097107, 0.5781493782997131, 0.5782995223999023, 0.5507287383079529, 0.5663636326789856, 0.5566422939300537, 0.5466920733451843, 0.5389474034309387, 0.5291334390640259, 0.5151150226593018, 0.5188837051391602, 0.5297756195068359, 0.5034551024436951, 0.4961484968662262, 0.5023459196090698, 0.4955962896347046, 0.4858347773551941, 0.47597581148147583, 0.469993531703949, 0.461725115776062, 0.458431601524353, 0.46508145332336426, 0.4504581689834595, 0.4584341049194336, 0.4554762542247772, 0.4411802589893341, 0.4466193616390228, 0.43726110458374023, 0.4424573481082916, 0.42789188027381897, 0.4293157160282135, 0.42451557517051697, 0.4281699061393738, 0.41765251755714417, 0.4170854091644287, 0.4168553054332733, 0.40291187167167664, 0.39808863401412964, 0.39877456426620483, 0.3969177007675171, 0.39851096272468567, 0.38577404618263245, 0.3862321078777313, 0.37672919034957886, 0.38538432121276855, 0.37388214468955994, 0.3757837116718292], "accuracy": [0.2596750855445862, 0.5178972482681274, 0.59661865234375, 0.6494518518447876, 0.6610751748085022, 0.7030775547027588, 0.705058753490448, 0.7265883088111877, 0.7304186820983887, 0.7357020378112793, 0.7514199018478394, 0.7511557340621948, 0.7512878179550171, 0.7563069462776184, 0.7635715007781982, 0.7646281719207764, 0.7696473598480225, 0.7781006693840027, 0.7804781198501587, 0.7840443849563599, 0.7932901978492737, 0.789988100528717, 0.7915731072425842, 0.7973847389221191, 0.7988376617431641, 0.800290584564209, 0.8082155585289001, 0.8074230551719666, 0.8012151718139648, 0.8119139075279236, 0.8158763647079468, 0.8083476424217224, 0.8124422430992126, 0.8171972036361694, 0.8253863453865051, 0.8269713521003723, 0.8264430165290833, 0.830669641494751, 0.8240655064582825, 0.8305375576019287, 0.8273676037788391, 0.83119797706604, 0.8330471515655518, 0.8338396549224854, 0.8403117060661316, 0.8348963260650635, 0.8409721255302429, 0.842028796672821, 0.8450667262077332, 0.8376700282096863, 0.8438779711723328, 0.8436138033866882, 0.8411042094230652, 0.8525954484939575, 0.8495575189590454, 0.8518029451370239, 0.8504821062088013, 0.8533879518508911, 0.8552370667457581, 0.8574824929237366, 0.8570862412452698, 0.8564258217811584, 0.8627657890319824, 0.8576145768165588], "val_loss": [1.92106294631958, 1.106736421585083, 0.9025698900222778, 0.8127236366271973, 0.7733656167984009, 0.6792634725570679, 0.6945756673812866, 0.6758816838264465, 0.6768178939819336, 0.6019524335861206, 0.6025398969650269, 0.6002923846244812, 0.5856844782829285, 0.6852639317512512, 0.5544185042381287, 0.5621153712272644, 0.5371015071868896, 0.5216917991638184, 0.5206301808357239, 0.5055925846099854, 0.5130082964897156, 0.5135743618011475, 0.5025383830070496, 0.5010002851486206, 0.5028276443481445, 0.4820276200771332, 0.4812902510166168, 0.47700485587120056, 0.5093821287155151, 0.47049930691719055, 0.48842281103134155, 0.48656901717185974, 0.4512225389480591, 0.4604579210281372, 0.4494192600250244, 0.44941166043281555, 0.43911662697792053, 0.44100475311279297, 0.43927016854286194, 0.465885728597641, 0.43021273612976074, 0.43258601427078247, 0.4387285113334656, 0.418678343296051, 0.4267597794532776, 0.42638421058654785, 0.4201169013977051, 0.4213636815547943, 0.41703730821609497, 0.4055234491825104, 0.4256894588470459, 0.4172486960887909, 0.408714234828949, 0.40197598934173584, 0.399306058883667, 0.418196439743042, 0.3925933539867401, 0.39350977540016174, 0.3853904902935028, 0.3973698616027832, 0.3964698910713196, 0.3844739496707916, 0.4013238847255707, 0.4042416214942932], "val_accuracy": [0.5803333520889282, 0.640666663646698, 0.6726666688919067, 0.687333345413208, 0.7196666598320007, 0.7480000257492065, 0.7506666779518127, 0.7540000081062317, 0.7296666502952576, 0.7670000195503235, 0.7760000228881836, 0.7630000114440918, 0.7796666622161865, 0.734666645526886, 0.7953333258628845, 0.7896666526794434, 0.8036666512489319, 0.812333345413208, 0.8103333115577698, 0.8096666932106018, 0.7990000247955322, 0.8043333292007446, 0.812666654586792, 0.8119999766349792, 0.8109999895095825, 0.8133333325386047, 0.8286666870117188, 0.8299999833106995, 0.812666654586792, 0.8263333439826965, 0.8183333277702332, 0.8153333067893982, 0.8339999914169312, 0.8346666693687439, 0.8373333215713501, 0.8320000171661377, 0.8489999771118164, 0.8363333344459534, 0.8389999866485596, 0.8303333520889282, 0.8510000109672546, 0.8500000238418579, 0.8389999866485596, 0.8519999980926514, 0.8433333039283752, 0.8489999771118164, 0.8463333249092102, 0.8513333201408386, 0.8556666374206543, 0.8526666760444641, 0.8423333168029785, 0.8473333120346069, 0.8543333411216736, 0.8560000061988831, 0.8633333444595337, 0.8489999771118164, 0.8579999804496765, 0.8619999885559082, 0.8663333058357239, 0.8603333234786987, 0.8553333282470703, 0.8579999804496765, 0.8556666374206543, 0.8529999852180481]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [54, 40, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4, 7, 8, 4, 8], [2, 2, 0, 4, 0, 3, 1, 4, 0], [16, 1, 91], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 0, 2], [43, 74], [1], [0], [1], [0]], "fitness": -0.5811428427696228, "mapping_values": [1, 10, 5, 5, 3, 21, 12, 9, 3, 8, 4, 4, 2, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), grad)), tf.math.sqrt(tf.math.pow(alpha, tf.math.sqrt(grad)))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.148864269256592, 69.11986541748047, NaN, NaN, NaN, NaN], "accuracy": [0.2922995686531067, 0.187689870595932, 0.09311848133802414, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [5.157381057739258, 286.3224792480469, NaN, NaN, NaN, NaN], "val_accuracy": [0.5816666483879089, 0.10233332961797714, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 6, 5, 4], [3, 3, 3, 1, 0, 3, 3, 0], [84, 1], [0, 0, 1, 0, 0, 0, 1, 1], [0, 7, 7, 8, 8], [0, 6, 4], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 16, 8, 8, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(grad, tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.square(tf.math.pow(grad, alpha))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), grad)), grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.sqrt(grad)), grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 9, 1, 3, 5], [1, 0, 1, 2, 2], [26, 51, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 8, 5, 5, 4], [2, 2, 0, 4, 0, 2, 1], [16, 1], [0, 0, 1, 1, 0, 1, 1, 1], [7, 2, 0, 3], [0, 1, 1, 2], [0], [0, 0, 0, 1, 1, 1], [0, 7, 6], [1, 7, 5], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 2, 12, 7, 5, 2, 6, 3, 3, 1, 6, 3, 3, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.square(grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), tf.math.negative(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(alpha, grad), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [2, 2, 6, 6, 3, 5, 5, 4, 1, 1, 2, 5, 3], [2, 2, 3, 4, 0, 3, 1, 5, 0, 1, 0], [16, 16, 97], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [29], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 3, 24, 13, 11, 3, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.math.square(beta)), tf.math.pow(tf.math.subtract(beta, grad), grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.subtract(tf.math.add(tf.math.square(alpha), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3029050827026367, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]