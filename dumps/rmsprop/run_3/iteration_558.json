[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.8799999952316284, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1141276359558105, 1.2854799032211304, 0.9006161093711853, 0.7477179765701294, 0.6510568261146545, 0.5984578132629395, 0.5449386835098267, 0.5192564129829407, 0.49348098039627075, 0.47485414147377014, 0.4514867067337036, 0.4315846562385559, 0.41725119948387146, 0.4095759689807892, 0.39079174399375916, 0.37796324491500854, 0.3730018436908722, 0.34559786319732666, 0.3457213044166565, 0.33971261978149414, 0.32669469714164734, 0.33221715688705444, 0.31436437368392944, 0.3045427203178406, 0.2912495732307434, 0.2893770635128021, 0.27459776401519775, 0.2686750888824463, 0.2542434632778168, 0.2549207806587219, 0.2474549114704132, 0.2353166937828064, 0.2352210432291031, 0.22608718276023865, 0.22045324742794037, 0.20817507803440094, 0.2066163569688797], "accuracy": [0.28305375576019287, 0.5893540978431702, 0.6744155287742615, 0.7111346125602722, 0.7512878179550171, 0.7707040309906006, 0.7977809906005859, 0.800290584564209, 0.809140145778656, 0.8215559124946594, 0.8251221776008606, 0.8404437899589539, 0.8430854678153992, 0.8466516733169556, 0.8516708612442017, 0.8599920868873596, 0.8569541573524475, 0.8720116019248962, 0.8710870146751404, 0.8747853636741638, 0.8794082403182983, 0.8767666220664978, 0.8767666220664978, 0.8842953443527222, 0.8881257176399231, 0.8898428082466125, 0.8967111110687256, 0.9005415439605713, 0.9041078090667725, 0.9027869701385498, 0.9063531756401062, 0.9140139818191528, 0.9075419306755066, 0.9121648669242859, 0.9148064851760864, 0.9215427041053772, 0.9204860925674438], "val_loss": [1.0718753337860107, 0.8780998587608337, 0.6786661148071289, 0.5667974352836609, 0.5274632573127747, 0.4778060019016266, 0.45099446177482605, 0.4290582537651062, 0.41114670038223267, 0.3994693160057068, 0.38328856229782104, 0.3767406940460205, 0.36145931482315063, 0.35313984751701355, 0.3477644920349121, 0.34594792127609253, 0.3332073390483856, 0.32470929622650146, 0.33242690563201904, 0.33648940920829773, 0.3233390152454376, 0.32466185092926025, 0.31876254081726074, 0.3112848997116089, 0.3022047281265259, 0.30465394258499146, 0.2995307147502899, 0.30256974697113037, 0.29729926586151123, 0.30382657051086426, 0.2972928583621979, 0.2895248532295227, 0.29739728569984436, 0.29269400238990784, 0.29641813039779663, 0.2925165593624115, 0.30343908071517944], "val_accuracy": [0.6579999923706055, 0.6980000138282776, 0.7276666760444641, 0.7646666765213013, 0.7836666703224182, 0.8066666722297668, 0.8233333230018616, 0.8339999914169312, 0.8450000286102295, 0.8503333330154419, 0.8533333539962769, 0.8576666712760925, 0.8619999885559082, 0.8633333444595337, 0.8700000047683716, 0.871999979019165, 0.871999979019165, 0.8806666731834412, 0.8736666440963745, 0.8786666393280029, 0.8806666731834412, 0.878000020980835, 0.8840000033378601, 0.8853333592414856, 0.8893333077430725, 0.8913333415985107, 0.8896666765213013, 0.8886666893959045, 0.893666684627533, 0.8939999938011169, 0.8966666460037231, 0.8976666927337646, 0.8926666378974915, 0.8946666717529297, 0.8923333287239075, 0.8963333368301392, 0.890333354473114]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8345714211463928, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2104904651641846, 1.6038693189620972, 1.1441751718521118, 0.9680384397506714, 0.8987361192703247, 0.8497191071510315, 0.794641375541687, 0.7626579999923706, 0.7521555423736572, 0.7328745722770691, 0.7091342806816101, 0.6616029739379883, 0.6681634783744812, 0.650456428527832, 0.6382833123207092, 0.6271612644195557, 0.6385735869407654, 0.5977869033813477, 0.6033496856689453, 0.5746784210205078, 0.5816549062728882, 0.5628195405006409, 0.5651111006736755, 0.5641795992851257, 0.5406528115272522, 0.5454611778259277, 0.5167455077171326, 0.5184857249259949, 0.5098445415496826, 0.5100644826889038, 0.5198636651039124, 0.5085723996162415, 0.4928382933139801, 0.4799720346927643, 0.48720088601112366, 0.47363510727882385, 0.4690217971801758, 0.4725625514984131, 0.4719659090042114, 0.46255093812942505, 0.4528191387653351, 0.45216095447540283, 0.4491531550884247, 0.44708603620529175, 0.43325892090797424, 0.4330601096153259, 0.44460609555244446, 0.42554086446762085, 0.42585474252700806], "accuracy": [0.26865673065185547, 0.5173689126968384, 0.6052040457725525, 0.6534143686294556, 0.6803592443466187, 0.6926429867744446, 0.7012283802032471, 0.7127195596694946, 0.7186633348464966, 0.7308149337768555, 0.733588695526123, 0.7552502751350403, 0.7453441023826599, 0.761590301990509, 0.7642319202423096, 0.7693831920623779, 0.7589486241340637, 0.7810064554214478, 0.7705719470977783, 0.7803460359573364, 0.7821952104568481, 0.7905164361000061, 0.7886672616004944, 0.7915731072425842, 0.7992339134216309, 0.7969884872436523, 0.8067626357078552, 0.8108572363853455, 0.8125742673873901, 0.809140145778656, 0.8137630224227905, 0.8125742673873901, 0.8195747137069702, 0.8232730031013489, 0.8197067975997925, 0.8269713521003723, 0.8257825970649719, 0.8228767514228821, 0.8251221776008606, 0.8281601071357727, 0.832650899887085, 0.8352925777435303, 0.8354246616363525, 0.8348963260650635, 0.8399154543876648, 0.8391229510307312, 0.8323867321014404, 0.8442742228507996, 0.8450667262077332], "val_loss": [1.9203777313232422, 1.1411526203155518, 0.8629763722419739, 0.7811416983604431, 0.73518967628479, 0.6692764759063721, 0.6908634305000305, 0.6449165940284729, 0.6804696321487427, 0.6045264601707458, 0.5940667390823364, 0.5752509832382202, 0.5802361965179443, 0.5426569581031799, 0.5524930953979492, 0.5465124249458313, 0.5190728902816772, 0.4996092915534973, 0.5037526488304138, 0.49253198504447937, 0.4903615713119507, 0.4928584694862366, 0.4721648097038269, 0.4796428978443146, 0.45629772543907166, 0.45069369673728943, 0.4525475800037384, 0.4480759799480438, 0.4724845290184021, 0.44142618775367737, 0.4437602460384369, 0.4315512776374817, 0.43218350410461426, 0.42370304465293884, 0.424996942281723, 0.42072224617004395, 0.4300497770309448, 0.4191763997077942, 0.404540091753006, 0.43788501620292664, 0.4081345498561859, 0.41596585512161255, 0.419619619846344, 0.39645490050315857, 0.39658263325691223, 0.404877632856369, 0.4078649580478668, 0.40819603204727173, 0.3953942060470581], "val_accuracy": [0.5630000233650208, 0.6233333349227905, 0.7003333568572998, 0.7323333621025085, 0.7263333201408386, 0.7480000257492065, 0.7506666779518127, 0.75, 0.7323333621025085, 0.7770000100135803, 0.7730000019073486, 0.7846666574478149, 0.7826666831970215, 0.800000011920929, 0.7946666479110718, 0.7973333597183228, 0.8046666383743286, 0.8113333582878113, 0.8026666641235352, 0.8133333325386047, 0.8166666626930237, 0.8180000185966492, 0.8206666707992554, 0.8220000267028809, 0.8259999752044678, 0.8296666741371155, 0.8299999833106995, 0.8323333263397217, 0.8309999704360962, 0.8346666693687439, 0.8330000042915344, 0.8410000205039978, 0.8399999737739563, 0.8429999947547913, 0.8389999866485596, 0.8460000157356262, 0.8360000252723694, 0.8473333120346069, 0.8493333458900452, 0.8333333134651184, 0.846666693687439, 0.8446666598320007, 0.8399999737739563, 0.8533333539962769, 0.8510000109672546, 0.8473333120346069, 0.846666693687439, 0.843999981880188, 0.8506666421890259]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 2, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 3], [95, 36], [0, 0, 1, 1, 0, 0, 1, 1], [7, 3, 0, 3], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.7125714421272278, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), tf.math.negative(tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.061483383178711, 1.6127092838287354, 1.1777284145355225, 6.323261260986328, 4.765231132507324, 4.043076515197754, 5.778999328613281, 10.678059577941895], "accuracy": [0.2949412167072296, 0.5587108731269836, 0.5921278595924377, 0.49610355496406555, 0.15638621151447296, 0.11279883980751038, 0.10130762308835983, 0.10077928751707077], "val_loss": [1.0125486850738525, 0.9627172946929932, 0.7638364434242249, 10.37745475769043, 3.604382276535034, 4.539994239807129, 8.009245872497559, 15.998687744140625], "val_accuracy": [0.6656666398048401, 0.6926666498184204, 0.722000002861023, 0.16066665947437286, 0.16300000250339508, 0.1003333330154419, 0.09600000083446503, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 8, 5], [0, 0, 1, 0, 2], [3, 39, 39], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [2, 2, 4, 6, 5, 5, 5, 4, 7, 4, 8, 7, 5, 0], [2, 2, 0, 4, 0, 3, 1, 0, 0], [88, 1, 94, 14], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [48], [1], [0], [4], [0]], "fitness": -0.2028571367263794, "mapping_values": [1, 9, 5, 4, 3, 23, 14, 9, 4, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.square(tf.math.square(tf.math.square(tf.math.pow(tf.math.add(tf.math.pow(beta, tf.math.sqrt(beta)), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad)), alpha), tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.407043218612671, 3.021944522857666, 2.30438494682312, 2.30271315574646, 2.3141651153564453, 2.3125386238098145], "accuracy": [0.17355699837207794, 0.20433232188224792, 0.09932637959718704, 0.1014397069811821, 0.17461365461349487, 0.09906221181154251], "val_loss": [2.0765419006347656, 2.304903268814087, 2.3027074337005615, 2.3003597259521484, 2.3344368934631348, 2.3036842346191406], "val_accuracy": [0.2070000022649765, 0.1003333330154419, 0.1003333330154419, 0.14666666090488434, 0.09799999743700027, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [9, 2, 3, 1, 3, 5], [0, 0, 1, 0, 0], [26, 39, 39], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 0, 5, 5, 6], [2, 2, 0, 4, 0, 3, 3], [16, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1], [7, 3, 0, 3, 8], [0, 1, 1, 2], [96], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 12, 7, 5, 2, 9, 5, 4, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.divide_no_nan(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.sqrt(alpha), alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [31168.46875, 4382268.5, 74488560.0, 542541888.0, 2341857792.0, 7588211712.0], "accuracy": [0.0952318087220192, 0.09496764093637466, 0.10474177449941635, 0.10276053100824356, 0.09655263274908066, 0.10117553919553757], "val_loss": [306017.59375, 16407095.0, 175936992.0, 958846528.0, 3591048704.0, 10591677440.0], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 0, 5], [0, 0, 1, 0, 2], [26, 42, 39], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 2, 4, 2, 3, 5, 5, 4, 6, 8, 1, 4, 7], [2, 0, 3, 1, 0, 1, 0, 5, 5, 5, 5], [16, 1, 7, 66], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [7, 6, 0, 3, 1, 3, 5, 0, 4, 8, 4, 8, 4, 0, 2, 5], [0, 2, 4, 2, 2, 3, 5, 2, 0, 5], [0, 51], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 3, 24, 13, 11, 3, 26, 16, 10, 2, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.square(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.add(tf.math.multiply(tf.math.square(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha)), tf.math.sqrt(tf.math.subtract(tf.math.pow(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(grad, grad)), grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.subtract(beta, grad), beta)), tf.math.multiply(tf.math.square(tf.math.negative(tf.math.pow(beta, tf.math.sqrt(tf.math.pow(tf.math.sqrt(sigma), tf.math.pow(grad, tf.math.negative(beta))))))), tf.math.add(tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]