[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8462857007980347, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2121634483337402, 1.6058064699172974, 1.1659818887710571, 0.9941021800041199, 0.9063270092010498, 0.8297048807144165, 0.7962977290153503, 0.7743044495582581, 0.7478806972503662, 0.7071171998977661, 0.7008904218673706, 0.6833369731903076, 0.6650691032409668, 0.6434076428413391, 0.6271822452545166, 0.6288935542106628, 0.6064124703407288, 0.5978152751922607, 0.5809007883071899, 0.5822957754135132, 0.5893721580505371, 0.5597249865531921, 0.5529299378395081, 0.5494160652160645, 0.5340973138809204, 0.5420736074447632, 0.5246900916099548, 0.5276092886924744, 0.5137577056884766, 0.5151656270027161, 0.4928545653820038, 0.5020949840545654, 0.4790555238723755, 0.47978609800338745, 0.46961838006973267, 0.4763341248035431, 0.4706381559371948, 0.4523278772830963, 0.45741865038871765, 0.46356502175331116, 0.4553202688694, 0.4446670413017273], "accuracy": [0.26997753977775574, 0.5111610293388367, 0.5915995240211487, 0.6464139223098755, 0.6796988248825073, 0.7058512568473816, 0.7129837274551392, 0.7177387475967407, 0.7316074371337891, 0.739400327205658, 0.7461365461349487, 0.7514199018478394, 0.7577598690986633, 0.7689869403839111, 0.770439863204956, 0.7689869403839111, 0.7827235460281372, 0.7840443849563599, 0.7906485199928284, 0.7860256433486938, 0.783119797706604, 0.7979130744934082, 0.8000264167785645, 0.7930260300636292, 0.8055738806724548, 0.8030643463134766, 0.8092722296714783, 0.8101968169212341, 0.813498854637146, 0.8140271902084351, 0.8187822103500366, 0.8140271902084351, 0.8220842480659485, 0.822348415851593, 0.8284242749214172, 0.8224804997444153, 0.8337075710296631, 0.8350284099578857, 0.8362171649932861, 0.8309338092803955, 0.832650899887085, 0.8370096683502197], "val_loss": [1.9213560819625854, 1.071881890296936, 0.893805742263794, 0.8041472434997559, 0.7145781517028809, 0.6732219457626343, 0.6473119854927063, 0.6252617239952087, 0.596006453037262, 0.6401125192642212, 0.5861183404922485, 0.5807040333747864, 0.5798402428627014, 0.5561313629150391, 0.5202479362487793, 0.524763286113739, 0.5242302417755127, 0.5103773474693298, 0.4988647997379303, 0.526773989200592, 0.49443063139915466, 0.5013923048973083, 0.4722113311290741, 0.46836715936660767, 0.49291449785232544, 0.4651646316051483, 0.4602363407611847, 0.44861888885498047, 0.44406720995903015, 0.44070687890052795, 0.4460841417312622, 0.45467883348464966, 0.4378846287727356, 0.42528191208839417, 0.4396457374095917, 0.42497533559799194, 0.41655972599983215, 0.430476576089859, 0.40443533658981323, 0.43046656250953674, 0.40864109992980957, 0.413320392370224], "val_accuracy": [0.6100000143051147, 0.67166668176651, 0.6886666417121887, 0.7043333053588867, 0.734333336353302, 0.7516666650772095, 0.7450000047683716, 0.7639999985694885, 0.778333306312561, 0.7620000243186951, 0.7876666784286499, 0.7853333353996277, 0.7749999761581421, 0.7906666398048401, 0.8100000023841858, 0.8023333549499512, 0.8053333163261414, 0.8083333373069763, 0.8133333325386047, 0.7906666398048401, 0.8106666803359985, 0.8109999895095825, 0.8230000138282776, 0.8206666707992554, 0.8199999928474426, 0.8259999752044678, 0.8216666579246521, 0.8323333263397217, 0.8326666951179504, 0.8353333473205566, 0.8353333473205566, 0.8256666660308838, 0.8383333086967468, 0.8399999737739563, 0.8323333263397217, 0.8383333086967468, 0.8510000109672546, 0.8383333086967468, 0.8496666550636292, 0.8353333473205566, 0.8479999899864197, 0.8413333296775818]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8360000252723694, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.214104413986206, 1.623319387435913, 1.1777249574661255, 0.9740096926689148, 0.8918364644050598, 0.852404773235321, 0.7808830142021179, 0.7583463788032532, 0.7437747120857239, 0.6943586468696594, 0.6855962872505188, 0.6855983138084412, 0.6433660387992859, 0.6455448865890503, 0.6210785508155823, 0.6161041259765625, 0.60216224193573, 0.5916665196418762, 0.5819814205169678, 0.5860834121704102, 0.5785707831382751, 0.5646611452102661, 0.5383502840995789, 0.535085916519165, 0.5441126227378845, 0.520338237285614, 0.5181968808174133, 0.507254421710968, 0.495179682970047, 0.48995548486709595, 0.49575456976890564, 0.48641571402549744, 0.47189345955848694, 0.4734858274459839, 0.457832396030426, 0.4616650342941284, 0.46636292338371277], "accuracy": [0.26482629776000977, 0.4967639744281769, 0.5791836977005005, 0.653150200843811, 0.674679696559906, 0.6901333928108215, 0.7094175219535828, 0.7169462442398071, 0.7185312509536743, 0.7434949278831482, 0.7384757399559021, 0.7430986762046814, 0.7577598690986633, 0.7609298825263977, 0.7648923397064209, 0.7677981853485107, 0.7779685854911804, 0.7790252566337585, 0.7835160493850708, 0.7821952104568481, 0.7786290049552917, 0.7860256433486938, 0.7972526550292969, 0.7979130744934082, 0.796328067779541, 0.8055738806724548, 0.8131026029586792, 0.8158763647079468, 0.8149517774581909, 0.8150838613510132, 0.8152159452438354, 0.8232730031013489, 0.8318583965301514, 0.824329674243927, 0.8355567455291748, 0.8321225643157959, 0.828820526599884], "val_loss": [1.9265022277832031, 1.096946358680725, 0.8801487684249878, 0.7948476672172546, 0.7362073659896851, 0.661957859992981, 0.6830118894577026, 0.6134262681007385, 0.6055144667625427, 0.6256230473518372, 0.6057659387588501, 0.596908688545227, 0.557667076587677, 0.5765304565429688, 0.5532814860343933, 0.5244694948196411, 0.5369964838027954, 0.513009786605835, 0.543968677520752, 0.5102412700653076, 0.5182132720947266, 0.4960554242134094, 0.5256600379943848, 0.4873349666595459, 0.47549140453338623, 0.4825497269630432, 0.4845176935195923, 0.4654308259487152, 0.4697788953781128, 0.474551260471344, 0.4481739103794098, 0.4398728311061859, 0.4477616250514984, 0.46265938878059387, 0.4532407224178314, 0.452134370803833, 0.4388536810874939], "val_accuracy": [0.5490000247955322, 0.6516666412353516, 0.7043333053588867, 0.6986666917800903, 0.7256666421890259, 0.765999972820282, 0.737333357334137, 0.7766666412353516, 0.7820000052452087, 0.7643333077430725, 0.7670000195503235, 0.7726666927337646, 0.7929999828338623, 0.7870000004768372, 0.7956666946411133, 0.8133333325386047, 0.7973333597183228, 0.8143333196640015, 0.8073333501815796, 0.8153333067893982, 0.812666654586792, 0.8213333487510681, 0.8009999990463257, 0.8240000009536743, 0.8273333311080933, 0.824999988079071, 0.8240000009536743, 0.8266666531562805, 0.8346666693687439, 0.82833331823349, 0.8389999866485596, 0.8479999899864197, 0.8393333554267883, 0.831333339214325, 0.8323333263397217, 0.8403333425521851, 0.8460000157356262]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 0], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 9, 0, 6, 3, 8, 3], [1, 0, 3, 1, 0], [16, 1], [1, 0, 0, 1], [0, 7], [0, 6], [0], [0, 0, 0, 0, 1], [0, 0, 0, 5], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 2, 2, 0, 1, 1, 0, 1, 1, 5, 4, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(tf.math.square(beta))))", "other_info": {"loss": [2.3103675842285156, 2.4010095596313477, 5.39000129699707, 30.914609909057617, 172.27206420898438, 826.851806640625], "accuracy": [0.08889182657003403, 0.10421344637870789, 0.10236428678035736, 0.10460969805717468, 0.1002509593963623, 0.0952318087220192], "val_loss": [2.309401750564575, 2.5918967723846436, 10.220963478088379, 60.0120735168457, 306.68450927734375, 1377.4288330078125], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 6, 3, 5], [0, 0, 1, 2, 2], [83, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 5, 6, 6, 3, 8, 2], [3, 3, 2, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [93], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 6, 8], [2, 7], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 12, 7, 5, 1, 4, 2, 2, 1, 7, 5, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.multiply(grad, beta), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.negative(tf.math.divide_no_nan(beta, tf.math.sqrt(grad)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 4, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 0, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 4, 2, 2, 1, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.303205728530884, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 3, 3, 1, 3, 5, 1, 7, 3, 2, 5, 8, 3, 3, 7, 6, 6, 8, 5, 9], [0, 0, 1, 3, 2, 2, 3, 0, 3, 2, 3, 1, 3], [0, 39, 39, 67], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [0, 2, 0, 6, 6, 7, 2, 0, 3, 7, 6, 1, 0, 8, 9], [2, 0, 3, 1, 0, 1, 4, 0, 4], [60, 1, 68, 23], [0, 1, 1, 0], [0, 7], [0, 6], [0], [1], [0], [0], [0]], "fitness": -0.09428571164608002, "mapping_values": [1, 33, 20, 13, 4, 24, 15, 9, 4, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.math.subtract(grad, tf.math.add(tf.math.multiply(tf.math.add(grad, grad), tf.math.square(grad)), tf.math.sqrt(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(alpha)), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))))))), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), alpha)))), grad)), tf.math.subtract(tf.math.negative(tf.math.sqrt(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.310516357421875, 2.3092408180236816, 2.310072660446167, 2.3095016479492188, 2.310220718383789, 2.3093132972717285], "accuracy": [0.08809932321310043, 0.0948355570435524, 0.09259014576673508, 0.09219389408826828, 0.08770307898521423, 0.09060890227556229], "val_loss": [2.3088700771331787, 2.3088700771331787, 2.3088700771331787, 2.3088700771331787, 2.3088700771331787, 2.3088700771331787], "val_accuracy": [0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284]}}]