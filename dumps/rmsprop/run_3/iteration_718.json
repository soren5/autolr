[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8808571696281433, "mapping_values": [1, 10, 5, 5, 3, 14, 8, 6, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1058011054992676, 1.1498116254806519, 0.8304385542869568, 0.7203441262245178, 0.6393402218818665, 0.5854113698005676, 0.5511501431465149, 0.5187006592750549, 0.505515992641449, 0.4818469285964966, 0.4484843909740448, 0.43561360239982605, 0.42612436413764954, 0.41596850752830505, 0.39672064781188965, 0.3839366137981415, 0.3636326789855957, 0.3521239161491394, 0.33775001764297485, 0.31625643372535706, 0.31688356399536133, 0.30882248282432556, 0.3001636564731598, 0.2953629493713379, 0.2911835014820099, 0.28392574191093445, 0.2676911950111389, 0.2642957866191864, 0.2519010007381439, 0.2429644614458084, 0.23603840172290802, 0.2455616593360901, 0.23240527510643005], "accuracy": [0.2879408299922943, 0.5983357429504395, 0.6905296444892883, 0.722229540348053, 0.7576277852058411, 0.7792893648147583, 0.7957997918128967, 0.8074230551719666, 0.8117818236351013, 0.8165367841720581, 0.834632158279419, 0.8391229510307312, 0.843481719493866, 0.8438779711723328, 0.8529917001724243, 0.8560295701026917, 0.8659358024597168, 0.869502067565918, 0.873860776424408, 0.8791441321372986, 0.8835028409957886, 0.8838990926742554, 0.8858803510665894, 0.8910315632820129, 0.8918240666389465, 0.8916919827461243, 0.8990886211395264, 0.8993527889251709, 0.9051644206047058, 0.909259021282196, 0.9103156924247742, 0.904768168926239, 0.913089394569397], "val_loss": [1.0690844058990479, 0.7267204523086548, 0.6630074977874756, 0.5851247310638428, 0.5488004684448242, 0.5154633522033691, 0.48644670844078064, 0.4733087122440338, 0.46183642745018005, 0.4481644630432129, 0.4221508502960205, 0.41604873538017273, 0.4122338891029358, 0.4024076461791992, 0.39266952872276306, 0.3885684907436371, 0.38248133659362793, 0.3724929988384247, 0.3723068833351135, 0.36633822321891785, 0.3746758699417114, 0.36198416352272034, 0.3594156801700592, 0.37187516689300537, 0.3668769896030426, 0.34963202476501465, 0.35778117179870605, 0.35199210047721863, 0.35453882813453674, 0.364315927028656, 0.35359829664230347, 0.36456167697906494, 0.36178097128868103], "val_accuracy": [0.6523333191871643, 0.7213333249092102, 0.7549999952316284, 0.7713333368301392, 0.7846666574478149, 0.8059999942779541, 0.812666654586792, 0.8153333067893982, 0.824999988079071, 0.8309999704360962, 0.8420000076293945, 0.840666651725769, 0.8456666469573975, 0.8510000109672546, 0.8556666374206543, 0.859000027179718, 0.8543333411216736, 0.8636666536331177, 0.8653333187103271, 0.8636666536331177, 0.8576666712760925, 0.8669999837875366, 0.8650000095367432, 0.8676666617393494, 0.8683333396911621, 0.8769999742507935, 0.875, 0.8790000081062317, 0.871666669845581, 0.875, 0.8766666650772095, 0.8723333477973938, 0.8743333220481873]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8299999833106995, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2102773189544678, 1.5943574905395508, 1.1509820222854614, 0.9821390509605408, 0.8875278830528259, 0.8254430890083313, 0.7935630679130554, 0.7451525926589966, 0.7413660287857056, 0.7100833058357239, 0.6822447776794434, 0.6698579788208008, 0.6566630601882935, 0.6481221318244934, 0.6294772028923035, 0.6180083751678467, 0.6074531078338623, 0.5887473821640015, 0.5844688415527344, 0.5814679265022278, 0.5611085295677185, 0.5703280568122864, 0.5649069547653198, 0.5285040140151978, 0.5369991064071655, 0.5314703583717346, 0.5256671905517578, 0.5088445544242859, 0.5098876953125, 0.5081262588500977, 0.5043302178382874, 0.48961421847343445, 0.4847744107246399, 0.4876313805580139, 0.46909117698669434, 0.47283026576042175, 0.4645618796348572, 0.45382219552993774, 0.4625686705112457, 0.4419569969177246, 0.4545930027961731, 0.4487777054309845, 0.4377861022949219, 0.4316006004810333, 0.44155409932136536, 0.4234057664871216, 0.42587724328041077, 0.4184471070766449, 0.4229128956794739, 0.4097493290901184, 0.40753206610679626, 0.40214890241622925, 0.4053112864494324, 0.3994632661342621, 0.39116352796554565, 0.389688640832901, 0.38965827226638794, 0.39356258511543274, 0.3810071051120758, 0.38118740916252136, 0.380344033241272, 0.3784145414829254], "accuracy": [0.2650904655456543, 0.5128780603408813, 0.5959582328796387, 0.6491876840591431, 0.6793025732040405, 0.6984546184539795, 0.7080966830253601, 0.7264562249183655, 0.7290979027748108, 0.7360982894897461, 0.7485140562057495, 0.7494386434555054, 0.7617223858833313, 0.7597411274909973, 0.767401933670044, 0.7707040309906006, 0.7765156626701355, 0.7835160493850708, 0.7901201844215393, 0.7840443849563599, 0.7985734939575195, 0.7893276810646057, 0.7944789528846741, 0.811649739742279, 0.8053097128868103, 0.8090080618858337, 0.8076872229576111, 0.8152159452438354, 0.8171972036361694, 0.8178576231002808, 0.8201030492782593, 0.8210275769233704, 0.8252542614936829, 0.824329674243927, 0.828292191028595, 0.8304054737091064, 0.83119797706604, 0.834632158279419, 0.8323867321014404, 0.8446704745292664, 0.8352925777435303, 0.8376700282096863, 0.8426892161369324, 0.8444063067436218, 0.8356888294219971, 0.8457271456718445, 0.8457271456718445, 0.8477083444595337, 0.8455950617790222, 0.8539162874221802, 0.8564258217811584, 0.8516708612442017, 0.852859616279602, 0.8574824929237366, 0.8593316674232483, 0.8614450097084045, 0.8632941246032715, 0.8625016212463379, 0.8648791313171387, 0.8605204224586487, 0.8636903762817383, 0.8610487580299377], "val_loss": [1.9228678941726685, 1.089785099029541, 0.9341601729393005, 0.7800344228744507, 0.7086709141731262, 0.7237063646316528, 0.7011112570762634, 0.6559025049209595, 0.6291980147361755, 0.6136966347694397, 0.613156259059906, 0.5888170003890991, 0.5744238495826721, 0.5762109160423279, 0.5791552066802979, 0.5566787123680115, 0.5363782048225403, 0.5252588987350464, 0.5458177328109741, 0.5314568877220154, 0.537348747253418, 0.5234897136688232, 0.5025835633277893, 0.4890953302383423, 0.531762957572937, 0.47910770773887634, 0.4853447377681732, 0.48153650760650635, 0.47547173500061035, 0.4875238537788391, 0.4595227837562561, 0.4601745903491974, 0.459708571434021, 0.456754595041275, 0.45612844824790955, 0.44704121351242065, 0.4414210915565491, 0.44161954522132874, 0.4301249086856842, 0.44000592827796936, 0.462921679019928, 0.4228804409503937, 0.42475736141204834, 0.4500460922718048, 0.43111780285835266, 0.4239799678325653, 0.4259759783744812, 0.44268423318862915, 0.408742219209671, 0.411380410194397, 0.40919408202171326, 0.41187727451324463, 0.4115472137928009, 0.41495439410209656, 0.4073443114757538, 0.401023268699646, 0.396686851978302, 0.3950352370738983, 0.3948306441307068, 0.4086785912513733, 0.41212549805641174, 0.3950185477733612], "val_accuracy": [0.574999988079071, 0.6520000100135803, 0.671999990940094, 0.6996666789054871, 0.7400000095367432, 0.7223333120346069, 0.731333315372467, 0.7406666874885559, 0.7639999985694885, 0.7670000195503235, 0.7586666941642761, 0.7563333511352539, 0.7763333320617676, 0.7746666669845581, 0.762666642665863, 0.7850000262260437, 0.7929999828338623, 0.7996666431427002, 0.7836666703224182, 0.7806666493415833, 0.7833333611488342, 0.7889999747276306, 0.812666654586792, 0.8083333373069763, 0.7806666493415833, 0.812333345413208, 0.812333345413208, 0.8149999976158142, 0.8109999895095825, 0.8069999814033508, 0.8243333101272583, 0.8256666660308838, 0.8220000267028809, 0.8246666789054871, 0.8183333277702332, 0.831333339214325, 0.8246666789054871, 0.8216666579246521, 0.8360000252723694, 0.8320000171661377, 0.8173333406448364, 0.8379999995231628, 0.8423333168029785, 0.8166666626930237, 0.843999981880188, 0.8299999833106995, 0.8429999947547913, 0.8270000219345093, 0.8446666598320007, 0.8423333168029785, 0.840666651725769, 0.843999981880188, 0.8446666598320007, 0.8496666550636292, 0.8506666421890259, 0.8536666631698608, 0.856333315372467, 0.8529999852180481, 0.8476666808128357, 0.8346666693687439, 0.840666651725769, 0.8523333072662354]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 4, 1, 4, 5], [2, 1, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 0, 6, 3, 8, 5, 3, 6], [2, 4, 3, 1, 0, 3], [21, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 2, 9], [0, 1, 1, 4], [0, 65], [1], [0], [5], [0]], "fitness": -0.12228571623563766, "mapping_values": [1, 2, 1, 1, 0, 15, 9, 6, 1, 7, 4, 3, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(grad), tf.math.square(tf.math.multiply(grad, alpha))), tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), alpha), alpha), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3690617084503174, 2.280700922012329, 2.3883707523345947, 2.8278489112854004, 2.3148303031921387, 2.304210662841797], "accuracy": [0.2114647924900055, 0.15295206010341644, 0.2509576082229614, 0.23378682136535645, 0.10038304328918457, 0.09866596013307571], "val_loss": [2.2883505821228027, 2.324618101119995, 2.31643009185791, 2.351250410079956, 2.304548740386963, 2.3028526306152344], "val_accuracy": [0.12466666847467422, 0.0989999994635582, 0.11800000071525574, 0.10400000214576721, 0.0989999994635582, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [7, 2, 3, 4, 3, 5, 8], [0, 0, 1, 0, 2, 2], [37, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [2, 1, 4, 4, 0, 8, 5, 6], [2, 2, 0, 4, 0, 4, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 4, 4], [12], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 3, 12, 7, 5, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.pow(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.pow(beta, tf.math.pow(tf.math.negative(tf.math.sqrt(beta)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.square(grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [3, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 5, 3, 1], [16, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [7, 3, 0, 2, 7, 8, 6, 5, 7, 5, 0], [0, 1, 5, 4, 5, 3, 3], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 12, 7, 5, 1, 18, 11, 7, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(grad, tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.square(alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, beta), tf.math.pow(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(grad)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.divide_no_nan(tf.math.square(tf.math.add(grad, tf.math.square(grad))), tf.math.negative(sigma))))), sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3440.82666015625, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2082948088645935, 0.1002509593963623, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [337265.0625, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 2, 2, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [4, 2, 4, 4, 0, 5, 5, 4], [2, 0, 3, 1, 0, 4], [16, 1], [0, 1, 1, 1], [0, 7], [0, 1, 1, 4], [0], [0, 0, 1, 1], [0, 6], [1, 0], [0]], "fitness": -0.09228571504354477, "mapping_values": [1, 1, 0, 1, 1, 14, 8, 6, 2, 2, 1, 1, 1, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.negative(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.pow(grad, alpha)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.309951066970825, 2.309455156326294, 2.309443235397339, 2.309840440750122, 2.3099234104156494, 2.3103108406066895], "accuracy": [0.09166556596755981, 0.09140139818191528, 0.08902391046285629, 0.09351472556591034, 0.09259014576673508, 0.09351472556591034], "val_loss": [2.308488368988037, 2.308488368988037, 2.308488368988037, 2.308488368988037, 2.308488368988037, 2.308488368988037], "val_accuracy": [0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654, 0.08933333307504654]}}]