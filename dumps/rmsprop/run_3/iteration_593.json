[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.8799999952316284, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1141276359558105, 1.2854799032211304, 0.9006161093711853, 0.7477179765701294, 0.6510568261146545, 0.5984578132629395, 0.5449386835098267, 0.5192564129829407, 0.49348098039627075, 0.47485414147377014, 0.4514867067337036, 0.4315846562385559, 0.41725119948387146, 0.4095759689807892, 0.39079174399375916, 0.37796324491500854, 0.3730018436908722, 0.34559786319732666, 0.3457213044166565, 0.33971261978149414, 0.32669469714164734, 0.33221715688705444, 0.31436437368392944, 0.3045427203178406, 0.2912495732307434, 0.2893770635128021, 0.27459776401519775, 0.2686750888824463, 0.2542434632778168, 0.2549207806587219, 0.2474549114704132, 0.2353166937828064, 0.2352210432291031, 0.22608718276023865, 0.22045324742794037, 0.20817507803440094, 0.2066163569688797], "accuracy": [0.28305375576019287, 0.5893540978431702, 0.6744155287742615, 0.7111346125602722, 0.7512878179550171, 0.7707040309906006, 0.7977809906005859, 0.800290584564209, 0.809140145778656, 0.8215559124946594, 0.8251221776008606, 0.8404437899589539, 0.8430854678153992, 0.8466516733169556, 0.8516708612442017, 0.8599920868873596, 0.8569541573524475, 0.8720116019248962, 0.8710870146751404, 0.8747853636741638, 0.8794082403182983, 0.8767666220664978, 0.8767666220664978, 0.8842953443527222, 0.8881257176399231, 0.8898428082466125, 0.8967111110687256, 0.9005415439605713, 0.9041078090667725, 0.9027869701385498, 0.9063531756401062, 0.9140139818191528, 0.9075419306755066, 0.9121648669242859, 0.9148064851760864, 0.9215427041053772, 0.9204860925674438], "val_loss": [1.0718753337860107, 0.8780998587608337, 0.6786661148071289, 0.5667974352836609, 0.5274632573127747, 0.4778060019016266, 0.45099446177482605, 0.4290582537651062, 0.41114670038223267, 0.3994693160057068, 0.38328856229782104, 0.3767406940460205, 0.36145931482315063, 0.35313984751701355, 0.3477644920349121, 0.34594792127609253, 0.3332073390483856, 0.32470929622650146, 0.33242690563201904, 0.33648940920829773, 0.3233390152454376, 0.32466185092926025, 0.31876254081726074, 0.3112848997116089, 0.3022047281265259, 0.30465394258499146, 0.2995307147502899, 0.30256974697113037, 0.29729926586151123, 0.30382657051086426, 0.2972928583621979, 0.2895248532295227, 0.29739728569984436, 0.29269400238990784, 0.29641813039779663, 0.2925165593624115, 0.30343908071517944], "val_accuracy": [0.6579999923706055, 0.6980000138282776, 0.7276666760444641, 0.7646666765213013, 0.7836666703224182, 0.8066666722297668, 0.8233333230018616, 0.8339999914169312, 0.8450000286102295, 0.8503333330154419, 0.8533333539962769, 0.8576666712760925, 0.8619999885559082, 0.8633333444595337, 0.8700000047683716, 0.871999979019165, 0.871999979019165, 0.8806666731834412, 0.8736666440963745, 0.8786666393280029, 0.8806666731834412, 0.878000020980835, 0.8840000033378601, 0.8853333592414856, 0.8893333077430725, 0.8913333415985107, 0.8896666765213013, 0.8886666893959045, 0.893666684627533, 0.8939999938011169, 0.8966666460037231, 0.8976666927337646, 0.8926666378974915, 0.8946666717529297, 0.8923333287239075, 0.8963333368301392, 0.890333354473114]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 3], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [3, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.8725714087486267, "mapping_values": [1, 10, 5, 5, 3, 13, 7, 6, 2, 8, 4, 4, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(sigma), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1094141006469727, 1.166180968284607, 0.7970390319824219, 0.6880330443382263, 0.612001895904541, 0.5638247132301331, 0.5340964794158936, 0.4998345375061035, 0.4692866802215576, 0.45501282811164856, 0.4248148202896118, 0.40900421142578125, 0.3871021866798401, 0.3795493245124817, 0.3778091073036194, 0.36698055267333984, 0.3446512520313263, 0.3277471661567688, 0.3169277310371399, 0.30800968408584595, 0.3028268814086914, 0.29743415117263794, 0.2854578495025635, 0.27862364053726196, 0.26835790276527405, 0.2617548704147339, 0.2476942539215088, 0.2437409609556198, 0.24785488843917847, 0.23177841305732727, 0.2288423627614975, 0.21998772025108337, 0.21795940399169922, 0.21608129143714905], "accuracy": [0.28041210770606995, 0.5964865684509277, 0.693831741809845, 0.7351737022399902, 0.7676661014556885, 0.7837802171707153, 0.7952714562416077, 0.8086118102073669, 0.8206313848495483, 0.8245938420295715, 0.8412362933158875, 0.846387505531311, 0.8562937378883362, 0.859199583530426, 0.8574824929237366, 0.8644828796386719, 0.8728041052818298, 0.8722757697105408, 0.8805969953536987, 0.8825782537460327, 0.8845595121383667, 0.8873332738876343, 0.8902390599250793, 0.8957865834236145, 0.8982961177825928, 0.89988112449646, 0.9050323367118835, 0.9063531756401062, 0.9026548862457275, 0.9054285883903503, 0.9099194407463074, 0.9104477763175964, 0.9146744012832642, 0.9185048341751099], "val_loss": [1.1939905881881714, 0.8016927242279053, 0.6979275941848755, 0.6220192313194275, 0.5672345757484436, 0.5437936186790466, 0.5193568468093872, 0.48769092559814453, 0.4771762788295746, 0.4452601671218872, 0.44951021671295166, 0.4374969005584717, 0.4124763309955597, 0.42337650060653687, 0.41610750555992126, 0.4156053960323334, 0.39783215522766113, 0.3973987102508545, 0.3985947370529175, 0.4078928232192993, 0.4058142900466919, 0.3962145149707794, 0.3930354714393616, 0.40040284395217896, 0.41013431549072266, 0.38727229833602905, 0.400475412607193, 0.39629462361335754, 0.388780802488327, 0.40966272354125977, 0.39821264147758484, 0.3997836410999298, 0.4134466052055359, 0.3970024883747101], "val_accuracy": [0.6150000095367432, 0.6926666498184204, 0.7260000109672546, 0.7586666941642761, 0.7883333563804626, 0.7976666688919067, 0.7979999780654907, 0.815666675567627, 0.8353333473205566, 0.8460000157356262, 0.8446666598320007, 0.8503333330154419, 0.8576666712760925, 0.8506666421890259, 0.856333315372467, 0.8556666374206543, 0.8603333234786987, 0.8629999756813049, 0.8646666407585144, 0.8646666407585144, 0.8646666407585144, 0.8616666793823242, 0.8730000257492065, 0.871666669845581, 0.8686666488647461, 0.8709999918937683, 0.8700000047683716, 0.875333309173584, 0.8759999871253967, 0.8733333349227905, 0.8756666779518127, 0.8693333268165588, 0.8743333220481873, 0.875333309173584]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8008571267127991, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2072551250457764, 1.5980302095413208, 1.1316674947738647, 0.9974631667137146, 0.8843502998352051, 0.8224491477012634, 0.8006821274757385, 0.7477297186851501, 0.7121195793151855, 0.6897913217544556, 0.6986885666847229, 0.6824920773506165, 0.6546173691749573, 0.6248078942298889, 0.6172398328781128, 0.5974892377853394, 0.5970712900161743, 0.5862352252006531, 0.5711582899093628, 0.5710814595222473, 0.5614364743232727, 0.5544166564941406, 0.5487198829650879, 0.5321170687675476, 0.5302629470825195, 0.5182145237922668, 0.5043458938598633, 0.5036023259162903, 0.5015356540679932, 0.48913004994392395, 0.4838073253631592, 0.479573518037796, 0.48690447211265564, 0.4784645140171051, 0.45583438873291016], "accuracy": [0.26720380783081055, 0.5056135058403015, 0.6106194853782654, 0.6456214785575867, 0.6775855422019958, 0.7063795924186707, 0.7096816897392273, 0.7215691208839417, 0.7388719916343689, 0.7479857206344604, 0.7434949278831482, 0.7427024245262146, 0.7573636174201965, 0.7685906887054443, 0.7724210619926453, 0.7758552432060242, 0.7815347909927368, 0.7815347909927368, 0.7829877138137817, 0.7895918488502502, 0.7860256433486938, 0.796328067779541, 0.7950072884559631, 0.8010830879211426, 0.8057059645652771, 0.8087438941001892, 0.8125742673873901, 0.8149517774581909, 0.8132346868515015, 0.8206313848495483, 0.8235371708869934, 0.8255184292793274, 0.8191784620285034, 0.8232730031013489, 0.8322546482086182], "val_loss": [1.9171533584594727, 1.1170114278793335, 1.0187500715255737, 0.8671841025352478, 0.8009213209152222, 0.7565298080444336, 0.7414354085922241, 0.6876752376556396, 0.6623809933662415, 0.6477106213569641, 0.646020770072937, 0.6448721289634705, 0.6249750852584839, 0.5927312970161438, 0.6242793202400208, 0.5966404676437378, 0.5674414038658142, 0.5534921288490295, 0.5869666337966919, 0.5398890376091003, 0.5493552088737488, 0.5340898633003235, 0.5332066416740417, 0.5213109254837036, 0.5166789293289185, 0.5134610533714294, 0.5032130479812622, 0.5034313201904297, 0.4958820939064026, 0.48818591237068176, 0.4785834848880768, 0.4867236614227295, 0.4894076883792877, 0.48009341955184937, 0.47189104557037354], "val_accuracy": [0.518666684627533, 0.6539999842643738, 0.6306666731834412, 0.6756666898727417, 0.7096666693687439, 0.7173333168029785, 0.7256666421890259, 0.7316666841506958, 0.7546666860580444, 0.7646666765213013, 0.7639999985694885, 0.7586666941642761, 0.7606666684150696, 0.7693333625793457, 0.750333309173584, 0.7756666541099548, 0.7846666574478149, 0.7953333258628845, 0.7639999985694885, 0.8023333549499512, 0.800000011920929, 0.8063333630561829, 0.8046666383743286, 0.8073333501815796, 0.8159999847412109, 0.8173333406448364, 0.8259999752044678, 0.8183333277702332, 0.8243333101272583, 0.8320000171661377, 0.8316666483879089, 0.8273333311080933, 0.8196666836738586, 0.8259999752044678, 0.8236666917800903]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 5, 0, 2, 5], [0, 0, 2, 0, 2], [28, 96, 40], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [2, 2, 2, 6, 3, 5, 5, 4], [2, 2, 1, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 2, 0, 3], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 2, 13, 7, 6, 1, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(alpha)), grad)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.30338716506958, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 1, 3, 5], [0, 0, 1, 0, 2], [92, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [2, 2, 4, 6, 3, 5, 5, 4, 8], [2, 2, 3, 4, 0, 3, 1], [16, 1], [0, 0, 1, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [4], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 6, 4, 3, 16, 9, 7, 1, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(grad, grad))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad), tf.math.sqrt(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), tf.math.negative(alpha)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [3.1704370975494385, 2.3807787895202637, 2.3078508377075195, 2.2831718921661377, 2.303997755050659, 2.3038904666900635], "accuracy": [0.18597279489040375, 0.14951789379119873, 0.11821424216032028, 0.11557257920503616, 0.09615638852119446, 0.09893012791872025], "val_loss": [2.322570562362671, 2.3181328773498535, 2.298325777053833, 2.303701877593994, 2.3030099868774414, 2.302615165710449], "val_accuracy": [0.10233332961797714, 0.0989999994635582, 0.0963333323597908, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 3, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 2], [16, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [7, 3, 0, 3, 3, 2, 3, 8], [0, 1, 1, 2, 2, 7, 7], [0], [1], [0], [0], [0]], "fitness": -0.09399999678134918, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 15, 8, 7, 1, 1, 0, 1, 1], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.multiply(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), alpha), tf.math.multiply(beta, tf.math.add(tf.math.multiply(beta, tf.math.sqrt(grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.309453248977661, 2.3104538917541504, 2.310499668121338, 2.3100647926330566, 2.309694766998291, 2.3100392818450928], "accuracy": [0.09272222965955734, 0.08981640636920929, 0.08809932321310043, 0.09008057415485382, 0.09311848133802414, 0.08796724677085876], "val_loss": [2.3089306354522705, 2.3089306354522705, 2.3089306354522705, 2.3089306354522705, 2.3089306354522705, 2.3089306354522705], "val_accuracy": [0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024]}}]