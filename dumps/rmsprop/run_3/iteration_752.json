[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8808571696281433, "mapping_values": [1, 10, 5, 5, 3, 14, 8, 6, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1058011054992676, 1.1498116254806519, 0.8304385542869568, 0.7203441262245178, 0.6393402218818665, 0.5854113698005676, 0.5511501431465149, 0.5187006592750549, 0.505515992641449, 0.4818469285964966, 0.4484843909740448, 0.43561360239982605, 0.42612436413764954, 0.41596850752830505, 0.39672064781188965, 0.3839366137981415, 0.3636326789855957, 0.3521239161491394, 0.33775001764297485, 0.31625643372535706, 0.31688356399536133, 0.30882248282432556, 0.3001636564731598, 0.2953629493713379, 0.2911835014820099, 0.28392574191093445, 0.2676911950111389, 0.2642957866191864, 0.2519010007381439, 0.2429644614458084, 0.23603840172290802, 0.2455616593360901, 0.23240527510643005], "accuracy": [0.2879408299922943, 0.5983357429504395, 0.6905296444892883, 0.722229540348053, 0.7576277852058411, 0.7792893648147583, 0.7957997918128967, 0.8074230551719666, 0.8117818236351013, 0.8165367841720581, 0.834632158279419, 0.8391229510307312, 0.843481719493866, 0.8438779711723328, 0.8529917001724243, 0.8560295701026917, 0.8659358024597168, 0.869502067565918, 0.873860776424408, 0.8791441321372986, 0.8835028409957886, 0.8838990926742554, 0.8858803510665894, 0.8910315632820129, 0.8918240666389465, 0.8916919827461243, 0.8990886211395264, 0.8993527889251709, 0.9051644206047058, 0.909259021282196, 0.9103156924247742, 0.904768168926239, 0.913089394569397], "val_loss": [1.0690844058990479, 0.7267204523086548, 0.6630074977874756, 0.5851247310638428, 0.5488004684448242, 0.5154633522033691, 0.48644670844078064, 0.4733087122440338, 0.46183642745018005, 0.4481644630432129, 0.4221508502960205, 0.41604873538017273, 0.4122338891029358, 0.4024076461791992, 0.39266952872276306, 0.3885684907436371, 0.38248133659362793, 0.3724929988384247, 0.3723068833351135, 0.36633822321891785, 0.3746758699417114, 0.36198416352272034, 0.3594156801700592, 0.37187516689300537, 0.3668769896030426, 0.34963202476501465, 0.35778117179870605, 0.35199210047721863, 0.35453882813453674, 0.364315927028656, 0.35359829664230347, 0.36456167697906494, 0.36178097128868103], "val_accuracy": [0.6523333191871643, 0.7213333249092102, 0.7549999952316284, 0.7713333368301392, 0.7846666574478149, 0.8059999942779541, 0.812666654586792, 0.8153333067893982, 0.824999988079071, 0.8309999704360962, 0.8420000076293945, 0.840666651725769, 0.8456666469573975, 0.8510000109672546, 0.8556666374206543, 0.859000027179718, 0.8543333411216736, 0.8636666536331177, 0.8653333187103271, 0.8636666536331177, 0.8576666712760925, 0.8669999837875366, 0.8650000095367432, 0.8676666617393494, 0.8683333396911621, 0.8769999742507935, 0.875, 0.8790000081062317, 0.871666669845581, 0.875, 0.8766666650772095, 0.8723333477973938, 0.8743333220481873]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.7860000133514404, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.207554340362549, 1.603297233581543, 1.1351505517959595, 0.9647388458251953, 0.8530523777008057, 0.8212664127349854, 0.7642379403114319, 0.7509070634841919, 0.7057350277900696, 0.6725115776062012, 0.6703705191612244, 0.6461789608001709, 0.6428837776184082, 0.6194646954536438, 0.6124491095542908, 0.5960701107978821], "accuracy": [0.2685246467590332, 0.5013868808746338, 0.6032228469848633, 0.6590939164161682, 0.6984546184539795, 0.7040021419525146, 0.7260599732398987, 0.7187954187393188, 0.7427024245262146, 0.7518161535263062, 0.7535332441329956, 0.7619865536689758, 0.7652885913848877, 0.7712323069572449, 0.7773081660270691, 0.7796856164932251], "val_loss": [1.920598030090332, 1.201874852180481, 0.9061266183853149, 0.7992923259735107, 0.7568358778953552, 0.6999611854553223, 0.6850926876068115, 0.685770571231842, 0.6394394040107727, 0.6448192596435547, 0.5820456147193909, 0.5791049599647522, 0.5885099172592163, 0.5575535297393799, 0.5540750622749329, 0.5749756693840027], "val_accuracy": [0.47999998927116394, 0.5826666951179504, 0.6729999780654907, 0.7133333086967468, 0.7229999899864197, 0.7239999771118164, 0.7193333506584167, 0.7329999804496765, 0.75, 0.7536666393280029, 0.7876666784286499, 0.7703333497047424, 0.7846666574478149, 0.7856666445732117, 0.7766666412353516, 0.7733333110809326]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 2, 3, 8, 3, 5], [0, 0, 1, 1, 0], [0, 39, 39], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2, 2], [2, 0, 0, 4, 0, 3, 1], [18, 45, 21], [1, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 6, 7, 1], [0], [1], [0], [7], [0]], "fitness": -0.3742857277393341, "mapping_values": [1, 9, 5, 4, 2, 12, 7, 5, 3, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.298243761062622, 2.333778142929077, 2.0342140197753906, 2.3975186347961426, 2.2906394004821777, 2.303785562515259, 2.303438663482666], "accuracy": [0.2008981704711914, 0.15057456493377686, 0.2627129852771759, 0.2740721106529236, 0.1344604343175888, 0.09509972482919693, 0.09985470771789551], "val_loss": [2.291565179824829, 2.0898385047912598, 3.1065104007720947, 2.2865893840789795, 2.304243564605713, 2.3028860092163086, 2.3027896881103516], "val_accuracy": [0.2083333283662796, 0.37933334708213806, 0.3009999990463257, 0.12999999523162842, 0.1003333330154419, 0.1003333330154419, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1], [0, 2, 3, 1, 3, 5, 6, 2, 4, 9], [0, 0, 1, 0, 1, 3, 0], [26, 39, 39, 42, 17], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 5, 0, 5, 5, 4], [2, 2, 2, 4, 0, 3, 1], [16, 1], [0, 0, 1, 0, 0, 1, 1, 1], [6, 3, 0, 2], [0, 3, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 10, 7, 5, 10, 6, 4, 0, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(grad, tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(tf.math.square(tf.math.negative(beta)), tf.math.square(beta)), beta), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(sigma, alpha))), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3044021129608154, 2.3055226802825928, 2.305612325668335, 2.3077409267425537, 2.307799816131592, 2.3063018321990967, 2.3070499897003174, 2.3077428340911865, 2.306230306625366], "accuracy": [0.09259014576673508, 0.09351472556591034, 0.09972262382507324, 0.0952318087220192, 0.0952318087220192, 0.1002509593963623, 0.10038304328918457, 0.1002509593963623, 0.10011887550354004], "val_loss": [2.302595376968384, 2.3028998374938965, 2.3042256832122803, 2.304781436920166, 2.308821201324463, 2.3080365657806396, 2.306453227996826, 2.3054888248443604, 2.305745840072632], "val_accuracy": [0.1003333330154419, 0.09966666996479034, 0.09866666793823242, 0.10100000351667404, 0.09866666793823242, 0.10100000351667404, 0.09866666793823242, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [3, 9, 3, 1, 3, 5], [0, 0, 2, 0, 2], [26, 39, 39], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 43], [0, 1, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 1, 0, 1, 0, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.negative(alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [28795.748046875, 4386919.5, 75588816.0, 537028672.0, 2361745664.0, 7707436032.0], "accuracy": [0.09774138033390045, 0.09774138033390045, 0.10051512718200684, 0.10302469879388809, 0.09972262382507324, 0.09959053993225098], "val_loss": [305391.84375, 16373202.0, 175573136.0, 956862400.0, 3583612928.0, 10569729024.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 4, 8, 5], [0, 0, 1, 2, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 7, 3, 4, 0, 5, 5, 4, 6, 2, 4, 6, 2, 4, 2, 7, 0, 3, 3, 4, 6, 7, 2, 2, 7, 8, 9, 8, 9, 4, 7, 1, 0, 9, 9, 5, 3, 6, 9, 5, 9, 7, 2], [2, 2, 0, 4, 0, 3, 1, 0, 2, 3, 4, 0, 0, 0, 1, 5, 5, 0, 1, 1, 2, 5, 0], [35, 32, 36, 49, 43, 17, 26, 61, 71, 72, 19, 18, 95, 22], [0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 7, 3, 6, 8], [7, 6, 6, 0], [0, 23], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 66, 43, 23, 14, 9, 5, 4, 1, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(beta, tf.math.pow(tf.math.negative(tf.math.square(tf.math.square(tf.math.pow(tf.math.divide_no_nan(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.divide_no_nan(grad, alpha), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.pow(beta, grad), grad)), tf.math.add(tf.math.add(tf.math.negative(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.sqrt(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), grad)), grad), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(tf.math.subtract(tf.math.negative(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), alpha), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.multiply(tf.math.divide_no_nan(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, beta), grad)))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(grad), grad), grad), tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}]