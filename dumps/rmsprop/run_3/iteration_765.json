[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [2, 9, 4, 7, 0, 5, 5, 4], [1, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8837142586708069, "mapping_values": [1, 10, 5, 5, 3, 12, 8, 4, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1052942276000977, 1.196382761001587, 0.8314899802207947, 0.7147043943405151, 0.6302909255027771, 0.5692504644393921, 0.5221520066261292, 0.5032613277435303, 0.4807533919811249, 0.4511759579181671, 0.43527787923812866, 0.4096868932247162, 0.397103488445282, 0.3862413465976715, 0.36111611127853394, 0.350818932056427, 0.3486778438091278, 0.3429076075553894, 0.3232230544090271, 0.3090643882751465, 0.31197598576545715, 0.3050714433193207, 0.2870331108570099, 0.282348096370697, 0.27071237564086914, 0.26655495166778564, 0.2668570280075073, 0.2539179027080536, 0.24523289501667023], "accuracy": [0.29837536811828613, 0.5847312211990356, 0.6859067678451538, 0.7273808121681213, 0.7601373791694641, 0.7794214487075806, 0.802271842956543, 0.8067626357078552, 0.8183859586715698, 0.8289526104927063, 0.8388587832450867, 0.8451988101005554, 0.8518029451370239, 0.8578787446022034, 0.8622375130653381, 0.8739928603172302, 0.8697662353515625, 0.8708229064941406, 0.878879964351654, 0.8845595121383667, 0.8802007436752319, 0.8837670087814331, 0.8868049383163452, 0.8952582478523254, 0.9034473896026611, 0.9014661312103271, 0.89552241563797, 0.9021265506744385, 0.9030511379241943], "val_loss": [1.0808992385864258, 0.7787856459617615, 0.688173234462738, 0.6003098487854004, 0.5536212921142578, 0.5124399662017822, 0.49683383107185364, 0.47856128215789795, 0.46877041459083557, 0.4444534480571747, 0.4302023649215698, 0.4150267243385315, 0.4014204144477844, 0.4067032039165497, 0.3947374224662781, 0.4073643088340759, 0.40519216656684875, 0.398570716381073, 0.3763197362422943, 0.3740674555301666, 0.38644686341285706, 0.38683950901031494, 0.3821990489959717, 0.3752228915691376, 0.38204818964004517, 0.3790208399295807, 0.3727281093597412, 0.3777836859226227, 0.3915119767189026], "val_accuracy": [0.6286666393280029, 0.7043333053588867, 0.7336666584014893, 0.7683333158493042, 0.7806666493415833, 0.8009999990463257, 0.8103333115577698, 0.8186666369438171, 0.8256666660308838, 0.8446666598320007, 0.8533333539962769, 0.8516666889190674, 0.8616666793823242, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8610000014305115, 0.8579999804496765, 0.8693333268165588, 0.871666669845581, 0.8700000047683716, 0.8709999918937683, 0.8726666569709778, 0.8776666522026062, 0.8703333139419556, 0.8696666955947876, 0.8723333477973938, 0.8773333430290222, 0.8696666955947876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.824571430683136, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.210714101791382, 1.6103227138519287, 1.1743074655532837, 0.9970359206199646, 0.8935866951942444, 0.8202730417251587, 0.7698596715927124, 0.7731133103370667, 0.7242186665534973, 0.7072511315345764, 0.6919302344322205, 0.6676028370857239, 0.6761847734451294, 0.6515892148017883, 0.6278575658798218, 0.6180548071861267, 0.5965057611465454, 0.6125785708427429, 0.5893486738204956, 0.5765881538391113, 0.5640701651573181, 0.5589604377746582, 0.5501445531845093, 0.5477845668792725, 0.5244277715682983, 0.528695821762085, 0.5324336290359497, 0.5171141624450684, 0.5183419585227966, 0.5020816326141357, 0.4863945245742798, 0.49526622891426086, 0.488433837890625, 0.48175352811813354, 0.485195130109787, 0.477400004863739, 0.4677961766719818, 0.4644180238246918, 0.4590698480606079, 0.4521453082561493, 0.4506065845489502, 0.46145835518836975, 0.44246962666511536, 0.44107499718666077], "accuracy": [0.2689208686351776, 0.500990629196167, 0.5972790718078613, 0.6441685557365417, 0.6832650899887085, 0.7010962963104248, 0.7177387475967407, 0.7136441469192505, 0.7366266250610352, 0.7407211661338806, 0.7478536367416382, 0.7576277852058411, 0.7508915662765503, 0.7629110813140869, 0.7671377658843994, 0.7684586048126221, 0.7802139520645142, 0.7749306559562683, 0.7828556299209595, 0.791441023349762, 0.7938185334205627, 0.7942147850990295, 0.798309326171875, 0.7988376617431641, 0.8109893202781677, 0.8049134612083435, 0.8059701323509216, 0.8103289008140564, 0.8132346868515015, 0.8186501264572144, 0.8252542614936829, 0.8157442808151245, 0.8224804997444153, 0.8234050869941711, 0.8256505131721497, 0.8314621448516846, 0.830669641494751, 0.8302733898162842, 0.8322546482086182, 0.8366134166717529, 0.8387266993522644, 0.8308017253875732, 0.8400475382804871, 0.8389908671379089], "val_loss": [1.9281909465789795, 1.1035021543502808, 0.9440548419952393, 0.8450695872306824, 0.7479060888290405, 0.6972758769989014, 0.70583176612854, 0.6649221181869507, 0.63099604845047, 0.6441612839698792, 0.5972660183906555, 0.5882315039634705, 0.6197633743286133, 0.5707636475563049, 0.5485193133354187, 0.53897625207901, 0.5509721040725708, 0.5439123511314392, 0.5512294173240662, 0.515486478805542, 0.5468464493751526, 0.5374849438667297, 0.5083006024360657, 0.49567875266075134, 0.4985324740409851, 0.4987519383430481, 0.4748072624206543, 0.46822842955589294, 0.48473209142684937, 0.46433132886886597, 0.45455294847488403, 0.47554871439933777, 0.4660627543926239, 0.44927987456321716, 0.4547847807407379, 0.44432082772254944, 0.44339391589164734, 0.4332667589187622, 0.427411288022995, 0.435884028673172, 0.43813639879226685, 0.4251464009284973, 0.44371363520622253, 0.43083035945892334], "val_accuracy": [0.5403333306312561, 0.656000018119812, 0.652999997138977, 0.6740000247955322, 0.7179999947547913, 0.7329999804496765, 0.734666645526886, 0.7363333106040955, 0.7523333430290222, 0.7493333220481873, 0.7820000052452087, 0.7820000052452087, 0.7666666507720947, 0.7873333096504211, 0.7803333401679993, 0.7953333258628845, 0.7846666574478149, 0.7963333129882812, 0.7760000228881836, 0.8083333373069763, 0.7873333096504211, 0.7940000295639038, 0.8023333549499512, 0.8090000152587891, 0.8106666803359985, 0.8040000200271606, 0.8206666707992554, 0.8266666531562805, 0.8146666884422302, 0.8270000219345093, 0.8266666531562805, 0.8230000138282776, 0.828000009059906, 0.8333333134651184, 0.824999988079071, 0.8333333134651184, 0.82833331823349, 0.8443333506584167, 0.8463333249092102, 0.8339999914169312, 0.8333333134651184, 0.8426666855812073, 0.8426666855812073, 0.8393333554267883]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [68, 39, 39], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1], [2, 9, 4, 7, 0, 5, 5, 4], [0, 2, 0, 4, 0, 3, 1], [16, 1, 82], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 5, 4], [0], [1], [0], [1], [0]], "fitness": -0.41600000858306885, "mapping_values": [1, 10, 5, 5, 3, 8, 5, 3, 3, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.6028037071228027, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.27644962072372437, 0.15149913728237152, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [29.192691802978516, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.4059999883174896, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 2, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [2, 9, 4, 7, 0, 2, 5, 3], [2, 0, 3, 3, 0], [16, 1, 25], [0, 0, 1, 0, 0, 1], [0, 7, 2, 9], [0, 6], [0, 94], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 1, 1, 1, 13, 8, 5, 3, 6, 4, 2, 2, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.math.add(tf.math.negative(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(grad, grad)))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [2, 9, 4, 7, 6, 5, 5, 4, 2, 4, 5], [1, 2, 0, 4, 0, 3, 1], [16, 1, 37], [0, 0, 1, 1, 1], [7, 3, 0, 2], [4, 6, 3], [0], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 5, 5, 3, 18, 11, 7, 3, 5, 2, 3, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))), tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.square(alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(grad, grad), sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 8, 3, 1, 6, 5], [0, 0, 1, 2, 2], [26, 48, 39], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 9, 4, 7, 0, 5, 5, 4, 1, 7, 8, 4, 8, 4, 1, 7], [1, 2, 4, 4, 0, 3, 1, 3, 1, 3], [16, 1], [1, 1, 0, 1, 0, 1, 1, 1], [6, 5, 5, 2], [0, 1, 1, 5], [0], [1], [0], [1], [0]], "fitness": -0.08942857384681702, "mapping_values": [1, 7, 4, 3, 2, 26, 16, 10, 2, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(tf.math.negative(tf.math.square(tf.math.square(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.sqrt(beta), tf.math.pow(grad, grad)), tf.math.sqrt(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.subtract(grad, alpha)))), grad)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.311012029647827, 2.309835910797119, 2.309582471847534, 2.3105709552764893, 2.3098347187042236, 2.3114840984344482], "accuracy": [0.08598599582910538, 0.09113723784685135, 0.09192973375320435, 0.08796724677085876, 0.09008057415485382, 0.08968432247638702], "val_loss": [2.309286117553711, 2.309286117553711, 2.309286117553711, 2.309286117553711, 2.309286117553711, 2.309286117553711], "val_accuracy": [0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499]}}]