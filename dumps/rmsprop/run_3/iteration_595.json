[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.8799999952316284, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1141276359558105, 1.2854799032211304, 0.9006161093711853, 0.7477179765701294, 0.6510568261146545, 0.5984578132629395, 0.5449386835098267, 0.5192564129829407, 0.49348098039627075, 0.47485414147377014, 0.4514867067337036, 0.4315846562385559, 0.41725119948387146, 0.4095759689807892, 0.39079174399375916, 0.37796324491500854, 0.3730018436908722, 0.34559786319732666, 0.3457213044166565, 0.33971261978149414, 0.32669469714164734, 0.33221715688705444, 0.31436437368392944, 0.3045427203178406, 0.2912495732307434, 0.2893770635128021, 0.27459776401519775, 0.2686750888824463, 0.2542434632778168, 0.2549207806587219, 0.2474549114704132, 0.2353166937828064, 0.2352210432291031, 0.22608718276023865, 0.22045324742794037, 0.20817507803440094, 0.2066163569688797], "accuracy": [0.28305375576019287, 0.5893540978431702, 0.6744155287742615, 0.7111346125602722, 0.7512878179550171, 0.7707040309906006, 0.7977809906005859, 0.800290584564209, 0.809140145778656, 0.8215559124946594, 0.8251221776008606, 0.8404437899589539, 0.8430854678153992, 0.8466516733169556, 0.8516708612442017, 0.8599920868873596, 0.8569541573524475, 0.8720116019248962, 0.8710870146751404, 0.8747853636741638, 0.8794082403182983, 0.8767666220664978, 0.8767666220664978, 0.8842953443527222, 0.8881257176399231, 0.8898428082466125, 0.8967111110687256, 0.9005415439605713, 0.9041078090667725, 0.9027869701385498, 0.9063531756401062, 0.9140139818191528, 0.9075419306755066, 0.9121648669242859, 0.9148064851760864, 0.9215427041053772, 0.9204860925674438], "val_loss": [1.0718753337860107, 0.8780998587608337, 0.6786661148071289, 0.5667974352836609, 0.5274632573127747, 0.4778060019016266, 0.45099446177482605, 0.4290582537651062, 0.41114670038223267, 0.3994693160057068, 0.38328856229782104, 0.3767406940460205, 0.36145931482315063, 0.35313984751701355, 0.3477644920349121, 0.34594792127609253, 0.3332073390483856, 0.32470929622650146, 0.33242690563201904, 0.33648940920829773, 0.3233390152454376, 0.32466185092926025, 0.31876254081726074, 0.3112848997116089, 0.3022047281265259, 0.30465394258499146, 0.2995307147502899, 0.30256974697113037, 0.29729926586151123, 0.30382657051086426, 0.2972928583621979, 0.2895248532295227, 0.29739728569984436, 0.29269400238990784, 0.29641813039779663, 0.2925165593624115, 0.30343908071517944], "val_accuracy": [0.6579999923706055, 0.6980000138282776, 0.7276666760444641, 0.7646666765213013, 0.7836666703224182, 0.8066666722297668, 0.8233333230018616, 0.8339999914169312, 0.8450000286102295, 0.8503333330154419, 0.8533333539962769, 0.8576666712760925, 0.8619999885559082, 0.8633333444595337, 0.8700000047683716, 0.871999979019165, 0.871999979019165, 0.8806666731834412, 0.8736666440963745, 0.8786666393280029, 0.8806666731834412, 0.878000020980835, 0.8840000033378601, 0.8853333592414856, 0.8893333077430725, 0.8913333415985107, 0.8896666765213013, 0.8886666893959045, 0.893666684627533, 0.8939999938011169, 0.8966666460037231, 0.8976666927337646, 0.8926666378974915, 0.8946666717529297, 0.8923333287239075, 0.8963333368301392, 0.890333354473114]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8254285454750061, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.209261417388916, 1.6072458028793335, 1.1671838760375977, 0.9633475542068481, 0.8830052614212036, 0.872387707233429, 0.7894367575645447, 0.7775263786315918, 0.7268301844596863, 0.723684549331665, 0.6844436526298523, 0.6856699585914612, 0.6809874773025513, 0.6484969854354858, 0.6231088638305664, 0.6130490303039551, 0.6193820238113403, 0.5969716906547546, 0.5889285802841187, 0.5894436240196228, 0.5789047479629517, 0.5610519051551819, 0.5368315577507019, 0.5447686314582825, 0.5482283234596252, 0.5361325144767761, 0.5203557014465332, 0.5075722932815552, 0.5028230547904968, 0.5098303556442261, 0.5045037269592285, 0.49031195044517517, 0.4852064847946167, 0.4833369553089142, 0.4720461666584015, 0.4676961600780487], "accuracy": [0.25676923990249634, 0.5011227130889893, 0.5908070206642151, 0.6543388962745667, 0.6807554960250854, 0.681547999382019, 0.715889573097229, 0.71100252866745, 0.7378153204917908, 0.7341170310974121, 0.7483819723129272, 0.7442874312400818, 0.7427024245262146, 0.7598732113838196, 0.7732135653495789, 0.7708360552787781, 0.7721568942070007, 0.780610203742981, 0.7812706232070923, 0.7802139520645142, 0.7857614755630493, 0.7935543656349182, 0.8018755912780762, 0.8004226684570312, 0.7947431206703186, 0.8020076751708984, 0.8132346868515015, 0.8142913579940796, 0.8197067975997925, 0.8198388814926147, 0.8145555257797241, 0.8204993009567261, 0.8220842480659485, 0.8238013386726379, 0.8276317715644836, 0.8252542614936829], "val_loss": [1.91632878780365, 1.1376177072525024, 0.9088701009750366, 0.7856537103652954, 0.7345662713050842, 0.7259562015533447, 0.6675793528556824, 0.6466812491416931, 0.6171438694000244, 0.5915538668632507, 0.5942888855934143, 0.5900743007659912, 0.5928423404693604, 0.5582041144371033, 0.5392128825187683, 0.5695482492446899, 0.5578861236572266, 0.5395407676696777, 0.5198588967323303, 0.5083525776863098, 0.5381978154182434, 0.48531293869018555, 0.49515509605407715, 0.497738242149353, 0.4843728840351105, 0.4675200283527374, 0.4638010263442993, 0.4592640697956085, 0.456665962934494, 0.4835992157459259, 0.4363062381744385, 0.4434238374233246, 0.4432017505168915, 0.4340248107910156, 0.45532238483428955, 0.4297412931919098], "val_accuracy": [0.5703333616256714, 0.5899999737739563, 0.6923333406448364, 0.7229999899864197, 0.7303333282470703, 0.7396666407585144, 0.746999979019165, 0.7713333368301392, 0.784333348274231, 0.781000018119812, 0.7889999747276306, 0.7826666831970215, 0.784333348274231, 0.7963333129882812, 0.809333324432373, 0.7916666865348816, 0.7960000038146973, 0.7986666560173035, 0.809333324432373, 0.8096666932106018, 0.7979999780654907, 0.8296666741371155, 0.8169999718666077, 0.8140000104904175, 0.8246666789054871, 0.8316666483879089, 0.8423333168029785, 0.8326666951179504, 0.8389999866485596, 0.8206666707992554, 0.8489999771118164, 0.840666651725769, 0.8399999737739563, 0.8446666598320007, 0.8309999704360962, 0.8489999771118164]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4, 1, 2, 6, 2, 1, 9, 2, 3, 6, 2], [2, 2, 3, 2, 0, 3, 1, 4, 3, 5, 5, 0, 1, 2, 2], [16, 1, 12], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.10342857241630554, "mapping_values": [1, 11, 6, 5, 3, 33, 18, 15, 3, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(grad, beta))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, grad)), grad), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(grad, tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, beta))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.7218313217163086, 2.9873452186584473, 3422482176.0, NaN, NaN, NaN, NaN], "accuracy": [0.2020869106054306, 0.10249637067317963, 0.10976093262434006, 0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.394618511199951, 2.3485419750213623, 1.4511852980270944e+29, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.10266666859388351, 0.06433333456516266, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 2, 1, 1, 3, 5], [0, 0, 1, 0, 2], [26, 14, 39], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [4, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [82, 35], [0, 0, 0, 1, 0, 1, 1, 1, 0], [7, 3, 1, 3, 9], [0, 1, 1, 2], [0, 34], [1], [0], [3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 1, 0, 1, 0, 9, 5, 4, 2, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, alpha)), beta), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [3476595.0, 519068352.0, 8717487104.0, 61887332352.0, 272383295488.0, 897087045632.0], "accuracy": [0.09391097724437714, 0.09998679161071777, 0.10157178342342377, 0.09998679161071777, 0.09787346422672272, 0.1018359512090683], "val_loss": [34547852.0, 1860779904.0, 19969224704.0, 108859875328.0, 407751393280.0, 1202734366720.0], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 2, 3, 1, 3, 5, 1], [0, 0, 1, 0, 2, 0], [26, 39, 45, 65], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 4, 9, 3, 5, 2, 4], [2, 4, 0, 4, 0, 3, 1], [16, 65, 83], [0, 0, 0, 1, 0, 1, 1, 0, 1], [2, 3, 0, 3, 8], [4, 1, 1, 2], [0], [1], [0], [6], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 4, 5, 2, 3, 1, 9, 5, 4, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.math.subtract(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), grad)), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(grad), tf.math.multiply(alpha, alpha)), tf.math.sqrt(beta)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [10.14065933227539, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.19640734791755676, 0.09509972482919693, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [106.58533477783203, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.005333333276212215, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2, 3], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [9, 3, 0, 3], [4, 1, 1, 3], [57], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 5, 6, 3, 15, 8, 7, 2, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09113723784685135, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}]