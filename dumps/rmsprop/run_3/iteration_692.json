[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8808571696281433, "mapping_values": [1, 10, 5, 5, 3, 14, 8, 6, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1058011054992676, 1.1498116254806519, 0.8304385542869568, 0.7203441262245178, 0.6393402218818665, 0.5854113698005676, 0.5511501431465149, 0.5187006592750549, 0.505515992641449, 0.4818469285964966, 0.4484843909740448, 0.43561360239982605, 0.42612436413764954, 0.41596850752830505, 0.39672064781188965, 0.3839366137981415, 0.3636326789855957, 0.3521239161491394, 0.33775001764297485, 0.31625643372535706, 0.31688356399536133, 0.30882248282432556, 0.3001636564731598, 0.2953629493713379, 0.2911835014820099, 0.28392574191093445, 0.2676911950111389, 0.2642957866191864, 0.2519010007381439, 0.2429644614458084, 0.23603840172290802, 0.2455616593360901, 0.23240527510643005], "accuracy": [0.2879408299922943, 0.5983357429504395, 0.6905296444892883, 0.722229540348053, 0.7576277852058411, 0.7792893648147583, 0.7957997918128967, 0.8074230551719666, 0.8117818236351013, 0.8165367841720581, 0.834632158279419, 0.8391229510307312, 0.843481719493866, 0.8438779711723328, 0.8529917001724243, 0.8560295701026917, 0.8659358024597168, 0.869502067565918, 0.873860776424408, 0.8791441321372986, 0.8835028409957886, 0.8838990926742554, 0.8858803510665894, 0.8910315632820129, 0.8918240666389465, 0.8916919827461243, 0.8990886211395264, 0.8993527889251709, 0.9051644206047058, 0.909259021282196, 0.9103156924247742, 0.904768168926239, 0.913089394569397], "val_loss": [1.0690844058990479, 0.7267204523086548, 0.6630074977874756, 0.5851247310638428, 0.5488004684448242, 0.5154633522033691, 0.48644670844078064, 0.4733087122440338, 0.46183642745018005, 0.4481644630432129, 0.4221508502960205, 0.41604873538017273, 0.4122338891029358, 0.4024076461791992, 0.39266952872276306, 0.3885684907436371, 0.38248133659362793, 0.3724929988384247, 0.3723068833351135, 0.36633822321891785, 0.3746758699417114, 0.36198416352272034, 0.3594156801700592, 0.37187516689300537, 0.3668769896030426, 0.34963202476501465, 0.35778117179870605, 0.35199210047721863, 0.35453882813453674, 0.364315927028656, 0.35359829664230347, 0.36456167697906494, 0.36178097128868103], "val_accuracy": [0.6523333191871643, 0.7213333249092102, 0.7549999952316284, 0.7713333368301392, 0.7846666574478149, 0.8059999942779541, 0.812666654586792, 0.8153333067893982, 0.824999988079071, 0.8309999704360962, 0.8420000076293945, 0.840666651725769, 0.8456666469573975, 0.8510000109672546, 0.8556666374206543, 0.859000027179718, 0.8543333411216736, 0.8636666536331177, 0.8653333187103271, 0.8636666536331177, 0.8576666712760925, 0.8669999837875366, 0.8650000095367432, 0.8676666617393494, 0.8683333396911621, 0.8769999742507935, 0.875, 0.8790000081062317, 0.871666669845581, 0.875, 0.8766666650772095, 0.8723333477973938, 0.8743333220481873]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.7765714526176453, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2088918685913086, 1.595829963684082, 1.1508400440216064, 0.9479091167449951, 0.8985331058502197, 0.8378686308860779, 0.7697660326957703, 0.7445434927940369, 0.7449284195899963, 0.687682569026947, 0.6935930848121643, 0.6681698560714722, 0.642872154712677, 0.6401124596595764], "accuracy": [0.27327960729599, 0.5028398036956787, 0.5979394912719727, 0.6601505875587463, 0.6757363677024841, 0.6929071545600891, 0.7173424959182739, 0.7213049530982971, 0.7185312509536743, 0.7388719916343689, 0.7339849472045898, 0.750759482383728, 0.7622507214546204, 0.7593448758125305], "val_loss": [1.910758137702942, 1.1220663785934448, 0.9026355743408203, 0.7872006893157959, 0.7131277918815613, 0.7129340767860413, 0.6491979360580444, 0.6679227948188782, 0.6099309325218201, 0.6267350912094116, 0.6004766821861267, 0.6306689381599426, 0.6168497204780579, 0.578909158706665], "val_accuracy": [0.5740000009536743, 0.6576666831970215, 0.671999990940094, 0.7139999866485596, 0.7456666827201843, 0.7263333201408386, 0.7573333382606506, 0.7493333220481873, 0.7866666913032532, 0.7789999842643738, 0.7706666588783264, 0.7599999904632568, 0.7493333220481873, 0.7770000100135803]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 1, 1, 0, 2], [26, 11, 39], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1], [1, 2, 4, 4, 0, 5, 5, 4, 2, 8, 2, 8, 8, 6, 9, 2], [2, 2, 0, 4, 0, 3, 1, 3, 0], [16, 1, 30, 74], [0, 0, 0, 1, 0, 1, 1, 1], [7, 9, 0, 2], [0, 1, 1, 4], [0, 11], [1], [0], [1], [0]], "fitness": -0.11571428924798965, "mapping_values": [1, 11, 6, 5, 2, 25, 16, 9, 4, 4, 3, 1, 2, 1, 0, 1, 0], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), alpha), tf.math.multiply(tf.math.square(alpha), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.negative(tf.math.square(tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), tf.math.add(tf.math.sqrt(alpha), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [5.681519508361816, 3.1870369911193848, 2.837397575378418, 2.4944581985473633, 2.510383129119873, 2.6455790996551514], "accuracy": [0.21001188457012177, 0.108440101146698, 0.10249637067317963, 0.10817593336105347, 0.10196803510189056, 0.1002509593963623], "val_loss": [2.432673215866089, 2.845780611038208, 2.6495866775512695, 2.7471911907196045, 2.5162830352783203, 2.572183609008789], "val_accuracy": [0.11766666918992996, 0.0963333323597908, 0.1003333330154419, 0.10100000351667404, 0.09799999743700027, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 8, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 5], [2, 0, 4, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 7, 2, 1, 4, 7, 5, 7, 5, 7, 8, 4, 5, 0, 4, 3, 4, 4, 4, 6, 2], [0, 1, 1, 4, 4, 2, 5, 5, 2, 6, 3, 7, 5, 6, 4, 3], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 4, 3, 2, 5, 3, 2, 1, 37, 21, 16, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.pow(alpha, grad))), tf.math.add(tf.math.square(tf.math.add(tf.math.square(tf.math.add(grad, tf.math.sqrt(tf.math.pow(tf.math.square(beta), tf.math.negative(tf.math.pow(grad, grad)))))), tf.math.multiply(beta, tf.math.pow(tf.math.pow(tf.math.pow(grad, sigma), grad), tf.math.divide_no_nan(grad, grad))))), tf.math.add(grad, sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3034420013427734, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [9, 9, 3, 1, 3, 5], [0, 0, 1, 0, 1], [26, 39, 38], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 2, 4, 2, 0, 5, 5, 4, 6], [0, 2, 0, 4, 0, 3, 1], [82, 30, 90], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [7, 3, 0, 2, 2, 2, 5, 4, 5, 4, 4, 5, 3, 8, 1], [3, 1, 1, 4, 6, 6, 6, 1, 7, 6, 2], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 16, 9, 7, 3, 26, 15, 11, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad)))), tf.math.divide_no_nan(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(sigma, alpha), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.square(grad), grad))))), grad), tf.math.pow(tf.math.pow(grad, tf.math.square(alpha)), tf.math.multiply(grad, tf.math.sqrt(tf.math.subtract(grad, beta))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [29234.501953125, 4411409.5, 76352816.0, 540683968.0, 2357545728.0, 7726784000.0], "accuracy": [0.09972262382507324, 0.09747721254825592, 0.09879804402589798, 0.09509972482919693, 0.10276053100824356, 0.1014397069811821], "val_loss": [307870.34375, 16507970.0, 177021456.0, 964762432.0, 3613206016.0, 10657029120.0], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 4, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 2, 5, 6, 3, 6, 2, 6], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [7, 3, 0, 2, 5, 5, 6, 8, 2, 2, 2, 0, 8, 1], [0, 6, 5, 2, 4, 3, 3, 7, 1], [0], [1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 6, 3, 3, 2, 2, 1, 1, 0, 23, 14, 9, 1, 1, 0, 1, 0], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), tf.math.negative(tf.math.add(grad, tf.math.square(tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(tf.math.negative(beta), tf.math.sqrt(tf.math.subtract(grad, sigma))), sigma), grad)), alpha)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3095431327819824, 2.3099594116210938, 2.3100664615631104, 2.3095686435699463, 2.3088643550872803, 2.3104960918426514], "accuracy": [0.09232597798109055, 0.08677849918603897, 0.08558975160121918, 0.09166556596755981, 0.09760929644107819, 0.08955223858356476], "val_loss": [2.3088953495025635, 2.3088953495025635, 2.3088953495025635, 2.3088953495025635, 2.3088953495025635, 2.3088953495025635], "val_accuracy": [0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393]}}]