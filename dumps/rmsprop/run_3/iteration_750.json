[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8808571696281433, "mapping_values": [1, 10, 5, 5, 3, 14, 8, 6, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.pow(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1058011054992676, 1.1498116254806519, 0.8304385542869568, 0.7203441262245178, 0.6393402218818665, 0.5854113698005676, 0.5511501431465149, 0.5187006592750549, 0.505515992641449, 0.4818469285964966, 0.4484843909740448, 0.43561360239982605, 0.42612436413764954, 0.41596850752830505, 0.39672064781188965, 0.3839366137981415, 0.3636326789855957, 0.3521239161491394, 0.33775001764297485, 0.31625643372535706, 0.31688356399536133, 0.30882248282432556, 0.3001636564731598, 0.2953629493713379, 0.2911835014820099, 0.28392574191093445, 0.2676911950111389, 0.2642957866191864, 0.2519010007381439, 0.2429644614458084, 0.23603840172290802, 0.2455616593360901, 0.23240527510643005], "accuracy": [0.2879408299922943, 0.5983357429504395, 0.6905296444892883, 0.722229540348053, 0.7576277852058411, 0.7792893648147583, 0.7957997918128967, 0.8074230551719666, 0.8117818236351013, 0.8165367841720581, 0.834632158279419, 0.8391229510307312, 0.843481719493866, 0.8438779711723328, 0.8529917001724243, 0.8560295701026917, 0.8659358024597168, 0.869502067565918, 0.873860776424408, 0.8791441321372986, 0.8835028409957886, 0.8838990926742554, 0.8858803510665894, 0.8910315632820129, 0.8918240666389465, 0.8916919827461243, 0.8990886211395264, 0.8993527889251709, 0.9051644206047058, 0.909259021282196, 0.9103156924247742, 0.904768168926239, 0.913089394569397], "val_loss": [1.0690844058990479, 0.7267204523086548, 0.6630074977874756, 0.5851247310638428, 0.5488004684448242, 0.5154633522033691, 0.48644670844078064, 0.4733087122440338, 0.46183642745018005, 0.4481644630432129, 0.4221508502960205, 0.41604873538017273, 0.4122338891029358, 0.4024076461791992, 0.39266952872276306, 0.3885684907436371, 0.38248133659362793, 0.3724929988384247, 0.3723068833351135, 0.36633822321891785, 0.3746758699417114, 0.36198416352272034, 0.3594156801700592, 0.37187516689300537, 0.3668769896030426, 0.34963202476501465, 0.35778117179870605, 0.35199210047721863, 0.35453882813453674, 0.364315927028656, 0.35359829664230347, 0.36456167697906494, 0.36178097128868103], "val_accuracy": [0.6523333191871643, 0.7213333249092102, 0.7549999952316284, 0.7713333368301392, 0.7846666574478149, 0.8059999942779541, 0.812666654586792, 0.8153333067893982, 0.824999988079071, 0.8309999704360962, 0.8420000076293945, 0.840666651725769, 0.8456666469573975, 0.8510000109672546, 0.8556666374206543, 0.859000027179718, 0.8543333411216736, 0.8636666536331177, 0.8653333187103271, 0.8636666536331177, 0.8576666712760925, 0.8669999837875366, 0.8650000095367432, 0.8676666617393494, 0.8683333396911621, 0.8769999742507935, 0.875, 0.8790000081062317, 0.871666669845581, 0.875, 0.8766666650772095, 0.8723333477973938, 0.8743333220481873]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8220000267028809, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2121832370758057, 1.6126313209533691, 1.1549017429351807, 0.9805263876914978, 0.8818554878234863, 0.8309443593025208, 0.782087504863739, 0.7786279320716858, 0.7360976934432983, 0.6988584995269775, 0.679513692855835, 0.6721912622451782, 0.6733919978141785, 0.6409868001937866, 0.6247994899749756, 0.6227056980133057, 0.6190223693847656, 0.5912694334983826, 0.5906366109848022, 0.5781583189964294, 0.573397159576416, 0.557289183139801, 0.5492048859596252, 0.5461528301239014, 0.5323215126991272, 0.5322939157485962, 0.5228842496871948, 0.5203197598457336, 0.5231860876083374, 0.5000953674316406, 0.4931600093841553, 0.4930359423160553, 0.48995789885520935, 0.48992061614990234, 0.47660958766937256, 0.47440305352211], "accuracy": [0.2572975754737854, 0.5038964748382568, 0.6016378402709961, 0.656980574131012, 0.6779817938804626, 0.6968696117401123, 0.7117950320243835, 0.7148329019546509, 0.7272487282752991, 0.7429665923118591, 0.7441553473472595, 0.7547219395637512, 0.7465327978134155, 0.767401933670044, 0.7684586048126221, 0.7640998363494873, 0.7687227725982666, 0.7781006693840027, 0.7814027070999146, 0.7852331399917603, 0.7841764688491821, 0.7932901978492737, 0.7967243194580078, 0.7991018295288086, 0.8062343001365662, 0.8004226684570312, 0.81112140417099, 0.8092722296714783, 0.8075551390647888, 0.8158763647079468, 0.8189142942428589, 0.8181217908859253, 0.8207634687423706, 0.8219521641731262, 0.8261788487434387, 0.830669641494751], "val_loss": [1.925641655921936, 1.0922574996948242, 0.8768758177757263, 0.7964277267456055, 0.7239687442779541, 0.6717847585678101, 0.7288713455200195, 0.6626194715499878, 0.6407670974731445, 0.6055139899253845, 0.5824396014213562, 0.5676935911178589, 0.5622337460517883, 0.556389570236206, 0.5413914918899536, 0.5536426901817322, 0.5548219680786133, 0.5581239461898804, 0.5352270007133484, 0.5068479180335999, 0.5150396823883057, 0.5081474781036377, 0.5097876787185669, 0.48609107732772827, 0.4967677891254425, 0.4749726951122284, 0.47401219606399536, 0.5043008923530579, 0.4781033992767334, 0.4700695872306824, 0.4552909731864929, 0.46192577481269836, 0.44759488105773926, 0.44666963815689087, 0.44127339124679565, 0.4381462037563324], "val_accuracy": [0.49666666984558105, 0.6576666831970215, 0.7026666402816772, 0.7160000205039978, 0.7436666488647461, 0.7599999904632568, 0.7273333072662354, 0.7616666555404663, 0.7666666507720947, 0.7770000100135803, 0.7836666703224182, 0.7946666479110718, 0.7943333387374878, 0.7883333563804626, 0.8003333210945129, 0.7846666574478149, 0.7816666960716248, 0.7806666493415833, 0.7906666398048401, 0.8080000281333923, 0.8083333373069763, 0.8059999942779541, 0.8106666803359985, 0.8263333439826965, 0.8090000152587891, 0.8243333101272583, 0.8293333053588867, 0.8043333292007446, 0.8163333535194397, 0.824999988079071, 0.8433333039283752, 0.8396666646003723, 0.840666651725769, 0.8353333473205566, 0.8410000205039978, 0.8416666388511658]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [5, 8, 3, 1, 3, 0, 2], [0, 0, 1, 0, 2], [26, 39, 39], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 0, 6, 1, 8, 2, 5], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 7, 3, 4, 6], [0, 1, 1, 2, 4], [8], [0, 1], [0], [7], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 3, 1, 0, 1, 0, 10, 5, 5, 1, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.sqrt(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), alpha), tf.math.pow(alpha, tf.math.divide_no_nan(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09153348207473755, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 9, 3, 5], [0, 0, 1, 0, 0], [0, 39, 39], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2, 4], [2, 2, 0, 4, 0, 3, 1], [16, 5], [0, 0, 0, 1, 1, 1, 0, 1], [7, 3, 0, 2], [0, 6, 7, 3], [0], [1], [0], [2], [0]], "fitness": -0.09399999678134918, "mapping_values": [1, 6, 4, 2, 3, 2, 1, 1, 0, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), grad), grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.30954647064209, 2.3114333152770996, 2.310823440551758, 2.311800479888916, 2.3103392124176025, 2.309328317642212], "accuracy": [0.09377889335155487, 0.08942015469074249, 0.08558975160121918, 0.09087307006120682, 0.0886276587843895, 0.0936468094587326], "val_loss": [2.309234619140625, 2.309234619140625, 2.309234619140625, 2.309234619140625, 2.309234619140625, 2.309234619140625], "val_accuracy": [0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284, 0.08799999952316284]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [1, 3, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 7, 4, 4, 0, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 35], [0, 0, 1, 1, 0, 1, 1, 0], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 11, 6, 5, 1, 12, 7, 5, 2, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(alpha, grad), alpha), tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, beta), tf.math.pow(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(grad)))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), tf.math.negative(alpha)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3101389408111572, 2.3092563152313232, 2.3091423511505127, 2.3106541633605957, 2.3093104362487793, 2.3086283206939697], "accuracy": [0.09298639744520187, 0.1006472036242485, 0.08717474341392517, 0.09417514503002167, 0.09126931428909302, 0.0948355570435524], "val_loss": [2.3089537620544434, 2.308833599090576, 2.308701276779175, 2.308589458465576, 2.30856990814209, 2.3086516857147217], "val_accuracy": [0.09099999815225601, 0.09033333510160446, 0.09033333510160446, 0.09066666662693024, 0.09066666662693024, 0.09033333510160446]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 2, 3, 1, 3, 5], [0, 1, 1, 1, 2], [0, 39, 39], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 5, 0, 6, 7, 8, 2, 5], [2, 2, 0, 4, 5, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [0, 7, 1, 6], [0, 1, 1, 4], [0], [0, 1], [0], [2], [0]], "fitness": -0.0908571407198906, "mapping_values": [1, 2, 1, 1, 1, 4, 3, 1, 0, 8, 4, 4, 1, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.negative(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, alpha)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.310114622116089, 2.3096117973327637, 2.3109328746795654, 2.3085761070251465, 2.311058521270752, 2.3105130195617676], "accuracy": [0.09166556596755981, 0.09272222965955734, 0.08955223858356476, 0.09576013684272766, 0.09074098616838455, 0.08915598690509796], "val_loss": [2.3094253540039062, 2.3094253540039062, 2.3094253540039062, 2.3094253540039062, 2.3094253540039062, 2.3094253540039062], "val_accuracy": [0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446, 0.09033333510160446]}}]