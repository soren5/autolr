[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8554285764694214, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.213676929473877, 1.6260327100753784, 1.143683910369873, 0.9742980599403381, 0.905768096446991, 0.8351218104362488, 0.7851074934005737, 0.7412269115447998, 0.7395317554473877, 0.711415708065033, 0.7069402933120728, 0.678230345249176, 0.6367061138153076, 0.6509361267089844, 0.6249479651451111, 0.6181301474571228, 0.596510112285614, 0.5996518135070801, 0.5853984355926514, 0.566254198551178, 0.5746713280677795, 0.5576147437095642, 0.5446452498435974, 0.5396304726600647, 0.5172899961471558, 0.545619010925293, 0.5207965970039368, 0.5165130496025085, 0.5015321969985962, 0.4937669634819031, 0.48441874980926514, 0.4920797646045685, 0.47626858949661255, 0.47793251276016235, 0.4731525182723999, 0.4620440900325775, 0.46651312708854675, 0.45247113704681396, 0.45586317777633667, 0.4512108266353607, 0.44254299998283386, 0.4377943277359009, 0.4450337886810303, 0.433260977268219, 0.4311376214027405, 0.4237311780452728, 0.42902952432632446, 0.4136289060115814, 0.41453227400779724, 0.4130176901817322, 0.39844590425491333, 0.39945289492607117, 0.39990946650505066, 0.39090973138809204, 0.39613914489746094, 0.3962012231349945, 0.3925626873970032, 0.39203161001205444, 0.3823232650756836], "accuracy": [0.2662792205810547, 0.5065380930900574, 0.6066569685935974, 0.659490168094635, 0.6744155287742615, 0.6980583667755127, 0.713908314704895, 0.7283053994178772, 0.7260599732398987, 0.7359662055969238, 0.7403249144554138, 0.7495707273483276, 0.7663452625274658, 0.7577598690986633, 0.7709681391716003, 0.7713643908500671, 0.778761088848114, 0.7790252566337585, 0.7824593782424927, 0.7913089394569397, 0.7848368883132935, 0.7928939461708069, 0.798309326171875, 0.7967243194580078, 0.8094043135643005, 0.800290584564209, 0.811649739742279, 0.8087438941001892, 0.8164047002792358, 0.8144234418869019, 0.8235371708869934, 0.8183859586715698, 0.822348415851593, 0.8281601071357727, 0.8276317715644836, 0.8322546482086182, 0.8293488025665283, 0.8367455005645752, 0.8325188159942627, 0.8381983637809753, 0.8393871188163757, 0.8422929644584656, 0.8403117060661316, 0.844010055065155, 0.8459912538528442, 0.8491612672805786, 0.8459912538528442, 0.8487650156021118, 0.8511425256729126, 0.8516708612442017, 0.8597279191017151, 0.8533879518508911, 0.8537842035293579, 0.8578787446022034, 0.8557654023170471, 0.8599920868873596, 0.8584070801734924, 0.8605204224586487, 0.8598600029945374], "val_loss": [1.9311139583587646, 1.1074284315109253, 0.9771608710289001, 0.7858006358146667, 0.7151148915290833, 0.6789993643760681, 0.6691451072692871, 0.6397503614425659, 0.6217755675315857, 0.637182354927063, 0.5786056518554688, 0.5710426568984985, 0.5599858164787292, 0.5515573024749756, 0.54337477684021, 0.5200293660163879, 0.526112973690033, 0.5345032811164856, 0.5103436708450317, 0.5099934935569763, 0.49562308192253113, 0.5069106221199036, 0.48209962248802185, 0.47433871030807495, 0.4906598627567291, 0.5204798579216003, 0.4671025276184082, 0.4671674370765686, 0.46530061960220337, 0.4500419795513153, 0.446654736995697, 0.43762192130088806, 0.44438207149505615, 0.4439742863178253, 0.44161567091941833, 0.4331801235675812, 0.44725513458251953, 0.4252970814704895, 0.42855703830718994, 0.4254489839076996, 0.4155900180339813, 0.4370979070663452, 0.4190300703048706, 0.4254917800426483, 0.4138663709163666, 0.421396940946579, 0.40383246541023254, 0.39836356043815613, 0.4188055694103241, 0.4012039005756378, 0.4035666882991791, 0.41997474431991577, 0.40390560030937195, 0.38472822308540344, 0.40163907408714294, 0.3912980854511261, 0.3859305679798126, 0.3892076015472412, 0.3987250030040741], "val_accuracy": [0.5730000138282776, 0.6159999966621399, 0.6100000143051147, 0.6980000138282776, 0.7269999980926514, 0.7519999742507935, 0.7483333349227905, 0.7603333592414856, 0.7559999823570251, 0.7463333606719971, 0.7726666927337646, 0.7856666445732117, 0.7846666574478149, 0.79666668176651, 0.7906666398048401, 0.8029999732971191, 0.7990000247955322, 0.7929999828338623, 0.8146666884422302, 0.8116666674613953, 0.8086666464805603, 0.8040000200271606, 0.8196666836738586, 0.8266666531562805, 0.8116666674613953, 0.8046666383743286, 0.8289999961853027, 0.8270000219345093, 0.8266666531562805, 0.8296666741371155, 0.8339999914169312, 0.8396666646003723, 0.8323333263397217, 0.8420000076293945, 0.8383333086967468, 0.8363333344459534, 0.8299999833106995, 0.843666672706604, 0.8416666388511658, 0.8433333039283752, 0.8486666679382324, 0.8370000123977661, 0.8506666421890259, 0.8403333425521851, 0.8506666421890259, 0.8393333554267883, 0.8503333330154419, 0.8526666760444641, 0.8460000157356262, 0.8556666374206543, 0.8536666631698608, 0.8456666469573975, 0.8553333282470703, 0.8600000143051147, 0.8546666502952576, 0.859000027179718, 0.8586666584014893, 0.8569999933242798, 0.8553333282470703]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8437142968177795, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2096285820007324, 1.6103345155715942, 1.156983733177185, 0.9787242412567139, 0.894889235496521, 0.8223492503166199, 0.7851478457450867, 0.7731117606163025, 0.7393192648887634, 0.7011364102363586, 0.7134554386138916, 0.6591464281082153, 0.6598873138427734, 0.6335746645927429, 0.6401437520980835, 0.6305208206176758, 0.6189337968826294, 0.5847395062446594, 0.5997804999351501, 0.5754223465919495, 0.5788024663925171, 0.5623492002487183, 0.5617818236351013, 0.5492532849311829, 0.5450319051742554, 0.529542863368988, 0.531871497631073, 0.5231198668479919, 0.5102896094322205, 0.511543869972229, 0.5038903951644897, 0.500099241733551, 0.4911258816719055, 0.4874158501625061, 0.4896160066127777, 0.48124387860298157, 0.47394806146621704, 0.4660157859325409, 0.4711969494819641, 0.45533838868141174], "accuracy": [0.272090882062912, 0.5004622936248779, 0.5975432395935059, 0.6487914323806763, 0.6760005354881287, 0.7000396251678467, 0.7104741930961609, 0.7173424959182739, 0.7209087014198303, 0.744419515132904, 0.7338528633117676, 0.7541936039924622, 0.7544577717781067, 0.7667415142059326, 0.7617223858833313, 0.7691190242767334, 0.7726852297782898, 0.785101056098938, 0.7736098170280457, 0.7839123010635376, 0.7872143983840942, 0.7885351777076721, 0.7852331399917603, 0.7977809906005859, 0.8009510040283203, 0.805177628993988, 0.8067626357078552, 0.8084797263145447, 0.8082155585289001, 0.8087438941001892, 0.8186501264572144, 0.8137630224227905, 0.8203672170639038, 0.824329674243927, 0.8181217908859253, 0.824329674243927, 0.8206313848495483, 0.8285563588142395, 0.8274996876716614, 0.8342359066009521], "val_loss": [1.9170995950698853, 1.0965005159378052, 0.9119226932525635, 0.8033859729766846, 0.7167149782180786, 0.7005276679992676, 0.6430286169052124, 0.6450139284133911, 0.6024550795555115, 0.6197615265846252, 0.6209162473678589, 0.5736558437347412, 0.5717030763626099, 0.5346405506134033, 0.5608898401260376, 0.5445006489753723, 0.5428920388221741, 0.5234004855155945, 0.5054234862327576, 0.5302255749702454, 0.5095528960227966, 0.4819680452346802, 0.4821854531764984, 0.5104190111160278, 0.497394859790802, 0.46233105659484863, 0.4713565409183502, 0.4932135343551636, 0.4688965678215027, 0.45406389236450195, 0.4538199007511139, 0.4471133351325989, 0.4634209871292114, 0.44258618354797363, 0.444456547498703, 0.44472962617874146, 0.4382667541503906, 0.4364446699619293, 0.4343985617160797, 0.45379549264907837], "val_accuracy": [0.5286666750907898, 0.653333306312561, 0.687666654586792, 0.7056666612625122, 0.7319999933242798, 0.7403333187103271, 0.7506666779518127, 0.7463333606719971, 0.7680000066757202, 0.7459999918937683, 0.75, 0.7739999890327454, 0.7776666879653931, 0.7946666479110718, 0.781000018119812, 0.7889999747276306, 0.7906666398048401, 0.7986666560173035, 0.8056666851043701, 0.7946666479110718, 0.8076666593551636, 0.8176666498184204, 0.8163333535194397, 0.8053333163261414, 0.8090000152587891, 0.8306666612625122, 0.8273333311080933, 0.8033333420753479, 0.8130000233650208, 0.8383333086967468, 0.8360000252723694, 0.8396666646003723, 0.831333339214325, 0.8410000205039978, 0.8456666469573975, 0.8316666483879089, 0.8393333554267883, 0.8363333344459534, 0.8453333377838135, 0.8299999833106995]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 1, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 1, 8, 2], [2, 2, 3, 1, 0], [16, 57], [0, 1, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 12, 7, 5, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.subtract(beta, grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 2, 3, 1, 2, 5, 4, 9], [0, 0, 1, 0, 2], [0, 13, 39, 6], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [3, 0, 3, 1, 0], [16, 54], [0, 0, 1, 1], [0, 7], [0, 2], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 8, 5, 4, 2, 1, 1, 0, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.math.square(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), beta)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3.7991232872009277, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1868973672389984, 0.10949676483869553, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [5.754153728485107, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.07733333110809326, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 3, 3, 1, 3, 5], [0, 0, 3, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 4, 0, 6, 3, 8, 3, 7, 6, 5, 7, 1, 6, 5, 6, 7, 9, 0, 4, 1], [2, 0, 5, 1, 0, 3, 4, 4, 0, 4, 5, 5, 4], [16, 1, 75, 6], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 33, 20, 13, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad), grad))), tf.math.square(grad))), tf.math.divide_no_nan(tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.pow(grad, tf.math.subtract(grad, grad))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 2, 3, 9, 3, 5], [0, 0, 1, 0, 0], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 2, 0, 6, 3, 5, 2, 7, 0, 5], [2, 0, 3, 3, 0, 0], [16, 1, 6], [0, 0, 1, 1], [0, 7], [0, 4], [0], [1], [0], [0], [0]], "fitness": -0.0925714299082756, "mapping_values": [1, 4, 2, 2, 2, 16, 10, 6, 3, 4, 2, 2, 1, 1, 0, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(grad, grad))), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.square(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.31008243560791, 2.3095037937164307, 2.3109023571014404, 2.310241222381592, 2.3093008995056152, 2.3090224266052246], "accuracy": [0.09153348207473755, 0.09377889335155487, 0.08492933213710785, 0.09430722147226334, 0.09470347315073013, 0.09325055778026581], "val_loss": [2.308955430984497, 2.308955430984497, 2.308955430984497, 2.308955430984497, 2.308955430984497, 2.308955430984497], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]