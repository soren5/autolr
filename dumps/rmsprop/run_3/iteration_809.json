[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [2, 9, 4, 7, 0, 5, 5, 4], [1, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.8837142586708069, "mapping_values": [1, 10, 5, 5, 3, 12, 8, 4, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(tf.math.negative(tf.math.square(beta)), tf.math.square(tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1052942276000977, 1.196382761001587, 0.8314899802207947, 0.7147043943405151, 0.6302909255027771, 0.5692504644393921, 0.5221520066261292, 0.5032613277435303, 0.4807533919811249, 0.4511759579181671, 0.43527787923812866, 0.4096868932247162, 0.397103488445282, 0.3862413465976715, 0.36111611127853394, 0.350818932056427, 0.3486778438091278, 0.3429076075553894, 0.3232230544090271, 0.3090643882751465, 0.31197598576545715, 0.3050714433193207, 0.2870331108570099, 0.282348096370697, 0.27071237564086914, 0.26655495166778564, 0.2668570280075073, 0.2539179027080536, 0.24523289501667023], "accuracy": [0.29837536811828613, 0.5847312211990356, 0.6859067678451538, 0.7273808121681213, 0.7601373791694641, 0.7794214487075806, 0.802271842956543, 0.8067626357078552, 0.8183859586715698, 0.8289526104927063, 0.8388587832450867, 0.8451988101005554, 0.8518029451370239, 0.8578787446022034, 0.8622375130653381, 0.8739928603172302, 0.8697662353515625, 0.8708229064941406, 0.878879964351654, 0.8845595121383667, 0.8802007436752319, 0.8837670087814331, 0.8868049383163452, 0.8952582478523254, 0.9034473896026611, 0.9014661312103271, 0.89552241563797, 0.9021265506744385, 0.9030511379241943], "val_loss": [1.0808992385864258, 0.7787856459617615, 0.688173234462738, 0.6003098487854004, 0.5536212921142578, 0.5124399662017822, 0.49683383107185364, 0.47856128215789795, 0.46877041459083557, 0.4444534480571747, 0.4302023649215698, 0.4150267243385315, 0.4014204144477844, 0.4067032039165497, 0.3947374224662781, 0.4073643088340759, 0.40519216656684875, 0.398570716381073, 0.3763197362422943, 0.3740674555301666, 0.38644686341285706, 0.38683950901031494, 0.3821990489959717, 0.3752228915691376, 0.38204818964004517, 0.3790208399295807, 0.3727281093597412, 0.3777836859226227, 0.3915119767189026], "val_accuracy": [0.6286666393280029, 0.7043333053588867, 0.7336666584014893, 0.7683333158493042, 0.7806666493415833, 0.8009999990463257, 0.8103333115577698, 0.8186666369438171, 0.8256666660308838, 0.8446666598320007, 0.8533333539962769, 0.8516666889190674, 0.8616666793823242, 0.8569999933242798, 0.8640000224113464, 0.8619999885559082, 0.8610000014305115, 0.8579999804496765, 0.8693333268165588, 0.871666669845581, 0.8700000047683716, 0.8709999918937683, 0.8726666569709778, 0.8776666522026062, 0.8703333139419556, 0.8696666955947876, 0.8723333477973938, 0.8773333430290222, 0.8696666955947876]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8240000009536743, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.209615468978882, 1.5873453617095947, 1.1320418119430542, 0.9778140783309937, 0.8696370720863342, 0.8279966115951538, 0.7836387157440186, 0.7556449770927429, 0.7337965965270996, 0.6966891884803772, 0.6678511500358582, 0.6794959902763367, 0.6301519870758057, 0.6398947834968567, 0.636314332485199, 0.6130154728889465, 0.591359555721283, 0.595466673374176, 0.5688560605049133, 0.5694246292114258, 0.5530145168304443, 0.5500760078430176, 0.5479912757873535, 0.530676543712616, 0.5563536882400513, 0.5280856490135193, 0.5064924359321594, 0.5241430997848511, 0.5013788342475891, 0.4988185465335846, 0.48574021458625793, 0.49007776379585266, 0.4830531179904938, 0.47680437564849854, 0.4733543395996094, 0.4642637073993683, 0.4603631794452667, 0.4643321931362152, 0.46136313676834106, 0.4443926513195038, 0.4372160732746124, 0.4415493607521057, 0.43656039237976074], "accuracy": [0.2623167335987091, 0.5138026475906372, 0.5993924140930176, 0.6449610590934753, 0.6885483860969543, 0.695813000202179, 0.7147008180618286, 0.7219653725624084, 0.7268524765968323, 0.7466648817062378, 0.7585523724555969, 0.7471932172775269, 0.770439863204956, 0.7637035846710205, 0.7666094303131104, 0.7685906887054443, 0.7820631265640259, 0.783119797706604, 0.789459764957428, 0.7902522683143616, 0.7968564033508301, 0.7993659973144531, 0.7981772422790527, 0.8062343001365662, 0.7924976944923401, 0.8078193068504333, 0.8152159452438354, 0.8107251524925232, 0.8157442808151245, 0.819970965385437, 0.8232730031013489, 0.8215559124946594, 0.8256505131721497, 0.82683926820755, 0.8271034359931946, 0.8289526104927063, 0.8350284099578857, 0.8329150676727295, 0.83119797706604, 0.8391229510307312, 0.8412362933158875, 0.8407079577445984, 0.8416325449943542], "val_loss": [1.9187792539596558, 1.0901466608047485, 0.9238635897636414, 0.8145223259925842, 0.7655171155929565, 0.7825376987457275, 0.6714842319488525, 0.6676797866821289, 0.6273370981216431, 0.6106571555137634, 0.5998495817184448, 0.5858275294303894, 0.560623288154602, 0.5911617279052734, 0.5819238424301147, 0.5690255761146545, 0.5350315570831299, 0.5289149880409241, 0.5422393679618835, 0.5364344716072083, 0.5064098834991455, 0.5049242973327637, 0.49233919382095337, 0.5066556334495544, 0.49153581261634827, 0.48240751028060913, 0.48427027463912964, 0.4726663827896118, 0.45904114842414856, 0.4697130024433136, 0.4559946656227112, 0.4719909727573395, 0.4458562731742859, 0.45901408791542053, 0.4462921619415283, 0.4348233640193939, 0.45937901735305786, 0.4314933717250824, 0.4398539662361145, 0.42580583691596985, 0.4437735080718994, 0.420294851064682, 0.42342785000801086], "val_accuracy": [0.5086666941642761, 0.6536666750907898, 0.6669999957084656, 0.687666654586792, 0.6990000009536743, 0.7120000123977661, 0.7516666650772095, 0.7386666536331177, 0.7639999985694885, 0.7770000100135803, 0.765999972820282, 0.7746666669845581, 0.7889999747276306, 0.7713333368301392, 0.7726666927337646, 0.7776666879653931, 0.8073333501815796, 0.8113333582878113, 0.796999990940094, 0.7886666655540466, 0.8100000023841858, 0.8119999766349792, 0.8119999766349792, 0.8173333406448364, 0.8186666369438171, 0.828000009059906, 0.8230000138282776, 0.824999988079071, 0.8333333134651184, 0.8270000219345093, 0.8330000042915344, 0.8296666741371155, 0.8399999737739563, 0.8276666402816772, 0.8410000205039978, 0.8443333506584167, 0.8223333358764648, 0.8463333249092102, 0.8403333425521851, 0.8423333168029785, 0.8410000205039978, 0.843999981880188, 0.8446666598320007]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 3, 5, 3, 5], [0, 0, 1, 0, 2], [26, 39, 61], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1], [3, 9, 4, 7, 0, 5, 5, 4], [1, 2, 0, 4, 0, 3, 1], [90, 1], [0, 0, 0, 1, 1, 1, 1, 1], [7, 3, 0, 2], [0, 1, 1, 4], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 4, 2, 2, 8, 5, 3, 2, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.multiply(tf.math.square(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.add(beta, tf.math.negative(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.310260772705078, 2.3437399864196777, 2.661548137664795, 4.255315780639648, 8.818745613098145, 18.276071548461914], "accuracy": [0.09642054885625839, 0.10011887550354004, 0.10210011899471283, 0.10117553919553757, 0.09642054885625839, 0.09655263274908066], "val_loss": [2.3098227977752686, 2.3606889247894287, 2.8064258098602295, 4.911563873291016, 10.35088062286377, 21.081823348999023], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [14, 39, 39], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0], [2, 9, 4, 7, 1, 5, 2, 7, 7, 0, 1, 5, 0, 0, 8, 4, 6, 6, 4, 3, 7, 8, 2, 1, 0, 4, 5, 6, 2, 7, 7, 0, 0, 2, 2, 1, 5, 9, 1, 9, 9], [1, 4, 0, 4, 0, 3, 1, 5, 2, 5, 4, 2, 5, 3, 1, 3, 4, 4, 4, 4, 0, 2], [16, 50, 5, 69, 0, 94, 22], [1, 0, 0, 1, 0, 1, 1, 1], [0, 7, 1, 4], [0, 2, 3, 3], [0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 7, 7, 4, 1, 8, 5, 3, 9, 1], [2, 1, 1, 6, 3, 5, 3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 63, 41, 22, 7, 1, 0, 1, 1, 19, 12, 7, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(grad, tf.math.add(tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad), tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.subtract(grad, tf.math.square(tf.math.negative(tf.math.negative(tf.math.sqrt(alpha))))))), tf.math.pow(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.math.add(grad, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.pow(tf.math.square(grad), grad)), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(grad, alpha)))))), grad), tf.math.add(grad, grad)), tf.math.negative(grad)), tf.math.negative(tf.math.add(grad, tf.math.add(tf.math.subtract(tf.math.square(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.subtract(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.sqrt(alpha), tf.math.square(tf.math.multiply(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)))), tf.math.subtract(sigma, grad))), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 8, 5], [0, 0, 3, 0, 2], [26, 49, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 9, 4, 6, 4, 5, 5, 4], [1, 0, 0, 4, 0, 3, 1], [16, 1, 42], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [7, 3, 0, 2, 4, 4, 4, 0, 2], [0, 1, 1, 4, 7, 4, 5, 5], [0], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 5, 4, 3, 11, 7, 4, 3, 17, 9, 8, 1, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), grad), tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(alpha, alpha), tf.math.pow(tf.math.pow(grad, tf.math.negative(grad)), tf.math.add(grad, grad)))), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.30350399017334, 2.3105688095092773, 2.7542343139648438, 14.144979476928711, 51.477970123291016, 115.68782043457031], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3035876750946045, 2.341676712036133, 5.519777774810791, 31.758495330810547, 84.90986633300781, 164.94036865234375], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 1, 3, 5, 8, 7, 9, 4, 8, 7, 4, 4, 4, 9, 6], [0, 0, 1, 1, 2, 1, 0, 3, 0, 2], [39, 39, 39, 26, 58, 17], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 0, 0, 1, 1, 1], [7, 3, 0, 9], [0, 6, 6, 2], [0, 71], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 17, 10, 6, 4, 2, 2, 1, 6, 4, 2, 2, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.pow(tf.math.pow(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(alpha, grad)), alpha), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), grad))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}]