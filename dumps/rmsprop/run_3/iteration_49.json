[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8488571643829346, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.20965838432312, 1.605275273323059, 1.174899697303772, 0.9858217835426331, 0.8854502439498901, 0.8390660285949707, 0.7964760661125183, 0.7493116855621338, 0.7368370890617371, 0.7423945665359497, 0.6912937164306641, 0.652807354927063, 0.6722995042800903, 0.6303475499153137, 0.638758659362793, 0.6335452795028687, 0.6118106245994568, 0.5839931964874268, 0.6074797511100769, 0.5692148208618164, 0.5713926553726196, 0.5606203079223633, 0.5617382526397705, 0.5447259545326233, 0.5329451560974121, 0.5268599390983582, 0.5340890884399414, 0.513875424861908, 0.5041987299919128, 0.5130024552345276, 0.494832307100296, 0.49036717414855957, 0.4784986972808838, 0.4866924583911896, 0.47488248348236084, 0.47904762625694275, 0.46592438220977783, 0.45425689220428467, 0.45789527893066406, 0.4461337625980377, 0.46881693601608276, 0.44601550698280334, 0.44031885266304016, 0.44752898812294006, 0.4237683117389679, 0.4238412082195282, 0.4305957853794098, 0.42562389373779297, 0.4144071340560913, 0.4031882882118225, 0.4081343710422516, 0.40373241901397705, 0.4025316536426544, 0.39863044023513794, 0.4013623595237732, 0.39603057503700256, 0.3858937621116638, 0.37867599725723267, 0.38853347301483154, 0.3791296184062958, 0.38104328513145447], "accuracy": [0.27380794286727905, 0.49848103523254395, 0.5904107689857483, 0.6441685557365417, 0.6736230254173279, 0.6915863156318665, 0.7107383608818054, 0.7235503792762756, 0.7215691208839417, 0.7257958054542542, 0.744419515132904, 0.7537974119186401, 0.7428345084190369, 0.76106196641922, 0.7605336308479309, 0.7605336308479309, 0.7684586048126221, 0.7832518815994263, 0.7713643908500671, 0.7872143983840942, 0.7841764688491821, 0.7869502305984497, 0.785629391670227, 0.7952714562416077, 0.8018755912780762, 0.8061022162437439, 0.7924976944923401, 0.8094043135643005, 0.8152159452438354, 0.809140145778656, 0.8157442808151245, 0.8182538747787476, 0.8231409192085266, 0.8165367841720581, 0.8222163319587708, 0.8197067975997925, 0.8285563588142395, 0.8327829837799072, 0.8318583965301514, 0.8350284099578857, 0.8256505131721497, 0.8327829837799072, 0.8381983637809753, 0.830669641494751, 0.8444063067436218, 0.8425571322441101, 0.8422929644584656, 0.8389908671379089, 0.846387505531311, 0.848368763923645, 0.8449346423149109, 0.8486329317092896, 0.8486329317092896, 0.852331280708313, 0.8451988101005554, 0.8479725122451782, 0.8595958352088928, 0.8597279191017151, 0.8549728989601135, 0.86118084192276, 0.8515387773513794], "val_loss": [1.9230862855911255, 1.0929569005966187, 0.8973206281661987, 0.804622232913971, 0.7767345309257507, 0.6857672333717346, 0.6721967458724976, 0.6734874844551086, 0.6915271878242493, 0.6241103410720825, 0.6087749600410461, 0.5950765609741211, 0.5749830603599548, 0.5841686725616455, 0.5530827641487122, 0.5793383121490479, 0.5353695750236511, 0.5145910382270813, 0.5285325646400452, 0.5221818685531616, 0.5045897364616394, 0.5228636264801025, 0.5050208568572998, 0.492615282535553, 0.5042333006858826, 0.48819345235824585, 0.47438427805900574, 0.4683537483215332, 0.4591546952724457, 0.4624483585357666, 0.45263615250587463, 0.45954930782318115, 0.460252970457077, 0.47306180000305176, 0.44545361399650574, 0.4519936442375183, 0.4357885718345642, 0.4363263249397278, 0.4398147761821747, 0.4561229944229126, 0.43614399433135986, 0.4212207794189453, 0.43167099356651306, 0.4146358370780945, 0.41952022910118103, 0.42774438858032227, 0.4073605239391327, 0.40770068764686584, 0.41299423575401306, 0.40159663558006287, 0.405976265668869, 0.4202680289745331, 0.40908488631248474, 0.4110962748527527, 0.3965720534324646, 0.38916847109794617, 0.3874070346355438, 0.3962351977825165, 0.4036594331264496, 0.39962854981422424, 0.390293687582016], "val_accuracy": [0.4936666786670685, 0.6496666669845581, 0.6783333420753479, 0.690666675567627, 0.7013333439826965, 0.7403333187103271, 0.7459999918937683, 0.7223333120346069, 0.7160000205039978, 0.7713333368301392, 0.7720000147819519, 0.7730000019073486, 0.7853333353996277, 0.7749999761581421, 0.7973333597183228, 0.7603333592414856, 0.79666668176651, 0.8023333549499512, 0.8036666512489319, 0.8069999814033508, 0.8106666803359985, 0.800000011920929, 0.8059999942779541, 0.8190000057220459, 0.8169999718666077, 0.8166666626930237, 0.8213333487510681, 0.8266666531562805, 0.8306666612625122, 0.8299999833106995, 0.8323333263397217, 0.8296666741371155, 0.8230000138282776, 0.8226666450500488, 0.8336666822433472, 0.8286666870117188, 0.8383333086967468, 0.8386666774749756, 0.8343333601951599, 0.8299999833106995, 0.8413333296775818, 0.8443333506584167, 0.8323333263397217, 0.8473333120346069, 0.8423333168029785, 0.8450000286102295, 0.8506666421890259, 0.8526666760444641, 0.8503333330154419, 0.8546666502952576, 0.847000002861023, 0.8426666855812073, 0.8533333539962769, 0.8500000238418579, 0.8579999804496765, 0.8633333444595337, 0.8613333106040955, 0.8573333621025085, 0.8496666550636292, 0.8519999980926514, 0.8603333234786987]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8294285535812378, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2120416164398193, 1.614574909210205, 1.1700519323349, 0.96322101354599, 0.9208368062973022, 0.8248558044433594, 0.7814980149269104, 0.7634891867637634, 0.7477782368659973, 0.7057986259460449, 0.7129841446876526, 0.6815598607063293, 0.6571914553642273, 0.6473792195320129, 0.6234378814697266, 0.6248542666435242, 0.5927849411964417, 0.6103041172027588, 0.5903043150901794, 0.5854359269142151, 0.5627962946891785, 0.5565823912620544, 0.5534926056861877, 0.5449972152709961, 0.5411280393600464, 0.5249772071838379, 0.5282824635505676, 0.5198835134506226, 0.4939833879470825, 0.5009479522705078, 0.49708080291748047, 0.4922899603843689, 0.4817080795764923, 0.4682586193084717, 0.4705991744995117, 0.4757401943206787, 0.47032734751701355, 0.46184042096138, 0.44821882247924805, 0.44727641344070435, 0.4466416537761688, 0.4461440145969391, 0.434816837310791, 0.42593351006507874, 0.4258437156677246, 0.4266963303089142, 0.4312796890735626, 0.4196960926055908, 0.4156493544578552], "accuracy": [0.2635054886341095, 0.5011227130889893, 0.5855237245559692, 0.6625280380249023, 0.6720380187034607, 0.7051908373832703, 0.7165499925613403, 0.724739134311676, 0.724739134311676, 0.7441553473472595, 0.7388719916343689, 0.7467969655990601, 0.7581561207771301, 0.7593448758125305, 0.7691190242767334, 0.765949010848999, 0.7777044177055359, 0.7754589915275574, 0.7783648371696472, 0.7814027070999146, 0.7918372750282288, 0.7977809906005859, 0.7911768555641174, 0.8016114234924316, 0.7991018295288086, 0.8055738806724548, 0.8061022162437439, 0.8061022162437439, 0.8177255392074585, 0.8144234418869019, 0.8141592741012573, 0.8202351331710815, 0.8189142942428589, 0.8293488025665283, 0.8308017253875732, 0.8259146809577942, 0.8247259259223938, 0.828292191028595, 0.834632158279419, 0.8359529972076416, 0.8342359066009521, 0.835160493850708, 0.8429533839225769, 0.8436138033866882, 0.8444063067436218, 0.8407079577445984, 0.8425571322441101, 0.8504821062088013, 0.8482366800308228], "val_loss": [1.9233328104019165, 1.1271320581436157, 0.8992817401885986, 0.784253716468811, 0.7304123640060425, 0.7126622200012207, 0.6769340634346008, 0.7170908451080322, 0.616152822971344, 0.6012661457061768, 0.5970786809921265, 0.5876280069351196, 0.5944374799728394, 0.5569545030593872, 0.5654072165489197, 0.5240269899368286, 0.5344617366790771, 0.5471314787864685, 0.5020299553871155, 0.517652690410614, 0.5015077590942383, 0.4930703043937683, 0.48279857635498047, 0.4807667136192322, 0.489495187997818, 0.48290154337882996, 0.4723077416419983, 0.46093523502349854, 0.4886592626571655, 0.45505526661872864, 0.47938618063926697, 0.4566550552845001, 0.42850545048713684, 0.42425504326820374, 0.44117721915245056, 0.42993399500846863, 0.42864274978637695, 0.42993295192718506, 0.41404056549072266, 0.426741361618042, 0.44454434514045715, 0.41198259592056274, 0.41486260294914246, 0.3944926857948303, 0.3966712951660156, 0.39930447936058044, 0.40019938349723816, 0.3932531774044037, 0.39313647150993347], "val_accuracy": [0.5256666541099548, 0.6113333106040955, 0.6840000152587891, 0.7086666822433472, 0.7296666502952576, 0.7136666774749756, 0.7480000257492065, 0.7070000171661377, 0.765999972820282, 0.7756666541099548, 0.7730000019073486, 0.7853333353996277, 0.7689999938011169, 0.7856666445732117, 0.796999990940094, 0.8069999814033508, 0.8040000200271606, 0.7903333306312561, 0.8143333196640015, 0.8086666464805603, 0.8166666626930237, 0.8213333487510681, 0.824999988079071, 0.8226666450500488, 0.8119999766349792, 0.8233333230018616, 0.8266666531562805, 0.8320000171661377, 0.812666654586792, 0.8299999833106995, 0.8119999766349792, 0.8276666402816772, 0.843666672706604, 0.843999981880188, 0.8366666436195374, 0.8420000076293945, 0.8446666598320007, 0.8423333168029785, 0.8500000238418579, 0.8393333554267883, 0.8309999704360962, 0.8486666679382324, 0.8486666679382324, 0.8603333234786987, 0.8553333282470703, 0.8526666760444641, 0.859000027179718, 0.8573333621025085, 0.8573333621025085]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [6, 2, 3, 1, 4, 5, 8], [0, 0, 1, 0, 2, 0], [66, 39, 7, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 5, 2], [2, 5, 4, 1, 0], [16, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 7, 3, 5, 8, 7, 8, 4, 6, 1, 7, 1, 3, 9, 3, 8, 6, 6, 4, 3, 8, 0, 7], [0, 6, 1, 4, 6, 5, 5, 6, 3, 0, 4, 7, 1, 0, 2], [0, 13, 64, 8], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 3, 4, 0, 6, 2, 3, 4, 9, 5], [6, 1, 3, 4, 0, 0], [0, 90, 97]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 7, 6, 4, 12, 7, 5, 1, 38, 23, 15, 4, 16, 10, 6, 3], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.pow(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(grad, grad), tf.math.square(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.sqrt(grad)), tf.math.add(tf.math.sqrt(tf.math.pow(alpha, grad)), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.multiply(grad, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(grad, grad))), tf.math.pow(tf.math.multiply(sigma, tf.math.sqrt(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.negative(grad)), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(grad, tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha)), sigma), grad)), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 1, 6, 5, 8, 2, 5, 8, 4], [0, 0, 1, 0, 2, 0, 2], [0, 39, 39, 85], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 2, 0, 6, 3, 4, 2, 8], [2, 2, 3, 1, 0, 5], [16, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 7, 1, 1, 8, 2, 9], [0, 6, 4, 6], [0, 6], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 11, 7, 4, 14, 8, 6, 1, 11, 7, 4, 2, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.sqrt(grad)))), tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(beta, grad), tf.math.pow(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.add(grad, grad)), grad)), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 8, 0, 5, 3, 0, 9], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.09057142585515976, "mapping_values": [1, 11, 6, 5, 3, 2, 1, 1, 0, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309267044067383, 2.310452699661255, 2.310434579849243, 2.309528350830078, 2.310795307159424, 2.3100550174713135], "accuracy": [0.09919429570436478, 0.08717474341392517, 0.09245806187391281, 0.08849557489156723, 0.08849557489156723, 0.0936468094587326], "val_loss": [2.307864189147949, 2.307864189147949, 2.307864189147949, 2.307864189147949, 2.307864189147949, 2.307864189147949], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 7, 1, 3, 5], [0, 0, 1, 0, 2], [54, 39, 39], [1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [77, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.08971428871154785, "mapping_values": [1, 11, 6, 5, 3, 1, 0, 1, 0, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3104584217071533, 2.3099169731140137, 2.309852123260498, 2.309659242630005, 2.3101203441619873, 2.3094544410705566], "accuracy": [0.09140139818191528, 0.08915598690509796, 0.09377889335155487, 0.09206181764602661, 0.09576013684272766, 0.08968432247638702], "val_loss": [2.3086256980895996, 2.3086256980895996, 2.3086256980895996, 2.3086256980895996, 2.3086256980895996, 2.3086256980895996], "val_accuracy": [0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816, 0.09166666865348816]}}]