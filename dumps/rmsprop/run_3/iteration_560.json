[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1], [7, 3, 0, 3], [0, 1, 1, 2], [0], [1], [0], [1], [0]], "fitness": -0.8799999952316284, "mapping_values": [1, 10, 5, 5, 3, 15, 8, 7, 2, 8, 4, 4, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, alpha)), beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1141276359558105, 1.2854799032211304, 0.9006161093711853, 0.7477179765701294, 0.6510568261146545, 0.5984578132629395, 0.5449386835098267, 0.5192564129829407, 0.49348098039627075, 0.47485414147377014, 0.4514867067337036, 0.4315846562385559, 0.41725119948387146, 0.4095759689807892, 0.39079174399375916, 0.37796324491500854, 0.3730018436908722, 0.34559786319732666, 0.3457213044166565, 0.33971261978149414, 0.32669469714164734, 0.33221715688705444, 0.31436437368392944, 0.3045427203178406, 0.2912495732307434, 0.2893770635128021, 0.27459776401519775, 0.2686750888824463, 0.2542434632778168, 0.2549207806587219, 0.2474549114704132, 0.2353166937828064, 0.2352210432291031, 0.22608718276023865, 0.22045324742794037, 0.20817507803440094, 0.2066163569688797], "accuracy": [0.28305375576019287, 0.5893540978431702, 0.6744155287742615, 0.7111346125602722, 0.7512878179550171, 0.7707040309906006, 0.7977809906005859, 0.800290584564209, 0.809140145778656, 0.8215559124946594, 0.8251221776008606, 0.8404437899589539, 0.8430854678153992, 0.8466516733169556, 0.8516708612442017, 0.8599920868873596, 0.8569541573524475, 0.8720116019248962, 0.8710870146751404, 0.8747853636741638, 0.8794082403182983, 0.8767666220664978, 0.8767666220664978, 0.8842953443527222, 0.8881257176399231, 0.8898428082466125, 0.8967111110687256, 0.9005415439605713, 0.9041078090667725, 0.9027869701385498, 0.9063531756401062, 0.9140139818191528, 0.9075419306755066, 0.9121648669242859, 0.9148064851760864, 0.9215427041053772, 0.9204860925674438], "val_loss": [1.0718753337860107, 0.8780998587608337, 0.6786661148071289, 0.5667974352836609, 0.5274632573127747, 0.4778060019016266, 0.45099446177482605, 0.4290582537651062, 0.41114670038223267, 0.3994693160057068, 0.38328856229782104, 0.3767406940460205, 0.36145931482315063, 0.35313984751701355, 0.3477644920349121, 0.34594792127609253, 0.3332073390483856, 0.32470929622650146, 0.33242690563201904, 0.33648940920829773, 0.3233390152454376, 0.32466185092926025, 0.31876254081726074, 0.3112848997116089, 0.3022047281265259, 0.30465394258499146, 0.2995307147502899, 0.30256974697113037, 0.29729926586151123, 0.30382657051086426, 0.2972928583621979, 0.2895248532295227, 0.29739728569984436, 0.29269400238990784, 0.29641813039779663, 0.2925165593624115, 0.30343908071517944], "val_accuracy": [0.6579999923706055, 0.6980000138282776, 0.7276666760444641, 0.7646666765213013, 0.7836666703224182, 0.8066666722297668, 0.8233333230018616, 0.8339999914169312, 0.8450000286102295, 0.8503333330154419, 0.8533333539962769, 0.8576666712760925, 0.8619999885559082, 0.8633333444595337, 0.8700000047683716, 0.871999979019165, 0.871999979019165, 0.8806666731834412, 0.8736666440963745, 0.8786666393280029, 0.8806666731834412, 0.878000020980835, 0.8840000033378601, 0.8853333592414856, 0.8893333077430725, 0.8913333415985107, 0.8896666765213013, 0.8886666893959045, 0.893666684627533, 0.8939999938011169, 0.8966666460037231, 0.8976666927337646, 0.8926666378974915, 0.8946666717529297, 0.8923333287239075, 0.8963333368301392, 0.890333354473114]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 1, 1], [0, 7], [0, 6], [0], [1], [0], [2], [0]], "fitness": -0.8291428685188293, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2091405391693115, 1.5989389419555664, 1.1103776693344116, 0.9775360822677612, 0.8559300899505615, 0.8193058371543884, 0.8046634197235107, 0.7419961094856262, 0.7122538089752197, 0.7065255045890808, 0.6907207369804382, 0.663128674030304, 0.6511291265487671, 0.6222732067108154, 0.6189708113670349, 0.5994083881378174, 0.6111226677894592, 0.589225172996521, 0.5740323662757874, 0.5553014874458313, 0.554914116859436, 0.5413625836372375, 0.5400328040122986, 0.5257967710494995, 0.5188379287719727, 0.5107659101486206, 0.5103580951690674, 0.5017061829566956, 0.49451565742492676], "accuracy": [0.27024170756340027, 0.5103685259819031, 0.6096948981285095, 0.6556597352027893, 0.6948884129524231, 0.6970016956329346, 0.7082287669181824, 0.726192057132721, 0.7387399077415466, 0.7432307600975037, 0.7457403540611267, 0.7544577717781067, 0.7621186375617981, 0.7680623531341553, 0.7687227725982666, 0.7737419009208679, 0.7709681391716003, 0.7852331399917603, 0.7886672616004944, 0.8009510040283203, 0.7924976944923401, 0.8026680946350098, 0.8021397590637207, 0.8033285140991211, 0.8076872229576111, 0.8137630224227905, 0.8088759779930115, 0.8145555257797241, 0.817461371421814], "val_loss": [1.9072749614715576, 1.088260293006897, 0.8291181921958923, 0.7753832340240479, 0.7480531930923462, 0.6675054430961609, 0.6547874212265015, 0.6160061955451965, 0.6281441450119019, 0.6124351620674133, 0.6134524941444397, 0.5773317813873291, 0.550059974193573, 0.539294421672821, 0.5357487201690674, 0.5604673027992249, 0.5151126980781555, 0.5246690511703491, 0.5112420916557312, 0.5164651870727539, 0.5000559091567993, 0.49744918942451477, 0.4846877455711365, 0.4597502052783966, 0.4674893915653229, 0.45922839641571045, 0.4463612139225006, 0.46503522992134094, 0.45205408334732056], "val_accuracy": [0.5556666851043701, 0.6669999957084656, 0.7206666469573975, 0.715666651725769, 0.7113333344459534, 0.7476666569709778, 0.7509999871253967, 0.7586666941642761, 0.7423333525657654, 0.7599999904632568, 0.7476666569709778, 0.7796666622161865, 0.7879999876022339, 0.7986666560173035, 0.7950000166893005, 0.7876666784286499, 0.8019999861717224, 0.8056666851043701, 0.8050000071525574, 0.8083333373069763, 0.8130000233650208, 0.8009999990463257, 0.809333324432373, 0.8316666483879089, 0.8233333230018616, 0.8299999833106995, 0.8296666741371155, 0.8136666417121887, 0.8213333487510681]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 2, 3, 1, 2, 5], [0, 0, 1, 0, 2, 1], [48, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 0], [7, 3, 0, 3, 9], [3, 1, 1, 2], [0], [1], [0], [4], [0]], "fitness": -0.2191428542137146, "mapping_values": [1, 11, 5, 6, 3, 15, 8, 7, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.pow(grad, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(sigma), tf.math.multiply(alpha, alpha)), tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.7865030765533447, 2.298957586288452, 2.226548910140991, 2.3041372299194336, 2.3034827709198, 2.3034393787384033, 2.3021669387817383], "accuracy": [0.22203142940998077, 0.13895125687122345, 0.1990489959716797, 0.1022322028875351, 0.09919429570436478, 0.09430722147226334, 0.10210011899471283], "val_loss": [2.3250226974487305, 2.276916027069092, 2.3045296669006348, 2.302626371383667, 2.302333354949951, 2.302086591720581, 2.3009440898895264], "val_accuracy": [0.14166666567325592, 0.22166666388511658, 0.1003333330154419, 0.1003333330154419, 0.10100000351667404, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [5, 4, 3, 1, 3, 5], [0, 0, 1, 0, 2], [26, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 3], [16, 1], [0, 0, 0, 1, 0, 0, 1, 1], [7, 9, 0, 2], [4, 1, 1, 2], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 15, 8, 7, 2, 4, 3, 1, 1, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.pow(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [0, 2, 3, 1, 3, 5, 5, 0, 1, 6, 4, 9], [0, 0, 1, 0, 2, 2, 3], [26, 39, 39, 84], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [2, 2, 4, 6, 3, 5, 5, 4], [2, 2, 0, 4, 0, 3, 1], [16, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [7, 3, 0, 3, 0, 4, 5, 6, 2, 5, 2, 4, 7, 8, 6, 5, 2, 1], [0, 1, 1, 2, 0, 7, 0, 5, 6, 3, 0, 1, 5], [59, 36, 98, 75], [1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 12, 7, 4, 13, 7, 6, 2, 31, 18, 13, 4, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), alpha), tf.math.subtract(tf.math.divide_no_nan(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), grad), grad)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.square(grad))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.negative(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), alpha)), alpha), tf.math.pow(tf.math.square(tf.math.divide_no_nan(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.square(tf.math.add(tf.math.pow(grad, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(tf.math.subtract(sigma, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), alpha))), grad)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09457138925790787, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 8, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [4, 2, 0, 6, 3, 8, 2], [1, 0, 3, 1, 1], [16, 1], [0, 0, 1, 1, 1, 0, 1, 0], [7, 3, 0, 3, 9], [0, 1, 1, 2], [0, 62], [1], [0], [2], [0]], "fitness": -0.09799999743700027, "mapping_values": [1, 2, 1, 1, 1, 8, 4, 4, 1, 5, 2, 3, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(alpha, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), alpha), alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309688091278076, 2.3100497722625732, 2.3093113899230957, 2.3096632957458496, 2.3087615966796875, 2.3097665309906006], "accuracy": [0.08757099509239197, 0.09153348207473755, 0.09259014576673508, 0.09391097724437714, 0.0956280529499054, 0.09126931428909302], "val_loss": [2.308046340942383, 2.308046340942383, 2.308046340942383, 2.308046340942383, 2.308046340942383, 2.308046340942383], "val_accuracy": [0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076, 0.08900000154972076]}}]