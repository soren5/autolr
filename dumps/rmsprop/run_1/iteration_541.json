[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.8768571615219116, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5719877481460571, 0.905035674571991, 0.7132470011711121, 0.6290118098258972, 0.5772889256477356, 0.5300399661064148, 0.4984924793243408, 0.4696540832519531, 0.4508989453315735, 0.4295291006565094, 0.3928512632846832, 0.36864352226257324, 0.3546794652938843, 0.3604147732257843, 0.3369254469871521, 0.3110351264476776, 0.3083447813987732, 0.29889360070228577, 0.28484824299812317, 0.2717207074165344, 0.2562370300292969, 0.24966870248317719, 0.2422468364238739], "accuracy": [0.44710078835487366, 0.6837934255599976, 0.7405890822410583, 0.7707040309906006, 0.7890635132789612, 0.8064984679222107, 0.8207634687423706, 0.8280280232429504, 0.839519202709198, 0.8490291833877563, 0.8580108284950256, 0.8656716346740723, 0.8728041052818298, 0.8716153502464294, 0.8775591254234314, 0.8887861371040344, 0.8902390599250793, 0.8963148593902588, 0.8939374089241028, 0.9019944667816162, 0.9070135951042175, 0.9078060984611511, 0.9115044474601746], "val_loss": [0.9975670576095581, 0.6447177529335022, 0.5735924243927002, 0.5706664323806763, 0.4915817081928253, 0.4848896563053131, 0.4657159447669983, 0.4201098680496216, 0.4190950393676758, 0.4140464961528778, 0.36485856771469116, 0.36031535267829895, 0.3616061210632324, 0.40839770436286926, 0.363942414522171, 0.3482498228549957, 0.3495192527770996, 0.3338126540184021, 0.3419082760810852, 0.3381653130054474, 0.3596552014350891, 0.3505549430847168, 0.36649438738822937], "val_accuracy": [0.6309999823570251, 0.762666642665863, 0.7979999780654907, 0.7820000052452087, 0.8320000171661377, 0.8116666674613953, 0.8339999914169312, 0.8429999947547913, 0.8526666760444641, 0.8500000238418579, 0.8703333139419556, 0.8709999918937683, 0.8659999966621399, 0.847000002861023, 0.8709999918937683, 0.8723333477973938, 0.8743333220481873, 0.8836666941642761, 0.8713333606719971, 0.8773333430290222, 0.8733333349227905, 0.8759999871253967, 0.8706666827201843]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8134285807609558, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.209465265274048, 1.6003453731536865, 1.1271933317184448, 1.0094623565673828, 0.8851993083953857, 0.8055465817451477, 0.7833226919174194, 0.74347984790802, 0.7194719314575195, 0.703245997428894, 0.6877084970474243, 0.6763960123062134, 0.6440815329551697, 0.6218311786651611, 0.6175813674926758, 0.6060008406639099, 0.5987216830253601, 0.5756962895393372, 0.5610243082046509, 0.5512795448303223, 0.5635719895362854, 0.5407875776290894, 0.5314569473266602, 0.5296720266342163, 0.5200904011726379, 0.511248767375946, 0.507626473903656], "accuracy": [0.2592788338661194, 0.5140668153762817, 0.6107515692710876, 0.6324131488800049, 0.6793025732040405, 0.7074362635612488, 0.7143045663833618, 0.724739134311676, 0.7371549606323242, 0.741909921169281, 0.7486461400985718, 0.7475894689559937, 0.7568352818489075, 0.7680623531341553, 0.7712323069572449, 0.7713643908500671, 0.7754589915275574, 0.7848368883132935, 0.7897239327430725, 0.7968564033508301, 0.7903843522071838, 0.7997622489929199, 0.8010830879211426, 0.7985734939575195, 0.8082155585289001, 0.8092722296714783, 0.813498854637146], "val_loss": [1.9158228635787964, 1.1104882955551147, 0.9145457148551941, 0.7681258916854858, 0.7417568564414978, 0.6897954344749451, 0.7312570214271545, 0.6318028569221497, 0.6200801730155945, 0.6028940677642822, 0.615408182144165, 0.5684337019920349, 0.5430526733398438, 0.5691768527030945, 0.5565232634544373, 0.5614564418792725, 0.5165722370147705, 0.5117798447608948, 0.4940403699874878, 0.47838640213012695, 0.5052417516708374, 0.47280484437942505, 0.47585269808769226, 0.47132784128189087, 0.48747485876083374, 0.4901169538497925, 0.4514475166797638], "val_accuracy": [0.596666693687439, 0.6173333525657654, 0.643666684627533, 0.7056666612625122, 0.7203333377838135, 0.7236666679382324, 0.7083333134651184, 0.7416666746139526, 0.7720000147819519, 0.778333306312561, 0.7620000243186951, 0.777999997138977, 0.7929999828338623, 0.778333306312561, 0.781333327293396, 0.7823333144187927, 0.8149999976158142, 0.7993333339691162, 0.8220000267028809, 0.828000009059906, 0.8106666803359985, 0.8366666436195374, 0.8289999961853027, 0.8330000042915344, 0.8223333358764648, 0.8130000233650208, 0.8353333473205566]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 7, 4, 4, 0, 6, 5, 5, 0], [6, 3, 1, 2, 2], [0], [0, 0, 0, 0, 1, 0, 1, 1], [0, 4, 5, 0, 1], [6, 3, 3], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 2, 1, 1, 0, 14, 9, 5, 0, 8, 5, 3, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.pow(tf.math.pow(grad, tf.math.negative(tf.math.divide_no_nan(sigma, tf.math.square(tf.math.square(alpha))))), tf.math.negative(beta)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.square(tf.math.negative(grad)), tf.math.subtract(sigma, sigma)))", "other_info": {"loss": [1144960128.0, 21532749824.0, 100185972736.0, 275838042112.0, 593925832704.0, 1090393079808.0], "accuracy": [0.1002509593963623, 0.09919429570436478, 0.09972262382507324, 0.09655263274908066, 0.09959053993225098, 0.09800554811954498], "val_loss": [5234482176.0, 41870794752.0, 141307625472.0, 334944403456.0, 654181400576.0, 1130415915008.0], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 7, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2, 2, 0, 1, 8, 8, 2, 8, 0], [2, 0, 3, 1, 0, 3, 4, 0], [16, 37, 57], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 23, 15, 8, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(grad, alpha), tf.math.negative(tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.sqrt(tf.math.negative(grad)), grad)))))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 2, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 2, 8, 6, 3, 8, 2, 6, 1, 6, 6, 6, 1, 9, 9, 6, 5], [2, 0, 3, 1, 0, 2, 4, 4, 3, 3], [16, 37, 84, 91], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 27, 17, 10, 4, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(grad, alpha), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.subtract(grad, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(grad), grad))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09351472556591034, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 2, 3, 8, 3, 5], [1, 0, 0, 0, 2], [65, 39, 39], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 2, 6, 6, 3, 8, 0], [2, 0, 3, 1, 0], [51, 1], [0, 1], [8], [4], [0], [1], [0], [2], [0]], "fitness": -0.09028571099042892, "mapping_values": [1, 10, 6, 4, 3, 2, 1, 1, 0, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.sqrt(alpha), tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310098886489868, 2.3101613521575928, 2.3108904361724854, 2.311467170715332, 2.31093168258667, 2.311206817626953], "accuracy": [0.09351472556591034, 0.09272222965955734, 0.09153348207473755, 0.09219389408826828, 0.09245806187391281, 0.08836349099874496], "val_loss": [2.308441638946533, 2.308441638946533, 2.308441638946533, 2.308441638946533, 2.308441638946533, 2.308441638946533], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}]