[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.8768571615219116, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5719877481460571, 0.905035674571991, 0.7132470011711121, 0.6290118098258972, 0.5772889256477356, 0.5300399661064148, 0.4984924793243408, 0.4696540832519531, 0.4508989453315735, 0.4295291006565094, 0.3928512632846832, 0.36864352226257324, 0.3546794652938843, 0.3604147732257843, 0.3369254469871521, 0.3110351264476776, 0.3083447813987732, 0.29889360070228577, 0.28484824299812317, 0.2717207074165344, 0.2562370300292969, 0.24966870248317719, 0.2422468364238739], "accuracy": [0.44710078835487366, 0.6837934255599976, 0.7405890822410583, 0.7707040309906006, 0.7890635132789612, 0.8064984679222107, 0.8207634687423706, 0.8280280232429504, 0.839519202709198, 0.8490291833877563, 0.8580108284950256, 0.8656716346740723, 0.8728041052818298, 0.8716153502464294, 0.8775591254234314, 0.8887861371040344, 0.8902390599250793, 0.8963148593902588, 0.8939374089241028, 0.9019944667816162, 0.9070135951042175, 0.9078060984611511, 0.9115044474601746], "val_loss": [0.9975670576095581, 0.6447177529335022, 0.5735924243927002, 0.5706664323806763, 0.4915817081928253, 0.4848896563053131, 0.4657159447669983, 0.4201098680496216, 0.4190950393676758, 0.4140464961528778, 0.36485856771469116, 0.36031535267829895, 0.3616061210632324, 0.40839770436286926, 0.363942414522171, 0.3482498228549957, 0.3495192527770996, 0.3338126540184021, 0.3419082760810852, 0.3381653130054474, 0.3596552014350891, 0.3505549430847168, 0.36649438738822937], "val_accuracy": [0.6309999823570251, 0.762666642665863, 0.7979999780654907, 0.7820000052452087, 0.8320000171661377, 0.8116666674613953, 0.8339999914169312, 0.8429999947547913, 0.8526666760444641, 0.8500000238418579, 0.8703333139419556, 0.8709999918937683, 0.8659999966621399, 0.847000002861023, 0.8709999918937683, 0.8723333477973938, 0.8743333220481873, 0.8836666941642761, 0.8713333606719971, 0.8773333430290222, 0.8733333349227905, 0.8759999871253967, 0.8706666827201843]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8248571157455444, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2093093395233154, 1.5910956859588623, 1.1097357273101807, 0.942516565322876, 0.8679150938987732, 0.7988735437393188, 0.7804714441299438, 0.7455182075500488, 0.6952667832374573, 0.7137474417686462, 0.6751652359962463, 0.6710111498832703, 0.6359824538230896, 0.6283056735992432, 0.6431106328964233, 0.6112455725669861, 0.5936852693557739, 0.591334342956543, 0.5820141434669495, 0.5706961750984192, 0.5790911316871643, 0.5558527112007141, 0.5442097187042236, 0.5452985763549805, 0.5342184901237488, 0.5268483757972717, 0.5237146019935608], "accuracy": [0.2727513015270233, 0.5110289454460144, 0.6198652982711792, 0.6651697158813477, 0.6832650899887085, 0.71100252866745, 0.7132478952407837, 0.7264562249183655, 0.7403249144554138, 0.7297582626342773, 0.7523444890975952, 0.752212405204773, 0.7637035846710205, 0.769911527633667, 0.7592127919197083, 0.7709681391716003, 0.7783648371696472, 0.7755910754203796, 0.7828556299209595, 0.7902522683143616, 0.7885351777076721, 0.7910447716712952, 0.7980451583862305, 0.7979130744934082, 0.7980451583862305, 0.8063663840293884, 0.8095363974571228], "val_loss": [1.9241912364959717, 1.0870023965835571, 1.0327863693237305, 0.8359912037849426, 0.7248537540435791, 0.770869791507721, 0.7071762084960938, 0.6630915403366089, 0.7387951016426086, 0.6500906348228455, 0.6182335615158081, 0.6059631705284119, 0.6079281568527222, 0.5996199250221252, 0.5775738954544067, 0.5620558261871338, 0.5528519749641418, 0.5378239154815674, 0.558870792388916, 0.581398069858551, 0.5346235036849976, 0.5117809772491455, 0.5035034418106079, 0.5368903279304504, 0.5192141532897949, 0.5050939917564392, 0.503435492515564], "val_accuracy": [0.5426666736602783, 0.6549999713897705, 0.6366666555404663, 0.6886666417121887, 0.7256666421890259, 0.7043333053588867, 0.7176666855812073, 0.7413333058357239, 0.722000002861023, 0.7509999871253967, 0.7593333125114441, 0.7613333463668823, 0.7620000243186951, 0.765999972820282, 0.7760000228881836, 0.7863333225250244, 0.7903333306312561, 0.7940000295639038, 0.7900000214576721, 0.7716666460037231, 0.7906666398048401, 0.8133333325386047, 0.8106666803359985, 0.7906666398048401, 0.7986666560173035, 0.8096666932106018, 0.8100000023841858]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [8, 2, 3, 1, 3, 5], [0, 0, 1, 0, 1], [0, 7, 39], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 0, 4, 3, 4, 5, 3, 5, 2, 5, 7, 3, 1, 3, 9, 2, 6, 9, 5, 4, 4, 9], [6, 5, 4, 7, 6, 3, 7, 3, 7, 0, 1, 5], [0, 37, 48, 56], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 5, 3, 2, 1, 35, 23, 12, 4, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(grad, tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.pow(grad, tf.math.square(grad)), grad), tf.math.multiply(tf.math.square(tf.math.add(tf.math.square(tf.math.add(grad, tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), sigma), grad)), tf.math.square(sigma)), tf.math.pow(grad, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.30318546295166, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 2, 3, 1, 3, 1, 7, 4, 4, 9, 7, 7, 1, 9, 7, 7, 5, 5, 4, 1, 2, 6, 7, 6, 4, 9, 1, 3, 7, 8, 8, 7, 7, 3, 4, 2, 5, 6, 4, 9, 1, 9, 2, 0, 3, 9], [0, 3, 0, 0, 2, 1, 0, 0, 3, 0, 2, 3, 1, 2, 3, 2, 2, 3, 0, 3, 0, 3, 0, 0, 1, 3, 0, 0], [0, 39, 39, 29, 99, 55, 60, 70, 44, 37, 71, 33, 36, 90, 59, 22, 47, 49], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 2, 4, 8, 4, 8, 0, 4, 7], [4, 0, 3, 1, 0, 5], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 74, 46, 28, 18, 15, 9, 6, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.subtract(grad, alpha), tf.constant(1.0, shape=shape, dtype=tf.float32)), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(tf.math.square(grad), tf.math.square(tf.math.pow(tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, grad))))), grad)))), grad)), tf.math.multiply(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.pow(tf.math.add(grad, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.divide_no_nan(tf.math.pow(grad, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), alpha))), tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.multiply(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.pow(grad, tf.math.sqrt(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.math.sqrt(tf.math.negative(tf.math.pow(alpha, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 2, 3, 1, 3, 6, 2, 4], [0, 0, 1, 0, 2, 1, 3, 2, 0], [0, 39, 39, 73], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0], [0, 2, 6, 6, 3, 8, 2, 7, 7, 1, 1, 9, 1, 5, 0, 8, 9, 0, 6, 3, 2, 8, 0, 0, 3, 5, 0, 1, 0, 2, 1, 9], [2, 2, 3, 1, 3, 3, 4, 0, 5, 4, 5, 2, 3, 0, 3], [16, 37, 16, 41, 3], [0, 1], [0], [0], [52], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 8, 9, 4, 47, 32, 15, 5, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad), alpha), tf.math.pow(grad, grad))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.divide_no_nan(beta, tf.math.divide_no_nan(tf.math.multiply(beta, grad), tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(tf.math.subtract(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha), grad), tf.math.subtract(tf.math.square(tf.math.negative(tf.math.sqrt(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.negative(grad))), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(grad, tf.math.sqrt(tf.math.negative(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), grad), tf.math.multiply(grad, tf.math.square(tf.math.negative(grad))))), beta)))), tf.math.subtract(tf.math.negative(tf.math.add(tf.math.subtract(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [5, 2, 3, 1, 6, 5], [0, 0, 1, 0, 2], [0, 39, 7], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [5, 2, 0, 2, 3, 8, 2], [2, 0, 3, 2, 0], [16, 37], [1, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.09942857176065445, "mapping_values": [1, 6, 3, 3, 2, 4, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.311133623123169, 2.3105649948120117, 2.316277503967285, 2.330942392349243, 2.3767662048339844, 2.48618221282959, 2.7068169116973877], "accuracy": [0.09206181764602661, 0.0882314071059227, 0.09642054885625839, 0.09668471664190292, 0.09774138033390045, 0.10289261490106583, 0.0936468094587326], "val_loss": [2.30948543548584, 2.309744358062744, 2.311485767364502, 2.3235983848571777, 2.358743906021118, 2.4410760402679443, 2.6212806701660156], "val_accuracy": [0.0963333323597908, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}]