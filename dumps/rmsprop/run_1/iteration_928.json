[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.8768571615219116, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5719877481460571, 0.905035674571991, 0.7132470011711121, 0.6290118098258972, 0.5772889256477356, 0.5300399661064148, 0.4984924793243408, 0.4696540832519531, 0.4508989453315735, 0.4295291006565094, 0.3928512632846832, 0.36864352226257324, 0.3546794652938843, 0.3604147732257843, 0.3369254469871521, 0.3110351264476776, 0.3083447813987732, 0.29889360070228577, 0.28484824299812317, 0.2717207074165344, 0.2562370300292969, 0.24966870248317719, 0.2422468364238739], "accuracy": [0.44710078835487366, 0.6837934255599976, 0.7405890822410583, 0.7707040309906006, 0.7890635132789612, 0.8064984679222107, 0.8207634687423706, 0.8280280232429504, 0.839519202709198, 0.8490291833877563, 0.8580108284950256, 0.8656716346740723, 0.8728041052818298, 0.8716153502464294, 0.8775591254234314, 0.8887861371040344, 0.8902390599250793, 0.8963148593902588, 0.8939374089241028, 0.9019944667816162, 0.9070135951042175, 0.9078060984611511, 0.9115044474601746], "val_loss": [0.9975670576095581, 0.6447177529335022, 0.5735924243927002, 0.5706664323806763, 0.4915817081928253, 0.4848896563053131, 0.4657159447669983, 0.4201098680496216, 0.4190950393676758, 0.4140464961528778, 0.36485856771469116, 0.36031535267829895, 0.3616061210632324, 0.40839770436286926, 0.363942414522171, 0.3482498228549957, 0.3495192527770996, 0.3338126540184021, 0.3419082760810852, 0.3381653130054474, 0.3596552014350891, 0.3505549430847168, 0.36649438738822937], "val_accuracy": [0.6309999823570251, 0.762666642665863, 0.7979999780654907, 0.7820000052452087, 0.8320000171661377, 0.8116666674613953, 0.8339999914169312, 0.8429999947547913, 0.8526666760444641, 0.8500000238418579, 0.8703333139419556, 0.8709999918937683, 0.8659999966621399, 0.847000002861023, 0.8709999918937683, 0.8723333477973938, 0.8743333220481873, 0.8836666941642761, 0.8713333606719971, 0.8773333430290222, 0.8733333349227905, 0.8759999871253967, 0.8706666827201843]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.7842857241630554, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2105093002319336, 1.6124012470245361, 1.144919991493225, 1.0202598571777344, 0.8963738083839417, 0.8183051943778992, 0.8125765919685364, 0.76786869764328, 0.7419190406799316, 0.7317584753036499, 0.6879489421844482, 0.6924189329147339, 0.657423198223114, 0.6623823642730713, 0.6348564028739929, 0.6317858695983887, 0.6096282601356506], "accuracy": [0.2802800238132477, 0.5095760226249695, 0.6008453369140625, 0.6362435817718506, 0.6789063811302185, 0.705058753490448, 0.6995112895965576, 0.7190595865249634, 0.7217012047767639, 0.7326641082763672, 0.7490423917770386, 0.7413815855979919, 0.7544577717781067, 0.757099449634552, 0.7618544697761536, 0.7630431652069092, 0.7778365015983582], "val_loss": [1.9250184297561646, 1.1266698837280273, 0.8638325929641724, 0.8736024498939514, 0.7100908160209656, 0.7170437574386597, 0.6818755865097046, 0.6543623208999634, 0.6312342286109924, 0.6080880165100098, 0.6388376355171204, 0.571733832359314, 0.5807489156723022, 0.5946663618087769, 0.5474400520324707, 0.5544164180755615, 0.5883811116218567], "val_accuracy": [0.5809999704360962, 0.6349999904632568, 0.7006666660308838, 0.6853333115577698, 0.7413333058357239, 0.718999981880188, 0.7459999918937683, 0.7336666584014893, 0.7590000033378601, 0.7713333368301392, 0.7429999709129333, 0.7993333339691162, 0.7876666784286499, 0.762333333492279, 0.7953333258628845, 0.7846666574478149, 0.765999972820282]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 6, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 2, 0, 6, 8, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 1, 4, 0, 4, 4, 2, 8, 5, 6, 6, 0, 5, 4, 9, 4, 2, 5, 3, 8, 4, 2, 4, 7, 9, 2, 8, 3, 6, 3, 6, 4, 0, 4, 5, 3, 3, 9, 1, 8, 4, 5, 0, 6, 7, 8, 7, 2, 3, 3, 7, 1, 6, 6, 8, 5, 6, 1, 2, 8, 5, 9, 2, 5, 0, 3, 5, 7, 9, 2, 0, 1, 5, 0, 2, 2, 7, 0, 8], [6, 0, 7, 7, 5, 0, 0, 4, 3, 4, 5, 3, 6, 5, 0, 6, 3, 4, 2, 2, 4, 0, 0, 4, 7, 2, 6, 0, 4, 4, 1, 6, 7, 0, 1, 3, 3, 4, 3, 6, 1, 0, 3], [0, 17, 23, 24, 22, 41, 48, 86, 83, 23, 71, 21, 7, 9], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 122, 79, 43, 14, 1, 0, 1, 0], "tree_depth": 77, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.sqrt(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.pow(grad, tf.math.negative(tf.math.pow(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.pow(grad, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(tf.math.square(grad), tf.math.multiply(tf.math.sqrt(tf.math.pow(tf.math.add(tf.math.pow(grad, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), grad))), tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(sigma, tf.math.pow(grad, grad)), tf.math.negative(tf.math.pow(tf.math.square(tf.math.multiply(tf.math.multiply(sigma, grad), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.sqrt(grad), tf.math.pow(tf.math.square(tf.math.negative(tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(tf.math.multiply(grad, tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.divide_no_nan(sigma, tf.math.sqrt(grad)), tf.math.square(beta)), beta), tf.math.divide_no_nan(grad, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.sqrt(grad))), beta), tf.math.square(grad))), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(tf.math.square(grad), tf.math.negative(tf.math.multiply(tf.math.square(alpha), grad))))), tf.math.add(grad, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, sigma)))), tf.math.negative(tf.math.subtract(sigma, grad))), sigma)))), tf.math.square(tf.math.negative(tf.math.add(tf.math.add(tf.math.add(grad, tf.math.negative(alpha)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(sigma)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 5, 8, 2], [2, 0, 3, 1, 0], [16, 37], [1, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.0917142853140831, "mapping_values": [1, 6, 3, 3, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.311009168624878, 2.310176372528076, 2.310128688812256, 2.310863971710205, 2.3111472129821777, 2.310631275177002], "accuracy": [0.09140139818191528, 0.09298639744520187, 0.09245806187391281, 0.0886276587843895, 0.09509972482919693, 0.08981640636920929], "val_loss": [2.3090665340423584, 2.3090665340423584, 2.3090665340423584, 2.3090665340423584, 2.3090665340423584, 2.3090665340423584], "val_accuracy": [0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499, 0.08866667002439499]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 3, 2], [0, 54, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 2, 0, 0, 3, 8, 2, 5], [2, 0, 0, 1, 0], [16, 1], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.0908571407198906, "mapping_values": [1, 11, 6, 5, 2, 12, 8, 4, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(grad, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310195207595825, 2.310809373855591, 2.309556484222412, 2.3105721473693848, 2.309436798095703, 2.3100709915161133], "accuracy": [0.09034473448991776, 0.08915598690509796, 0.08928807079792023, 0.08968432247638702, 0.09311848133802414, 0.09140139818191528], "val_loss": [2.3090898990631104, 2.309095621109009, 2.3091018199920654, 2.309107780456543, 2.3091135025024414, 2.309119462966919], "val_accuracy": [0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [3, 1, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 2, 0, 6, 3, 7, 2], [2, 0, 3, 1, 0, 1], [16, 37], [0, 1], [0], [7], [0], [1], [0], [2], [0]], "fitness": -0.08571428805589676, "mapping_values": [1, 1, 0, 1, 0, 13, 7, 6, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.add(grad, alpha), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [4.676224327320863e+17, 5.2432053652475085e+17, 5.2930163343622144e+17, 5.372373929694331e+17, 5.4178528229955994e+17, 5.3761720551735296e+17], "accuracy": [0.10342095047235489, 0.09628847241401672, 0.09496764093637466, 0.09457138925790787, 0.09417514503002167, 0.09642054885625839], "val_loss": [4.3297173609958605e+17, 4.329716673801093e+17, 4.329714612216791e+17, 4.329713925022024e+17, 4.329712207035105e+17, 4.329712207035105e+17], "val_accuracy": [0.08500000089406967, 0.08500000089406967, 0.08500000089406967, 0.08500000089406967, 0.08500000089406967, 0.08500000089406967]}}]