[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.8768571615219116, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5719877481460571, 0.905035674571991, 0.7132470011711121, 0.6290118098258972, 0.5772889256477356, 0.5300399661064148, 0.4984924793243408, 0.4696540832519531, 0.4508989453315735, 0.4295291006565094, 0.3928512632846832, 0.36864352226257324, 0.3546794652938843, 0.3604147732257843, 0.3369254469871521, 0.3110351264476776, 0.3083447813987732, 0.29889360070228577, 0.28484824299812317, 0.2717207074165344, 0.2562370300292969, 0.24966870248317719, 0.2422468364238739], "accuracy": [0.44710078835487366, 0.6837934255599976, 0.7405890822410583, 0.7707040309906006, 0.7890635132789612, 0.8064984679222107, 0.8207634687423706, 0.8280280232429504, 0.839519202709198, 0.8490291833877563, 0.8580108284950256, 0.8656716346740723, 0.8728041052818298, 0.8716153502464294, 0.8775591254234314, 0.8887861371040344, 0.8902390599250793, 0.8963148593902588, 0.8939374089241028, 0.9019944667816162, 0.9070135951042175, 0.9078060984611511, 0.9115044474601746], "val_loss": [0.9975670576095581, 0.6447177529335022, 0.5735924243927002, 0.5706664323806763, 0.4915817081928253, 0.4848896563053131, 0.4657159447669983, 0.4201098680496216, 0.4190950393676758, 0.4140464961528778, 0.36485856771469116, 0.36031535267829895, 0.3616061210632324, 0.40839770436286926, 0.363942414522171, 0.3482498228549957, 0.3495192527770996, 0.3338126540184021, 0.3419082760810852, 0.3381653130054474, 0.3596552014350891, 0.3505549430847168, 0.36649438738822937], "val_accuracy": [0.6309999823570251, 0.762666642665863, 0.7979999780654907, 0.7820000052452087, 0.8320000171661377, 0.8116666674613953, 0.8339999914169312, 0.8429999947547913, 0.8526666760444641, 0.8500000238418579, 0.8703333139419556, 0.8709999918937683, 0.8659999966621399, 0.847000002861023, 0.8709999918937683, 0.8723333477973938, 0.8743333220481873, 0.8836666941642761, 0.8713333606719971, 0.8773333430290222, 0.8733333349227905, 0.8759999871253967, 0.8706666827201843]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.801714301109314, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.21138334274292, 1.61410391330719, 1.1503535509109497, 0.9742462635040283, 0.8806964755058289, 0.8297931551933289, 0.8081654906272888, 0.7612025141716003, 0.7273281216621399, 0.7144398093223572, 0.6854236125946045, 0.6688185930252075, 0.6467151045799255, 0.6452268958091736, 0.6351105570793152, 0.6107037663459778, 0.5922888517379761, 0.6026443243026733, 0.5774219036102295, 0.5647974610328674, 0.5571675896644592, 0.5603044033050537, 0.5490784049034119, 0.5529546141624451, 0.5363699197769165, 0.523264467716217, 0.5201627016067505, 0.5307701230049133, 0.5075965523719788, 0.5117064118385315, 0.5003825426101685, 0.47898533940315247, 0.47569531202316284, 0.47996824979782104, 0.4870213270187378, 0.46384525299072266, 0.4653579890727997, 0.4529836177825928, 0.4599806070327759, 0.4641994833946228, 0.44480809569358826, 0.44849693775177, 0.43968653678894043, 0.4364040195941925, 0.4350031614303589, 0.428351491689682, 0.42517712712287903, 0.4245239198207855, 0.4317326247692108, 0.41979292035102844, 0.4190700352191925], "accuracy": [0.2661471366882324, 0.5081230998039246, 0.5934486985206604, 0.655527651309967, 0.6795667409896851, 0.6984546184539795, 0.7049266695976257, 0.7248712182044983, 0.7276449799537659, 0.7317395210266113, 0.7396644949913025, 0.7504953145980835, 0.7619865536689758, 0.7560427784919739, 0.7621186375617981, 0.774798572063446, 0.7783648371696472, 0.769911527633667, 0.78113853931427, 0.7884030938148499, 0.7940827012062073, 0.7869502305984497, 0.7952714562416077, 0.7932901978492737, 0.7987055778503418, 0.809140145778656, 0.805177628993988, 0.8020076751708984, 0.8133667707443237, 0.8096684813499451, 0.817461371421814, 0.8232730031013489, 0.8264430165290833, 0.8204993009567261, 0.8178576231002808, 0.8314621448516846, 0.8317263126373291, 0.8347642421722412, 0.8317263126373291, 0.8296129703521729, 0.8352925777435303, 0.8359529972076416, 0.8380662798881531, 0.841500461101532, 0.8413683772087097, 0.8453308939933777, 0.8418967127799988, 0.8470479249954224, 0.841500461101532, 0.8471800088882446, 0.8479725122451782], "val_loss": [1.9249346256256104, 1.1122307777404785, 0.9724031686782837, 0.7736124396324158, 0.7371620535850525, 0.7938013672828674, 0.7201601266860962, 0.6303027272224426, 0.6004636883735657, 0.6081081628799438, 0.60113525390625, 0.5827826857566833, 0.5525206327438354, 0.5445162653923035, 0.5499451756477356, 0.5375615358352661, 0.5109373331069946, 0.5374508500099182, 0.4916052222251892, 0.4820271134376526, 0.4804501235485077, 0.5117570757865906, 0.504442572593689, 0.47609975934028625, 0.46513819694519043, 0.4704474210739136, 0.46158015727996826, 0.45461878180503845, 0.45422330498695374, 0.44565317034721375, 0.4395366609096527, 0.42835333943367004, 0.4275813102722168, 0.42218756675720215, 0.42565178871154785, 0.41959255933761597, 0.4161268174648285, 0.42986905574798584, 0.41352584958076477, 0.41092780232429504, 0.4010327160358429, 0.4105968773365021, 0.4135030508041382, 0.40187597274780273, 0.40607699751853943, 0.3920882046222687, 0.39196068048477173, 0.40341174602508545, 0.38185346126556396, 0.3918035626411438, 0.39664819836616516], "val_accuracy": [0.5730000138282776, 0.6556666493415833, 0.6793333292007446, 0.7160000205039978, 0.7193333506584167, 0.687666654586792, 0.7149999737739563, 0.7523333430290222, 0.7680000066757202, 0.7566666603088379, 0.7683333158493042, 0.7793333530426025, 0.7906666398048401, 0.7946666479110718, 0.8019999861717224, 0.7983333468437195, 0.8076666593551636, 0.8019999861717224, 0.8149999976158142, 0.8253333568572998, 0.8236666917800903, 0.8009999990463257, 0.8100000023841858, 0.8286666870117188, 0.8320000171661377, 0.8253333568572998, 0.8186666369438171, 0.8330000042915344, 0.8396666646003723, 0.840666651725769, 0.8396666646003723, 0.8463333249092102, 0.8486666679382324, 0.8489999771118164, 0.8453333377838135, 0.8503333330154419, 0.8503333330154419, 0.840666651725769, 0.8493333458900452, 0.8500000238418579, 0.856333315372467, 0.8476666808128357, 0.8513333201408386, 0.8536666631698608, 0.8536666631698608, 0.8603333234786987, 0.8576666712760925, 0.8543333411216736, 0.859666645526886, 0.8513333201408386, 0.8503333330154419]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 2, 3, 1, 3, 5], [1, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 3, 0, 6, 3, 8, 2, 4, 8, 2, 4, 8, 0, 2], [2, 1, 3, 1, 0, 2, 4, 2, 2], [16, 37], [0, 1, 1], [4], [3, 4], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 4, 4, 2, 23, 14, 9, 1, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), alpha), tf.math.add(tf.math.pow(grad, alpha), tf.math.sqrt(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(tf.math.negative(beta)), grad)))))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 2, 3, 1, 4, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 2, 8, 6, 3, 8, 2], [2, 0, 2, 1, 0], [16, 37], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 4, 6, 1, 9, 1, 7, 1, 5, 8, 9, 4, 7, 2, 6, 4, 3, 0, 7, 7, 2, 3, 4, 6, 6, 3, 9, 6], [6, 7, 1, 1, 2, 4, 3, 0, 5, 6, 3, 5, 5, 0, 3, 1, 4, 7, 3], [0, 98, 90, 14, 78], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 47, 28, 19, 5, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(grad, tf.math.divide_no_nan(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(tf.math.subtract(grad, tf.math.square(tf.math.sqrt(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(alpha, alpha)), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.multiply(tf.math.negative(sigma), tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), grad)), grad)), sigma)))), tf.math.add(tf.math.add(grad, tf.math.multiply(grad, tf.math.pow(tf.math.divide_no_nan(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), sigma), alpha)), grad))), tf.math.divide_no_nan(grad, sigma))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 2, 0, 1, 3, 5, 8, 4], [0, 0, 1, 0, 2], [0, 78, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 9, 6, 4, 8, 2], [2, 0, 4, 1, 0], [16, 37], [0, 1], [0], [6], [0], [0, 1], [0], [1], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 8, 5, 3, 4, 3, 1, 1, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha)), tf.math.sqrt(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.303499937057495, 2.3020808696746826, 2.302424192428589, 2.3028972148895264, 2.3037638664245605, 2.3056528568267822], "accuracy": [0.10474177449941635, 0.10117553919553757, 0.10236428678035736, 0.10038304328918457, 0.10130762308835983, 0.09642054885625839], "val_loss": [2.3026123046875, 2.302690267562866, 2.302788257598877, 2.303295612335205, 2.304819107055664, 2.3077192306518555], "val_accuracy": [0.10166666656732559, 0.1003333330154419, 0.1003333330154419, 0.10000000149011612, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 2, 3, 1, 3, 5, 7, 6, 4, 5, 4, 1, 4, 7, 6, 6, 3, 8, 5, 4], [0, 0, 1, 0, 2, 3, 2, 2, 2, 2, 1, 0, 1, 3, 1, 0], [0, 39, 9, 44, 94], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 4, 1, 0], [23, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.0908571407198906, "mapping_values": [1, 36, 20, 16, 5, 1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.square(tf.math.pow(grad, grad))))), tf.math.subtract(tf.math.pow(grad, grad), tf.math.add(grad, tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha))), grad)))), tf.math.square(tf.math.pow(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3104801177978516, 2.3101494312286377, 2.3094394207000732, 2.3100645542144775, 2.3111588954925537, 2.309957981109619], "accuracy": [0.09285431355237961, 0.09549596905708313, 0.08994849026203156, 0.09391097724437714, 0.08691058307886124, 0.08981640636920929], "val_loss": [2.3090410232543945, 2.3090410232543945, 2.3090410232543945, 2.3090410232543945, 2.3090410232543945, 2.3090410232543945], "val_accuracy": [0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862, 0.08833333104848862]}}]