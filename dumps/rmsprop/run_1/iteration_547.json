[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.8768571615219116, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5719877481460571, 0.905035674571991, 0.7132470011711121, 0.6290118098258972, 0.5772889256477356, 0.5300399661064148, 0.4984924793243408, 0.4696540832519531, 0.4508989453315735, 0.4295291006565094, 0.3928512632846832, 0.36864352226257324, 0.3546794652938843, 0.3604147732257843, 0.3369254469871521, 0.3110351264476776, 0.3083447813987732, 0.29889360070228577, 0.28484824299812317, 0.2717207074165344, 0.2562370300292969, 0.24966870248317719, 0.2422468364238739], "accuracy": [0.44710078835487366, 0.6837934255599976, 0.7405890822410583, 0.7707040309906006, 0.7890635132789612, 0.8064984679222107, 0.8207634687423706, 0.8280280232429504, 0.839519202709198, 0.8490291833877563, 0.8580108284950256, 0.8656716346740723, 0.8728041052818298, 0.8716153502464294, 0.8775591254234314, 0.8887861371040344, 0.8902390599250793, 0.8963148593902588, 0.8939374089241028, 0.9019944667816162, 0.9070135951042175, 0.9078060984611511, 0.9115044474601746], "val_loss": [0.9975670576095581, 0.6447177529335022, 0.5735924243927002, 0.5706664323806763, 0.4915817081928253, 0.4848896563053131, 0.4657159447669983, 0.4201098680496216, 0.4190950393676758, 0.4140464961528778, 0.36485856771469116, 0.36031535267829895, 0.3616061210632324, 0.40839770436286926, 0.363942414522171, 0.3482498228549957, 0.3495192527770996, 0.3338126540184021, 0.3419082760810852, 0.3381653130054474, 0.3596552014350891, 0.3505549430847168, 0.36649438738822937], "val_accuracy": [0.6309999823570251, 0.762666642665863, 0.7979999780654907, 0.7820000052452087, 0.8320000171661377, 0.8116666674613953, 0.8339999914169312, 0.8429999947547913, 0.8526666760444641, 0.8500000238418579, 0.8703333139419556, 0.8709999918937683, 0.8659999966621399, 0.847000002861023, 0.8709999918937683, 0.8723333477973938, 0.8743333220481873, 0.8836666941642761, 0.8713333606719971, 0.8773333430290222, 0.8733333349227905, 0.8759999871253967, 0.8706666827201843]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8231428861618042, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.210969924926758, 1.5914665460586548, 1.1459537744522095, 0.9713342189788818, 0.877138078212738, 0.8310169577598572, 0.7929120659828186, 0.7528048157691956, 0.73772132396698, 0.6943800449371338, 0.6777909994125366, 0.6538190841674805, 0.660420298576355, 0.6341800689697266, 0.6114652156829834, 0.606600284576416, 0.5890769958496094, 0.5870755910873413, 0.5870658159255981, 0.5617662668228149, 0.5583767890930176, 0.5575088262557983, 0.5301883816719055, 0.5396324396133423, 0.5196750164031982, 0.5144960880279541, 0.5130146741867065, 0.4998284876346588, 0.49736955761909485, 0.501177966594696, 0.4827001392841339, 0.48656249046325684, 0.4759959876537323, 0.47044286131858826, 0.4670459032058716, 0.459105521440506, 0.4577583968639374, 0.4549170136451721, 0.449005126953125, 0.4381565451622009, 0.44457364082336426, 0.43611860275268555, 0.42803168296813965, 0.4340836703777313, 0.43304428458213806, 0.4237692356109619, 0.41852495074272156, 0.41482025384902954, 0.4144773781299591], "accuracy": [0.2689208686351776, 0.5107647776603699, 0.5955620408058167, 0.6571126580238342, 0.6833971738815308, 0.6964733600616455, 0.7086250185966492, 0.7231541275978088, 0.7308149337768555, 0.7427024245262146, 0.7465327978134155, 0.7592127919197083, 0.7552502751350403, 0.7655527591705322, 0.7714964747428894, 0.774798572063446, 0.7829877138137817, 0.7775723338127136, 0.7804781198501587, 0.7943468689918518, 0.7984414100646973, 0.791969358921051, 0.8014793395996094, 0.7979130744934082, 0.8035926818847656, 0.8090080618858337, 0.8086118102073669, 0.8181217908859253, 0.8150838613510132, 0.8137630224227905, 0.8245938420295715, 0.8175934553146362, 0.8214238286018372, 0.8296129703521729, 0.8302733898162842, 0.8302733898162842, 0.8360850811004639, 0.8318583965301514, 0.834632158279419, 0.8400475382804871, 0.8352925777435303, 0.8392550349235535, 0.842028796672821, 0.8379341959953308, 0.8457271456718445, 0.8492933511734009, 0.8481045961380005, 0.8477083444595337, 0.8499537706375122], "val_loss": [1.9184430837631226, 1.0738801956176758, 0.9628850221633911, 0.8137202262878418, 0.8499960899353027, 0.7565935850143433, 0.6593502163887024, 0.6348745226860046, 0.6340724229812622, 0.6226418614387512, 0.5887654423713684, 0.6297169327735901, 0.5639454126358032, 0.5556183457374573, 0.5587599277496338, 0.6215667128562927, 0.5384148359298706, 0.5348836779594421, 0.5531800389289856, 0.5488492250442505, 0.5140851140022278, 0.5117889642715454, 0.49869734048843384, 0.5108440518379211, 0.4946120083332062, 0.4867307245731354, 0.510445773601532, 0.48344066739082336, 0.46702009439468384, 0.45754411816596985, 0.4763188064098358, 0.46360719203948975, 0.47447726130485535, 0.4486558139324188, 0.4513857364654541, 0.45553743839263916, 0.4492439329624176, 0.4404774308204651, 0.4361409842967987, 0.44174903631210327, 0.42859452962875366, 0.42827141284942627, 0.4302493929862976, 0.41627269983291626, 0.4255712032318115, 0.41586360335350037, 0.4201163351535797, 0.4106360375881195, 0.41478922963142395], "val_accuracy": [0.5796666741371155, 0.6826666593551636, 0.6826666593551636, 0.7080000042915344, 0.6883333325386047, 0.734000027179718, 0.7426666617393494, 0.7616666555404663, 0.7573333382606506, 0.7726666927337646, 0.7853333353996277, 0.7599999904632568, 0.7916666865348816, 0.7923333048820496, 0.7786666750907898, 0.7603333592414856, 0.8063333630561829, 0.8009999990463257, 0.7913333177566528, 0.7993333339691162, 0.8106666803359985, 0.8116666674613953, 0.8146666884422302, 0.8116666674613953, 0.8130000233650208, 0.8146666884422302, 0.815666675567627, 0.8266666531562805, 0.8346666693687439, 0.8389999866485596, 0.8230000138282776, 0.8320000171661377, 0.8246666789054871, 0.8346666693687439, 0.8423333168029785, 0.8289999961853027, 0.831333339214325, 0.8403333425521851, 0.8456666469573975, 0.8453333377838135, 0.8573333621025085, 0.8456666469573975, 0.8460000157356262, 0.8583333492279053, 0.8443333506584167, 0.8526666760444641, 0.8426666855812073, 0.8560000061988831, 0.8500000238418579]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 1, 1, 7, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [76, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 12, 7, 5, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 5, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [1, 1], [0], [6], [0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 3, 1, 1, 1, 8, 9, 6, 9, 0, 0, 3, 6, 2, 2, 2, 6, 1, 0, 6, 2, 8, 9, 5], [2, 0, 3, 3, 1, 6, 4, 4, 6, 4, 3, 2, 0], [0, 97, 68, 9, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 4, 3, 1, 0, 1, 0, 1, 0, 40, 27, 13, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.negative(beta))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.subtract(tf.math.negative(tf.math.multiply(tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.math.sqrt(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.negative(sigma)), tf.math.negative(tf.math.multiply(sigma, tf.math.divide_no_nan(alpha, tf.math.add(grad, tf.math.add(grad, grad))))))), tf.math.add(grad, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.negative(tf.math.divide_no_nan(sigma, tf.math.add(tf.math.sqrt(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), beta)))), tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 1, 2], [0, 74, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 1, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [2, 3, 6, 8, 1], [6, 1, 2, 1, 2], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 12, 7, 5, 2, 10, 5, 5, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.math.subtract(beta, alpha)), beta)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 7, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [38, 37], [0, 1], [0], [1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 12, 7, 5, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(grad, alpha))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}]