[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.8768571615219116, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5719877481460571, 0.905035674571991, 0.7132470011711121, 0.6290118098258972, 0.5772889256477356, 0.5300399661064148, 0.4984924793243408, 0.4696540832519531, 0.4508989453315735, 0.4295291006565094, 0.3928512632846832, 0.36864352226257324, 0.3546794652938843, 0.3604147732257843, 0.3369254469871521, 0.3110351264476776, 0.3083447813987732, 0.29889360070228577, 0.28484824299812317, 0.2717207074165344, 0.2562370300292969, 0.24966870248317719, 0.2422468364238739], "accuracy": [0.44710078835487366, 0.6837934255599976, 0.7405890822410583, 0.7707040309906006, 0.7890635132789612, 0.8064984679222107, 0.8207634687423706, 0.8280280232429504, 0.839519202709198, 0.8490291833877563, 0.8580108284950256, 0.8656716346740723, 0.8728041052818298, 0.8716153502464294, 0.8775591254234314, 0.8887861371040344, 0.8902390599250793, 0.8963148593902588, 0.8939374089241028, 0.9019944667816162, 0.9070135951042175, 0.9078060984611511, 0.9115044474601746], "val_loss": [0.9975670576095581, 0.6447177529335022, 0.5735924243927002, 0.5706664323806763, 0.4915817081928253, 0.4848896563053131, 0.4657159447669983, 0.4201098680496216, 0.4190950393676758, 0.4140464961528778, 0.36485856771469116, 0.36031535267829895, 0.3616061210632324, 0.40839770436286926, 0.363942414522171, 0.3482498228549957, 0.3495192527770996, 0.3338126540184021, 0.3419082760810852, 0.3381653130054474, 0.3596552014350891, 0.3505549430847168, 0.36649438738822937], "val_accuracy": [0.6309999823570251, 0.762666642665863, 0.7979999780654907, 0.7820000052452087, 0.8320000171661377, 0.8116666674613953, 0.8339999914169312, 0.8429999947547913, 0.8526666760444641, 0.8500000238418579, 0.8703333139419556, 0.8709999918937683, 0.8659999966621399, 0.847000002861023, 0.8709999918937683, 0.8723333477973938, 0.8743333220481873, 0.8836666941642761, 0.8713333606719971, 0.8773333430290222, 0.8733333349227905, 0.8759999871253967, 0.8706666827201843]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8074285984039307, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2087464332580566, 1.602745771408081, 1.1429117918014526, 0.9935813546180725, 0.8812613487243652, 0.8214867115020752, 0.7842556834220886, 0.7397124767303467, 0.7190220952033997, 0.7062471508979797, 0.6790338158607483, 0.6796421408653259, 0.6630618572235107, 0.6339474320411682, 0.6321122050285339, 0.6056379675865173, 0.6064241528511047, 0.5925046801567078, 0.5812543630599976, 0.5863786935806274, 0.5604352355003357, 0.5528078079223633, 0.5583755970001221, 0.5439750552177429, 0.5444393157958984, 0.527121365070343, 0.525588870048523, 0.5094170570373535, 0.5126919150352478, 0.5078353881835938, 0.5049393177032471, 0.48674002289772034, 0.5023555755615234, 0.4916202127933502, 0.4776746332645416, 0.48402824997901917, 0.4716709554195404], "accuracy": [0.27301543951034546, 0.5004622936248779, 0.6021661758422852, 0.6413947939872742, 0.6832650899887085, 0.6979262828826904, 0.7136441469192505, 0.7234182953834534, 0.7364945411682129, 0.7391361594200134, 0.744419515132904, 0.7466648817062378, 0.754589855670929, 0.7652885913848877, 0.7658169269561768, 0.7734777331352234, 0.7738739848136902, 0.7775723338127136, 0.785101056098938, 0.7819310426712036, 0.7964601516723633, 0.8016114234924316, 0.7936864495277405, 0.7972526550292969, 0.798309326171875, 0.8041210174560547, 0.8045172095298767, 0.811649739742279, 0.8090080618858337, 0.8087438941001892, 0.8142913579940796, 0.8234050869941711, 0.8138951063156128, 0.8193105459213257, 0.826310932636261, 0.8251221776008606, 0.8301413059234619], "val_loss": [1.9174213409423828, 1.1293811798095703, 0.8826184272766113, 0.8354676961898804, 0.7650948166847229, 0.751844048500061, 0.6643576622009277, 0.6993447542190552, 0.6651419401168823, 0.6148886680603027, 0.6102463603019714, 0.6447306871414185, 0.589310884475708, 0.5705162286758423, 0.5451979041099548, 0.5748780369758606, 0.5625374913215637, 0.5513788461685181, 0.5367736220359802, 0.5329484939575195, 0.5126876831054688, 0.5570897459983826, 0.5240692496299744, 0.5063924789428711, 0.5012322068214417, 0.4983726739883423, 0.4908033013343811, 0.4974735975265503, 0.4752929210662842, 0.472471684217453, 0.4709008038043976, 0.46637028455734253, 0.4685641825199127, 0.4594266414642334, 0.4654131531715393, 0.457021564245224, 0.46191906929016113], "val_accuracy": [0.5289999842643738, 0.6349999904632568, 0.6856666803359985, 0.7120000123977661, 0.7206666469573975, 0.7289999723434448, 0.7480000257492065, 0.7336666584014893, 0.7306666374206543, 0.7683333158493042, 0.7639999985694885, 0.7576666474342346, 0.7670000195503235, 0.7803333401679993, 0.7976666688919067, 0.7766666412353516, 0.7916666865348816, 0.7883333563804626, 0.8019999861717224, 0.8006666898727417, 0.8043333292007446, 0.7913333177566528, 0.7983333468437195, 0.8106666803359985, 0.8103333115577698, 0.8173333406448364, 0.8153333067893982, 0.8146666884422302, 0.8303333520889282, 0.8220000267028809, 0.8256666660308838, 0.8343333601951599, 0.8320000171661377, 0.8270000219345093, 0.8246666789054871, 0.8289999961853027, 0.8299999833106995]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [1, 1], [1], [6], [0], [1], [0], [2], [0]], "fitness": -0.11171428859233856, "mapping_values": [1, 11, 6, 5, 3, 9, 5, 4, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.373797500734669e+18, 1.062497874496979e+18, 182249538453504.0, 179476583415808.0, 185362500550656.0, 182300524412928.0], "accuracy": [0.1158367469906807, 0.10619468986988068, 0.09285431355237961, 0.08994849026203156, 0.09298639744520187, 0.0952318087220192], "val_loss": [2.739669065848062e+18, 169950245289984.0, 169950245289984.0, 169950245289984.0, 169950245289984.0, 169950245289984.0], "val_accuracy": [0.10466666519641876, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [3, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 3, 6, 3, 7, 5, 2, 8, 3, 7, 4, 3, 2, 6, 8, 1, 0, 4, 3, 0, 1, 9, 4, 6, 4], [6, 6, 1, 7, 1, 2, 0, 3, 5, 2, 6, 7, 4, 0, 6, 0, 3, 6], [0, 52, 26, 14], [0, 0, 0, 1, 1], [0, 7, 8], [2, 5], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 43, 25, 18, 4, 5, 3, 2, 0], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(tf.math.square(alpha), tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.add(tf.math.pow(grad, tf.math.multiply(alpha, beta)), tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.sqrt(sigma), tf.math.subtract(grad, beta)))), tf.math.negative(tf.math.pow(tf.math.multiply(grad, tf.math.negative(tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(grad, grad), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), grad)))), tf.math.pow(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), sigma)))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.sqrt(beta), grad))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351, 0.10266666859388351]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [1, 0, 1, 0, 0], [0, 39, 39], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2, 1, 4, 2, 1, 0, 9, 2], [2, 0, 3, 1, 0, 5, 4, 0, 5], [16, 1, 18, 9], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 6, 5, 3, 23, 14, 9, 4, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(beta), tf.math.add(tf.math.subtract(tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), grad))), tf.math.negative(grad))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12429005652666092, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 2, 3, 1, 3, 5, 6, 3, 8, 9, 2], [0, 0, 1, 0, 3, 0, 0], [0, 39, 39, 43, 22, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 9, 0, 6, 3, 8, 2], [2, 0, 1, 1, 0], [16, 37], [0, 1], [0], [6], [0], [0, 0, 0, 1, 1], [0, 5, 4], [4, 4], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 11, 7, 6, 2, 2, 0, 1, 2, 1, 1, 0, 5, 3, 2, 0], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.multiply(tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(0.0, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.math.pow(grad, grad)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]