[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.8740000128746033, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.597489356994629, 0.8611953854560852, 0.7081209421157837, 0.6296775937080383, 0.5730003714561462, 0.5167413353919983, 0.4906698763370514, 0.471977174282074, 0.4273917078971863, 0.40803420543670654, 0.38700729608535767, 0.3714583218097687, 0.34688320755958557, 0.3415917456150055, 0.3209376633167267, 0.32321280241012573], "accuracy": [0.4171179533004761, 0.6911900639533997, 0.7388719916343689, 0.7683265209197998, 0.789988100528717, 0.8129705190658569, 0.8232730031013489, 0.8350284099578857, 0.8465195894241333, 0.8527275323867798, 0.8618412613868713, 0.8687095642089844, 0.874389111995697, 0.8759741187095642, 0.8873332738876343, 0.8799365758895874], "val_loss": [0.8761370182037354, 0.6684905886650085, 0.5429312586784363, 0.5748382210731506, 0.5238962173461914, 0.49176645278930664, 0.43191173672676086, 0.41761642694473267, 0.4223204255104065, 0.39893120527267456, 0.3709444999694824, 0.3756745457649231, 0.42260605096817017, 0.3604733943939209, 0.3718315362930298, 0.3813425600528717], "val_accuracy": [0.6769999861717224, 0.7459999918937683, 0.7976666688919067, 0.7896666526794434, 0.7996666431427002, 0.8173333406448364, 0.8506666421890259, 0.8529999852180481, 0.846666693687439, 0.8569999933242798, 0.8709999918937683, 0.8709999918937683, 0.8410000205039978, 0.8676666617393494, 0.8683333396911621, 0.8619999885559082]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8137142658233643, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.207462787628174, 1.5921144485473633, 1.122632622718811, 0.9541284441947937, 0.8978252410888672, 0.8231823444366455, 0.7715268135070801, 0.7530176639556885, 0.7067662477493286, 0.6987585425376892, 0.686867892742157, 0.6571595668792725, 0.6397215723991394, 0.6411489248275757, 0.6209529638290405, 0.5989148616790771, 0.6113734841346741, 0.5943179726600647, 0.5821899771690369, 0.5641343593597412, 0.5583497881889343, 0.5454733967781067, 0.5373580455780029, 0.5353233218193054, 0.5378203392028809, 0.5167822241783142, 0.5068863034248352, 0.5134679079055786, 0.5062568187713623, 0.4895133078098297, 0.48282942175865173, 0.4814952313899994, 0.47858643531799316, 0.4763430953025818, 0.4685429334640503, 0.4761236011981964, 0.462556928396225, 0.45383569598197937, 0.44998225569725037, 0.4515707790851593, 0.4334021508693695, 0.43936577439308167, 0.4303869605064392, 0.42753836512565613, 0.4325007498264313, 0.42308104038238525, 0.41235318779945374, 0.420602023601532, 0.4184885025024414, 0.40495720505714417, 0.4086698293685913, 0.4003492295742035, 0.3987782895565033, 0.39671650528907776, 0.3929287791252136, 0.3883763253688812], "accuracy": [0.2814687490463257, 0.5044247508049011, 0.6123365759849548, 0.6598864197731018, 0.669792652130127, 0.6940959095954895, 0.7161537408828735, 0.7144366502761841, 0.7374191284179688, 0.7329282760620117, 0.7417778372764587, 0.7526086568832397, 0.7584202885627747, 0.7602694630622864, 0.7676661014556885, 0.7749306559562683, 0.7668735980987549, 0.7709681391716003, 0.7803460359573364, 0.7873464822769165, 0.7903843522071838, 0.7968564033508301, 0.800818920135498, 0.8045172095298767, 0.7964601516723633, 0.8053097128868103, 0.8146876096725464, 0.8083476424217224, 0.8131026029586792, 0.8149517774581909, 0.8240655064582825, 0.8187822103500366, 0.8265751004219055, 0.8193105459213257, 0.829216718673706, 0.8271034359931946, 0.8308017253875732, 0.834632158279419, 0.8322546482086182, 0.8327829837799072, 0.8408400416374207, 0.8366134166717529, 0.8441421389579773, 0.8401796221733093, 0.8404437899589539, 0.8421608805656433, 0.8466516733169556, 0.8449346423149109, 0.8490291833877563, 0.8492933511734009, 0.8485008478164673, 0.8560295701026917, 0.8532558679580688, 0.8552370667457581, 0.8565579056739807, 0.854708731174469], "val_loss": [1.920509934425354, 1.1376591920852661, 0.966090738773346, 0.8867594599723816, 0.7692590951919556, 0.7099518179893494, 0.6884594559669495, 0.6795580983161926, 0.6478506922721863, 0.6230753064155579, 0.6039256453514099, 0.6231945753097534, 0.6265242099761963, 0.5670970678329468, 0.5515405535697937, 0.6016374230384827, 0.5415182113647461, 0.5406990647315979, 0.519964337348938, 0.514501690864563, 0.5107978582382202, 0.4973638653755188, 0.5169655680656433, 0.5094220638275146, 0.48821941018104553, 0.47959113121032715, 0.47122374176979065, 0.4742920696735382, 0.4661498963832855, 0.46000391244888306, 0.45584431290626526, 0.4652126431465149, 0.46456053853034973, 0.4448491334915161, 0.45042839646339417, 0.45004475116729736, 0.4438928961753845, 0.4319787323474884, 0.4507483243942261, 0.4376125633716583, 0.43307942152023315, 0.42186328768730164, 0.4241127073764801, 0.425112783908844, 0.4218834638595581, 0.4133554697036743, 0.43183183670043945, 0.43293023109436035, 0.42449113726615906, 0.4061940014362335, 0.4063786268234253, 0.4091566503047943, 0.39993879199028015, 0.4174235165119171, 0.39891454577445984, 0.40544527769088745], "val_accuracy": [0.5566666722297668, 0.6323333382606506, 0.6623333096504211, 0.6633333563804626, 0.7239999771118164, 0.7256666421890259, 0.7260000109672546, 0.7350000143051147, 0.7416666746139526, 0.7756666541099548, 0.7773333191871643, 0.7693333625793457, 0.7473333477973938, 0.7933333516120911, 0.7913333177566528, 0.7606666684150696, 0.7940000295639038, 0.8006666898727417, 0.8109999895095825, 0.809333324432373, 0.8059999942779541, 0.8209999799728394, 0.8009999990463257, 0.8163333535194397, 0.8149999976158142, 0.8266666531562805, 0.8293333053588867, 0.8293333053588867, 0.8303333520889282, 0.8263333439826965, 0.8343333601951599, 0.8199999928474426, 0.8226666450500488, 0.8373333215713501, 0.8336666822433472, 0.8343333601951599, 0.8356666564941406, 0.8426666855812073, 0.8320000171661377, 0.8413333296775818, 0.8410000205039978, 0.8486666679382324, 0.8503333330154419, 0.8513333201408386, 0.846666693687439, 0.8543333411216736, 0.8460000157356262, 0.8410000205039978, 0.8479999899864197, 0.8543333411216736, 0.8613333106040955, 0.8566666841506958, 0.8550000190734863, 0.8443333506584167, 0.859333336353302, 0.8513333201408386]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 1, 6, 3], [0, 0, 1, 0, 2], [0, 87, 39], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [7, 2, 0, 6, 4, 8, 2], [2, 0, 3, 1, 0], [36, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 2, 8, 4, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.1936421166111457e+28, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08770307898521423, 0.08875974267721176, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.1649167035877542e+30, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 2, 3, 7, 3, 5, 9], [0, 0, 1, 0, 2], [0, 19, 39, 13], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 2, 0, 2, 3, 8, 2, 4, 6, 8, 8, 3, 2, 2, 3, 0, 2, 5, 7, 2], [0, 0, 3, 1, 0, 5, 0, 5, 0, 3, 1, 0, 5, 0], [16, 1, 59, 97, 61, 13, 87], [0, 1, 0], [3, 9], [1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 7, 4, 4, 34, 20, 14, 7, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(grad, alpha)))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 1, 3, 5, 1, 6], [0, 0, 1, 0, 0, 1, 1], [73, 39, 39, 46], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [4, 2, 4, 6, 3, 8, 2], [2, 0, 3, 1, 0, 5], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 8, 7, 4, 12, 6, 6, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.pow(beta, tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), alpha)), tf.math.sqrt(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 3, 1, 3, 3, 6], [0, 0, 1, 0, 2, 1, 1], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.09428571164608002, "mapping_values": [1, 14, 7, 7, 3, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad)), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.310009002685547, 2.308028221130371, 2.3090264797210693, 2.308640480041504, 2.3105273246765137, 2.3088271617889404], "accuracy": [0.08915598690509796, 0.09681680053472519, 0.09774138033390045, 0.09826971590518951, 0.09496764093637466, 0.09166556596755981], "val_loss": [2.309126853942871, 2.309126853942871, 2.309126853942871, 2.309126853942871, 2.309126853942871, 2.309126853942871], "val_accuracy": [0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186]}}]