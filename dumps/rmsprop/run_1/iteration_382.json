[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.8740000128746033, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.597489356994629, 0.8611953854560852, 0.7081209421157837, 0.6296775937080383, 0.5730003714561462, 0.5167413353919983, 0.4906698763370514, 0.471977174282074, 0.4273917078971863, 0.40803420543670654, 0.38700729608535767, 0.3714583218097687, 0.34688320755958557, 0.3415917456150055, 0.3209376633167267, 0.32321280241012573], "accuracy": [0.4171179533004761, 0.6911900639533997, 0.7388719916343689, 0.7683265209197998, 0.789988100528717, 0.8129705190658569, 0.8232730031013489, 0.8350284099578857, 0.8465195894241333, 0.8527275323867798, 0.8618412613868713, 0.8687095642089844, 0.874389111995697, 0.8759741187095642, 0.8873332738876343, 0.8799365758895874], "val_loss": [0.8761370182037354, 0.6684905886650085, 0.5429312586784363, 0.5748382210731506, 0.5238962173461914, 0.49176645278930664, 0.43191173672676086, 0.41761642694473267, 0.4223204255104065, 0.39893120527267456, 0.3709444999694824, 0.3756745457649231, 0.42260605096817017, 0.3604733943939209, 0.3718315362930298, 0.3813425600528717], "val_accuracy": [0.6769999861717224, 0.7459999918937683, 0.7976666688919067, 0.7896666526794434, 0.7996666431427002, 0.8173333406448364, 0.8506666421890259, 0.8529999852180481, 0.846666693687439, 0.8569999933242798, 0.8709999918937683, 0.8709999918937683, 0.8410000205039978, 0.8676666617393494, 0.8683333396911621, 0.8619999885559082]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8145714402198792, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.209336519241333, 1.5992984771728516, 1.1475248336791992, 0.9645247459411621, 0.8626601099967957, 0.84991055727005, 0.7718905210494995, 0.7701975107192993, 0.7115923166275024, 0.6953961849212646, 0.6810058355331421, 0.6609399318695068, 0.6633070111274719, 0.633849561214447, 0.619494616985321, 0.616025984287262, 0.5852556824684143, 0.5927869081497192, 0.5715845227241516, 0.5794307589530945, 0.5557016134262085, 0.5425838232040405, 0.5336352586746216, 0.5315279960632324, 0.5189208984375, 0.5153147578239441, 0.5061913132667542, 0.49961671233177185, 0.49660512804985046, 0.49463722109794617, 0.48142609000205994, 0.4821142852306366, 0.47522780299186707, 0.477823406457901], "accuracy": [0.2678642272949219, 0.5048210024833679, 0.5979394912719727, 0.6472064256668091, 0.6869634389877319, 0.6885483860969543, 0.7190595865249634, 0.7174745798110962, 0.7363624572753906, 0.7388719916343689, 0.7412495017051697, 0.7495707273483276, 0.7473253011703491, 0.7650244235992432, 0.7635715007781982, 0.7646281719207764, 0.7788931727409363, 0.7750627398490906, 0.7854973077774048, 0.7763835787773132, 0.7960638999938965, 0.7947431206703186, 0.7979130744934082, 0.7981772422790527, 0.8072909712791443, 0.8096684813499451, 0.811649739742279, 0.8136309385299683, 0.816008448600769, 0.8131026029586792, 0.821820080280304, 0.8187822103500366, 0.8222163319587708, 0.819970965385437], "val_loss": [1.915525197982788, 1.1076985597610474, 0.914903461933136, 0.7706073522567749, 0.7133744955062866, 0.6980794072151184, 0.6665518283843994, 0.6697091460227966, 0.6684133410453796, 0.6033791303634644, 0.5972817540168762, 0.6333613395690918, 0.5877947807312012, 0.5632344484329224, 0.5483748912811279, 0.5517656207084656, 0.5609524846076965, 0.5185372829437256, 0.5442541241645813, 0.5212487578392029, 0.5140222907066345, 0.5053791999816895, 0.508394181728363, 0.4892931282520294, 0.4819282591342926, 0.5203548073768616, 0.4838486313819885, 0.46771717071533203, 0.46717798709869385, 0.47955864667892456, 0.46691927313804626, 0.46835100650787354, 0.47526490688323975, 0.4617382287979126], "val_accuracy": [0.596666693687439, 0.6586666703224182, 0.6809999942779541, 0.7239999771118164, 0.7336666584014893, 0.7419999837875366, 0.7403333187103271, 0.7509999871253967, 0.7396666407585144, 0.7723333239555359, 0.7739999890327454, 0.7493333220481873, 0.777999997138977, 0.7846666574478149, 0.7916666865348816, 0.784333348274231, 0.7873333096504211, 0.8050000071525574, 0.7933333516120911, 0.796999990940094, 0.8073333501815796, 0.8136666417121887, 0.8143333196640015, 0.8199999928474426, 0.8180000185966492, 0.7979999780654907, 0.8213333487510681, 0.8286666870117188, 0.8339999914169312, 0.8266666531562805, 0.82833331823349, 0.8289999961853027, 0.8266666531562805, 0.8263333439826965]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 7, 3, 0, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 2, 1, 6, 7, 8, 2], [2, 0, 3, 5, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [7], [0]], "fitness": -0.1648571491241455, "mapping_values": [1, 1, 0, 1, 1, 10, 5, 5, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(0.0, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(beta, tf.math.divide_no_nan(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), grad)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.441603183746338, 2.3284454345703125, 2.24560546875, 2.302154541015625, 2.18001651763916, 2.3118765354156494], "accuracy": [0.20697398483753204, 0.11055342853069305, 0.1740853190422058, 0.10685510188341141, 0.25795799493789673, 0.09734513610601425], "val_loss": [2.1985690593719482, 2.2932372093200684, 2.3032727241516113, 2.2928669452667236, 2.3299100399017334, 2.303452730178833], "val_accuracy": [0.1733333319425583, 0.10499999672174454, 0.0963333323597908, 0.12700000405311584, 0.10366666316986084, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 6, 0, 6, 3, 8, 2, 3, 0, 2, 8, 2, 3, 9, 4, 1, 5], [2, 0, 3, 1, 0, 0, 4, 4, 1, 0], [16, 37, 12, 16, 38], [0, 1, 0, 1, 1], [6, 4], [6, 1, 2], [0], [0, 0, 1], [0, 0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 2, 2, 2, 27, 17, 10, 5, 5, 2, 3, 0, 3, 2, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), alpha), tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.subtract(grad, grad), tf.math.square(alpha)))))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(grad, tf.math.pow(alpha, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 2, 1, 3, 6], [0, 0, 1, 0, 2], [74, 39, 39], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 6, 3, 8, 2], [2, 0, 3, 1, 5], [16, 1], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 0, 1, 1, 12, 7, 5, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.negative(tf.math.divide_no_nan(beta, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad))), tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 6, 3, 1, 3, 5, 6, 4, 0, 2, 4, 3], [0, 0, 1, 0, 2, 0, 0, 3, 1, 3, 1], [0, 39, 39, 49, 6], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 4, 0], [24, 37], [0, 0, 1], [0, 5], [5], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 12, 11, 5, 10, 6, 4, 1, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.pow(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(grad)), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), grad), tf.math.multiply(alpha, grad))), alpha), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}]