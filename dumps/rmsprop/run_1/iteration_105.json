[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.8740000128746033, "mapping_values": [1, 11, 6, 5, 3, 10, 6, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.597489356994629, 0.8611953854560852, 0.7081209421157837, 0.6296775937080383, 0.5730003714561462, 0.5167413353919983, 0.4906698763370514, 0.471977174282074, 0.4273917078971863, 0.40803420543670654, 0.38700729608535767, 0.3714583218097687, 0.34688320755958557, 0.3415917456150055, 0.3209376633167267, 0.32321280241012573], "accuracy": [0.4171179533004761, 0.6911900639533997, 0.7388719916343689, 0.7683265209197998, 0.789988100528717, 0.8129705190658569, 0.8232730031013489, 0.8350284099578857, 0.8465195894241333, 0.8527275323867798, 0.8618412613868713, 0.8687095642089844, 0.874389111995697, 0.8759741187095642, 0.8873332738876343, 0.8799365758895874], "val_loss": [0.8761370182037354, 0.6684905886650085, 0.5429312586784363, 0.5748382210731506, 0.5238962173461914, 0.49176645278930664, 0.43191173672676086, 0.41761642694473267, 0.4223204255104065, 0.39893120527267456, 0.3709444999694824, 0.3756745457649231, 0.42260605096817017, 0.3604733943939209, 0.3718315362930298, 0.3813425600528717], "val_accuracy": [0.6769999861717224, 0.7459999918937683, 0.7976666688919067, 0.7896666526794434, 0.7996666431427002, 0.8173333406448364, 0.8506666421890259, 0.8529999852180481, 0.846666693687439, 0.8569999933242798, 0.8709999918937683, 0.8709999918937683, 0.8410000205039978, 0.8676666617393494, 0.8683333396911621, 0.8619999885559082]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 1], [0], [0], [0], [1], [0], [2], [0]], "fitness": -0.8122857213020325, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.209212064743042, 1.5903897285461426, 1.142732858657837, 0.9609792232513428, 0.8740713596343994, 0.826711893081665, 0.801935076713562, 0.7625954747200012, 0.7383878231048584, 0.7007061839103699, 0.6750471591949463, 0.6685868501663208, 0.668556809425354, 0.633327841758728, 0.6163340210914612, 0.6093859076499939, 0.604314923286438, 0.583598256111145, 0.581695556640625, 0.5701384544372559, 0.5805947780609131, 0.5507702231407166, 0.5319903492927551, 0.5340976119041443, 0.5106894969940186, 0.5380224585533142, 0.5153481364250183, 0.5031458735466003, 0.5042577981948853, 0.49945223331451416, 0.4908854067325592, 0.4803885519504547, 0.4792895019054413, 0.48055002093315125, 0.47409510612487793, 0.4679330289363861, 0.4617777168750763, 0.45925411581993103, 0.4439781904220581, 0.45662230253219604, 0.4383948743343353, 0.43913424015045166, 0.43165895342826843, 0.42343294620513916, 0.4269281029701233, 0.4230884611606598, 0.4109896123409271, 0.4096839427947998, 0.4053603708744049, 0.4098331034183502, 0.4091687798500061, 0.40395426750183105, 0.3885895311832428, 0.3984712064266205, 0.3848942816257477, 0.3934169411659241, 0.3770870566368103, 0.37948477268218994, 0.3825310468673706, 0.3839513063430786, 0.3794987201690674], "accuracy": [0.2685246467590332, 0.5145951509475708, 0.5951657891273499, 0.6487914323806763, 0.6818121671676636, 0.7034738063812256, 0.7049266695976257, 0.7125874757766724, 0.722229540348053, 0.7408532500267029, 0.7535332441329956, 0.7534011602401733, 0.7490423917770386, 0.765949010848999, 0.7708360552787781, 0.7775723338127136, 0.7718927264213562, 0.7891955971717834, 0.7853652238845825, 0.7874785661697388, 0.7866860628128052, 0.7917051911354065, 0.8029322624206543, 0.7997622489929199, 0.8127063512802124, 0.7976489067077637, 0.8062343001365662, 0.8148196935653687, 0.8162726163864136, 0.8207634687423706, 0.8251221776008606, 0.8240655064582825, 0.8216879963874817, 0.8244617581367493, 0.8228767514228821, 0.8265751004219055, 0.8318583965301514, 0.8347642421722412, 0.841500461101532, 0.834632158279419, 0.8396512866020203, 0.8376700282096863, 0.8466516733169556, 0.8487650156021118, 0.8433496356010437, 0.8471800088882446, 0.8504821062088013, 0.8491612672805786, 0.8521991968154907, 0.8500858545303345, 0.8556333184242249, 0.8551049828529358, 0.856689989566803, 0.8540483713150024, 0.8605204224586487, 0.852331280708313, 0.8663320541381836, 0.8594637513160706, 0.8584070801734924, 0.8619733452796936, 0.863558292388916], "val_loss": [1.9100204706192017, 1.0687553882598877, 0.9028967022895813, 0.7744235992431641, 0.7395747303962708, 0.7482501864433289, 0.6736983060836792, 0.6347154378890991, 0.664253294467926, 0.6455259919166565, 0.5865746140480042, 0.5728533267974854, 0.5615465641021729, 0.5624316334724426, 0.5330866575241089, 0.556909441947937, 0.5958638787269592, 0.5357663035392761, 0.5121418237686157, 0.5748788118362427, 0.503063976764679, 0.4948444962501526, 0.5116380453109741, 0.48169004917144775, 0.48165494203567505, 0.4858829081058502, 0.48595499992370605, 0.4677664339542389, 0.48407885432243347, 0.4588833451271057, 0.4536510109901428, 0.4549427628517151, 0.4584134519100189, 0.4459003508090973, 0.4376952350139618, 0.44653043150901794, 0.45028144121170044, 0.42621514201164246, 0.4559382200241089, 0.43216702342033386, 0.42527711391448975, 0.4255138337612152, 0.4202635586261749, 0.4195917248725891, 0.4331103563308716, 0.40586093068122864, 0.42254987359046936, 0.4154326319694519, 0.40560469031333923, 0.42394575476646423, 0.4081772565841675, 0.4034387171268463, 0.405839204788208, 0.3984484076499939, 0.41859424114227295, 0.39371809363365173, 0.3916013538837433, 0.3927733898162842, 0.3956893980503082, 0.42744180560112, 0.39812442660331726], "val_accuracy": [0.6213333606719971, 0.6736666560173035, 0.659333348274231, 0.7166666388511658, 0.7269999980926514, 0.7083333134651184, 0.7513333559036255, 0.7549999952316284, 0.7316666841506958, 0.7553333044052124, 0.7730000019073486, 0.7953333258628845, 0.7863333225250244, 0.7906666398048401, 0.8013333082199097, 0.7973333597183228, 0.7596666812896729, 0.8003333210945129, 0.8109999895095825, 0.7703333497047424, 0.8230000138282776, 0.8226666450500488, 0.8106666803359985, 0.8286666870117188, 0.8223333358764648, 0.8136666417121887, 0.8303333520889282, 0.8339999914169312, 0.8176666498184204, 0.8306666612625122, 0.8349999785423279, 0.8320000171661377, 0.8376666903495789, 0.8386666774749756, 0.8423333168029785, 0.8399999737739563, 0.8326666951179504, 0.8453333377838135, 0.8289999961853027, 0.8403333425521851, 0.8433333039283752, 0.8460000157356262, 0.843666672706604, 0.846666693687439, 0.8396666646003723, 0.8569999933242798, 0.8463333249092102, 0.847000002861023, 0.8543333411216736, 0.8446666598320007, 0.8606666922569275, 0.8550000190734863, 0.8519999980926514, 0.8579999804496765, 0.8450000286102295, 0.8636666536331177, 0.862666666507721, 0.8603333234786987, 0.8539999723434448, 0.8366666436195374, 0.8523333072662354]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [2, 0, 1, 0, 2], [0, 39, 49], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [2, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [33, 37], [0, 1], [0], [0], [0], [1], [0], [7], [0]], "fitness": -0.4211428463459015, "mapping_values": [1, 11, 6, 5, 2, 8, 4, 4, 1, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: grad", "other_info": {"loss": [2.3421642780303955, 2.782233953475952, 2.3036253452301025, 2.290841817855835, 2.2747244834899902, 2.3766632080078125, 2.3348209857940674, 2.3048481941223145, 2.3037619590759277, 2.3021557331085205, 2.2959976196289062], "accuracy": [0.2102760523557663, 0.10791176557540894, 0.1002509593963623, 0.13010171055793762, 0.15836745500564575, 0.12508255243301392, 0.13697001338005066, 0.10091137140989304, 0.0936468094587326, 0.10408136248588562, 0.12891295552253723], "val_loss": [2.8034443855285645, 2.3034915924072266, 2.2997913360595703, 2.2147865295410156, 2.358276605606079, 2.1093573570251465, 2.3061413764953613, 2.302950859069824, 2.3020217418670654, 2.300071954727173, 2.2576780319213867], "val_accuracy": [0.17866666615009308, 0.10300000011920929, 0.10000000149011612, 0.13866665959358215, 0.312333345413208, 0.4320000112056732, 0.0989999994635582, 0.10366666316986084, 0.1106666699051857, 0.12833333015441895, 0.2123333364725113]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 2, 3, 7, 3, 5, 0, 5, 9], [0, 0, 1, 0, 2], [0, 39, 39, 60], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [5, 0, 3, 1, 0], [16, 37], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 9, 4, 4, 12, 7, 5, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.square(tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 5, 7, 1, 3, 5, 5], [3, 0, 1, 0, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 9, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 24], [0, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 7, 4, 2, 2, 2, 0, 1, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.square(tf.math.add(tf.math.subtract(grad, tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(alpha), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3031435012817383, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 2, 3, 1, 3, 9, 3], [0, 0, 1, 0, 2], [0, 39, 39, 6], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 7, 3, 8, 2], [4, 3, 3, 1, 0], [16, 37], [1, 1], [0], [6], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 7, 5, 4, 10, 6, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.multiply(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(grad), tf.math.add(tf.math.multiply(grad, grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: grad, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]