[{"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.8734285831451416, "mapping_values": [1, 11, 6, 5, 2, 10, 6, 4, 1, 12, 7, 5, 2, 1, 0, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.subtract(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1.5328739881515503, 0.871519923210144, 0.7203779220581055, 0.648631751537323, 0.6028599143028259, 0.5583340525627136, 0.5320100784301758, 0.5152584910392761, 0.5094729065895081, 0.47335413098335266, 0.4640810191631317, 0.45412370562553406, 0.43765226006507874, 0.43018099665641785, 0.4222162067890167, 0.4124569892883301, 0.4051569700241089, 0.3977198898792267, 0.3951950967311859, 0.38183531165122986, 0.377605676651001, 0.36990970373153687, 0.36299043893814087, 0.3604729473590851, 0.3598603904247284, 0.3493820130825043, 0.34761613607406616, 0.33935797214508057, 0.3376021087169647, 0.3325844407081604, 0.3307414650917053, 0.3312874436378479, 0.31633901596069336, 0.3113720715045929, 0.30990374088287354, 0.3059833347797394, 0.30339258909225464, 0.3091489374637604, 0.29914191365242004, 0.2941038906574249, 0.2955728769302368, 0.2899380028247833, 0.28597334027290344], "accuracy": [0.4674415588378906, 0.6993792057037354, 0.743891179561615, 0.7667415142059326, 0.7839123010635376, 0.7993659973144531, 0.8061022162437439, 0.8149517774581909, 0.8165367841720581, 0.8364813327789307, 0.8370096683502197, 0.8408400416374207, 0.846387505531311, 0.8474441766738892, 0.850350022315979, 0.8555012345314026, 0.8597279191017151, 0.863029956817627, 0.8648791313171387, 0.8696341514587402, 0.8676528930664062, 0.8701624870300293, 0.8717474341392517, 0.8774270415306091, 0.8713511824607849, 0.8803328275680542, 0.8762382864952087, 0.8779553771018982, 0.8815215826034546, 0.8811253309249878, 0.882710337638855, 0.8820499181747437, 0.8899748921394348, 0.8886540532112122, 0.8922203183174133, 0.8952582478523254, 0.8938053250312805, 0.8927486538887024, 0.8934090733528137, 0.8988244533538818, 0.89552241563797, 0.8988244533538818, 0.9006736278533936], "val_loss": [0.8829405307769775, 0.6651959419250488, 0.5732173919677734, 0.5515308976173401, 0.5123987793922424, 0.4871732294559479, 0.4656239449977875, 0.4603786766529083, 0.4500759243965149, 0.43906208872795105, 0.42636311054229736, 0.41975414752960205, 0.4129437208175659, 0.4159772992134094, 0.40727970004081726, 0.40073612332344055, 0.3960458040237427, 0.3999771177768707, 0.39795634150505066, 0.40277358889579773, 0.3945871591567993, 0.3857056796550751, 0.37741994857788086, 0.3793829381465912, 0.3764607310295105, 0.3780857026576996, 0.3756099343299866, 0.37437695264816284, 0.37602078914642334, 0.37572339177131653, 0.3742087483406067, 0.3660438656806946, 0.3681411147117615, 0.366424560546875, 0.3653722405433655, 0.3665318489074707, 0.3663632869720459, 0.3697853684425354, 0.36513835191726685, 0.3700054883956909, 0.3614982068538666, 0.36247578263282776, 0.35917943716049194], "val_accuracy": [0.6526666879653931, 0.7540000081062317, 0.7893333435058594, 0.8036666512489319, 0.8243333101272583, 0.8320000171661377, 0.8416666388511658, 0.8410000205039978, 0.8473333120346069, 0.8519999980926514, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8579999804496765, 0.8636666536331177, 0.8676666617393494, 0.8646666407585144, 0.8656666874885559, 0.8643333315849304, 0.856333315372467, 0.8679999709129333, 0.8679999709129333, 0.871999979019165, 0.8706666827201843, 0.8709999918937683, 0.8679999709129333, 0.8736666440963745, 0.8736666440963745, 0.8690000176429749, 0.8700000047683716, 0.875, 0.875, 0.8740000128746033, 0.8756666779518127, 0.8743333220481873, 0.875, 0.8730000257492065, 0.8793333172798157, 0.8756666779518127, 0.878333330154419, 0.8769999742507935, 0.8723333477973938, 0.8759999871253967]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 1, 3, 5], [0, 0, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 2, 0, 6, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.8345714211463928, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.2069458961486816, 1.5915369987487793, 1.1287027597427368, 0.9788375496864319, 0.8850057125091553, 0.8105465769767761, 0.7926927804946899, 0.7343600392341614, 0.7338724732398987, 0.6919088363647461, 0.6862805485725403, 0.6613765358924866, 0.6628777980804443, 0.6236589550971985, 0.622114360332489, 0.613045334815979, 0.5936328768730164, 0.6023068428039551, 0.5846484303474426, 0.5657498836517334, 0.5497478246688843, 0.5734519362449646, 0.5421628355979919, 0.5365974307060242, 0.5244200229644775, 0.5345226526260376, 0.5304515957832336, 0.5105772018432617, 0.5029663443565369, 0.49873852729797363, 0.4854001998901367, 0.48443564772605896, 0.4766046106815338, 0.4758336842060089, 0.4626705050468445, 0.4606249928474426, 0.4664318263530731, 0.45985034108161926, 0.4430428445339203, 0.44916343688964844, 0.4450242519378662, 0.43026986718177795, 0.42292115092277527, 0.43569859862327576, 0.4343268573284149, 0.41355353593826294], "accuracy": [0.27103421092033386, 0.5130101442337036, 0.6015057563781738, 0.6485272645950317, 0.6763967871665955, 0.7079645991325378, 0.7018887996673584, 0.7298903465270996, 0.7293620109558105, 0.7404569983482361, 0.744419515132904, 0.7516840696334839, 0.7511557340621948, 0.767401933670044, 0.765949010848999, 0.7711002230644226, 0.783119797706604, 0.7738739848136902, 0.7833839654922485, 0.7915731072425842, 0.7957997918128967, 0.7837802171707153, 0.802271842956543, 0.7969884872436523, 0.807158887386322, 0.8037247657775879, 0.8059701323509216, 0.8124422430992126, 0.8150838613510132, 0.816008448600769, 0.8207634687423706, 0.8183859586715698, 0.8208954930305481, 0.822348415851593, 0.8313300609588623, 0.828820526599884, 0.8278959393501282, 0.8348963260650635, 0.8355567455291748, 0.8378021121025085, 0.8383304476737976, 0.8417646288871765, 0.8437458872795105, 0.8396512866020203, 0.8392550349235535, 0.8471800088882446], "val_loss": [1.905503273010254, 1.0895990133285522, 0.9030138254165649, 0.7834465503692627, 0.7206565141677856, 0.7388838529586792, 0.6682841777801514, 0.7105695009231567, 0.6329432129859924, 0.6983271241188049, 0.5869490504264832, 0.6083875298500061, 0.5768033266067505, 0.5586450099945068, 0.5460367202758789, 0.5502561330795288, 0.5443565249443054, 0.5300872325897217, 0.51381915807724, 0.49861782789230347, 0.5197664499282837, 0.5116571187973022, 0.48595112562179565, 0.5010570287704468, 0.4830520749092102, 0.4763025641441345, 0.4847325086593628, 0.4662116765975952, 0.46949100494384766, 0.46234744787216187, 0.4485416114330292, 0.46691814064979553, 0.4417991042137146, 0.44301384687423706, 0.43336865305900574, 0.4524582624435425, 0.4272388219833374, 0.434788316488266, 0.4245414137840271, 0.4172215163707733, 0.4237010180950165, 0.4193282127380371, 0.4304760694503784, 0.42326781153678894, 0.43425318598747253, 0.41394323110580444], "val_accuracy": [0.5363333225250244, 0.671999990940094, 0.6660000085830688, 0.7233333587646484, 0.7363333106040955, 0.7166666388511658, 0.7480000257492065, 0.7250000238418579, 0.7440000176429749, 0.734000027179718, 0.7820000052452087, 0.7663333415985107, 0.7833333611488342, 0.7913333177566528, 0.79666668176651, 0.7956666946411133, 0.7856666445732117, 0.7973333597183228, 0.8096666932106018, 0.8113333582878113, 0.8056666851043701, 0.8113333582878113, 0.8100000023841858, 0.8153333067893982, 0.8100000023841858, 0.8209999799728394, 0.8103333115577698, 0.8360000252723694, 0.8259999752044678, 0.8253333568572998, 0.8273333311080933, 0.8293333053588867, 0.8363333344459534, 0.8316666483879089, 0.8426666855812073, 0.831333339214325, 0.8433333039283752, 0.8326666951179504, 0.8513333201408386, 0.846666693687439, 0.8519999980926514, 0.8433333039283752, 0.8376666903495789, 0.8396666646003723, 0.82833331823349, 0.8500000238418579]}, "mapping_values": [1, 11, 6, 5, 3, 12, 7, 5, 2, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 14}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 2, 1, 6, 3, 8, 2], [2, 5, 3, 1, 0, 1], [16, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 2, 0, 2, 5, 2, 1], [0, 6, 1, 2, 0], [93, 22], [0, 1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 13, 7, 6, 1, 7, 4, 3, 1, 2, 1, 1, 0], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(grad), tf.math.add(grad, alpha)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 1, 0, 2], [0, 39, 39], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 1, 6, 3, 4, 2, 0, 7, 0, 6, 0, 8, 2, 5, 2], [2, 0, 3, 1, 0, 3, 1, 1, 3, 2, 0], [16, 1, 14], [0, 0, 0, 1, 0, 1, 0, 1], [0, 2, 0, 2, 5], [0, 6, 1], [0], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 3, 3, 1, 27, 16, 11, 3, 8, 5, 3, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.constant(0.0, shape=shape, dtype=tf.float32), grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(tf.math.subtract(beta, tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(grad, alpha), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, alpha)), tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(grad, beta))))))))), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(alpha)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5, 5, 6, 6, 7, 4, 3, 9], [0, 2, 1, 1, 1, 3, 2, 3, 1], [0, 48, 39], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 2, 0, 6, 3, 8, 2], [4, 0, 3, 1, 0], [16, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 2, 8, 8, 5, 2, 1, 6, 0, 5, 6], [0, 6, 1, 6, 0, 4], [0, 22], [1], [0], [2], [0]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 13, 9, 2, 1, 0, 1, 0, 17, 11, 6, 2, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.multiply(grad, alpha)), alpha), tf.math.square(tf.math.square(tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.pow(grad, tf.math.multiply(grad, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), alpha)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.constant(0.0, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.subtract(tf.math.divide_no_nan(alpha, grad), tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), grad))))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 2, 3, 2, 3, 5], [0, 2, 0, 1, 2], [0, 39, 39], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 5, 3, 8, 2], [2, 0, 3, 1, 0], [16, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 2, 2, 2, 5, 7], [0, 6, 1, 6, 0], [0, 22], [1], [0], [2], [0]], "fitness": -0.09114285558462143, "mapping_values": [1, 2, 1, 1, 1, 3, 2, 1, 0, 11, 6, 5, 2, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(0.0, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.constant(0.0, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.square(alpha))), tf.math.add(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3104372024536133, 2.3085055351257324, 2.3086485862731934, 2.3100974559783936, 2.3097102642059326, 2.3095927238464355], "accuracy": [0.09245806187391281, 0.0956280529499054, 0.09734513610601425, 0.08942015469074249, 0.08994849026203156, 0.0944393053650856], "val_loss": [2.3088886737823486, 2.3088886737823486, 2.3088886737823486, 2.3088886737823486, 2.3088886737823486, 2.3088886737823486], "val_accuracy": [0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341, 0.09366666525602341]}}]